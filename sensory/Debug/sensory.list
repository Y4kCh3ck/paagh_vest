
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800bf30  0800bf30  0001bf30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c52c  0800c52c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c52c  0800c52c  0001c52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c534  0800c534  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c538  0800c538  0001c538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200001d8  0800c710  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  0800c710  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed02  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3d  00000000  00000000  0002ef41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00031980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  00032610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015823  00000000  00000000  00032fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124c7  00000000  00000000  000487ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007acca  00000000  00000000  0005acb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041b0  00000000  00000000  000d597c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d9b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bf14 	.word	0x0800bf14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800bf14 	.word	0x0800bf14

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd03 	bl	8001e48 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcf5 	bl	8001e48 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fceb 	bl	8001e48 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7b 	bl	8001d7c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc71 	bl	8001d7c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb3b 	bl	8002bd4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ff94 	bl	8002494 <__aeabi_dsub>
 800056c:	f002 fb32 	bl	8002bd4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fca3 	bl	8001f10 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fb66 	bl	8002ca0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fc9a 	bl	8001f10 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 ff56 	bl	8002494 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fb1f 	bl	8002c40 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fc83 	bl	8001f10 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fb46 	bl	8002ca0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fd20 	bl	800105c <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fc3e 	bl	8002ec4 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fc39 	bl	8002ec4 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 facf 	bl	8002e88 <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 fac3 	bl	8002e88 <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800bfd8 	.word	0x0800bfd8
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800c018 	.word	0x0800c018

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f95a 	bl	8002e88 <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f002 f94c 	bl	8002e88 <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_fsub>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	46c6      	mov	lr, r8
 8000c90:	0243      	lsls	r3, r0, #9
 8000c92:	0a5b      	lsrs	r3, r3, #9
 8000c94:	0045      	lsls	r5, r0, #1
 8000c96:	00da      	lsls	r2, r3, #3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0248      	lsls	r0, r1, #9
 8000c9c:	004f      	lsls	r7, r1, #1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	0a42      	lsrs	r2, r0, #9
 8000ca2:	001e      	movs	r6, r3
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	b500      	push	{lr}
 8000ca8:	0e2d      	lsrs	r5, r5, #24
 8000caa:	0e3f      	lsrs	r7, r7, #24
 8000cac:	0fc9      	lsrs	r1, r1, #31
 8000cae:	0980      	lsrs	r0, r0, #6
 8000cb0:	2fff      	cmp	r7, #255	; 0xff
 8000cb2:	d059      	beq.n	8000d68 <__aeabi_fsub+0xdc>
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4051      	eors	r1, r2
 8000cb8:	428c      	cmp	r4, r1
 8000cba:	d039      	beq.n	8000d30 <__aeabi_fsub+0xa4>
 8000cbc:	1bea      	subs	r2, r5, r7
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	dd58      	ble.n	8000d74 <__aeabi_fsub+0xe8>
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d068      	beq.n	8000d98 <__aeabi_fsub+0x10c>
 8000cc6:	2dff      	cmp	r5, #255	; 0xff
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x40>
 8000cca:	e0d1      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	04db      	lsls	r3, r3, #19
 8000cd0:	4318      	orrs	r0, r3
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc00      	bgt.n	8000cd8 <__aeabi_fsub+0x4c>
 8000cd6:	e0e3      	b.n	8000ea0 <__aeabi_fsub+0x214>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4662      	mov	r2, ip
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0x58>
 8000ce2:	e0ac      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	099e      	lsrs	r6, r3, #6
 8000ce8:	0030      	movs	r0, r6
 8000cea:	f002 f8cd 	bl	8002e88 <__clzsi2>
 8000cee:	0033      	movs	r3, r6
 8000cf0:	3805      	subs	r0, #5
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fsub+0x6e>
 8000cf8:	e0c6      	b.n	8000e88 <__aeabi_fsub+0x1fc>
 8000cfa:	4ab2      	ldr	r2, [pc, #712]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000cfc:	1a2d      	subs	r5, r5, r0
 8000cfe:	4013      	ands	r3, r2
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	d004      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d04:	220f      	movs	r2, #15
 8000d06:	401a      	ands	r2, r3
 8000d08:	2a04      	cmp	r2, #4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_fsub+0x88>
 8000d12:	e097      	b.n	8000e44 <__aeabi_fsub+0x1b8>
 8000d14:	1c6a      	adds	r2, r5, #1
 8000d16:	2dfe      	cmp	r5, #254	; 0xfe
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x90>
 8000d1a:	e084      	b.n	8000e26 <__aeabi_fsub+0x19a>
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	0a5e      	lsrs	r6, r3, #9
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	05d0      	lsls	r0, r2, #23
 8000d24:	4330      	orrs	r0, r6
 8000d26:	07e4      	lsls	r4, r4, #31
 8000d28:	4320      	orrs	r0, r4
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	1bea      	subs	r2, r5, r7
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	dd41      	ble.n	8000dba <__aeabi_fsub+0x12e>
 8000d36:	2f00      	cmp	r7, #0
 8000d38:	d06b      	beq.n	8000e12 <__aeabi_fsub+0x186>
 8000d3a:	2dff      	cmp	r5, #255	; 0xff
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0xb4>
 8000d3e:	e097      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	04db      	lsls	r3, r3, #19
 8000d44:	4318      	orrs	r0, r3
 8000d46:	2a1b      	cmp	r2, #27
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_fsub+0xc0>
 8000d4a:	e0cc      	b.n	8000ee6 <__aeabi_fsub+0x25a>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4463      	add	r3, ip
 8000d50:	015a      	lsls	r2, r3, #5
 8000d52:	d574      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000d54:	3501      	adds	r5, #1
 8000d56:	2dff      	cmp	r5, #255	; 0xff
 8000d58:	d065      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	499a      	ldr	r1, [pc, #616]	; (8000fc8 <__aeabi_fsub+0x33c>)
 8000d5e:	401a      	ands	r2, r3
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	400b      	ands	r3, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	e7cb      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d01f      	beq.n	8000dac <__aeabi_fsub+0x120>
 8000d6c:	428c      	cmp	r4, r1
 8000d6e:	d022      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000d70:	002a      	movs	r2, r5
 8000d72:	3aff      	subs	r2, #255	; 0xff
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d035      	beq.n	8000de4 <__aeabi_fsub+0x158>
 8000d78:	1b7a      	subs	r2, r7, r5
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0xf4>
 8000d7e:	e099      	b.n	8000eb4 <__aeabi_fsub+0x228>
 8000d80:	4663      	mov	r3, ip
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0xfc>
 8000d86:	e0dd      	b.n	8000f44 <__aeabi_fsub+0x2b8>
 8000d88:	1e53      	subs	r3, r2, #1
 8000d8a:	2a01      	cmp	r2, #1
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x104>
 8000d8e:	e105      	b.n	8000f9c <__aeabi_fsub+0x310>
 8000d90:	2aff      	cmp	r2, #255	; 0xff
 8000d92:	d06b      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000d94:	001a      	movs	r2, r3
 8000d96:	e094      	b.n	8000ec2 <__aeabi_fsub+0x236>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d073      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000d9c:	1e51      	subs	r1, r2, #1
 8000d9e:	2a01      	cmp	r2, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x118>
 8000da2:	e0df      	b.n	8000f64 <__aeabi_fsub+0x2d8>
 8000da4:	2aff      	cmp	r2, #255	; 0xff
 8000da6:	d063      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000da8:	000a      	movs	r2, r1
 8000daa:	e792      	b.n	8000cd2 <__aeabi_fsub+0x46>
 8000dac:	2201      	movs	r2, #1
 8000dae:	4051      	eors	r1, r2
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000db4:	e782      	b.n	8000cbc <__aeabi_fsub+0x30>
 8000db6:	002a      	movs	r2, r5
 8000db8:	3aff      	subs	r2, #255	; 0xff
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d036      	beq.n	8000e2c <__aeabi_fsub+0x1a0>
 8000dbe:	1b7a      	subs	r2, r7, r5
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x13a>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_fsub+0x290>
 8000dc6:	2fff      	cmp	r7, #255	; 0xff
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x140>
 8000dca:	e0da      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	4661      	mov	r1, ip
 8000dd0:	04db      	lsls	r3, r3, #19
 8000dd2:	4319      	orrs	r1, r3
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2a1b      	cmp	r2, #27
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fsub+0x150>
 8000dda:	e0d4      	b.n	8000f86 <__aeabi_fsub+0x2fa>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	003d      	movs	r5, r7
 8000de0:	181b      	adds	r3, r3, r0
 8000de2:	e7b5      	b.n	8000d50 <__aeabi_fsub+0xc4>
 8000de4:	27fe      	movs	r7, #254	; 0xfe
 8000de6:	1c6a      	adds	r2, r5, #1
 8000de8:	4217      	tst	r7, r2
 8000dea:	d171      	bne.n	8000ed0 <__aeabi_fsub+0x244>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fsub+0x166>
 8000df0:	e09e      	b.n	8000f30 <__aeabi_fsub+0x2a4>
 8000df2:	4663      	mov	r3, ip
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x16e>
 8000df8:	e0d5      	b.n	8000fa6 <__aeabi_fsub+0x31a>
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x176>
 8000e00:	e78f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e02:	1a1b      	subs	r3, r3, r0
 8000e04:	015e      	lsls	r6, r3, #5
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_fsub+0x17e>
 8000e08:	e0d6      	b.n	8000fb8 <__aeabi_fsub+0x32c>
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	1ac3      	subs	r3, r0, r3
 8000e10:	e776      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d036      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000e16:	1e51      	subs	r1, r2, #1
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x192>
 8000e1c:	e09a      	b.n	8000f54 <__aeabi_fsub+0x2c8>
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d026      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e22:	000a      	movs	r2, r1
 8000e24:	e78f      	b.n	8000d46 <__aeabi_fsub+0xba>
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e77a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e2c:	27fe      	movs	r7, #254	; 0xfe
 8000e2e:	1c6a      	adds	r2, r5, #1
 8000e30:	4217      	tst	r7, r2
 8000e32:	d062      	beq.n	8000efa <__aeabi_fsub+0x26e>
 8000e34:	2aff      	cmp	r2, #255	; 0xff
 8000e36:	d0f6      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e38:	0015      	movs	r5, r2
 8000e3a:	4460      	add	r0, ip
 8000e3c:	0843      	lsrs	r3, r0, #1
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x1b8>
 8000e42:	e75f      	b.n	8000d04 <__aeabi_fsub+0x78>
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	2dff      	cmp	r5, #255	; 0xff
 8000e48:	d012      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	0a5e      	lsrs	r6, r3, #9
 8000e4e:	b2ea      	uxtb	r2, r5
 8000e50:	e767      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e52:	4662      	mov	r2, ip
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000e58:	e093      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d008      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	03d2      	lsls	r2, r2, #15
 8000e62:	4213      	tst	r3, r2
 8000e64:	d004      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e66:	4640      	mov	r0, r8
 8000e68:	4210      	tst	r0, r2
 8000e6a:	d101      	bne.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	4643      	mov	r3, r8
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0d8      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e74:	2680      	movs	r6, #128	; 0x80
 8000e76:	03f6      	lsls	r6, r6, #15
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	0276      	lsls	r6, r6, #9
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	0a76      	lsrs	r6, r6, #9
 8000e80:	e74f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e82:	4643      	mov	r3, r8
 8000e84:	0015      	movs	r5, r2
 8000e86:	e7de      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000e88:	2220      	movs	r2, #32
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	1a12      	subs	r2, r2, r0
 8000e90:	0019      	movs	r1, r3
 8000e92:	4093      	lsls	r3, r2
 8000e94:	40c1      	lsrs	r1, r0
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4193      	sbcs	r3, r2
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	e72f      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	40d1      	lsrs	r1, r2
 8000eac:	1e5a      	subs	r2, r3, #1
 8000eae:	4193      	sbcs	r3, r2
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	e712      	b.n	8000cda <__aeabi_fsub+0x4e>
 8000eb4:	2fff      	cmp	r7, #255	; 0xff
 8000eb6:	d0d9      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	4664      	mov	r4, ip
 8000ebc:	04db      	lsls	r3, r3, #19
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	2a1b      	cmp	r2, #27
 8000ec4:	dd52      	ble.n	8000f6c <__aeabi_fsub+0x2e0>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	000c      	movs	r4, r1
 8000eca:	003d      	movs	r5, r7
 8000ecc:	1ac3      	subs	r3, r0, r3
 8000ece:	e706      	b.n	8000cde <__aeabi_fsub+0x52>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	1a1e      	subs	r6, r3, r0
 8000ed4:	0173      	lsls	r3, r6, #5
 8000ed6:	d439      	bmi.n	8000f4c <__aeabi_fsub+0x2c0>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000edc:	e704      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	e71d      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	0001      	movs	r1, r0
 8000eec:	4098      	lsls	r0, r3
 8000eee:	0003      	movs	r3, r0
 8000ef0:	40d1      	lsrs	r1, r2
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	4193      	sbcs	r3, r2
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	e729      	b.n	8000d4e <__aeabi_fsub+0xc2>
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	d1a9      	bne.n	8000e52 <__aeabi_fsub+0x1c6>
 8000efe:	4663      	mov	r3, ip
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d056      	beq.n	8000fb2 <__aeabi_fsub+0x326>
 8000f04:	2200      	movs	r2, #0
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x280>
 8000f0a:	e70a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	4463      	add	r3, ip
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	d594      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f14:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000f16:	3501      	adds	r5, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	e790      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0af      	beq.n	8000e82 <__aeabi_fsub+0x1f6>
 8000f22:	1e53      	subs	r3, r2, #1
 8000f24:	2a01      	cmp	r2, #1
 8000f26:	d015      	beq.n	8000f54 <__aeabi_fsub+0x2c8>
 8000f28:	2aff      	cmp	r2, #255	; 0xff
 8000f2a:	d02a      	beq.n	8000f82 <__aeabi_fsub+0x2f6>
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	e752      	b.n	8000dd6 <__aeabi_fsub+0x14a>
 8000f30:	4662      	mov	r2, ip
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d191      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d198      	bne.n	8000e6c <__aeabi_fsub+0x1e0>
 8000f3a:	2680      	movs	r6, #128	; 0x80
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	03f6      	lsls	r6, r6, #15
 8000f42:	e6ee      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f44:	000c      	movs	r4, r1
 8000f46:	4643      	mov	r3, r8
 8000f48:	0015      	movs	r5, r2
 8000f4a:	e77c      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	000c      	movs	r4, r1
 8000f50:	1ac6      	subs	r6, r0, r3
 8000f52:	e6c9      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000f54:	0003      	movs	r3, r0
 8000f56:	4463      	add	r3, ip
 8000f58:	2501      	movs	r5, #1
 8000f5a:	015a      	lsls	r2, r3, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x2d4>
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f60:	2502      	movs	r5, #2
 8000f62:	e6fa      	b.n	8000d5a <__aeabi_fsub+0xce>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2501      	movs	r5, #1
 8000f68:	1a1b      	subs	r3, r3, r0
 8000f6a:	e6b8      	b.n	8000cde <__aeabi_fsub+0x52>
 8000f6c:	4664      	mov	r4, ip
 8000f6e:	2320      	movs	r3, #32
 8000f70:	40d4      	lsrs	r4, r2
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	4662      	mov	r2, ip
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	4193      	sbcs	r3, r2
 8000f7e:	4323      	orrs	r3, r4
 8000f80:	e7a2      	b.n	8000ec8 <__aeabi_fsub+0x23c>
 8000f82:	4643      	mov	r3, r8
 8000f84:	e774      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000f86:	4661      	mov	r1, ip
 8000f88:	2320      	movs	r3, #32
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	4662      	mov	r2, ip
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	4193      	sbcs	r3, r2
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	e720      	b.n	8000dde <__aeabi_fsub+0x152>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	1ac3      	subs	r3, r0, r3
 8000fa4:	e69b      	b.n	8000cde <__aeabi_fsub+0x52>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d099      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000faa:	000c      	movs	r4, r1
 8000fac:	4646      	mov	r6, r8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	e6b7      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb2:	4646      	mov	r6, r8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	e6b4      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0x332>
 8000fbc:	e73f      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e6ae      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fc4:	fbffffff 	.word	0xfbffffff
 8000fc8:	7dffffff 	.word	0x7dffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e04      	subs	r4, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f001 ff59 	bl	8002e88 <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0001      	movs	r1, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	d02c      	beq.n	800103e <__aeabi_ui2f+0x72>
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	408c      	lsls	r4, r1
 8000fe8:	0264      	lsls	r4, r4, #9
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4320      	orrs	r0, r4
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd0a      	ble.n	8001014 <__aeabi_ui2f+0x48>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0020      	movs	r0, r4
 8001002:	321b      	adds	r2, #27
 8001004:	4090      	lsls	r0, r2
 8001006:	0002      	movs	r2, r0
 8001008:	1e50      	subs	r0, r2, #1
 800100a:	4182      	sbcs	r2, r0
 800100c:	2005      	movs	r0, #5
 800100e:	1a40      	subs	r0, r0, r1
 8001010:	40c4      	lsrs	r4, r0
 8001012:	4314      	orrs	r4, r2
 8001014:	2905      	cmp	r1, #5
 8001016:	dc16      	bgt.n	8001046 <__aeabi_ui2f+0x7a>
 8001018:	0022      	movs	r2, r4
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <__aeabi_ui2f+0x8c>)
 800101c:	4002      	ands	r2, r0
 800101e:	0765      	lsls	r5, r4, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001022:	250f      	movs	r5, #15
 8001024:	402c      	ands	r4, r5
 8001026:	2c04      	cmp	r4, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 800102a:	3204      	adds	r2, #4
 800102c:	0154      	lsls	r4, r2, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_ui2f+0x6a>
 8001030:	239f      	movs	r3, #159	; 0x9f
 8001032:	4002      	ands	r2, r0
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	0192      	lsls	r2, r2, #6
 8001038:	0a54      	lsrs	r4, r2, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e7da      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103e:	0264      	lsls	r4, r4, #9
 8001040:	2096      	movs	r0, #150	; 0x96
 8001042:	0a64      	lsrs	r4, r4, #9
 8001044:	e7d6      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8001046:	1f4a      	subs	r2, r1, #5
 8001048:	4094      	lsls	r4, r2
 800104a:	0022      	movs	r2, r4
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <__aeabi_ui2f+0x8c>)
 800104e:	4002      	ands	r2, r0
 8001050:	0765      	lsls	r5, r4, #29
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001054:	e7e5      	b.n	8001022 <__aeabi_ui2f+0x56>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_dadd>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	464f      	mov	r7, r9
 8001060:	4646      	mov	r6, r8
 8001062:	46d6      	mov	lr, sl
 8001064:	0004      	movs	r4, r0
 8001066:	b5c0      	push	{r6, r7, lr}
 8001068:	001f      	movs	r7, r3
 800106a:	030b      	lsls	r3, r1, #12
 800106c:	0010      	movs	r0, r2
 800106e:	004e      	lsls	r6, r1, #1
 8001070:	0a5b      	lsrs	r3, r3, #9
 8001072:	0fcd      	lsrs	r5, r1, #31
 8001074:	0f61      	lsrs	r1, r4, #29
 8001076:	007a      	lsls	r2, r7, #1
 8001078:	4319      	orrs	r1, r3
 800107a:	00e3      	lsls	r3, r4, #3
 800107c:	033c      	lsls	r4, r7, #12
 800107e:	0fff      	lsrs	r7, r7, #31
 8001080:	46bc      	mov	ip, r7
 8001082:	0a64      	lsrs	r4, r4, #9
 8001084:	0f47      	lsrs	r7, r0, #29
 8001086:	4327      	orrs	r7, r4
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	00c0      	lsls	r0, r0, #3
 800108e:	46b9      	mov	r9, r7
 8001090:	4680      	mov	r8, r0
 8001092:	1ab7      	subs	r7, r6, r2
 8001094:	4565      	cmp	r5, ip
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x3e>
 8001098:	e09b      	b.n	80011d2 <__aeabi_dadd+0x176>
 800109a:	2f00      	cmp	r7, #0
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_dadd+0x44>
 800109e:	e084      	b.n	80011aa <__aeabi_dadd+0x14e>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x4a>
 80010a4:	e0be      	b.n	8001224 <__aeabi_dadd+0x1c8>
 80010a6:	4ac8      	ldr	r2, [pc, #800]	; (80013c8 <__aeabi_dadd+0x36c>)
 80010a8:	4296      	cmp	r6, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x52>
 80010ac:	e124      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	464c      	mov	r4, r9
 80010b2:	0412      	lsls	r2, r2, #16
 80010b4:	4314      	orrs	r4, r2
 80010b6:	46a1      	mov	r9, r4
 80010b8:	2f38      	cmp	r7, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x62>
 80010bc:	e167      	b.n	800138e <__aeabi_dadd+0x332>
 80010be:	2f1f      	cmp	r7, #31
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_dadd+0x68>
 80010c2:	e1d6      	b.n	8001472 <__aeabi_dadd+0x416>
 80010c4:	2220      	movs	r2, #32
 80010c6:	464c      	mov	r4, r9
 80010c8:	1bd2      	subs	r2, r2, r7
 80010ca:	4094      	lsls	r4, r2
 80010cc:	46a2      	mov	sl, r4
 80010ce:	4644      	mov	r4, r8
 80010d0:	40fc      	lsrs	r4, r7
 80010d2:	0020      	movs	r0, r4
 80010d4:	4654      	mov	r4, sl
 80010d6:	4304      	orrs	r4, r0
 80010d8:	4640      	mov	r0, r8
 80010da:	4090      	lsls	r0, r2
 80010dc:	1e42      	subs	r2, r0, #1
 80010de:	4190      	sbcs	r0, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	40fa      	lsrs	r2, r7
 80010e4:	4304      	orrs	r4, r0
 80010e6:	1a89      	subs	r1, r1, r2
 80010e8:	1b1c      	subs	r4, r3, r4
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	4192      	sbcs	r2, r2
 80010ee:	4252      	negs	r2, r2
 80010f0:	1a8b      	subs	r3, r1, r2
 80010f2:	469a      	mov	sl, r3
 80010f4:	4653      	mov	r3, sl
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0xa0>
 80010fa:	e0d4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80010fc:	4653      	mov	r3, sl
 80010fe:	025a      	lsls	r2, r3, #9
 8001100:	0a53      	lsrs	r3, r2, #9
 8001102:	469a      	mov	sl, r3
 8001104:	4653      	mov	r3, sl
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0xb0>
 800110a:	e104      	b.n	8001316 <__aeabi_dadd+0x2ba>
 800110c:	4650      	mov	r0, sl
 800110e:	f001 febb 	bl	8002e88 <__clzsi2>
 8001112:	0003      	movs	r3, r0
 8001114:	3b08      	subs	r3, #8
 8001116:	2220      	movs	r2, #32
 8001118:	0020      	movs	r0, r4
 800111a:	1ad2      	subs	r2, r2, r3
 800111c:	4651      	mov	r1, sl
 800111e:	40d0      	lsrs	r0, r2
 8001120:	4099      	lsls	r1, r3
 8001122:	0002      	movs	r2, r0
 8001124:	409c      	lsls	r4, r3
 8001126:	430a      	orrs	r2, r1
 8001128:	42b3      	cmp	r3, r6
 800112a:	da00      	bge.n	800112e <__aeabi_dadd+0xd2>
 800112c:	e102      	b.n	8001334 <__aeabi_dadd+0x2d8>
 800112e:	1b9b      	subs	r3, r3, r6
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	291f      	cmp	r1, #31
 8001134:	dd00      	ble.n	8001138 <__aeabi_dadd+0xdc>
 8001136:	e0a7      	b.n	8001288 <__aeabi_dadd+0x22c>
 8001138:	2320      	movs	r3, #32
 800113a:	0010      	movs	r0, r2
 800113c:	0026      	movs	r6, r4
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	409c      	lsls	r4, r3
 8001142:	4098      	lsls	r0, r3
 8001144:	40ce      	lsrs	r6, r1
 8001146:	40ca      	lsrs	r2, r1
 8001148:	1e63      	subs	r3, r4, #1
 800114a:	419c      	sbcs	r4, r3
 800114c:	4330      	orrs	r0, r6
 800114e:	4692      	mov	sl, r2
 8001150:	2600      	movs	r6, #0
 8001152:	4304      	orrs	r4, r0
 8001154:	0763      	lsls	r3, r4, #29
 8001156:	d009      	beq.n	800116c <__aeabi_dadd+0x110>
 8001158:	230f      	movs	r3, #15
 800115a:	4023      	ands	r3, r4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <__aeabi_dadd+0x110>
 8001160:	1d23      	adds	r3, r4, #4
 8001162:	42a3      	cmp	r3, r4
 8001164:	41a4      	sbcs	r4, r4
 8001166:	4264      	negs	r4, r4
 8001168:	44a2      	add	sl, r4
 800116a:	001c      	movs	r4, r3
 800116c:	4653      	mov	r3, sl
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_dadd+0x118>
 8001172:	e09b      	b.n	80012ac <__aeabi_dadd+0x250>
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001176:	3601      	adds	r6, #1
 8001178:	429e      	cmp	r6, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x122>
 800117c:	e0b8      	b.n	80012f0 <__aeabi_dadd+0x294>
 800117e:	4653      	mov	r3, sl
 8001180:	4992      	ldr	r1, [pc, #584]	; (80013cc <__aeabi_dadd+0x370>)
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	400b      	ands	r3, r1
 8001186:	0019      	movs	r1, r3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	4323      	orrs	r3, r4
 800118c:	0572      	lsls	r2, r6, #21
 800118e:	024c      	lsls	r4, r1, #9
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d52      	lsrs	r2, r2, #21
 8001194:	0512      	lsls	r2, r2, #20
 8001196:	07ed      	lsls	r5, r5, #31
 8001198:	4322      	orrs	r2, r4
 800119a:	432a      	orrs	r2, r5
 800119c:	0018      	movs	r0, r3
 800119e:	0011      	movs	r1, r2
 80011a0:	bce0      	pop	{r5, r6, r7}
 80011a2:	46ba      	mov	sl, r7
 80011a4:	46b1      	mov	r9, r6
 80011a6:	46a8      	mov	r8, r5
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d048      	beq.n	8001240 <__aeabi_dadd+0x1e4>
 80011ae:	1b97      	subs	r7, r2, r6
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x15a>
 80011b4:	e10e      	b.n	80013d4 <__aeabi_dadd+0x378>
 80011b6:	000c      	movs	r4, r1
 80011b8:	431c      	orrs	r4, r3
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x162>
 80011bc:	e1b7      	b.n	800152e <__aeabi_dadd+0x4d2>
 80011be:	1e7c      	subs	r4, r7, #1
 80011c0:	2f01      	cmp	r7, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x16a>
 80011c4:	e226      	b.n	8001614 <__aeabi_dadd+0x5b8>
 80011c6:	4d80      	ldr	r5, [pc, #512]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011c8:	42af      	cmp	r7, r5
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x172>
 80011cc:	e1d5      	b.n	800157a <__aeabi_dadd+0x51e>
 80011ce:	0027      	movs	r7, r4
 80011d0:	e107      	b.n	80013e2 <__aeabi_dadd+0x386>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dadd+0x17c>
 80011d6:	e0b2      	b.n	800133e <__aeabi_dadd+0x2e2>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d047      	beq.n	800126c <__aeabi_dadd+0x210>
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011de:	4296      	cmp	r6, r2
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x188>
 80011e2:	e089      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	464c      	mov	r4, r9
 80011e8:	0412      	lsls	r2, r2, #16
 80011ea:	4314      	orrs	r4, r2
 80011ec:	46a1      	mov	r9, r4
 80011ee:	2f38      	cmp	r7, #56	; 0x38
 80011f0:	dc6b      	bgt.n	80012ca <__aeabi_dadd+0x26e>
 80011f2:	2f1f      	cmp	r7, #31
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dadd+0x19c>
 80011f6:	e16e      	b.n	80014d6 <__aeabi_dadd+0x47a>
 80011f8:	003a      	movs	r2, r7
 80011fa:	4648      	mov	r0, r9
 80011fc:	3a20      	subs	r2, #32
 80011fe:	40d0      	lsrs	r0, r2
 8001200:	4684      	mov	ip, r0
 8001202:	2f20      	cmp	r7, #32
 8001204:	d007      	beq.n	8001216 <__aeabi_dadd+0x1ba>
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	4648      	mov	r0, r9
 800120a:	1bd2      	subs	r2, r2, r7
 800120c:	4090      	lsls	r0, r2
 800120e:	0002      	movs	r2, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4310      	orrs	r0, r2
 8001214:	4680      	mov	r8, r0
 8001216:	4640      	mov	r0, r8
 8001218:	1e42      	subs	r2, r0, #1
 800121a:	4190      	sbcs	r0, r2
 800121c:	4662      	mov	r2, ip
 800121e:	0004      	movs	r4, r0
 8001220:	4314      	orrs	r4, r2
 8001222:	e057      	b.n	80012d4 <__aeabi_dadd+0x278>
 8001224:	464a      	mov	r2, r9
 8001226:	4302      	orrs	r2, r0
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x1d0>
 800122a:	e103      	b.n	8001434 <__aeabi_dadd+0x3d8>
 800122c:	1e7a      	subs	r2, r7, #1
 800122e:	2f01      	cmp	r7, #1
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x1d8>
 8001232:	e193      	b.n	800155c <__aeabi_dadd+0x500>
 8001234:	4c64      	ldr	r4, [pc, #400]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001236:	42a7      	cmp	r7, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x1e0>
 800123a:	e18a      	b.n	8001552 <__aeabi_dadd+0x4f6>
 800123c:	0017      	movs	r7, r2
 800123e:	e73b      	b.n	80010b8 <__aeabi_dadd+0x5c>
 8001240:	4c63      	ldr	r4, [pc, #396]	; (80013d0 <__aeabi_dadd+0x374>)
 8001242:	1c72      	adds	r2, r6, #1
 8001244:	4222      	tst	r2, r4
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x1ee>
 8001248:	e0e0      	b.n	800140c <__aeabi_dadd+0x3b0>
 800124a:	000a      	movs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1f8>
 8001252:	e174      	b.n	800153e <__aeabi_dadd+0x4e2>
 8001254:	2a00      	cmp	r2, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1fe>
 8001258:	e1d0      	b.n	80015fc <__aeabi_dadd+0x5a0>
 800125a:	464a      	mov	r2, r9
 800125c:	4302      	orrs	r2, r0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x206>
 8001260:	e1e3      	b.n	800162a <__aeabi_dadd+0x5ce>
 8001262:	074a      	lsls	r2, r1, #29
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	08c9      	lsrs	r1, r1, #3
 800126a:	e029      	b.n	80012c0 <__aeabi_dadd+0x264>
 800126c:	464a      	mov	r2, r9
 800126e:	4302      	orrs	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x218>
 8001272:	e17d      	b.n	8001570 <__aeabi_dadd+0x514>
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	2f01      	cmp	r7, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x220>
 800127a:	e0e0      	b.n	800143e <__aeabi_dadd+0x3e2>
 800127c:	4c52      	ldr	r4, [pc, #328]	; (80013c8 <__aeabi_dadd+0x36c>)
 800127e:	42a7      	cmp	r7, r4
 8001280:	d100      	bne.n	8001284 <__aeabi_dadd+0x228>
 8001282:	e166      	b.n	8001552 <__aeabi_dadd+0x4f6>
 8001284:	0017      	movs	r7, r2
 8001286:	e7b2      	b.n	80011ee <__aeabi_dadd+0x192>
 8001288:	0010      	movs	r0, r2
 800128a:	3b1f      	subs	r3, #31
 800128c:	40d8      	lsrs	r0, r3
 800128e:	2920      	cmp	r1, #32
 8001290:	d003      	beq.n	800129a <__aeabi_dadd+0x23e>
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	409a      	lsls	r2, r3
 8001298:	4314      	orrs	r4, r2
 800129a:	1e63      	subs	r3, r4, #1
 800129c:	419c      	sbcs	r4, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	469a      	mov	sl, r3
 80012a4:	4304      	orrs	r4, r0
 80012a6:	0763      	lsls	r3, r4, #29
 80012a8:	d000      	beq.n	80012ac <__aeabi_dadd+0x250>
 80012aa:	e755      	b.n	8001158 <__aeabi_dadd+0xfc>
 80012ac:	4652      	mov	r2, sl
 80012ae:	08e3      	lsrs	r3, r4, #3
 80012b0:	0752      	lsls	r2, r2, #29
 80012b2:	4313      	orrs	r3, r2
 80012b4:	4652      	mov	r2, sl
 80012b6:	0037      	movs	r7, r6
 80012b8:	08d1      	lsrs	r1, r2, #3
 80012ba:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012bc:	4297      	cmp	r7, r2
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x2a4>
 80012c0:	0309      	lsls	r1, r1, #12
 80012c2:	057a      	lsls	r2, r7, #21
 80012c4:	0b0c      	lsrs	r4, r1, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	e764      	b.n	8001194 <__aeabi_dadd+0x138>
 80012ca:	4642      	mov	r2, r8
 80012cc:	464c      	mov	r4, r9
 80012ce:	4314      	orrs	r4, r2
 80012d0:	1e62      	subs	r2, r4, #1
 80012d2:	4194      	sbcs	r4, r2
 80012d4:	18e4      	adds	r4, r4, r3
 80012d6:	429c      	cmp	r4, r3
 80012d8:	4192      	sbcs	r2, r2
 80012da:	4252      	negs	r2, r2
 80012dc:	4692      	mov	sl, r2
 80012de:	448a      	add	sl, r1
 80012e0:	4653      	mov	r3, sl
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	d5df      	bpl.n	80012a6 <__aeabi_dadd+0x24a>
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x294>
 80012ee:	e0b3      	b.n	8001458 <__aeabi_dadd+0x3fc>
 80012f0:	0032      	movs	r2, r6
 80012f2:	2400      	movs	r4, #0
 80012f4:	2300      	movs	r3, #0
 80012f6:	e74d      	b.n	8001194 <__aeabi_dadd+0x138>
 80012f8:	074a      	lsls	r2, r1, #29
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	001a      	movs	r2, r3
 8001302:	430a      	orrs	r2, r1
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x2ac>
 8001306:	e200      	b.n	800170a <__aeabi_dadd+0x6ae>
 8001308:	2480      	movs	r4, #128	; 0x80
 800130a:	0324      	lsls	r4, r4, #12
 800130c:	430c      	orrs	r4, r1
 800130e:	0324      	lsls	r4, r4, #12
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001312:	0b24      	lsrs	r4, r4, #12
 8001314:	e73e      	b.n	8001194 <__aeabi_dadd+0x138>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fdb6 	bl	8002e88 <__clzsi2>
 800131c:	0003      	movs	r3, r0
 800131e:	3318      	adds	r3, #24
 8001320:	2b1f      	cmp	r3, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x2ca>
 8001324:	e6f7      	b.n	8001116 <__aeabi_dadd+0xba>
 8001326:	0022      	movs	r2, r4
 8001328:	3808      	subs	r0, #8
 800132a:	4082      	lsls	r2, r0
 800132c:	2400      	movs	r4, #0
 800132e:	42b3      	cmp	r3, r6
 8001330:	db00      	blt.n	8001334 <__aeabi_dadd+0x2d8>
 8001332:	e6fc      	b.n	800112e <__aeabi_dadd+0xd2>
 8001334:	1af6      	subs	r6, r6, r3
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <__aeabi_dadd+0x370>)
 8001338:	401a      	ands	r2, r3
 800133a:	4692      	mov	sl, r2
 800133c:	e70a      	b.n	8001154 <__aeabi_dadd+0xf8>
 800133e:	2f00      	cmp	r7, #0
 8001340:	d02b      	beq.n	800139a <__aeabi_dadd+0x33e>
 8001342:	1b97      	subs	r7, r2, r6
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x2ee>
 8001348:	e0b8      	b.n	80014bc <__aeabi_dadd+0x460>
 800134a:	4c1f      	ldr	r4, [pc, #124]	; (80013c8 <__aeabi_dadd+0x36c>)
 800134c:	42a2      	cmp	r2, r4
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x2f6>
 8001350:	e11c      	b.n	800158c <__aeabi_dadd+0x530>
 8001352:	2480      	movs	r4, #128	; 0x80
 8001354:	0424      	lsls	r4, r4, #16
 8001356:	4321      	orrs	r1, r4
 8001358:	2f38      	cmp	r7, #56	; 0x38
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0x302>
 800135c:	e11e      	b.n	800159c <__aeabi_dadd+0x540>
 800135e:	2f1f      	cmp	r7, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x308>
 8001362:	e19e      	b.n	80016a2 <__aeabi_dadd+0x646>
 8001364:	2620      	movs	r6, #32
 8001366:	000c      	movs	r4, r1
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	0018      	movs	r0, r3
 800136c:	40b3      	lsls	r3, r6
 800136e:	40b4      	lsls	r4, r6
 8001370:	40f8      	lsrs	r0, r7
 8001372:	1e5e      	subs	r6, r3, #1
 8001374:	41b3      	sbcs	r3, r6
 8001376:	40f9      	lsrs	r1, r7
 8001378:	4304      	orrs	r4, r0
 800137a:	431c      	orrs	r4, r3
 800137c:	4489      	add	r9, r1
 800137e:	4444      	add	r4, r8
 8001380:	4544      	cmp	r4, r8
 8001382:	419b      	sbcs	r3, r3
 8001384:	425b      	negs	r3, r3
 8001386:	444b      	add	r3, r9
 8001388:	469a      	mov	sl, r3
 800138a:	0016      	movs	r6, r2
 800138c:	e7a8      	b.n	80012e0 <__aeabi_dadd+0x284>
 800138e:	4642      	mov	r2, r8
 8001390:	464c      	mov	r4, r9
 8001392:	4314      	orrs	r4, r2
 8001394:	1e62      	subs	r2, r4, #1
 8001396:	4194      	sbcs	r4, r2
 8001398:	e6a6      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800139a:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__aeabi_dadd+0x374>)
 800139c:	1c72      	adds	r2, r6, #1
 800139e:	4222      	tst	r2, r4
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x348>
 80013a2:	e0a8      	b.n	80014f6 <__aeabi_dadd+0x49a>
 80013a4:	000a      	movs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x352>
 80013ac:	e10a      	b.n	80015c4 <__aeabi_dadd+0x568>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x358>
 80013b2:	e15e      	b.n	8001672 <__aeabi_dadd+0x616>
 80013b4:	464a      	mov	r2, r9
 80013b6:	4302      	orrs	r2, r0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x360>
 80013ba:	e161      	b.n	8001680 <__aeabi_dadd+0x624>
 80013bc:	074a      	lsls	r2, r1, #29
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	08c9      	lsrs	r1, r1, #3
 80013c4:	e77c      	b.n	80012c0 <__aeabi_dadd+0x264>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	4ccf      	ldr	r4, [pc, #828]	; (8001714 <__aeabi_dadd+0x6b8>)
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x380>
 80013da:	e0ce      	b.n	800157a <__aeabi_dadd+0x51e>
 80013dc:	2480      	movs	r4, #128	; 0x80
 80013de:	0424      	lsls	r4, r4, #16
 80013e0:	4321      	orrs	r1, r4
 80013e2:	2f38      	cmp	r7, #56	; 0x38
 80013e4:	dc5b      	bgt.n	800149e <__aeabi_dadd+0x442>
 80013e6:	2f1f      	cmp	r7, #31
 80013e8:	dd00      	ble.n	80013ec <__aeabi_dadd+0x390>
 80013ea:	e0dc      	b.n	80015a6 <__aeabi_dadd+0x54a>
 80013ec:	2520      	movs	r5, #32
 80013ee:	000c      	movs	r4, r1
 80013f0:	1bed      	subs	r5, r5, r7
 80013f2:	001e      	movs	r6, r3
 80013f4:	40ab      	lsls	r3, r5
 80013f6:	40ac      	lsls	r4, r5
 80013f8:	40fe      	lsrs	r6, r7
 80013fa:	1e5d      	subs	r5, r3, #1
 80013fc:	41ab      	sbcs	r3, r5
 80013fe:	4334      	orrs	r4, r6
 8001400:	40f9      	lsrs	r1, r7
 8001402:	431c      	orrs	r4, r3
 8001404:	464b      	mov	r3, r9
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4699      	mov	r9, r3
 800140a:	e04c      	b.n	80014a6 <__aeabi_dadd+0x44a>
 800140c:	464a      	mov	r2, r9
 800140e:	1a1c      	subs	r4, r3, r0
 8001410:	1a88      	subs	r0, r1, r2
 8001412:	42a3      	cmp	r3, r4
 8001414:	4192      	sbcs	r2, r2
 8001416:	4252      	negs	r2, r2
 8001418:	4692      	mov	sl, r2
 800141a:	0002      	movs	r2, r0
 800141c:	4650      	mov	r0, sl
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	4692      	mov	sl, r2
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	d478      	bmi.n	8001518 <__aeabi_dadd+0x4bc>
 8001426:	4653      	mov	r3, sl
 8001428:	4323      	orrs	r3, r4
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3d2>
 800142c:	e66a      	b.n	8001104 <__aeabi_dadd+0xa8>
 800142e:	2100      	movs	r1, #0
 8001430:	2500      	movs	r5, #0
 8001432:	e745      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001434:	074a      	lsls	r2, r1, #29
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	4313      	orrs	r3, r2
 800143a:	08c9      	lsrs	r1, r1, #3
 800143c:	e73d      	b.n	80012ba <__aeabi_dadd+0x25e>
 800143e:	181c      	adds	r4, r3, r0
 8001440:	429c      	cmp	r4, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	4449      	add	r1, r9
 8001446:	468a      	mov	sl, r1
 8001448:	425b      	negs	r3, r3
 800144a:	449a      	add	sl, r3
 800144c:	4653      	mov	r3, sl
 800144e:	2601      	movs	r6, #1
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x3fa>
 8001454:	e727      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001456:	2602      	movs	r6, #2
 8001458:	4652      	mov	r2, sl
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <__aeabi_dadd+0x6bc>)
 800145c:	2101      	movs	r1, #1
 800145e:	401a      	ands	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4021      	ands	r1, r4
 8001464:	0862      	lsrs	r2, r4, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	07dc      	lsls	r4, r3, #31
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	469a      	mov	sl, r3
 800146e:	4314      	orrs	r4, r2
 8001470:	e670      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001472:	003a      	movs	r2, r7
 8001474:	464c      	mov	r4, r9
 8001476:	3a20      	subs	r2, #32
 8001478:	40d4      	lsrs	r4, r2
 800147a:	46a4      	mov	ip, r4
 800147c:	2f20      	cmp	r7, #32
 800147e:	d007      	beq.n	8001490 <__aeabi_dadd+0x434>
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	4648      	mov	r0, r9
 8001484:	1bd2      	subs	r2, r2, r7
 8001486:	4090      	lsls	r0, r2
 8001488:	0002      	movs	r2, r0
 800148a:	4640      	mov	r0, r8
 800148c:	4310      	orrs	r0, r2
 800148e:	4680      	mov	r8, r0
 8001490:	4640      	mov	r0, r8
 8001492:	1e42      	subs	r2, r0, #1
 8001494:	4190      	sbcs	r0, r2
 8001496:	4662      	mov	r2, ip
 8001498:	0004      	movs	r4, r0
 800149a:	4314      	orrs	r4, r2
 800149c:	e624      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800149e:	4319      	orrs	r1, r3
 80014a0:	000c      	movs	r4, r1
 80014a2:	1e63      	subs	r3, r4, #1
 80014a4:	419c      	sbcs	r4, r3
 80014a6:	4643      	mov	r3, r8
 80014a8:	1b1c      	subs	r4, r3, r4
 80014aa:	45a0      	cmp	r8, r4
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	4649      	mov	r1, r9
 80014b0:	425b      	negs	r3, r3
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	469a      	mov	sl, r3
 80014b6:	4665      	mov	r5, ip
 80014b8:	0016      	movs	r6, r2
 80014ba:	e61b      	b.n	80010f4 <__aeabi_dadd+0x98>
 80014bc:	000c      	movs	r4, r1
 80014be:	431c      	orrs	r4, r3
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x468>
 80014c2:	e0c7      	b.n	8001654 <__aeabi_dadd+0x5f8>
 80014c4:	1e7c      	subs	r4, r7, #1
 80014c6:	2f01      	cmp	r7, #1
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x470>
 80014ca:	e0f9      	b.n	80016c0 <__aeabi_dadd+0x664>
 80014cc:	4e91      	ldr	r6, [pc, #580]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014ce:	42b7      	cmp	r7, r6
 80014d0:	d05c      	beq.n	800158c <__aeabi_dadd+0x530>
 80014d2:	0027      	movs	r7, r4
 80014d4:	e740      	b.n	8001358 <__aeabi_dadd+0x2fc>
 80014d6:	2220      	movs	r2, #32
 80014d8:	464c      	mov	r4, r9
 80014da:	4640      	mov	r0, r8
 80014dc:	1bd2      	subs	r2, r2, r7
 80014de:	4094      	lsls	r4, r2
 80014e0:	40f8      	lsrs	r0, r7
 80014e2:	4304      	orrs	r4, r0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4090      	lsls	r0, r2
 80014e8:	1e42      	subs	r2, r0, #1
 80014ea:	4190      	sbcs	r0, r2
 80014ec:	464a      	mov	r2, r9
 80014ee:	40fa      	lsrs	r2, r7
 80014f0:	4304      	orrs	r4, r0
 80014f2:	1889      	adds	r1, r1, r2
 80014f4:	e6ee      	b.n	80012d4 <__aeabi_dadd+0x278>
 80014f6:	4c87      	ldr	r4, [pc, #540]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014f8:	42a2      	cmp	r2, r4
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x4a2>
 80014fc:	e6f9      	b.n	80012f2 <__aeabi_dadd+0x296>
 80014fe:	1818      	adds	r0, r3, r0
 8001500:	4298      	cmp	r0, r3
 8001502:	419b      	sbcs	r3, r3
 8001504:	4449      	add	r1, r9
 8001506:	425b      	negs	r3, r3
 8001508:	18cb      	adds	r3, r1, r3
 800150a:	07dc      	lsls	r4, r3, #31
 800150c:	0840      	lsrs	r0, r0, #1
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	469a      	mov	sl, r3
 8001512:	0016      	movs	r6, r2
 8001514:	4304      	orrs	r4, r0
 8001516:	e6c6      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001518:	4642      	mov	r2, r8
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	45a0      	cmp	r8, r4
 800151e:	4180      	sbcs	r0, r0
 8001520:	464b      	mov	r3, r9
 8001522:	4240      	negs	r0, r0
 8001524:	1a59      	subs	r1, r3, r1
 8001526:	1a0b      	subs	r3, r1, r0
 8001528:	469a      	mov	sl, r3
 800152a:	4665      	mov	r5, ip
 800152c:	e5ea      	b.n	8001104 <__aeabi_dadd+0xa8>
 800152e:	464b      	mov	r3, r9
 8001530:	464a      	mov	r2, r9
 8001532:	08c0      	lsrs	r0, r0, #3
 8001534:	075b      	lsls	r3, r3, #29
 8001536:	4665      	mov	r5, ip
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e6bd      	b.n	80012ba <__aeabi_dadd+0x25e>
 800153e:	2a00      	cmp	r2, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x4e8>
 8001542:	e08e      	b.n	8001662 <__aeabi_dadd+0x606>
 8001544:	464b      	mov	r3, r9
 8001546:	4303      	orrs	r3, r0
 8001548:	d117      	bne.n	800157a <__aeabi_dadd+0x51e>
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	2500      	movs	r5, #0
 800154e:	0309      	lsls	r1, r1, #12
 8001550:	e6da      	b.n	8001308 <__aeabi_dadd+0x2ac>
 8001552:	074a      	lsls	r2, r1, #29
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4313      	orrs	r3, r2
 8001558:	08c9      	lsrs	r1, r1, #3
 800155a:	e6d1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800155c:	1a1c      	subs	r4, r3, r0
 800155e:	464a      	mov	r2, r9
 8001560:	42a3      	cmp	r3, r4
 8001562:	419b      	sbcs	r3, r3
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	425b      	negs	r3, r3
 8001568:	1acb      	subs	r3, r1, r3
 800156a:	469a      	mov	sl, r3
 800156c:	2601      	movs	r6, #1
 800156e:	e5c1      	b.n	80010f4 <__aeabi_dadd+0x98>
 8001570:	074a      	lsls	r2, r1, #29
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4313      	orrs	r3, r2
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	e69f      	b.n	80012ba <__aeabi_dadd+0x25e>
 800157a:	4643      	mov	r3, r8
 800157c:	08d8      	lsrs	r0, r3, #3
 800157e:	464b      	mov	r3, r9
 8001580:	464a      	mov	r2, r9
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	4665      	mov	r5, ip
 8001586:	4303      	orrs	r3, r0
 8001588:	08d1      	lsrs	r1, r2, #3
 800158a:	e6b9      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800158c:	4643      	mov	r3, r8
 800158e:	08d8      	lsrs	r0, r3, #3
 8001590:	464b      	mov	r3, r9
 8001592:	464a      	mov	r2, r9
 8001594:	075b      	lsls	r3, r3, #29
 8001596:	4303      	orrs	r3, r0
 8001598:	08d1      	lsrs	r1, r2, #3
 800159a:	e6b1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800159c:	4319      	orrs	r1, r3
 800159e:	000c      	movs	r4, r1
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	e6eb      	b.n	800137e <__aeabi_dadd+0x322>
 80015a6:	003c      	movs	r4, r7
 80015a8:	000d      	movs	r5, r1
 80015aa:	3c20      	subs	r4, #32
 80015ac:	40e5      	lsrs	r5, r4
 80015ae:	2f20      	cmp	r7, #32
 80015b0:	d003      	beq.n	80015ba <__aeabi_dadd+0x55e>
 80015b2:	2440      	movs	r4, #64	; 0x40
 80015b4:	1be4      	subs	r4, r4, r7
 80015b6:	40a1      	lsls	r1, r4
 80015b8:	430b      	orrs	r3, r1
 80015ba:	001c      	movs	r4, r3
 80015bc:	1e63      	subs	r3, r4, #1
 80015be:	419c      	sbcs	r4, r3
 80015c0:	432c      	orrs	r4, r5
 80015c2:	e770      	b.n	80014a6 <__aeabi_dadd+0x44a>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d0e1      	beq.n	800158c <__aeabi_dadd+0x530>
 80015c8:	464a      	mov	r2, r9
 80015ca:	4302      	orrs	r2, r0
 80015cc:	d0c1      	beq.n	8001552 <__aeabi_dadd+0x4f6>
 80015ce:	074a      	lsls	r2, r1, #29
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4211      	tst	r1, r2
 80015dc:	d008      	beq.n	80015f0 <__aeabi_dadd+0x594>
 80015de:	4648      	mov	r0, r9
 80015e0:	08c4      	lsrs	r4, r0, #3
 80015e2:	4214      	tst	r4, r2
 80015e4:	d104      	bne.n	80015f0 <__aeabi_dadd+0x594>
 80015e6:	4643      	mov	r3, r8
 80015e8:	0021      	movs	r1, r4
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	0742      	lsls	r2, r0, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	0f5a      	lsrs	r2, r3, #29
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	0752      	lsls	r2, r2, #29
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	e681      	b.n	8001300 <__aeabi_dadd+0x2a4>
 80015fc:	464b      	mov	r3, r9
 80015fe:	4303      	orrs	r3, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x5a8>
 8001602:	e714      	b.n	800142e <__aeabi_dadd+0x3d2>
 8001604:	464b      	mov	r3, r9
 8001606:	464a      	mov	r2, r9
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	4665      	mov	r5, ip
 800160e:	4303      	orrs	r3, r0
 8001610:	08d1      	lsrs	r1, r2, #3
 8001612:	e655      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001614:	1ac4      	subs	r4, r0, r3
 8001616:	45a0      	cmp	r8, r4
 8001618:	4180      	sbcs	r0, r0
 800161a:	464b      	mov	r3, r9
 800161c:	4240      	negs	r0, r0
 800161e:	1a59      	subs	r1, r3, r1
 8001620:	1a0b      	subs	r3, r1, r0
 8001622:	469a      	mov	sl, r3
 8001624:	4665      	mov	r5, ip
 8001626:	2601      	movs	r6, #1
 8001628:	e564      	b.n	80010f4 <__aeabi_dadd+0x98>
 800162a:	1a1c      	subs	r4, r3, r0
 800162c:	464a      	mov	r2, r9
 800162e:	42a3      	cmp	r3, r4
 8001630:	4180      	sbcs	r0, r0
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	4240      	negs	r0, r0
 8001636:	1a12      	subs	r2, r2, r0
 8001638:	4692      	mov	sl, r2
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	d549      	bpl.n	80016d2 <__aeabi_dadd+0x676>
 800163e:	4642      	mov	r2, r8
 8001640:	1ad4      	subs	r4, r2, r3
 8001642:	45a0      	cmp	r8, r4
 8001644:	4180      	sbcs	r0, r0
 8001646:	464b      	mov	r3, r9
 8001648:	4240      	negs	r0, r0
 800164a:	1a59      	subs	r1, r3, r1
 800164c:	1a0b      	subs	r3, r1, r0
 800164e:	469a      	mov	sl, r3
 8001650:	4665      	mov	r5, ip
 8001652:	e57f      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001654:	464b      	mov	r3, r9
 8001656:	464a      	mov	r2, r9
 8001658:	08c0      	lsrs	r0, r0, #3
 800165a:	075b      	lsls	r3, r3, #29
 800165c:	4303      	orrs	r3, r0
 800165e:	08d1      	lsrs	r1, r2, #3
 8001660:	e62b      	b.n	80012ba <__aeabi_dadd+0x25e>
 8001662:	464a      	mov	r2, r9
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4302      	orrs	r2, r0
 8001668:	d138      	bne.n	80016dc <__aeabi_dadd+0x680>
 800166a:	074a      	lsls	r2, r1, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c9      	lsrs	r1, r1, #3
 8001670:	e646      	b.n	8001300 <__aeabi_dadd+0x2a4>
 8001672:	464b      	mov	r3, r9
 8001674:	464a      	mov	r2, r9
 8001676:	08c0      	lsrs	r0, r0, #3
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	4303      	orrs	r3, r0
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	e61f      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001680:	181c      	adds	r4, r3, r0
 8001682:	429c      	cmp	r4, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	4449      	add	r1, r9
 8001688:	468a      	mov	sl, r1
 800168a:	425b      	negs	r3, r3
 800168c:	449a      	add	sl, r3
 800168e:	4653      	mov	r3, sl
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dadd+0x63a>
 8001694:	e607      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001696:	4652      	mov	r2, sl
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <__aeabi_dadd+0x6bc>)
 800169a:	2601      	movs	r6, #1
 800169c:	401a      	ands	r2, r3
 800169e:	4692      	mov	sl, r2
 80016a0:	e601      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016a2:	003c      	movs	r4, r7
 80016a4:	000e      	movs	r6, r1
 80016a6:	3c20      	subs	r4, #32
 80016a8:	40e6      	lsrs	r6, r4
 80016aa:	2f20      	cmp	r7, #32
 80016ac:	d003      	beq.n	80016b6 <__aeabi_dadd+0x65a>
 80016ae:	2440      	movs	r4, #64	; 0x40
 80016b0:	1be4      	subs	r4, r4, r7
 80016b2:	40a1      	lsls	r1, r4
 80016b4:	430b      	orrs	r3, r1
 80016b6:	001c      	movs	r4, r3
 80016b8:	1e63      	subs	r3, r4, #1
 80016ba:	419c      	sbcs	r4, r3
 80016bc:	4334      	orrs	r4, r6
 80016be:	e65e      	b.n	800137e <__aeabi_dadd+0x322>
 80016c0:	4443      	add	r3, r8
 80016c2:	4283      	cmp	r3, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4449      	add	r1, r9
 80016c8:	468a      	mov	sl, r1
 80016ca:	4240      	negs	r0, r0
 80016cc:	001c      	movs	r4, r3
 80016ce:	4482      	add	sl, r0
 80016d0:	e6bc      	b.n	800144c <__aeabi_dadd+0x3f0>
 80016d2:	4653      	mov	r3, sl
 80016d4:	4323      	orrs	r3, r4
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x67e>
 80016d8:	e6a9      	b.n	800142e <__aeabi_dadd+0x3d2>
 80016da:	e5e4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016dc:	074a      	lsls	r2, r1, #29
 80016de:	4313      	orrs	r3, r2
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	4211      	tst	r1, r2
 80016e8:	d009      	beq.n	80016fe <__aeabi_dadd+0x6a2>
 80016ea:	4648      	mov	r0, r9
 80016ec:	08c4      	lsrs	r4, r0, #3
 80016ee:	4214      	tst	r4, r2
 80016f0:	d105      	bne.n	80016fe <__aeabi_dadd+0x6a2>
 80016f2:	4643      	mov	r3, r8
 80016f4:	4665      	mov	r5, ip
 80016f6:	0021      	movs	r1, r4
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0742      	lsls	r2, r0, #29
 80016fc:	4313      	orrs	r3, r2
 80016fe:	0f5a      	lsrs	r2, r3, #29
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	0752      	lsls	r2, r2, #29
 8001706:	4313      	orrs	r3, r2
 8001708:	e5fa      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800170a:	2300      	movs	r3, #0
 800170c:	4a01      	ldr	r2, [pc, #4]	; (8001714 <__aeabi_dadd+0x6b8>)
 800170e:	001c      	movs	r4, r3
 8001710:	e540      	b.n	8001194 <__aeabi_dadd+0x138>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff
 8001718:	ff7fffff 	.word	0xff7fffff

0800171c <__aeabi_ddiv>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	030c      	lsls	r4, r1, #12
 800172a:	001f      	movs	r7, r3
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	4681      	mov	r9, r0
 8001730:	4692      	mov	sl, r2
 8001732:	0005      	movs	r5, r0
 8001734:	b085      	sub	sp, #20
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d5b      	lsrs	r3, r3, #21
 800173a:	0fce      	lsrs	r6, r1, #31
 800173c:	2b00      	cmp	r3, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x26>
 8001740:	e152      	b.n	80019e8 <__aeabi_ddiv+0x2cc>
 8001742:	4ad2      	ldr	r2, [pc, #840]	; (8001a8c <__aeabi_ddiv+0x370>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0x2e>
 8001748:	e16e      	b.n	8001a28 <__aeabi_ddiv+0x30c>
 800174a:	0f42      	lsrs	r2, r0, #29
 800174c:	00e4      	lsls	r4, r4, #3
 800174e:	4314      	orrs	r4, r2
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	4322      	orrs	r2, r4
 8001756:	4690      	mov	r8, r2
 8001758:	4acd      	ldr	r2, [pc, #820]	; (8001a90 <__aeabi_ddiv+0x374>)
 800175a:	00c5      	lsls	r5, r0, #3
 800175c:	4693      	mov	fp, r2
 800175e:	449b      	add	fp, r3
 8001760:	2300      	movs	r3, #0
 8001762:	4699      	mov	r9, r3
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	033c      	lsls	r4, r7, #12
 8001768:	007b      	lsls	r3, r7, #1
 800176a:	4650      	mov	r0, sl
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	0fff      	lsrs	r7, r7, #31
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x5c>
 8001776:	e11a      	b.n	80019ae <__aeabi_ddiv+0x292>
 8001778:	4ac4      	ldr	r2, [pc, #784]	; (8001a8c <__aeabi_ddiv+0x370>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x64>
 800177e:	e15e      	b.n	8001a3e <__aeabi_ddiv+0x322>
 8001780:	0f42      	lsrs	r2, r0, #29
 8001782:	00e4      	lsls	r4, r4, #3
 8001784:	4322      	orrs	r2, r4
 8001786:	2480      	movs	r4, #128	; 0x80
 8001788:	0424      	lsls	r4, r4, #16
 800178a:	4314      	orrs	r4, r2
 800178c:	4ac0      	ldr	r2, [pc, #768]	; (8001a90 <__aeabi_ddiv+0x374>)
 800178e:	00c1      	lsls	r1, r0, #3
 8001790:	4694      	mov	ip, r2
 8001792:	465a      	mov	r2, fp
 8001794:	4463      	add	r3, ip
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	469b      	mov	fp, r3
 800179a:	2000      	movs	r0, #0
 800179c:	0033      	movs	r3, r6
 800179e:	407b      	eors	r3, r7
 80017a0:	469a      	mov	sl, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d827      	bhi.n	80017f8 <__aeabi_ddiv+0xdc>
 80017a8:	4aba      	ldr	r2, [pc, #744]	; (8001a94 <__aeabi_ddiv+0x378>)
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	58d3      	ldr	r3, [r2, r3]
 80017ae:	469f      	mov	pc, r3
 80017b0:	46b2      	mov	sl, r6
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d016      	beq.n	80017e6 <__aeabi_ddiv+0xca>
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0xa2>
 80017bc:	e287      	b.n	8001cce <__aeabi_ddiv+0x5b2>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d000      	beq.n	80017c4 <__aeabi_ddiv+0xa8>
 80017c2:	e0d5      	b.n	8001970 <__aeabi_ddiv+0x254>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	4313      	orrs	r3, r2
 80017ce:	4652      	mov	r2, sl
 80017d0:	07d2      	lsls	r2, r2, #31
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0028      	movs	r0, r5
 80017d6:	0019      	movs	r1, r3
 80017d8:	b005      	add	sp, #20
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	2200      	movs	r2, #0
 80017e8:	2500      	movs	r5, #0
 80017ea:	4ba8      	ldr	r3, [pc, #672]	; (8001a8c <__aeabi_ddiv+0x370>)
 80017ec:	e7ed      	b.n	80017ca <__aeabi_ddiv+0xae>
 80017ee:	46ba      	mov	sl, r7
 80017f0:	46a0      	mov	r8, r4
 80017f2:	000d      	movs	r5, r1
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	e7dc      	b.n	80017b2 <__aeabi_ddiv+0x96>
 80017f8:	4544      	cmp	r4, r8
 80017fa:	d200      	bcs.n	80017fe <__aeabi_ddiv+0xe2>
 80017fc:	e1c4      	b.n	8001b88 <__aeabi_ddiv+0x46c>
 80017fe:	d100      	bne.n	8001802 <__aeabi_ddiv+0xe6>
 8001800:	e1bf      	b.n	8001b82 <__aeabi_ddiv+0x466>
 8001802:	2301      	movs	r3, #1
 8001804:	425b      	negs	r3, r3
 8001806:	469c      	mov	ip, r3
 8001808:	002e      	movs	r6, r5
 800180a:	4640      	mov	r0, r8
 800180c:	2500      	movs	r5, #0
 800180e:	44e3      	add	fp, ip
 8001810:	0223      	lsls	r3, r4, #8
 8001812:	0e0c      	lsrs	r4, r1, #24
 8001814:	431c      	orrs	r4, r3
 8001816:	0c1b      	lsrs	r3, r3, #16
 8001818:	4699      	mov	r9, r3
 800181a:	0423      	lsls	r3, r4, #16
 800181c:	020a      	lsls	r2, r1, #8
 800181e:	0c1f      	lsrs	r7, r3, #16
 8001820:	4649      	mov	r1, r9
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9701      	str	r7, [sp, #4]
 8001826:	f7fe fd11 	bl	800024c <__aeabi_uidivmod>
 800182a:	0002      	movs	r2, r0
 800182c:	437a      	muls	r2, r7
 800182e:	040b      	lsls	r3, r1, #16
 8001830:	0c31      	lsrs	r1, r6, #16
 8001832:	4680      	mov	r8, r0
 8001834:	4319      	orrs	r1, r3
 8001836:	428a      	cmp	r2, r1
 8001838:	d907      	bls.n	800184a <__aeabi_ddiv+0x12e>
 800183a:	2301      	movs	r3, #1
 800183c:	425b      	negs	r3, r3
 800183e:	469c      	mov	ip, r3
 8001840:	1909      	adds	r1, r1, r4
 8001842:	44e0      	add	r8, ip
 8001844:	428c      	cmp	r4, r1
 8001846:	d800      	bhi.n	800184a <__aeabi_ddiv+0x12e>
 8001848:	e201      	b.n	8001c4e <__aeabi_ddiv+0x532>
 800184a:	1a88      	subs	r0, r1, r2
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fcfd 	bl	800024c <__aeabi_uidivmod>
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	0436      	lsls	r6, r6, #16
 8001856:	4342      	muls	r2, r0
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	0003      	movs	r3, r0
 800185e:	430e      	orrs	r6, r1
 8001860:	42b2      	cmp	r2, r6
 8001862:	d904      	bls.n	800186e <__aeabi_ddiv+0x152>
 8001864:	1936      	adds	r6, r6, r4
 8001866:	3b01      	subs	r3, #1
 8001868:	42b4      	cmp	r4, r6
 800186a:	d800      	bhi.n	800186e <__aeabi_ddiv+0x152>
 800186c:	e1e9      	b.n	8001c42 <__aeabi_ddiv+0x526>
 800186e:	1ab0      	subs	r0, r6, r2
 8001870:	4642      	mov	r2, r8
 8001872:	9e00      	ldr	r6, [sp, #0]
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	0c33      	lsrs	r3, r6, #16
 800187a:	001f      	movs	r7, r3
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4690      	mov	r8, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	0413      	lsls	r3, r2, #16
 8001884:	0432      	lsls	r2, r6, #16
 8001886:	0c16      	lsrs	r6, r2, #16
 8001888:	0032      	movs	r2, r6
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	9603      	str	r6, [sp, #12]
 8001890:	437b      	muls	r3, r7
 8001892:	434e      	muls	r6, r1
 8001894:	4379      	muls	r1, r7
 8001896:	0c17      	lsrs	r7, r2, #16
 8001898:	46bc      	mov	ip, r7
 800189a:	199b      	adds	r3, r3, r6
 800189c:	4463      	add	r3, ip
 800189e:	429e      	cmp	r6, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x18e>
 80018a2:	2680      	movs	r6, #128	; 0x80
 80018a4:	0276      	lsls	r6, r6, #9
 80018a6:	46b4      	mov	ip, r6
 80018a8:	4461      	add	r1, ip
 80018aa:	0c1e      	lsrs	r6, r3, #16
 80018ac:	1871      	adds	r1, r6, r1
 80018ae:	0416      	lsls	r6, r2, #16
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c36      	lsrs	r6, r6, #16
 80018b4:	199e      	adds	r6, r3, r6
 80018b6:	4288      	cmp	r0, r1
 80018b8:	d302      	bcc.n	80018c0 <__aeabi_ddiv+0x1a4>
 80018ba:	d112      	bne.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018bc:	42b5      	cmp	r5, r6
 80018be:	d210      	bcs.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018c0:	4643      	mov	r3, r8
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	469c      	mov	ip, r3
 80018c8:	4465      	add	r5, ip
 80018ca:	001f      	movs	r7, r3
 80018cc:	429d      	cmp	r5, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	425b      	negs	r3, r3
 80018d2:	191b      	adds	r3, r3, r4
 80018d4:	18c0      	adds	r0, r0, r3
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x1c0>
 80018da:	e19e      	b.n	8001c1a <__aeabi_ddiv+0x4fe>
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x1c4>
 80018de:	e199      	b.n	8001c14 <__aeabi_ddiv+0x4f8>
 80018e0:	4690      	mov	r8, r2
 80018e2:	1bae      	subs	r6, r5, r6
 80018e4:	42b5      	cmp	r5, r6
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	1a40      	subs	r0, r0, r1
 80018ea:	426d      	negs	r5, r5
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x1d8>
 80018f2:	e1d2      	b.n	8001c9a <__aeabi_ddiv+0x57e>
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fca9 	bl	800024c <__aeabi_uidivmod>
 80018fa:	9a01      	ldr	r2, [sp, #4]
 80018fc:	040b      	lsls	r3, r1, #16
 80018fe:	4342      	muls	r2, r0
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	0005      	movs	r5, r0
 8001904:	4319      	orrs	r1, r3
 8001906:	428a      	cmp	r2, r1
 8001908:	d900      	bls.n	800190c <__aeabi_ddiv+0x1f0>
 800190a:	e16c      	b.n	8001be6 <__aeabi_ddiv+0x4ca>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	4649      	mov	r1, r9
 8001910:	f7fe fc9c 	bl	800024c <__aeabi_uidivmod>
 8001914:	9a01      	ldr	r2, [sp, #4]
 8001916:	0436      	lsls	r6, r6, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c36      	lsrs	r6, r6, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430e      	orrs	r6, r1
 8001922:	42b2      	cmp	r2, r6
 8001924:	d900      	bls.n	8001928 <__aeabi_ddiv+0x20c>
 8001926:	e153      	b.n	8001bd0 <__aeabi_ddiv+0x4b4>
 8001928:	9803      	ldr	r0, [sp, #12]
 800192a:	1ab6      	subs	r6, r6, r2
 800192c:	0002      	movs	r2, r0
 800192e:	042d      	lsls	r5, r5, #16
 8001930:	431d      	orrs	r5, r3
 8001932:	9f02      	ldr	r7, [sp, #8]
 8001934:	042b      	lsls	r3, r5, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	435a      	muls	r2, r3
 800193a:	437b      	muls	r3, r7
 800193c:	469c      	mov	ip, r3
 800193e:	0c29      	lsrs	r1, r5, #16
 8001940:	4348      	muls	r0, r1
 8001942:	0c13      	lsrs	r3, r2, #16
 8001944:	4484      	add	ip, r0
 8001946:	4463      	add	r3, ip
 8001948:	4379      	muls	r1, r7
 800194a:	4298      	cmp	r0, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_ddiv+0x23a>
 800194e:	2080      	movs	r0, #128	; 0x80
 8001950:	0240      	lsls	r0, r0, #9
 8001952:	4684      	mov	ip, r0
 8001954:	4461      	add	r1, ip
 8001956:	0c18      	lsrs	r0, r3, #16
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	1840      	adds	r0, r0, r1
 8001960:	189b      	adds	r3, r3, r2
 8001962:	4286      	cmp	r6, r0
 8001964:	d200      	bcs.n	8001968 <__aeabi_ddiv+0x24c>
 8001966:	e100      	b.n	8001b6a <__aeabi_ddiv+0x44e>
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x250>
 800196a:	e0fb      	b.n	8001b64 <__aeabi_ddiv+0x448>
 800196c:	2301      	movs	r3, #1
 800196e:	431d      	orrs	r5, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <__aeabi_ddiv+0x37c>)
 8001972:	445b      	add	r3, fp
 8001974:	2b00      	cmp	r3, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_ddiv+0x25e>
 8001978:	e0aa      	b.n	8001ad0 <__aeabi_ddiv+0x3b4>
 800197a:	076a      	lsls	r2, r5, #29
 800197c:	d000      	beq.n	8001980 <__aeabi_ddiv+0x264>
 800197e:	e13d      	b.n	8001bfc <__aeabi_ddiv+0x4e0>
 8001980:	08e9      	lsrs	r1, r5, #3
 8001982:	4642      	mov	r2, r8
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	d506      	bpl.n	8001996 <__aeabi_ddiv+0x27a>
 8001988:	4642      	mov	r2, r8
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <__aeabi_ddiv+0x380>)
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	4690      	mov	r8, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	445b      	add	r3, fp
 8001996:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <__aeabi_ddiv+0x384>)
 8001998:	4293      	cmp	r3, r2
 800199a:	dd00      	ble.n	800199e <__aeabi_ddiv+0x282>
 800199c:	e723      	b.n	80017e6 <__aeabi_ddiv+0xca>
 800199e:	4642      	mov	r2, r8
 80019a0:	055b      	lsls	r3, r3, #21
 80019a2:	0755      	lsls	r5, r2, #29
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	430d      	orrs	r5, r1
 80019a8:	0b12      	lsrs	r2, r2, #12
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	e70d      	b.n	80017ca <__aeabi_ddiv+0xae>
 80019ae:	4651      	mov	r1, sl
 80019b0:	4321      	orrs	r1, r4
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x29a>
 80019b4:	e07c      	b.n	8001ab0 <__aeabi_ddiv+0x394>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x2a0>
 80019ba:	e0fb      	b.n	8001bb4 <__aeabi_ddiv+0x498>
 80019bc:	0020      	movs	r0, r4
 80019be:	f001 fa63 	bl	8002e88 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	3a0b      	subs	r2, #11
 80019c6:	231d      	movs	r3, #29
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	4652      	mov	r2, sl
 80019cc:	0001      	movs	r1, r0
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	4653      	mov	r3, sl
 80019d2:	3908      	subs	r1, #8
 80019d4:	408b      	lsls	r3, r1
 80019d6:	408c      	lsls	r4, r1
 80019d8:	0019      	movs	r1, r3
 80019da:	4314      	orrs	r4, r2
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <__aeabi_ddiv+0x388>)
 80019de:	4458      	add	r0, fp
 80019e0:	469b      	mov	fp, r3
 80019e2:	4483      	add	fp, r0
 80019e4:	2000      	movs	r0, #0
 80019e6:	e6d9      	b.n	800179c <__aeabi_ddiv+0x80>
 80019e8:	0003      	movs	r3, r0
 80019ea:	4323      	orrs	r3, r4
 80019ec:	4698      	mov	r8, r3
 80019ee:	d044      	beq.n	8001a7a <__aeabi_ddiv+0x35e>
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x2da>
 80019f4:	e0cf      	b.n	8001b96 <__aeabi_ddiv+0x47a>
 80019f6:	0020      	movs	r0, r4
 80019f8:	f001 fa46 	bl	8002e88 <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0002      	movs	r2, r0
 8001a00:	390b      	subs	r1, #11
 8001a02:	231d      	movs	r3, #29
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	0010      	movs	r0, r2
 8001a0a:	40d9      	lsrs	r1, r3
 8001a0c:	3808      	subs	r0, #8
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	464d      	mov	r5, r9
 8001a14:	4323      	orrs	r3, r4
 8001a16:	4698      	mov	r8, r3
 8001a18:	4085      	lsls	r5, r0
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_ddiv+0x38c>)
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	469b      	mov	fp, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4699      	mov	r9, r3
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	e69e      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	d11d      	bne.n	8001a6c <__aeabi_ddiv+0x350>
 8001a30:	2208      	movs	r2, #8
 8001a32:	469b      	mov	fp, r3
 8001a34:	2302      	movs	r3, #2
 8001a36:	2500      	movs	r5, #0
 8001a38:	4691      	mov	r9, r2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e693      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a3e:	4651      	mov	r1, sl
 8001a40:	4321      	orrs	r1, r4
 8001a42:	d109      	bne.n	8001a58 <__aeabi_ddiv+0x33c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	464a      	mov	r2, r9
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a4c:	4691      	mov	r9, r2
 8001a4e:	469c      	mov	ip, r3
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	44e3      	add	fp, ip
 8001a56:	e6a1      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	464a      	mov	r2, r9
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a60:	4691      	mov	r9, r2
 8001a62:	469c      	mov	ip, r3
 8001a64:	4651      	mov	r1, sl
 8001a66:	2003      	movs	r0, #3
 8001a68:	44e3      	add	fp, ip
 8001a6a:	e697      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	469b      	mov	fp, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	46a0      	mov	r8, r4
 8001a74:	4691      	mov	r9, r2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	e675      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	469b      	mov	fp, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	2500      	movs	r5, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	e66d      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	000007ff 	.word	0x000007ff
 8001a90:	fffffc01 	.word	0xfffffc01
 8001a94:	0800c058 	.word	0x0800c058
 8001a98:	000003ff 	.word	0x000003ff
 8001a9c:	feffffff 	.word	0xfeffffff
 8001aa0:	000007fe 	.word	0x000007fe
 8001aa4:	000003f3 	.word	0x000003f3
 8001aa8:	fffffc0d 	.word	0xfffffc0d
 8001aac:	fffff801 	.word	0xfffff801
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2400      	movs	r4, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	e66e      	b.n	800179c <__aeabi_ddiv+0x80>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001ac8:	0312      	lsls	r2, r2, #12
 8001aca:	e67e      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001acc:	2501      	movs	r5, #1
 8001ace:	426d      	negs	r5, r5
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	2a38      	cmp	r2, #56	; 0x38
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_ddiv+0x3be>
 8001ad8:	e674      	b.n	80017c4 <__aeabi_ddiv+0xa8>
 8001ada:	2a1f      	cmp	r2, #31
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_ddiv+0x3c4>
 8001ade:	e0bd      	b.n	8001c5c <__aeabi_ddiv+0x540>
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	1acb      	subs	r3, r1, r3
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	000b      	movs	r3, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d004      	beq.n	8001afa <__aeabi_ddiv+0x3de>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <__aeabi_ddiv+0x5d0>)
 8001af4:	445a      	add	r2, fp
 8001af6:	4091      	lsls	r1, r2
 8001af8:	430d      	orrs	r5, r1
 8001afa:	0029      	movs	r1, r5
 8001afc:	1e4a      	subs	r2, r1, #1
 8001afe:	4191      	sbcs	r1, r2
 8001b00:	4319      	orrs	r1, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	400d      	ands	r5, r1
 8001b0a:	420b      	tst	r3, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x3f4>
 8001b0e:	e0d0      	b.n	8001cb2 <__aeabi_ddiv+0x596>
 8001b10:	220f      	movs	r2, #15
 8001b12:	2300      	movs	r3, #0
 8001b14:	400a      	ands	r2, r1
 8001b16:	2a04      	cmp	r2, #4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x400>
 8001b1a:	e0c7      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b1c:	1d0a      	adds	r2, r1, #4
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	4189      	sbcs	r1, r1
 8001b22:	4249      	negs	r1, r1
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	0011      	movs	r1, r2
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	d400      	bmi.n	8001b2e <__aeabi_ddiv+0x412>
 8001b2c:	e0be      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2200      	movs	r2, #0
 8001b32:	2500      	movs	r5, #0
 8001b34:	e649      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	4643      	mov	r3, r8
 8001b3a:	0312      	lsls	r2, r2, #12
 8001b3c:	4213      	tst	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <__aeabi_ddiv+0x436>
 8001b40:	4214      	tst	r4, r2
 8001b42:	d106      	bne.n	8001b52 <__aeabi_ddiv+0x436>
 8001b44:	4322      	orrs	r2, r4
 8001b46:	0312      	lsls	r2, r2, #12
 8001b48:	46ba      	mov	sl, r7
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b4e:	0b12      	lsrs	r2, r2, #12
 8001b50:	e63b      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	4643      	mov	r3, r8
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	46b2      	mov	sl, r6
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b60:	0b12      	lsrs	r2, r2, #12
 8001b62:	e632      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0x44e>
 8001b68:	e702      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001b6a:	19a6      	adds	r6, r4, r6
 8001b6c:	1e6a      	subs	r2, r5, #1
 8001b6e:	42a6      	cmp	r6, r4
 8001b70:	d200      	bcs.n	8001b74 <__aeabi_ddiv+0x458>
 8001b72:	e089      	b.n	8001c88 <__aeabi_ddiv+0x56c>
 8001b74:	4286      	cmp	r6, r0
 8001b76:	d200      	bcs.n	8001b7a <__aeabi_ddiv+0x45e>
 8001b78:	e09f      	b.n	8001cba <__aeabi_ddiv+0x59e>
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x462>
 8001b7c:	e0af      	b.n	8001cde <__aeabi_ddiv+0x5c2>
 8001b7e:	0015      	movs	r5, r2
 8001b80:	e6f4      	b.n	800196c <__aeabi_ddiv+0x250>
 8001b82:	42a9      	cmp	r1, r5
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x46c>
 8001b86:	e63c      	b.n	8001802 <__aeabi_ddiv+0xe6>
 8001b88:	4643      	mov	r3, r8
 8001b8a:	07de      	lsls	r6, r3, #31
 8001b8c:	0858      	lsrs	r0, r3, #1
 8001b8e:	086b      	lsrs	r3, r5, #1
 8001b90:	431e      	orrs	r6, r3
 8001b92:	07ed      	lsls	r5, r5, #31
 8001b94:	e63c      	b.n	8001810 <__aeabi_ddiv+0xf4>
 8001b96:	f001 f977 	bl	8002e88 <__clzsi2>
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3115      	adds	r1, #21
 8001ba0:	3220      	adds	r2, #32
 8001ba2:	291c      	cmp	r1, #28
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_ddiv+0x48c>
 8001ba6:	e72c      	b.n	8001a02 <__aeabi_ddiv+0x2e6>
 8001ba8:	464b      	mov	r3, r9
 8001baa:	3808      	subs	r0, #8
 8001bac:	4083      	lsls	r3, r0
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	e732      	b.n	8001a1a <__aeabi_ddiv+0x2fe>
 8001bb4:	f001 f968 	bl	8002e88 <__clzsi2>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	3215      	adds	r2, #21
 8001bbe:	3020      	adds	r0, #32
 8001bc0:	2a1c      	cmp	r2, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x4aa>
 8001bc4:	e6ff      	b.n	80019c6 <__aeabi_ddiv+0x2aa>
 8001bc6:	4654      	mov	r4, sl
 8001bc8:	3b08      	subs	r3, #8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	409c      	lsls	r4, r3
 8001bce:	e705      	b.n	80019dc <__aeabi_ddiv+0x2c0>
 8001bd0:	1936      	adds	r6, r6, r4
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	42b4      	cmp	r4, r6
 8001bd6:	d900      	bls.n	8001bda <__aeabi_ddiv+0x4be>
 8001bd8:	e6a6      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001bda:	42b2      	cmp	r2, r6
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x4c4>
 8001bde:	e6a3      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be0:	1e83      	subs	r3, r0, #2
 8001be2:	1936      	adds	r6, r6, r4
 8001be4:	e6a0      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be6:	1909      	adds	r1, r1, r4
 8001be8:	3d01      	subs	r5, #1
 8001bea:	428c      	cmp	r4, r1
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x4d4>
 8001bee:	e68d      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x4da>
 8001bf4:	e68a      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf6:	1e85      	subs	r5, r0, #2
 8001bf8:	1909      	adds	r1, r1, r4
 8001bfa:	e687      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	402a      	ands	r2, r5
 8001c00:	2a04      	cmp	r2, #4
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x4ea>
 8001c04:	e6bc      	b.n	8001980 <__aeabi_ddiv+0x264>
 8001c06:	1d29      	adds	r1, r5, #4
 8001c08:	42a9      	cmp	r1, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	426d      	negs	r5, r5
 8001c0e:	08c9      	lsrs	r1, r1, #3
 8001c10:	44a8      	add	r8, r5
 8001c12:	e6b6      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001c14:	42af      	cmp	r7, r5
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x4fe>
 8001c18:	e662      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c1a:	4281      	cmp	r1, r0
 8001c1c:	d804      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x506>
 8001c20:	e65e      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c22:	42ae      	cmp	r6, r5
 8001c24:	d800      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c26:	e65b      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	44e0      	add	r8, ip
 8001c32:	469c      	mov	ip, r3
 8001c34:	4465      	add	r5, ip
 8001c36:	429d      	cmp	r5, r3
 8001c38:	419b      	sbcs	r3, r3
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	191b      	adds	r3, r3, r4
 8001c3e:	18c0      	adds	r0, r0, r3
 8001c40:	e64f      	b.n	80018e2 <__aeabi_ddiv+0x1c6>
 8001c42:	42b2      	cmp	r2, r6
 8001c44:	d800      	bhi.n	8001c48 <__aeabi_ddiv+0x52c>
 8001c46:	e612      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	1936      	adds	r6, r6, r4
 8001c4c:	e60f      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d800      	bhi.n	8001c54 <__aeabi_ddiv+0x538>
 8001c52:	e5fa      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c54:	1e83      	subs	r3, r0, #2
 8001c56:	4698      	mov	r8, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	e5f6      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <__aeabi_ddiv+0x5d4>)
 8001c5e:	0028      	movs	r0, r5
 8001c60:	445b      	add	r3, fp
 8001c62:	4641      	mov	r1, r8
 8001c64:	409d      	lsls	r5, r3
 8001c66:	4099      	lsls	r1, r3
 8001c68:	40d0      	lsrs	r0, r2
 8001c6a:	1e6b      	subs	r3, r5, #1
 8001c6c:	419d      	sbcs	r5, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	4301      	orrs	r1, r0
 8001c72:	4329      	orrs	r1, r5
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	074a      	lsls	r2, r1, #29
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x560>
 8001c7a:	e755      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	400a      	ands	r2, r1
 8001c80:	2a04      	cmp	r2, #4
 8001c82:	d000      	beq.n	8001c86 <__aeabi_ddiv+0x56a>
 8001c84:	e74a      	b.n	8001b1c <__aeabi_ddiv+0x400>
 8001c86:	e74f      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	4286      	cmp	r6, r0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_ddiv+0x574>
 8001c8e:	e66d      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c90:	9a00      	ldr	r2, [sp, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x57c>
 8001c96:	e669      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c98:	e66a      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <__aeabi_ddiv+0x5d8>)
 8001c9c:	445b      	add	r3, fp
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_ddiv+0x588>
 8001ca2:	e713      	b.n	8001acc <__aeabi_ddiv+0x3b0>
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	44a8      	add	r8, r5
 8001caa:	e66a      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001cac:	075d      	lsls	r5, r3, #29
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	0b1a      	lsrs	r2, r3, #12
 8001cb2:	08c9      	lsrs	r1, r1, #3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	430d      	orrs	r5, r1
 8001cb8:	e587      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cba:	9900      	ldr	r1, [sp, #0]
 8001cbc:	3d02      	subs	r5, #2
 8001cbe:	004a      	lsls	r2, r1, #1
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	41bf      	sbcs	r7, r7
 8001cc4:	427f      	negs	r7, r7
 8001cc6:	193f      	adds	r7, r7, r4
 8001cc8:	19f6      	adds	r6, r6, r7
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	e7dd      	b.n	8001c8a <__aeabi_ddiv+0x56e>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	0312      	lsls	r2, r2, #12
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001cda:	0b12      	lsrs	r2, r2, #12
 8001cdc:	e575      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cde:	9900      	ldr	r1, [sp, #0]
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d3ea      	bcc.n	8001cba <__aeabi_ddiv+0x59e>
 8001ce4:	0015      	movs	r5, r2
 8001ce6:	e7d3      	b.n	8001c90 <__aeabi_ddiv+0x574>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e
 8001cf4:	000003ff 	.word	0x000003ff

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	464e      	mov	r6, r9
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	46de      	mov	lr, fp
 8001d00:	4657      	mov	r7, sl
 8001d02:	4690      	mov	r8, r2
 8001d04:	b5e0      	push	{r5, r6, r7, lr}
 8001d06:	0017      	movs	r7, r2
 8001d08:	031a      	lsls	r2, r3, #12
 8001d0a:	0b12      	lsrs	r2, r2, #12
 8001d0c:	0005      	movs	r5, r0
 8001d0e:	4684      	mov	ip, r0
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <__eqdf2+0x80>)
 8001d12:	030e      	lsls	r6, r1, #12
 8001d14:	004c      	lsls	r4, r1, #1
 8001d16:	4691      	mov	r9, r2
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	0b36      	lsrs	r6, r6, #12
 8001d20:	0d64      	lsrs	r4, r4, #21
 8001d22:	0fc9      	lsrs	r1, r1, #31
 8001d24:	0d52      	lsrs	r2, r2, #21
 8001d26:	4284      	cmp	r4, r0
 8001d28:	d019      	beq.n	8001d5e <__eqdf2+0x66>
 8001d2a:	4282      	cmp	r2, r0
 8001d2c:	d010      	beq.n	8001d50 <__eqdf2+0x58>
 8001d2e:	2001      	movs	r0, #1
 8001d30:	4294      	cmp	r4, r2
 8001d32:	d10e      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d34:	454e      	cmp	r6, r9
 8001d36:	d10c      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	45c4      	cmp	ip, r8
 8001d3c:	d109      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d3e:	4559      	cmp	r1, fp
 8001d40:	d017      	beq.n	8001d72 <__eqdf2+0x7a>
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	d105      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d46:	0030      	movs	r0, r6
 8001d48:	4328      	orrs	r0, r5
 8001d4a:	1e43      	subs	r3, r0, #1
 8001d4c:	4198      	sbcs	r0, r3
 8001d4e:	e000      	b.n	8001d52 <__eqdf2+0x5a>
 8001d50:	2001      	movs	r0, #1
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	0033      	movs	r3, r6
 8001d60:	2001      	movs	r0, #1
 8001d62:	432b      	orrs	r3, r5
 8001d64:	d1f5      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d1f3      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	433b      	orrs	r3, r7
 8001d6e:	d1f0      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d70:	e7e2      	b.n	8001d38 <__eqdf2+0x40>
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7ed      	b.n	8001d52 <__eqdf2+0x5a>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__gedf2>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4647      	mov	r7, r8
 8001d80:	46ce      	mov	lr, r9
 8001d82:	0004      	movs	r4, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	0016      	movs	r6, r2
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	4d2d      	ldr	r5, [pc, #180]	; (8001e44 <__gedf2+0xc8>)
 8001d8e:	004a      	lsls	r2, r1, #1
 8001d90:	4699      	mov	r9, r3
 8001d92:	b580      	push	{r7, lr}
 8001d94:	0043      	lsls	r3, r0, #1
 8001d96:	030f      	lsls	r7, r1, #12
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	0fc0      	lsrs	r0, r0, #31
 8001da6:	42aa      	cmp	r2, r5
 8001da8:	d021      	beq.n	8001dee <__gedf2+0x72>
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	d013      	beq.n	8001dd6 <__gedf2+0x5a>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d122      	bne.n	8001df8 <__gedf2+0x7c>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <__gedf2+0x42>
 8001db8:	464d      	mov	r5, r9
 8001dba:	432e      	orrs	r6, r5
 8001dbc:	d022      	beq.n	8001e04 <__gedf2+0x88>
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d010      	beq.n	8001de4 <__gedf2+0x68>
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	d022      	beq.n	8001e0c <__gedf2+0x90>
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	3901      	subs	r1, #1
 8001dca:	4008      	ands	r0, r1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	bcc0      	pop	{r6, r7}
 8001dd0:	46b9      	mov	r9, r7
 8001dd2:	46b0      	mov	r8, r6
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	432e      	orrs	r6, r5
 8001dda:	d129      	bne.n	8001e30 <__gedf2+0xb4>
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d1f0      	bne.n	8001dc2 <__gedf2+0x46>
 8001de0:	433c      	orrs	r4, r7
 8001de2:	d1ee      	bne.n	8001dc2 <__gedf2+0x46>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1f2      	bne.n	8001dce <__gedf2+0x52>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7ef      	b.n	8001dce <__gedf2+0x52>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d11d      	bne.n	8001e30 <__gedf2+0xb4>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d0ee      	beq.n	8001dd6 <__gedf2+0x5a>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e2      	bne.n	8001dc2 <__gedf2+0x46>
 8001dfc:	464c      	mov	r4, r9
 8001dfe:	4326      	orrs	r6, r4
 8001e00:	d1df      	bne.n	8001dc2 <__gedf2+0x46>
 8001e02:	e7e0      	b.n	8001dc6 <__gedf2+0x4a>
 8001e04:	2000      	movs	r0, #0
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	d0e1      	beq.n	8001dce <__gedf2+0x52>
 8001e0a:	e7dc      	b.n	8001dc6 <__gedf2+0x4a>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc0a      	bgt.n	8001e26 <__gedf2+0xaa>
 8001e10:	dbe8      	blt.n	8001de4 <__gedf2+0x68>
 8001e12:	454f      	cmp	r7, r9
 8001e14:	d8d7      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e16:	d00e      	beq.n	8001e36 <__gedf2+0xba>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	454f      	cmp	r7, r9
 8001e1c:	d2d7      	bcs.n	8001dce <__gedf2+0x52>
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d0e2      	beq.n	8001de8 <__gedf2+0x6c>
 8001e22:	0008      	movs	r0, r1
 8001e24:	e7d3      	b.n	8001dce <__gedf2+0x52>
 8001e26:	4243      	negs	r3, r0
 8001e28:	4158      	adcs	r0, r3
 8001e2a:	0040      	lsls	r0, r0, #1
 8001e2c:	3801      	subs	r0, #1
 8001e2e:	e7ce      	b.n	8001dce <__gedf2+0x52>
 8001e30:	2002      	movs	r0, #2
 8001e32:	4240      	negs	r0, r0
 8001e34:	e7cb      	b.n	8001dce <__gedf2+0x52>
 8001e36:	45c4      	cmp	ip, r8
 8001e38:	d8c5      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c4      	cmp	ip, r8
 8001e3e:	d2c6      	bcs.n	8001dce <__gedf2+0x52>
 8001e40:	e7ed      	b.n	8001e1e <__gedf2+0xa2>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__ledf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4647      	mov	r7, r8
 8001e4c:	46ce      	mov	lr, r9
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0016      	movs	r6, r2
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	4d2c      	ldr	r5, [pc, #176]	; (8001f0c <__ledf2+0xc4>)
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	0043      	lsls	r3, r0, #1
 8001e62:	030f      	lsls	r7, r1, #12
 8001e64:	46a4      	mov	ip, r4
 8001e66:	46b0      	mov	r8, r6
 8001e68:	0b3f      	lsrs	r7, r7, #12
 8001e6a:	0d52      	lsrs	r2, r2, #21
 8001e6c:	0fc9      	lsrs	r1, r1, #31
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fc0      	lsrs	r0, r0, #31
 8001e72:	42aa      	cmp	r2, r5
 8001e74:	d00d      	beq.n	8001e92 <__ledf2+0x4a>
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d010      	beq.n	8001e9c <__ledf2+0x54>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d127      	bne.n	8001ece <__ledf2+0x86>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <__ledf2+0x60>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10e      	bne.n	8001ea8 <__ledf2+0x60>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d015      	beq.n	8001ebc <__ledf2+0x74>
 8001e90:	e00e      	b.n	8001eb0 <__ledf2+0x68>
 8001e92:	003d      	movs	r5, r7
 8001e94:	4325      	orrs	r5, r4
 8001e96:	d110      	bne.n	8001eba <__ledf2+0x72>
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d118      	bne.n	8001ece <__ledf2+0x86>
 8001e9c:	464d      	mov	r5, r9
 8001e9e:	432e      	orrs	r6, r5
 8001ea0:	d10b      	bne.n	8001eba <__ledf2+0x72>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <__ledf2+0x64>
 8001ea6:	433c      	orrs	r4, r7
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	d00b      	beq.n	8001ec4 <__ledf2+0x7c>
 8001eac:	4281      	cmp	r1, r0
 8001eae:	d014      	beq.n	8001eda <__ledf2+0x92>
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	3901      	subs	r1, #1
 8001eb4:	4008      	ands	r0, r1
 8001eb6:	3801      	subs	r0, #1
 8001eb8:	e000      	b.n	8001ebc <__ledf2+0x74>
 8001eba:	2002      	movs	r0, #2
 8001ebc:	bcc0      	pop	{r6, r7}
 8001ebe:	46b9      	mov	r9, r7
 8001ec0:	46b0      	mov	r8, r6
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1f9      	bne.n	8001ebc <__ledf2+0x74>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	e7f6      	b.n	8001ebc <__ledf2+0x74>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ec      	bne.n	8001eac <__ledf2+0x64>
 8001ed2:	464c      	mov	r4, r9
 8001ed4:	4326      	orrs	r6, r4
 8001ed6:	d1e9      	bne.n	8001eac <__ledf2+0x64>
 8001ed8:	e7ea      	b.n	8001eb0 <__ledf2+0x68>
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dd04      	ble.n	8001ee8 <__ledf2+0xa0>
 8001ede:	4243      	negs	r3, r0
 8001ee0:	4158      	adcs	r0, r3
 8001ee2:	0040      	lsls	r0, r0, #1
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	e7e9      	b.n	8001ebc <__ledf2+0x74>
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbeb      	blt.n	8001ec4 <__ledf2+0x7c>
 8001eec:	454f      	cmp	r7, r9
 8001eee:	d8df      	bhi.n	8001eb0 <__ledf2+0x68>
 8001ef0:	d006      	beq.n	8001f00 <__ledf2+0xb8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	454f      	cmp	r7, r9
 8001ef6:	d2e1      	bcs.n	8001ebc <__ledf2+0x74>
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d0e5      	beq.n	8001ec8 <__ledf2+0x80>
 8001efc:	0008      	movs	r0, r1
 8001efe:	e7dd      	b.n	8001ebc <__ledf2+0x74>
 8001f00:	45c4      	cmp	ip, r8
 8001f02:	d8d5      	bhi.n	8001eb0 <__ledf2+0x68>
 8001f04:	2000      	movs	r0, #0
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d2d8      	bcs.n	8001ebc <__ledf2+0x74>
 8001f0a:	e7f5      	b.n	8001ef8 <__ledf2+0xb0>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__aeabi_dmul>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	001f      	movs	r7, r3
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	0b1b      	lsrs	r3, r3, #12
 8001f22:	469b      	mov	fp, r3
 8001f24:	004d      	lsls	r5, r1, #1
 8001f26:	0fcb      	lsrs	r3, r1, #31
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	b087      	sub	sp, #28
 8001f30:	0d6d      	lsrs	r5, r5, #21
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dmul+0x26>
 8001f34:	e1cd      	b.n	80022d2 <__aeabi_dmul+0x3c2>
 8001f36:	4bce      	ldr	r3, [pc, #824]	; (8002270 <__aeabi_dmul+0x360>)
 8001f38:	429d      	cmp	r5, r3
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2e>
 8001f3c:	e1e9      	b.n	8002312 <__aeabi_dmul+0x402>
 8001f3e:	465a      	mov	r2, fp
 8001f40:	0f43      	lsrs	r3, r0, #29
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0412      	lsls	r2, r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	00c3      	lsls	r3, r0, #3
 8001f4e:	469a      	mov	sl, r3
 8001f50:	4bc8      	ldr	r3, [pc, #800]	; (8002274 <__aeabi_dmul+0x364>)
 8001f52:	4693      	mov	fp, r2
 8001f54:	469c      	mov	ip, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4465      	add	r5, ip
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	033c      	lsls	r4, r7, #12
 8001f60:	007b      	lsls	r3, r7, #1
 8001f62:	4648      	mov	r0, r9
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	0fff      	lsrs	r7, r7, #31
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x60>
 8001f6e:	e189      	b.n	8002284 <__aeabi_dmul+0x374>
 8001f70:	4abf      	ldr	r2, [pc, #764]	; (8002270 <__aeabi_dmul+0x360>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <__aeabi_dmul+0x9a>
 8001f76:	0f42      	lsrs	r2, r0, #29
 8001f78:	00e4      	lsls	r4, r4, #3
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0424      	lsls	r4, r4, #16
 8001f80:	4314      	orrs	r4, r2
 8001f82:	4abc      	ldr	r2, [pc, #752]	; (8002274 <__aeabi_dmul+0x364>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4694      	mov	ip, r2
 8001f88:	4642      	mov	r2, r8
 8001f8a:	4463      	add	r3, ip
 8001f8c:	195b      	adds	r3, r3, r5
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	407a      	eors	r2, r7
 8001f94:	3301      	adds	r3, #1
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2e0a      	cmp	r6, #10
 8001f9e:	dd1c      	ble.n	8001fda <__aeabi_dmul+0xca>
 8001fa0:	003a      	movs	r2, r7
 8001fa2:	2e0b      	cmp	r6, #11
 8001fa4:	d05e      	beq.n	8002064 <__aeabi_dmul+0x154>
 8001fa6:	4647      	mov	r7, r8
 8001fa8:	e056      	b.n	8002058 <__aeabi_dmul+0x148>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4bb0      	ldr	r3, [pc, #704]	; (8002270 <__aeabi_dmul+0x360>)
 8001fae:	4321      	orrs	r1, r4
 8001fb0:	18eb      	adds	r3, r5, r3
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d12a      	bne.n	800200e <__aeabi_dmul+0xfe>
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	2202      	movs	r2, #2
 8001fbc:	0100      	lsls	r0, r0, #4
 8001fbe:	002b      	movs	r3, r5
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	4316      	orrs	r6, r2
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	4463      	add	r3, ip
 8001fc8:	407a      	eors	r2, r7
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2e0a      	cmp	r6, #10
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dmul+0xc4>
 8001fd2:	e231      	b.n	8002438 <__aeabi_dmul+0x528>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	2e02      	cmp	r6, #2
 8001fdc:	dc26      	bgt.n	800202c <__aeabi_dmul+0x11c>
 8001fde:	3e01      	subs	r6, #1
 8001fe0:	2e01      	cmp	r6, #1
 8001fe2:	d852      	bhi.n	800208a <__aeabi_dmul+0x17a>
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d04c      	beq.n	8002082 <__aeabi_dmul+0x172>
 8001fe8:	2901      	cmp	r1, #1
 8001fea:	d000      	beq.n	8001fee <__aeabi_dmul+0xde>
 8001fec:	e118      	b.n	8002220 <__aeabi_dmul+0x310>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	07d2      	lsls	r2, r2, #31
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	0019      	movs	r1, r3
 8002000:	b007      	add	sp, #28
 8002002:	bcf0      	pop	{r4, r5, r6, r7}
 8002004:	46bb      	mov	fp, r7
 8002006:	46b2      	mov	sl, r6
 8002008:	46a9      	mov	r9, r5
 800200a:	46a0      	mov	r8, r4
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	2203      	movs	r2, #3
 8002012:	0109      	lsls	r1, r1, #4
 8002014:	002b      	movs	r3, r5
 8002016:	468c      	mov	ip, r1
 8002018:	4316      	orrs	r6, r2
 800201a:	4642      	mov	r2, r8
 800201c:	4463      	add	r3, ip
 800201e:	407a      	eors	r2, r7
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2e0a      	cmp	r6, #10
 8002026:	dd00      	ble.n	800202a <__aeabi_dmul+0x11a>
 8002028:	e228      	b.n	800247c <__aeabi_dmul+0x56c>
 800202a:	2103      	movs	r1, #3
 800202c:	2501      	movs	r5, #1
 800202e:	40b5      	lsls	r5, r6
 8002030:	46ac      	mov	ip, r5
 8002032:	26a6      	movs	r6, #166	; 0xa6
 8002034:	4663      	mov	r3, ip
 8002036:	00f6      	lsls	r6, r6, #3
 8002038:	4035      	ands	r5, r6
 800203a:	4233      	tst	r3, r6
 800203c:	d10b      	bne.n	8002056 <__aeabi_dmul+0x146>
 800203e:	2690      	movs	r6, #144	; 0x90
 8002040:	00b6      	lsls	r6, r6, #2
 8002042:	4233      	tst	r3, r6
 8002044:	d118      	bne.n	8002078 <__aeabi_dmul+0x168>
 8002046:	3eb9      	subs	r6, #185	; 0xb9
 8002048:	3eff      	subs	r6, #255	; 0xff
 800204a:	421e      	tst	r6, r3
 800204c:	d01d      	beq.n	800208a <__aeabi_dmul+0x17a>
 800204e:	46a3      	mov	fp, r4
 8002050:	4682      	mov	sl, r0
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	e000      	b.n	8002058 <__aeabi_dmul+0x148>
 8002056:	0017      	movs	r7, r2
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	003a      	movs	r2, r7
 800205c:	2902      	cmp	r1, #2
 800205e:	d010      	beq.n	8002082 <__aeabi_dmul+0x172>
 8002060:	465c      	mov	r4, fp
 8002062:	4650      	mov	r0, sl
 8002064:	2903      	cmp	r1, #3
 8002066:	d1bf      	bne.n	8001fe8 <__aeabi_dmul+0xd8>
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	031b      	lsls	r3, r3, #12
 800206c:	431c      	orrs	r4, r3
 800206e:	0324      	lsls	r4, r4, #12
 8002070:	0005      	movs	r5, r0
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <__aeabi_dmul+0x360>)
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	e7bd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002078:	2480      	movs	r4, #128	; 0x80
 800207a:	2200      	movs	r2, #0
 800207c:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <__aeabi_dmul+0x360>)
 800207e:	0324      	lsls	r4, r4, #12
 8002080:	e7b8      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002082:	2400      	movs	r4, #0
 8002084:	2500      	movs	r5, #0
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <__aeabi_dmul+0x360>)
 8002088:	e7b4      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800208a:	4653      	mov	r3, sl
 800208c:	041e      	lsls	r6, r3, #16
 800208e:	0c36      	lsrs	r6, r6, #16
 8002090:	0c1f      	lsrs	r7, r3, #16
 8002092:	0033      	movs	r3, r6
 8002094:	0c01      	lsrs	r1, r0, #16
 8002096:	0400      	lsls	r0, r0, #16
 8002098:	0c00      	lsrs	r0, r0, #16
 800209a:	4343      	muls	r3, r0
 800209c:	4698      	mov	r8, r3
 800209e:	0003      	movs	r3, r0
 80020a0:	437b      	muls	r3, r7
 80020a2:	4699      	mov	r9, r3
 80020a4:	0033      	movs	r3, r6
 80020a6:	434b      	muls	r3, r1
 80020a8:	469c      	mov	ip, r3
 80020aa:	4643      	mov	r3, r8
 80020ac:	000d      	movs	r5, r1
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	469a      	mov	sl, r3
 80020b2:	437d      	muls	r5, r7
 80020b4:	44cc      	add	ip, r9
 80020b6:	44d4      	add	ip, sl
 80020b8:	9500      	str	r5, [sp, #0]
 80020ba:	45e1      	cmp	r9, ip
 80020bc:	d904      	bls.n	80020c8 <__aeabi_dmul+0x1b8>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4699      	mov	r9, r3
 80020c4:	444d      	add	r5, r9
 80020c6:	9500      	str	r5, [sp, #0]
 80020c8:	4663      	mov	r3, ip
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	001d      	movs	r5, r3
 80020ce:	4663      	mov	r3, ip
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	469c      	mov	ip, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	4698      	mov	r8, r3
 80020dc:	4663      	mov	r3, ip
 80020de:	4443      	add	r3, r8
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	0c23      	lsrs	r3, r4, #16
 80020e4:	4698      	mov	r8, r3
 80020e6:	0033      	movs	r3, r6
 80020e8:	0424      	lsls	r4, r4, #16
 80020ea:	0c24      	lsrs	r4, r4, #16
 80020ec:	4363      	muls	r3, r4
 80020ee:	469c      	mov	ip, r3
 80020f0:	0023      	movs	r3, r4
 80020f2:	437b      	muls	r3, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	4643      	mov	r3, r8
 80020f8:	435e      	muls	r6, r3
 80020fa:	435f      	muls	r7, r3
 80020fc:	444e      	add	r6, r9
 80020fe:	4663      	mov	r3, ip
 8002100:	46b2      	mov	sl, r6
 8002102:	0c1e      	lsrs	r6, r3, #16
 8002104:	4456      	add	r6, sl
 8002106:	45b1      	cmp	r9, r6
 8002108:	d903      	bls.n	8002112 <__aeabi_dmul+0x202>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4699      	mov	r9, r3
 8002110:	444f      	add	r7, r9
 8002112:	0c33      	lsrs	r3, r6, #16
 8002114:	4699      	mov	r9, r3
 8002116:	003b      	movs	r3, r7
 8002118:	444b      	add	r3, r9
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	4663      	mov	r3, ip
 800211e:	46ac      	mov	ip, r5
 8002120:	041f      	lsls	r7, r3, #16
 8002122:	0c3f      	lsrs	r7, r7, #16
 8002124:	0436      	lsls	r6, r6, #16
 8002126:	19f6      	adds	r6, r6, r7
 8002128:	44b4      	add	ip, r6
 800212a:	4663      	mov	r3, ip
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	465b      	mov	r3, fp
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	469c      	mov	ip, r3
 8002134:	465b      	mov	r3, fp
 8002136:	041f      	lsls	r7, r3, #16
 8002138:	0c3f      	lsrs	r7, r7, #16
 800213a:	003b      	movs	r3, r7
 800213c:	4343      	muls	r3, r0
 800213e:	4699      	mov	r9, r3
 8002140:	4663      	mov	r3, ip
 8002142:	4343      	muls	r3, r0
 8002144:	469a      	mov	sl, r3
 8002146:	464b      	mov	r3, r9
 8002148:	4660      	mov	r0, ip
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	469b      	mov	fp, r3
 800214e:	4348      	muls	r0, r1
 8002150:	4379      	muls	r1, r7
 8002152:	4451      	add	r1, sl
 8002154:	4459      	add	r1, fp
 8002156:	458a      	cmp	sl, r1
 8002158:	d903      	bls.n	8002162 <__aeabi_dmul+0x252>
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	469a      	mov	sl, r3
 8002160:	4450      	add	r0, sl
 8002162:	0c0b      	lsrs	r3, r1, #16
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	4699      	mov	r9, r3
 800216e:	003b      	movs	r3, r7
 8002170:	4363      	muls	r3, r4
 8002172:	0409      	lsls	r1, r1, #16
 8002174:	4645      	mov	r5, r8
 8002176:	4449      	add	r1, r9
 8002178:	4699      	mov	r9, r3
 800217a:	4663      	mov	r3, ip
 800217c:	435c      	muls	r4, r3
 800217e:	436b      	muls	r3, r5
 8002180:	469c      	mov	ip, r3
 8002182:	464b      	mov	r3, r9
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	4698      	mov	r8, r3
 8002188:	436f      	muls	r7, r5
 800218a:	193f      	adds	r7, r7, r4
 800218c:	4447      	add	r7, r8
 800218e:	4450      	add	r0, sl
 8002190:	42bc      	cmp	r4, r7
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x28c>
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	4698      	mov	r8, r3
 800219a:	44c4      	add	ip, r8
 800219c:	9b04      	ldr	r3, [sp, #16]
 800219e:	9d00      	ldr	r5, [sp, #0]
 80021a0:	4698      	mov	r8, r3
 80021a2:	4445      	add	r5, r8
 80021a4:	42b5      	cmp	r5, r6
 80021a6:	41b6      	sbcs	r6, r6
 80021a8:	4273      	negs	r3, r6
 80021aa:	4698      	mov	r8, r3
 80021ac:	464b      	mov	r3, r9
 80021ae:	041e      	lsls	r6, r3, #16
 80021b0:	9b05      	ldr	r3, [sp, #20]
 80021b2:	043c      	lsls	r4, r7, #16
 80021b4:	4699      	mov	r9, r3
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	19a4      	adds	r4, r4, r6
 80021ba:	444c      	add	r4, r9
 80021bc:	46a1      	mov	r9, r4
 80021be:	4683      	mov	fp, r0
 80021c0:	186e      	adds	r6, r5, r1
 80021c2:	44c1      	add	r9, r8
 80021c4:	428e      	cmp	r6, r1
 80021c6:	4189      	sbcs	r1, r1
 80021c8:	44cb      	add	fp, r9
 80021ca:	465d      	mov	r5, fp
 80021cc:	4249      	negs	r1, r1
 80021ce:	186d      	adds	r5, r5, r1
 80021d0:	429c      	cmp	r4, r3
 80021d2:	41a4      	sbcs	r4, r4
 80021d4:	45c1      	cmp	r9, r8
 80021d6:	419b      	sbcs	r3, r3
 80021d8:	4583      	cmp	fp, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	428d      	cmp	r5, r1
 80021de:	4189      	sbcs	r1, r1
 80021e0:	425b      	negs	r3, r3
 80021e2:	4264      	negs	r4, r4
 80021e4:	431c      	orrs	r4, r3
 80021e6:	4240      	negs	r0, r0
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	4249      	negs	r1, r1
 80021ec:	4301      	orrs	r1, r0
 80021ee:	0270      	lsls	r0, r6, #9
 80021f0:	0c3f      	lsrs	r7, r7, #16
 80021f2:	4318      	orrs	r0, r3
 80021f4:	19e4      	adds	r4, r4, r7
 80021f6:	1e47      	subs	r7, r0, #1
 80021f8:	41b8      	sbcs	r0, r7
 80021fa:	1864      	adds	r4, r4, r1
 80021fc:	4464      	add	r4, ip
 80021fe:	0df6      	lsrs	r6, r6, #23
 8002200:	0261      	lsls	r1, r4, #9
 8002202:	4330      	orrs	r0, r6
 8002204:	0dec      	lsrs	r4, r5, #23
 8002206:	026e      	lsls	r6, r5, #9
 8002208:	430c      	orrs	r4, r1
 800220a:	4330      	orrs	r0, r6
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	d400      	bmi.n	8002212 <__aeabi_dmul+0x302>
 8002210:	e0f1      	b.n	80023f6 <__aeabi_dmul+0x4e6>
 8002212:	2101      	movs	r1, #1
 8002214:	0843      	lsrs	r3, r0, #1
 8002216:	4001      	ands	r1, r0
 8002218:	430b      	orrs	r3, r1
 800221a:	07e0      	lsls	r0, r4, #31
 800221c:	4318      	orrs	r0, r3
 800221e:	0864      	lsrs	r4, r4, #1
 8002220:	4915      	ldr	r1, [pc, #84]	; (8002278 <__aeabi_dmul+0x368>)
 8002222:	9b02      	ldr	r3, [sp, #8]
 8002224:	468c      	mov	ip, r1
 8002226:	4463      	add	r3, ip
 8002228:	2b00      	cmp	r3, #0
 800222a:	dc00      	bgt.n	800222e <__aeabi_dmul+0x31e>
 800222c:	e097      	b.n	800235e <__aeabi_dmul+0x44e>
 800222e:	0741      	lsls	r1, r0, #29
 8002230:	d009      	beq.n	8002246 <__aeabi_dmul+0x336>
 8002232:	210f      	movs	r1, #15
 8002234:	4001      	ands	r1, r0
 8002236:	2904      	cmp	r1, #4
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x336>
 800223a:	1d01      	adds	r1, r0, #4
 800223c:	4281      	cmp	r1, r0
 800223e:	4180      	sbcs	r0, r0
 8002240:	4240      	negs	r0, r0
 8002242:	1824      	adds	r4, r4, r0
 8002244:	0008      	movs	r0, r1
 8002246:	01e1      	lsls	r1, r4, #7
 8002248:	d506      	bpl.n	8002258 <__aeabi_dmul+0x348>
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	468c      	mov	ip, r1
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <__aeabi_dmul+0x36c>)
 8002252:	401c      	ands	r4, r3
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4463      	add	r3, ip
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <__aeabi_dmul+0x370>)
 800225a:	428b      	cmp	r3, r1
 800225c:	dd00      	ble.n	8002260 <__aeabi_dmul+0x350>
 800225e:	e710      	b.n	8002082 <__aeabi_dmul+0x172>
 8002260:	0761      	lsls	r1, r4, #29
 8002262:	08c5      	lsrs	r5, r0, #3
 8002264:	0264      	lsls	r4, r4, #9
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	430d      	orrs	r5, r1
 800226a:	0b24      	lsrs	r4, r4, #12
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	e6c1      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002270:	000007ff 	.word	0x000007ff
 8002274:	fffffc01 	.word	0xfffffc01
 8002278:	000003ff 	.word	0x000003ff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	000007fe 	.word	0x000007fe
 8002284:	464b      	mov	r3, r9
 8002286:	4323      	orrs	r3, r4
 8002288:	d059      	beq.n	800233e <__aeabi_dmul+0x42e>
 800228a:	2c00      	cmp	r4, #0
 800228c:	d100      	bne.n	8002290 <__aeabi_dmul+0x380>
 800228e:	e0a3      	b.n	80023d8 <__aeabi_dmul+0x4c8>
 8002290:	0020      	movs	r0, r4
 8002292:	f000 fdf9 	bl	8002e88 <__clzsi2>
 8002296:	0001      	movs	r1, r0
 8002298:	0003      	movs	r3, r0
 800229a:	390b      	subs	r1, #11
 800229c:	221d      	movs	r2, #29
 800229e:	1a52      	subs	r2, r2, r1
 80022a0:	4649      	mov	r1, r9
 80022a2:	0018      	movs	r0, r3
 80022a4:	40d1      	lsrs	r1, r2
 80022a6:	464a      	mov	r2, r9
 80022a8:	3808      	subs	r0, #8
 80022aa:	4082      	lsls	r2, r0
 80022ac:	4084      	lsls	r4, r0
 80022ae:	0010      	movs	r0, r2
 80022b0:	430c      	orrs	r4, r1
 80022b2:	4a74      	ldr	r2, [pc, #464]	; (8002484 <__aeabi_dmul+0x574>)
 80022b4:	1aeb      	subs	r3, r5, r3
 80022b6:	4694      	mov	ip, r2
 80022b8:	4642      	mov	r2, r8
 80022ba:	4463      	add	r3, ip
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	407a      	eors	r2, r7
 80022c2:	3301      	adds	r3, #1
 80022c4:	2100      	movs	r1, #0
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2e0a      	cmp	r6, #10
 80022cc:	dd00      	ble.n	80022d0 <__aeabi_dmul+0x3c0>
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dmul+0x90>
 80022d0:	e683      	b.n	8001fda <__aeabi_dmul+0xca>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4303      	orrs	r3, r0
 80022d6:	469a      	mov	sl, r3
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dmul+0x420>
 80022da:	465b      	mov	r3, fp
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06d      	beq.n	80023bc <__aeabi_dmul+0x4ac>
 80022e0:	4658      	mov	r0, fp
 80022e2:	f000 fdd1 	bl	8002e88 <__clzsi2>
 80022e6:	0001      	movs	r1, r0
 80022e8:	0003      	movs	r3, r0
 80022ea:	390b      	subs	r1, #11
 80022ec:	221d      	movs	r2, #29
 80022ee:	1a52      	subs	r2, r2, r1
 80022f0:	0021      	movs	r1, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	465d      	mov	r5, fp
 80022f6:	40d1      	lsrs	r1, r2
 80022f8:	3808      	subs	r0, #8
 80022fa:	4085      	lsls	r5, r0
 80022fc:	000a      	movs	r2, r1
 80022fe:	4084      	lsls	r4, r0
 8002300:	432a      	orrs	r2, r5
 8002302:	4693      	mov	fp, r2
 8002304:	46a2      	mov	sl, r4
 8002306:	4d5f      	ldr	r5, [pc, #380]	; (8002484 <__aeabi_dmul+0x574>)
 8002308:	2600      	movs	r6, #0
 800230a:	1aed      	subs	r5, r5, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	e625      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002312:	465b      	mov	r3, fp
 8002314:	4303      	orrs	r3, r0
 8002316:	469a      	mov	sl, r3
 8002318:	d105      	bne.n	8002326 <__aeabi_dmul+0x416>
 800231a:	2300      	movs	r3, #0
 800231c:	469b      	mov	fp, r3
 800231e:	3302      	adds	r3, #2
 8002320:	2608      	movs	r6, #8
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	e61b      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002326:	2303      	movs	r3, #3
 8002328:	4682      	mov	sl, r0
 800232a:	260c      	movs	r6, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	e616      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002330:	2300      	movs	r3, #0
 8002332:	469b      	mov	fp, r3
 8002334:	3301      	adds	r3, #1
 8002336:	2604      	movs	r6, #4
 8002338:	2500      	movs	r5, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	e60f      	b.n	8001f5e <__aeabi_dmul+0x4e>
 800233e:	4642      	mov	r2, r8
 8002340:	3301      	adds	r3, #1
 8002342:	9501      	str	r5, [sp, #4]
 8002344:	431e      	orrs	r6, r3
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	407a      	eors	r2, r7
 800234a:	3301      	adds	r3, #1
 800234c:	2400      	movs	r4, #0
 800234e:	2000      	movs	r0, #0
 8002350:	2101      	movs	r1, #1
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2e0a      	cmp	r6, #10
 8002358:	dd00      	ble.n	800235c <__aeabi_dmul+0x44c>
 800235a:	e621      	b.n	8001fa0 <__aeabi_dmul+0x90>
 800235c:	e63d      	b.n	8001fda <__aeabi_dmul+0xca>
 800235e:	2101      	movs	r1, #1
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	2938      	cmp	r1, #56	; 0x38
 8002364:	dd00      	ble.n	8002368 <__aeabi_dmul+0x458>
 8002366:	e642      	b.n	8001fee <__aeabi_dmul+0xde>
 8002368:	291f      	cmp	r1, #31
 800236a:	dd47      	ble.n	80023fc <__aeabi_dmul+0x4ec>
 800236c:	261f      	movs	r6, #31
 800236e:	0025      	movs	r5, r4
 8002370:	4276      	negs	r6, r6
 8002372:	1af3      	subs	r3, r6, r3
 8002374:	40dd      	lsrs	r5, r3
 8002376:	002b      	movs	r3, r5
 8002378:	2920      	cmp	r1, #32
 800237a:	d005      	beq.n	8002388 <__aeabi_dmul+0x478>
 800237c:	4942      	ldr	r1, [pc, #264]	; (8002488 <__aeabi_dmul+0x578>)
 800237e:	9d02      	ldr	r5, [sp, #8]
 8002380:	468c      	mov	ip, r1
 8002382:	4465      	add	r5, ip
 8002384:	40ac      	lsls	r4, r5
 8002386:	4320      	orrs	r0, r4
 8002388:	1e41      	subs	r1, r0, #1
 800238a:	4188      	sbcs	r0, r1
 800238c:	4318      	orrs	r0, r3
 800238e:	2307      	movs	r3, #7
 8002390:	001d      	movs	r5, r3
 8002392:	2400      	movs	r4, #0
 8002394:	4005      	ands	r5, r0
 8002396:	4203      	tst	r3, r0
 8002398:	d04a      	beq.n	8002430 <__aeabi_dmul+0x520>
 800239a:	230f      	movs	r3, #15
 800239c:	2400      	movs	r4, #0
 800239e:	4003      	ands	r3, r0
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d042      	beq.n	800242a <__aeabi_dmul+0x51a>
 80023a4:	1d03      	adds	r3, r0, #4
 80023a6:	4283      	cmp	r3, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	4240      	negs	r0, r0
 80023ac:	1824      	adds	r4, r4, r0
 80023ae:	0018      	movs	r0, r3
 80023b0:	0223      	lsls	r3, r4, #8
 80023b2:	d53a      	bpl.n	800242a <__aeabi_dmul+0x51a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	2400      	movs	r4, #0
 80023b8:	2500      	movs	r5, #0
 80023ba:	e61b      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 80023bc:	f000 fd64 	bl	8002e88 <__clzsi2>
 80023c0:	0001      	movs	r1, r0
 80023c2:	0003      	movs	r3, r0
 80023c4:	3115      	adds	r1, #21
 80023c6:	3320      	adds	r3, #32
 80023c8:	291c      	cmp	r1, #28
 80023ca:	dd8f      	ble.n	80022ec <__aeabi_dmul+0x3dc>
 80023cc:	3808      	subs	r0, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	4084      	lsls	r4, r0
 80023d2:	4692      	mov	sl, r2
 80023d4:	46a3      	mov	fp, r4
 80023d6:	e796      	b.n	8002306 <__aeabi_dmul+0x3f6>
 80023d8:	f000 fd56 	bl	8002e88 <__clzsi2>
 80023dc:	0001      	movs	r1, r0
 80023de:	0003      	movs	r3, r0
 80023e0:	3115      	adds	r1, #21
 80023e2:	3320      	adds	r3, #32
 80023e4:	291c      	cmp	r1, #28
 80023e6:	dc00      	bgt.n	80023ea <__aeabi_dmul+0x4da>
 80023e8:	e758      	b.n	800229c <__aeabi_dmul+0x38c>
 80023ea:	0002      	movs	r2, r0
 80023ec:	464c      	mov	r4, r9
 80023ee:	3a08      	subs	r2, #8
 80023f0:	2000      	movs	r0, #0
 80023f2:	4094      	lsls	r4, r2
 80023f4:	e75d      	b.n	80022b2 <__aeabi_dmul+0x3a2>
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e711      	b.n	8002220 <__aeabi_dmul+0x310>
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <__aeabi_dmul+0x57c>)
 80023fe:	0026      	movs	r6, r4
 8002400:	469c      	mov	ip, r3
 8002402:	0003      	movs	r3, r0
 8002404:	9d02      	ldr	r5, [sp, #8]
 8002406:	40cb      	lsrs	r3, r1
 8002408:	4465      	add	r5, ip
 800240a:	40ae      	lsls	r6, r5
 800240c:	431e      	orrs	r6, r3
 800240e:	0003      	movs	r3, r0
 8002410:	40ab      	lsls	r3, r5
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	4183      	sbcs	r3, r0
 8002416:	0030      	movs	r0, r6
 8002418:	4318      	orrs	r0, r3
 800241a:	40cc      	lsrs	r4, r1
 800241c:	0743      	lsls	r3, r0, #29
 800241e:	d0c7      	beq.n	80023b0 <__aeabi_dmul+0x4a0>
 8002420:	230f      	movs	r3, #15
 8002422:	4003      	ands	r3, r0
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1bd      	bne.n	80023a4 <__aeabi_dmul+0x494>
 8002428:	e7c2      	b.n	80023b0 <__aeabi_dmul+0x4a0>
 800242a:	0765      	lsls	r5, r4, #29
 800242c:	0264      	lsls	r4, r4, #9
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	08c0      	lsrs	r0, r0, #3
 8002432:	2300      	movs	r3, #0
 8002434:	4305      	orrs	r5, r0
 8002436:	e5dd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002438:	2500      	movs	r5, #0
 800243a:	2302      	movs	r3, #2
 800243c:	2e0f      	cmp	r6, #15
 800243e:	d10c      	bne.n	800245a <__aeabi_dmul+0x54a>
 8002440:	2480      	movs	r4, #128	; 0x80
 8002442:	465b      	mov	r3, fp
 8002444:	0324      	lsls	r4, r4, #12
 8002446:	4223      	tst	r3, r4
 8002448:	d00e      	beq.n	8002468 <__aeabi_dmul+0x558>
 800244a:	4221      	tst	r1, r4
 800244c:	d10c      	bne.n	8002468 <__aeabi_dmul+0x558>
 800244e:	430c      	orrs	r4, r1
 8002450:	0324      	lsls	r4, r4, #12
 8002452:	003a      	movs	r2, r7
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <__aeabi_dmul+0x580>)
 8002456:	0b24      	lsrs	r4, r4, #12
 8002458:	e5cc      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800245a:	2e0b      	cmp	r6, #11
 800245c:	d000      	beq.n	8002460 <__aeabi_dmul+0x550>
 800245e:	e5a2      	b.n	8001fa6 <__aeabi_dmul+0x96>
 8002460:	468b      	mov	fp, r1
 8002462:	46aa      	mov	sl, r5
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e5f7      	b.n	8002058 <__aeabi_dmul+0x148>
 8002468:	2480      	movs	r4, #128	; 0x80
 800246a:	465b      	mov	r3, fp
 800246c:	0324      	lsls	r4, r4, #12
 800246e:	431c      	orrs	r4, r3
 8002470:	0324      	lsls	r4, r4, #12
 8002472:	4642      	mov	r2, r8
 8002474:	4655      	mov	r5, sl
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <__aeabi_dmul+0x580>)
 8002478:	0b24      	lsrs	r4, r4, #12
 800247a:	e5bb      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800247c:	464d      	mov	r5, r9
 800247e:	0021      	movs	r1, r4
 8002480:	2303      	movs	r3, #3
 8002482:	e7db      	b.n	800243c <__aeabi_dmul+0x52c>
 8002484:	fffffc0d 	.word	0xfffffc0d
 8002488:	0000043e 	.word	0x0000043e
 800248c:	0000041e 	.word	0x0000041e
 8002490:	000007ff 	.word	0x000007ff

08002494 <__aeabi_dsub>:
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	4657      	mov	r7, sl
 8002498:	464e      	mov	r6, r9
 800249a:	4645      	mov	r5, r8
 800249c:	46de      	mov	lr, fp
 800249e:	b5e0      	push	{r5, r6, r7, lr}
 80024a0:	000d      	movs	r5, r1
 80024a2:	0004      	movs	r4, r0
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	032b      	lsls	r3, r5, #12
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	0f62      	lsrs	r2, r4, #29
 80024ae:	431a      	orrs	r2, r3
 80024b0:	00e3      	lsls	r3, r4, #3
 80024b2:	030c      	lsls	r4, r1, #12
 80024b4:	0a64      	lsrs	r4, r4, #9
 80024b6:	0f47      	lsrs	r7, r0, #29
 80024b8:	4327      	orrs	r7, r4
 80024ba:	4cd0      	ldr	r4, [pc, #832]	; (80027fc <__aeabi_dsub+0x368>)
 80024bc:	006e      	lsls	r6, r5, #1
 80024be:	4691      	mov	r9, r2
 80024c0:	b083      	sub	sp, #12
 80024c2:	004a      	lsls	r2, r1, #1
 80024c4:	00c0      	lsls	r0, r0, #3
 80024c6:	4698      	mov	r8, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	0d76      	lsrs	r6, r6, #21
 80024cc:	0fed      	lsrs	r5, r5, #31
 80024ce:	0d52      	lsrs	r2, r2, #21
 80024d0:	0fc9      	lsrs	r1, r1, #31
 80024d2:	9001      	str	r0, [sp, #4]
 80024d4:	42a2      	cmp	r2, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x46>
 80024d8:	e0b9      	b.n	800264e <__aeabi_dsub+0x1ba>
 80024da:	2401      	movs	r4, #1
 80024dc:	4061      	eors	r1, r4
 80024de:	468b      	mov	fp, r1
 80024e0:	428d      	cmp	r5, r1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x52>
 80024e4:	e08d      	b.n	8002602 <__aeabi_dsub+0x16e>
 80024e6:	1ab4      	subs	r4, r6, r2
 80024e8:	46a4      	mov	ip, r4
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dsub+0x5c>
 80024ee:	e0b7      	b.n	8002660 <__aeabi_dsub+0x1cc>
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x62>
 80024f4:	e0cb      	b.n	800268e <__aeabi_dsub+0x1fa>
 80024f6:	4ac1      	ldr	r2, [pc, #772]	; (80027fc <__aeabi_dsub+0x368>)
 80024f8:	4296      	cmp	r6, r2
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x6a>
 80024fc:	e186      	b.n	800280c <__aeabi_dsub+0x378>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	4317      	orrs	r7, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a38      	cmp	r2, #56	; 0x38
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x78>
 800250a:	e1a4      	b.n	8002856 <__aeabi_dsub+0x3c2>
 800250c:	2a1f      	cmp	r2, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x7e>
 8002510:	e21d      	b.n	800294e <__aeabi_dsub+0x4ba>
 8002512:	4661      	mov	r1, ip
 8002514:	2220      	movs	r2, #32
 8002516:	003c      	movs	r4, r7
 8002518:	1a52      	subs	r2, r2, r1
 800251a:	0001      	movs	r1, r0
 800251c:	4090      	lsls	r0, r2
 800251e:	4094      	lsls	r4, r2
 8002520:	1e42      	subs	r2, r0, #1
 8002522:	4190      	sbcs	r0, r2
 8002524:	4662      	mov	r2, ip
 8002526:	46a0      	mov	r8, r4
 8002528:	4664      	mov	r4, ip
 800252a:	40d7      	lsrs	r7, r2
 800252c:	464a      	mov	r2, r9
 800252e:	40e1      	lsrs	r1, r4
 8002530:	4644      	mov	r4, r8
 8002532:	1bd2      	subs	r2, r2, r7
 8002534:	4691      	mov	r9, r2
 8002536:	430c      	orrs	r4, r1
 8002538:	4304      	orrs	r4, r0
 800253a:	1b1c      	subs	r4, r3, r4
 800253c:	42a3      	cmp	r3, r4
 800253e:	4192      	sbcs	r2, r2
 8002540:	464b      	mov	r3, r9
 8002542:	4252      	negs	r2, r2
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	469a      	mov	sl, r3
 8002548:	4653      	mov	r3, sl
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0xbc>
 800254e:	e12b      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002550:	4653      	mov	r3, sl
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	0a53      	lsrs	r3, r2, #9
 8002556:	469a      	mov	sl, r3
 8002558:	4653      	mov	r3, sl
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0xcc>
 800255e:	e166      	b.n	800282e <__aeabi_dsub+0x39a>
 8002560:	4650      	mov	r0, sl
 8002562:	f000 fc91 	bl	8002e88 <__clzsi2>
 8002566:	0003      	movs	r3, r0
 8002568:	3b08      	subs	r3, #8
 800256a:	2220      	movs	r2, #32
 800256c:	0020      	movs	r0, r4
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	4651      	mov	r1, sl
 8002572:	40d0      	lsrs	r0, r2
 8002574:	4099      	lsls	r1, r3
 8002576:	0002      	movs	r2, r0
 8002578:	409c      	lsls	r4, r3
 800257a:	430a      	orrs	r2, r1
 800257c:	429e      	cmp	r6, r3
 800257e:	dd00      	ble.n	8002582 <__aeabi_dsub+0xee>
 8002580:	e164      	b.n	800284c <__aeabi_dsub+0x3b8>
 8002582:	1b9b      	subs	r3, r3, r6
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	291f      	cmp	r1, #31
 8002588:	dd00      	ble.n	800258c <__aeabi_dsub+0xf8>
 800258a:	e0fe      	b.n	800278a <__aeabi_dsub+0x2f6>
 800258c:	2320      	movs	r3, #32
 800258e:	0010      	movs	r0, r2
 8002590:	0026      	movs	r6, r4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	409c      	lsls	r4, r3
 8002596:	4098      	lsls	r0, r3
 8002598:	40ce      	lsrs	r6, r1
 800259a:	40ca      	lsrs	r2, r1
 800259c:	1e63      	subs	r3, r4, #1
 800259e:	419c      	sbcs	r4, r3
 80025a0:	4330      	orrs	r0, r6
 80025a2:	4692      	mov	sl, r2
 80025a4:	2600      	movs	r6, #0
 80025a6:	4304      	orrs	r4, r0
 80025a8:	0763      	lsls	r3, r4, #29
 80025aa:	d009      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025ac:	230f      	movs	r3, #15
 80025ae:	4023      	ands	r3, r4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025b4:	1d23      	adds	r3, r4, #4
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	41a4      	sbcs	r4, r4
 80025ba:	4264      	negs	r4, r4
 80025bc:	44a2      	add	sl, r4
 80025be:	001c      	movs	r4, r3
 80025c0:	4653      	mov	r3, sl
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	d400      	bmi.n	80025c8 <__aeabi_dsub+0x134>
 80025c6:	e0f2      	b.n	80027ae <__aeabi_dsub+0x31a>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <__aeabi_dsub+0x368>)
 80025ca:	3601      	adds	r6, #1
 80025cc:	429e      	cmp	r6, r3
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x13e>
 80025d0:	e10f      	b.n	80027f2 <__aeabi_dsub+0x35e>
 80025d2:	4653      	mov	r3, sl
 80025d4:	498a      	ldr	r1, [pc, #552]	; (8002800 <__aeabi_dsub+0x36c>)
 80025d6:	08e4      	lsrs	r4, r4, #3
 80025d8:	400b      	ands	r3, r1
 80025da:	0019      	movs	r1, r3
 80025dc:	075b      	lsls	r3, r3, #29
 80025de:	4323      	orrs	r3, r4
 80025e0:	0572      	lsls	r2, r6, #21
 80025e2:	024c      	lsls	r4, r1, #9
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d52      	lsrs	r2, r2, #21
 80025e8:	0512      	lsls	r2, r2, #20
 80025ea:	4322      	orrs	r2, r4
 80025ec:	07ed      	lsls	r5, r5, #31
 80025ee:	432a      	orrs	r2, r5
 80025f0:	0018      	movs	r0, r3
 80025f2:	0011      	movs	r1, r2
 80025f4:	b003      	add	sp, #12
 80025f6:	bcf0      	pop	{r4, r5, r6, r7}
 80025f8:	46bb      	mov	fp, r7
 80025fa:	46b2      	mov	sl, r6
 80025fc:	46a9      	mov	r9, r5
 80025fe:	46a0      	mov	r8, r4
 8002600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002602:	1ab4      	subs	r4, r6, r2
 8002604:	46a4      	mov	ip, r4
 8002606:	2c00      	cmp	r4, #0
 8002608:	dd59      	ble.n	80026be <__aeabi_dsub+0x22a>
 800260a:	2a00      	cmp	r2, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x17c>
 800260e:	e0b0      	b.n	8002772 <__aeabi_dsub+0x2de>
 8002610:	4556      	cmp	r6, sl
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x182>
 8002614:	e0fa      	b.n	800280c <__aeabi_dsub+0x378>
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0412      	lsls	r2, r2, #16
 800261a:	4317      	orrs	r7, r2
 800261c:	4662      	mov	r2, ip
 800261e:	2a38      	cmp	r2, #56	; 0x38
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x190>
 8002622:	e0d4      	b.n	80027ce <__aeabi_dsub+0x33a>
 8002624:	2a1f      	cmp	r2, #31
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x196>
 8002628:	e1c0      	b.n	80029ac <__aeabi_dsub+0x518>
 800262a:	0039      	movs	r1, r7
 800262c:	3a20      	subs	r2, #32
 800262e:	40d1      	lsrs	r1, r2
 8002630:	4662      	mov	r2, ip
 8002632:	2a20      	cmp	r2, #32
 8002634:	d006      	beq.n	8002644 <__aeabi_dsub+0x1b0>
 8002636:	4664      	mov	r4, ip
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	1b12      	subs	r2, r2, r4
 800263c:	003c      	movs	r4, r7
 800263e:	4094      	lsls	r4, r2
 8002640:	4304      	orrs	r4, r0
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9c01      	ldr	r4, [sp, #4]
 8002646:	1e62      	subs	r2, r4, #1
 8002648:	4194      	sbcs	r4, r2
 800264a:	430c      	orrs	r4, r1
 800264c:	e0c3      	b.n	80027d6 <__aeabi_dsub+0x342>
 800264e:	003c      	movs	r4, r7
 8002650:	4304      	orrs	r4, r0
 8002652:	d02b      	beq.n	80026ac <__aeabi_dsub+0x218>
 8002654:	468b      	mov	fp, r1
 8002656:	428d      	cmp	r5, r1
 8002658:	d02e      	beq.n	80026b8 <__aeabi_dsub+0x224>
 800265a:	4c6a      	ldr	r4, [pc, #424]	; (8002804 <__aeabi_dsub+0x370>)
 800265c:	46a4      	mov	ip, r4
 800265e:	44b4      	add	ip, r6
 8002660:	4664      	mov	r4, ip
 8002662:	2c00      	cmp	r4, #0
 8002664:	d05f      	beq.n	8002726 <__aeabi_dsub+0x292>
 8002666:	1b94      	subs	r4, r2, r6
 8002668:	46a4      	mov	ip, r4
 800266a:	2e00      	cmp	r6, #0
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x1dc>
 800266e:	e120      	b.n	80028b2 <__aeabi_dsub+0x41e>
 8002670:	464c      	mov	r4, r9
 8002672:	431c      	orrs	r4, r3
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x1e4>
 8002676:	e1c7      	b.n	8002a08 <__aeabi_dsub+0x574>
 8002678:	4661      	mov	r1, ip
 800267a:	1e4c      	subs	r4, r1, #1
 800267c:	2901      	cmp	r1, #1
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x1ee>
 8002680:	e223      	b.n	8002aca <__aeabi_dsub+0x636>
 8002682:	4d5e      	ldr	r5, [pc, #376]	; (80027fc <__aeabi_dsub+0x368>)
 8002684:	45ac      	cmp	ip, r5
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x1f6>
 8002688:	e1d8      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 800268a:	46a4      	mov	ip, r4
 800268c:	e11a      	b.n	80028c4 <__aeabi_dsub+0x430>
 800268e:	003a      	movs	r2, r7
 8002690:	4302      	orrs	r2, r0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x202>
 8002694:	e0e4      	b.n	8002860 <__aeabi_dsub+0x3cc>
 8002696:	0022      	movs	r2, r4
 8002698:	3a01      	subs	r2, #1
 800269a:	2c01      	cmp	r4, #1
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x20c>
 800269e:	e1c3      	b.n	8002a28 <__aeabi_dsub+0x594>
 80026a0:	4956      	ldr	r1, [pc, #344]	; (80027fc <__aeabi_dsub+0x368>)
 80026a2:	428c      	cmp	r4, r1
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x214>
 80026a6:	e0b1      	b.n	800280c <__aeabi_dsub+0x378>
 80026a8:	4694      	mov	ip, r2
 80026aa:	e72b      	b.n	8002504 <__aeabi_dsub+0x70>
 80026ac:	2401      	movs	r4, #1
 80026ae:	4061      	eors	r1, r4
 80026b0:	468b      	mov	fp, r1
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x224>
 80026b6:	e716      	b.n	80024e6 <__aeabi_dsub+0x52>
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <__aeabi_dsub+0x370>)
 80026ba:	468c      	mov	ip, r1
 80026bc:	44b4      	add	ip, r6
 80026be:	4664      	mov	r4, ip
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x232>
 80026c4:	e0d3      	b.n	800286e <__aeabi_dsub+0x3da>
 80026c6:	1b91      	subs	r1, r2, r6
 80026c8:	468c      	mov	ip, r1
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x23c>
 80026ce:	e15e      	b.n	800298e <__aeabi_dsub+0x4fa>
 80026d0:	494a      	ldr	r1, [pc, #296]	; (80027fc <__aeabi_dsub+0x368>)
 80026d2:	428a      	cmp	r2, r1
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x244>
 80026d6:	e1be      	b.n	8002a56 <__aeabi_dsub+0x5c2>
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	464c      	mov	r4, r9
 80026dc:	0409      	lsls	r1, r1, #16
 80026de:	430c      	orrs	r4, r1
 80026e0:	46a1      	mov	r9, r4
 80026e2:	4661      	mov	r1, ip
 80026e4:	2938      	cmp	r1, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x256>
 80026e8:	e1ba      	b.n	8002a60 <__aeabi_dsub+0x5cc>
 80026ea:	291f      	cmp	r1, #31
 80026ec:	dd00      	ble.n	80026f0 <__aeabi_dsub+0x25c>
 80026ee:	e227      	b.n	8002b40 <__aeabi_dsub+0x6ac>
 80026f0:	2420      	movs	r4, #32
 80026f2:	1a64      	subs	r4, r4, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	40a1      	lsls	r1, r4
 80026f8:	001e      	movs	r6, r3
 80026fa:	4688      	mov	r8, r1
 80026fc:	4661      	mov	r1, ip
 80026fe:	40a3      	lsls	r3, r4
 8002700:	40ce      	lsrs	r6, r1
 8002702:	4641      	mov	r1, r8
 8002704:	1e5c      	subs	r4, r3, #1
 8002706:	41a3      	sbcs	r3, r4
 8002708:	4331      	orrs	r1, r6
 800270a:	4319      	orrs	r1, r3
 800270c:	000c      	movs	r4, r1
 800270e:	4663      	mov	r3, ip
 8002710:	4649      	mov	r1, r9
 8002712:	40d9      	lsrs	r1, r3
 8002714:	187f      	adds	r7, r7, r1
 8002716:	1824      	adds	r4, r4, r0
 8002718:	4284      	cmp	r4, r0
 800271a:	419b      	sbcs	r3, r3
 800271c:	425b      	negs	r3, r3
 800271e:	469a      	mov	sl, r3
 8002720:	0016      	movs	r6, r2
 8002722:	44ba      	add	sl, r7
 8002724:	e05d      	b.n	80027e2 <__aeabi_dsub+0x34e>
 8002726:	4c38      	ldr	r4, [pc, #224]	; (8002808 <__aeabi_dsub+0x374>)
 8002728:	1c72      	adds	r2, r6, #1
 800272a:	4222      	tst	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x29c>
 800272e:	e0df      	b.n	80028f0 <__aeabi_dsub+0x45c>
 8002730:	464a      	mov	r2, r9
 8002732:	431a      	orrs	r2, r3
 8002734:	2e00      	cmp	r6, #0
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x2a6>
 8002738:	e15c      	b.n	80029f4 <__aeabi_dsub+0x560>
 800273a:	2a00      	cmp	r2, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x2ac>
 800273e:	e1cf      	b.n	8002ae0 <__aeabi_dsub+0x64c>
 8002740:	003a      	movs	r2, r7
 8002742:	4302      	orrs	r2, r0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x2b4>
 8002746:	e17f      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002748:	1a1c      	subs	r4, r3, r0
 800274a:	464a      	mov	r2, r9
 800274c:	42a3      	cmp	r3, r4
 800274e:	4189      	sbcs	r1, r1
 8002750:	1bd2      	subs	r2, r2, r7
 8002752:	4249      	negs	r1, r1
 8002754:	1a52      	subs	r2, r2, r1
 8002756:	4692      	mov	sl, r2
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	d400      	bmi.n	800275e <__aeabi_dsub+0x2ca>
 800275c:	e20a      	b.n	8002b74 <__aeabi_dsub+0x6e0>
 800275e:	1ac4      	subs	r4, r0, r3
 8002760:	42a0      	cmp	r0, r4
 8002762:	4180      	sbcs	r0, r0
 8002764:	464b      	mov	r3, r9
 8002766:	4240      	negs	r0, r0
 8002768:	1aff      	subs	r7, r7, r3
 800276a:	1a3b      	subs	r3, r7, r0
 800276c:	469a      	mov	sl, r3
 800276e:	465d      	mov	r5, fp
 8002770:	e71a      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002772:	003a      	movs	r2, r7
 8002774:	4302      	orrs	r2, r0
 8002776:	d073      	beq.n	8002860 <__aeabi_dsub+0x3cc>
 8002778:	0022      	movs	r2, r4
 800277a:	3a01      	subs	r2, #1
 800277c:	2c01      	cmp	r4, #1
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x2ee>
 8002780:	e0cb      	b.n	800291a <__aeabi_dsub+0x486>
 8002782:	4554      	cmp	r4, sl
 8002784:	d042      	beq.n	800280c <__aeabi_dsub+0x378>
 8002786:	4694      	mov	ip, r2
 8002788:	e748      	b.n	800261c <__aeabi_dsub+0x188>
 800278a:	0010      	movs	r0, r2
 800278c:	3b1f      	subs	r3, #31
 800278e:	40d8      	lsrs	r0, r3
 8002790:	2920      	cmp	r1, #32
 8002792:	d003      	beq.n	800279c <__aeabi_dsub+0x308>
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	409a      	lsls	r2, r3
 800279a:	4314      	orrs	r4, r2
 800279c:	1e63      	subs	r3, r4, #1
 800279e:	419c      	sbcs	r4, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	469a      	mov	sl, r3
 80027a6:	4304      	orrs	r4, r0
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d000      	beq.n	80027ae <__aeabi_dsub+0x31a>
 80027ac:	e6fe      	b.n	80025ac <__aeabi_dsub+0x118>
 80027ae:	4652      	mov	r2, sl
 80027b0:	08e3      	lsrs	r3, r4, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4652      	mov	r2, sl
 80027b8:	46b4      	mov	ip, r6
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <__aeabi_dsub+0x368>)
 80027be:	458c      	cmp	ip, r1
 80027c0:	d02a      	beq.n	8002818 <__aeabi_dsub+0x384>
 80027c2:	0312      	lsls	r2, r2, #12
 80027c4:	0b14      	lsrs	r4, r2, #12
 80027c6:	4662      	mov	r2, ip
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	0d52      	lsrs	r2, r2, #21
 80027cc:	e70c      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027ce:	003c      	movs	r4, r7
 80027d0:	4304      	orrs	r4, r0
 80027d2:	1e62      	subs	r2, r4, #1
 80027d4:	4194      	sbcs	r4, r2
 80027d6:	18e4      	adds	r4, r4, r3
 80027d8:	429c      	cmp	r4, r3
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4252      	negs	r2, r2
 80027de:	444a      	add	r2, r9
 80027e0:	4692      	mov	sl, r2
 80027e2:	4653      	mov	r3, sl
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	d5df      	bpl.n	80027a8 <__aeabi_dsub+0x314>
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__aeabi_dsub+0x368>)
 80027ea:	3601      	adds	r6, #1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x35e>
 80027f0:	e0a0      	b.n	8002934 <__aeabi_dsub+0x4a0>
 80027f2:	0032      	movs	r2, r6
 80027f4:	2400      	movs	r4, #0
 80027f6:	2300      	movs	r3, #0
 80027f8:	e6f6      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	000007ff 	.word	0x000007ff
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	fffff801 	.word	0xfffff801
 8002808:	000007fe 	.word	0x000007fe
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	464a      	mov	r2, r9
 8002810:	0752      	lsls	r2, r2, #29
 8002812:	4313      	orrs	r3, r2
 8002814:	464a      	mov	r2, r9
 8002816:	08d2      	lsrs	r2, r2, #3
 8002818:	0019      	movs	r1, r3
 800281a:	4311      	orrs	r1, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x38c>
 800281e:	e1b5      	b.n	8002b8c <__aeabi_dsub+0x6f8>
 8002820:	2480      	movs	r4, #128	; 0x80
 8002822:	0324      	lsls	r4, r4, #12
 8002824:	4314      	orrs	r4, r2
 8002826:	0324      	lsls	r4, r4, #12
 8002828:	4ad5      	ldr	r2, [pc, #852]	; (8002b80 <__aeabi_dsub+0x6ec>)
 800282a:	0b24      	lsrs	r4, r4, #12
 800282c:	e6dc      	b.n	80025e8 <__aeabi_dsub+0x154>
 800282e:	0020      	movs	r0, r4
 8002830:	f000 fb2a 	bl	8002e88 <__clzsi2>
 8002834:	0003      	movs	r3, r0
 8002836:	3318      	adds	r3, #24
 8002838:	2b1f      	cmp	r3, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dsub+0x3aa>
 800283c:	e695      	b.n	800256a <__aeabi_dsub+0xd6>
 800283e:	0022      	movs	r2, r4
 8002840:	3808      	subs	r0, #8
 8002842:	4082      	lsls	r2, r0
 8002844:	2400      	movs	r4, #0
 8002846:	429e      	cmp	r6, r3
 8002848:	dc00      	bgt.n	800284c <__aeabi_dsub+0x3b8>
 800284a:	e69a      	b.n	8002582 <__aeabi_dsub+0xee>
 800284c:	1af6      	subs	r6, r6, r3
 800284e:	4bcd      	ldr	r3, [pc, #820]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002850:	401a      	ands	r2, r3
 8002852:	4692      	mov	sl, r2
 8002854:	e6a8      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002856:	003c      	movs	r4, r7
 8002858:	4304      	orrs	r4, r0
 800285a:	1e62      	subs	r2, r4, #1
 800285c:	4194      	sbcs	r4, r2
 800285e:	e66c      	b.n	800253a <__aeabi_dsub+0xa6>
 8002860:	464a      	mov	r2, r9
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	0752      	lsls	r2, r2, #29
 8002866:	4313      	orrs	r3, r2
 8002868:	464a      	mov	r2, r9
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	e7a6      	b.n	80027bc <__aeabi_dsub+0x328>
 800286e:	4cc6      	ldr	r4, [pc, #792]	; (8002b88 <__aeabi_dsub+0x6f4>)
 8002870:	1c72      	adds	r2, r6, #1
 8002872:	4222      	tst	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x3e4>
 8002876:	e0ac      	b.n	80029d2 <__aeabi_dsub+0x53e>
 8002878:	464a      	mov	r2, r9
 800287a:	431a      	orrs	r2, r3
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x3ee>
 8002880:	e105      	b.n	8002a8e <__aeabi_dsub+0x5fa>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x3f4>
 8002886:	e156      	b.n	8002b36 <__aeabi_dsub+0x6a2>
 8002888:	003a      	movs	r2, r7
 800288a:	4302      	orrs	r2, r0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x3fc>
 800288e:	e0db      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002890:	181c      	adds	r4, r3, r0
 8002892:	429c      	cmp	r4, r3
 8002894:	419b      	sbcs	r3, r3
 8002896:	444f      	add	r7, r9
 8002898:	46ba      	mov	sl, r7
 800289a:	425b      	negs	r3, r3
 800289c:	449a      	add	sl, r3
 800289e:	4653      	mov	r3, sl
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	d400      	bmi.n	80028a6 <__aeabi_dsub+0x412>
 80028a4:	e780      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028a6:	4652      	mov	r2, sl
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <__aeabi_dsub+0x6f0>)
 80028aa:	2601      	movs	r6, #1
 80028ac:	401a      	ands	r2, r3
 80028ae:	4692      	mov	sl, r2
 80028b0:	e77a      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028b2:	4cb3      	ldr	r4, [pc, #716]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80028b4:	42a2      	cmp	r2, r4
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x426>
 80028b8:	e0c0      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 80028ba:	2480      	movs	r4, #128	; 0x80
 80028bc:	464d      	mov	r5, r9
 80028be:	0424      	lsls	r4, r4, #16
 80028c0:	4325      	orrs	r5, r4
 80028c2:	46a9      	mov	r9, r5
 80028c4:	4664      	mov	r4, ip
 80028c6:	2c38      	cmp	r4, #56	; 0x38
 80028c8:	dc53      	bgt.n	8002972 <__aeabi_dsub+0x4de>
 80028ca:	4661      	mov	r1, ip
 80028cc:	2c1f      	cmp	r4, #31
 80028ce:	dd00      	ble.n	80028d2 <__aeabi_dsub+0x43e>
 80028d0:	e0cd      	b.n	8002a6e <__aeabi_dsub+0x5da>
 80028d2:	2520      	movs	r5, #32
 80028d4:	001e      	movs	r6, r3
 80028d6:	1b2d      	subs	r5, r5, r4
 80028d8:	464c      	mov	r4, r9
 80028da:	40ab      	lsls	r3, r5
 80028dc:	40ac      	lsls	r4, r5
 80028de:	40ce      	lsrs	r6, r1
 80028e0:	1e5d      	subs	r5, r3, #1
 80028e2:	41ab      	sbcs	r3, r5
 80028e4:	4334      	orrs	r4, r6
 80028e6:	4323      	orrs	r3, r4
 80028e8:	464c      	mov	r4, r9
 80028ea:	40cc      	lsrs	r4, r1
 80028ec:	1b3f      	subs	r7, r7, r4
 80028ee:	e045      	b.n	800297c <__aeabi_dsub+0x4e8>
 80028f0:	464a      	mov	r2, r9
 80028f2:	1a1c      	subs	r4, r3, r0
 80028f4:	1bd1      	subs	r1, r2, r7
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	4192      	sbcs	r2, r2
 80028fa:	4252      	negs	r2, r2
 80028fc:	4692      	mov	sl, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	4651      	mov	r1, sl
 8002902:	1a52      	subs	r2, r2, r1
 8002904:	4692      	mov	sl, r2
 8002906:	0212      	lsls	r2, r2, #8
 8002908:	d500      	bpl.n	800290c <__aeabi_dsub+0x478>
 800290a:	e083      	b.n	8002a14 <__aeabi_dsub+0x580>
 800290c:	4653      	mov	r3, sl
 800290e:	4323      	orrs	r3, r4
 8002910:	d000      	beq.n	8002914 <__aeabi_dsub+0x480>
 8002912:	e621      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002914:	2200      	movs	r2, #0
 8002916:	2500      	movs	r5, #0
 8002918:	e753      	b.n	80027c2 <__aeabi_dsub+0x32e>
 800291a:	181c      	adds	r4, r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	419b      	sbcs	r3, r3
 8002920:	444f      	add	r7, r9
 8002922:	46ba      	mov	sl, r7
 8002924:	425b      	negs	r3, r3
 8002926:	449a      	add	sl, r3
 8002928:	4653      	mov	r3, sl
 800292a:	2601      	movs	r6, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dsub+0x49e>
 8002930:	e73a      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002932:	2602      	movs	r6, #2
 8002934:	4652      	mov	r2, sl
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002938:	2101      	movs	r1, #1
 800293a:	401a      	ands	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	4021      	ands	r1, r4
 8002940:	0862      	lsrs	r2, r4, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	07dc      	lsls	r4, r3, #31
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	469a      	mov	sl, r3
 800294a:	4314      	orrs	r4, r2
 800294c:	e62c      	b.n	80025a8 <__aeabi_dsub+0x114>
 800294e:	0039      	movs	r1, r7
 8002950:	3a20      	subs	r2, #32
 8002952:	40d1      	lsrs	r1, r2
 8002954:	4662      	mov	r2, ip
 8002956:	2a20      	cmp	r2, #32
 8002958:	d006      	beq.n	8002968 <__aeabi_dsub+0x4d4>
 800295a:	4664      	mov	r4, ip
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	1b12      	subs	r2, r2, r4
 8002960:	003c      	movs	r4, r7
 8002962:	4094      	lsls	r4, r2
 8002964:	4304      	orrs	r4, r0
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	9c01      	ldr	r4, [sp, #4]
 800296a:	1e62      	subs	r2, r4, #1
 800296c:	4194      	sbcs	r4, r2
 800296e:	430c      	orrs	r4, r1
 8002970:	e5e3      	b.n	800253a <__aeabi_dsub+0xa6>
 8002972:	4649      	mov	r1, r9
 8002974:	4319      	orrs	r1, r3
 8002976:	000b      	movs	r3, r1
 8002978:	1e5c      	subs	r4, r3, #1
 800297a:	41a3      	sbcs	r3, r4
 800297c:	1ac4      	subs	r4, r0, r3
 800297e:	42a0      	cmp	r0, r4
 8002980:	419b      	sbcs	r3, r3
 8002982:	425b      	negs	r3, r3
 8002984:	1afb      	subs	r3, r7, r3
 8002986:	469a      	mov	sl, r3
 8002988:	465d      	mov	r5, fp
 800298a:	0016      	movs	r6, r2
 800298c:	e5dc      	b.n	8002548 <__aeabi_dsub+0xb4>
 800298e:	4649      	mov	r1, r9
 8002990:	4319      	orrs	r1, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x502>
 8002994:	e0ae      	b.n	8002af4 <__aeabi_dsub+0x660>
 8002996:	4661      	mov	r1, ip
 8002998:	4664      	mov	r4, ip
 800299a:	3901      	subs	r1, #1
 800299c:	2c01      	cmp	r4, #1
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x50e>
 80029a0:	e0e0      	b.n	8002b64 <__aeabi_dsub+0x6d0>
 80029a2:	4c77      	ldr	r4, [pc, #476]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029a4:	45a4      	cmp	ip, r4
 80029a6:	d056      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 80029a8:	468c      	mov	ip, r1
 80029aa:	e69a      	b.n	80026e2 <__aeabi_dsub+0x24e>
 80029ac:	4661      	mov	r1, ip
 80029ae:	2220      	movs	r2, #32
 80029b0:	003c      	movs	r4, r7
 80029b2:	1a52      	subs	r2, r2, r1
 80029b4:	4094      	lsls	r4, r2
 80029b6:	0001      	movs	r1, r0
 80029b8:	4090      	lsls	r0, r2
 80029ba:	46a0      	mov	r8, r4
 80029bc:	4664      	mov	r4, ip
 80029be:	1e42      	subs	r2, r0, #1
 80029c0:	4190      	sbcs	r0, r2
 80029c2:	4662      	mov	r2, ip
 80029c4:	40e1      	lsrs	r1, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	40d7      	lsrs	r7, r2
 80029ca:	430c      	orrs	r4, r1
 80029cc:	4304      	orrs	r4, r0
 80029ce:	44b9      	add	r9, r7
 80029d0:	e701      	b.n	80027d6 <__aeabi_dsub+0x342>
 80029d2:	496b      	ldr	r1, [pc, #428]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x546>
 80029d8:	e70c      	b.n	80027f4 <__aeabi_dsub+0x360>
 80029da:	1818      	adds	r0, r3, r0
 80029dc:	4298      	cmp	r0, r3
 80029de:	419b      	sbcs	r3, r3
 80029e0:	444f      	add	r7, r9
 80029e2:	425b      	negs	r3, r3
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	07dc      	lsls	r4, r3, #31
 80029e8:	0840      	lsrs	r0, r0, #1
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	469a      	mov	sl, r3
 80029ee:	0016      	movs	r6, r2
 80029f0:	4304      	orrs	r4, r0
 80029f2:	e6d9      	b.n	80027a8 <__aeabi_dsub+0x314>
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x566>
 80029f8:	e081      	b.n	8002afe <__aeabi_dsub+0x66a>
 80029fa:	003b      	movs	r3, r7
 80029fc:	4303      	orrs	r3, r0
 80029fe:	d11d      	bne.n	8002a3c <__aeabi_dsub+0x5a8>
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2500      	movs	r5, #0
 8002a04:	0312      	lsls	r2, r2, #12
 8002a06:	e70b      	b.n	8002820 <__aeabi_dsub+0x38c>
 8002a08:	08c0      	lsrs	r0, r0, #3
 8002a0a:	077b      	lsls	r3, r7, #29
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	08fa      	lsrs	r2, r7, #3
 8002a12:	e6d3      	b.n	80027bc <__aeabi_dsub+0x328>
 8002a14:	1ac4      	subs	r4, r0, r3
 8002a16:	42a0      	cmp	r0, r4
 8002a18:	4180      	sbcs	r0, r0
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	4240      	negs	r0, r0
 8002a1e:	1aff      	subs	r7, r7, r3
 8002a20:	1a3b      	subs	r3, r7, r0
 8002a22:	469a      	mov	sl, r3
 8002a24:	465d      	mov	r5, fp
 8002a26:	e597      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002a28:	1a1c      	subs	r4, r3, r0
 8002a2a:	464a      	mov	r2, r9
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	419b      	sbcs	r3, r3
 8002a30:	1bd7      	subs	r7, r2, r7
 8002a32:	425b      	negs	r3, r3
 8002a34:	1afb      	subs	r3, r7, r3
 8002a36:	469a      	mov	sl, r3
 8002a38:	2601      	movs	r6, #1
 8002a3a:	e585      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002a3c:	08c0      	lsrs	r0, r0, #3
 8002a3e:	077b      	lsls	r3, r7, #29
 8002a40:	465d      	mov	r5, fp
 8002a42:	4303      	orrs	r3, r0
 8002a44:	08fa      	lsrs	r2, r7, #3
 8002a46:	e6e7      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a48:	464a      	mov	r2, r9
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	0752      	lsls	r2, r2, #29
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	464a      	mov	r2, r9
 8002a52:	08d2      	lsrs	r2, r2, #3
 8002a54:	e6b5      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002a56:	08c0      	lsrs	r0, r0, #3
 8002a58:	077b      	lsls	r3, r7, #29
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	08fa      	lsrs	r2, r7, #3
 8002a5e:	e6db      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a60:	4649      	mov	r1, r9
 8002a62:	4319      	orrs	r1, r3
 8002a64:	000b      	movs	r3, r1
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	418b      	sbcs	r3, r1
 8002a6a:	001c      	movs	r4, r3
 8002a6c:	e653      	b.n	8002716 <__aeabi_dsub+0x282>
 8002a6e:	464d      	mov	r5, r9
 8002a70:	3c20      	subs	r4, #32
 8002a72:	40e5      	lsrs	r5, r4
 8002a74:	2920      	cmp	r1, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x5f0>
 8002a78:	2440      	movs	r4, #64	; 0x40
 8002a7a:	1a64      	subs	r4, r4, r1
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	40a1      	lsls	r1, r4
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4698      	mov	r8, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	1e5c      	subs	r4, r3, #1
 8002a88:	41a3      	sbcs	r3, r4
 8002a8a:	432b      	orrs	r3, r5
 8002a8c:	e776      	b.n	800297c <__aeabi_dsub+0x4e8>
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d0e1      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 8002a92:	003a      	movs	r2, r7
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x608>
 8002a9a:	e6b8      	b.n	800280e <__aeabi_dsub+0x37a>
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	0752      	lsls	r2, r2, #29
 8002aa0:	2480      	movs	r4, #128	; 0x80
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0324      	lsls	r4, r4, #12
 8002aa8:	08d2      	lsrs	r2, r2, #3
 8002aaa:	4222      	tst	r2, r4
 8002aac:	d007      	beq.n	8002abe <__aeabi_dsub+0x62a>
 8002aae:	08fe      	lsrs	r6, r7, #3
 8002ab0:	4226      	tst	r6, r4
 8002ab2:	d104      	bne.n	8002abe <__aeabi_dsub+0x62a>
 8002ab4:	465d      	mov	r5, fp
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	08c3      	lsrs	r3, r0, #3
 8002aba:	077f      	lsls	r7, r7, #29
 8002abc:	433b      	orrs	r3, r7
 8002abe:	0f59      	lsrs	r1, r3, #29
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	e6a6      	b.n	8002818 <__aeabi_dsub+0x384>
 8002aca:	1ac4      	subs	r4, r0, r3
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	1aff      	subs	r7, r7, r3
 8002ad6:	1a3b      	subs	r3, r7, r0
 8002ad8:	469a      	mov	sl, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	2601      	movs	r6, #1
 8002ade:	e533      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x654>
 8002ae6:	e715      	b.n	8002914 <__aeabi_dsub+0x480>
 8002ae8:	08c0      	lsrs	r0, r0, #3
 8002aea:	077b      	lsls	r3, r7, #29
 8002aec:	465d      	mov	r5, fp
 8002aee:	4303      	orrs	r3, r0
 8002af0:	08fa      	lsrs	r2, r7, #3
 8002af2:	e666      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002af4:	08c0      	lsrs	r0, r0, #3
 8002af6:	077b      	lsls	r3, r7, #29
 8002af8:	4303      	orrs	r3, r0
 8002afa:	08fa      	lsrs	r2, r7, #3
 8002afc:	e65e      	b.n	80027bc <__aeabi_dsub+0x328>
 8002afe:	003a      	movs	r2, r7
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	4302      	orrs	r2, r0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x674>
 8002b06:	e682      	b.n	800280e <__aeabi_dsub+0x37a>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	2480      	movs	r4, #128	; 0x80
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	464a      	mov	r2, r9
 8002b12:	0324      	lsls	r4, r4, #12
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	4222      	tst	r2, r4
 8002b18:	d007      	beq.n	8002b2a <__aeabi_dsub+0x696>
 8002b1a:	08fe      	lsrs	r6, r7, #3
 8002b1c:	4226      	tst	r6, r4
 8002b1e:	d104      	bne.n	8002b2a <__aeabi_dsub+0x696>
 8002b20:	465d      	mov	r5, fp
 8002b22:	0032      	movs	r2, r6
 8002b24:	08c3      	lsrs	r3, r0, #3
 8002b26:	077f      	lsls	r7, r7, #29
 8002b28:	433b      	orrs	r3, r7
 8002b2a:	0f59      	lsrs	r1, r3, #29
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	0749      	lsls	r1, r1, #29
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e670      	b.n	8002818 <__aeabi_dsub+0x384>
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	077b      	lsls	r3, r7, #29
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	08fa      	lsrs	r2, r7, #3
 8002b3e:	e640      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002b40:	464c      	mov	r4, r9
 8002b42:	3920      	subs	r1, #32
 8002b44:	40cc      	lsrs	r4, r1
 8002b46:	4661      	mov	r1, ip
 8002b48:	2920      	cmp	r1, #32
 8002b4a:	d006      	beq.n	8002b5a <__aeabi_dsub+0x6c6>
 8002b4c:	4666      	mov	r6, ip
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	1b89      	subs	r1, r1, r6
 8002b52:	464e      	mov	r6, r9
 8002b54:	408e      	lsls	r6, r1
 8002b56:	4333      	orrs	r3, r6
 8002b58:	4698      	mov	r8, r3
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	418b      	sbcs	r3, r1
 8002b60:	431c      	orrs	r4, r3
 8002b62:	e5d8      	b.n	8002716 <__aeabi_dsub+0x282>
 8002b64:	181c      	adds	r4, r3, r0
 8002b66:	4284      	cmp	r4, r0
 8002b68:	4180      	sbcs	r0, r0
 8002b6a:	444f      	add	r7, r9
 8002b6c:	46ba      	mov	sl, r7
 8002b6e:	4240      	negs	r0, r0
 8002b70:	4482      	add	sl, r0
 8002b72:	e6d9      	b.n	8002928 <__aeabi_dsub+0x494>
 8002b74:	4653      	mov	r3, sl
 8002b76:	4323      	orrs	r3, r4
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x6e8>
 8002b7a:	e6cb      	b.n	8002914 <__aeabi_dsub+0x480>
 8002b7c:	e614      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff
 8002b84:	ff7fffff 	.word	0xff7fffff
 8002b88:	000007fe 	.word	0x000007fe
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4a01      	ldr	r2, [pc, #4]	; (8002b94 <__aeabi_dsub+0x700>)
 8002b90:	001c      	movs	r4, r3
 8002b92:	e529      	b.n	80025e8 <__aeabi_dsub+0x154>
 8002b94:	000007ff 	.word	0x000007ff

08002b98 <__aeabi_dcmpun>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	0005      	movs	r5, r0
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002b9e:	031c      	lsls	r4, r3, #12
 8002ba0:	0016      	movs	r6, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	030a      	lsls	r2, r1, #12
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	0b12      	lsrs	r2, r2, #12
 8002baa:	0d49      	lsrs	r1, r1, #21
 8002bac:	0b24      	lsrs	r4, r4, #12
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	4281      	cmp	r1, r0
 8002bb2:	d008      	beq.n	8002bc6 <__aeabi_dcmpun+0x2e>
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	4330      	orrs	r0, r6
 8002bc0:	1e43      	subs	r3, r0, #1
 8002bc2:	4198      	sbcs	r0, r3
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	432a      	orrs	r2, r5
 8002bca:	d1fb      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bcc:	e7f2      	b.n	8002bb4 <__aeabi_dcmpun+0x1c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	000007ff 	.word	0x000007ff

08002bd4 <__aeabi_d2iz>:
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	b530      	push	{r4, r5, lr}
 8002bd8:	4c13      	ldr	r4, [pc, #76]	; (8002c28 <__aeabi_d2iz+0x54>)
 8002bda:	0053      	lsls	r3, r2, #1
 8002bdc:	0309      	lsls	r1, r1, #12
 8002bde:	0005      	movs	r5, r0
 8002be0:	0b09      	lsrs	r1, r1, #12
 8002be2:	2000      	movs	r0, #0
 8002be4:	0d5b      	lsrs	r3, r3, #21
 8002be6:	0fd2      	lsrs	r2, r2, #31
 8002be8:	42a3      	cmp	r3, r4
 8002bea:	dd04      	ble.n	8002bf6 <__aeabi_d2iz+0x22>
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <__aeabi_d2iz+0x58>)
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	dd02      	ble.n	8002bf8 <__aeabi_d2iz+0x24>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <__aeabi_d2iz+0x5c>)
 8002bf4:	18d0      	adds	r0, r2, r3
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	2080      	movs	r0, #128	; 0x80
 8002bfa:	0340      	lsls	r0, r0, #13
 8002bfc:	4301      	orrs	r1, r0
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <__aeabi_d2iz+0x60>)
 8002c00:	1ac0      	subs	r0, r0, r3
 8002c02:	281f      	cmp	r0, #31
 8002c04:	dd08      	ble.n	8002c18 <__aeabi_d2iz+0x44>
 8002c06:	480c      	ldr	r0, [pc, #48]	; (8002c38 <__aeabi_d2iz+0x64>)
 8002c08:	1ac3      	subs	r3, r0, r3
 8002c0a:	40d9      	lsrs	r1, r3
 8002c0c:	000b      	movs	r3, r1
 8002c0e:	4258      	negs	r0, r3
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d1f0      	bne.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c14:	0018      	movs	r0, r3
 8002c16:	e7ee      	b.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c18:	4c08      	ldr	r4, [pc, #32]	; (8002c3c <__aeabi_d2iz+0x68>)
 8002c1a:	40c5      	lsrs	r5, r0
 8002c1c:	46a4      	mov	ip, r4
 8002c1e:	4463      	add	r3, ip
 8002c20:	4099      	lsls	r1, r3
 8002c22:	000b      	movs	r3, r1
 8002c24:	432b      	orrs	r3, r5
 8002c26:	e7f2      	b.n	8002c0e <__aeabi_d2iz+0x3a>
 8002c28:	000003fe 	.word	0x000003fe
 8002c2c:	0000041d 	.word	0x0000041d
 8002c30:	7fffffff 	.word	0x7fffffff
 8002c34:	00000433 	.word	0x00000433
 8002c38:	00000413 	.word	0x00000413
 8002c3c:	fffffbed 	.word	0xfffffbed

08002c40 <__aeabi_i2d>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d016      	beq.n	8002c74 <__aeabi_i2d+0x34>
 8002c46:	17c3      	asrs	r3, r0, #31
 8002c48:	18c5      	adds	r5, r0, r3
 8002c4a:	405d      	eors	r5, r3
 8002c4c:	0fc4      	lsrs	r4, r0, #31
 8002c4e:	0028      	movs	r0, r5
 8002c50:	f000 f91a 	bl	8002e88 <__clzsi2>
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <__aeabi_i2d+0x5c>)
 8002c56:	1a1b      	subs	r3, r3, r0
 8002c58:	280a      	cmp	r0, #10
 8002c5a:	dc16      	bgt.n	8002c8a <__aeabi_i2d+0x4a>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	002e      	movs	r6, r5
 8002c60:	3215      	adds	r2, #21
 8002c62:	4096      	lsls	r6, r2
 8002c64:	220b      	movs	r2, #11
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	40d5      	lsrs	r5, r2
 8002c6a:	055b      	lsls	r3, r3, #21
 8002c6c:	032d      	lsls	r5, r5, #12
 8002c6e:	0b2d      	lsrs	r5, r5, #12
 8002c70:	0d5b      	lsrs	r3, r3, #21
 8002c72:	e003      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c74:	2400      	movs	r4, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	2500      	movs	r5, #0
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	07e4      	lsls	r4, r4, #31
 8002c82:	4323      	orrs	r3, r4
 8002c84:	0030      	movs	r0, r6
 8002c86:	0019      	movs	r1, r3
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	380b      	subs	r0, #11
 8002c8c:	4085      	lsls	r5, r0
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	032d      	lsls	r5, r5, #12
 8002c92:	2600      	movs	r6, #0
 8002c94:	0b2d      	lsrs	r5, r5, #12
 8002c96:	0d5b      	lsrs	r3, r3, #21
 8002c98:	e7f0      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	0000041e 	.word	0x0000041e

08002ca0 <__aeabi_ui2d>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	1e04      	subs	r4, r0, #0
 8002ca4:	d010      	beq.n	8002cc8 <__aeabi_ui2d+0x28>
 8002ca6:	f000 f8ef 	bl	8002e88 <__clzsi2>
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <__aeabi_ui2d+0x48>)
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	280a      	cmp	r0, #10
 8002cb0:	dc11      	bgt.n	8002cd6 <__aeabi_ui2d+0x36>
 8002cb2:	220b      	movs	r2, #11
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	1a12      	subs	r2, r2, r0
 8002cb8:	40d1      	lsrs	r1, r2
 8002cba:	3015      	adds	r0, #21
 8002cbc:	030a      	lsls	r2, r1, #12
 8002cbe:	055b      	lsls	r3, r3, #21
 8002cc0:	4084      	lsls	r4, r0
 8002cc2:	0b12      	lsrs	r2, r2, #12
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	e001      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	0022      	movs	r2, r4
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4082      	lsls	r2, r0
 8002cdc:	055b      	lsls	r3, r3, #21
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	0b12      	lsrs	r2, r2, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	e7f1      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002ce8:	0000041e 	.word	0x0000041e

08002cec <__aeabi_f2d>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0242      	lsls	r2, r0, #9
 8002cf0:	0043      	lsls	r3, r0, #1
 8002cf2:	0fc4      	lsrs	r4, r0, #31
 8002cf4:	20fe      	movs	r0, #254	; 0xfe
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	0a55      	lsrs	r5, r2, #9
 8002cfc:	4208      	tst	r0, r1
 8002cfe:	d00c      	beq.n	8002d1a <__aeabi_f2d+0x2e>
 8002d00:	21e0      	movs	r1, #224	; 0xe0
 8002d02:	0089      	lsls	r1, r1, #2
 8002d04:	468c      	mov	ip, r1
 8002d06:	076d      	lsls	r5, r5, #29
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	4463      	add	r3, ip
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0028      	movs	r0, r5
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <__aeabi_f2d+0x5c>
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	d01b      	beq.n	8002d5a <__aeabi_f2d+0x6e>
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f8b0 	bl	8002e88 <__clzsi2>
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	dc1c      	bgt.n	8002d66 <__aeabi_f2d+0x7a>
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	002a      	movs	r2, r5
 8002d30:	1a1b      	subs	r3, r3, r0
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	0003      	movs	r3, r0
 8002d36:	3315      	adds	r3, #21
 8002d38:	409d      	lsls	r5, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <__aeabi_f2d+0x88>)
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	1a1b      	subs	r3, r3, r0
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	0b12      	lsrs	r2, r2, #12
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	e7e1      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d009      	beq.n	8002d60 <__aeabi_f2d+0x74>
 8002d4c:	0b13      	lsrs	r3, r2, #12
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0312      	lsls	r2, r2, #12
 8002d52:	431a      	orrs	r2, r3
 8002d54:	076d      	lsls	r5, r5, #29
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d58:	e7d8      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e7d5      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d60:	2200      	movs	r2, #0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d64:	e7d2      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d66:	0003      	movs	r3, r0
 8002d68:	002a      	movs	r2, r5
 8002d6a:	3b0b      	subs	r3, #11
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	2500      	movs	r5, #0
 8002d70:	e7e3      	b.n	8002d3a <__aeabi_f2d+0x4e>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00000389 	.word	0x00000389
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_d2f>:
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d80:	004b      	lsls	r3, r1, #1
 8002d82:	030d      	lsls	r5, r1, #12
 8002d84:	0f40      	lsrs	r0, r0, #29
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	0fcc      	lsrs	r4, r1, #31
 8002d8a:	0a6d      	lsrs	r5, r5, #9
 8002d8c:	493a      	ldr	r1, [pc, #232]	; (8002e78 <__aeabi_d2f+0xfc>)
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	1c58      	adds	r0, r3, #1
 8002d92:	00d7      	lsls	r7, r2, #3
 8002d94:	4208      	tst	r0, r1
 8002d96:	d00a      	beq.n	8002dae <__aeabi_d2f+0x32>
 8002d98:	4938      	ldr	r1, [pc, #224]	; (8002e7c <__aeabi_d2f+0x100>)
 8002d9a:	1859      	adds	r1, r3, r1
 8002d9c:	29fe      	cmp	r1, #254	; 0xfe
 8002d9e:	dd16      	ble.n	8002dce <__aeabi_d2f+0x52>
 8002da0:	20ff      	movs	r0, #255	; 0xff
 8002da2:	2200      	movs	r2, #0
 8002da4:	05c0      	lsls	r0, r0, #23
 8002da6:	4310      	orrs	r0, r2
 8002da8:	07e4      	lsls	r4, r4, #31
 8002daa:	4320      	orrs	r0, r4
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <__aeabi_d2f+0x44>
 8002db2:	433d      	orrs	r5, r7
 8002db4:	d026      	beq.n	8002e04 <__aeabi_d2f+0x88>
 8002db6:	2205      	movs	r2, #5
 8002db8:	0192      	lsls	r2, r2, #6
 8002dba:	0a52      	lsrs	r2, r2, #9
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	e7f1      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dc0:	432f      	orrs	r7, r5
 8002dc2:	d0ed      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	03d2      	lsls	r2, r2, #15
 8002dc8:	20ff      	movs	r0, #255	; 0xff
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	e7ea      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	dd1b      	ble.n	8002e0a <__aeabi_d2f+0x8e>
 8002dd2:	0192      	lsls	r2, r2, #6
 8002dd4:	1e50      	subs	r0, r2, #1
 8002dd6:	4182      	sbcs	r2, r0
 8002dd8:	00ed      	lsls	r5, r5, #3
 8002dda:	0f7f      	lsrs	r7, r7, #29
 8002ddc:	432a      	orrs	r2, r5
 8002dde:	433a      	orrs	r2, r7
 8002de0:	0753      	lsls	r3, r2, #29
 8002de2:	d047      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002de4:	230f      	movs	r3, #15
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d000      	beq.n	8002dee <__aeabi_d2f+0x72>
 8002dec:	3204      	adds	r2, #4
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	04db      	lsls	r3, r3, #19
 8002df2:	4013      	ands	r3, r2
 8002df4:	d03e      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002df6:	1c48      	adds	r0, r1, #1
 8002df8:	29fe      	cmp	r1, #254	; 0xfe
 8002dfa:	d0d1      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	0a52      	lsrs	r2, r2, #9
 8002e00:	b2c0      	uxtb	r0, r0
 8002e02:	e7cf      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e04:	2000      	movs	r0, #0
 8002e06:	2200      	movs	r2, #0
 8002e08:	e7cc      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	3217      	adds	r2, #23
 8002e0e:	db2f      	blt.n	8002e70 <__aeabi_d2f+0xf4>
 8002e10:	2680      	movs	r6, #128	; 0x80
 8002e12:	0436      	lsls	r6, r6, #16
 8002e14:	432e      	orrs	r6, r5
 8002e16:	251e      	movs	r5, #30
 8002e18:	1a6d      	subs	r5, r5, r1
 8002e1a:	2d1f      	cmp	r5, #31
 8002e1c:	dd11      	ble.n	8002e42 <__aeabi_d2f+0xc6>
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4252      	negs	r2, r2
 8002e22:	1a52      	subs	r2, r2, r1
 8002e24:	0031      	movs	r1, r6
 8002e26:	40d1      	lsrs	r1, r2
 8002e28:	2d20      	cmp	r5, #32
 8002e2a:	d004      	beq.n	8002e36 <__aeabi_d2f+0xba>
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <__aeabi_d2f+0x104>)
 8002e2e:	4694      	mov	ip, r2
 8002e30:	4463      	add	r3, ip
 8002e32:	409e      	lsls	r6, r3
 8002e34:	4337      	orrs	r7, r6
 8002e36:	003a      	movs	r2, r7
 8002e38:	1e53      	subs	r3, r2, #1
 8002e3a:	419a      	sbcs	r2, r3
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	2100      	movs	r1, #0
 8002e40:	e7ce      	b.n	8002de0 <__aeabi_d2f+0x64>
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <__aeabi_d2f+0x108>)
 8002e44:	0038      	movs	r0, r7
 8002e46:	4694      	mov	ip, r2
 8002e48:	4463      	add	r3, ip
 8002e4a:	4098      	lsls	r0, r3
 8002e4c:	003a      	movs	r2, r7
 8002e4e:	1e41      	subs	r1, r0, #1
 8002e50:	4188      	sbcs	r0, r1
 8002e52:	409e      	lsls	r6, r3
 8002e54:	40ea      	lsrs	r2, r5
 8002e56:	4330      	orrs	r0, r6
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0753      	lsls	r3, r2, #29
 8002e5e:	d1c1      	bne.n	8002de4 <__aeabi_d2f+0x68>
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0013      	movs	r3, r2
 8002e64:	04c9      	lsls	r1, r1, #19
 8002e66:	2001      	movs	r0, #1
 8002e68:	400b      	ands	r3, r1
 8002e6a:	420a      	tst	r2, r1
 8002e6c:	d1c6      	bne.n	8002dfc <__aeabi_d2f+0x80>
 8002e6e:	e7a3      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e70:	2300      	movs	r3, #0
 8002e72:	e7a0      	b.n	8002db6 <__aeabi_d2f+0x3a>
 8002e74:	000b      	movs	r3, r1
 8002e76:	e79f      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e78:	000007fe 	.word	0x000007fe
 8002e7c:	fffffc80 	.word	0xfffffc80
 8002e80:	fffffca2 	.word	0xfffffca2
 8002e84:	fffffc82 	.word	0xfffffc82

08002e88 <__clzsi2>:
 8002e88:	211c      	movs	r1, #28
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0xe>
 8002e92:	0c00      	lsrs	r0, r0, #16
 8002e94:	3910      	subs	r1, #16
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d301      	bcc.n	8002ea0 <__clzsi2+0x18>
 8002e9c:	0a00      	lsrs	r0, r0, #8
 8002e9e:	3908      	subs	r1, #8
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0x22>
 8002ea6:	0900      	lsrs	r0, r0, #4
 8002ea8:	3904      	subs	r1, #4
 8002eaa:	a202      	add	r2, pc, #8	; (adr r2, 8002eb4 <__clzsi2+0x2c>)
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	1840      	adds	r0, r0, r1
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	02020304 	.word	0x02020304
 8002eb8:	01010101 	.word	0x01010101
	...

08002ec4 <__clzdi2>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d103      	bne.n	8002ed2 <__clzdi2+0xe>
 8002eca:	f7ff ffdd 	bl	8002e88 <__clzsi2>
 8002ece:	3020      	adds	r0, #32
 8002ed0:	e002      	b.n	8002ed8 <__clzdi2+0x14>
 8002ed2:	0008      	movs	r0, r1
 8002ed4:	f7ff ffd8 	bl	8002e88 <__clzsi2>
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)

08002edc <AHT20_Master_Transmit>:
 */

#include "AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	1cbb      	adds	r3, r7, #2
 8002ee8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8002eea:	250f      	movs	r5, #15
 8002eec:	197c      	adds	r4, r7, r5
 8002eee:	1cbb      	adds	r3, r7, #2
 8002ef0:	8819      	ldrh	r1, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <AHT20_Master_Transmit+0x38>)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	425b      	negs	r3, r3
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	000b      	movs	r3, r1
 8002efe:	2170      	movs	r1, #112	; 0x70
 8002f00:	f001 fa5a 	bl	80043b8 <HAL_I2C_Master_Transmit>
 8002f04:	0003      	movs	r3, r0
 8002f06:	7023      	strb	r3, [r4, #0]

	return status;
 8002f08:	197b      	adds	r3, r7, r5
 8002f0a:	781b      	ldrb	r3, [r3, #0]
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}
 8002f14:	200001f8 	.word	0x200001f8

08002f18 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	000a      	movs	r2, r1
 8002f22:	1cbb      	adds	r3, r7, #2
 8002f24:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 8002f26:	250f      	movs	r5, #15
 8002f28:	197c      	adds	r4, r7, r5
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	8819      	ldrh	r1, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <AHT20_Master_Receive+0x38>)
 8002f32:	2301      	movs	r3, #1
 8002f34:	425b      	negs	r3, r3
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	000b      	movs	r3, r1
 8002f3a:	2171      	movs	r1, #113	; 0x71
 8002f3c:	f001 fb44 	bl	80045c8 <HAL_I2C_Master_Receive>
 8002f40:	0003      	movs	r3, r0
 8002f42:	7023      	strb	r3, [r4, #0]

	return status;
 8002f44:	197b      	adds	r3, r7, r5
 8002f46:	781b      	ldrb	r3, [r3, #0]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f50:	200001f8 	.word	0x200001f8

08002f54 <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <AHT20_Init+0x70>)
 8002f5e:	8811      	ldrh	r1, [r2, #0]
 8002f60:	8019      	strh	r1, [r3, #0]
 8002f62:	7892      	ldrb	r2, [r2, #2]
 8002f64:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2103      	movs	r1, #3
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff ffb6 	bl	8002edc <AHT20_Master_Transmit>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d004      	beq.n	8002f7e <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <AHT20_Init+0x74>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f006 f92c 	bl	80091d4 <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 8002f7c:	e01d      	b.n	8002fba <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <AHT20_Init+0x78>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f006 f927 	bl	80091d4 <puts>
		uint8_t value = 0x00;
 8002f86:	1cfb      	adds	r3, r7, #3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f000 fe5f 	bl	8003c50 <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 8002f92:	1cfb      	adds	r3, r7, #3
 8002f94:	2101      	movs	r1, #1
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ffbe 	bl	8002f18 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <AHT20_Init+0x7c>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f006 f912 	bl	80091d4 <puts>
}
 8002fb0:	e003      	b.n	8002fba <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <AHT20_Init+0x80>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f006 f90d 	bl	80091d4 <puts>
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	0800bf8c 	.word	0x0800bf8c
 8002fc8:	0800bf30 	.word	0x0800bf30
 8002fcc:	0800bf4c 	.word	0x0800bf4c
 8002fd0:	0800bf60 	.word	0x0800bf60
 8002fd4:	0800bf74 	.word	0x0800bf74

08002fd8 <AHT20_Read>:

void AHT20_Read(float *Temp, float *Hum)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 8002fe2:	2010      	movs	r0, #16
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	4a35      	ldr	r2, [pc, #212]	; (80030bc <AHT20_Read+0xe4>)
 8002fe8:	8811      	ldrh	r1, [r2, #0]
 8002fea:	8019      	strh	r1, [r3, #0]
 8002fec:	7892      	ldrb	r2, [r2, #2]
 8002fee:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8002ff0:	183b      	adds	r3, r7, r0
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff71 	bl	8002edc <AHT20_Master_Transmit>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d004      	beq.n	8003008 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <AHT20_Read+0xe8>)
 8003000:	0018      	movs	r0, r3
 8003002:	f006 f8e7 	bl	80091d4 <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 8003006:	e054      	b.n	80030b2 <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8003008:	2050      	movs	r0, #80	; 0x50
 800300a:	f000 fe21 	bl	8003c50 <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 800300e:	2408      	movs	r4, #8
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2106      	movs	r1, #6
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff ff7f 	bl	8002f18 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 800301a:	193b      	adds	r3, r7, r4
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b25b      	sxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	db46      	blt.n	80030b2 <AHT20_Read+0xda>
			uint32_t data = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8003028:	193b      	adds	r3, r7, r4
 800302a:	78db      	ldrb	r3, [r3, #3]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	b2db      	uxtb	r3, r3
 8003030:	001a      	movs	r2, r3
 8003032:	193b      	adds	r3, r7, r4
 8003034:	789b      	ldrb	r3, [r3, #2]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	18d2      	adds	r2, r2, r3
 800303a:	193b      	adds	r3, r7, r4
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	031b      	lsls	r3, r3, #12
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7fd ffc1 	bl	8000fcc <__aeabi_ui2f>
 800304a:	1c03      	adds	r3, r0, #0
 800304c:	491d      	ldr	r1, [pc, #116]	; (80030c4 <AHT20_Read+0xec>)
 800304e:	1c18      	adds	r0, r3, #0
 8003050:	f7fd fcce 	bl	80009f0 <__aeabi_fmul>
 8003054:	1c03      	adds	r3, r0, #0
 8003056:	2193      	movs	r1, #147	; 0x93
 8003058:	05c9      	lsls	r1, r1, #23
 800305a:	1c18      	adds	r0, r3, #0
 800305c:	f7fd fbae 	bl	80007bc <__aeabi_fdiv>
 8003060:	1c03      	adds	r3, r0, #0
 8003062:	1c1a      	adds	r2, r3, #0
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 8003068:	193b      	adds	r3, r7, r4
 800306a:	78db      	ldrb	r3, [r3, #3]
 800306c:	041a      	lsls	r2, r3, #16
 800306e:	23f0      	movs	r3, #240	; 0xf0
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	401a      	ands	r2, r3
 8003074:	193b      	adds	r3, r7, r4
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	193a      	adds	r2, r7, r4
 800307e:	7952      	ldrb	r2, [r2, #5]
 8003080:	189b      	adds	r3, r3, r2
 8003082:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 8003084:	6978      	ldr	r0, [r7, #20]
 8003086:	f7fd ffa1 	bl	8000fcc <__aeabi_ui2f>
 800308a:	1c03      	adds	r3, r0, #0
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <AHT20_Read+0xf0>)
 800308e:	1c18      	adds	r0, r3, #0
 8003090:	f7fd fcae 	bl	80009f0 <__aeabi_fmul>
 8003094:	1c03      	adds	r3, r0, #0
 8003096:	2193      	movs	r1, #147	; 0x93
 8003098:	05c9      	lsls	r1, r1, #23
 800309a:	1c18      	adds	r0, r3, #0
 800309c:	f7fd fb8e 	bl	80007bc <__aeabi_fdiv>
 80030a0:	1c03      	adds	r3, r0, #0
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <AHT20_Read+0xf4>)
 80030a4:	1c18      	adds	r0, r3, #0
 80030a6:	f7fd fdf1 	bl	8000c8c <__aeabi_fsub>
 80030aa:	1c03      	adds	r3, r0, #0
 80030ac:	1c1a      	adds	r2, r3, #0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b007      	add	sp, #28
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	0800bfb0 	.word	0x0800bfb0
 80030c0:	0800bf90 	.word	0x0800bf90
 80030c4:	42c80000 	.word	0x42c80000
 80030c8:	43480000 	.word	0x43480000
 80030cc:	42480000 	.word	0x42480000

080030d0 <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	2382      	movs	r3, #130	; 0x82
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <NEO6_ReceiveUartChar+0xc0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	d503      	bpl.n	80030f0 <NEO6_ReceiveUartChar+0x20>
 80030e8:	3b01      	subs	r3, #1
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <NEO6_ReceiveUartChar+0xc4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	3301      	adds	r3, #1
 80030f0:	001a      	movs	r2, r3
 80030f2:	200f      	movs	r0, #15
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	2306      	movs	r3, #6
 80030fc:	33ff      	adds	r3, #255	; 0xff
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	183a      	adds	r2, r7, r0
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d038      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b0d      	cmp	r3, #13
 8003110:	d119      	bne.n	8003146 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	2383      	movs	r3, #131	; 0x83
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	3301      	adds	r3, #1
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	2383      	movs	r3, #131	; 0x83
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	1839      	adds	r1, r7, r0
 800312a:	2382      	movs	r3, #130	; 0x82
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	7809      	ldrb	r1, [r1, #0]
 8003130:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003132:	183b      	adds	r3, r7, r0
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	b2d1      	uxtb	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	18d3      	adds	r3, r2, r3
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	711a      	strb	r2, [r3, #4]
 8003144:	e019      	b.n	800317a <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d00f      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	200f      	movs	r0, #15
 800315e:	1839      	adds	r1, r7, r0
 8003160:	2382      	movs	r3, #130	; 0x82
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	7809      	ldrb	r1, [r1, #0]
 8003166:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003168:	183b      	adds	r3, r7, r0
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	b2d1      	uxtb	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	1c0a      	adds	r2, r1, #0
 8003178:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003180:	2201      	movs	r2, #1
 8003182:	0018      	movs	r0, r3
 8003184:	f002 fee0 	bl	8005f48 <HAL_UART_Receive_IT>
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b004      	add	sp, #16
 800318e:	bd80      	pop	{r7, pc}
 8003190:	800000ff 	.word	0x800000ff
 8003194:	ffffff00 	.word	0xffffff00
 8003198:	200001f4 	.word	0x200001f4

0800319c <NEO6_Init>:
		NEO6_ParseLine(GpsStateHandler);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	2382      	movs	r3, #130	; 0x82
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	2306      	movs	r3, #6
 80031ba:	33ff      	adds	r3, #255	; 0xff
 80031bc:	2100      	movs	r1, #0
 80031be:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	2383      	movs	r3, #131	; 0x83
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2100      	movs	r1, #0
 80031c8:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	2388      	movs	r3, #136	; 0x88
 80031ce:	33ff      	adds	r3, #255	; 0xff
 80031d0:	2100      	movs	r1, #0
 80031d2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	23c4      	movs	r3, #196	; 0xc4
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2100      	movs	r1, #0
 80031dc:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	238a      	movs	r3, #138	; 0x8a
 80031e2:	33ff      	adds	r3, #255	; 0xff
 80031e4:	2100      	movs	r1, #0
 80031e6:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	23c5      	movs	r3, #197	; 0xc5
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2100      	movs	r1, #0
 80031f0:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	238c      	movs	r3, #140	; 0x8c
 80031f6:	33ff      	adds	r3, #255	; 0xff
 80031f8:	2100      	movs	r1, #0
 80031fa:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	23c6      	movs	r3, #198	; 0xc6
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2100      	movs	r1, #0
 8003204:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	23c8      	movs	r3, #200	; 0xc8
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	18d1      	adds	r1, r2, r3
 800320e:	2200      	movs	r2, #0
 8003210:	2300      	movs	r3, #0
 8003212:	600a      	str	r2, [r1, #0]
 8003214:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	23cc      	movs	r3, #204	; 0xcc
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2130      	movs	r1, #48	; 0x30
 800321e:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	23d0      	movs	r3, #208	; 0xd0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	18d1      	adds	r1, r2, r3
 8003228:	2200      	movs	r2, #0
 800322a:	2300      	movs	r3, #0
 800322c:	600a      	str	r2, [r1, #0]
 800322e:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	23d4      	movs	r3, #212	; 0xd4
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2130      	movs	r1, #48	; 0x30
 8003238:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	23e0      	movs	r3, #224	; 0xe0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	18d1      	adds	r1, r2, r3
 8003242:	2200      	movs	r2, #0
 8003244:	2300      	movs	r3, #0
 8003246:	600a      	str	r2, [r1, #0]
 8003248:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	23dc      	movs	r3, #220	; 0xdc
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	18d1      	adds	r1, r2, r3
 8003252:	2200      	movs	r2, #0
 8003254:	2300      	movs	r3, #0
 8003256:	600a      	str	r2, [r1, #0]
 8003258:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	23e4      	movs	r3, #228	; 0xe4
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2100      	movs	r1, #0
 8003262:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	23ca      	movs	r3, #202	; 0xca
 8003268:	33ff      	adds	r3, #255	; 0xff
 800326a:	2100      	movs	r1, #0
 800326c:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	23e8      	movs	r3, #232	; 0xe8
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	18d1      	adds	r1, r2, r3
 8003276:	2200      	movs	r2, #0
 8003278:	2300      	movs	r3, #0
 800327a:	600a      	str	r2, [r1, #0]
 800327c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	23ec      	movs	r3, #236	; 0xec
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	18d1      	adds	r1, r2, r3
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	600a      	str	r2, [r1, #0]
 800328c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	23f0      	movs	r3, #240	; 0xf0
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	2200      	movs	r2, #0
 8003298:	2300      	movs	r3, #0
 800329a:	600a      	str	r2, [r1, #0]
 800329c:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4904      	ldr	r1, [pc, #16]	; (80032b4 <NEO6_Init+0x118>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f002 fe4e 	bl	8005f48 <HAL_UART_Receive_IT>
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200001f4 	.word	0x200001f4

080032b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b08b      	sub	sp, #44	; 0x2c
 80032bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032be:	2414      	movs	r4, #20
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	0018      	movs	r0, r3
 80032c4:	2314      	movs	r3, #20
 80032c6:	001a      	movs	r2, r3
 80032c8:	2100      	movs	r1, #0
 80032ca:	f006 f89f 	bl	800940c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032d4:	2104      	movs	r1, #4
 80032d6:	430a      	orrs	r2, r1
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	2204      	movs	r2, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <MX_GPIO_Init+0xd8>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <MX_GPIO_Init+0xd8>)
 800331c:	2102      	movs	r1, #2
 800331e:	430a      	orrs	r2, r1
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800332e:	23a0      	movs	r3, #160	; 0xa0
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	2200      	movs	r2, #0
 8003334:	2120      	movs	r1, #32
 8003336:	0018      	movs	r0, r3
 8003338:	f000 ff8a 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800333c:	193b      	adds	r3, r7, r4
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	0192      	lsls	r2, r2, #6
 8003342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003344:	193b      	adds	r3, r7, r4
 8003346:	2284      	movs	r2, #132	; 0x84
 8003348:	0392      	lsls	r2, r2, #14
 800334a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	193b      	adds	r3, r7, r4
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003352:	193b      	adds	r3, r7, r4
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <MX_GPIO_Init+0xdc>)
 8003356:	0019      	movs	r1, r3
 8003358:	0010      	movs	r0, r2
 800335a:	f000 fe03 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800335e:	0021      	movs	r1, r4
 8003360:	187b      	adds	r3, r7, r1
 8003362:	2220      	movs	r2, #32
 8003364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2201      	movs	r2, #1
 800336a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003378:	187a      	adds	r2, r7, r1
 800337a:	23a0      	movs	r3, #160	; 0xa0
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f000 fdef 	bl	8003f64 <HAL_GPIO_Init>

}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b00b      	add	sp, #44	; 0x2c
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	40021000 	.word	0x40021000
 8003394:	50000800 	.word	0x50000800

08003398 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <MX_I2C1_Init+0x74>)
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <MX_I2C1_Init+0x78>)
 80033a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <MX_I2C1_Init+0x74>)
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <MX_I2C1_Init+0x7c>)
 80033a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <MX_I2C1_Init+0x74>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <MX_I2C1_Init+0x74>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <MX_I2C1_Init+0x74>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033ba:	4b14      	ldr	r3, [pc, #80]	; (800340c <MX_I2C1_Init+0x74>)
 80033bc:	2200      	movs	r2, #0
 80033be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <MX_I2C1_Init+0x74>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <MX_I2C1_Init+0x74>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <MX_I2C1_Init+0x74>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <MX_I2C1_Init+0x74>)
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 ff59 	bl	800428c <HAL_I2C_Init>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d001      	beq.n	80033e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033de:	f000 f9bd 	bl	800375c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <MX_I2C1_Init+0x74>)
 80033e4:	2100      	movs	r1, #0
 80033e6:	0018      	movs	r0, r3
 80033e8:	f001 fcac 	bl	8004d44 <HAL_I2CEx_ConfigAnalogFilter>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d001      	beq.n	80033f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033f0:	f000 f9b4 	bl	800375c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <MX_I2C1_Init+0x74>)
 80033f6:	2100      	movs	r1, #0
 80033f8:	0018      	movs	r0, r3
 80033fa:	f001 fcef 	bl	8004ddc <HAL_I2CEx_ConfigDigitalFilter>
 80033fe:	1e03      	subs	r3, r0, #0
 8003400:	d001      	beq.n	8003406 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003402:	f000 f9ab 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	200001f8 	.word	0x200001f8
 8003410:	40005400 	.word	0x40005400
 8003414:	00707cbb 	.word	0x00707cbb

08003418 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <MX_I2C2_Init+0x74>)
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <MX_I2C2_Init+0x78>)
 8003420:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <MX_I2C2_Init+0x74>)
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <MX_I2C2_Init+0x7c>)
 8003426:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <MX_I2C2_Init+0x74>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <MX_I2C2_Init+0x74>)
 8003430:	2201      	movs	r2, #1
 8003432:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003434:	4b15      	ldr	r3, [pc, #84]	; (800348c <MX_I2C2_Init+0x74>)
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <MX_I2C2_Init+0x74>)
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <MX_I2C2_Init+0x74>)
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <MX_I2C2_Init+0x74>)
 8003448:	2200      	movs	r2, #0
 800344a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <MX_I2C2_Init+0x74>)
 800344e:	2200      	movs	r2, #0
 8003450:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <MX_I2C2_Init+0x74>)
 8003454:	0018      	movs	r0, r3
 8003456:	f000 ff19 	bl	800428c <HAL_I2C_Init>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d001      	beq.n	8003462 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800345e:	f000 f97d 	bl	800375c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <MX_I2C2_Init+0x74>)
 8003464:	2100      	movs	r1, #0
 8003466:	0018      	movs	r0, r3
 8003468:	f001 fc6c 	bl	8004d44 <HAL_I2CEx_ConfigAnalogFilter>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003470:	f000 f974 	bl	800375c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <MX_I2C2_Init+0x74>)
 8003476:	2100      	movs	r1, #0
 8003478:	0018      	movs	r0, r3
 800347a:	f001 fcaf 	bl	8004ddc <HAL_I2CEx_ConfigDigitalFilter>
 800347e:	1e03      	subs	r3, r0, #0
 8003480:	d001      	beq.n	8003486 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003482:	f000 f96b 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	2000024c 	.word	0x2000024c
 8003490:	40005800 	.word	0x40005800
 8003494:	00707cbb 	.word	0x00707cbb

08003498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b08b      	sub	sp, #44	; 0x2c
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	2414      	movs	r4, #20
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	0018      	movs	r0, r3
 80034a6:	2314      	movs	r3, #20
 80034a8:	001a      	movs	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	f005 ffae 	bl	800940c <memset>
  if(i2cHandle->Instance==I2C1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <HAL_I2C_MspInit+0xdc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d129      	bne.n	800350e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ba:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 80034c0:	2102      	movs	r1, #2
 80034c2:	430a      	orrs	r2, r1
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80034c6:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034d2:	0021      	movs	r1, r4
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	22c0      	movs	r2, #192	; 0xc0
 80034d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	2212      	movs	r2, #18
 80034de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	187b      	adds	r3, r7, r1
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	2203      	movs	r2, #3
 80034ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	2201      	movs	r2, #1
 80034f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	4a21      	ldr	r2, [pc, #132]	; (800357c <HAL_I2C_MspInit+0xe4>)
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f000 fd33 	bl	8003f64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034fe:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 8003500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	0389      	lsls	r1, r1, #14
 8003508:	430a      	orrs	r2, r1
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800350c:	e02e      	b.n	800356c <HAL_I2C_MspInit+0xd4>
  else if(i2cHandle->Instance==I2C2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_I2C_MspInit+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d129      	bne.n	800356c <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 800351e:	2102      	movs	r1, #2
 8003520:	430a      	orrs	r2, r1
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	2202      	movs	r2, #2
 800352a:	4013      	ands	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003530:	2114      	movs	r1, #20
 8003532:	187b      	adds	r3, r7, r1
 8003534:	22c0      	movs	r2, #192	; 0xc0
 8003536:	01d2      	lsls	r2, r2, #7
 8003538:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800353a:	187b      	adds	r3, r7, r1
 800353c:	2212      	movs	r2, #18
 800353e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	187b      	adds	r3, r7, r1
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003546:	187b      	adds	r3, r7, r1
 8003548:	2203      	movs	r2, #3
 800354a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800354c:	187b      	adds	r3, r7, r1
 800354e:	2205      	movs	r2, #5
 8003550:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	187b      	adds	r3, r7, r1
 8003554:	4a09      	ldr	r2, [pc, #36]	; (800357c <HAL_I2C_MspInit+0xe4>)
 8003556:	0019      	movs	r1, r3
 8003558:	0010      	movs	r0, r2
 800355a:	f000 fd03 	bl	8003f64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 8003560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_I2C_MspInit+0xe0>)
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	03c9      	lsls	r1, r1, #15
 8003568:	430a      	orrs	r2, r1
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b00b      	add	sp, #44	; 0x2c
 8003572:	bd90      	pop	{r4, r7, pc}
 8003574:	40005400 	.word	0x40005400
 8003578:	40021000 	.word	0x40021000
 800357c:	50000400 	.word	0x50000400
 8003580:	40005800 	.word	0x40005800

08003584 <__io_putchar>:

uint8_t Message[64];
uint8_t MessageLength;

int __io_putchar(int ch) // to pc
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b0a      	cmp	r3, #10
 8003590:	d102      	bne.n	8003598 <__io_putchar+0x14>
    __io_putchar('\r');
 8003592:	200d      	movs	r0, #13
 8003594:	f7ff fff6 	bl	8003584 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003598:	2301      	movs	r3, #1
 800359a:	425b      	negs	r3, r3
 800359c:	1d39      	adds	r1, r7, #4
 800359e:	4804      	ldr	r0, [pc, #16]	; (80035b0 <__io_putchar+0x2c>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	f002 fc31 	bl	8005e08 <HAL_UART_Transmit>

  return 1;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000514 	.word	0x20000514

080035b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_UART_RxCpltCallback+0x24>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d103      	bne.n	80035ce <HAL_UART_RxCpltCallback+0x1a>
  {
    NEO6_ReceiveUartChar(&GpsState);
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_UART_RxCpltCallback+0x24>)
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7ff fd81 	bl	80030d0 <NEO6_ReceiveUartChar>
  }
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b002      	add	sp, #8
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	200002a0 	.word	0x200002a0

080035dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035e2:	f000 fac5 	bl	8003b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035e6:	f000 f841 	bl	800366c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ea:	f7ff fe65 	bl	80032b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80035ee:	f7ff fed3 	bl	8003398 <MX_I2C1_Init>
  MX_I2C2_Init();
 80035f2:	f7ff ff11 	bl	8003418 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80035f6:	f000 f9b3 	bl	8003960 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80035fa:	f000 f9e1 	bl	80039c0 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  AHT20_Init();
 80035fe:	f7ff fca9 	bl	8002f54 <AHT20_Init>
  NEO6_Init(&GpsState, &huart1);
 8003602:	4a17      	ldr	r2, [pc, #92]	; (8003660 <main+0x84>)
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <main+0x88>)
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff fdc7 	bl	800319c <NEO6_Init>

  uint32_t Timer = HAL_GetTick();
 800360e:	f000 fb15 	bl	8003c3c <HAL_GetTick>
 8003612:	0003      	movs	r3, r0
 8003614:	60fb      	str	r3, [r7, #12]
  float Temp = 0.0f;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
  float Hum = 0.0f;
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]

  while (1)
  {
//	  MessageLength = sprintf((char*)Message, "\033[2J\033[;H"); // Clear terminal and home cursor
//	  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
	  AHT20_Read(&Temp, &Hum);
 800361e:	1d3a      	adds	r2, r7, #4
 8003620:	2308      	movs	r3, #8
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fcd6 	bl	8002fd8 <AHT20_Read>
	  printf("Temperature = %.1fC\n Hum = %.1f\n", Temp, Hum);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c18      	adds	r0, r3, #0
 8003630:	f7ff fb5c 	bl	8002cec <__aeabi_f2d>
 8003634:	0004      	movs	r4, r0
 8003636:	000d      	movs	r5, r1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1c18      	adds	r0, r3, #0
 800363c:	f7ff fb56 	bl	8002cec <__aeabi_f2d>
 8003640:	0002      	movs	r2, r0
 8003642:	000b      	movs	r3, r1
 8003644:	4908      	ldr	r1, [pc, #32]	; (8003668 <main+0x8c>)
 8003646:	9200      	str	r2, [sp, #0]
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	0022      	movs	r2, r4
 800364c:	002b      	movs	r3, r5
 800364e:	0008      	movs	r0, r1
 8003650:	f005 fd5a 	bl	8009108 <iprintf>
	  HAL_Delay(500);
 8003654:	23fa      	movs	r3, #250	; 0xfa
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	0018      	movs	r0, r3
 800365a:	f000 faf9 	bl	8003c50 <HAL_Delay>
	  AHT20_Read(&Temp, &Hum);
 800365e:	e7de      	b.n	800361e <main+0x42>
 8003660:	2000048c 	.word	0x2000048c
 8003664:	200002a0 	.word	0x200002a0
 8003668:	0800bfb4 	.word	0x0800bfb4

0800366c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b09d      	sub	sp, #116	; 0x74
 8003670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003672:	2438      	movs	r4, #56	; 0x38
 8003674:	193b      	adds	r3, r7, r4
 8003676:	0018      	movs	r0, r3
 8003678:	2338      	movs	r3, #56	; 0x38
 800367a:	001a      	movs	r2, r3
 800367c:	2100      	movs	r1, #0
 800367e:	f005 fec5 	bl	800940c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003682:	2324      	movs	r3, #36	; 0x24
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	0018      	movs	r0, r3
 8003688:	2314      	movs	r3, #20
 800368a:	001a      	movs	r2, r3
 800368c:	2100      	movs	r1, #0
 800368e:	f005 febd 	bl	800940c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003692:	003b      	movs	r3, r7
 8003694:	0018      	movs	r0, r3
 8003696:	2324      	movs	r3, #36	; 0x24
 8003698:	001a      	movs	r2, r3
 800369a:	2100      	movs	r1, #0
 800369c:	f005 feb6 	bl	800940c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <SystemClock_Config+0xe8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <SystemClock_Config+0xec>)
 80036a6:	401a      	ands	r2, r3
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <SystemClock_Config+0xe8>)
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	0109      	lsls	r1, r1, #4
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036b2:	0021      	movs	r1, r4
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	22a0      	movs	r2, #160	; 0xa0
 80036be:	02d2      	lsls	r2, r2, #11
 80036c0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	2202      	movs	r2, #2
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	0252      	lsls	r2, r2, #9
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	22c0      	movs	r2, #192	; 0xc0
 80036d4:	0312      	lsls	r2, r2, #12
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	2280      	movs	r2, #128	; 0x80
 80036dc:	03d2      	lsls	r2, r2, #15
 80036de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	0018      	movs	r0, r3
 80036e4:	f001 fbc6 	bl	8004e74 <HAL_RCC_OscConfig>
 80036e8:	1e03      	subs	r3, r0, #0
 80036ea:	d001      	beq.n	80036f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80036ec:	f000 f836 	bl	800375c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036f0:	2124      	movs	r1, #36	; 0x24
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	220f      	movs	r2, #15
 80036f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	2203      	movs	r2, #3
 80036fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2101      	movs	r1, #1
 8003714:	0018      	movs	r0, r3
 8003716:	f001 ff71 	bl	80055fc <HAL_RCC_ClockConfig>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d001      	beq.n	8003722 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800371e:	f000 f81d 	bl	800375c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003722:	003b      	movs	r3, r7
 8003724:	220b      	movs	r2, #11
 8003726:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003728:	003b      	movs	r3, r7
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800372e:	003b      	movs	r3, r7
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003734:	003b      	movs	r3, r7
 8003736:	2200      	movs	r2, #0
 8003738:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800373a:	003b      	movs	r3, r7
 800373c:	0018      	movs	r0, r3
 800373e:	f002 f981 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d001      	beq.n	800374a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8003746:	f000 f809 	bl	800375c <Error_Handler>
  }
}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b01d      	add	sp, #116	; 0x74
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	40007000 	.word	0x40007000
 8003758:	ffffe7ff 	.word	0xffffe7ff

0800375c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003760:	b672      	cpsid	i
}
 8003762:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003764:	e7fe      	b.n	8003764 <Error_Handler+0x8>
	...

08003768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_MspInit+0x24>)
 800376e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_MspInit+0x24>)
 8003772:	2101      	movs	r1, #1
 8003774:	430a      	orrs	r2, r1
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_MspInit+0x24>)
 800377a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_MspInit+0x24>)
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	0549      	lsls	r1, r1, #21
 8003782:	430a      	orrs	r2, r1
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000

08003790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003794:	e7fe      	b.n	8003794 <NMI_Handler+0x4>

08003796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379a:	e7fe      	b.n	800379a <HardFault_Handler+0x4>

0800379c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b4:	f000 fa30 	bl	8003c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <USART1_IRQHandler+0x14>)
 80037c6:	0018      	movs	r0, r3
 80037c8:	f002 fc1c 	bl	8006004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	2000048c 	.word	0x2000048c

080037d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  return 1;
 80037dc:	2301      	movs	r3, #1
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_kill>:

int _kill(int pid, int sig)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037ee:	f005 fe79 	bl	80094e4 <__errno>
 80037f2:	0003      	movs	r3, r0
 80037f4:	2216      	movs	r2, #22
 80037f6:	601a      	str	r2, [r3, #0]
  return -1;
 80037f8:	2301      	movs	r3, #1
 80037fa:	425b      	negs	r3, r3
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}

08003804 <_exit>:

void _exit (int status)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800380c:	2301      	movs	r3, #1
 800380e:	425a      	negs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0011      	movs	r1, r2
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff ffe5 	bl	80037e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800381a:	e7fe      	b.n	800381a <_exit+0x16>

0800381c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e00a      	b.n	8003844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800382e:	e000      	b.n	8003832 <_read+0x16>
 8003830:	bf00      	nop
 8003832:	0001      	movs	r1, r0
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	60ba      	str	r2, [r7, #8]
 800383a:	b2ca      	uxtb	r2, r1
 800383c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	3301      	adds	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	dbf0      	blt.n	800382e <_read+0x12>
  }

  return len;
 800384c:	687b      	ldr	r3, [r7, #4]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b006      	add	sp, #24
 8003854:	bd80      	pop	{r7, pc}

08003856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e009      	b.n	800387c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	60ba      	str	r2, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	0018      	movs	r0, r3
 8003872:	f7ff fe87 	bl	8003584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3301      	adds	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	dbf1      	blt.n	8003868 <_write+0x12>
  }
  return len;
 8003884:	687b      	ldr	r3, [r7, #4]
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b006      	add	sp, #24
 800388c:	bd80      	pop	{r7, pc}

0800388e <_close>:

int _close(int file)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003896:	2301      	movs	r3, #1
 8003898:	425b      	negs	r3, r3
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	0192      	lsls	r2, r2, #6
 80038b2:	605a      	str	r2, [r3, #4]
  return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}

080038be <_isatty>:

int _isatty(int file)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038c6:	2301      	movs	r3, #1
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <_sbrk+0x5c>)
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <_sbrk+0x60>)
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <_sbrk+0x64>)
 8003906:	4a12      	ldr	r2, [pc, #72]	; (8003950 <_sbrk+0x68>)
 8003908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <_sbrk+0x64>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	429a      	cmp	r2, r3
 8003916:	d207      	bcs.n	8003928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003918:	f005 fde4 	bl	80094e4 <__errno>
 800391c:	0003      	movs	r3, r0
 800391e:	220c      	movs	r2, #12
 8003920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003922:	2301      	movs	r3, #1
 8003924:	425b      	negs	r3, r3
 8003926:	e009      	b.n	800393c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <_sbrk+0x64>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	18d2      	adds	r2, r2, r3
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <_sbrk+0x64>)
 8003938:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b006      	add	sp, #24
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20002000 	.word	0x20002000
 8003948:	00000400 	.word	0x00000400
 800394c:	20000488 	.word	0x20000488
 8003950:	200006f0 	.word	0x200006f0

08003954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003966:	4a15      	ldr	r2, [pc, #84]	; (80039bc <MX_USART1_UART_Init+0x5c>)
 8003968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800396c:	2296      	movs	r2, #150	; 0x96
 800396e:	0192      	lsls	r2, r2, #6
 8003970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800397a:	2200      	movs	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800397e:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003986:	220c      	movs	r2, #12
 8003988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800399e:	2200      	movs	r2, #0
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f002 f9db 	bl	8005d60 <HAL_UART_Init>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d001      	beq.n	80039b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80039ae:	f7ff fed5 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	2000048c 	.word	0x2000048c
 80039bc:	40013800 	.word	0x40013800

080039c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039c6:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <MX_USART2_UART_Init+0x5c>)
 80039c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039cc:	2296      	movs	r2, #150	; 0x96
 80039ce:	0192      	lsls	r2, r2, #6
 80039d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039e6:	220c      	movs	r2, #12
 80039e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <MX_USART2_UART_Init+0x58>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f002 f9ab 	bl	8005d60 <HAL_UART_Init>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a0e:	f7ff fea5 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000514 	.word	0x20000514
 8003a1c:	40004400 	.word	0x40004400

08003a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b08b      	sub	sp, #44	; 0x2c
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	2414      	movs	r4, #20
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	2314      	movs	r3, #20
 8003a30:	001a      	movs	r2, r3
 8003a32:	2100      	movs	r1, #0
 8003a34:	f005 fcea 	bl	800940c <memset>
  if(uartHandle->Instance==USART1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <HAL_UART_MspInit+0xf0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d133      	bne.n	8003aaa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a42:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	01c9      	lsls	r1, r1, #7
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a50:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	2201      	movs	r2, #1
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	22c0      	movs	r2, #192	; 0xc0
 8003a6c:	00d2      	lsls	r2, r2, #3
 8003a6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	0021      	movs	r1, r4
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2202      	movs	r2, #2
 8003a76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2203      	movs	r2, #3
 8003a82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	2204      	movs	r2, #4
 8003a88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	187a      	adds	r2, r7, r1
 8003a8c:	23a0      	movs	r3, #160	; 0xa0
 8003a8e:	05db      	lsls	r3, r3, #23
 8003a90:	0011      	movs	r1, r2
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 fa66 	bl	8003f64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	201b      	movs	r0, #27
 8003a9e:	f000 f9a7 	bl	8003df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aa2:	201b      	movs	r0, #27
 8003aa4:	f000 f9b9 	bl	8003e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003aa8:	e02e      	b.n	8003b08 <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_UART_MspInit+0xf8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d129      	bne.n	8003b08 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	0289      	lsls	r1, r1, #10
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003ac8:	2101      	movs	r1, #1
 8003aca:	430a      	orrs	r2, r1
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_UART_MspInit+0xf4>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ada:	2114      	movs	r1, #20
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	220c      	movs	r2, #12
 8003ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	2203      	movs	r2, #3
 8003af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2204      	movs	r2, #4
 8003af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afa:	187a      	adds	r2, r7, r1
 8003afc:	23a0      	movs	r3, #160	; 0xa0
 8003afe:	05db      	lsls	r3, r3, #23
 8003b00:	0011      	movs	r1, r2
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 fa2e 	bl	8003f64 <HAL_GPIO_Init>
}
 8003b08:	46c0      	nop			; (mov r8, r8)
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b00b      	add	sp, #44	; 0x2c
 8003b0e:	bd90      	pop	{r4, r7, pc}
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40004400 	.word	0x40004400

08003b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003b1c:	480d      	ldr	r0, [pc, #52]	; (8003b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b20:	f7ff ff18 	bl	8003954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b24:	480c      	ldr	r0, [pc, #48]	; (8003b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b26:	490d      	ldr	r1, [pc, #52]	; (8003b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b28:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <LoopForever+0xe>)
  movs r3, #0
 8003b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b2c:	e002      	b.n	8003b34 <LoopCopyDataInit>

08003b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b32:	3304      	adds	r3, #4

08003b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b38:	d3f9      	bcc.n	8003b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b3c:	4c0a      	ldr	r4, [pc, #40]	; (8003b68 <LoopForever+0x16>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b40:	e001      	b.n	8003b46 <LoopFillZerobss>

08003b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b44:	3204      	adds	r2, #4

08003b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b48:	d3fb      	bcc.n	8003b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b4a:	f005 fcd1 	bl	80094f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b4e:	f7ff fd45 	bl	80035dc <main>

08003b52 <LoopForever>:

LoopForever:
    b LoopForever
 8003b52:	e7fe      	b.n	8003b52 <LoopForever>
  ldr   r0, =_estack
 8003b54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b5c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003b60:	0800c53c 	.word	0x0800c53c
  ldr r2, =_sbss
 8003b64:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003b68:	200006ec 	.word	0x200006ec

08003b6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b6c:	e7fe      	b.n	8003b6c <ADC1_COMP_IRQHandler>
	...

08003b70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_Init+0x3c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_Init+0x3c>)
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f000 f811 	bl	8003bb0 <HAL_InitTick>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e001      	b.n	8003b9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b9a:	f7ff fde5 	bl	8003768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b9e:	1dfb      	adds	r3, r7, #7
 8003ba0:	781b      	ldrb	r3, [r3, #0]
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b002      	add	sp, #8
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	40022000 	.word	0x40022000

08003bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <HAL_InitTick+0x5c>)
 8003bba:	681c      	ldr	r4, [r3, #0]
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <HAL_InitTick+0x60>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	23fa      	movs	r3, #250	; 0xfa
 8003bc4:	0098      	lsls	r0, r3, #2
 8003bc6:	f7fc fabb 	bl	8000140 <__udivsi3>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	0019      	movs	r1, r3
 8003bce:	0020      	movs	r0, r4
 8003bd0:	f7fc fab6 	bl	8000140 <__udivsi3>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 f92f 	bl	8003e3a <HAL_SYSTICK_Config>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e00f      	b.n	8003c04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d80b      	bhi.n	8003c02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	2301      	movs	r3, #1
 8003bee:	425b      	negs	r3, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f8fc 	bl	8003df0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_InitTick+0x64>)
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b003      	add	sp, #12
 8003c0a:	bd90      	pop	{r4, r7, pc}
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	20000008 	.word	0x20000008
 8003c14:	20000004 	.word	0x20000004

08003c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_IncTick+0x1c>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	001a      	movs	r2, r3
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_IncTick+0x20>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	18d2      	adds	r2, r2, r3
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_IncTick+0x20>)
 8003c2a:	601a      	str	r2, [r3, #0]
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	20000008 	.word	0x20000008
 8003c38:	2000059c 	.word	0x2000059c

08003c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <HAL_GetTick+0x10>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	2000059c 	.word	0x2000059c

08003c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	d005      	beq.n	8003c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_Delay+0x44>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	001a      	movs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	f7ff ffe0 	bl	8003c3c <HAL_GetTick>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d8f7      	bhi.n	8003c78 <HAL_Delay+0x28>
  {
  }
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000008 	.word	0x20000008

08003c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	1dfb      	adds	r3, r7, #7
 8003ca2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ca4:	1dfb      	adds	r3, r7, #7
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8003caa:	d809      	bhi.n	8003cc0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cac:	1dfb      	adds	r3, r7, #7
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <__NVIC_EnableIRQ+0x30>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4091      	lsls	r1, r2
 8003cbc:	000a      	movs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
  }
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003cda:	1dfb      	adds	r3, r7, #7
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b7f      	cmp	r3, #127	; 0x7f
 8003ce0:	d828      	bhi.n	8003d34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ce2:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <__NVIC_SetPriority+0xd4>)
 8003ce4:	1dfb      	adds	r3, r7, #7
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b25b      	sxtb	r3, r3
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	33c0      	adds	r3, #192	; 0xc0
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	589b      	ldr	r3, [r3, r2]
 8003cf2:	1dfa      	adds	r2, r7, #7
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	0011      	movs	r1, r2
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	400a      	ands	r2, r1
 8003cfc:	00d2      	lsls	r2, r2, #3
 8003cfe:	21ff      	movs	r1, #255	; 0xff
 8003d00:	4091      	lsls	r1, r2
 8003d02:	000a      	movs	r2, r1
 8003d04:	43d2      	mvns	r2, r2
 8003d06:	401a      	ands	r2, r3
 8003d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	019b      	lsls	r3, r3, #6
 8003d0e:	22ff      	movs	r2, #255	; 0xff
 8003d10:	401a      	ands	r2, r3
 8003d12:	1dfb      	adds	r3, r7, #7
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	0018      	movs	r0, r3
 8003d18:	2303      	movs	r3, #3
 8003d1a:	4003      	ands	r3, r0
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d20:	481f      	ldr	r0, [pc, #124]	; (8003da0 <__NVIC_SetPriority+0xd4>)
 8003d22:	1dfb      	adds	r3, r7, #7
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	33c0      	adds	r3, #192	; 0xc0
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003d32:	e031      	b.n	8003d98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <__NVIC_SetPriority+0xd8>)
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	230f      	movs	r3, #15
 8003d3e:	400b      	ands	r3, r1
 8003d40:	3b08      	subs	r3, #8
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	3306      	adds	r3, #6
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	18d3      	adds	r3, r2, r3
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1dfa      	adds	r2, r7, #7
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	0011      	movs	r1, r2
 8003d54:	2203      	movs	r2, #3
 8003d56:	400a      	ands	r2, r1
 8003d58:	00d2      	lsls	r2, r2, #3
 8003d5a:	21ff      	movs	r1, #255	; 0xff
 8003d5c:	4091      	lsls	r1, r2
 8003d5e:	000a      	movs	r2, r1
 8003d60:	43d2      	mvns	r2, r2
 8003d62:	401a      	ands	r2, r3
 8003d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	019b      	lsls	r3, r3, #6
 8003d6a:	22ff      	movs	r2, #255	; 0xff
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	0018      	movs	r0, r3
 8003d74:	2303      	movs	r3, #3
 8003d76:	4003      	ands	r3, r0
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d7c:	4809      	ldr	r0, [pc, #36]	; (8003da4 <__NVIC_SetPriority+0xd8>)
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	001c      	movs	r4, r3
 8003d84:	230f      	movs	r3, #15
 8003d86:	4023      	ands	r3, r4
 8003d88:	3b08      	subs	r3, #8
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	3306      	adds	r3, #6
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	18c3      	adds	r3, r0, r3
 8003d94:	3304      	adds	r3, #4
 8003d96:	601a      	str	r2, [r3, #0]
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b003      	add	sp, #12
 8003d9e:	bd90      	pop	{r4, r7, pc}
 8003da0:	e000e100 	.word	0xe000e100
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1e5a      	subs	r2, r3, #1
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	045b      	lsls	r3, r3, #17
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d301      	bcc.n	8003dc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e010      	b.n	8003de2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <SysTick_Config+0x44>)
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dc8:	2301      	movs	r3, #1
 8003dca:	425b      	negs	r3, r3
 8003dcc:	2103      	movs	r1, #3
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7ff ff7c 	bl	8003ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <SysTick_Config+0x44>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <SysTick_Config+0x44>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	e000e010 	.word	0xe000e010

08003df0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	210f      	movs	r1, #15
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	1c02      	adds	r2, r0, #0
 8003e00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7ff ff5d 	bl	8003ccc <__NVIC_SetPriority>
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	0002      	movs	r2, r0
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e26:	1dfb      	adds	r3, r7, #7
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff ff33 	bl	8003c98 <__NVIC_EnableIRQ>
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b002      	add	sp, #8
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff ffaf 	bl	8003da8 <SysTick_Config>
 8003e4a:	0003      	movs	r3, r0
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b002      	add	sp, #8
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2225      	movs	r2, #37	; 0x25
 8003e68:	5c9b      	ldrb	r3, [r3, r2]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d008      	beq.n	8003e82 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2204      	movs	r2, #4
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2224      	movs	r2, #36	; 0x24
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e024      	b.n	8003ecc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	210e      	movs	r1, #14
 8003e8e:	438a      	bics	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	438a      	bics	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	221c      	movs	r2, #28
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4091      	lsls	r1, r2
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2225      	movs	r2, #37	; 0x25
 8003eba:	2101      	movs	r1, #1
 8003ebc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2224      	movs	r2, #36	; 0x24
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

    return status;
 8003ec6:	230f      	movs	r3, #15
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b004      	add	sp, #16
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003edc:	210f      	movs	r1, #15
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2225      	movs	r2, #37	; 0x25
 8003ee8:	5c9b      	ldrb	r3, [r3, r2]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d006      	beq.n	8003efe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e02a      	b.n	8003f54 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	210e      	movs	r1, #14
 8003f0a:	438a      	bics	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2101      	movs	r1, #1
 8003f1a:	438a      	bics	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	221c      	movs	r2, #28
 8003f24:	401a      	ands	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	4091      	lsls	r1, r2
 8003f2e:	000a      	movs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2225      	movs	r2, #37	; 0x25
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2224      	movs	r2, #36	; 0x24
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	0010      	movs	r0, r2
 8003f52:	4798      	blx	r3
    }
  }
  return status;
 8003f54:	230f      	movs	r3, #15
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	781b      	ldrb	r3, [r3, #0]
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f7a:	e14f      	b.n	800421c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4091      	lsls	r1, r2
 8003f86:	000a      	movs	r2, r1
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d100      	bne.n	8003f94 <HAL_GPIO_Init+0x30>
 8003f92:	e140      	b.n	8004216 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d005      	beq.n	8003fac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d130      	bne.n	800400e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	0013      	movs	r3, r2
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	0013      	movs	r3, r2
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	0013      	movs	r3, r2
 8003fea:	43da      	mvns	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	409a      	lsls	r2, r3
 8004000:	0013      	movs	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2203      	movs	r2, #3
 8004014:	4013      	ands	r3, r2
 8004016:	2b03      	cmp	r3, #3
 8004018:	d017      	beq.n	800404a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	409a      	lsls	r2, r3
 8004028:	0013      	movs	r3, r2
 800402a:	43da      	mvns	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	0013      	movs	r3, r2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2203      	movs	r2, #3
 8004050:	4013      	ands	r3, r2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d123      	bne.n	800409e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	08da      	lsrs	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3208      	adds	r2, #8
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	58d3      	ldr	r3, [r2, r3]
 8004062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2207      	movs	r2, #7
 8004068:	4013      	ands	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	409a      	lsls	r2, r3
 8004070:	0013      	movs	r3, r2
 8004072:	43da      	mvns	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2107      	movs	r1, #7
 8004082:	400b      	ands	r3, r1
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	409a      	lsls	r2, r3
 8004088:	0013      	movs	r3, r2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	08da      	lsrs	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3208      	adds	r2, #8
 8004098:	0092      	lsls	r2, r2, #2
 800409a:	6939      	ldr	r1, [r7, #16]
 800409c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	2203      	movs	r2, #3
 80040aa:	409a      	lsls	r2, r3
 80040ac:	0013      	movs	r3, r2
 80040ae:	43da      	mvns	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2203      	movs	r2, #3
 80040bc:	401a      	ands	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	0013      	movs	r3, r2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	23c0      	movs	r3, #192	; 0xc0
 80040d8:	029b      	lsls	r3, r3, #10
 80040da:	4013      	ands	r3, r2
 80040dc:	d100      	bne.n	80040e0 <HAL_GPIO_Init+0x17c>
 80040de:	e09a      	b.n	8004216 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e0:	4b54      	ldr	r3, [pc, #336]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 80040e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e4:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_GPIO_Init+0x2d0>)
 80040e6:	2101      	movs	r1, #1
 80040e8:	430a      	orrs	r2, r1
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ec:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_GPIO_Init+0x2d4>)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	3302      	adds	r3, #2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	589b      	ldr	r3, [r3, r2]
 80040f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2203      	movs	r2, #3
 80040fe:	4013      	ands	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	220f      	movs	r2, #15
 8004104:	409a      	lsls	r2, r3
 8004106:	0013      	movs	r3, r2
 8004108:	43da      	mvns	r2, r3
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	23a0      	movs	r3, #160	; 0xa0
 8004114:	05db      	lsls	r3, r3, #23
 8004116:	429a      	cmp	r2, r3
 8004118:	d019      	beq.n	800414e <HAL_GPIO_Init+0x1ea>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a47      	ldr	r2, [pc, #284]	; (800423c <HAL_GPIO_Init+0x2d8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_GPIO_Init+0x1e6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a46      	ldr	r2, [pc, #280]	; (8004240 <HAL_GPIO_Init+0x2dc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00d      	beq.n	8004146 <HAL_GPIO_Init+0x1e2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a45      	ldr	r2, [pc, #276]	; (8004244 <HAL_GPIO_Init+0x2e0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <HAL_GPIO_Init+0x1de>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a44      	ldr	r2, [pc, #272]	; (8004248 <HAL_GPIO_Init+0x2e4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_GPIO_Init+0x1da>
 800413a:	2305      	movs	r3, #5
 800413c:	e008      	b.n	8004150 <HAL_GPIO_Init+0x1ec>
 800413e:	2306      	movs	r3, #6
 8004140:	e006      	b.n	8004150 <HAL_GPIO_Init+0x1ec>
 8004142:	2303      	movs	r3, #3
 8004144:	e004      	b.n	8004150 <HAL_GPIO_Init+0x1ec>
 8004146:	2302      	movs	r3, #2
 8004148:	e002      	b.n	8004150 <HAL_GPIO_Init+0x1ec>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_GPIO_Init+0x1ec>
 800414e:	2300      	movs	r3, #0
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	2103      	movs	r1, #3
 8004154:	400a      	ands	r2, r1
 8004156:	0092      	lsls	r2, r2, #2
 8004158:	4093      	lsls	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004160:	4935      	ldr	r1, [pc, #212]	; (8004238 <HAL_GPIO_Init+0x2d4>)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	3302      	adds	r3, #2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_GPIO_Init+0x2e8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	43da      	mvns	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	035b      	lsls	r3, r3, #13
 8004186:	4013      	ands	r3, r2
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_GPIO_Init+0x2e8>)
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_GPIO_Init+0x2e8>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	43da      	mvns	r2, r3
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	039b      	lsls	r3, r3, #14
 80041b0:	4013      	ands	r3, r2
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_GPIO_Init+0x2e8>)
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_GPIO_Init+0x2e8>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	43da      	mvns	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	029b      	lsls	r3, r3, #10
 80041da:	4013      	ands	r3, r2
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80041e6:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_GPIO_Init+0x2e8>)
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_GPIO_Init+0x2e8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	025b      	lsls	r3, r3, #9
 8004204:	4013      	ands	r3, r2
 8004206:	d003      	beq.n	8004210 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004210:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_GPIO_Init+0x2e8>)
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	40da      	lsrs	r2, r3
 8004224:	1e13      	subs	r3, r2, #0
 8004226:	d000      	beq.n	800422a <HAL_GPIO_Init+0x2c6>
 8004228:	e6a8      	b.n	8003f7c <HAL_GPIO_Init+0x18>
  }
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b006      	add	sp, #24
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	40010000 	.word	0x40010000
 800423c:	50000400 	.word	0x50000400
 8004240:	50000800 	.word	0x50000800
 8004244:	50000c00 	.word	0x50000c00
 8004248:	50001c00 	.word	0x50001c00
 800424c:	40010400 	.word	0x40010400

08004250 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	0008      	movs	r0, r1
 800425a:	0011      	movs	r1, r2
 800425c:	1cbb      	adds	r3, r7, #2
 800425e:	1c02      	adds	r2, r0, #0
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	1c7b      	adds	r3, r7, #1
 8004264:	1c0a      	adds	r2, r1, #0
 8004266:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004268:	1c7b      	adds	r3, r7, #1
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004270:	1cbb      	adds	r3, r7, #2
 8004272:	881a      	ldrh	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004278:	e003      	b.n	8004282 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800427a:	1cbb      	adds	r3, r7, #2
 800427c:	881a      	ldrh	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b002      	add	sp, #8
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e082      	b.n	80043a4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2241      	movs	r2, #65	; 0x41
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2240      	movs	r2, #64	; 0x40
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff f8ef 	bl	8003498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2241      	movs	r2, #65	; 0x41
 80042be:	2124      	movs	r1, #36	; 0x24
 80042c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2101      	movs	r1, #1
 80042ce:	438a      	bics	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4934      	ldr	r1, [pc, #208]	; (80043ac <HAL_I2C_Init+0x120>)
 80042dc:	400a      	ands	r2, r1
 80042de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4931      	ldr	r1, [pc, #196]	; (80043b0 <HAL_I2C_Init+0x124>)
 80042ec:	400a      	ands	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d108      	bne.n	800430a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	0209      	lsls	r1, r1, #8
 8004304:	430a      	orrs	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e007      	b.n	800431a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2184      	movs	r1, #132	; 0x84
 8004314:	0209      	lsls	r1, r1, #8
 8004316:	430a      	orrs	r2, r1
 8004318:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d104      	bne.n	800432c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	0112      	lsls	r2, r2, #4
 800432a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	491f      	ldr	r1, [pc, #124]	; (80043b4 <HAL_I2C_Init+0x128>)
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	491a      	ldr	r1, [pc, #104]	; (80043b0 <HAL_I2C_Init+0x124>)
 8004348:	400a      	ands	r2, r1
 800434a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	431a      	orrs	r2, r3
 8004356:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69d9      	ldr	r1, [r3, #28]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	430a      	orrs	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2241      	movs	r2, #65	; 0x41
 8004390:	2120      	movs	r1, #32
 8004392:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2242      	movs	r2, #66	; 0x42
 800439e:	2100      	movs	r1, #0
 80043a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	f0ffffff 	.word	0xf0ffffff
 80043b0:	ffff7fff 	.word	0xffff7fff
 80043b4:	02008000 	.word	0x02008000

080043b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b089      	sub	sp, #36	; 0x24
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	0008      	movs	r0, r1
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	0019      	movs	r1, r3
 80043c6:	230a      	movs	r3, #10
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	1c02      	adds	r2, r0, #0
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	2308      	movs	r3, #8
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	1c0a      	adds	r2, r1, #0
 80043d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2241      	movs	r2, #65	; 0x41
 80043da:	5c9b      	ldrb	r3, [r3, r2]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d000      	beq.n	80043e4 <HAL_I2C_Master_Transmit+0x2c>
 80043e2:	e0e7      	b.n	80045b4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2240      	movs	r2, #64	; 0x40
 80043e8:	5c9b      	ldrb	r3, [r3, r2]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_I2C_Master_Transmit+0x3a>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e0e1      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1fe>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2240      	movs	r2, #64	; 0x40
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043fa:	f7ff fc1f 	bl	8003c3c <HAL_GetTick>
 80043fe:	0003      	movs	r3, r0
 8004400:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	0219      	lsls	r1, r3, #8
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2319      	movs	r3, #25
 800440e:	2201      	movs	r2, #1
 8004410:	f000 fa04 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 8004414:	1e03      	subs	r3, r0, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0cc      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2241      	movs	r2, #65	; 0x41
 8004420:	2121      	movs	r1, #33	; 0x21
 8004422:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2242      	movs	r2, #66	; 0x42
 8004428:	2110      	movs	r1, #16
 800442a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2208      	movs	r2, #8
 800443c:	18ba      	adds	r2, r7, r2
 800443e:	8812      	ldrh	r2, [r2, #0]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2bff      	cmp	r3, #255	; 0xff
 8004450:	d911      	bls.n	8004476 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	b2da      	uxtb	r2, r3
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	045c      	lsls	r4, r3, #17
 8004462:	230a      	movs	r3, #10
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	8819      	ldrh	r1, [r3, #0]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	4b55      	ldr	r3, [pc, #340]	; (80045c0 <HAL_I2C_Master_Transmit+0x208>)
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	0023      	movs	r3, r4
 8004470:	f000 fc2e 	bl	8004cd0 <I2C_TransferConfig>
 8004474:	e075      	b.n	8004562 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	b2da      	uxtb	r2, r3
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	049c      	lsls	r4, r3, #18
 800448a:	230a      	movs	r3, #10
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	8819      	ldrh	r1, [r3, #0]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_I2C_Master_Transmit+0x208>)
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	0023      	movs	r3, r4
 8004498:	f000 fc1a 	bl	8004cd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800449c:	e061      	b.n	8004562 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 fa07 	bl	80048b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80044aa:	1e03      	subs	r3, r0, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e081      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d03a      	beq.n	8004562 <HAL_I2C_Master_Transmit+0x1aa>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d136      	bne.n	8004562 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	0013      	movs	r3, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	f000 f98b 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e053      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2bff      	cmp	r3, #255	; 0xff
 8004516:	d911      	bls.n	800453c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22ff      	movs	r2, #255	; 0xff
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	b2da      	uxtb	r2, r3
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	045c      	lsls	r4, r3, #17
 8004528:	230a      	movs	r3, #10
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	8819      	ldrh	r1, [r3, #0]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	2300      	movs	r3, #0
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	0023      	movs	r3, r4
 8004536:	f000 fbcb 	bl	8004cd0 <I2C_TransferConfig>
 800453a:	e012      	b.n	8004562 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	b2da      	uxtb	r2, r3
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	049c      	lsls	r4, r3, #18
 8004550:	230a      	movs	r3, #10
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	8819      	ldrh	r1, [r3, #0]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	2300      	movs	r3, #0
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	0023      	movs	r3, r4
 800455e:	f000 fbb7 	bl	8004cd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d198      	bne.n	800449e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0018      	movs	r0, r3
 8004574:	f000 f9e6 	bl	8004944 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e01a      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2220      	movs	r2, #32
 8004586:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	490c      	ldr	r1, [pc, #48]	; (80045c4 <HAL_I2C_Master_Transmit+0x20c>)
 8004594:	400a      	ands	r2, r1
 8004596:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2241      	movs	r2, #65	; 0x41
 800459c:	2120      	movs	r1, #32
 800459e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2242      	movs	r2, #66	; 0x42
 80045a4:	2100      	movs	r1, #0
 80045a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2240      	movs	r2, #64	; 0x40
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	0018      	movs	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b007      	add	sp, #28
 80045bc:	bd90      	pop	{r4, r7, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	80002000 	.word	0x80002000
 80045c4:	fe00e800 	.word	0xfe00e800

080045c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	0008      	movs	r0, r1
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	0019      	movs	r1, r3
 80045d6:	230a      	movs	r3, #10
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	1c02      	adds	r2, r0, #0
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	2308      	movs	r3, #8
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	1c0a      	adds	r2, r1, #0
 80045e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2241      	movs	r2, #65	; 0x41
 80045ea:	5c9b      	ldrb	r3, [r3, r2]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d000      	beq.n	80045f4 <HAL_I2C_Master_Receive+0x2c>
 80045f2:	e0e8      	b.n	80047c6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	5c9b      	ldrb	r3, [r3, r2]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_I2C_Master_Receive+0x3a>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0e2      	b.n	80047c8 <HAL_I2C_Master_Receive+0x200>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2240      	movs	r2, #64	; 0x40
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800460a:	f7ff fb17 	bl	8003c3c <HAL_GetTick>
 800460e:	0003      	movs	r3, r0
 8004610:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	0219      	lsls	r1, r3, #8
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	2319      	movs	r3, #25
 800461e:	2201      	movs	r2, #1
 8004620:	f000 f8fc 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 8004624:	1e03      	subs	r3, r0, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0cd      	b.n	80047c8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2241      	movs	r2, #65	; 0x41
 8004630:	2122      	movs	r1, #34	; 0x22
 8004632:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2242      	movs	r2, #66	; 0x42
 8004638:	2110      	movs	r1, #16
 800463a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2208      	movs	r2, #8
 800464c:	18ba      	adds	r2, r7, r2
 800464e:	8812      	ldrh	r2, [r2, #0]
 8004650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2bff      	cmp	r3, #255	; 0xff
 8004660:	d911      	bls.n	8004686 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	22ff      	movs	r2, #255	; 0xff
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	b2da      	uxtb	r2, r3
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	045c      	lsls	r4, r3, #17
 8004672:	230a      	movs	r3, #10
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	8819      	ldrh	r1, [r3, #0]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <HAL_I2C_Master_Receive+0x208>)
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	0023      	movs	r3, r4
 8004680:	f000 fb26 	bl	8004cd0 <I2C_TransferConfig>
 8004684:	e076      	b.n	8004774 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	b2da      	uxtb	r2, r3
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	049c      	lsls	r4, r3, #18
 800469a:	230a      	movs	r3, #10
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	8819      	ldrh	r1, [r3, #0]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_I2C_Master_Receive+0x208>)
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	0023      	movs	r3, r4
 80046a8:	f000 fb12 	bl	8004cd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80046ac:	e062      	b.n	8004774 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 f989 	bl	80049cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ba:	1e03      	subs	r3, r0, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e082      	b.n	80047c8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03a      	beq.n	8004774 <HAL_I2C_Master_Receive+0x1ac>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d136      	bne.n	8004774 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	0013      	movs	r3, r2
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	; 0x80
 8004714:	f000 f882 	bl	800481c <I2C_WaitOnFlagUntilTimeout>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e053      	b.n	80047c8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2bff      	cmp	r3, #255	; 0xff
 8004728:	d911      	bls.n	800474e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004734:	b2da      	uxtb	r2, r3
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	045c      	lsls	r4, r3, #17
 800473a:	230a      	movs	r3, #10
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	8819      	ldrh	r1, [r3, #0]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	2300      	movs	r3, #0
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	0023      	movs	r3, r4
 8004748:	f000 fac2 	bl	8004cd0 <I2C_TransferConfig>
 800474c:	e012      	b.n	8004774 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	b2da      	uxtb	r2, r3
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	049c      	lsls	r4, r3, #18
 8004762:	230a      	movs	r3, #10
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	8819      	ldrh	r1, [r3, #0]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	2300      	movs	r3, #0
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	0023      	movs	r3, r4
 8004770:	f000 faae 	bl	8004cd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d197      	bne.n	80046ae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f8dd 	bl	8004944 <I2C_WaitOnSTOPFlagUntilTimeout>
 800478a:	1e03      	subs	r3, r0, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e01a      	b.n	80047c8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2220      	movs	r2, #32
 8004798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	490b      	ldr	r1, [pc, #44]	; (80047d4 <HAL_I2C_Master_Receive+0x20c>)
 80047a6:	400a      	ands	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2241      	movs	r2, #65	; 0x41
 80047ae:	2120      	movs	r1, #32
 80047b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2242      	movs	r2, #66	; 0x42
 80047b6:	2100      	movs	r1, #0
 80047b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2240      	movs	r2, #64	; 0x40
 80047be:	2100      	movs	r1, #0
 80047c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b007      	add	sp, #28
 80047ce:	bd90      	pop	{r4, r7, pc}
 80047d0:	80002400 	.word	0x80002400
 80047d4:	fe00e800 	.word	0xfe00e800

080047d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2202      	movs	r2, #2
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d103      	bne.n	80047f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2201      	movs	r2, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	2b01      	cmp	r3, #1
 8004802:	d007      	beq.n	8004814 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	430a      	orrs	r2, r1
 8004812:	619a      	str	r2, [r3, #24]
  }
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	1dfb      	adds	r3, r7, #7
 800482a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800482c:	e030      	b.n	8004890 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	d02d      	beq.n	8004890 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004834:	f7ff fa02 	bl	8003c3c <HAL_GetTick>
 8004838:	0002      	movs	r2, r0
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d122      	bne.n	8004890 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	425a      	negs	r2, r3
 800485a:	4153      	adcs	r3, r2
 800485c:	b2db      	uxtb	r3, r3
 800485e:	001a      	movs	r2, r3
 8004860:	1dfb      	adds	r3, r7, #7
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d113      	bne.n	8004890 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	2220      	movs	r2, #32
 800486e:	431a      	orrs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2241      	movs	r2, #65	; 0x41
 8004878:	2120      	movs	r1, #32
 800487a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2242      	movs	r2, #66	; 0x42
 8004880:	2100      	movs	r1, #0
 8004882:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e00f      	b.n	80048b0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	425a      	negs	r2, r3
 80048a0:	4153      	adcs	r3, r2
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	001a      	movs	r2, r3
 80048a6:	1dfb      	adds	r3, r7, #7
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d0bf      	beq.n	800482e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b004      	add	sp, #16
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048c4:	e032      	b.n	800492c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 f8ff 	bl	8004ad0 <I2C_IsErrorOccurred>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d001      	beq.n	80048da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e030      	b.n	800493c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3301      	adds	r3, #1
 80048de:	d025      	beq.n	800492c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e0:	f7ff f9ac 	bl	8003c3c <HAL_GetTick>
 80048e4:	0002      	movs	r2, r0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11a      	bne.n	800492c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2202      	movs	r2, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d013      	beq.n	800492c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	2220      	movs	r2, #32
 800490a:	431a      	orrs	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2241      	movs	r2, #65	; 0x41
 8004914:	2120      	movs	r1, #32
 8004916:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2242      	movs	r2, #66	; 0x42
 800491c:	2100      	movs	r1, #0
 800491e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2240      	movs	r2, #64	; 0x40
 8004924:	2100      	movs	r1, #0
 8004926:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e007      	b.n	800493c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2202      	movs	r2, #2
 8004934:	4013      	ands	r3, r2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d1c5      	bne.n	80048c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b004      	add	sp, #16
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004950:	e02f      	b.n	80049b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	0018      	movs	r0, r3
 800495a:	f000 f8b9 	bl	8004ad0 <I2C_IsErrorOccurred>
 800495e:	1e03      	subs	r3, r0, #0
 8004960:	d001      	beq.n	8004966 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e02d      	b.n	80049c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7ff f969 	bl	8003c3c <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d11a      	bne.n	80049b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2220      	movs	r2, #32
 8004984:	4013      	ands	r3, r2
 8004986:	2b20      	cmp	r3, #32
 8004988:	d013      	beq.n	80049b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	2220      	movs	r2, #32
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2241      	movs	r2, #65	; 0x41
 800499a:	2120      	movs	r1, #32
 800499c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2242      	movs	r2, #66	; 0x42
 80049a2:	2100      	movs	r1, #0
 80049a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e007      	b.n	80049c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2220      	movs	r2, #32
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d1c8      	bne.n	8004952 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d8:	e06b      	b.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 f875 	bl	8004ad0 <I2C_IsErrorOccurred>
 80049e6:	1e03      	subs	r3, r0, #0
 80049e8:	d001      	beq.n	80049ee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e069      	b.n	8004ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2220      	movs	r2, #32
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d138      	bne.n	8004a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2204      	movs	r2, #4
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d105      	bne.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e055      	b.n	8004ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d107      	bne.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2210      	movs	r2, #16
 8004a2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
 8004a32:	e002      	b.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	491f      	ldr	r1, [pc, #124]	; (8004acc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2241      	movs	r2, #65	; 0x41
 8004a56:	2120      	movs	r1, #32
 8004a58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2242      	movs	r2, #66	; 0x42
 8004a5e:	2100      	movs	r1, #0
 8004a60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2240      	movs	r2, #64	; 0x40
 8004a66:	2100      	movs	r1, #0
 8004a68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e029      	b.n	8004ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7ff f8e5 	bl	8003c3c <HAL_GetTick>
 8004a72:	0002      	movs	r2, r0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d00f      	beq.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	2220      	movs	r2, #32
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2241      	movs	r2, #65	; 0x41
 8004aa2:	2120      	movs	r1, #32
 8004aa4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2240      	movs	r2, #64	; 0x40
 8004aaa:	2100      	movs	r1, #0
 8004aac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e007      	b.n	8004ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d18c      	bne.n	80049da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b004      	add	sp, #16
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	fe00e800 	.word	0xfe00e800

08004ad0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b08b      	sub	sp, #44	; 0x2c
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2327      	movs	r3, #39	; 0x27
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2210      	movs	r2, #16
 8004af8:	4013      	ands	r3, r2
 8004afa:	d100      	bne.n	8004afe <I2C_IsErrorOccurred+0x2e>
 8004afc:	e082      	b.n	8004c04 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2210      	movs	r2, #16
 8004b04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b06:	e060      	b.n	8004bca <I2C_IsErrorOccurred+0xfa>
 8004b08:	2427      	movs	r4, #39	; 0x27
 8004b0a:	193b      	adds	r3, r7, r4
 8004b0c:	193a      	adds	r2, r7, r4
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3301      	adds	r3, #1
 8004b16:	d058      	beq.n	8004bca <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b18:	f7ff f890 	bl	8003c3c <HAL_GetTick>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d306      	bcc.n	8004b36 <I2C_IsErrorOccurred+0x66>
 8004b28:	193b      	adds	r3, r7, r4
 8004b2a:	193a      	adds	r2, r7, r4
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d149      	bne.n	8004bca <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	01db      	lsls	r3, r3, #7
 8004b40:	4013      	ands	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b44:	2013      	movs	r0, #19
 8004b46:	183b      	adds	r3, r7, r0
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	2142      	movs	r1, #66	; 0x42
 8004b4c:	5c52      	ldrb	r2, [r2, r1]
 8004b4e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d126      	bne.n	8004bb2 <I2C_IsErrorOccurred+0xe2>
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	01db      	lsls	r3, r3, #7
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d021      	beq.n	8004bb2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004b6e:	183b      	adds	r3, r7, r0
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d01d      	beq.n	8004bb2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	01c9      	lsls	r1, r1, #7
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b88:	f7ff f858 	bl	8003c3c <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b90:	e00f      	b.n	8004bb2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b92:	f7ff f853 	bl	8003c3c <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b19      	cmp	r3, #25
 8004b9e:	d908      	bls.n	8004bb2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ba8:	2327      	movs	r3, #39	; 0x27
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]

              break;
 8004bb0:	e00b      	b.n	8004bca <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2127      	movs	r1, #39	; 0x27
 8004bbe:	187a      	adds	r2, r7, r1
 8004bc0:	1879      	adds	r1, r7, r1
 8004bc2:	7809      	ldrb	r1, [r1, #0]
 8004bc4:	7011      	strb	r1, [r2, #0]
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d1e3      	bne.n	8004b92 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d004      	beq.n	8004be2 <I2C_IsErrorOccurred+0x112>
 8004bd8:	2327      	movs	r3, #39	; 0x27
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d092      	beq.n	8004b08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004be2:	2327      	movs	r3, #39	; 0x27
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bfc:	2327      	movs	r3, #39	; 0x27
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4013      	ands	r3, r2
 8004c14:	d00c      	beq.n	8004c30 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	0052      	lsls	r2, r2, #1
 8004c26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c28:	2327      	movs	r3, #39	; 0x27
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4013      	ands	r3, r2
 8004c38:	d00c      	beq.n	8004c54 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2280      	movs	r2, #128	; 0x80
 8004c48:	00d2      	lsls	r2, r2, #3
 8004c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c4c:	2327      	movs	r3, #39	; 0x27
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00c      	beq.n	8004c78 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	2202      	movs	r2, #2
 8004c62:	4313      	orrs	r3, r2
 8004c64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	0092      	lsls	r2, r2, #2
 8004c6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c70:	2327      	movs	r3, #39	; 0x27
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004c78:	2327      	movs	r3, #39	; 0x27
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01d      	beq.n	8004cbe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7ff fda7 	bl	80047d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	490d      	ldr	r1, [pc, #52]	; (8004ccc <I2C_IsErrorOccurred+0x1fc>)
 8004c96:	400a      	ands	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2241      	movs	r2, #65	; 0x41
 8004caa:	2120      	movs	r1, #32
 8004cac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2242      	movs	r2, #66	; 0x42
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2240      	movs	r2, #64	; 0x40
 8004cba:	2100      	movs	r1, #0
 8004cbc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004cbe:	2327      	movs	r3, #39	; 0x27
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	781b      	ldrb	r3, [r3, #0]
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b00b      	add	sp, #44	; 0x2c
 8004cca:	bd90      	pop	{r4, r7, pc}
 8004ccc:	fe00e800 	.word	0xfe00e800

08004cd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	0008      	movs	r0, r1
 8004cda:	0011      	movs	r1, r2
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	240a      	movs	r4, #10
 8004ce0:	193b      	adds	r3, r7, r4
 8004ce2:	1c02      	adds	r2, r0, #0
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	2009      	movs	r0, #9
 8004ce8:	183b      	adds	r3, r7, r0
 8004cea:	1c0a      	adds	r2, r1, #0
 8004cec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cee:	193b      	adds	r3, r7, r4
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	059b      	lsls	r3, r3, #22
 8004cf4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cf6:	183b      	adds	r3, r7, r0
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	0419      	lsls	r1, r3, #16
 8004cfc:	23ff      	movs	r3, #255	; 0xff
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d1a:	0d51      	lsrs	r1, r2, #21
 8004d1c:	2280      	movs	r2, #128	; 0x80
 8004d1e:	00d2      	lsls	r2, r2, #3
 8004d20:	400a      	ands	r2, r1
 8004d22:	4907      	ldr	r1, [pc, #28]	; (8004d40 <I2C_TransferConfig+0x70>)
 8004d24:	430a      	orrs	r2, r1
 8004d26:	43d2      	mvns	r2, r2
 8004d28:	401a      	ands	r2, r3
 8004d2a:	0011      	movs	r1, r2
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b007      	add	sp, #28
 8004d3c:	bd90      	pop	{r4, r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	03ff63ff 	.word	0x03ff63ff

08004d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2241      	movs	r2, #65	; 0x41
 8004d52:	5c9b      	ldrb	r3, [r3, r2]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d138      	bne.n	8004dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2240      	movs	r2, #64	; 0x40
 8004d5e:	5c9b      	ldrb	r3, [r3, r2]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e032      	b.n	8004dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2240      	movs	r2, #64	; 0x40
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2241      	movs	r2, #65	; 0x41
 8004d74:	2124      	movs	r1, #36	; 0x24
 8004d76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2101      	movs	r1, #1
 8004d84:	438a      	bics	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4911      	ldr	r1, [pc, #68]	; (8004dd8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d94:	400a      	ands	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6819      	ldr	r1, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2101      	movs	r1, #1
 8004db4:	430a      	orrs	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2241      	movs	r2, #65	; 0x41
 8004dbc:	2120      	movs	r1, #32
 8004dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e000      	b.n	8004dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	0018      	movs	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b002      	add	sp, #8
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	ffffefff 	.word	0xffffefff

08004ddc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2241      	movs	r2, #65	; 0x41
 8004dea:	5c9b      	ldrb	r3, [r3, r2]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d139      	bne.n	8004e66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2240      	movs	r2, #64	; 0x40
 8004df6:	5c9b      	ldrb	r3, [r3, r2]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e033      	b.n	8004e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2240      	movs	r2, #64	; 0x40
 8004e04:	2101      	movs	r1, #1
 8004e06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2241      	movs	r2, #65	; 0x41
 8004e0c:	2124      	movs	r1, #36	; 0x24
 8004e0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4a11      	ldr	r2, [pc, #68]	; (8004e70 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2241      	movs	r2, #65	; 0x41
 8004e56:	2120      	movs	r1, #32
 8004e58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2240      	movs	r2, #64	; 0x40
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b004      	add	sp, #16
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	fffff0ff 	.word	0xfffff0ff

08004e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e74:	b5b0      	push	{r4, r5, r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f000 fbaf 	bl	80055e6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e88:	4bcf      	ldr	r3, [pc, #828]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	220c      	movs	r2, #12
 8004e8e:	4013      	ands	r3, r2
 8004e90:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e92:	4bcd      	ldr	r3, [pc, #820]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	025b      	lsls	r3, r3, #9
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d100      	bne.n	8004eaa <HAL_RCC_OscConfig+0x36>
 8004ea8:	e07e      	b.n	8004fa8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d007      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d112      	bne.n	8004edc <HAL_RCC_OscConfig+0x68>
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	025b      	lsls	r3, r3, #9
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	4bc1      	ldr	r3, [pc, #772]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	029b      	lsls	r3, r3, #10
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d100      	bne.n	8004ece <HAL_RCC_OscConfig+0x5a>
 8004ecc:	e06b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x132>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d167      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f000 fb85 	bl	80055e6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	025b      	lsls	r3, r3, #9
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x84>
 8004ee8:	4bb7      	ldr	r3, [pc, #732]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4bb6      	ldr	r3, [pc, #728]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004eee:	2180      	movs	r1, #128	; 0x80
 8004ef0:	0249      	lsls	r1, r1, #9
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e027      	b.n	8004f48 <HAL_RCC_OscConfig+0xd4>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	23a0      	movs	r3, #160	; 0xa0
 8004efe:	02db      	lsls	r3, r3, #11
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d10e      	bne.n	8004f22 <HAL_RCC_OscConfig+0xae>
 8004f04:	4bb0      	ldr	r3, [pc, #704]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4baf      	ldr	r3, [pc, #700]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	02c9      	lsls	r1, r1, #11
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	4bad      	ldr	r3, [pc, #692]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4bac      	ldr	r3, [pc, #688]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	0249      	lsls	r1, r1, #9
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e012      	b.n	8004f48 <HAL_RCC_OscConfig+0xd4>
 8004f22:	4ba9      	ldr	r3, [pc, #676]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4ba8      	ldr	r3, [pc, #672]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f28:	49a8      	ldr	r1, [pc, #672]	; (80051cc <HAL_RCC_OscConfig+0x358>)
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	4ba6      	ldr	r3, [pc, #664]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	025b      	lsls	r3, r3, #9
 8004f36:	4013      	ands	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4ba2      	ldr	r3, [pc, #648]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4ba1      	ldr	r3, [pc, #644]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f42:	49a3      	ldr	r1, [pc, #652]	; (80051d0 <HAL_RCC_OscConfig+0x35c>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fe fe74 	bl	8003c3c <HAL_GetTick>
 8004f54:	0003      	movs	r3, r0
 8004f56:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f58:	e009      	b.n	8004f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f5a:	f7fe fe6f 	bl	8003c3c <HAL_GetTick>
 8004f5e:	0002      	movs	r2, r0
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b64      	cmp	r3, #100	; 0x64
 8004f66:	d902      	bls.n	8004f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	f000 fb3c 	bl	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f6e:	4b96      	ldr	r3, [pc, #600]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	029b      	lsls	r3, r3, #10
 8004f76:	4013      	ands	r3, r2
 8004f78:	d0ef      	beq.n	8004f5a <HAL_RCC_OscConfig+0xe6>
 8004f7a:	e015      	b.n	8004fa8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fe fe5e 	bl	8003c3c <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f86:	f7fe fe59 	bl	8003c3c <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b64      	cmp	r3, #100	; 0x64
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e326      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f98:	4b8b      	ldr	r3, [pc, #556]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d1f0      	bne.n	8004f86 <HAL_RCC_OscConfig+0x112>
 8004fa4:	e000      	b.n	8004fa8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2202      	movs	r2, #2
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d100      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x140>
 8004fb2:	e08b      	b.n	80050cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d13e      	bne.n	8005044 <HAL_RCC_OscConfig+0x1d0>
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d13b      	bne.n	8005044 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004fcc:	4b7e      	ldr	r3, [pc, #504]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x16c>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e302      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe0:	4b79      	ldr	r3, [pc, #484]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a7b      	ldr	r2, [pc, #492]	; (80051d4 <HAL_RCC_OscConfig+0x360>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	4b75      	ldr	r3, [pc, #468]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ff6:	4b74      	ldr	r3, [pc, #464]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2209      	movs	r2, #9
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	4b71      	ldr	r3, [pc, #452]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005008:	f000 fc40 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800500c:	0001      	movs	r1, r0
 800500e:	4b6e      	ldr	r3, [pc, #440]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	220f      	movs	r2, #15
 8005016:	4013      	ands	r3, r2
 8005018:	4a6f      	ldr	r2, [pc, #444]	; (80051d8 <HAL_RCC_OscConfig+0x364>)
 800501a:	5cd3      	ldrb	r3, [r2, r3]
 800501c:	000a      	movs	r2, r1
 800501e:	40da      	lsrs	r2, r3
 8005020:	4b6e      	ldr	r3, [pc, #440]	; (80051dc <HAL_RCC_OscConfig+0x368>)
 8005022:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005024:	4b6e      	ldr	r3, [pc, #440]	; (80051e0 <HAL_RCC_OscConfig+0x36c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2513      	movs	r5, #19
 800502a:	197c      	adds	r4, r7, r5
 800502c:	0018      	movs	r0, r3
 800502e:	f7fe fdbf 	bl	8003bb0 <HAL_InitTick>
 8005032:	0003      	movs	r3, r0
 8005034:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005036:	197b      	adds	r3, r7, r5
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d046      	beq.n	80050cc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800503e:	197b      	adds	r3, r7, r5
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	e2d0      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d027      	beq.n	800509a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800504a:	4b5f      	ldr	r3, [pc, #380]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2209      	movs	r2, #9
 8005050:	4393      	bics	r3, r2
 8005052:	0019      	movs	r1, r3
 8005054:	4b5c      	ldr	r3, [pc, #368]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fe fdee 	bl	8003c3c <HAL_GetTick>
 8005060:	0003      	movs	r3, r0
 8005062:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005066:	f7fe fde9 	bl	8003c3c <HAL_GetTick>
 800506a:	0002      	movs	r2, r0
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e2b6      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2204      	movs	r2, #4
 800507e:	4013      	ands	r3, r2
 8005080:	d0f1      	beq.n	8005066 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005082:	4b51      	ldr	r3, [pc, #324]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4a53      	ldr	r2, [pc, #332]	; (80051d4 <HAL_RCC_OscConfig+0x360>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	021a      	lsls	r2, r3, #8
 8005092:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	e018      	b.n	80050cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509a:	4b4b      	ldr	r3, [pc, #300]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b4a      	ldr	r3, [pc, #296]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80050a0:	2101      	movs	r1, #1
 80050a2:	438a      	bics	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a6:	f7fe fdc9 	bl	8003c3c <HAL_GetTick>
 80050aa:	0003      	movs	r3, r0
 80050ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b0:	f7fe fdc4 	bl	8003c3c <HAL_GetTick>
 80050b4:	0002      	movs	r2, r0
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e291      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2204      	movs	r2, #4
 80050c8:	4013      	ands	r3, r2
 80050ca:	d1f1      	bne.n	80050b0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2210      	movs	r2, #16
 80050d2:	4013      	ands	r3, r2
 80050d4:	d100      	bne.n	80050d8 <HAL_RCC_OscConfig+0x264>
 80050d6:	e0a1      	b.n	800521c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d140      	bne.n	8005160 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050de:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4013      	ands	r3, r2
 80050e8:	d005      	beq.n	80050f6 <HAL_RCC_OscConfig+0x282>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e277      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050f6:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4a3a      	ldr	r2, [pc, #232]	; (80051e4 <HAL_RCC_OscConfig+0x370>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005104:	4b30      	ldr	r3, [pc, #192]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800510a:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	0a19      	lsrs	r1, r3, #8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	061a      	lsls	r2, r3, #24
 8005118:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	0b5b      	lsrs	r3, r3, #13
 8005124:	3301      	adds	r3, #1
 8005126:	2280      	movs	r2, #128	; 0x80
 8005128:	0212      	lsls	r2, r2, #8
 800512a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800512c:	4b26      	ldr	r3, [pc, #152]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	210f      	movs	r1, #15
 8005134:	400b      	ands	r3, r1
 8005136:	4928      	ldr	r1, [pc, #160]	; (80051d8 <HAL_RCC_OscConfig+0x364>)
 8005138:	5ccb      	ldrb	r3, [r1, r3]
 800513a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <HAL_RCC_OscConfig+0x368>)
 800513e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <HAL_RCC_OscConfig+0x36c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2513      	movs	r5, #19
 8005146:	197c      	adds	r4, r7, r5
 8005148:	0018      	movs	r0, r3
 800514a:	f7fe fd31 	bl	8003bb0 <HAL_InitTick>
 800514e:	0003      	movs	r3, r0
 8005150:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005152:	197b      	adds	r3, r7, r5
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d060      	beq.n	800521c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800515a:	197b      	adds	r3, r7, r5
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	e242      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d03f      	beq.n	80051e8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005168:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 800516e:	2180      	movs	r1, #128	; 0x80
 8005170:	0049      	lsls	r1, r1, #1
 8005172:	430a      	orrs	r2, r1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fe fd61 	bl	8003c3c <HAL_GetTick>
 800517a:	0003      	movs	r3, r0
 800517c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005180:	f7fe fd5c 	bl	8003c3c <HAL_GetTick>
 8005184:	0002      	movs	r2, r0
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e229      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005192:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4013      	ands	r3, r2
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <HAL_RCC_OscConfig+0x370>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	0a19      	lsrs	r1, r3, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	061a      	lsls	r2, r3, #24
 80051c0:	4b01      	ldr	r3, [pc, #4]	; (80051c8 <HAL_RCC_OscConfig+0x354>)
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	e029      	b.n	800521c <HAL_RCC_OscConfig+0x3a8>
 80051c8:	40021000 	.word	0x40021000
 80051cc:	fffeffff 	.word	0xfffeffff
 80051d0:	fffbffff 	.word	0xfffbffff
 80051d4:	ffffe0ff 	.word	0xffffe0ff
 80051d8:	0800c098 	.word	0x0800c098
 80051dc:	20000000 	.word	0x20000000
 80051e0:	20000004 	.word	0x20000004
 80051e4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051e8:	4bbd      	ldr	r3, [pc, #756]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4bbc      	ldr	r3, [pc, #752]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80051ee:	49bd      	ldr	r1, [pc, #756]	; (80054e4 <HAL_RCC_OscConfig+0x670>)
 80051f0:	400a      	ands	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fe fd22 	bl	8003c3c <HAL_GetTick>
 80051f8:	0003      	movs	r3, r0
 80051fa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051fe:	f7fe fd1d 	bl	8003c3c <HAL_GetTick>
 8005202:	0002      	movs	r2, r0
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e1ea      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005210:	4bb3      	ldr	r3, [pc, #716]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	2380      	movs	r3, #128	; 0x80
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4013      	ands	r3, r2
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2208      	movs	r2, #8
 8005222:	4013      	ands	r3, r2
 8005224:	d036      	beq.n	8005294 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d019      	beq.n	8005262 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522e:	4bac      	ldr	r3, [pc, #688]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005232:	4bab      	ldr	r3, [pc, #684]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005234:	2101      	movs	r1, #1
 8005236:	430a      	orrs	r2, r1
 8005238:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523a:	f7fe fcff 	bl	8003c3c <HAL_GetTick>
 800523e:	0003      	movs	r3, r0
 8005240:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005244:	f7fe fcfa 	bl	8003c3c <HAL_GetTick>
 8005248:	0002      	movs	r2, r0
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e1c7      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005256:	4ba2      	ldr	r3, [pc, #648]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	d0f1      	beq.n	8005244 <HAL_RCC_OscConfig+0x3d0>
 8005260:	e018      	b.n	8005294 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005262:	4b9f      	ldr	r3, [pc, #636]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005266:	4b9e      	ldr	r3, [pc, #632]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005268:	2101      	movs	r1, #1
 800526a:	438a      	bics	r2, r1
 800526c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526e:	f7fe fce5 	bl	8003c3c <HAL_GetTick>
 8005272:	0003      	movs	r3, r0
 8005274:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005278:	f7fe fce0 	bl	8003c3c <HAL_GetTick>
 800527c:	0002      	movs	r2, r0
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1ad      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800528a:	4b95      	ldr	r3, [pc, #596]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	2202      	movs	r2, #2
 8005290:	4013      	ands	r3, r2
 8005292:	d1f1      	bne.n	8005278 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2204      	movs	r2, #4
 800529a:	4013      	ands	r3, r2
 800529c:	d100      	bne.n	80052a0 <HAL_RCC_OscConfig+0x42c>
 800529e:	e0ae      	b.n	80053fe <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a0:	2027      	movs	r0, #39	; 0x27
 80052a2:	183b      	adds	r3, r7, r0
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a8:	4b8d      	ldr	r3, [pc, #564]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80052aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	055b      	lsls	r3, r3, #21
 80052b0:	4013      	ands	r3, r2
 80052b2:	d109      	bne.n	80052c8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	4b8a      	ldr	r3, [pc, #552]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80052b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b8:	4b89      	ldr	r3, [pc, #548]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	0549      	lsls	r1, r1, #21
 80052be:	430a      	orrs	r2, r1
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80052c2:	183b      	adds	r3, r7, r0
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	4b87      	ldr	r3, [pc, #540]	; (80054e8 <HAL_RCC_OscConfig+0x674>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4013      	ands	r3, r2
 80052d2:	d11a      	bne.n	800530a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d4:	4b84      	ldr	r3, [pc, #528]	; (80054e8 <HAL_RCC_OscConfig+0x674>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b83      	ldr	r3, [pc, #524]	; (80054e8 <HAL_RCC_OscConfig+0x674>)
 80052da:	2180      	movs	r1, #128	; 0x80
 80052dc:	0049      	lsls	r1, r1, #1
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e2:	f7fe fcab 	bl	8003c3c <HAL_GetTick>
 80052e6:	0003      	movs	r3, r0
 80052e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ec:	f7fe fca6 	bl	8003c3c <HAL_GetTick>
 80052f0:	0002      	movs	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e173      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fe:	4b7a      	ldr	r3, [pc, #488]	; (80054e8 <HAL_RCC_OscConfig+0x674>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4013      	ands	r3, r2
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	429a      	cmp	r2, r3
 8005314:	d107      	bne.n	8005326 <HAL_RCC_OscConfig+0x4b2>
 8005316:	4b72      	ldr	r3, [pc, #456]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800531a:	4b71      	ldr	r3, [pc, #452]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	0049      	lsls	r1, r1, #1
 8005320:	430a      	orrs	r2, r1
 8005322:	651a      	str	r2, [r3, #80]	; 0x50
 8005324:	e031      	b.n	800538a <HAL_RCC_OscConfig+0x516>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x4d4>
 800532e:	4b6c      	ldr	r3, [pc, #432]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005332:	4b6b      	ldr	r3, [pc, #428]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005334:	496b      	ldr	r1, [pc, #428]	; (80054e4 <HAL_RCC_OscConfig+0x670>)
 8005336:	400a      	ands	r2, r1
 8005338:	651a      	str	r2, [r3, #80]	; 0x50
 800533a:	4b69      	ldr	r3, [pc, #420]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 800533c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800533e:	4b68      	ldr	r3, [pc, #416]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005340:	496a      	ldr	r1, [pc, #424]	; (80054ec <HAL_RCC_OscConfig+0x678>)
 8005342:	400a      	ands	r2, r1
 8005344:	651a      	str	r2, [r3, #80]	; 0x50
 8005346:	e020      	b.n	800538a <HAL_RCC_OscConfig+0x516>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	23a0      	movs	r3, #160	; 0xa0
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	429a      	cmp	r2, r3
 8005352:	d10e      	bne.n	8005372 <HAL_RCC_OscConfig+0x4fe>
 8005354:	4b62      	ldr	r3, [pc, #392]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005358:	4b61      	ldr	r3, [pc, #388]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 800535a:	2180      	movs	r1, #128	; 0x80
 800535c:	00c9      	lsls	r1, r1, #3
 800535e:	430a      	orrs	r2, r1
 8005360:	651a      	str	r2, [r3, #80]	; 0x50
 8005362:	4b5f      	ldr	r3, [pc, #380]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005366:	4b5e      	ldr	r3, [pc, #376]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005368:	2180      	movs	r1, #128	; 0x80
 800536a:	0049      	lsls	r1, r1, #1
 800536c:	430a      	orrs	r2, r1
 800536e:	651a      	str	r2, [r3, #80]	; 0x50
 8005370:	e00b      	b.n	800538a <HAL_RCC_OscConfig+0x516>
 8005372:	4b5b      	ldr	r3, [pc, #364]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005376:	4b5a      	ldr	r3, [pc, #360]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005378:	495a      	ldr	r1, [pc, #360]	; (80054e4 <HAL_RCC_OscConfig+0x670>)
 800537a:	400a      	ands	r2, r1
 800537c:	651a      	str	r2, [r3, #80]	; 0x50
 800537e:	4b58      	ldr	r3, [pc, #352]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005382:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005384:	4959      	ldr	r1, [pc, #356]	; (80054ec <HAL_RCC_OscConfig+0x678>)
 8005386:	400a      	ands	r2, r1
 8005388:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d015      	beq.n	80053be <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005392:	f7fe fc53 	bl	8003c3c <HAL_GetTick>
 8005396:	0003      	movs	r3, r0
 8005398:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800539a:	e009      	b.n	80053b0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe fc4e 	bl	8003c3c <HAL_GetTick>
 80053a0:	0002      	movs	r2, r0
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	4a52      	ldr	r2, [pc, #328]	; (80054f0 <HAL_RCC_OscConfig+0x67c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e11a      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053b0:	4b4b      	ldr	r3, [pc, #300]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80053b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4013      	ands	r3, r2
 80053ba:	d0ef      	beq.n	800539c <HAL_RCC_OscConfig+0x528>
 80053bc:	e014      	b.n	80053e8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053be:	f7fe fc3d 	bl	8003c3c <HAL_GetTick>
 80053c2:	0003      	movs	r3, r0
 80053c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053c6:	e009      	b.n	80053dc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c8:	f7fe fc38 	bl	8003c3c <HAL_GetTick>
 80053cc:	0002      	movs	r2, r0
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	4a47      	ldr	r2, [pc, #284]	; (80054f0 <HAL_RCC_OscConfig+0x67c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e104      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053dc:	4b40      	ldr	r3, [pc, #256]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80053de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4013      	ands	r3, r2
 80053e6:	d1ef      	bne.n	80053c8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053e8:	2327      	movs	r3, #39	; 0x27
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d105      	bne.n	80053fe <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f2:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80053f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f6:	4b3a      	ldr	r3, [pc, #232]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80053f8:	493e      	ldr	r1, [pc, #248]	; (80054f4 <HAL_RCC_OscConfig+0x680>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2220      	movs	r2, #32
 8005404:	4013      	ands	r3, r2
 8005406:	d049      	beq.n	800549c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d026      	beq.n	800545e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005410:	4b33      	ldr	r3, [pc, #204]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005416:	2101      	movs	r1, #1
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
 800541c:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 800541e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005420:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005422:	2101      	movs	r1, #1
 8005424:	430a      	orrs	r2, r1
 8005426:	635a      	str	r2, [r3, #52]	; 0x34
 8005428:	4b33      	ldr	r3, [pc, #204]	; (80054f8 <HAL_RCC_OscConfig+0x684>)
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	4b32      	ldr	r3, [pc, #200]	; (80054f8 <HAL_RCC_OscConfig+0x684>)
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	0189      	lsls	r1, r1, #6
 8005432:	430a      	orrs	r2, r1
 8005434:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fe fc01 	bl	8003c3c <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005440:	f7fe fbfc 	bl	8003c3c <HAL_GetTick>
 8005444:	0002      	movs	r2, r0
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0c9      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005452:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2202      	movs	r2, #2
 8005458:	4013      	ands	r3, r2
 800545a:	d0f1      	beq.n	8005440 <HAL_RCC_OscConfig+0x5cc>
 800545c:	e01e      	b.n	800549c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800545e:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	4b1f      	ldr	r3, [pc, #124]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005464:	2101      	movs	r1, #1
 8005466:	438a      	bics	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <HAL_RCC_OscConfig+0x684>)
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	4b22      	ldr	r3, [pc, #136]	; (80054f8 <HAL_RCC_OscConfig+0x684>)
 8005470:	4922      	ldr	r1, [pc, #136]	; (80054fc <HAL_RCC_OscConfig+0x688>)
 8005472:	400a      	ands	r2, r1
 8005474:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005476:	f7fe fbe1 	bl	8003c3c <HAL_GetTick>
 800547a:	0003      	movs	r3, r0
 800547c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005480:	f7fe fbdc 	bl	8003c3c <HAL_GetTick>
 8005484:	0002      	movs	r2, r0
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0a9      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2202      	movs	r2, #2
 8005498:	4013      	ands	r3, r2
 800549a:	d1f1      	bne.n	8005480 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d100      	bne.n	80054a6 <HAL_RCC_OscConfig+0x632>
 80054a4:	e09e      	b.n	80055e4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d100      	bne.n	80054ae <HAL_RCC_OscConfig+0x63a>
 80054ac:	e077      	b.n	800559e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d158      	bne.n	8005568 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_OscConfig+0x66c>)
 80054bc:	4910      	ldr	r1, [pc, #64]	; (8005500 <HAL_RCC_OscConfig+0x68c>)
 80054be:	400a      	ands	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fe fbbb 	bl	8003c3c <HAL_GetTick>
 80054c6:	0003      	movs	r3, r0
 80054c8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054ca:	e01b      	b.n	8005504 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054cc:	f7fe fbb6 	bl	8003c3c <HAL_GetTick>
 80054d0:	0002      	movs	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d914      	bls.n	8005504 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e083      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	40021000 	.word	0x40021000
 80054e4:	fffffeff 	.word	0xfffffeff
 80054e8:	40007000 	.word	0x40007000
 80054ec:	fffffbff 	.word	0xfffffbff
 80054f0:	00001388 	.word	0x00001388
 80054f4:	efffffff 	.word	0xefffffff
 80054f8:	40010000 	.word	0x40010000
 80054fc:	ffffdfff 	.word	0xffffdfff
 8005500:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005504:	4b3a      	ldr	r3, [pc, #232]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	049b      	lsls	r3, r3, #18
 800550c:	4013      	ands	r3, r2
 800550e:	d1dd      	bne.n	80054cc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005510:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a37      	ldr	r2, [pc, #220]	; (80055f4 <HAL_RCC_OscConfig+0x780>)
 8005516:	4013      	ands	r3, r2
 8005518:	0019      	movs	r1, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005528:	431a      	orrs	r2, r3
 800552a:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 800552c:	430a      	orrs	r2, r1
 800552e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005530:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b2e      	ldr	r3, [pc, #184]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 8005536:	2180      	movs	r1, #128	; 0x80
 8005538:	0449      	lsls	r1, r1, #17
 800553a:	430a      	orrs	r2, r1
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7fe fb7d 	bl	8003c3c <HAL_GetTick>
 8005542:	0003      	movs	r3, r0
 8005544:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005548:	f7fe fb78 	bl	8003c3c <HAL_GetTick>
 800554c:	0002      	movs	r2, r0
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e045      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800555a:	4b25      	ldr	r3, [pc, #148]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	049b      	lsls	r3, r3, #18
 8005562:	4013      	ands	r3, r2
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x6d4>
 8005566:	e03d      	b.n	80055e4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 800556e:	4922      	ldr	r1, [pc, #136]	; (80055f8 <HAL_RCC_OscConfig+0x784>)
 8005570:	400a      	ands	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fe fb62 	bl	8003c3c <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557e:	f7fe fb5d 	bl	8003c3c <HAL_GetTick>
 8005582:	0002      	movs	r2, r0
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e02a      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005590:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	049b      	lsls	r3, r3, #18
 8005598:	4013      	ands	r3, r2
 800559a:	d1f0      	bne.n	800557e <HAL_RCC_OscConfig+0x70a>
 800559c:	e022      	b.n	80055e4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e01d      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <HAL_RCC_OscConfig+0x77c>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	025b      	lsls	r3, r3, #9
 80055b6:	401a      	ands	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d10f      	bne.n	80055e0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	23f0      	movs	r3, #240	; 0xf0
 80055c4:	039b      	lsls	r3, r3, #14
 80055c6:	401a      	ands	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d107      	bne.n	80055e0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	23c0      	movs	r3, #192	; 0xc0
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	401a      	ands	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b00a      	add	sp, #40	; 0x28
 80055ec:	bdb0      	pop	{r4, r5, r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	40021000 	.word	0x40021000
 80055f4:	ff02ffff 	.word	0xff02ffff
 80055f8:	feffffff 	.word	0xfeffffff

080055fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055fc:	b5b0      	push	{r4, r5, r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e128      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005610:	4b96      	ldr	r3, [pc, #600]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2201      	movs	r2, #1
 8005616:	4013      	ands	r3, r2
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d91e      	bls.n	800565c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b93      	ldr	r3, [pc, #588]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	4393      	bics	r3, r2
 8005626:	0019      	movs	r1, r3
 8005628:	4b90      	ldr	r3, [pc, #576]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005630:	f7fe fb04 	bl	8003c3c <HAL_GetTick>
 8005634:	0003      	movs	r3, r0
 8005636:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005638:	e009      	b.n	800564e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563a:	f7fe faff 	bl	8003c3c <HAL_GetTick>
 800563e:	0002      	movs	r2, r0
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	4a8a      	ldr	r2, [pc, #552]	; (8005870 <HAL_RCC_ClockConfig+0x274>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e109      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564e:	4b87      	ldr	r3, [pc, #540]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2201      	movs	r2, #1
 8005654:	4013      	ands	r3, r2
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d1ee      	bne.n	800563a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2202      	movs	r2, #2
 8005662:	4013      	ands	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005666:	4b83      	ldr	r3, [pc, #524]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	22f0      	movs	r2, #240	; 0xf0
 800566c:	4393      	bics	r3, r2
 800566e:	0019      	movs	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4b7f      	ldr	r3, [pc, #508]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005676:	430a      	orrs	r2, r1
 8005678:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	4013      	ands	r3, r2
 8005682:	d100      	bne.n	8005686 <HAL_RCC_ClockConfig+0x8a>
 8005684:	e089      	b.n	800579a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800568e:	4b79      	ldr	r3, [pc, #484]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	2380      	movs	r3, #128	; 0x80
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	4013      	ands	r3, r2
 8005698:	d120      	bne.n	80056dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e0e1      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d107      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056a6:	4b73      	ldr	r3, [pc, #460]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	049b      	lsls	r3, r3, #18
 80056ae:	4013      	ands	r3, r2
 80056b0:	d114      	bne.n	80056dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0d5      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d106      	bne.n	80056cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056be:	4b6d      	ldr	r3, [pc, #436]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2204      	movs	r2, #4
 80056c4:	4013      	ands	r3, r2
 80056c6:	d109      	bne.n	80056dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0ca      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056cc:	4b69      	ldr	r3, [pc, #420]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0c2      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056dc:	4b65      	ldr	r3, [pc, #404]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2203      	movs	r2, #3
 80056e2:	4393      	bics	r3, r2
 80056e4:	0019      	movs	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	4b62      	ldr	r3, [pc, #392]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 80056ec:	430a      	orrs	r2, r1
 80056ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056f0:	f7fe faa4 	bl	8003c3c <HAL_GetTick>
 80056f4:	0003      	movs	r3, r0
 80056f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d111      	bne.n	8005724 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005700:	e009      	b.n	8005716 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005702:	f7fe fa9b 	bl	8003c3c <HAL_GetTick>
 8005706:	0002      	movs	r2, r0
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	4a58      	ldr	r2, [pc, #352]	; (8005870 <HAL_RCC_ClockConfig+0x274>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e0a5      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005716:	4b57      	ldr	r3, [pc, #348]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	220c      	movs	r2, #12
 800571c:	4013      	ands	r3, r2
 800571e:	2b08      	cmp	r3, #8
 8005720:	d1ef      	bne.n	8005702 <HAL_RCC_ClockConfig+0x106>
 8005722:	e03a      	b.n	800579a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d111      	bne.n	8005750 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800572c:	e009      	b.n	8005742 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800572e:	f7fe fa85 	bl	8003c3c <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	4a4d      	ldr	r2, [pc, #308]	; (8005870 <HAL_RCC_ClockConfig+0x274>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e08f      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005742:	4b4c      	ldr	r3, [pc, #304]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	220c      	movs	r2, #12
 8005748:	4013      	ands	r3, r2
 800574a:	2b0c      	cmp	r3, #12
 800574c:	d1ef      	bne.n	800572e <HAL_RCC_ClockConfig+0x132>
 800574e:	e024      	b.n	800579a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d11b      	bne.n	8005790 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005758:	e009      	b.n	800576e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800575a:	f7fe fa6f 	bl	8003c3c <HAL_GetTick>
 800575e:	0002      	movs	r2, r0
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	4a42      	ldr	r2, [pc, #264]	; (8005870 <HAL_RCC_ClockConfig+0x274>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e079      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800576e:	4b41      	ldr	r3, [pc, #260]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	220c      	movs	r2, #12
 8005774:	4013      	ands	r3, r2
 8005776:	2b04      	cmp	r3, #4
 8005778:	d1ef      	bne.n	800575a <HAL_RCC_ClockConfig+0x15e>
 800577a:	e00e      	b.n	800579a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800577c:	f7fe fa5e 	bl	8003c3c <HAL_GetTick>
 8005780:	0002      	movs	r2, r0
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a3a      	ldr	r2, [pc, #232]	; (8005870 <HAL_RCC_ClockConfig+0x274>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e068      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005790:	4b38      	ldr	r3, [pc, #224]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	220c      	movs	r2, #12
 8005796:	4013      	ands	r3, r2
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800579a:	4b34      	ldr	r3, [pc, #208]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	4013      	ands	r3, r2
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d21e      	bcs.n	80057e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a8:	4b30      	ldr	r3, [pc, #192]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2201      	movs	r2, #1
 80057ae:	4393      	bics	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	4b2e      	ldr	r3, [pc, #184]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057ba:	f7fe fa3f 	bl	8003c3c <HAL_GetTick>
 80057be:	0003      	movs	r3, r0
 80057c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	e009      	b.n	80057d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c4:	f7fe fa3a 	bl	8003c3c <HAL_GetTick>
 80057c8:	0002      	movs	r2, r0
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	4a28      	ldr	r2, [pc, #160]	; (8005870 <HAL_RCC_ClockConfig+0x274>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e044      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d8:	4b24      	ldr	r3, [pc, #144]	; (800586c <HAL_RCC_ClockConfig+0x270>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2201      	movs	r2, #1
 80057de:	4013      	ands	r3, r2
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d1ee      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2204      	movs	r2, #4
 80057ec:	4013      	ands	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f0:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a20      	ldr	r2, [pc, #128]	; (8005878 <HAL_RCC_ClockConfig+0x27c>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005800:	430a      	orrs	r2, r1
 8005802:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2208      	movs	r2, #8
 800580a:	4013      	ands	r3, r2
 800580c:	d00a      	beq.n	8005824 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800580e:	4b19      	ldr	r3, [pc, #100]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4a1a      	ldr	r2, [pc, #104]	; (800587c <HAL_RCC_ClockConfig+0x280>)
 8005814:	4013      	ands	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	00da      	lsls	r2, r3, #3
 800581e:	4b15      	ldr	r3, [pc, #84]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 8005820:	430a      	orrs	r2, r1
 8005822:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005824:	f000 f832 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8005828:	0001      	movs	r1, r0
 800582a:	4b12      	ldr	r3, [pc, #72]	; (8005874 <HAL_RCC_ClockConfig+0x278>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	220f      	movs	r2, #15
 8005832:	4013      	ands	r3, r2
 8005834:	4a12      	ldr	r2, [pc, #72]	; (8005880 <HAL_RCC_ClockConfig+0x284>)
 8005836:	5cd3      	ldrb	r3, [r2, r3]
 8005838:	000a      	movs	r2, r1
 800583a:	40da      	lsrs	r2, r3
 800583c:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_RCC_ClockConfig+0x288>)
 800583e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005840:	4b11      	ldr	r3, [pc, #68]	; (8005888 <HAL_RCC_ClockConfig+0x28c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	250b      	movs	r5, #11
 8005846:	197c      	adds	r4, r7, r5
 8005848:	0018      	movs	r0, r3
 800584a:	f7fe f9b1 	bl	8003bb0 <HAL_InitTick>
 800584e:	0003      	movs	r3, r0
 8005850:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005852:	197b      	adds	r3, r7, r5
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800585a:	197b      	adds	r3, r7, r5
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	e000      	b.n	8005862 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bdb0      	pop	{r4, r5, r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	40022000 	.word	0x40022000
 8005870:	00001388 	.word	0x00001388
 8005874:	40021000 	.word	0x40021000
 8005878:	fffff8ff 	.word	0xfffff8ff
 800587c:	ffffc7ff 	.word	0xffffc7ff
 8005880:	0800c098 	.word	0x0800c098
 8005884:	20000000 	.word	0x20000000
 8005888:	20000004 	.word	0x20000004

0800588c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800588c:	b5b0      	push	{r4, r5, r7, lr}
 800588e:	b08e      	sub	sp, #56	; 0x38
 8005890:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005892:	4b4c      	ldr	r3, [pc, #304]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589a:	230c      	movs	r3, #12
 800589c:	4013      	ands	r3, r2
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d014      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x40>
 80058a2:	d900      	bls.n	80058a6 <HAL_RCC_GetSysClockFreq+0x1a>
 80058a4:	e07b      	b.n	800599e <HAL_RCC_GetSysClockFreq+0x112>
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d002      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x24>
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d00b      	beq.n	80058c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80058ae:	e076      	b.n	800599e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80058b0:	4b44      	ldr	r3, [pc, #272]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2210      	movs	r2, #16
 80058b6:	4013      	ands	r3, r2
 80058b8:	d002      	beq.n	80058c0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80058ba:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80058bc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80058be:	e07c      	b.n	80059ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80058c0:	4b42      	ldr	r3, [pc, #264]	; (80059cc <HAL_RCC_GetSysClockFreq+0x140>)
 80058c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058c4:	e079      	b.n	80059ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058c6:	4b42      	ldr	r3, [pc, #264]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058ca:	e076      	b.n	80059ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	0c9a      	lsrs	r2, r3, #18
 80058d0:	230f      	movs	r3, #15
 80058d2:	401a      	ands	r2, r3
 80058d4:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80058d6:	5c9b      	ldrb	r3, [r3, r2]
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	0d9a      	lsrs	r2, r3, #22
 80058de:	2303      	movs	r3, #3
 80058e0:	4013      	ands	r3, r2
 80058e2:	3301      	adds	r3, #1
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058e6:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	025b      	lsls	r3, r3, #9
 80058ee:	4013      	ands	r3, r2
 80058f0:	d01a      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	4a35      	ldr	r2, [pc, #212]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80058fc:	2300      	movs	r3, #0
 80058fe:	69b8      	ldr	r0, [r7, #24]
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	f7fa fdf1 	bl	80004e8 <__aeabi_lmul>
 8005906:	0002      	movs	r2, r0
 8005908:	000b      	movs	r3, r1
 800590a:	0010      	movs	r0, r2
 800590c:	0019      	movs	r1, r3
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f7fa fdc5 	bl	80004a8 <__aeabi_uldivmod>
 800591e:	0002      	movs	r2, r0
 8005920:	000b      	movs	r3, r1
 8005922:	0013      	movs	r3, r2
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
 8005926:	e037      	b.n	8005998 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005928:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2210      	movs	r2, #16
 800592e:	4013      	ands	r3, r2
 8005930:	d01a      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	4a23      	ldr	r2, [pc, #140]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800593c:	2300      	movs	r3, #0
 800593e:	68b8      	ldr	r0, [r7, #8]
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	f7fa fdd1 	bl	80004e8 <__aeabi_lmul>
 8005946:	0002      	movs	r2, r0
 8005948:	000b      	movs	r3, r1
 800594a:	0010      	movs	r0, r2
 800594c:	0019      	movs	r1, r3
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f7fa fda5 	bl	80004a8 <__aeabi_uldivmod>
 800595e:	0002      	movs	r2, r0
 8005960:	000b      	movs	r3, r1
 8005962:	0013      	movs	r3, r2
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	e017      	b.n	8005998 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	0018      	movs	r0, r3
 800596c:	2300      	movs	r3, #0
 800596e:	0019      	movs	r1, r3
 8005970:	4a16      	ldr	r2, [pc, #88]	; (80059cc <HAL_RCC_GetSysClockFreq+0x140>)
 8005972:	2300      	movs	r3, #0
 8005974:	f7fa fdb8 	bl	80004e8 <__aeabi_lmul>
 8005978:	0002      	movs	r2, r0
 800597a:	000b      	movs	r3, r1
 800597c:	0010      	movs	r0, r2
 800597e:	0019      	movs	r1, r3
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	001c      	movs	r4, r3
 8005984:	2300      	movs	r3, #0
 8005986:	001d      	movs	r5, r3
 8005988:	0022      	movs	r2, r4
 800598a:	002b      	movs	r3, r5
 800598c:	f7fa fd8c 	bl	80004a8 <__aeabi_uldivmod>
 8005990:	0002      	movs	r2, r0
 8005992:	000b      	movs	r3, r1
 8005994:	0013      	movs	r3, r2
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800599c:	e00d      	b.n	80059ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	0b5b      	lsrs	r3, r3, #13
 80059a4:	2207      	movs	r2, #7
 80059a6:	4013      	ands	r3, r2
 80059a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	3301      	adds	r3, #1
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	0212      	lsls	r2, r2, #8
 80059b2:	409a      	lsls	r2, r3
 80059b4:	0013      	movs	r3, r2
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80059bc:	0018      	movs	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	b00e      	add	sp, #56	; 0x38
 80059c2:	bdb0      	pop	{r4, r5, r7, pc}
 80059c4:	40021000 	.word	0x40021000
 80059c8:	003d0900 	.word	0x003d0900
 80059cc:	00f42400 	.word	0x00f42400
 80059d0:	007a1200 	.word	0x007a1200
 80059d4:	0800c0b0 	.word	0x0800c0b0

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b02      	ldr	r3, [pc, #8]	; (80059e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	20000000 	.word	0x20000000

080059ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059f0:	f7ff fff2 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f4:	0001      	movs	r1, r0
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	2207      	movs	r2, #7
 80059fe:	4013      	ands	r3, r2
 8005a00:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a02:	5cd3      	ldrb	r3, [r2, r3]
 8005a04:	40d9      	lsrs	r1, r3
 8005a06:	000b      	movs	r3, r1
}
 8005a08:	0018      	movs	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	40021000 	.word	0x40021000
 8005a14:	0800c0a8 	.word	0x0800c0a8

08005a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a1c:	f7ff ffdc 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8005a20:	0001      	movs	r1, r0
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	0adb      	lsrs	r3, r3, #11
 8005a28:	2207      	movs	r2, #7
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a2e:	5cd3      	ldrb	r3, [r2, r3]
 8005a30:	40d9      	lsrs	r1, r3
 8005a32:	000b      	movs	r3, r1
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	0800c0a8 	.word	0x0800c0a8

08005a44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005a4c:	2317      	movs	r3, #23
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d106      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	4013      	ands	r3, r2
 8005a68:	d100      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005a6a:	e104      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a6c:	4bb1      	ldr	r3, [pc, #708]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	055b      	lsls	r3, r3, #21
 8005a74:	4013      	ands	r3, r2
 8005a76:	d10a      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a78:	4bae      	ldr	r3, [pc, #696]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7c:	4bad      	ldr	r3, [pc, #692]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	0549      	lsls	r1, r1, #21
 8005a82:	430a      	orrs	r2, r1
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005a86:	2317      	movs	r3, #23
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8e:	4baa      	ldr	r3, [pc, #680]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4013      	ands	r3, r2
 8005a98:	d11a      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a9a:	4ba7      	ldr	r3, [pc, #668]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4ba6      	ldr	r3, [pc, #664]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	0049      	lsls	r1, r1, #1
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa8:	f7fe f8c8 	bl	8003c3c <HAL_GetTick>
 8005aac:	0003      	movs	r3, r0
 8005aae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab2:	f7fe f8c3 	bl	8003c3c <HAL_GetTick>
 8005ab6:	0002      	movs	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b64      	cmp	r3, #100	; 0x64
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e133      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac4:	4b9c      	ldr	r3, [pc, #624]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4013      	ands	r3, r2
 8005ace:	d0f0      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005ad0:	4b98      	ldr	r3, [pc, #608]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	23c0      	movs	r3, #192	; 0xc0
 8005ad6:	039b      	lsls	r3, r3, #14
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	23c0      	movs	r3, #192	; 0xc0
 8005ae2:	039b      	lsls	r3, r3, #14
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d107      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	23c0      	movs	r3, #192	; 0xc0
 8005af2:	039b      	lsls	r3, r3, #14
 8005af4:	4013      	ands	r3, r2
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d013      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	23c0      	movs	r3, #192	; 0xc0
 8005b02:	029b      	lsls	r3, r3, #10
 8005b04:	401a      	ands	r2, r3
 8005b06:	23c0      	movs	r3, #192	; 0xc0
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d10a      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b0e:	4b89      	ldr	r3, [pc, #548]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	029b      	lsls	r3, r3, #10
 8005b16:	401a      	ands	r2, r3
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	029b      	lsls	r3, r3, #10
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e103      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005b24:	4b83      	ldr	r3, [pc, #524]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b28:	23c0      	movs	r3, #192	; 0xc0
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d049      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	23c0      	movs	r3, #192	; 0xc0
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	4013      	ands	r3, r2
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d004      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d10d      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	23c0      	movs	r3, #192	; 0xc0
 8005b56:	029b      	lsls	r3, r3, #10
 8005b58:	4013      	ands	r3, r2
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d034      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d02e      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b6c:	4b71      	ldr	r3, [pc, #452]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	4a72      	ldr	r2, [pc, #456]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b76:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b7a:	4b6e      	ldr	r3, [pc, #440]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	0309      	lsls	r1, r1, #12
 8005b80:	430a      	orrs	r2, r1
 8005b82:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b84:	4b6b      	ldr	r3, [pc, #428]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b88:	4b6a      	ldr	r3, [pc, #424]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b8a:	496d      	ldr	r1, [pc, #436]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b90:	4b68      	ldr	r3, [pc, #416]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d014      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba0:	f7fe f84c 	bl	8003c3c <HAL_GetTick>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba8:	e009      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005baa:	f7fe f847 	bl	8003c3c <HAL_GetTick>
 8005bae:	0002      	movs	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	4a63      	ldr	r2, [pc, #396]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e0b6      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bbe:	4b5d      	ldr	r3, [pc, #372]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bc2:	2380      	movs	r3, #128	; 0x80
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d0ef      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d01f      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	23c0      	movs	r3, #192	; 0xc0
 8005bdc:	029b      	lsls	r3, r3, #10
 8005bde:	401a      	ands	r2, r3
 8005be0:	23c0      	movs	r3, #192	; 0xc0
 8005be2:	029b      	lsls	r3, r3, #10
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d10c      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005be8:	4b52      	ldr	r3, [pc, #328]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a56      	ldr	r2, [pc, #344]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	23c0      	movs	r3, #192	; 0xc0
 8005bf8:	039b      	lsls	r3, r3, #14
 8005bfa:	401a      	ands	r2, r3
 8005bfc:	4b4d      	ldr	r3, [pc, #308]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	4b4c      	ldr	r3, [pc, #304]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	23c0      	movs	r3, #192	; 0xc0
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	401a      	ands	r2, r3
 8005c10:	4b48      	ldr	r3, [pc, #288]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c12:	430a      	orrs	r2, r1
 8005c14:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d01f      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	23c0      	movs	r3, #192	; 0xc0
 8005c26:	029b      	lsls	r3, r3, #10
 8005c28:	401a      	ands	r2, r3
 8005c2a:	23c0      	movs	r3, #192	; 0xc0
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d10c      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005c32:	4b40      	ldr	r3, [pc, #256]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a44      	ldr	r2, [pc, #272]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	23c0      	movs	r3, #192	; 0xc0
 8005c42:	039b      	lsls	r3, r3, #14
 8005c44:	401a      	ands	r2, r3
 8005c46:	4b3b      	ldr	r3, [pc, #236]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c4e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	23c0      	movs	r3, #192	; 0xc0
 8005c56:	029b      	lsls	r3, r3, #10
 8005c58:	401a      	ands	r2, r3
 8005c5a:	4b36      	ldr	r3, [pc, #216]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c60:	2317      	movs	r3, #23
 8005c62:	18fb      	adds	r3, r7, r3
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d105      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6a:	4b32      	ldr	r3, [pc, #200]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c70:	4936      	ldr	r1, [pc, #216]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005c72:	400a      	ands	r2, r1
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c80:	4b2c      	ldr	r3, [pc, #176]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c84:	2203      	movs	r2, #3
 8005c86:	4393      	bics	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	4b29      	ldr	r3, [pc, #164]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c90:	430a      	orrs	r2, r1
 8005c92:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c9e:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca2:	220c      	movs	r2, #12
 8005ca4:	4393      	bics	r3, r2
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cbc:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc0:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	0019      	movs	r1, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cda:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cea:	430a      	orrs	r2, r1
 8005cec:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2240      	movs	r2, #64	; 0x40
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfc:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	0019      	movs	r1, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2280      	movs	r2, #128	; 0x80
 8005d12:	4013      	ands	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	0019      	movs	r1, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d26:	430a      	orrs	r2, r1
 8005d28:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b006      	add	sp, #24
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40007000 	.word	0x40007000
 8005d3c:	fffcffff 	.word	0xfffcffff
 8005d40:	fff7ffff 	.word	0xfff7ffff
 8005d44:	00001388 	.word	0x00001388
 8005d48:	ffcfffff 	.word	0xffcfffff
 8005d4c:	efffffff 	.word	0xefffffff
 8005d50:	fffff3ff 	.word	0xfffff3ff
 8005d54:	ffffcfff 	.word	0xffffcfff
 8005d58:	fbffffff 	.word	0xfbffffff
 8005d5c:	fff3ffff 	.word	0xfff3ffff

08005d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e044      	b.n	8005dfc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2278      	movs	r2, #120	; 0x78
 8005d7e:	2100      	movs	r1, #0
 8005d80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fd fe4b 	bl	8003a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2224      	movs	r2, #36	; 0x24
 8005d8e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	438a      	bics	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	0018      	movs	r0, r3
 8005da4:	f000 fc2c 	bl	8006600 <UART_SetConfig>
 8005da8:	0003      	movs	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e024      	b.n	8005dfc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f000 fea3 	bl	8006b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	490d      	ldr	r1, [pc, #52]	; (8005e04 <HAL_UART_Init+0xa4>)
 8005dce:	400a      	ands	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	212a      	movs	r1, #42	; 0x2a
 8005dde:	438a      	bics	r2, r1
 8005de0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2101      	movs	r1, #1
 8005dee:	430a      	orrs	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0018      	movs	r0, r3
 8005df6:	f000 ff3b 	bl	8006c70 <UART_CheckIdleState>
 8005dfa:	0003      	movs	r3, r0
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b002      	add	sp, #8
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	ffffb7ff 	.word	0xffffb7ff

08005e08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	1dbb      	adds	r3, r7, #6
 8005e16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d000      	beq.n	8005e22 <HAL_UART_Transmit+0x1a>
 8005e20:	e08c      	b.n	8005f3c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_UART_Transmit+0x28>
 8005e28:	1dbb      	adds	r3, r7, #6
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e084      	b.n	8005f3e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	015b      	lsls	r3, r3, #5
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d109      	bne.n	8005e54 <HAL_UART_Transmit+0x4c>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d001      	beq.n	8005e54 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e074      	b.n	8005f3e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2284      	movs	r2, #132	; 0x84
 8005e58:	2100      	movs	r1, #0
 8005e5a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2221      	movs	r2, #33	; 0x21
 8005e60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e62:	f7fd feeb 	bl	8003c3c <HAL_GetTick>
 8005e66:	0003      	movs	r3, r0
 8005e68:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1dba      	adds	r2, r7, #6
 8005e6e:	2150      	movs	r1, #80	; 0x50
 8005e70:	8812      	ldrh	r2, [r2, #0]
 8005e72:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	1dba      	adds	r2, r7, #6
 8005e78:	2152      	movs	r1, #82	; 0x52
 8005e7a:	8812      	ldrh	r2, [r2, #0]
 8005e7c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	2380      	movs	r3, #128	; 0x80
 8005e84:	015b      	lsls	r3, r3, #5
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d108      	bne.n	8005e9c <HAL_UART_Transmit+0x94>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e003      	b.n	8005ea4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ea4:	e02f      	b.n	8005f06 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	0013      	movs	r3, r2
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	f000 ff84 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 8005eb8:	1e03      	subs	r3, r0, #0
 8005eba:	d004      	beq.n	8005ec6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e03b      	b.n	8005f3e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	001a      	movs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	05d2      	lsls	r2, r2, #23
 8005ed8:	0dd2      	lsrs	r2, r2, #23
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	3302      	adds	r3, #2
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e007      	b.n	8005ef4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2252      	movs	r2, #82	; 0x52
 8005ef8:	5a9b      	ldrh	r3, [r3, r2]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b299      	uxth	r1, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2252      	movs	r2, #82	; 0x52
 8005f04:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2252      	movs	r2, #82	; 0x52
 8005f0a:	5a9b      	ldrh	r3, [r3, r2]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1c9      	bne.n	8005ea6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	0013      	movs	r3, r2
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2140      	movs	r1, #64	; 0x40
 8005f20:	f000 ff4e 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 8005f24:	1e03      	subs	r3, r0, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e005      	b.n	8005f3e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
  }
}
 8005f3e:	0018      	movs	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b008      	add	sp, #32
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	1dbb      	adds	r3, r7, #6
 8005f54:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	589b      	ldr	r3, [r3, r2]
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d14a      	bne.n	8005ff6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_UART_Receive_IT+0x26>
 8005f66:	1dbb      	adds	r3, r7, #6
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e042      	b.n	8005ff8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	015b      	lsls	r3, r3, #5
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d109      	bne.n	8005f92 <HAL_UART_Receive_IT+0x4a>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	d001      	beq.n	8005f92 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e032      	b.n	8005ff8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_UART_Receive_IT+0xb8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d020      	beq.n	8005fe4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	041b      	lsls	r3, r3, #16
 8005fac:	4013      	ands	r3, r2
 8005fae:	d019      	beq.n	8005fe4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb4:	613b      	str	r3, [r7, #16]
  return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	2301      	movs	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f383 8810 	msr	PRIMASK, r3
}
 8005fc4:	46c0      	nop			; (mov r8, r8)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2180      	movs	r1, #128	; 0x80
 8005fd2:	04c9      	lsls	r1, r1, #19
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f383 8810 	msr	PRIMASK, r3
}
 8005fe2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fe4:	1dbb      	adds	r3, r7, #6
 8005fe6:	881a      	ldrh	r2, [r3, #0]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f000 ff51 	bl	8006e94 <UART_Start_Receive_IT>
 8005ff2:	0003      	movs	r3, r0
 8005ff4:	e000      	b.n	8005ff8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005ff6:	2302      	movs	r3, #2
  }
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b008      	add	sp, #32
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40004800 	.word	0x40004800

08006004 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b0ab      	sub	sp, #172	; 0xac
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	22a4      	movs	r2, #164	; 0xa4
 8006014:	18b9      	adds	r1, r7, r2
 8006016:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	20a0      	movs	r0, #160	; 0xa0
 8006020:	1839      	adds	r1, r7, r0
 8006022:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	219c      	movs	r1, #156	; 0x9c
 800602c:	1879      	adds	r1, r7, r1
 800602e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006030:	0011      	movs	r1, r2
 8006032:	18bb      	adds	r3, r7, r2
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a99      	ldr	r2, [pc, #612]	; (800629c <HAL_UART_IRQHandler+0x298>)
 8006038:	4013      	ands	r3, r2
 800603a:	2298      	movs	r2, #152	; 0x98
 800603c:	18bc      	adds	r4, r7, r2
 800603e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006040:	18bb      	adds	r3, r7, r2
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d114      	bne.n	8006072 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006048:	187b      	adds	r3, r7, r1
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2220      	movs	r2, #32
 800604e:	4013      	ands	r3, r2
 8006050:	d00f      	beq.n	8006072 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006052:	183b      	adds	r3, r7, r0
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2220      	movs	r2, #32
 8006058:	4013      	ands	r3, r2
 800605a:	d00a      	beq.n	8006072 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	2b00      	cmp	r3, #0
 8006062:	d100      	bne.n	8006066 <HAL_UART_IRQHandler+0x62>
 8006064:	e2a0      	b.n	80065a8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	0010      	movs	r0, r2
 800606e:	4798      	blx	r3
      }
      return;
 8006070:	e29a      	b.n	80065a8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006072:	2398      	movs	r3, #152	; 0x98
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d100      	bne.n	800607e <HAL_UART_IRQHandler+0x7a>
 800607c:	e114      	b.n	80062a8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800607e:	239c      	movs	r3, #156	; 0x9c
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2201      	movs	r2, #1
 8006086:	4013      	ands	r3, r2
 8006088:	d106      	bne.n	8006098 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800608a:	23a0      	movs	r3, #160	; 0xa0
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a83      	ldr	r2, [pc, #524]	; (80062a0 <HAL_UART_IRQHandler+0x29c>)
 8006092:	4013      	ands	r3, r2
 8006094:	d100      	bne.n	8006098 <HAL_UART_IRQHandler+0x94>
 8006096:	e107      	b.n	80062a8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006098:	23a4      	movs	r3, #164	; 0xa4
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	4013      	ands	r3, r2
 80060a2:	d012      	beq.n	80060ca <HAL_UART_IRQHandler+0xc6>
 80060a4:	23a0      	movs	r3, #160	; 0xa0
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	2380      	movs	r3, #128	; 0x80
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	4013      	ands	r3, r2
 80060b0:	d00b      	beq.n	80060ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2201      	movs	r2, #1
 80060b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2284      	movs	r2, #132	; 0x84
 80060be:	589b      	ldr	r3, [r3, r2]
 80060c0:	2201      	movs	r2, #1
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2184      	movs	r1, #132	; 0x84
 80060c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ca:	23a4      	movs	r3, #164	; 0xa4
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2202      	movs	r2, #2
 80060d2:	4013      	ands	r3, r2
 80060d4:	d011      	beq.n	80060fa <HAL_UART_IRQHandler+0xf6>
 80060d6:	239c      	movs	r3, #156	; 0x9c
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2201      	movs	r2, #1
 80060de:	4013      	ands	r3, r2
 80060e0:	d00b      	beq.n	80060fa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2202      	movs	r2, #2
 80060e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2284      	movs	r2, #132	; 0x84
 80060ee:	589b      	ldr	r3, [r3, r2]
 80060f0:	2204      	movs	r2, #4
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2184      	movs	r1, #132	; 0x84
 80060f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060fa:	23a4      	movs	r3, #164	; 0xa4
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2204      	movs	r2, #4
 8006102:	4013      	ands	r3, r2
 8006104:	d011      	beq.n	800612a <HAL_UART_IRQHandler+0x126>
 8006106:	239c      	movs	r3, #156	; 0x9c
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2201      	movs	r2, #1
 800610e:	4013      	ands	r3, r2
 8006110:	d00b      	beq.n	800612a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2204      	movs	r2, #4
 8006118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2284      	movs	r2, #132	; 0x84
 800611e:	589b      	ldr	r3, [r3, r2]
 8006120:	2202      	movs	r2, #2
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2184      	movs	r1, #132	; 0x84
 8006128:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800612a:	23a4      	movs	r3, #164	; 0xa4
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2208      	movs	r2, #8
 8006132:	4013      	ands	r3, r2
 8006134:	d017      	beq.n	8006166 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006136:	23a0      	movs	r3, #160	; 0xa0
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2220      	movs	r2, #32
 800613e:	4013      	ands	r3, r2
 8006140:	d105      	bne.n	800614e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006142:	239c      	movs	r3, #156	; 0x9c
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2201      	movs	r2, #1
 800614a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800614c:	d00b      	beq.n	8006166 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2208      	movs	r2, #8
 8006154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2284      	movs	r2, #132	; 0x84
 800615a:	589b      	ldr	r3, [r3, r2]
 800615c:	2208      	movs	r2, #8
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2184      	movs	r1, #132	; 0x84
 8006164:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006166:	23a4      	movs	r3, #164	; 0xa4
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	4013      	ands	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_UART_IRQHandler+0x198>
 8006174:	23a0      	movs	r3, #160	; 0xa0
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	04db      	lsls	r3, r3, #19
 800617e:	4013      	ands	r3, r2
 8006180:	d00c      	beq.n	800619c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2280      	movs	r2, #128	; 0x80
 8006188:	0112      	lsls	r2, r2, #4
 800618a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2284      	movs	r2, #132	; 0x84
 8006190:	589b      	ldr	r3, [r3, r2]
 8006192:	2220      	movs	r2, #32
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2184      	movs	r1, #132	; 0x84
 800619a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2284      	movs	r2, #132	; 0x84
 80061a0:	589b      	ldr	r3, [r3, r2]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d100      	bne.n	80061a8 <HAL_UART_IRQHandler+0x1a4>
 80061a6:	e201      	b.n	80065ac <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061a8:	23a4      	movs	r3, #164	; 0xa4
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2220      	movs	r2, #32
 80061b0:	4013      	ands	r3, r2
 80061b2:	d00e      	beq.n	80061d2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061b4:	23a0      	movs	r3, #160	; 0xa0
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2220      	movs	r2, #32
 80061bc:	4013      	ands	r3, r2
 80061be:	d008      	beq.n	80061d2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	0010      	movs	r0, r2
 80061d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2284      	movs	r2, #132	; 0x84
 80061d6:	589b      	ldr	r3, [r3, r2]
 80061d8:	2194      	movs	r1, #148	; 0x94
 80061da:	187a      	adds	r2, r7, r1
 80061dc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2240      	movs	r2, #64	; 0x40
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d004      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2228      	movs	r2, #40	; 0x28
 80061f2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061f4:	d047      	beq.n	8006286 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 ff15 	bl	8007028 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2240      	movs	r2, #64	; 0x40
 8006206:	4013      	ands	r3, r2
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d137      	bne.n	800627c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620c:	f3ef 8310 	mrs	r3, PRIMASK
 8006210:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006214:	2090      	movs	r0, #144	; 0x90
 8006216:	183a      	adds	r2, r7, r0
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	2301      	movs	r3, #1
 800621c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800621e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006220:	f383 8810 	msr	PRIMASK, r3
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2140      	movs	r1, #64	; 0x40
 8006232:	438a      	bics	r2, r1
 8006234:	609a      	str	r2, [r3, #8]
 8006236:	183b      	adds	r3, r7, r0
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800623e:	f383 8810 	msr	PRIMASK, r3
}
 8006242:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006248:	2b00      	cmp	r3, #0
 800624a:	d012      	beq.n	8006272 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006250:	4a14      	ldr	r2, [pc, #80]	; (80062a4 <HAL_UART_IRQHandler+0x2a0>)
 8006252:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006258:	0018      	movs	r0, r3
 800625a:	f7fd fe3b 	bl	8003ed4 <HAL_DMA_Abort_IT>
 800625e:	1e03      	subs	r3, r0, #0
 8006260:	d01a      	beq.n	8006298 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626c:	0018      	movs	r0, r3
 800626e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e012      	b.n	8006298 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f000 f9af 	bl	80065d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	e00d      	b.n	8006298 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	0018      	movs	r0, r3
 8006280:	f000 f9aa 	bl	80065d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006284:	e008      	b.n	8006298 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 f9a5 	bl	80065d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2284      	movs	r2, #132	; 0x84
 8006292:	2100      	movs	r1, #0
 8006294:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006296:	e189      	b.n	80065ac <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006298:	46c0      	nop			; (mov r8, r8)
    return;
 800629a:	e187      	b.n	80065ac <HAL_UART_IRQHandler+0x5a8>
 800629c:	0000080f 	.word	0x0000080f
 80062a0:	04000120 	.word	0x04000120
 80062a4:	080070f1 	.word	0x080070f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d000      	beq.n	80062b2 <HAL_UART_IRQHandler+0x2ae>
 80062b0:	e13b      	b.n	800652a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062b2:	23a4      	movs	r3, #164	; 0xa4
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2210      	movs	r2, #16
 80062ba:	4013      	ands	r3, r2
 80062bc:	d100      	bne.n	80062c0 <HAL_UART_IRQHandler+0x2bc>
 80062be:	e134      	b.n	800652a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062c0:	23a0      	movs	r3, #160	; 0xa0
 80062c2:	18fb      	adds	r3, r7, r3
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2210      	movs	r2, #16
 80062c8:	4013      	ands	r3, r2
 80062ca:	d100      	bne.n	80062ce <HAL_UART_IRQHandler+0x2ca>
 80062cc:	e12d      	b.n	800652a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2210      	movs	r2, #16
 80062d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2240      	movs	r2, #64	; 0x40
 80062de:	4013      	ands	r3, r2
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d000      	beq.n	80062e6 <HAL_UART_IRQHandler+0x2e2>
 80062e4:	e0a1      	b.n	800642a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	217e      	movs	r1, #126	; 0x7e
 80062f0:	187b      	adds	r3, r7, r1
 80062f2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d100      	bne.n	80062fe <HAL_UART_IRQHandler+0x2fa>
 80062fc:	e158      	b.n	80065b0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2258      	movs	r2, #88	; 0x58
 8006302:	5a9b      	ldrh	r3, [r3, r2]
 8006304:	187a      	adds	r2, r7, r1
 8006306:	8812      	ldrh	r2, [r2, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d300      	bcc.n	800630e <HAL_UART_IRQHandler+0x30a>
 800630c:	e150      	b.n	80065b0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	187a      	adds	r2, r7, r1
 8006312:	215a      	movs	r1, #90	; 0x5a
 8006314:	8812      	ldrh	r2, [r2, #0]
 8006316:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2220      	movs	r2, #32
 8006322:	4013      	ands	r3, r2
 8006324:	d16f      	bne.n	8006406 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006326:	f3ef 8310 	mrs	r3, PRIMASK
 800632a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800632e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006330:	2301      	movs	r3, #1
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	f383 8810 	msr	PRIMASK, r3
}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	499e      	ldr	r1, [pc, #632]	; (80065c0 <HAL_UART_IRQHandler+0x5bc>)
 8006348:	400a      	ands	r2, r1
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800634e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	f383 8810 	msr	PRIMASK, r3
}
 8006356:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006358:	f3ef 8310 	mrs	r3, PRIMASK
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006360:	677b      	str	r3, [r7, #116]	; 0x74
 8006362:	2301      	movs	r3, #1
 8006364:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006368:	f383 8810 	msr	PRIMASK, r3
}
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2101      	movs	r1, #1
 800637a:	438a      	bics	r2, r1
 800637c:	609a      	str	r2, [r3, #8]
 800637e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006380:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006384:	f383 8810 	msr	PRIMASK, r3
}
 8006388:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638a:	f3ef 8310 	mrs	r3, PRIMASK
 800638e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006390:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006392:	673b      	str	r3, [r7, #112]	; 0x70
 8006394:	2301      	movs	r3, #1
 8006396:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639a:	f383 8810 	msr	PRIMASK, r3
}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2140      	movs	r1, #64	; 0x40
 80063ac:	438a      	bics	r2, r1
 80063ae:	609a      	str	r2, [r3, #8]
 80063b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b6:	f383 8810 	msr	PRIMASK, r3
}
 80063ba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2280      	movs	r2, #128	; 0x80
 80063c0:	2120      	movs	r1, #32
 80063c2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ca:	f3ef 8310 	mrs	r3, PRIMASK
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80063d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063d4:	2301      	movs	r3, #1
 80063d6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063da:	f383 8810 	msr	PRIMASK, r3
}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2110      	movs	r1, #16
 80063ec:	438a      	bics	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f6:	f383 8810 	msr	PRIMASK, r3
}
 80063fa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006400:	0018      	movs	r0, r3
 8006402:	f7fd fd27 	bl	8003e54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2258      	movs	r2, #88	; 0x58
 8006410:	5a9a      	ldrh	r2, [r3, r2]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	215a      	movs	r1, #90	; 0x5a
 8006416:	5a5b      	ldrh	r3, [r3, r1]
 8006418:	b29b      	uxth	r3, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	0011      	movs	r1, r2
 8006422:	0018      	movs	r0, r3
 8006424:	f000 f8e0 	bl	80065e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006428:	e0c2      	b.n	80065b0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2258      	movs	r2, #88	; 0x58
 800642e:	5a99      	ldrh	r1, [r3, r2]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	225a      	movs	r2, #90	; 0x5a
 8006434:	5a9b      	ldrh	r3, [r3, r2]
 8006436:	b29a      	uxth	r2, r3
 8006438:	208e      	movs	r0, #142	; 0x8e
 800643a:	183b      	adds	r3, r7, r0
 800643c:	1a8a      	subs	r2, r1, r2
 800643e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	225a      	movs	r2, #90	; 0x5a
 8006444:	5a9b      	ldrh	r3, [r3, r2]
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d100      	bne.n	800644e <HAL_UART_IRQHandler+0x44a>
 800644c:	e0b2      	b.n	80065b4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800644e:	183b      	adds	r3, r7, r0
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d100      	bne.n	8006458 <HAL_UART_IRQHandler+0x454>
 8006456:	e0ad      	b.n	80065b4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006458:	f3ef 8310 	mrs	r3, PRIMASK
 800645c:	60fb      	str	r3, [r7, #12]
  return(result);
 800645e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006460:	2488      	movs	r4, #136	; 0x88
 8006462:	193a      	adds	r2, r7, r4
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	2301      	movs	r3, #1
 8006468:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4951      	ldr	r1, [pc, #324]	; (80065c4 <HAL_UART_IRQHandler+0x5c0>)
 800647e:	400a      	ands	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	193b      	adds	r3, r7, r4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f383 8810 	msr	PRIMASK, r3
}
 800648e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006490:	f3ef 8310 	mrs	r3, PRIMASK
 8006494:	61bb      	str	r3, [r7, #24]
  return(result);
 8006496:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	2484      	movs	r4, #132	; 0x84
 800649a:	193a      	adds	r2, r7, r4
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	2301      	movs	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f383 8810 	msr	PRIMASK, r3
}
 80064a8:	46c0      	nop			; (mov r8, r8)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2101      	movs	r1, #1
 80064b6:	438a      	bics	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
 80064ba:	193b      	adds	r3, r7, r4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	f383 8810 	msr	PRIMASK, r3
}
 80064c6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2280      	movs	r2, #128	; 0x80
 80064cc:	2120      	movs	r1, #32
 80064ce:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064dc:	f3ef 8310 	mrs	r3, PRIMASK
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e4:	2480      	movs	r4, #128	; 0x80
 80064e6:	193a      	adds	r2, r7, r4
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	2301      	movs	r3, #1
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	f383 8810 	msr	PRIMASK, r3
}
 80064f4:	46c0      	nop			; (mov r8, r8)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2110      	movs	r1, #16
 8006502:	438a      	bics	r2, r1
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	193b      	adds	r3, r7, r4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	f383 8810 	msr	PRIMASK, r3
}
 8006512:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800651a:	183b      	adds	r3, r7, r0
 800651c:	881a      	ldrh	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	0011      	movs	r1, r2
 8006522:	0018      	movs	r0, r3
 8006524:	f000 f860 	bl	80065e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006528:	e044      	b.n	80065b4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800652a:	23a4      	movs	r3, #164	; 0xa4
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	035b      	lsls	r3, r3, #13
 8006534:	4013      	ands	r3, r2
 8006536:	d010      	beq.n	800655a <HAL_UART_IRQHandler+0x556>
 8006538:	239c      	movs	r3, #156	; 0x9c
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	03db      	lsls	r3, r3, #15
 8006542:	4013      	ands	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	0352      	lsls	r2, r2, #13
 800654e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	0018      	movs	r0, r3
 8006554:	f000 ffd2 	bl	80074fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006558:	e02f      	b.n	80065ba <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800655a:	23a4      	movs	r3, #164	; 0xa4
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2280      	movs	r2, #128	; 0x80
 8006562:	4013      	ands	r3, r2
 8006564:	d00f      	beq.n	8006586 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006566:	23a0      	movs	r3, #160	; 0xa0
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2280      	movs	r2, #128	; 0x80
 800656e:	4013      	ands	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01e      	beq.n	80065b8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	0010      	movs	r0, r2
 8006582:	4798      	blx	r3
    }
    return;
 8006584:	e018      	b.n	80065b8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006586:	23a4      	movs	r3, #164	; 0xa4
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2240      	movs	r2, #64	; 0x40
 800658e:	4013      	ands	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_UART_IRQHandler+0x5b6>
 8006592:	23a0      	movs	r3, #160	; 0xa0
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2240      	movs	r2, #64	; 0x40
 800659a:	4013      	ands	r3, r2
 800659c:	d00d      	beq.n	80065ba <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 fdbc 	bl	800711e <UART_EndTransmit_IT>
    return;
 80065a6:	e008      	b.n	80065ba <HAL_UART_IRQHandler+0x5b6>
      return;
 80065a8:	46c0      	nop			; (mov r8, r8)
 80065aa:	e006      	b.n	80065ba <HAL_UART_IRQHandler+0x5b6>
    return;
 80065ac:	46c0      	nop			; (mov r8, r8)
 80065ae:	e004      	b.n	80065ba <HAL_UART_IRQHandler+0x5b6>
      return;
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	e002      	b.n	80065ba <HAL_UART_IRQHandler+0x5b6>
      return;
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	e000      	b.n	80065ba <HAL_UART_IRQHandler+0x5b6>
    return;
 80065b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80065ba:	46bd      	mov	sp, r7
 80065bc:	b02b      	add	sp, #172	; 0xac
 80065be:	bd90      	pop	{r4, r7, pc}
 80065c0:	fffffeff 	.word	0xfffffeff
 80065c4:	fffffedf 	.word	0xfffffedf

080065c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b002      	add	sp, #8
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065e0:	46c0      	nop			; (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b002      	add	sp, #8
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	000a      	movs	r2, r1
 80065f2:	1cbb      	adds	r3, r7, #2
 80065f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b002      	add	sp, #8
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006600:	b5b0      	push	{r4, r5, r7, lr}
 8006602:	b08e      	sub	sp, #56	; 0x38
 8006604:	af00      	add	r7, sp, #0
 8006606:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006608:	231a      	movs	r3, #26
 800660a:	2218      	movs	r2, #24
 800660c:	189b      	adds	r3, r3, r2
 800660e:	19db      	adds	r3, r3, r7
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	431a      	orrs	r2, r3
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	431a      	orrs	r2, r3
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	4313      	orrs	r3, r2
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4ac6      	ldr	r2, [pc, #792]	; (800694c <UART_SetConfig+0x34c>)
 8006634:	4013      	ands	r3, r2
 8006636:	0019      	movs	r1, r3
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	4ac1      	ldr	r2, [pc, #772]	; (8006950 <UART_SetConfig+0x350>)
 800664a:	4013      	ands	r3, r2
 800664c:	0019      	movs	r1, r3
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4abb      	ldr	r2, [pc, #748]	; (8006954 <UART_SetConfig+0x354>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d004      	beq.n	8006674 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006670:	4313      	orrs	r3, r2
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	4ab7      	ldr	r2, [pc, #732]	; (8006958 <UART_SetConfig+0x358>)
 800667c:	4013      	ands	r3, r2
 800667e:	0019      	movs	r1, r3
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4ab3      	ldr	r2, [pc, #716]	; (800695c <UART_SetConfig+0x35c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d131      	bne.n	80066f8 <UART_SetConfig+0xf8>
 8006694:	4bb2      	ldr	r3, [pc, #712]	; (8006960 <UART_SetConfig+0x360>)
 8006696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006698:	2203      	movs	r2, #3
 800669a:	4013      	ands	r3, r2
 800669c:	2b03      	cmp	r3, #3
 800669e:	d01d      	beq.n	80066dc <UART_SetConfig+0xdc>
 80066a0:	d823      	bhi.n	80066ea <UART_SetConfig+0xea>
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d00c      	beq.n	80066c0 <UART_SetConfig+0xc0>
 80066a6:	d820      	bhi.n	80066ea <UART_SetConfig+0xea>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <UART_SetConfig+0xb2>
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d00e      	beq.n	80066ce <UART_SetConfig+0xce>
 80066b0:	e01b      	b.n	80066ea <UART_SetConfig+0xea>
 80066b2:	231b      	movs	r3, #27
 80066b4:	2218      	movs	r2, #24
 80066b6:	189b      	adds	r3, r3, r2
 80066b8:	19db      	adds	r3, r3, r7
 80066ba:	2201      	movs	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e09c      	b.n	80067fa <UART_SetConfig+0x1fa>
 80066c0:	231b      	movs	r3, #27
 80066c2:	2218      	movs	r2, #24
 80066c4:	189b      	adds	r3, r3, r2
 80066c6:	19db      	adds	r3, r3, r7
 80066c8:	2202      	movs	r2, #2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e095      	b.n	80067fa <UART_SetConfig+0x1fa>
 80066ce:	231b      	movs	r3, #27
 80066d0:	2218      	movs	r2, #24
 80066d2:	189b      	adds	r3, r3, r2
 80066d4:	19db      	adds	r3, r3, r7
 80066d6:	2204      	movs	r2, #4
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e08e      	b.n	80067fa <UART_SetConfig+0x1fa>
 80066dc:	231b      	movs	r3, #27
 80066de:	2218      	movs	r2, #24
 80066e0:	189b      	adds	r3, r3, r2
 80066e2:	19db      	adds	r3, r3, r7
 80066e4:	2208      	movs	r2, #8
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	e087      	b.n	80067fa <UART_SetConfig+0x1fa>
 80066ea:	231b      	movs	r3, #27
 80066ec:	2218      	movs	r2, #24
 80066ee:	189b      	adds	r3, r3, r2
 80066f0:	19db      	adds	r3, r3, r7
 80066f2:	2210      	movs	r2, #16
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e080      	b.n	80067fa <UART_SetConfig+0x1fa>
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a99      	ldr	r2, [pc, #612]	; (8006964 <UART_SetConfig+0x364>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d131      	bne.n	8006766 <UART_SetConfig+0x166>
 8006702:	4b97      	ldr	r3, [pc, #604]	; (8006960 <UART_SetConfig+0x360>)
 8006704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006706:	220c      	movs	r2, #12
 8006708:	4013      	ands	r3, r2
 800670a:	2b0c      	cmp	r3, #12
 800670c:	d01d      	beq.n	800674a <UART_SetConfig+0x14a>
 800670e:	d823      	bhi.n	8006758 <UART_SetConfig+0x158>
 8006710:	2b08      	cmp	r3, #8
 8006712:	d00c      	beq.n	800672e <UART_SetConfig+0x12e>
 8006714:	d820      	bhi.n	8006758 <UART_SetConfig+0x158>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <UART_SetConfig+0x120>
 800671a:	2b04      	cmp	r3, #4
 800671c:	d00e      	beq.n	800673c <UART_SetConfig+0x13c>
 800671e:	e01b      	b.n	8006758 <UART_SetConfig+0x158>
 8006720:	231b      	movs	r3, #27
 8006722:	2218      	movs	r2, #24
 8006724:	189b      	adds	r3, r3, r2
 8006726:	19db      	adds	r3, r3, r7
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e065      	b.n	80067fa <UART_SetConfig+0x1fa>
 800672e:	231b      	movs	r3, #27
 8006730:	2218      	movs	r2, #24
 8006732:	189b      	adds	r3, r3, r2
 8006734:	19db      	adds	r3, r3, r7
 8006736:	2202      	movs	r2, #2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e05e      	b.n	80067fa <UART_SetConfig+0x1fa>
 800673c:	231b      	movs	r3, #27
 800673e:	2218      	movs	r2, #24
 8006740:	189b      	adds	r3, r3, r2
 8006742:	19db      	adds	r3, r3, r7
 8006744:	2204      	movs	r2, #4
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e057      	b.n	80067fa <UART_SetConfig+0x1fa>
 800674a:	231b      	movs	r3, #27
 800674c:	2218      	movs	r2, #24
 800674e:	189b      	adds	r3, r3, r2
 8006750:	19db      	adds	r3, r3, r7
 8006752:	2208      	movs	r2, #8
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e050      	b.n	80067fa <UART_SetConfig+0x1fa>
 8006758:	231b      	movs	r3, #27
 800675a:	2218      	movs	r2, #24
 800675c:	189b      	adds	r3, r3, r2
 800675e:	19db      	adds	r3, r3, r7
 8006760:	2210      	movs	r2, #16
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e049      	b.n	80067fa <UART_SetConfig+0x1fa>
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a7a      	ldr	r2, [pc, #488]	; (8006954 <UART_SetConfig+0x354>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d13e      	bne.n	80067ee <UART_SetConfig+0x1ee>
 8006770:	4b7b      	ldr	r3, [pc, #492]	; (8006960 <UART_SetConfig+0x360>)
 8006772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006774:	23c0      	movs	r3, #192	; 0xc0
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	4013      	ands	r3, r2
 800677a:	22c0      	movs	r2, #192	; 0xc0
 800677c:	0112      	lsls	r2, r2, #4
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <UART_SetConfig+0x1d2>
 8006782:	22c0      	movs	r2, #192	; 0xc0
 8006784:	0112      	lsls	r2, r2, #4
 8006786:	4293      	cmp	r3, r2
 8006788:	d82a      	bhi.n	80067e0 <UART_SetConfig+0x1e0>
 800678a:	2280      	movs	r2, #128	; 0x80
 800678c:	0112      	lsls	r2, r2, #4
 800678e:	4293      	cmp	r3, r2
 8006790:	d011      	beq.n	80067b6 <UART_SetConfig+0x1b6>
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	0112      	lsls	r2, r2, #4
 8006796:	4293      	cmp	r3, r2
 8006798:	d822      	bhi.n	80067e0 <UART_SetConfig+0x1e0>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <UART_SetConfig+0x1a8>
 800679e:	2280      	movs	r2, #128	; 0x80
 80067a0:	00d2      	lsls	r2, r2, #3
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <UART_SetConfig+0x1c4>
 80067a6:	e01b      	b.n	80067e0 <UART_SetConfig+0x1e0>
 80067a8:	231b      	movs	r3, #27
 80067aa:	2218      	movs	r2, #24
 80067ac:	189b      	adds	r3, r3, r2
 80067ae:	19db      	adds	r3, r3, r7
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e021      	b.n	80067fa <UART_SetConfig+0x1fa>
 80067b6:	231b      	movs	r3, #27
 80067b8:	2218      	movs	r2, #24
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	19db      	adds	r3, r3, r7
 80067be:	2202      	movs	r2, #2
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	e01a      	b.n	80067fa <UART_SetConfig+0x1fa>
 80067c4:	231b      	movs	r3, #27
 80067c6:	2218      	movs	r2, #24
 80067c8:	189b      	adds	r3, r3, r2
 80067ca:	19db      	adds	r3, r3, r7
 80067cc:	2204      	movs	r2, #4
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e013      	b.n	80067fa <UART_SetConfig+0x1fa>
 80067d2:	231b      	movs	r3, #27
 80067d4:	2218      	movs	r2, #24
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	19db      	adds	r3, r3, r7
 80067da:	2208      	movs	r2, #8
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e00c      	b.n	80067fa <UART_SetConfig+0x1fa>
 80067e0:	231b      	movs	r3, #27
 80067e2:	2218      	movs	r2, #24
 80067e4:	189b      	adds	r3, r3, r2
 80067e6:	19db      	adds	r3, r3, r7
 80067e8:	2210      	movs	r2, #16
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	e005      	b.n	80067fa <UART_SetConfig+0x1fa>
 80067ee:	231b      	movs	r3, #27
 80067f0:	2218      	movs	r2, #24
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	19db      	adds	r3, r3, r7
 80067f6:	2210      	movs	r2, #16
 80067f8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a55      	ldr	r2, [pc, #340]	; (8006954 <UART_SetConfig+0x354>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d000      	beq.n	8006806 <UART_SetConfig+0x206>
 8006804:	e084      	b.n	8006910 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006806:	231b      	movs	r3, #27
 8006808:	2218      	movs	r2, #24
 800680a:	189b      	adds	r3, r3, r2
 800680c:	19db      	adds	r3, r3, r7
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d01d      	beq.n	8006850 <UART_SetConfig+0x250>
 8006814:	dc20      	bgt.n	8006858 <UART_SetConfig+0x258>
 8006816:	2b04      	cmp	r3, #4
 8006818:	d015      	beq.n	8006846 <UART_SetConfig+0x246>
 800681a:	dc1d      	bgt.n	8006858 <UART_SetConfig+0x258>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <UART_SetConfig+0x226>
 8006820:	2b02      	cmp	r3, #2
 8006822:	d005      	beq.n	8006830 <UART_SetConfig+0x230>
 8006824:	e018      	b.n	8006858 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006826:	f7ff f8e1 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 800682a:	0003      	movs	r3, r0
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800682e:	e01c      	b.n	800686a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006830:	4b4b      	ldr	r3, [pc, #300]	; (8006960 <UART_SetConfig+0x360>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2210      	movs	r2, #16
 8006836:	4013      	ands	r3, r2
 8006838:	d002      	beq.n	8006840 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800683a:	4b4b      	ldr	r3, [pc, #300]	; (8006968 <UART_SetConfig+0x368>)
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800683e:	e014      	b.n	800686a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006840:	4b4a      	ldr	r3, [pc, #296]	; (800696c <UART_SetConfig+0x36c>)
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006844:	e011      	b.n	800686a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7ff f821 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800684a:	0003      	movs	r3, r0
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800684e:	e00c      	b.n	800686a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006856:	e008      	b.n	800686a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800685c:	231a      	movs	r3, #26
 800685e:	2218      	movs	r2, #24
 8006860:	189b      	adds	r3, r3, r2
 8006862:	19db      	adds	r3, r3, r7
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
        break;
 8006868:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d100      	bne.n	8006872 <UART_SetConfig+0x272>
 8006870:	e132      	b.n	8006ad8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	0013      	movs	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	189b      	adds	r3, r3, r2
 800687c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800687e:	429a      	cmp	r2, r3
 8006880:	d305      	bcc.n	800688e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688a:	429a      	cmp	r2, r3
 800688c:	d906      	bls.n	800689c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800688e:	231a      	movs	r3, #26
 8006890:	2218      	movs	r2, #24
 8006892:	189b      	adds	r3, r3, r2
 8006894:	19db      	adds	r3, r3, r7
 8006896:	2201      	movs	r2, #1
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e11d      	b.n	8006ad8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	6939      	ldr	r1, [r7, #16]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	000b      	movs	r3, r1
 80068aa:	0e1b      	lsrs	r3, r3, #24
 80068ac:	0010      	movs	r0, r2
 80068ae:	0205      	lsls	r5, r0, #8
 80068b0:	431d      	orrs	r5, r3
 80068b2:	000b      	movs	r3, r1
 80068b4:	021c      	lsls	r4, r3, #8
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	68b8      	ldr	r0, [r7, #8]
 80068c4:	68f9      	ldr	r1, [r7, #12]
 80068c6:	1900      	adds	r0, r0, r4
 80068c8:	4169      	adcs	r1, r5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	2300      	movs	r3, #0
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f7f9 fde6 	bl	80004a8 <__aeabi_uldivmod>
 80068dc:	0002      	movs	r2, r0
 80068de:	000b      	movs	r3, r1
 80068e0:	0013      	movs	r3, r2
 80068e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e6:	23c0      	movs	r3, #192	; 0xc0
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d309      	bcc.n	8006902 <UART_SetConfig+0x302>
 80068ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	035b      	lsls	r3, r3, #13
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d204      	bcs.n	8006902 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fe:	60da      	str	r2, [r3, #12]
 8006900:	e0ea      	b.n	8006ad8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006902:	231a      	movs	r3, #26
 8006904:	2218      	movs	r2, #24
 8006906:	189b      	adds	r3, r3, r2
 8006908:	19db      	adds	r3, r3, r7
 800690a:	2201      	movs	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	e0e3      	b.n	8006ad8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	429a      	cmp	r2, r3
 800691a:	d000      	beq.n	800691e <UART_SetConfig+0x31e>
 800691c:	e085      	b.n	8006a2a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800691e:	231b      	movs	r3, #27
 8006920:	2218      	movs	r2, #24
 8006922:	189b      	adds	r3, r3, r2
 8006924:	19db      	adds	r3, r3, r7
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d837      	bhi.n	800699c <UART_SetConfig+0x39c>
 800692c:	009a      	lsls	r2, r3, #2
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <UART_SetConfig+0x370>)
 8006930:	18d3      	adds	r3, r2, r3
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006936:	f7ff f859 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 800693a:	0003      	movs	r3, r0
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800693e:	e036      	b.n	80069ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006940:	f7ff f86a 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8006944:	0003      	movs	r3, r0
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006948:	e031      	b.n	80069ae <UART_SetConfig+0x3ae>
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	efff69f3 	.word	0xefff69f3
 8006950:	ffffcfff 	.word	0xffffcfff
 8006954:	40004800 	.word	0x40004800
 8006958:	fffff4ff 	.word	0xfffff4ff
 800695c:	40013800 	.word	0x40013800
 8006960:	40021000 	.word	0x40021000
 8006964:	40004400 	.word	0x40004400
 8006968:	003d0900 	.word	0x003d0900
 800696c:	00f42400 	.word	0x00f42400
 8006970:	0800c0bc 	.word	0x0800c0bc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006974:	4b60      	ldr	r3, [pc, #384]	; (8006af8 <UART_SetConfig+0x4f8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2210      	movs	r2, #16
 800697a:	4013      	ands	r3, r2
 800697c:	d002      	beq.n	8006984 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800697e:	4b5f      	ldr	r3, [pc, #380]	; (8006afc <UART_SetConfig+0x4fc>)
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006982:	e014      	b.n	80069ae <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006984:	4b5e      	ldr	r3, [pc, #376]	; (8006b00 <UART_SetConfig+0x500>)
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006988:	e011      	b.n	80069ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698a:	f7fe ff7f 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800698e:	0003      	movs	r3, r0
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006992:	e00c      	b.n	80069ae <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800699a:	e008      	b.n	80069ae <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069a0:	231a      	movs	r3, #26
 80069a2:	2218      	movs	r2, #24
 80069a4:	189b      	adds	r3, r3, r2
 80069a6:	19db      	adds	r3, r3, r7
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
        break;
 80069ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d100      	bne.n	80069b6 <UART_SetConfig+0x3b6>
 80069b4:	e090      	b.n	8006ad8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	005a      	lsls	r2, r3, #1
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	18d2      	adds	r2, r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	0019      	movs	r1, r3
 80069c8:	0010      	movs	r0, r2
 80069ca:	f7f9 fbb9 	bl	8000140 <__udivsi3>
 80069ce:	0003      	movs	r3, r0
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	2b0f      	cmp	r3, #15
 80069d6:	d921      	bls.n	8006a1c <UART_SetConfig+0x41c>
 80069d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	025b      	lsls	r3, r3, #9
 80069de:	429a      	cmp	r2, r3
 80069e0:	d21c      	bcs.n	8006a1c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	200e      	movs	r0, #14
 80069e8:	2418      	movs	r4, #24
 80069ea:	1903      	adds	r3, r0, r4
 80069ec:	19db      	adds	r3, r3, r7
 80069ee:	210f      	movs	r1, #15
 80069f0:	438a      	bics	r2, r1
 80069f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2207      	movs	r2, #7
 80069fc:	4013      	ands	r3, r2
 80069fe:	b299      	uxth	r1, r3
 8006a00:	1903      	adds	r3, r0, r4
 8006a02:	19db      	adds	r3, r3, r7
 8006a04:	1902      	adds	r2, r0, r4
 8006a06:	19d2      	adds	r2, r2, r7
 8006a08:	8812      	ldrh	r2, [r2, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	1902      	adds	r2, r0, r4
 8006a14:	19d2      	adds	r2, r2, r7
 8006a16:	8812      	ldrh	r2, [r2, #0]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	e05d      	b.n	8006ad8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006a1c:	231a      	movs	r3, #26
 8006a1e:	2218      	movs	r2, #24
 8006a20:	189b      	adds	r3, r3, r2
 8006a22:	19db      	adds	r3, r3, r7
 8006a24:	2201      	movs	r2, #1
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e056      	b.n	8006ad8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a2a:	231b      	movs	r3, #27
 8006a2c:	2218      	movs	r2, #24
 8006a2e:	189b      	adds	r3, r3, r2
 8006a30:	19db      	adds	r3, r3, r7
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d822      	bhi.n	8006a7e <UART_SetConfig+0x47e>
 8006a38:	009a      	lsls	r2, r3, #2
 8006a3a:	4b32      	ldr	r3, [pc, #200]	; (8006b04 <UART_SetConfig+0x504>)
 8006a3c:	18d3      	adds	r3, r2, r3
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a42:	f7fe ffd3 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 8006a46:	0003      	movs	r3, r0
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a4a:	e021      	b.n	8006a90 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a4c:	f7fe ffe4 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8006a50:	0003      	movs	r3, r0
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a54:	e01c      	b.n	8006a90 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a56:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <UART_SetConfig+0x4f8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d002      	beq.n	8006a66 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a60:	4b26      	ldr	r3, [pc, #152]	; (8006afc <UART_SetConfig+0x4fc>)
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a64:	e014      	b.n	8006a90 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8006a66:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <UART_SetConfig+0x500>)
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a6a:	e011      	b.n	8006a90 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6c:	f7fe ff0e 	bl	800588c <HAL_RCC_GetSysClockFreq>
 8006a70:	0003      	movs	r3, r0
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a74:	e00c      	b.n	8006a90 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a76:	2380      	movs	r3, #128	; 0x80
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a7c:	e008      	b.n	8006a90 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a82:	231a      	movs	r3, #26
 8006a84:	2218      	movs	r2, #24
 8006a86:	189b      	adds	r3, r3, r2
 8006a88:	19db      	adds	r3, r3, r7
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	701a      	strb	r2, [r3, #0]
        break;
 8006a8e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d020      	beq.n	8006ad8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	085a      	lsrs	r2, r3, #1
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	18d2      	adds	r2, r2, r3
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	0019      	movs	r1, r3
 8006aa6:	0010      	movs	r0, r2
 8006aa8:	f7f9 fb4a 	bl	8000140 <__udivsi3>
 8006aac:	0003      	movs	r3, r0
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	2b0f      	cmp	r3, #15
 8006ab4:	d90a      	bls.n	8006acc <UART_SetConfig+0x4cc>
 8006ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	025b      	lsls	r3, r3, #9
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d205      	bcs.n	8006acc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	e005      	b.n	8006ad8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006acc:	231a      	movs	r3, #26
 8006ace:	2218      	movs	r2, #24
 8006ad0:	189b      	adds	r3, r3, r2
 8006ad2:	19db      	adds	r3, r3, r7
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2200      	movs	r2, #0
 8006adc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ae4:	231a      	movs	r3, #26
 8006ae6:	2218      	movs	r2, #24
 8006ae8:	189b      	adds	r3, r3, r2
 8006aea:	19db      	adds	r3, r3, r7
 8006aec:	781b      	ldrb	r3, [r3, #0]
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b00e      	add	sp, #56	; 0x38
 8006af4:	bdb0      	pop	{r4, r5, r7, pc}
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	40021000 	.word	0x40021000
 8006afc:	003d0900 	.word	0x003d0900
 8006b00:	00f42400 	.word	0x00f42400
 8006b04:	0800c0e0 	.word	0x0800c0e0

08006b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2201      	movs	r2, #1
 8006b16:	4013      	ands	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a4a      	ldr	r2, [pc, #296]	; (8006c4c <UART_AdvFeatureConfig+0x144>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	0019      	movs	r1, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	2202      	movs	r2, #2
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4a43      	ldr	r2, [pc, #268]	; (8006c50 <UART_AdvFeatureConfig+0x148>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	0019      	movs	r1, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	2204      	movs	r2, #4
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d00b      	beq.n	8006b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4a3b      	ldr	r2, [pc, #236]	; (8006c54 <UART_AdvFeatureConfig+0x14c>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	0019      	movs	r1, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4a34      	ldr	r2, [pc, #208]	; (8006c58 <UART_AdvFeatureConfig+0x150>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d00b      	beq.n	8006bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	4a2c      	ldr	r2, [pc, #176]	; (8006c5c <UART_AdvFeatureConfig+0x154>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	0019      	movs	r1, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	d00b      	beq.n	8006bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	4a25      	ldr	r2, [pc, #148]	; (8006c60 <UART_AdvFeatureConfig+0x158>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	0019      	movs	r1, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2240      	movs	r2, #64	; 0x40
 8006be2:	4013      	ands	r3, r2
 8006be4:	d01d      	beq.n	8006c22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <UART_AdvFeatureConfig+0x15c>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	0019      	movs	r1, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c02:	2380      	movs	r3, #128	; 0x80
 8006c04:	035b      	lsls	r3, r3, #13
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d10b      	bne.n	8006c22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <UART_AdvFeatureConfig+0x160>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	0019      	movs	r1, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	2280      	movs	r2, #128	; 0x80
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d00b      	beq.n	8006c44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	4a0e      	ldr	r2, [pc, #56]	; (8006c6c <UART_AdvFeatureConfig+0x164>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	0019      	movs	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }
}
 8006c44:	46c0      	nop			; (mov r8, r8)
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b002      	add	sp, #8
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	fffdffff 	.word	0xfffdffff
 8006c50:	fffeffff 	.word	0xfffeffff
 8006c54:	fffbffff 	.word	0xfffbffff
 8006c58:	ffff7fff 	.word	0xffff7fff
 8006c5c:	ffffefff 	.word	0xffffefff
 8006c60:	ffffdfff 	.word	0xffffdfff
 8006c64:	ffefffff 	.word	0xffefffff
 8006c68:	ff9fffff 	.word	0xff9fffff
 8006c6c:	fff7ffff 	.word	0xfff7ffff

08006c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b092      	sub	sp, #72	; 0x48
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2284      	movs	r2, #132	; 0x84
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c80:	f7fc ffdc 	bl	8003c3c <HAL_GetTick>
 8006c84:	0003      	movs	r3, r0
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2208      	movs	r2, #8
 8006c90:	4013      	ands	r3, r2
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d12c      	bne.n	8006cf0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c98:	2280      	movs	r2, #128	; 0x80
 8006c9a:	0391      	lsls	r1, r2, #14
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4a46      	ldr	r2, [pc, #280]	; (8006db8 <UART_CheckIdleState+0x148>)
 8006ca0:	9200      	str	r2, [sp, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f000 f88c 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 8006ca8:	1e03      	subs	r3, r0, #0
 8006caa:	d021      	beq.n	8006cf0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cac:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	f383 8810 	msr	PRIMASK, r3
}
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2180      	movs	r1, #128	; 0x80
 8006cce:	438a      	bics	r2, r1
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	f383 8810 	msr	PRIMASK, r3
}
 8006cdc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2278      	movs	r2, #120	; 0x78
 8006ce8:	2100      	movs	r1, #0
 8006cea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e05f      	b.n	8006db0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d146      	bne.n	8006d8c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d00:	2280      	movs	r2, #128	; 0x80
 8006d02:	03d1      	lsls	r1, r2, #15
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4a2c      	ldr	r2, [pc, #176]	; (8006db8 <UART_CheckIdleState+0x148>)
 8006d08:	9200      	str	r2, [sp, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f000 f858 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 8006d10:	1e03      	subs	r3, r0, #0
 8006d12:	d03b      	beq.n	8006d8c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d14:	f3ef 8310 	mrs	r3, PRIMASK
 8006d18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1e:	2301      	movs	r3, #1
 8006d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f383 8810 	msr	PRIMASK, r3
}
 8006d28:	46c0      	nop			; (mov r8, r8)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4921      	ldr	r1, [pc, #132]	; (8006dbc <UART_CheckIdleState+0x14c>)
 8006d36:	400a      	ands	r2, r1
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f383 8810 	msr	PRIMASK, r3
}
 8006d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d46:	f3ef 8310 	mrs	r3, PRIMASK
 8006d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d50:	2301      	movs	r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f383 8810 	msr	PRIMASK, r3
}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2101      	movs	r1, #1
 8006d68:	438a      	bics	r2, r1
 8006d6a:	609a      	str	r2, [r3, #8]
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	2120      	movs	r1, #32
 8006d7e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2278      	movs	r2, #120	; 0x78
 8006d84:	2100      	movs	r1, #0
 8006d86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e011      	b.n	8006db0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2280      	movs	r2, #128	; 0x80
 8006d96:	2120      	movs	r1, #32
 8006d98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2278      	movs	r2, #120	; 0x78
 8006daa:	2100      	movs	r1, #0
 8006dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	0018      	movs	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b010      	add	sp, #64	; 0x40
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	01ffffff 	.word	0x01ffffff
 8006dbc:	fffffedf 	.word	0xfffffedf

08006dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	1dfb      	adds	r3, r7, #7
 8006dce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd0:	e04b      	b.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	d048      	beq.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd8:	f7fc ff30 	bl	8003c3c <HAL_GetTick>
 8006ddc:	0002      	movs	r2, r0
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <UART_WaitOnFlagUntilTimeout+0x2e>
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e04b      	b.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d035      	beq.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	2208      	movs	r2, #8
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d111      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2208      	movs	r2, #8
 8006e12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	0018      	movs	r0, r3
 8006e18:	f000 f906 	bl	8007028 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2284      	movs	r2, #132	; 0x84
 8006e20:	2108      	movs	r1, #8
 8006e22:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2278      	movs	r2, #120	; 0x78
 8006e28:	2100      	movs	r1, #0
 8006e2a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e02c      	b.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	2380      	movs	r3, #128	; 0x80
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	2380      	movs	r3, #128	; 0x80
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d112      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2280      	movs	r2, #128	; 0x80
 8006e4a:	0112      	lsls	r2, r2, #4
 8006e4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f000 f8e9 	bl	8007028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2284      	movs	r2, #132	; 0x84
 8006e5a:	2120      	movs	r1, #32
 8006e5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2278      	movs	r2, #120	; 0x78
 8006e62:	2100      	movs	r1, #0
 8006e64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e00f      	b.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	4013      	ands	r3, r2
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	425a      	negs	r2, r3
 8006e7a:	4153      	adcs	r3, r2
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	001a      	movs	r2, r3
 8006e80:	1dfb      	adds	r3, r7, #7
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d0a4      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b004      	add	sp, #16
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b090      	sub	sp, #64	; 0x40
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	1dbb      	adds	r3, r7, #6
 8006ea0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	1dba      	adds	r2, r7, #6
 8006eac:	2158      	movs	r1, #88	; 0x58
 8006eae:	8812      	ldrh	r2, [r2, #0]
 8006eb0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1dba      	adds	r2, r7, #6
 8006eb6:	215a      	movs	r1, #90	; 0x5a
 8006eb8:	8812      	ldrh	r2, [r2, #0]
 8006eba:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	2380      	movs	r3, #128	; 0x80
 8006ec8:	015b      	lsls	r3, r3, #5
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d10d      	bne.n	8006eea <UART_Start_Receive_IT+0x56>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d104      	bne.n	8006ee0 <UART_Start_Receive_IT+0x4c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	225c      	movs	r2, #92	; 0x5c
 8006eda:	4950      	ldr	r1, [pc, #320]	; (800701c <UART_Start_Receive_IT+0x188>)
 8006edc:	5299      	strh	r1, [r3, r2]
 8006ede:	e02e      	b.n	8006f3e <UART_Start_Receive_IT+0xaa>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	225c      	movs	r2, #92	; 0x5c
 8006ee4:	21ff      	movs	r1, #255	; 0xff
 8006ee6:	5299      	strh	r1, [r3, r2]
 8006ee8:	e029      	b.n	8006f3e <UART_Start_Receive_IT+0xaa>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10d      	bne.n	8006f0e <UART_Start_Receive_IT+0x7a>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <UART_Start_Receive_IT+0x70>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	225c      	movs	r2, #92	; 0x5c
 8006efe:	21ff      	movs	r1, #255	; 0xff
 8006f00:	5299      	strh	r1, [r3, r2]
 8006f02:	e01c      	b.n	8006f3e <UART_Start_Receive_IT+0xaa>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	225c      	movs	r2, #92	; 0x5c
 8006f08:	217f      	movs	r1, #127	; 0x7f
 8006f0a:	5299      	strh	r1, [r3, r2]
 8006f0c:	e017      	b.n	8006f3e <UART_Start_Receive_IT+0xaa>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	2380      	movs	r3, #128	; 0x80
 8006f14:	055b      	lsls	r3, r3, #21
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d10d      	bne.n	8006f36 <UART_Start_Receive_IT+0xa2>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d104      	bne.n	8006f2c <UART_Start_Receive_IT+0x98>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	225c      	movs	r2, #92	; 0x5c
 8006f26:	217f      	movs	r1, #127	; 0x7f
 8006f28:	5299      	strh	r1, [r3, r2]
 8006f2a:	e008      	b.n	8006f3e <UART_Start_Receive_IT+0xaa>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	225c      	movs	r2, #92	; 0x5c
 8006f30:	213f      	movs	r1, #63	; 0x3f
 8006f32:	5299      	strh	r1, [r3, r2]
 8006f34:	e003      	b.n	8006f3e <UART_Start_Receive_IT+0xaa>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	225c      	movs	r2, #92	; 0x5c
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2284      	movs	r2, #132	; 0x84
 8006f42:	2100      	movs	r1, #0
 8006f44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2280      	movs	r2, #128	; 0x80
 8006f4a:	2122      	movs	r1, #34	; 0x22
 8006f4c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f58:	2301      	movs	r3, #1
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	f383 8810 	msr	PRIMASK, r3
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2101      	movs	r1, #1
 8006f70:	430a      	orrs	r2, r1
 8006f72:	609a      	str	r2, [r3, #8]
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f76:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	f383 8810 	msr	PRIMASK, r3
}
 8006f7e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	015b      	lsls	r3, r3, #5
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d107      	bne.n	8006f9c <UART_Start_Receive_IT+0x108>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4a22      	ldr	r2, [pc, #136]	; (8007020 <UART_Start_Receive_IT+0x18c>)
 8006f98:	669a      	str	r2, [r3, #104]	; 0x68
 8006f9a:	e002      	b.n	8006fa2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <UART_Start_Receive_IT+0x190>)
 8006fa0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d019      	beq.n	8006fde <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006faa:	f3ef 8310 	mrs	r3, PRIMASK
 8006fae:	61fb      	str	r3, [r7, #28]
  return(result);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	f383 8810 	msr	PRIMASK, r3
}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2190      	movs	r1, #144	; 0x90
 8006fcc:	0049      	lsls	r1, r1, #1
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	f383 8810 	msr	PRIMASK, r3
}
 8006fdc:	e018      	b.n	8007010 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fde:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe2:	613b      	str	r3, [r7, #16]
  return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fe8:	2301      	movs	r3, #1
 8006fea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f383 8810 	msr	PRIMASK, r3
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2120      	movs	r1, #32
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f383 8810 	msr	PRIMASK, r3
}
 800700e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b010      	add	sp, #64	; 0x40
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	000001ff 	.word	0x000001ff
 8007020:	08007339 	.word	0x08007339
 8007024:	08007175 	.word	0x08007175

08007028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08e      	sub	sp, #56	; 0x38
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8310 	mrs	r3, PRIMASK
 8007034:	617b      	str	r3, [r7, #20]
  return(result);
 8007036:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	2301      	movs	r3, #1
 800703c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	f383 8810 	msr	PRIMASK, r3
}
 8007044:	46c0      	nop			; (mov r8, r8)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4926      	ldr	r1, [pc, #152]	; (80070ec <UART_EndRxTransfer+0xc4>)
 8007052:	400a      	ands	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f383 8810 	msr	PRIMASK, r3
}
 8007060:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007062:	f3ef 8310 	mrs	r3, PRIMASK
 8007066:	623b      	str	r3, [r7, #32]
  return(result);
 8007068:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
 800706c:	2301      	movs	r3, #1
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	f383 8810 	msr	PRIMASK, r3
}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2101      	movs	r1, #1
 8007084:	438a      	bics	r2, r1
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f383 8810 	msr	PRIMASK, r3
}
 8007092:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007098:	2b01      	cmp	r3, #1
 800709a:	d118      	bne.n	80070ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709c:	f3ef 8310 	mrs	r3, PRIMASK
 80070a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80070a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070a6:	2301      	movs	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f383 8810 	msr	PRIMASK, r3
}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2110      	movs	r1, #16
 80070be:	438a      	bics	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f383 8810 	msr	PRIMASK, r3
}
 80070cc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2280      	movs	r2, #128	; 0x80
 80070d2:	2120      	movs	r1, #32
 80070d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b00e      	add	sp, #56	; 0x38
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	fffffedf 	.word	0xfffffedf

080070f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	225a      	movs	r2, #90	; 0x5a
 8007102:	2100      	movs	r1, #0
 8007104:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2252      	movs	r2, #82	; 0x52
 800710a:	2100      	movs	r1, #0
 800710c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	0018      	movs	r0, r3
 8007112:	f7ff fa61 	bl	80065d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	46bd      	mov	sp, r7
 800711a:	b004      	add	sp, #16
 800711c:	bd80      	pop	{r7, pc}

0800711e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b086      	sub	sp, #24
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007126:	f3ef 8310 	mrs	r3, PRIMASK
 800712a:	60bb      	str	r3, [r7, #8]
  return(result);
 800712c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	2301      	movs	r3, #1
 8007132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f383 8810 	msr	PRIMASK, r3
}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2140      	movs	r1, #64	; 0x40
 8007148:	438a      	bics	r2, r1
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f383 8810 	msr	PRIMASK, r3
}
 8007156:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2220      	movs	r2, #32
 800715c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	0018      	movs	r0, r3
 8007168:	f7ff fa2e 	bl	80065c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	46bd      	mov	sp, r7
 8007170:	b006      	add	sp, #24
 8007172:	bd80      	pop	{r7, pc}

08007174 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b094      	sub	sp, #80	; 0x50
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800717c:	204e      	movs	r0, #78	; 0x4e
 800717e:	183b      	adds	r3, r7, r0
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	215c      	movs	r1, #92	; 0x5c
 8007184:	5a52      	ldrh	r2, [r2, r1]
 8007186:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2280      	movs	r2, #128	; 0x80
 800718c:	589b      	ldr	r3, [r3, r2]
 800718e:	2b22      	cmp	r3, #34	; 0x22
 8007190:	d000      	beq.n	8007194 <UART_RxISR_8BIT+0x20>
 8007192:	e0bf      	b.n	8007314 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800719a:	214c      	movs	r1, #76	; 0x4c
 800719c:	187b      	adds	r3, r7, r1
 800719e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071a0:	187b      	adds	r3, r7, r1
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b2d9      	uxtb	r1, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b0:	400a      	ands	r2, r1
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	225a      	movs	r2, #90	; 0x5a
 80071c4:	5a9b      	ldrh	r3, [r3, r2]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b299      	uxth	r1, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	225a      	movs	r2, #90	; 0x5a
 80071d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	225a      	movs	r2, #90	; 0x5a
 80071d6:	5a9b      	ldrh	r3, [r3, r2]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d000      	beq.n	80071e0 <UART_RxISR_8BIT+0x6c>
 80071de:	e0a1      	b.n	8007324 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e0:	f3ef 8310 	mrs	r3, PRIMASK
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ea:	2301      	movs	r3, #1
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	f383 8810 	msr	PRIMASK, r3
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	494a      	ldr	r1, [pc, #296]	; (800732c <UART_RxISR_8BIT+0x1b8>)
 8007202:	400a      	ands	r2, r1
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	f383 8810 	msr	PRIMASK, r3
}
 8007210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007212:	f3ef 8310 	mrs	r3, PRIMASK
 8007216:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	647b      	str	r3, [r7, #68]	; 0x44
 800721c:	2301      	movs	r3, #1
 800721e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007222:	f383 8810 	msr	PRIMASK, r3
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2101      	movs	r1, #1
 8007234:	438a      	bics	r2, r1
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	f383 8810 	msr	PRIMASK, r3
}
 8007242:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2280      	movs	r2, #128	; 0x80
 8007248:	2120      	movs	r1, #32
 800724a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a34      	ldr	r2, [pc, #208]	; (8007330 <UART_RxISR_8BIT+0x1bc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d01f      	beq.n	80072a2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	041b      	lsls	r3, r3, #16
 800726c:	4013      	ands	r3, r2
 800726e:	d018      	beq.n	80072a2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007270:	f3ef 8310 	mrs	r3, PRIMASK
 8007274:	61bb      	str	r3, [r7, #24]
  return(result);
 8007276:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007278:	643b      	str	r3, [r7, #64]	; 0x40
 800727a:	2301      	movs	r3, #1
 800727c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f383 8810 	msr	PRIMASK, r3
}
 8007284:	46c0      	nop			; (mov r8, r8)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4928      	ldr	r1, [pc, #160]	; (8007334 <UART_RxISR_8BIT+0x1c0>)
 8007292:	400a      	ands	r2, r1
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007298:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	f383 8810 	msr	PRIMASK, r3
}
 80072a0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d12f      	bne.n	800730a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b0:	f3ef 8310 	mrs	r3, PRIMASK
 80072b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80072b6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ba:	2301      	movs	r3, #1
 80072bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f383 8810 	msr	PRIMASK, r3
}
 80072c4:	46c0      	nop			; (mov r8, r8)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2110      	movs	r1, #16
 80072d2:	438a      	bics	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f383 8810 	msr	PRIMASK, r3
}
 80072e0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	2210      	movs	r2, #16
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d103      	bne.n	80072f8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2210      	movs	r2, #16
 80072f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2258      	movs	r2, #88	; 0x58
 80072fc:	5a9a      	ldrh	r2, [r3, r2]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0011      	movs	r1, r2
 8007302:	0018      	movs	r0, r3
 8007304:	f7ff f970 	bl	80065e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007308:	e00c      	b.n	8007324 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	0018      	movs	r0, r3
 800730e:	f7fc f951 	bl	80035b4 <HAL_UART_RxCpltCallback>
}
 8007312:	e007      	b.n	8007324 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699a      	ldr	r2, [r3, #24]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2108      	movs	r1, #8
 8007320:	430a      	orrs	r2, r1
 8007322:	619a      	str	r2, [r3, #24]
}
 8007324:	46c0      	nop			; (mov r8, r8)
 8007326:	46bd      	mov	sp, r7
 8007328:	b014      	add	sp, #80	; 0x50
 800732a:	bd80      	pop	{r7, pc}
 800732c:	fffffedf 	.word	0xfffffedf
 8007330:	40004800 	.word	0x40004800
 8007334:	fbffffff 	.word	0xfbffffff

08007338 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b094      	sub	sp, #80	; 0x50
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007340:	204e      	movs	r0, #78	; 0x4e
 8007342:	183b      	adds	r3, r7, r0
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	215c      	movs	r1, #92	; 0x5c
 8007348:	5a52      	ldrh	r2, [r2, r1]
 800734a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	589b      	ldr	r3, [r3, r2]
 8007352:	2b22      	cmp	r3, #34	; 0x22
 8007354:	d000      	beq.n	8007358 <UART_RxISR_16BIT+0x20>
 8007356:	e0bf      	b.n	80074d8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800735e:	214c      	movs	r1, #76	; 0x4c
 8007360:	187b      	adds	r3, r7, r1
 8007362:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800736a:	187b      	adds	r3, r7, r1
 800736c:	183a      	adds	r2, r7, r0
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	8812      	ldrh	r2, [r2, #0]
 8007372:	4013      	ands	r3, r2
 8007374:	b29a      	uxth	r2, r3
 8007376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007378:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737e:	1c9a      	adds	r2, r3, #2
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	225a      	movs	r2, #90	; 0x5a
 8007388:	5a9b      	ldrh	r3, [r3, r2]
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b299      	uxth	r1, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	225a      	movs	r2, #90	; 0x5a
 8007394:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	225a      	movs	r2, #90	; 0x5a
 800739a:	5a9b      	ldrh	r3, [r3, r2]
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d000      	beq.n	80073a4 <UART_RxISR_16BIT+0x6c>
 80073a2:	e0a1      	b.n	80074e8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a4:	f3ef 8310 	mrs	r3, PRIMASK
 80073a8:	623b      	str	r3, [r7, #32]
  return(result);
 80073aa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ac:	647b      	str	r3, [r7, #68]	; 0x44
 80073ae:	2301      	movs	r3, #1
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	f383 8810 	msr	PRIMASK, r3
}
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	494a      	ldr	r1, [pc, #296]	; (80074f0 <UART_RxISR_16BIT+0x1b8>)
 80073c6:	400a      	ands	r2, r1
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	f383 8810 	msr	PRIMASK, r3
}
 80073d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d6:	f3ef 8310 	mrs	r3, PRIMASK
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	643b      	str	r3, [r7, #64]	; 0x40
 80073e0:	2301      	movs	r3, #1
 80073e2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f383 8810 	msr	PRIMASK, r3
}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2101      	movs	r1, #1
 80073f8:	438a      	bics	r2, r1
 80073fa:	609a      	str	r2, [r3, #8]
 80073fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007402:	f383 8810 	msr	PRIMASK, r3
}
 8007406:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2280      	movs	r2, #128	; 0x80
 800740c:	2120      	movs	r1, #32
 800740e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a34      	ldr	r2, [pc, #208]	; (80074f4 <UART_RxISR_16BIT+0x1bc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01f      	beq.n	8007466 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	2380      	movs	r3, #128	; 0x80
 800742e:	041b      	lsls	r3, r3, #16
 8007430:	4013      	ands	r3, r2
 8007432:	d018      	beq.n	8007466 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007434:	f3ef 8310 	mrs	r3, PRIMASK
 8007438:	617b      	str	r3, [r7, #20]
  return(result);
 800743a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743e:	2301      	movs	r3, #1
 8007440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f383 8810 	msr	PRIMASK, r3
}
 8007448:	46c0      	nop			; (mov r8, r8)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4928      	ldr	r1, [pc, #160]	; (80074f8 <UART_RxISR_16BIT+0x1c0>)
 8007456:	400a      	ands	r2, r1
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f383 8810 	msr	PRIMASK, r3
}
 8007464:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	2b01      	cmp	r3, #1
 800746c:	d12f      	bne.n	80074ce <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007474:	f3ef 8310 	mrs	r3, PRIMASK
 8007478:	60bb      	str	r3, [r7, #8]
  return(result);
 800747a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38
 800747e:	2301      	movs	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f383 8810 	msr	PRIMASK, r3
}
 8007488:	46c0      	nop			; (mov r8, r8)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2110      	movs	r1, #16
 8007496:	438a      	bics	r2, r1
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f383 8810 	msr	PRIMASK, r3
}
 80074a4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	2210      	movs	r2, #16
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d103      	bne.n	80074bc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2210      	movs	r2, #16
 80074ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2258      	movs	r2, #88	; 0x58
 80074c0:	5a9a      	ldrh	r2, [r3, r2]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	0011      	movs	r1, r2
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7ff f88e 	bl	80065e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074cc:	e00c      	b.n	80074e8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	0018      	movs	r0, r3
 80074d2:	f7fc f86f 	bl	80035b4 <HAL_UART_RxCpltCallback>
}
 80074d6:	e007      	b.n	80074e8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2108      	movs	r1, #8
 80074e4:	430a      	orrs	r2, r1
 80074e6:	619a      	str	r2, [r3, #24]
}
 80074e8:	46c0      	nop			; (mov r8, r8)
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b014      	add	sp, #80	; 0x50
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	fffffedf 	.word	0xfffffedf
 80074f4:	40004800 	.word	0x40004800
 80074f8:	fbffffff 	.word	0xfbffffff

080074fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007504:	46c0      	nop			; (mov r8, r8)
 8007506:	46bd      	mov	sp, r7
 8007508:	b002      	add	sp, #8
 800750a:	bd80      	pop	{r7, pc}

0800750c <sulp>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	0016      	movs	r6, r2
 8007510:	000d      	movs	r5, r1
 8007512:	f003 fecd 	bl	800b2b0 <__ulp>
 8007516:	2e00      	cmp	r6, #0
 8007518:	d00d      	beq.n	8007536 <sulp+0x2a>
 800751a:	236b      	movs	r3, #107	; 0x6b
 800751c:	006a      	lsls	r2, r5, #1
 800751e:	0d52      	lsrs	r2, r2, #21
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	dd07      	ble.n	8007536 <sulp+0x2a>
 8007526:	2400      	movs	r4, #0
 8007528:	4a03      	ldr	r2, [pc, #12]	; (8007538 <sulp+0x2c>)
 800752a:	051b      	lsls	r3, r3, #20
 800752c:	189d      	adds	r5, r3, r2
 800752e:	002b      	movs	r3, r5
 8007530:	0022      	movs	r2, r4
 8007532:	f7fa fced 	bl	8001f10 <__aeabi_dmul>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	3ff00000 	.word	0x3ff00000

0800753c <_strtod_l>:
 800753c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753e:	b0a1      	sub	sp, #132	; 0x84
 8007540:	9219      	str	r2, [sp, #100]	; 0x64
 8007542:	2200      	movs	r2, #0
 8007544:	2600      	movs	r6, #0
 8007546:	2700      	movs	r7, #0
 8007548:	9004      	str	r0, [sp, #16]
 800754a:	9107      	str	r1, [sp, #28]
 800754c:	921c      	str	r2, [sp, #112]	; 0x70
 800754e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007550:	780a      	ldrb	r2, [r1, #0]
 8007552:	2a2b      	cmp	r2, #43	; 0x2b
 8007554:	d055      	beq.n	8007602 <_strtod_l+0xc6>
 8007556:	d841      	bhi.n	80075dc <_strtod_l+0xa0>
 8007558:	2a0d      	cmp	r2, #13
 800755a:	d83b      	bhi.n	80075d4 <_strtod_l+0x98>
 800755c:	2a08      	cmp	r2, #8
 800755e:	d83b      	bhi.n	80075d8 <_strtod_l+0x9c>
 8007560:	2a00      	cmp	r2, #0
 8007562:	d044      	beq.n	80075ee <_strtod_l+0xb2>
 8007564:	2200      	movs	r2, #0
 8007566:	920f      	str	r2, [sp, #60]	; 0x3c
 8007568:	2100      	movs	r1, #0
 800756a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800756c:	9109      	str	r1, [sp, #36]	; 0x24
 800756e:	782a      	ldrb	r2, [r5, #0]
 8007570:	2a30      	cmp	r2, #48	; 0x30
 8007572:	d000      	beq.n	8007576 <_strtod_l+0x3a>
 8007574:	e085      	b.n	8007682 <_strtod_l+0x146>
 8007576:	786a      	ldrb	r2, [r5, #1]
 8007578:	3120      	adds	r1, #32
 800757a:	438a      	bics	r2, r1
 800757c:	2a58      	cmp	r2, #88	; 0x58
 800757e:	d000      	beq.n	8007582 <_strtod_l+0x46>
 8007580:	e075      	b.n	800766e <_strtod_l+0x132>
 8007582:	9302      	str	r3, [sp, #8]
 8007584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007586:	4a97      	ldr	r2, [pc, #604]	; (80077e4 <_strtod_l+0x2a8>)
 8007588:	9301      	str	r3, [sp, #4]
 800758a:	ab1c      	add	r3, sp, #112	; 0x70
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	9804      	ldr	r0, [sp, #16]
 8007590:	ab1d      	add	r3, sp, #116	; 0x74
 8007592:	a91b      	add	r1, sp, #108	; 0x6c
 8007594:	f002 ff44 	bl	800a420 <__gethex>
 8007598:	230f      	movs	r3, #15
 800759a:	0002      	movs	r2, r0
 800759c:	401a      	ands	r2, r3
 800759e:	0004      	movs	r4, r0
 80075a0:	9205      	str	r2, [sp, #20]
 80075a2:	4218      	tst	r0, r3
 80075a4:	d005      	beq.n	80075b2 <_strtod_l+0x76>
 80075a6:	2a06      	cmp	r2, #6
 80075a8:	d12d      	bne.n	8007606 <_strtod_l+0xca>
 80075aa:	1c6b      	adds	r3, r5, #1
 80075ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80075ae:	2300      	movs	r3, #0
 80075b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80075b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <_strtod_l+0x82>
 80075b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01b      	beq.n	80075fc <_strtod_l+0xc0>
 80075c4:	2380      	movs	r3, #128	; 0x80
 80075c6:	0032      	movs	r2, r6
 80075c8:	061b      	lsls	r3, r3, #24
 80075ca:	18fb      	adds	r3, r7, r3
 80075cc:	0010      	movs	r0, r2
 80075ce:	0019      	movs	r1, r3
 80075d0:	b021      	add	sp, #132	; 0x84
 80075d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d4:	2a20      	cmp	r2, #32
 80075d6:	d1c5      	bne.n	8007564 <_strtod_l+0x28>
 80075d8:	3101      	adds	r1, #1
 80075da:	e7b8      	b.n	800754e <_strtod_l+0x12>
 80075dc:	2a2d      	cmp	r2, #45	; 0x2d
 80075de:	d1c1      	bne.n	8007564 <_strtod_l+0x28>
 80075e0:	3a2c      	subs	r2, #44	; 0x2c
 80075e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80075e4:	1c4a      	adds	r2, r1, #1
 80075e6:	921b      	str	r2, [sp, #108]	; 0x6c
 80075e8:	784a      	ldrb	r2, [r1, #1]
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	d1bc      	bne.n	8007568 <_strtod_l+0x2c>
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80075f2:	2300      	movs	r3, #0
 80075f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80075f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1dd      	bne.n	80075b8 <_strtod_l+0x7c>
 80075fc:	0032      	movs	r2, r6
 80075fe:	003b      	movs	r3, r7
 8007600:	e7e4      	b.n	80075cc <_strtod_l+0x90>
 8007602:	2200      	movs	r2, #0
 8007604:	e7ed      	b.n	80075e2 <_strtod_l+0xa6>
 8007606:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007608:	2a00      	cmp	r2, #0
 800760a:	d007      	beq.n	800761c <_strtod_l+0xe0>
 800760c:	2135      	movs	r1, #53	; 0x35
 800760e:	a81e      	add	r0, sp, #120	; 0x78
 8007610:	f003 ff3f 	bl	800b492 <__copybits>
 8007614:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007616:	9804      	ldr	r0, [sp, #16]
 8007618:	f003 fb08 	bl	800ac2c <_Bfree>
 800761c:	9805      	ldr	r0, [sp, #20]
 800761e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007620:	3801      	subs	r0, #1
 8007622:	2804      	cmp	r0, #4
 8007624:	d806      	bhi.n	8007634 <_strtod_l+0xf8>
 8007626:	f7f8 fd77 	bl	8000118 <__gnu_thumb1_case_uqi>
 800762a:	0312      	.short	0x0312
 800762c:	1e1c      	.short	0x1e1c
 800762e:	12          	.byte	0x12
 800762f:	00          	.byte	0x00
 8007630:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007632:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007634:	05e4      	lsls	r4, r4, #23
 8007636:	d502      	bpl.n	800763e <_strtod_l+0x102>
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	061b      	lsls	r3, r3, #24
 800763c:	431f      	orrs	r7, r3
 800763e:	4b6a      	ldr	r3, [pc, #424]	; (80077e8 <_strtod_l+0x2ac>)
 8007640:	423b      	tst	r3, r7
 8007642:	d1b6      	bne.n	80075b2 <_strtod_l+0x76>
 8007644:	f001 ff4e 	bl	80094e4 <__errno>
 8007648:	2322      	movs	r3, #34	; 0x22
 800764a:	6003      	str	r3, [r0, #0]
 800764c:	e7b1      	b.n	80075b2 <_strtod_l+0x76>
 800764e:	4967      	ldr	r1, [pc, #412]	; (80077ec <_strtod_l+0x2b0>)
 8007650:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007652:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007654:	400a      	ands	r2, r1
 8007656:	4966      	ldr	r1, [pc, #408]	; (80077f0 <_strtod_l+0x2b4>)
 8007658:	185b      	adds	r3, r3, r1
 800765a:	051b      	lsls	r3, r3, #20
 800765c:	431a      	orrs	r2, r3
 800765e:	0017      	movs	r7, r2
 8007660:	e7e8      	b.n	8007634 <_strtod_l+0xf8>
 8007662:	4f61      	ldr	r7, [pc, #388]	; (80077e8 <_strtod_l+0x2ac>)
 8007664:	e7e6      	b.n	8007634 <_strtod_l+0xf8>
 8007666:	2601      	movs	r6, #1
 8007668:	4f62      	ldr	r7, [pc, #392]	; (80077f4 <_strtod_l+0x2b8>)
 800766a:	4276      	negs	r6, r6
 800766c:	e7e2      	b.n	8007634 <_strtod_l+0xf8>
 800766e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	921b      	str	r2, [sp, #108]	; 0x6c
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b30      	cmp	r3, #48	; 0x30
 8007678:	d0f9      	beq.n	800766e <_strtod_l+0x132>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d099      	beq.n	80075b2 <_strtod_l+0x76>
 800767e:	2301      	movs	r3, #1
 8007680:	9309      	str	r3, [sp, #36]	; 0x24
 8007682:	2500      	movs	r5, #0
 8007684:	220a      	movs	r2, #10
 8007686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007688:	950d      	str	r5, [sp, #52]	; 0x34
 800768a:	9310      	str	r3, [sp, #64]	; 0x40
 800768c:	9508      	str	r5, [sp, #32]
 800768e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007690:	7804      	ldrb	r4, [r0, #0]
 8007692:	0023      	movs	r3, r4
 8007694:	3b30      	subs	r3, #48	; 0x30
 8007696:	b2d9      	uxtb	r1, r3
 8007698:	2909      	cmp	r1, #9
 800769a:	d927      	bls.n	80076ec <_strtod_l+0x1b0>
 800769c:	2201      	movs	r2, #1
 800769e:	4956      	ldr	r1, [pc, #344]	; (80077f8 <_strtod_l+0x2bc>)
 80076a0:	f001 febc 	bl	800941c <strncmp>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d031      	beq.n	800770c <_strtod_l+0x1d0>
 80076a8:	2000      	movs	r0, #0
 80076aa:	0023      	movs	r3, r4
 80076ac:	4684      	mov	ip, r0
 80076ae:	9a08      	ldr	r2, [sp, #32]
 80076b0:	900c      	str	r0, [sp, #48]	; 0x30
 80076b2:	9205      	str	r2, [sp, #20]
 80076b4:	2220      	movs	r2, #32
 80076b6:	0019      	movs	r1, r3
 80076b8:	4391      	bics	r1, r2
 80076ba:	000a      	movs	r2, r1
 80076bc:	2100      	movs	r1, #0
 80076be:	9106      	str	r1, [sp, #24]
 80076c0:	2a45      	cmp	r2, #69	; 0x45
 80076c2:	d000      	beq.n	80076c6 <_strtod_l+0x18a>
 80076c4:	e0c2      	b.n	800784c <_strtod_l+0x310>
 80076c6:	9b05      	ldr	r3, [sp, #20]
 80076c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ca:	4303      	orrs	r3, r0
 80076cc:	4313      	orrs	r3, r2
 80076ce:	428b      	cmp	r3, r1
 80076d0:	d08d      	beq.n	80075ee <_strtod_l+0xb2>
 80076d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076d4:	9307      	str	r3, [sp, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80076da:	9b07      	ldr	r3, [sp, #28]
 80076dc:	785b      	ldrb	r3, [r3, #1]
 80076de:	2b2b      	cmp	r3, #43	; 0x2b
 80076e0:	d071      	beq.n	80077c6 <_strtod_l+0x28a>
 80076e2:	000c      	movs	r4, r1
 80076e4:	2b2d      	cmp	r3, #45	; 0x2d
 80076e6:	d174      	bne.n	80077d2 <_strtod_l+0x296>
 80076e8:	2401      	movs	r4, #1
 80076ea:	e06d      	b.n	80077c8 <_strtod_l+0x28c>
 80076ec:	9908      	ldr	r1, [sp, #32]
 80076ee:	2908      	cmp	r1, #8
 80076f0:	dc09      	bgt.n	8007706 <_strtod_l+0x1ca>
 80076f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076f4:	4351      	muls	r1, r2
 80076f6:	185b      	adds	r3, r3, r1
 80076f8:	930d      	str	r3, [sp, #52]	; 0x34
 80076fa:	9b08      	ldr	r3, [sp, #32]
 80076fc:	3001      	adds	r0, #1
 80076fe:	3301      	adds	r3, #1
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	901b      	str	r0, [sp, #108]	; 0x6c
 8007704:	e7c3      	b.n	800768e <_strtod_l+0x152>
 8007706:	4355      	muls	r5, r2
 8007708:	195d      	adds	r5, r3, r5
 800770a:	e7f6      	b.n	80076fa <_strtod_l+0x1be>
 800770c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	921b      	str	r2, [sp, #108]	; 0x6c
 8007712:	9a08      	ldr	r2, [sp, #32]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2a00      	cmp	r2, #0
 8007718:	d03a      	beq.n	8007790 <_strtod_l+0x254>
 800771a:	900c      	str	r0, [sp, #48]	; 0x30
 800771c:	9205      	str	r2, [sp, #20]
 800771e:	001a      	movs	r2, r3
 8007720:	3a30      	subs	r2, #48	; 0x30
 8007722:	2a09      	cmp	r2, #9
 8007724:	d912      	bls.n	800774c <_strtod_l+0x210>
 8007726:	2201      	movs	r2, #1
 8007728:	4694      	mov	ip, r2
 800772a:	e7c3      	b.n	80076b4 <_strtod_l+0x178>
 800772c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800772e:	3001      	adds	r0, #1
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	921b      	str	r2, [sp, #108]	; 0x6c
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b30      	cmp	r3, #48	; 0x30
 8007738:	d0f8      	beq.n	800772c <_strtod_l+0x1f0>
 800773a:	001a      	movs	r2, r3
 800773c:	3a31      	subs	r2, #49	; 0x31
 800773e:	2a08      	cmp	r2, #8
 8007740:	d83c      	bhi.n	80077bc <_strtod_l+0x280>
 8007742:	900c      	str	r0, [sp, #48]	; 0x30
 8007744:	2000      	movs	r0, #0
 8007746:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007748:	9005      	str	r0, [sp, #20]
 800774a:	9210      	str	r2, [sp, #64]	; 0x40
 800774c:	001a      	movs	r2, r3
 800774e:	1c41      	adds	r1, r0, #1
 8007750:	3a30      	subs	r2, #48	; 0x30
 8007752:	2b30      	cmp	r3, #48	; 0x30
 8007754:	d016      	beq.n	8007784 <_strtod_l+0x248>
 8007756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007758:	185b      	adds	r3, r3, r1
 800775a:	930c      	str	r3, [sp, #48]	; 0x30
 800775c:	9b05      	ldr	r3, [sp, #20]
 800775e:	210a      	movs	r1, #10
 8007760:	469c      	mov	ip, r3
 8007762:	4484      	add	ip, r0
 8007764:	4563      	cmp	r3, ip
 8007766:	d115      	bne.n	8007794 <_strtod_l+0x258>
 8007768:	9905      	ldr	r1, [sp, #20]
 800776a:	9b05      	ldr	r3, [sp, #20]
 800776c:	3101      	adds	r1, #1
 800776e:	1809      	adds	r1, r1, r0
 8007770:	181b      	adds	r3, r3, r0
 8007772:	9105      	str	r1, [sp, #20]
 8007774:	2b08      	cmp	r3, #8
 8007776:	dc19      	bgt.n	80077ac <_strtod_l+0x270>
 8007778:	230a      	movs	r3, #10
 800777a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800777c:	434b      	muls	r3, r1
 800777e:	2100      	movs	r1, #0
 8007780:	18d3      	adds	r3, r2, r3
 8007782:	930d      	str	r3, [sp, #52]	; 0x34
 8007784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007786:	0008      	movs	r0, r1
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	921b      	str	r2, [sp, #108]	; 0x6c
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	e7c6      	b.n	800771e <_strtod_l+0x1e2>
 8007790:	9808      	ldr	r0, [sp, #32]
 8007792:	e7d0      	b.n	8007736 <_strtod_l+0x1fa>
 8007794:	1c5c      	adds	r4, r3, #1
 8007796:	2b08      	cmp	r3, #8
 8007798:	dc04      	bgt.n	80077a4 <_strtod_l+0x268>
 800779a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800779c:	434b      	muls	r3, r1
 800779e:	930d      	str	r3, [sp, #52]	; 0x34
 80077a0:	0023      	movs	r3, r4
 80077a2:	e7df      	b.n	8007764 <_strtod_l+0x228>
 80077a4:	2c10      	cmp	r4, #16
 80077a6:	dcfb      	bgt.n	80077a0 <_strtod_l+0x264>
 80077a8:	434d      	muls	r5, r1
 80077aa:	e7f9      	b.n	80077a0 <_strtod_l+0x264>
 80077ac:	9b05      	ldr	r3, [sp, #20]
 80077ae:	2100      	movs	r1, #0
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	dce7      	bgt.n	8007784 <_strtod_l+0x248>
 80077b4:	230a      	movs	r3, #10
 80077b6:	435d      	muls	r5, r3
 80077b8:	1955      	adds	r5, r2, r5
 80077ba:	e7e3      	b.n	8007784 <_strtod_l+0x248>
 80077bc:	2200      	movs	r2, #0
 80077be:	920c      	str	r2, [sp, #48]	; 0x30
 80077c0:	9205      	str	r2, [sp, #20]
 80077c2:	3201      	adds	r2, #1
 80077c4:	e7b0      	b.n	8007728 <_strtod_l+0x1ec>
 80077c6:	2400      	movs	r4, #0
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	3302      	adds	r3, #2
 80077cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	789b      	ldrb	r3, [r3, #2]
 80077d2:	001a      	movs	r2, r3
 80077d4:	3a30      	subs	r2, #48	; 0x30
 80077d6:	2a09      	cmp	r2, #9
 80077d8:	d914      	bls.n	8007804 <_strtod_l+0x2c8>
 80077da:	9a07      	ldr	r2, [sp, #28]
 80077dc:	921b      	str	r2, [sp, #108]	; 0x6c
 80077de:	2200      	movs	r2, #0
 80077e0:	e033      	b.n	800784a <_strtod_l+0x30e>
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	0800c108 	.word	0x0800c108
 80077e8:	7ff00000 	.word	0x7ff00000
 80077ec:	ffefffff 	.word	0xffefffff
 80077f0:	00000433 	.word	0x00000433
 80077f4:	7fffffff 	.word	0x7fffffff
 80077f8:	0800c104 	.word	0x0800c104
 80077fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	921b      	str	r2, [sp, #108]	; 0x6c
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b30      	cmp	r3, #48	; 0x30
 8007806:	d0f9      	beq.n	80077fc <_strtod_l+0x2c0>
 8007808:	2200      	movs	r2, #0
 800780a:	9206      	str	r2, [sp, #24]
 800780c:	001a      	movs	r2, r3
 800780e:	3a31      	subs	r2, #49	; 0x31
 8007810:	2a08      	cmp	r2, #8
 8007812:	d81b      	bhi.n	800784c <_strtod_l+0x310>
 8007814:	3b30      	subs	r3, #48	; 0x30
 8007816:	930e      	str	r3, [sp, #56]	; 0x38
 8007818:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800781a:	9306      	str	r3, [sp, #24]
 800781c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800781e:	1c59      	adds	r1, r3, #1
 8007820:	911b      	str	r1, [sp, #108]	; 0x6c
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	001a      	movs	r2, r3
 8007826:	3a30      	subs	r2, #48	; 0x30
 8007828:	2a09      	cmp	r2, #9
 800782a:	d93a      	bls.n	80078a2 <_strtod_l+0x366>
 800782c:	9a06      	ldr	r2, [sp, #24]
 800782e:	1a8a      	subs	r2, r1, r2
 8007830:	49b2      	ldr	r1, [pc, #712]	; (8007afc <_strtod_l+0x5c0>)
 8007832:	9106      	str	r1, [sp, #24]
 8007834:	2a08      	cmp	r2, #8
 8007836:	dc04      	bgt.n	8007842 <_strtod_l+0x306>
 8007838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800783a:	9206      	str	r2, [sp, #24]
 800783c:	428a      	cmp	r2, r1
 800783e:	dd00      	ble.n	8007842 <_strtod_l+0x306>
 8007840:	9106      	str	r1, [sp, #24]
 8007842:	2c00      	cmp	r4, #0
 8007844:	d002      	beq.n	800784c <_strtod_l+0x310>
 8007846:	9a06      	ldr	r2, [sp, #24]
 8007848:	4252      	negs	r2, r2
 800784a:	9206      	str	r2, [sp, #24]
 800784c:	9a05      	ldr	r2, [sp, #20]
 800784e:	2a00      	cmp	r2, #0
 8007850:	d14d      	bne.n	80078ee <_strtod_l+0x3b2>
 8007852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007854:	4310      	orrs	r0, r2
 8007856:	d000      	beq.n	800785a <_strtod_l+0x31e>
 8007858:	e6ab      	b.n	80075b2 <_strtod_l+0x76>
 800785a:	4662      	mov	r2, ip
 800785c:	2a00      	cmp	r2, #0
 800785e:	d000      	beq.n	8007862 <_strtod_l+0x326>
 8007860:	e6c5      	b.n	80075ee <_strtod_l+0xb2>
 8007862:	2b69      	cmp	r3, #105	; 0x69
 8007864:	d027      	beq.n	80078b6 <_strtod_l+0x37a>
 8007866:	dc23      	bgt.n	80078b0 <_strtod_l+0x374>
 8007868:	2b49      	cmp	r3, #73	; 0x49
 800786a:	d024      	beq.n	80078b6 <_strtod_l+0x37a>
 800786c:	2b4e      	cmp	r3, #78	; 0x4e
 800786e:	d000      	beq.n	8007872 <_strtod_l+0x336>
 8007870:	e6bd      	b.n	80075ee <_strtod_l+0xb2>
 8007872:	49a3      	ldr	r1, [pc, #652]	; (8007b00 <_strtod_l+0x5c4>)
 8007874:	a81b      	add	r0, sp, #108	; 0x6c
 8007876:	f003 f809 	bl	800a88c <__match>
 800787a:	2800      	cmp	r0, #0
 800787c:	d100      	bne.n	8007880 <_strtod_l+0x344>
 800787e:	e6b6      	b.n	80075ee <_strtod_l+0xb2>
 8007880:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b28      	cmp	r3, #40	; 0x28
 8007886:	d12c      	bne.n	80078e2 <_strtod_l+0x3a6>
 8007888:	499e      	ldr	r1, [pc, #632]	; (8007b04 <_strtod_l+0x5c8>)
 800788a:	aa1e      	add	r2, sp, #120	; 0x78
 800788c:	a81b      	add	r0, sp, #108	; 0x6c
 800788e:	f003 f811 	bl	800a8b4 <__hexnan>
 8007892:	2805      	cmp	r0, #5
 8007894:	d125      	bne.n	80078e2 <_strtod_l+0x3a6>
 8007896:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007898:	4a9b      	ldr	r2, [pc, #620]	; (8007b08 <_strtod_l+0x5cc>)
 800789a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800789c:	431a      	orrs	r2, r3
 800789e:	0017      	movs	r7, r2
 80078a0:	e687      	b.n	80075b2 <_strtod_l+0x76>
 80078a2:	220a      	movs	r2, #10
 80078a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80078a6:	434a      	muls	r2, r1
 80078a8:	18d2      	adds	r2, r2, r3
 80078aa:	3a30      	subs	r2, #48	; 0x30
 80078ac:	920e      	str	r2, [sp, #56]	; 0x38
 80078ae:	e7b5      	b.n	800781c <_strtod_l+0x2e0>
 80078b0:	2b6e      	cmp	r3, #110	; 0x6e
 80078b2:	d0de      	beq.n	8007872 <_strtod_l+0x336>
 80078b4:	e69b      	b.n	80075ee <_strtod_l+0xb2>
 80078b6:	4995      	ldr	r1, [pc, #596]	; (8007b0c <_strtod_l+0x5d0>)
 80078b8:	a81b      	add	r0, sp, #108	; 0x6c
 80078ba:	f002 ffe7 	bl	800a88c <__match>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d100      	bne.n	80078c4 <_strtod_l+0x388>
 80078c2:	e694      	b.n	80075ee <_strtod_l+0xb2>
 80078c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078c6:	4992      	ldr	r1, [pc, #584]	; (8007b10 <_strtod_l+0x5d4>)
 80078c8:	3b01      	subs	r3, #1
 80078ca:	a81b      	add	r0, sp, #108	; 0x6c
 80078cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80078ce:	f002 ffdd 	bl	800a88c <__match>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d102      	bne.n	80078dc <_strtod_l+0x3a0>
 80078d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078d8:	3301      	adds	r3, #1
 80078da:	931b      	str	r3, [sp, #108]	; 0x6c
 80078dc:	2600      	movs	r6, #0
 80078de:	4f8a      	ldr	r7, [pc, #552]	; (8007b08 <_strtod_l+0x5cc>)
 80078e0:	e667      	b.n	80075b2 <_strtod_l+0x76>
 80078e2:	488c      	ldr	r0, [pc, #560]	; (8007b14 <_strtod_l+0x5d8>)
 80078e4:	f001 fe40 	bl	8009568 <nan>
 80078e8:	0006      	movs	r6, r0
 80078ea:	000f      	movs	r7, r1
 80078ec:	e661      	b.n	80075b2 <_strtod_l+0x76>
 80078ee:	9b06      	ldr	r3, [sp, #24]
 80078f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078f2:	1a9b      	subs	r3, r3, r2
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	9b08      	ldr	r3, [sp, #32]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <_strtod_l+0x3c4>
 80078fc:	9b05      	ldr	r3, [sp, #20]
 80078fe:	9308      	str	r3, [sp, #32]
 8007900:	9c05      	ldr	r4, [sp, #20]
 8007902:	2c10      	cmp	r4, #16
 8007904:	dd00      	ble.n	8007908 <_strtod_l+0x3cc>
 8007906:	2410      	movs	r4, #16
 8007908:	980d      	ldr	r0, [sp, #52]	; 0x34
 800790a:	f7fb f9c9 	bl	8002ca0 <__aeabi_ui2d>
 800790e:	9b05      	ldr	r3, [sp, #20]
 8007910:	0006      	movs	r6, r0
 8007912:	000f      	movs	r7, r1
 8007914:	2b09      	cmp	r3, #9
 8007916:	dd15      	ble.n	8007944 <_strtod_l+0x408>
 8007918:	0022      	movs	r2, r4
 800791a:	4b7f      	ldr	r3, [pc, #508]	; (8007b18 <_strtod_l+0x5dc>)
 800791c:	3a09      	subs	r2, #9
 800791e:	00d2      	lsls	r2, r2, #3
 8007920:	189b      	adds	r3, r3, r2
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f7fa faf3 	bl	8001f10 <__aeabi_dmul>
 800792a:	0006      	movs	r6, r0
 800792c:	0028      	movs	r0, r5
 800792e:	000f      	movs	r7, r1
 8007930:	f7fb f9b6 	bl	8002ca0 <__aeabi_ui2d>
 8007934:	0002      	movs	r2, r0
 8007936:	000b      	movs	r3, r1
 8007938:	0030      	movs	r0, r6
 800793a:	0039      	movs	r1, r7
 800793c:	f7f9 fb8e 	bl	800105c <__aeabi_dadd>
 8007940:	0006      	movs	r6, r0
 8007942:	000f      	movs	r7, r1
 8007944:	9b05      	ldr	r3, [sp, #20]
 8007946:	2b0f      	cmp	r3, #15
 8007948:	dc39      	bgt.n	80079be <_strtod_l+0x482>
 800794a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d100      	bne.n	8007952 <_strtod_l+0x416>
 8007950:	e62f      	b.n	80075b2 <_strtod_l+0x76>
 8007952:	dd24      	ble.n	800799e <_strtod_l+0x462>
 8007954:	2b16      	cmp	r3, #22
 8007956:	dc09      	bgt.n	800796c <_strtod_l+0x430>
 8007958:	496f      	ldr	r1, [pc, #444]	; (8007b18 <_strtod_l+0x5dc>)
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	18c9      	adds	r1, r1, r3
 800795e:	0032      	movs	r2, r6
 8007960:	6808      	ldr	r0, [r1, #0]
 8007962:	6849      	ldr	r1, [r1, #4]
 8007964:	003b      	movs	r3, r7
 8007966:	f7fa fad3 	bl	8001f10 <__aeabi_dmul>
 800796a:	e7bd      	b.n	80078e8 <_strtod_l+0x3ac>
 800796c:	2325      	movs	r3, #37	; 0x25
 800796e:	9a05      	ldr	r2, [sp, #20]
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007974:	4293      	cmp	r3, r2
 8007976:	db22      	blt.n	80079be <_strtod_l+0x482>
 8007978:	240f      	movs	r4, #15
 800797a:	9b05      	ldr	r3, [sp, #20]
 800797c:	4d66      	ldr	r5, [pc, #408]	; (8007b18 <_strtod_l+0x5dc>)
 800797e:	1ae4      	subs	r4, r4, r3
 8007980:	00e1      	lsls	r1, r4, #3
 8007982:	1869      	adds	r1, r5, r1
 8007984:	0032      	movs	r2, r6
 8007986:	6808      	ldr	r0, [r1, #0]
 8007988:	6849      	ldr	r1, [r1, #4]
 800798a:	003b      	movs	r3, r7
 800798c:	f7fa fac0 	bl	8001f10 <__aeabi_dmul>
 8007990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007992:	1b1c      	subs	r4, r3, r4
 8007994:	00e4      	lsls	r4, r4, #3
 8007996:	192d      	adds	r5, r5, r4
 8007998:	682a      	ldr	r2, [r5, #0]
 800799a:	686b      	ldr	r3, [r5, #4]
 800799c:	e7e3      	b.n	8007966 <_strtod_l+0x42a>
 800799e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a0:	3316      	adds	r3, #22
 80079a2:	db0c      	blt.n	80079be <_strtod_l+0x482>
 80079a4:	9906      	ldr	r1, [sp, #24]
 80079a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079a8:	4b5b      	ldr	r3, [pc, #364]	; (8007b18 <_strtod_l+0x5dc>)
 80079aa:	1a52      	subs	r2, r2, r1
 80079ac:	00d2      	lsls	r2, r2, #3
 80079ae:	189b      	adds	r3, r3, r2
 80079b0:	0030      	movs	r0, r6
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	0039      	movs	r1, r7
 80079b8:	f7f9 feb0 	bl	800171c <__aeabi_ddiv>
 80079bc:	e794      	b.n	80078e8 <_strtod_l+0x3ac>
 80079be:	9b05      	ldr	r3, [sp, #20]
 80079c0:	1b1c      	subs	r4, r3, r4
 80079c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c4:	18e4      	adds	r4, r4, r3
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	dd72      	ble.n	8007ab0 <_strtod_l+0x574>
 80079ca:	220f      	movs	r2, #15
 80079cc:	0023      	movs	r3, r4
 80079ce:	4013      	ands	r3, r2
 80079d0:	4214      	tst	r4, r2
 80079d2:	d00a      	beq.n	80079ea <_strtod_l+0x4ae>
 80079d4:	4950      	ldr	r1, [pc, #320]	; (8007b18 <_strtod_l+0x5dc>)
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	18c9      	adds	r1, r1, r3
 80079da:	0032      	movs	r2, r6
 80079dc:	6808      	ldr	r0, [r1, #0]
 80079de:	6849      	ldr	r1, [r1, #4]
 80079e0:	003b      	movs	r3, r7
 80079e2:	f7fa fa95 	bl	8001f10 <__aeabi_dmul>
 80079e6:	0006      	movs	r6, r0
 80079e8:	000f      	movs	r7, r1
 80079ea:	230f      	movs	r3, #15
 80079ec:	439c      	bics	r4, r3
 80079ee:	d04a      	beq.n	8007a86 <_strtod_l+0x54a>
 80079f0:	3326      	adds	r3, #38	; 0x26
 80079f2:	33ff      	adds	r3, #255	; 0xff
 80079f4:	429c      	cmp	r4, r3
 80079f6:	dd22      	ble.n	8007a3e <_strtod_l+0x502>
 80079f8:	2300      	movs	r3, #0
 80079fa:	9305      	str	r3, [sp, #20]
 80079fc:	9306      	str	r3, [sp, #24]
 80079fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007a00:	9308      	str	r3, [sp, #32]
 8007a02:	2322      	movs	r3, #34	; 0x22
 8007a04:	2600      	movs	r6, #0
 8007a06:	9a04      	ldr	r2, [sp, #16]
 8007a08:	4f3f      	ldr	r7, [pc, #252]	; (8007b08 <_strtod_l+0x5cc>)
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a0e:	42b3      	cmp	r3, r6
 8007a10:	d100      	bne.n	8007a14 <_strtod_l+0x4d8>
 8007a12:	e5ce      	b.n	80075b2 <_strtod_l+0x76>
 8007a14:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a16:	9804      	ldr	r0, [sp, #16]
 8007a18:	f003 f908 	bl	800ac2c <_Bfree>
 8007a1c:	9908      	ldr	r1, [sp, #32]
 8007a1e:	9804      	ldr	r0, [sp, #16]
 8007a20:	f003 f904 	bl	800ac2c <_Bfree>
 8007a24:	9906      	ldr	r1, [sp, #24]
 8007a26:	9804      	ldr	r0, [sp, #16]
 8007a28:	f003 f900 	bl	800ac2c <_Bfree>
 8007a2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a2e:	9804      	ldr	r0, [sp, #16]
 8007a30:	f003 f8fc 	bl	800ac2c <_Bfree>
 8007a34:	9905      	ldr	r1, [sp, #20]
 8007a36:	9804      	ldr	r0, [sp, #16]
 8007a38:	f003 f8f8 	bl	800ac2c <_Bfree>
 8007a3c:	e5b9      	b.n	80075b2 <_strtod_l+0x76>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	0030      	movs	r0, r6
 8007a42:	0039      	movs	r1, r7
 8007a44:	4d35      	ldr	r5, [pc, #212]	; (8007b1c <_strtod_l+0x5e0>)
 8007a46:	1124      	asrs	r4, r4, #4
 8007a48:	9307      	str	r3, [sp, #28]
 8007a4a:	2c01      	cmp	r4, #1
 8007a4c:	dc1e      	bgt.n	8007a8c <_strtod_l+0x550>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <_strtod_l+0x51a>
 8007a52:	0006      	movs	r6, r0
 8007a54:	000f      	movs	r7, r1
 8007a56:	4b32      	ldr	r3, [pc, #200]	; (8007b20 <_strtod_l+0x5e4>)
 8007a58:	9a07      	ldr	r2, [sp, #28]
 8007a5a:	18ff      	adds	r7, r7, r3
 8007a5c:	4b2f      	ldr	r3, [pc, #188]	; (8007b1c <_strtod_l+0x5e0>)
 8007a5e:	00d2      	lsls	r2, r2, #3
 8007a60:	189d      	adds	r5, r3, r2
 8007a62:	6828      	ldr	r0, [r5, #0]
 8007a64:	6869      	ldr	r1, [r5, #4]
 8007a66:	0032      	movs	r2, r6
 8007a68:	003b      	movs	r3, r7
 8007a6a:	f7fa fa51 	bl	8001f10 <__aeabi_dmul>
 8007a6e:	4b26      	ldr	r3, [pc, #152]	; (8007b08 <_strtod_l+0x5cc>)
 8007a70:	4a2c      	ldr	r2, [pc, #176]	; (8007b24 <_strtod_l+0x5e8>)
 8007a72:	0006      	movs	r6, r0
 8007a74:	400b      	ands	r3, r1
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d8be      	bhi.n	80079f8 <_strtod_l+0x4bc>
 8007a7a:	4a2b      	ldr	r2, [pc, #172]	; (8007b28 <_strtod_l+0x5ec>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d913      	bls.n	8007aa8 <_strtod_l+0x56c>
 8007a80:	2601      	movs	r6, #1
 8007a82:	4f2a      	ldr	r7, [pc, #168]	; (8007b2c <_strtod_l+0x5f0>)
 8007a84:	4276      	negs	r6, r6
 8007a86:	2300      	movs	r3, #0
 8007a88:	9307      	str	r3, [sp, #28]
 8007a8a:	e088      	b.n	8007b9e <_strtod_l+0x662>
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	4214      	tst	r4, r2
 8007a90:	d004      	beq.n	8007a9c <_strtod_l+0x560>
 8007a92:	682a      	ldr	r2, [r5, #0]
 8007a94:	686b      	ldr	r3, [r5, #4]
 8007a96:	f7fa fa3b 	bl	8001f10 <__aeabi_dmul>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	9a07      	ldr	r2, [sp, #28]
 8007a9e:	1064      	asrs	r4, r4, #1
 8007aa0:	3201      	adds	r2, #1
 8007aa2:	9207      	str	r2, [sp, #28]
 8007aa4:	3508      	adds	r5, #8
 8007aa6:	e7d0      	b.n	8007a4a <_strtod_l+0x50e>
 8007aa8:	23d4      	movs	r3, #212	; 0xd4
 8007aaa:	049b      	lsls	r3, r3, #18
 8007aac:	18cf      	adds	r7, r1, r3
 8007aae:	e7ea      	b.n	8007a86 <_strtod_l+0x54a>
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	d0e8      	beq.n	8007a86 <_strtod_l+0x54a>
 8007ab4:	4264      	negs	r4, r4
 8007ab6:	230f      	movs	r3, #15
 8007ab8:	0022      	movs	r2, r4
 8007aba:	401a      	ands	r2, r3
 8007abc:	421c      	tst	r4, r3
 8007abe:	d00a      	beq.n	8007ad6 <_strtod_l+0x59a>
 8007ac0:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <_strtod_l+0x5dc>)
 8007ac2:	00d2      	lsls	r2, r2, #3
 8007ac4:	189b      	adds	r3, r3, r2
 8007ac6:	0030      	movs	r0, r6
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	0039      	movs	r1, r7
 8007ace:	f7f9 fe25 	bl	800171c <__aeabi_ddiv>
 8007ad2:	0006      	movs	r6, r0
 8007ad4:	000f      	movs	r7, r1
 8007ad6:	1124      	asrs	r4, r4, #4
 8007ad8:	d0d5      	beq.n	8007a86 <_strtod_l+0x54a>
 8007ada:	2c1f      	cmp	r4, #31
 8007adc:	dd28      	ble.n	8007b30 <_strtod_l+0x5f4>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9305      	str	r3, [sp, #20]
 8007ae2:	9306      	str	r3, [sp, #24]
 8007ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ae6:	9308      	str	r3, [sp, #32]
 8007ae8:	2322      	movs	r3, #34	; 0x22
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	2600      	movs	r6, #0
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007af2:	2700      	movs	r7, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d18d      	bne.n	8007a14 <_strtod_l+0x4d8>
 8007af8:	e55b      	b.n	80075b2 <_strtod_l+0x76>
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	00004e1f 	.word	0x00004e1f
 8007b00:	0800c266 	.word	0x0800c266
 8007b04:	0800c11c 	.word	0x0800c11c
 8007b08:	7ff00000 	.word	0x7ff00000
 8007b0c:	0800c25e 	.word	0x0800c25e
 8007b10:	0800c29d 	.word	0x0800c29d
 8007b14:	0800c528 	.word	0x0800c528
 8007b18:	0800c408 	.word	0x0800c408
 8007b1c:	0800c3e0 	.word	0x0800c3e0
 8007b20:	fcb00000 	.word	0xfcb00000
 8007b24:	7ca00000 	.word	0x7ca00000
 8007b28:	7c900000 	.word	0x7c900000
 8007b2c:	7fefffff 	.word	0x7fefffff
 8007b30:	2310      	movs	r3, #16
 8007b32:	0022      	movs	r2, r4
 8007b34:	401a      	ands	r2, r3
 8007b36:	9207      	str	r2, [sp, #28]
 8007b38:	421c      	tst	r4, r3
 8007b3a:	d001      	beq.n	8007b40 <_strtod_l+0x604>
 8007b3c:	335a      	adds	r3, #90	; 0x5a
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	0030      	movs	r0, r6
 8007b42:	0039      	movs	r1, r7
 8007b44:	2300      	movs	r3, #0
 8007b46:	4dc4      	ldr	r5, [pc, #784]	; (8007e58 <_strtod_l+0x91c>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	4214      	tst	r4, r2
 8007b4c:	d004      	beq.n	8007b58 <_strtod_l+0x61c>
 8007b4e:	682a      	ldr	r2, [r5, #0]
 8007b50:	686b      	ldr	r3, [r5, #4]
 8007b52:	f7fa f9dd 	bl	8001f10 <__aeabi_dmul>
 8007b56:	2301      	movs	r3, #1
 8007b58:	1064      	asrs	r4, r4, #1
 8007b5a:	3508      	adds	r5, #8
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	d1f3      	bne.n	8007b48 <_strtod_l+0x60c>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <_strtod_l+0x62c>
 8007b64:	0006      	movs	r6, r0
 8007b66:	000f      	movs	r7, r1
 8007b68:	9b07      	ldr	r3, [sp, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00f      	beq.n	8007b8e <_strtod_l+0x652>
 8007b6e:	236b      	movs	r3, #107	; 0x6b
 8007b70:	007a      	lsls	r2, r7, #1
 8007b72:	0d52      	lsrs	r2, r2, #21
 8007b74:	0039      	movs	r1, r7
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dd08      	ble.n	8007b8e <_strtod_l+0x652>
 8007b7c:	2b1f      	cmp	r3, #31
 8007b7e:	dc00      	bgt.n	8007b82 <_strtod_l+0x646>
 8007b80:	e121      	b.n	8007dc6 <_strtod_l+0x88a>
 8007b82:	2600      	movs	r6, #0
 8007b84:	2b34      	cmp	r3, #52	; 0x34
 8007b86:	dc00      	bgt.n	8007b8a <_strtod_l+0x64e>
 8007b88:	e116      	b.n	8007db8 <_strtod_l+0x87c>
 8007b8a:	27dc      	movs	r7, #220	; 0xdc
 8007b8c:	04bf      	lsls	r7, r7, #18
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2300      	movs	r3, #0
 8007b92:	0030      	movs	r0, r6
 8007b94:	0039      	movs	r1, r7
 8007b96:	f7f8 fc59 	bl	800044c <__aeabi_dcmpeq>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d19f      	bne.n	8007ade <_strtod_l+0x5a2>
 8007b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba0:	9a08      	ldr	r2, [sp, #32]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007ba6:	9b05      	ldr	r3, [sp, #20]
 8007ba8:	9804      	ldr	r0, [sp, #16]
 8007baa:	f003 f8a7 	bl	800acfc <__s2b>
 8007bae:	900d      	str	r0, [sp, #52]	; 0x34
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d100      	bne.n	8007bb6 <_strtod_l+0x67a>
 8007bb4:	e720      	b.n	80079f8 <_strtod_l+0x4bc>
 8007bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb8:	9906      	ldr	r1, [sp, #24]
 8007bba:	17da      	asrs	r2, r3, #31
 8007bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bbe:	1a5b      	subs	r3, r3, r1
 8007bc0:	401a      	ands	r2, r3
 8007bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc4:	9215      	str	r2, [sp, #84]	; 0x54
 8007bc6:	43db      	mvns	r3, r3
 8007bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bca:	17db      	asrs	r3, r3, #31
 8007bcc:	401a      	ands	r2, r3
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9218      	str	r2, [sp, #96]	; 0x60
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	9306      	str	r3, [sp, #24]
 8007bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bd8:	9804      	ldr	r0, [sp, #16]
 8007bda:	6859      	ldr	r1, [r3, #4]
 8007bdc:	f002 ffe2 	bl	800aba4 <_Balloc>
 8007be0:	9008      	str	r0, [sp, #32]
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d100      	bne.n	8007be8 <_strtod_l+0x6ac>
 8007be6:	e70c      	b.n	8007a02 <_strtod_l+0x4c6>
 8007be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bea:	300c      	adds	r0, #12
 8007bec:	0019      	movs	r1, r3
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	310c      	adds	r1, #12
 8007bf2:	3202      	adds	r2, #2
 8007bf4:	0092      	lsls	r2, r2, #2
 8007bf6:	f001 fcad 	bl	8009554 <memcpy>
 8007bfa:	ab1e      	add	r3, sp, #120	; 0x78
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	0032      	movs	r2, r6
 8007c04:	003b      	movs	r3, r7
 8007c06:	9804      	ldr	r0, [sp, #16]
 8007c08:	9610      	str	r6, [sp, #64]	; 0x40
 8007c0a:	9711      	str	r7, [sp, #68]	; 0x44
 8007c0c:	f003 fbb8 	bl	800b380 <__d2b>
 8007c10:	901c      	str	r0, [sp, #112]	; 0x70
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d100      	bne.n	8007c18 <_strtod_l+0x6dc>
 8007c16:	e6f4      	b.n	8007a02 <_strtod_l+0x4c6>
 8007c18:	2101      	movs	r1, #1
 8007c1a:	9804      	ldr	r0, [sp, #16]
 8007c1c:	f003 f902 	bl	800ae24 <__i2b>
 8007c20:	9006      	str	r0, [sp, #24]
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d100      	bne.n	8007c28 <_strtod_l+0x6ec>
 8007c26:	e6ec      	b.n	8007a02 <_strtod_l+0x4c6>
 8007c28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007c2e:	1ad4      	subs	r4, r2, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	db01      	blt.n	8007c38 <_strtod_l+0x6fc>
 8007c34:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007c36:	195d      	adds	r5, r3, r5
 8007c38:	9907      	ldr	r1, [sp, #28]
 8007c3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007c3c:	1a5b      	subs	r3, r3, r1
 8007c3e:	2136      	movs	r1, #54	; 0x36
 8007c40:	189b      	adds	r3, r3, r2
 8007c42:	1a8a      	subs	r2, r1, r2
 8007c44:	4985      	ldr	r1, [pc, #532]	; (8007e5c <_strtod_l+0x920>)
 8007c46:	2001      	movs	r0, #1
 8007c48:	468c      	mov	ip, r1
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	9114      	str	r1, [sp, #80]	; 0x50
 8007c50:	9012      	str	r0, [sp, #72]	; 0x48
 8007c52:	4563      	cmp	r3, ip
 8007c54:	da07      	bge.n	8007c66 <_strtod_l+0x72a>
 8007c56:	4661      	mov	r1, ip
 8007c58:	1ac9      	subs	r1, r1, r3
 8007c5a:	1a52      	subs	r2, r2, r1
 8007c5c:	291f      	cmp	r1, #31
 8007c5e:	dd00      	ble.n	8007c62 <_strtod_l+0x726>
 8007c60:	e0b6      	b.n	8007dd0 <_strtod_l+0x894>
 8007c62:	4088      	lsls	r0, r1
 8007c64:	9012      	str	r0, [sp, #72]	; 0x48
 8007c66:	18ab      	adds	r3, r5, r2
 8007c68:	930c      	str	r3, [sp, #48]	; 0x30
 8007c6a:	18a4      	adds	r4, r4, r2
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c70:	191c      	adds	r4, r3, r4
 8007c72:	002b      	movs	r3, r5
 8007c74:	4295      	cmp	r5, r2
 8007c76:	dd00      	ble.n	8007c7a <_strtod_l+0x73e>
 8007c78:	0013      	movs	r3, r2
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	dd00      	ble.n	8007c80 <_strtod_l+0x744>
 8007c7e:	0023      	movs	r3, r4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dd04      	ble.n	8007c8e <_strtod_l+0x752>
 8007c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c86:	1ae4      	subs	r4, r4, r3
 8007c88:	1ad2      	subs	r2, r2, r3
 8007c8a:	920c      	str	r2, [sp, #48]	; 0x30
 8007c8c:	1aed      	subs	r5, r5, r3
 8007c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dd17      	ble.n	8007cc4 <_strtod_l+0x788>
 8007c94:	001a      	movs	r2, r3
 8007c96:	9906      	ldr	r1, [sp, #24]
 8007c98:	9804      	ldr	r0, [sp, #16]
 8007c9a:	f003 f98b 	bl	800afb4 <__pow5mult>
 8007c9e:	9006      	str	r0, [sp, #24]
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d100      	bne.n	8007ca6 <_strtod_l+0x76a>
 8007ca4:	e6ad      	b.n	8007a02 <_strtod_l+0x4c6>
 8007ca6:	0001      	movs	r1, r0
 8007ca8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007caa:	9804      	ldr	r0, [sp, #16]
 8007cac:	f003 f8d2 	bl	800ae54 <__multiply>
 8007cb0:	900e      	str	r0, [sp, #56]	; 0x38
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d100      	bne.n	8007cb8 <_strtod_l+0x77c>
 8007cb6:	e6a4      	b.n	8007a02 <_strtod_l+0x4c6>
 8007cb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007cba:	9804      	ldr	r0, [sp, #16]
 8007cbc:	f002 ffb6 	bl	800ac2c <_Bfree>
 8007cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc2:	931c      	str	r3, [sp, #112]	; 0x70
 8007cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	dd00      	ble.n	8007ccc <_strtod_l+0x790>
 8007cca:	e087      	b.n	8007ddc <_strtod_l+0x8a0>
 8007ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	dd08      	ble.n	8007ce4 <_strtod_l+0x7a8>
 8007cd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cd4:	9908      	ldr	r1, [sp, #32]
 8007cd6:	9804      	ldr	r0, [sp, #16]
 8007cd8:	f003 f96c 	bl	800afb4 <__pow5mult>
 8007cdc:	9008      	str	r0, [sp, #32]
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d100      	bne.n	8007ce4 <_strtod_l+0x7a8>
 8007ce2:	e68e      	b.n	8007a02 <_strtod_l+0x4c6>
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	dd08      	ble.n	8007cfa <_strtod_l+0x7be>
 8007ce8:	0022      	movs	r2, r4
 8007cea:	9908      	ldr	r1, [sp, #32]
 8007cec:	9804      	ldr	r0, [sp, #16]
 8007cee:	f003 f9bd 	bl	800b06c <__lshift>
 8007cf2:	9008      	str	r0, [sp, #32]
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d100      	bne.n	8007cfa <_strtod_l+0x7be>
 8007cf8:	e683      	b.n	8007a02 <_strtod_l+0x4c6>
 8007cfa:	2d00      	cmp	r5, #0
 8007cfc:	dd08      	ble.n	8007d10 <_strtod_l+0x7d4>
 8007cfe:	002a      	movs	r2, r5
 8007d00:	9906      	ldr	r1, [sp, #24]
 8007d02:	9804      	ldr	r0, [sp, #16]
 8007d04:	f003 f9b2 	bl	800b06c <__lshift>
 8007d08:	9006      	str	r0, [sp, #24]
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d100      	bne.n	8007d10 <_strtod_l+0x7d4>
 8007d0e:	e678      	b.n	8007a02 <_strtod_l+0x4c6>
 8007d10:	9a08      	ldr	r2, [sp, #32]
 8007d12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d14:	9804      	ldr	r0, [sp, #16]
 8007d16:	f003 fa33 	bl	800b180 <__mdiff>
 8007d1a:	9005      	str	r0, [sp, #20]
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d100      	bne.n	8007d22 <_strtod_l+0x7e6>
 8007d20:	e66f      	b.n	8007a02 <_strtod_l+0x4c6>
 8007d22:	2200      	movs	r2, #0
 8007d24:	68c3      	ldr	r3, [r0, #12]
 8007d26:	9906      	ldr	r1, [sp, #24]
 8007d28:	60c2      	str	r2, [r0, #12]
 8007d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007d2c:	f003 fa0c 	bl	800b148 <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	da5d      	bge.n	8007df0 <_strtod_l+0x8b4>
 8007d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d36:	4333      	orrs	r3, r6
 8007d38:	d000      	beq.n	8007d3c <_strtod_l+0x800>
 8007d3a:	e088      	b.n	8007e4e <_strtod_l+0x912>
 8007d3c:	033b      	lsls	r3, r7, #12
 8007d3e:	d000      	beq.n	8007d42 <_strtod_l+0x806>
 8007d40:	e085      	b.n	8007e4e <_strtod_l+0x912>
 8007d42:	22d6      	movs	r2, #214	; 0xd6
 8007d44:	4b46      	ldr	r3, [pc, #280]	; (8007e60 <_strtod_l+0x924>)
 8007d46:	04d2      	lsls	r2, r2, #19
 8007d48:	403b      	ands	r3, r7
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d97f      	bls.n	8007e4e <_strtod_l+0x912>
 8007d4e:	9b05      	ldr	r3, [sp, #20]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <_strtod_l+0x822>
 8007d56:	9b05      	ldr	r3, [sp, #20]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	dd77      	ble.n	8007e4e <_strtod_l+0x912>
 8007d5e:	9905      	ldr	r1, [sp, #20]
 8007d60:	2201      	movs	r2, #1
 8007d62:	9804      	ldr	r0, [sp, #16]
 8007d64:	f003 f982 	bl	800b06c <__lshift>
 8007d68:	9906      	ldr	r1, [sp, #24]
 8007d6a:	9005      	str	r0, [sp, #20]
 8007d6c:	f003 f9ec 	bl	800b148 <__mcmp>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	dd6c      	ble.n	8007e4e <_strtod_l+0x912>
 8007d74:	9907      	ldr	r1, [sp, #28]
 8007d76:	003b      	movs	r3, r7
 8007d78:	4a39      	ldr	r2, [pc, #228]	; (8007e60 <_strtod_l+0x924>)
 8007d7a:	2900      	cmp	r1, #0
 8007d7c:	d100      	bne.n	8007d80 <_strtod_l+0x844>
 8007d7e:	e094      	b.n	8007eaa <_strtod_l+0x96e>
 8007d80:	0011      	movs	r1, r2
 8007d82:	20d6      	movs	r0, #214	; 0xd6
 8007d84:	4039      	ands	r1, r7
 8007d86:	04c0      	lsls	r0, r0, #19
 8007d88:	4281      	cmp	r1, r0
 8007d8a:	dd00      	ble.n	8007d8e <_strtod_l+0x852>
 8007d8c:	e08d      	b.n	8007eaa <_strtod_l+0x96e>
 8007d8e:	23dc      	movs	r3, #220	; 0xdc
 8007d90:	049b      	lsls	r3, r3, #18
 8007d92:	4299      	cmp	r1, r3
 8007d94:	dc00      	bgt.n	8007d98 <_strtod_l+0x85c>
 8007d96:	e6a7      	b.n	8007ae8 <_strtod_l+0x5ac>
 8007d98:	0030      	movs	r0, r6
 8007d9a:	0039      	movs	r1, r7
 8007d9c:	4b31      	ldr	r3, [pc, #196]	; (8007e64 <_strtod_l+0x928>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f7fa f8b6 	bl	8001f10 <__aeabi_dmul>
 8007da4:	4b2e      	ldr	r3, [pc, #184]	; (8007e60 <_strtod_l+0x924>)
 8007da6:	0006      	movs	r6, r0
 8007da8:	000f      	movs	r7, r1
 8007daa:	420b      	tst	r3, r1
 8007dac:	d000      	beq.n	8007db0 <_strtod_l+0x874>
 8007dae:	e631      	b.n	8007a14 <_strtod_l+0x4d8>
 8007db0:	2322      	movs	r3, #34	; 0x22
 8007db2:	9a04      	ldr	r2, [sp, #16]
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e62d      	b.n	8007a14 <_strtod_l+0x4d8>
 8007db8:	234b      	movs	r3, #75	; 0x4b
 8007dba:	1a9a      	subs	r2, r3, r2
 8007dbc:	3b4c      	subs	r3, #76	; 0x4c
 8007dbe:	4093      	lsls	r3, r2
 8007dc0:	4019      	ands	r1, r3
 8007dc2:	000f      	movs	r7, r1
 8007dc4:	e6e3      	b.n	8007b8e <_strtod_l+0x652>
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	4252      	negs	r2, r2
 8007dca:	409a      	lsls	r2, r3
 8007dcc:	4016      	ands	r6, r2
 8007dce:	e6de      	b.n	8007b8e <_strtod_l+0x652>
 8007dd0:	4925      	ldr	r1, [pc, #148]	; (8007e68 <_strtod_l+0x92c>)
 8007dd2:	1acb      	subs	r3, r1, r3
 8007dd4:	0001      	movs	r1, r0
 8007dd6:	4099      	lsls	r1, r3
 8007dd8:	9114      	str	r1, [sp, #80]	; 0x50
 8007dda:	e743      	b.n	8007c64 <_strtod_l+0x728>
 8007ddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dde:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007de0:	9804      	ldr	r0, [sp, #16]
 8007de2:	f003 f943 	bl	800b06c <__lshift>
 8007de6:	901c      	str	r0, [sp, #112]	; 0x70
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d000      	beq.n	8007dee <_strtod_l+0x8b2>
 8007dec:	e76e      	b.n	8007ccc <_strtod_l+0x790>
 8007dee:	e608      	b.n	8007a02 <_strtod_l+0x4c6>
 8007df0:	970e      	str	r7, [sp, #56]	; 0x38
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d177      	bne.n	8007ee6 <_strtod_l+0x9aa>
 8007df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007df8:	033b      	lsls	r3, r7, #12
 8007dfa:	0b1b      	lsrs	r3, r3, #12
 8007dfc:	2a00      	cmp	r2, #0
 8007dfe:	d039      	beq.n	8007e74 <_strtod_l+0x938>
 8007e00:	4a1a      	ldr	r2, [pc, #104]	; (8007e6c <_strtod_l+0x930>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d139      	bne.n	8007e7a <_strtod_l+0x93e>
 8007e06:	2101      	movs	r1, #1
 8007e08:	9b07      	ldr	r3, [sp, #28]
 8007e0a:	4249      	negs	r1, r1
 8007e0c:	0032      	movs	r2, r6
 8007e0e:	0008      	movs	r0, r1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <_strtod_l+0x8f0>
 8007e14:	24d4      	movs	r4, #212	; 0xd4
 8007e16:	4b12      	ldr	r3, [pc, #72]	; (8007e60 <_strtod_l+0x924>)
 8007e18:	0008      	movs	r0, r1
 8007e1a:	403b      	ands	r3, r7
 8007e1c:	04e4      	lsls	r4, r4, #19
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	d804      	bhi.n	8007e2c <_strtod_l+0x8f0>
 8007e22:	306c      	adds	r0, #108	; 0x6c
 8007e24:	0d1b      	lsrs	r3, r3, #20
 8007e26:	1ac3      	subs	r3, r0, r3
 8007e28:	4099      	lsls	r1, r3
 8007e2a:	0008      	movs	r0, r1
 8007e2c:	4282      	cmp	r2, r0
 8007e2e:	d124      	bne.n	8007e7a <_strtod_l+0x93e>
 8007e30:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <_strtod_l+0x934>)
 8007e32:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d102      	bne.n	8007e3e <_strtod_l+0x902>
 8007e38:	3201      	adds	r2, #1
 8007e3a:	d100      	bne.n	8007e3e <_strtod_l+0x902>
 8007e3c:	e5e1      	b.n	8007a02 <_strtod_l+0x4c6>
 8007e3e:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <_strtod_l+0x924>)
 8007e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e42:	2600      	movs	r6, #0
 8007e44:	401a      	ands	r2, r3
 8007e46:	0013      	movs	r3, r2
 8007e48:	2280      	movs	r2, #128	; 0x80
 8007e4a:	0352      	lsls	r2, r2, #13
 8007e4c:	189f      	adds	r7, r3, r2
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1a1      	bne.n	8007d98 <_strtod_l+0x85c>
 8007e54:	e5de      	b.n	8007a14 <_strtod_l+0x4d8>
 8007e56:	46c0      	nop			; (mov r8, r8)
 8007e58:	0800c130 	.word	0x0800c130
 8007e5c:	fffffc02 	.word	0xfffffc02
 8007e60:	7ff00000 	.word	0x7ff00000
 8007e64:	39500000 	.word	0x39500000
 8007e68:	fffffbe2 	.word	0xfffffbe2
 8007e6c:	000fffff 	.word	0x000fffff
 8007e70:	7fefffff 	.word	0x7fefffff
 8007e74:	4333      	orrs	r3, r6
 8007e76:	d100      	bne.n	8007e7a <_strtod_l+0x93e>
 8007e78:	e77c      	b.n	8007d74 <_strtod_l+0x838>
 8007e7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01d      	beq.n	8007ebc <_strtod_l+0x980>
 8007e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e84:	4213      	tst	r3, r2
 8007e86:	d0e2      	beq.n	8007e4e <_strtod_l+0x912>
 8007e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e8a:	0030      	movs	r0, r6
 8007e8c:	0039      	movs	r1, r7
 8007e8e:	9a07      	ldr	r2, [sp, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d017      	beq.n	8007ec4 <_strtod_l+0x988>
 8007e94:	f7ff fb3a 	bl	800750c <sulp>
 8007e98:	0002      	movs	r2, r0
 8007e9a:	000b      	movs	r3, r1
 8007e9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ea0:	f7f9 f8dc 	bl	800105c <__aeabi_dadd>
 8007ea4:	0006      	movs	r6, r0
 8007ea6:	000f      	movs	r7, r1
 8007ea8:	e7d1      	b.n	8007e4e <_strtod_l+0x912>
 8007eaa:	2601      	movs	r6, #1
 8007eac:	4013      	ands	r3, r2
 8007eae:	4a98      	ldr	r2, [pc, #608]	; (8008110 <_strtod_l+0xbd4>)
 8007eb0:	4276      	negs	r6, r6
 8007eb2:	189b      	adds	r3, r3, r2
 8007eb4:	4a97      	ldr	r2, [pc, #604]	; (8008114 <_strtod_l+0xbd8>)
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	0017      	movs	r7, r2
 8007eba:	e7c8      	b.n	8007e4e <_strtod_l+0x912>
 8007ebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ebe:	4233      	tst	r3, r6
 8007ec0:	d0c5      	beq.n	8007e4e <_strtod_l+0x912>
 8007ec2:	e7e1      	b.n	8007e88 <_strtod_l+0x94c>
 8007ec4:	f7ff fb22 	bl	800750c <sulp>
 8007ec8:	0002      	movs	r2, r0
 8007eca:	000b      	movs	r3, r1
 8007ecc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ece:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ed0:	f7fa fae0 	bl	8002494 <__aeabi_dsub>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	0006      	movs	r6, r0
 8007eda:	000f      	movs	r7, r1
 8007edc:	f7f8 fab6 	bl	800044c <__aeabi_dcmpeq>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d0b4      	beq.n	8007e4e <_strtod_l+0x912>
 8007ee4:	e600      	b.n	8007ae8 <_strtod_l+0x5ac>
 8007ee6:	9906      	ldr	r1, [sp, #24]
 8007ee8:	9805      	ldr	r0, [sp, #20]
 8007eea:	f003 faa9 	bl	800b440 <__ratio>
 8007eee:	2380      	movs	r3, #128	; 0x80
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	05db      	lsls	r3, r3, #23
 8007ef4:	0004      	movs	r4, r0
 8007ef6:	000d      	movs	r5, r1
 8007ef8:	f7f8 fab8 	bl	800046c <__aeabi_dcmple>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d06d      	beq.n	8007fdc <_strtod_l+0xaa0>
 8007f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d000      	beq.n	8007f08 <_strtod_l+0x9cc>
 8007f06:	e07e      	b.n	8008006 <_strtod_l+0xaca>
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	d158      	bne.n	8007fbe <_strtod_l+0xa82>
 8007f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f0e:	031b      	lsls	r3, r3, #12
 8007f10:	d000      	beq.n	8007f14 <_strtod_l+0x9d8>
 8007f12:	e07f      	b.n	8008014 <_strtod_l+0xad8>
 8007f14:	2200      	movs	r2, #0
 8007f16:	0020      	movs	r0, r4
 8007f18:	0029      	movs	r1, r5
 8007f1a:	4b7f      	ldr	r3, [pc, #508]	; (8008118 <_strtod_l+0xbdc>)
 8007f1c:	f7f8 fa9c 	bl	8000458 <__aeabi_dcmplt>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d158      	bne.n	8007fd6 <_strtod_l+0xa9a>
 8007f24:	0020      	movs	r0, r4
 8007f26:	0029      	movs	r1, r5
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4b7c      	ldr	r3, [pc, #496]	; (800811c <_strtod_l+0xbe0>)
 8007f2c:	f7f9 fff0 	bl	8001f10 <__aeabi_dmul>
 8007f30:	0004      	movs	r4, r0
 8007f32:	000d      	movs	r5, r1
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	061b      	lsls	r3, r3, #24
 8007f38:	940a      	str	r4, [sp, #40]	; 0x28
 8007f3a:	18eb      	adds	r3, r5, r3
 8007f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f42:	9212      	str	r2, [sp, #72]	; 0x48
 8007f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f46:	4a76      	ldr	r2, [pc, #472]	; (8008120 <_strtod_l+0xbe4>)
 8007f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	9314      	str	r3, [sp, #80]	; 0x50
 8007f4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f50:	4b74      	ldr	r3, [pc, #464]	; (8008124 <_strtod_l+0xbe8>)
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d000      	beq.n	8007f58 <_strtod_l+0xa1c>
 8007f56:	e091      	b.n	800807c <_strtod_l+0xb40>
 8007f58:	4a73      	ldr	r2, [pc, #460]	; (8008128 <_strtod_l+0xbec>)
 8007f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f5c:	4694      	mov	ip, r2
 8007f5e:	4463      	add	r3, ip
 8007f60:	001f      	movs	r7, r3
 8007f62:	0030      	movs	r0, r6
 8007f64:	0019      	movs	r1, r3
 8007f66:	f003 f9a3 	bl	800b2b0 <__ulp>
 8007f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6e:	f7f9 ffcf 	bl	8001f10 <__aeabi_dmul>
 8007f72:	0032      	movs	r2, r6
 8007f74:	003b      	movs	r3, r7
 8007f76:	f7f9 f871 	bl	800105c <__aeabi_dadd>
 8007f7a:	4a69      	ldr	r2, [pc, #420]	; (8008120 <_strtod_l+0xbe4>)
 8007f7c:	4b6b      	ldr	r3, [pc, #428]	; (800812c <_strtod_l+0xbf0>)
 8007f7e:	0006      	movs	r6, r0
 8007f80:	400a      	ands	r2, r1
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d949      	bls.n	800801a <_strtod_l+0xade>
 8007f86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f88:	4b69      	ldr	r3, [pc, #420]	; (8008130 <_strtod_l+0xbf4>)
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d103      	bne.n	8007f96 <_strtod_l+0xa5a>
 8007f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f90:	3301      	adds	r3, #1
 8007f92:	d100      	bne.n	8007f96 <_strtod_l+0xa5a>
 8007f94:	e535      	b.n	8007a02 <_strtod_l+0x4c6>
 8007f96:	2601      	movs	r6, #1
 8007f98:	4f65      	ldr	r7, [pc, #404]	; (8008130 <_strtod_l+0xbf4>)
 8007f9a:	4276      	negs	r6, r6
 8007f9c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f9e:	9804      	ldr	r0, [sp, #16]
 8007fa0:	f002 fe44 	bl	800ac2c <_Bfree>
 8007fa4:	9908      	ldr	r1, [sp, #32]
 8007fa6:	9804      	ldr	r0, [sp, #16]
 8007fa8:	f002 fe40 	bl	800ac2c <_Bfree>
 8007fac:	9906      	ldr	r1, [sp, #24]
 8007fae:	9804      	ldr	r0, [sp, #16]
 8007fb0:	f002 fe3c 	bl	800ac2c <_Bfree>
 8007fb4:	9905      	ldr	r1, [sp, #20]
 8007fb6:	9804      	ldr	r0, [sp, #16]
 8007fb8:	f002 fe38 	bl	800ac2c <_Bfree>
 8007fbc:	e60b      	b.n	8007bd6 <_strtod_l+0x69a>
 8007fbe:	2e01      	cmp	r6, #1
 8007fc0:	d103      	bne.n	8007fca <_strtod_l+0xa8e>
 8007fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d100      	bne.n	8007fca <_strtod_l+0xa8e>
 8007fc8:	e58e      	b.n	8007ae8 <_strtod_l+0x5ac>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4c59      	ldr	r4, [pc, #356]	; (8008134 <_strtod_l+0xbf8>)
 8007fce:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007fd4:	e01c      	b.n	8008010 <_strtod_l+0xad4>
 8007fd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007fd8:	4d50      	ldr	r5, [pc, #320]	; (800811c <_strtod_l+0xbe0>)
 8007fda:	e7ab      	b.n	8007f34 <_strtod_l+0x9f8>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	0020      	movs	r0, r4
 8007fe0:	0029      	movs	r1, r5
 8007fe2:	4b4e      	ldr	r3, [pc, #312]	; (800811c <_strtod_l+0xbe0>)
 8007fe4:	f7f9 ff94 	bl	8001f10 <__aeabi_dmul>
 8007fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fea:	0004      	movs	r4, r0
 8007fec:	000b      	movs	r3, r1
 8007fee:	000d      	movs	r5, r1
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	d104      	bne.n	8007ffe <_strtod_l+0xac2>
 8007ff4:	2280      	movs	r2, #128	; 0x80
 8007ff6:	0612      	lsls	r2, r2, #24
 8007ff8:	900a      	str	r0, [sp, #40]	; 0x28
 8007ffa:	188b      	adds	r3, r1, r2
 8007ffc:	e79e      	b.n	8007f3c <_strtod_l+0xa00>
 8007ffe:	0002      	movs	r2, r0
 8008000:	920a      	str	r2, [sp, #40]	; 0x28
 8008002:	930b      	str	r3, [sp, #44]	; 0x2c
 8008004:	e79b      	b.n	8007f3e <_strtod_l+0xa02>
 8008006:	2300      	movs	r3, #0
 8008008:	4c43      	ldr	r4, [pc, #268]	; (8008118 <_strtod_l+0xbdc>)
 800800a:	930a      	str	r3, [sp, #40]	; 0x28
 800800c:	940b      	str	r4, [sp, #44]	; 0x2c
 800800e:	2400      	movs	r4, #0
 8008010:	4d41      	ldr	r5, [pc, #260]	; (8008118 <_strtod_l+0xbdc>)
 8008012:	e794      	b.n	8007f3e <_strtod_l+0xa02>
 8008014:	2300      	movs	r3, #0
 8008016:	4c47      	ldr	r4, [pc, #284]	; (8008134 <_strtod_l+0xbf8>)
 8008018:	e7f7      	b.n	800800a <_strtod_l+0xace>
 800801a:	23d4      	movs	r3, #212	; 0xd4
 800801c:	049b      	lsls	r3, r3, #18
 800801e:	18cf      	adds	r7, r1, r3
 8008020:	9b07      	ldr	r3, [sp, #28]
 8008022:	970e      	str	r7, [sp, #56]	; 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1b9      	bne.n	8007f9c <_strtod_l+0xa60>
 8008028:	4b3d      	ldr	r3, [pc, #244]	; (8008120 <_strtod_l+0xbe4>)
 800802a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800802c:	403b      	ands	r3, r7
 800802e:	429a      	cmp	r2, r3
 8008030:	d1b4      	bne.n	8007f9c <_strtod_l+0xa60>
 8008032:	0020      	movs	r0, r4
 8008034:	0029      	movs	r1, r5
 8008036:	f7f8 faa3 	bl	8000580 <__aeabi_d2lz>
 800803a:	f7f8 fadd 	bl	80005f8 <__aeabi_l2d>
 800803e:	0002      	movs	r2, r0
 8008040:	000b      	movs	r3, r1
 8008042:	0020      	movs	r0, r4
 8008044:	0029      	movs	r1, r5
 8008046:	f7fa fa25 	bl	8002494 <__aeabi_dsub>
 800804a:	033b      	lsls	r3, r7, #12
 800804c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800804e:	0b1b      	lsrs	r3, r3, #12
 8008050:	4333      	orrs	r3, r6
 8008052:	4313      	orrs	r3, r2
 8008054:	0004      	movs	r4, r0
 8008056:	000d      	movs	r5, r1
 8008058:	4a37      	ldr	r2, [pc, #220]	; (8008138 <_strtod_l+0xbfc>)
 800805a:	2b00      	cmp	r3, #0
 800805c:	d054      	beq.n	8008108 <_strtod_l+0xbcc>
 800805e:	4b37      	ldr	r3, [pc, #220]	; (800813c <_strtod_l+0xc00>)
 8008060:	f7f8 f9fa 	bl	8000458 <__aeabi_dcmplt>
 8008064:	2800      	cmp	r0, #0
 8008066:	d000      	beq.n	800806a <_strtod_l+0xb2e>
 8008068:	e4d4      	b.n	8007a14 <_strtod_l+0x4d8>
 800806a:	0020      	movs	r0, r4
 800806c:	0029      	movs	r1, r5
 800806e:	4a34      	ldr	r2, [pc, #208]	; (8008140 <_strtod_l+0xc04>)
 8008070:	4b2a      	ldr	r3, [pc, #168]	; (800811c <_strtod_l+0xbe0>)
 8008072:	f7f8 fa05 	bl	8000480 <__aeabi_dcmpgt>
 8008076:	2800      	cmp	r0, #0
 8008078:	d090      	beq.n	8007f9c <_strtod_l+0xa60>
 800807a:	e4cb      	b.n	8007a14 <_strtod_l+0x4d8>
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d02b      	beq.n	80080da <_strtod_l+0xb9e>
 8008082:	23d4      	movs	r3, #212	; 0xd4
 8008084:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008086:	04db      	lsls	r3, r3, #19
 8008088:	429a      	cmp	r2, r3
 800808a:	d826      	bhi.n	80080da <_strtod_l+0xb9e>
 800808c:	0020      	movs	r0, r4
 800808e:	0029      	movs	r1, r5
 8008090:	4a2c      	ldr	r2, [pc, #176]	; (8008144 <_strtod_l+0xc08>)
 8008092:	4b2d      	ldr	r3, [pc, #180]	; (8008148 <_strtod_l+0xc0c>)
 8008094:	f7f8 f9ea 	bl	800046c <__aeabi_dcmple>
 8008098:	2800      	cmp	r0, #0
 800809a:	d017      	beq.n	80080cc <_strtod_l+0xb90>
 800809c:	0020      	movs	r0, r4
 800809e:	0029      	movs	r1, r5
 80080a0:	f7f8 fa50 	bl	8000544 <__aeabi_d2uiz>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d100      	bne.n	80080aa <_strtod_l+0xb6e>
 80080a8:	3001      	adds	r0, #1
 80080aa:	f7fa fdf9 	bl	8002ca0 <__aeabi_ui2d>
 80080ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080b0:	0004      	movs	r4, r0
 80080b2:	000b      	movs	r3, r1
 80080b4:	000d      	movs	r5, r1
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d122      	bne.n	8008100 <_strtod_l+0xbc4>
 80080ba:	2280      	movs	r2, #128	; 0x80
 80080bc:	0612      	lsls	r2, r2, #24
 80080be:	188b      	adds	r3, r1, r2
 80080c0:	9016      	str	r0, [sp, #88]	; 0x58
 80080c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80080c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80080c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080c8:	9212      	str	r2, [sp, #72]	; 0x48
 80080ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80080cc:	22d6      	movs	r2, #214	; 0xd6
 80080ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080d0:	04d2      	lsls	r2, r2, #19
 80080d2:	189b      	adds	r3, r3, r2
 80080d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80080da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080de:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80080e0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80080e2:	f003 f8e5 	bl	800b2b0 <__ulp>
 80080e6:	0002      	movs	r2, r0
 80080e8:	000b      	movs	r3, r1
 80080ea:	0030      	movs	r0, r6
 80080ec:	0039      	movs	r1, r7
 80080ee:	f7f9 ff0f 	bl	8001f10 <__aeabi_dmul>
 80080f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080f6:	f7f8 ffb1 	bl	800105c <__aeabi_dadd>
 80080fa:	0006      	movs	r6, r0
 80080fc:	000f      	movs	r7, r1
 80080fe:	e78f      	b.n	8008020 <_strtod_l+0xae4>
 8008100:	0002      	movs	r2, r0
 8008102:	9216      	str	r2, [sp, #88]	; 0x58
 8008104:	9317      	str	r3, [sp, #92]	; 0x5c
 8008106:	e7dd      	b.n	80080c4 <_strtod_l+0xb88>
 8008108:	4b10      	ldr	r3, [pc, #64]	; (800814c <_strtod_l+0xc10>)
 800810a:	f7f8 f9a5 	bl	8000458 <__aeabi_dcmplt>
 800810e:	e7b2      	b.n	8008076 <_strtod_l+0xb3a>
 8008110:	fff00000 	.word	0xfff00000
 8008114:	000fffff 	.word	0x000fffff
 8008118:	3ff00000 	.word	0x3ff00000
 800811c:	3fe00000 	.word	0x3fe00000
 8008120:	7ff00000 	.word	0x7ff00000
 8008124:	7fe00000 	.word	0x7fe00000
 8008128:	fcb00000 	.word	0xfcb00000
 800812c:	7c9fffff 	.word	0x7c9fffff
 8008130:	7fefffff 	.word	0x7fefffff
 8008134:	bff00000 	.word	0xbff00000
 8008138:	94a03595 	.word	0x94a03595
 800813c:	3fdfffff 	.word	0x3fdfffff
 8008140:	35afe535 	.word	0x35afe535
 8008144:	ffc00000 	.word	0xffc00000
 8008148:	41dfffff 	.word	0x41dfffff
 800814c:	3fcfffff 	.word	0x3fcfffff

08008150 <_strtod_r>:
 8008150:	b510      	push	{r4, lr}
 8008152:	4b02      	ldr	r3, [pc, #8]	; (800815c <_strtod_r+0xc>)
 8008154:	f7ff f9f2 	bl	800753c <_strtod_l>
 8008158:	bd10      	pop	{r4, pc}
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	20000018 	.word	0x20000018

08008160 <_strtol_l.constprop.0>:
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	b087      	sub	sp, #28
 8008164:	001e      	movs	r6, r3
 8008166:	9005      	str	r0, [sp, #20]
 8008168:	9101      	str	r1, [sp, #4]
 800816a:	9202      	str	r2, [sp, #8]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d048      	beq.n	8008202 <_strtol_l.constprop.0+0xa2>
 8008170:	000b      	movs	r3, r1
 8008172:	2e24      	cmp	r6, #36	; 0x24
 8008174:	d845      	bhi.n	8008202 <_strtol_l.constprop.0+0xa2>
 8008176:	4a3b      	ldr	r2, [pc, #236]	; (8008264 <_strtol_l.constprop.0+0x104>)
 8008178:	2108      	movs	r1, #8
 800817a:	4694      	mov	ip, r2
 800817c:	001a      	movs	r2, r3
 800817e:	4660      	mov	r0, ip
 8008180:	7814      	ldrb	r4, [r2, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	5d00      	ldrb	r0, [r0, r4]
 8008186:	001d      	movs	r5, r3
 8008188:	0007      	movs	r7, r0
 800818a:	400f      	ands	r7, r1
 800818c:	4208      	tst	r0, r1
 800818e:	d1f5      	bne.n	800817c <_strtol_l.constprop.0+0x1c>
 8008190:	2c2d      	cmp	r4, #45	; 0x2d
 8008192:	d13d      	bne.n	8008210 <_strtol_l.constprop.0+0xb0>
 8008194:	2701      	movs	r7, #1
 8008196:	781c      	ldrb	r4, [r3, #0]
 8008198:	1c95      	adds	r5, r2, #2
 800819a:	2e00      	cmp	r6, #0
 800819c:	d05e      	beq.n	800825c <_strtol_l.constprop.0+0xfc>
 800819e:	2e10      	cmp	r6, #16
 80081a0:	d109      	bne.n	80081b6 <_strtol_l.constprop.0+0x56>
 80081a2:	2c30      	cmp	r4, #48	; 0x30
 80081a4:	d107      	bne.n	80081b6 <_strtol_l.constprop.0+0x56>
 80081a6:	2220      	movs	r2, #32
 80081a8:	782b      	ldrb	r3, [r5, #0]
 80081aa:	4393      	bics	r3, r2
 80081ac:	2b58      	cmp	r3, #88	; 0x58
 80081ae:	d150      	bne.n	8008252 <_strtol_l.constprop.0+0xf2>
 80081b0:	2610      	movs	r6, #16
 80081b2:	786c      	ldrb	r4, [r5, #1]
 80081b4:	3502      	adds	r5, #2
 80081b6:	4b2c      	ldr	r3, [pc, #176]	; (8008268 <_strtol_l.constprop.0+0x108>)
 80081b8:	0031      	movs	r1, r6
 80081ba:	18fb      	adds	r3, r7, r3
 80081bc:	0018      	movs	r0, r3
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	f7f8 f844 	bl	800024c <__aeabi_uidivmod>
 80081c4:	2200      	movs	r2, #0
 80081c6:	9104      	str	r1, [sp, #16]
 80081c8:	2101      	movs	r1, #1
 80081ca:	4684      	mov	ip, r0
 80081cc:	0010      	movs	r0, r2
 80081ce:	4249      	negs	r1, r1
 80081d0:	0023      	movs	r3, r4
 80081d2:	3b30      	subs	r3, #48	; 0x30
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d903      	bls.n	80081e0 <_strtol_l.constprop.0+0x80>
 80081d8:	3b11      	subs	r3, #17
 80081da:	2b19      	cmp	r3, #25
 80081dc:	d81d      	bhi.n	800821a <_strtol_l.constprop.0+0xba>
 80081de:	330a      	adds	r3, #10
 80081e0:	429e      	cmp	r6, r3
 80081e2:	dd1e      	ble.n	8008222 <_strtol_l.constprop.0+0xc2>
 80081e4:	1c54      	adds	r4, r2, #1
 80081e6:	d009      	beq.n	80081fc <_strtol_l.constprop.0+0x9c>
 80081e8:	000a      	movs	r2, r1
 80081ea:	4584      	cmp	ip, r0
 80081ec:	d306      	bcc.n	80081fc <_strtol_l.constprop.0+0x9c>
 80081ee:	d102      	bne.n	80081f6 <_strtol_l.constprop.0+0x96>
 80081f0:	9c04      	ldr	r4, [sp, #16]
 80081f2:	429c      	cmp	r4, r3
 80081f4:	db02      	blt.n	80081fc <_strtol_l.constprop.0+0x9c>
 80081f6:	2201      	movs	r2, #1
 80081f8:	4370      	muls	r0, r6
 80081fa:	1818      	adds	r0, r3, r0
 80081fc:	782c      	ldrb	r4, [r5, #0]
 80081fe:	3501      	adds	r5, #1
 8008200:	e7e6      	b.n	80081d0 <_strtol_l.constprop.0+0x70>
 8008202:	f001 f96f 	bl	80094e4 <__errno>
 8008206:	2316      	movs	r3, #22
 8008208:	6003      	str	r3, [r0, #0]
 800820a:	2000      	movs	r0, #0
 800820c:	b007      	add	sp, #28
 800820e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008210:	2c2b      	cmp	r4, #43	; 0x2b
 8008212:	d1c2      	bne.n	800819a <_strtol_l.constprop.0+0x3a>
 8008214:	781c      	ldrb	r4, [r3, #0]
 8008216:	1c95      	adds	r5, r2, #2
 8008218:	e7bf      	b.n	800819a <_strtol_l.constprop.0+0x3a>
 800821a:	0023      	movs	r3, r4
 800821c:	3b61      	subs	r3, #97	; 0x61
 800821e:	2b19      	cmp	r3, #25
 8008220:	d9dd      	bls.n	80081de <_strtol_l.constprop.0+0x7e>
 8008222:	1c53      	adds	r3, r2, #1
 8008224:	d109      	bne.n	800823a <_strtol_l.constprop.0+0xda>
 8008226:	2322      	movs	r3, #34	; 0x22
 8008228:	9a05      	ldr	r2, [sp, #20]
 800822a:	9803      	ldr	r0, [sp, #12]
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	9b02      	ldr	r3, [sp, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0eb      	beq.n	800820c <_strtol_l.constprop.0+0xac>
 8008234:	1e6b      	subs	r3, r5, #1
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	e007      	b.n	800824a <_strtol_l.constprop.0+0xea>
 800823a:	2f00      	cmp	r7, #0
 800823c:	d000      	beq.n	8008240 <_strtol_l.constprop.0+0xe0>
 800823e:	4240      	negs	r0, r0
 8008240:	9b02      	ldr	r3, [sp, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0e2      	beq.n	800820c <_strtol_l.constprop.0+0xac>
 8008246:	2a00      	cmp	r2, #0
 8008248:	d1f4      	bne.n	8008234 <_strtol_l.constprop.0+0xd4>
 800824a:	9b02      	ldr	r3, [sp, #8]
 800824c:	9a01      	ldr	r2, [sp, #4]
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	e7dc      	b.n	800820c <_strtol_l.constprop.0+0xac>
 8008252:	2430      	movs	r4, #48	; 0x30
 8008254:	2e00      	cmp	r6, #0
 8008256:	d1ae      	bne.n	80081b6 <_strtol_l.constprop.0+0x56>
 8008258:	3608      	adds	r6, #8
 800825a:	e7ac      	b.n	80081b6 <_strtol_l.constprop.0+0x56>
 800825c:	2c30      	cmp	r4, #48	; 0x30
 800825e:	d0a2      	beq.n	80081a6 <_strtol_l.constprop.0+0x46>
 8008260:	260a      	movs	r6, #10
 8008262:	e7a8      	b.n	80081b6 <_strtol_l.constprop.0+0x56>
 8008264:	0800c159 	.word	0x0800c159
 8008268:	7fffffff 	.word	0x7fffffff

0800826c <_strtol_r>:
 800826c:	b510      	push	{r4, lr}
 800826e:	f7ff ff77 	bl	8008160 <_strtol_l.constprop.0>
 8008272:	bd10      	pop	{r4, pc}

08008274 <__cvt>:
 8008274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008276:	001e      	movs	r6, r3
 8008278:	2300      	movs	r3, #0
 800827a:	0014      	movs	r4, r2
 800827c:	b08b      	sub	sp, #44	; 0x2c
 800827e:	429e      	cmp	r6, r3
 8008280:	da04      	bge.n	800828c <__cvt+0x18>
 8008282:	2180      	movs	r1, #128	; 0x80
 8008284:	0609      	lsls	r1, r1, #24
 8008286:	1873      	adds	r3, r6, r1
 8008288:	001e      	movs	r6, r3
 800828a:	232d      	movs	r3, #45	; 0x2d
 800828c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800828e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008290:	7013      	strb	r3, [r2, #0]
 8008292:	2320      	movs	r3, #32
 8008294:	2203      	movs	r2, #3
 8008296:	439f      	bics	r7, r3
 8008298:	2f46      	cmp	r7, #70	; 0x46
 800829a:	d007      	beq.n	80082ac <__cvt+0x38>
 800829c:	003b      	movs	r3, r7
 800829e:	3b45      	subs	r3, #69	; 0x45
 80082a0:	4259      	negs	r1, r3
 80082a2:	414b      	adcs	r3, r1
 80082a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80082a6:	3a01      	subs	r2, #1
 80082a8:	18cb      	adds	r3, r1, r3
 80082aa:	9310      	str	r3, [sp, #64]	; 0x40
 80082ac:	ab09      	add	r3, sp, #36	; 0x24
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	ab08      	add	r3, sp, #32
 80082b2:	9303      	str	r3, [sp, #12]
 80082b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082b6:	9200      	str	r2, [sp, #0]
 80082b8:	9302      	str	r3, [sp, #8]
 80082ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082bc:	0022      	movs	r2, r4
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	0033      	movs	r3, r6
 80082c2:	f001 f9eb 	bl	800969c <_dtoa_r>
 80082c6:	0005      	movs	r5, r0
 80082c8:	2f47      	cmp	r7, #71	; 0x47
 80082ca:	d102      	bne.n	80082d2 <__cvt+0x5e>
 80082cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ce:	07db      	lsls	r3, r3, #31
 80082d0:	d528      	bpl.n	8008324 <__cvt+0xb0>
 80082d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082d4:	18eb      	adds	r3, r5, r3
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	2f46      	cmp	r7, #70	; 0x46
 80082da:	d114      	bne.n	8008306 <__cvt+0x92>
 80082dc:	782b      	ldrb	r3, [r5, #0]
 80082de:	2b30      	cmp	r3, #48	; 0x30
 80082e0:	d10c      	bne.n	80082fc <__cvt+0x88>
 80082e2:	2200      	movs	r2, #0
 80082e4:	2300      	movs	r3, #0
 80082e6:	0020      	movs	r0, r4
 80082e8:	0031      	movs	r1, r6
 80082ea:	f7f8 f8af 	bl	800044c <__aeabi_dcmpeq>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d104      	bne.n	80082fc <__cvt+0x88>
 80082f2:	2301      	movs	r3, #1
 80082f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082fe:	9a07      	ldr	r2, [sp, #28]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	18d3      	adds	r3, r2, r3
 8008304:	9307      	str	r3, [sp, #28]
 8008306:	2200      	movs	r2, #0
 8008308:	2300      	movs	r3, #0
 800830a:	0020      	movs	r0, r4
 800830c:	0031      	movs	r1, r6
 800830e:	f7f8 f89d 	bl	800044c <__aeabi_dcmpeq>
 8008312:	2800      	cmp	r0, #0
 8008314:	d001      	beq.n	800831a <__cvt+0xa6>
 8008316:	9b07      	ldr	r3, [sp, #28]
 8008318:	9309      	str	r3, [sp, #36]	; 0x24
 800831a:	2230      	movs	r2, #48	; 0x30
 800831c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831e:	9907      	ldr	r1, [sp, #28]
 8008320:	428b      	cmp	r3, r1
 8008322:	d306      	bcc.n	8008332 <__cvt+0xbe>
 8008324:	0028      	movs	r0, r5
 8008326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008328:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800832a:	1b5b      	subs	r3, r3, r5
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	b00b      	add	sp, #44	; 0x2c
 8008330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008332:	1c59      	adds	r1, r3, #1
 8008334:	9109      	str	r1, [sp, #36]	; 0x24
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	e7f0      	b.n	800831c <__cvt+0xa8>

0800833a <__exponent>:
 800833a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800833c:	1c83      	adds	r3, r0, #2
 800833e:	b087      	sub	sp, #28
 8008340:	9303      	str	r3, [sp, #12]
 8008342:	0005      	movs	r5, r0
 8008344:	000c      	movs	r4, r1
 8008346:	232b      	movs	r3, #43	; 0x2b
 8008348:	7002      	strb	r2, [r0, #0]
 800834a:	2900      	cmp	r1, #0
 800834c:	da01      	bge.n	8008352 <__exponent+0x18>
 800834e:	424c      	negs	r4, r1
 8008350:	3302      	adds	r3, #2
 8008352:	706b      	strb	r3, [r5, #1]
 8008354:	2c09      	cmp	r4, #9
 8008356:	dd2f      	ble.n	80083b8 <__exponent+0x7e>
 8008358:	270a      	movs	r7, #10
 800835a:	ab04      	add	r3, sp, #16
 800835c:	1dde      	adds	r6, r3, #7
 800835e:	0020      	movs	r0, r4
 8008360:	0039      	movs	r1, r7
 8008362:	9601      	str	r6, [sp, #4]
 8008364:	f7f8 f85c 	bl	8000420 <__aeabi_idivmod>
 8008368:	3e01      	subs	r6, #1
 800836a:	3130      	adds	r1, #48	; 0x30
 800836c:	0020      	movs	r0, r4
 800836e:	7031      	strb	r1, [r6, #0]
 8008370:	0039      	movs	r1, r7
 8008372:	9402      	str	r4, [sp, #8]
 8008374:	f7f7 ff6e 	bl	8000254 <__divsi3>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	0004      	movs	r4, r0
 800837c:	2b63      	cmp	r3, #99	; 0x63
 800837e:	dcee      	bgt.n	800835e <__exponent+0x24>
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	3430      	adds	r4, #48	; 0x30
 8008384:	1e9a      	subs	r2, r3, #2
 8008386:	0013      	movs	r3, r2
 8008388:	9903      	ldr	r1, [sp, #12]
 800838a:	7014      	strb	r4, [r2, #0]
 800838c:	a804      	add	r0, sp, #16
 800838e:	3007      	adds	r0, #7
 8008390:	4298      	cmp	r0, r3
 8008392:	d80c      	bhi.n	80083ae <__exponent+0x74>
 8008394:	2300      	movs	r3, #0
 8008396:	4282      	cmp	r2, r0
 8008398:	d804      	bhi.n	80083a4 <__exponent+0x6a>
 800839a:	aa04      	add	r2, sp, #16
 800839c:	3309      	adds	r3, #9
 800839e:	189b      	adds	r3, r3, r2
 80083a0:	9a01      	ldr	r2, [sp, #4]
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	9a03      	ldr	r2, [sp, #12]
 80083a6:	18d3      	adds	r3, r2, r3
 80083a8:	1b58      	subs	r0, r3, r5
 80083aa:	b007      	add	sp, #28
 80083ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ae:	7818      	ldrb	r0, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	7008      	strb	r0, [r1, #0]
 80083b4:	3101      	adds	r1, #1
 80083b6:	e7e9      	b.n	800838c <__exponent+0x52>
 80083b8:	2330      	movs	r3, #48	; 0x30
 80083ba:	3430      	adds	r4, #48	; 0x30
 80083bc:	70ab      	strb	r3, [r5, #2]
 80083be:	70ec      	strb	r4, [r5, #3]
 80083c0:	1d2b      	adds	r3, r5, #4
 80083c2:	e7f1      	b.n	80083a8 <__exponent+0x6e>

080083c4 <_printf_float>:
 80083c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c6:	b095      	sub	sp, #84	; 0x54
 80083c8:	000c      	movs	r4, r1
 80083ca:	9208      	str	r2, [sp, #32]
 80083cc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80083ce:	9309      	str	r3, [sp, #36]	; 0x24
 80083d0:	0007      	movs	r7, r0
 80083d2:	f001 f835 	bl	8009440 <_localeconv_r>
 80083d6:	6803      	ldr	r3, [r0, #0]
 80083d8:	0018      	movs	r0, r3
 80083da:	930c      	str	r3, [sp, #48]	; 0x30
 80083dc:	f7f7 fe94 	bl	8000108 <strlen>
 80083e0:	2300      	movs	r3, #0
 80083e2:	9312      	str	r3, [sp, #72]	; 0x48
 80083e4:	7e23      	ldrb	r3, [r4, #24]
 80083e6:	2207      	movs	r2, #7
 80083e8:	930a      	str	r3, [sp, #40]	; 0x28
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	900d      	str	r0, [sp, #52]	; 0x34
 80083ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083f2:	682b      	ldr	r3, [r5, #0]
 80083f4:	05c9      	lsls	r1, r1, #23
 80083f6:	d547      	bpl.n	8008488 <_printf_float+0xc4>
 80083f8:	189b      	adds	r3, r3, r2
 80083fa:	4393      	bics	r3, r2
 80083fc:	001a      	movs	r2, r3
 80083fe:	3208      	adds	r2, #8
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	685d      	ldr	r5, [r3, #4]
 8008406:	0032      	movs	r2, r6
 8008408:	002b      	movs	r3, r5
 800840a:	64a2      	str	r2, [r4, #72]	; 0x48
 800840c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800840e:	2201      	movs	r2, #1
 8008410:	006b      	lsls	r3, r5, #1
 8008412:	085b      	lsrs	r3, r3, #1
 8008414:	930e      	str	r3, [sp, #56]	; 0x38
 8008416:	0030      	movs	r0, r6
 8008418:	4bab      	ldr	r3, [pc, #684]	; (80086c8 <_printf_float+0x304>)
 800841a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800841c:	4252      	negs	r2, r2
 800841e:	f7fa fbbb 	bl	8002b98 <__aeabi_dcmpun>
 8008422:	2800      	cmp	r0, #0
 8008424:	d132      	bne.n	800848c <_printf_float+0xc8>
 8008426:	2201      	movs	r2, #1
 8008428:	0030      	movs	r0, r6
 800842a:	4ba7      	ldr	r3, [pc, #668]	; (80086c8 <_printf_float+0x304>)
 800842c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800842e:	4252      	negs	r2, r2
 8008430:	f7f8 f81c 	bl	800046c <__aeabi_dcmple>
 8008434:	2800      	cmp	r0, #0
 8008436:	d129      	bne.n	800848c <_printf_float+0xc8>
 8008438:	2200      	movs	r2, #0
 800843a:	2300      	movs	r3, #0
 800843c:	0030      	movs	r0, r6
 800843e:	0029      	movs	r1, r5
 8008440:	f7f8 f80a 	bl	8000458 <__aeabi_dcmplt>
 8008444:	2800      	cmp	r0, #0
 8008446:	d003      	beq.n	8008450 <_printf_float+0x8c>
 8008448:	0023      	movs	r3, r4
 800844a:	222d      	movs	r2, #45	; 0x2d
 800844c:	3343      	adds	r3, #67	; 0x43
 800844e:	701a      	strb	r2, [r3, #0]
 8008450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008452:	4d9e      	ldr	r5, [pc, #632]	; (80086cc <_printf_float+0x308>)
 8008454:	2b47      	cmp	r3, #71	; 0x47
 8008456:	d900      	bls.n	800845a <_printf_float+0x96>
 8008458:	4d9d      	ldr	r5, [pc, #628]	; (80086d0 <_printf_float+0x30c>)
 800845a:	2303      	movs	r3, #3
 800845c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	3301      	adds	r3, #1
 8008462:	439a      	bics	r2, r3
 8008464:	2300      	movs	r3, #0
 8008466:	6022      	str	r2, [r4, #0]
 8008468:	930b      	str	r3, [sp, #44]	; 0x2c
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	0021      	movs	r1, r4
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	0038      	movs	r0, r7
 8008472:	9b08      	ldr	r3, [sp, #32]
 8008474:	aa13      	add	r2, sp, #76	; 0x4c
 8008476:	f000 f9fb 	bl	8008870 <_printf_common>
 800847a:	3001      	adds	r0, #1
 800847c:	d000      	beq.n	8008480 <_printf_float+0xbc>
 800847e:	e0a3      	b.n	80085c8 <_printf_float+0x204>
 8008480:	2001      	movs	r0, #1
 8008482:	4240      	negs	r0, r0
 8008484:	b015      	add	sp, #84	; 0x54
 8008486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008488:	3307      	adds	r3, #7
 800848a:	e7b6      	b.n	80083fa <_printf_float+0x36>
 800848c:	0032      	movs	r2, r6
 800848e:	002b      	movs	r3, r5
 8008490:	0030      	movs	r0, r6
 8008492:	0029      	movs	r1, r5
 8008494:	f7fa fb80 	bl	8002b98 <__aeabi_dcmpun>
 8008498:	2800      	cmp	r0, #0
 800849a:	d00b      	beq.n	80084b4 <_printf_float+0xf0>
 800849c:	2d00      	cmp	r5, #0
 800849e:	da03      	bge.n	80084a8 <_printf_float+0xe4>
 80084a0:	0023      	movs	r3, r4
 80084a2:	222d      	movs	r2, #45	; 0x2d
 80084a4:	3343      	adds	r3, #67	; 0x43
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084aa:	4d8a      	ldr	r5, [pc, #552]	; (80086d4 <_printf_float+0x310>)
 80084ac:	2b47      	cmp	r3, #71	; 0x47
 80084ae:	d9d4      	bls.n	800845a <_printf_float+0x96>
 80084b0:	4d89      	ldr	r5, [pc, #548]	; (80086d8 <_printf_float+0x314>)
 80084b2:	e7d2      	b.n	800845a <_printf_float+0x96>
 80084b4:	2220      	movs	r2, #32
 80084b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80084b8:	6863      	ldr	r3, [r4, #4]
 80084ba:	4391      	bics	r1, r2
 80084bc:	910e      	str	r1, [sp, #56]	; 0x38
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	d14a      	bne.n	8008558 <_printf_float+0x194>
 80084c2:	3307      	adds	r3, #7
 80084c4:	6063      	str	r3, [r4, #4]
 80084c6:	2380      	movs	r3, #128	; 0x80
 80084c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4313      	orrs	r3, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	9206      	str	r2, [sp, #24]
 80084d2:	aa12      	add	r2, sp, #72	; 0x48
 80084d4:	9205      	str	r2, [sp, #20]
 80084d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	9204      	str	r2, [sp, #16]
 80084dc:	aa11      	add	r2, sp, #68	; 0x44
 80084de:	9203      	str	r2, [sp, #12]
 80084e0:	2223      	movs	r2, #35	; 0x23
 80084e2:	a908      	add	r1, sp, #32
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	6863      	ldr	r3, [r4, #4]
 80084e8:	1852      	adds	r2, r2, r1
 80084ea:	9202      	str	r2, [sp, #8]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	0032      	movs	r2, r6
 80084f0:	002b      	movs	r3, r5
 80084f2:	0038      	movs	r0, r7
 80084f4:	f7ff febe 	bl	8008274 <__cvt>
 80084f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fa:	0005      	movs	r5, r0
 80084fc:	2b47      	cmp	r3, #71	; 0x47
 80084fe:	d109      	bne.n	8008514 <_printf_float+0x150>
 8008500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008502:	1cda      	adds	r2, r3, #3
 8008504:	db02      	blt.n	800850c <_printf_float+0x148>
 8008506:	6862      	ldr	r2, [r4, #4]
 8008508:	4293      	cmp	r3, r2
 800850a:	dd49      	ble.n	80085a0 <_printf_float+0x1dc>
 800850c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850e:	3b02      	subs	r3, #2
 8008510:	b2db      	uxtb	r3, r3
 8008512:	930a      	str	r3, [sp, #40]	; 0x28
 8008514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008516:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008518:	2b65      	cmp	r3, #101	; 0x65
 800851a:	d824      	bhi.n	8008566 <_printf_float+0x1a2>
 800851c:	0020      	movs	r0, r4
 800851e:	001a      	movs	r2, r3
 8008520:	3901      	subs	r1, #1
 8008522:	3050      	adds	r0, #80	; 0x50
 8008524:	9111      	str	r1, [sp, #68]	; 0x44
 8008526:	f7ff ff08 	bl	800833a <__exponent>
 800852a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800852c:	900b      	str	r0, [sp, #44]	; 0x2c
 800852e:	1813      	adds	r3, r2, r0
 8008530:	6123      	str	r3, [r4, #16]
 8008532:	2a01      	cmp	r2, #1
 8008534:	dc02      	bgt.n	800853c <_printf_float+0x178>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	07d2      	lsls	r2, r2, #31
 800853a:	d501      	bpl.n	8008540 <_printf_float+0x17c>
 800853c:	3301      	adds	r3, #1
 800853e:	6123      	str	r3, [r4, #16]
 8008540:	2323      	movs	r3, #35	; 0x23
 8008542:	aa08      	add	r2, sp, #32
 8008544:	189b      	adds	r3, r3, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d100      	bne.n	800854e <_printf_float+0x18a>
 800854c:	e78d      	b.n	800846a <_printf_float+0xa6>
 800854e:	0023      	movs	r3, r4
 8008550:	222d      	movs	r2, #45	; 0x2d
 8008552:	3343      	adds	r3, #67	; 0x43
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e788      	b.n	800846a <_printf_float+0xa6>
 8008558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800855a:	2a47      	cmp	r2, #71	; 0x47
 800855c:	d1b3      	bne.n	80084c6 <_printf_float+0x102>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1b1      	bne.n	80084c6 <_printf_float+0x102>
 8008562:	3301      	adds	r3, #1
 8008564:	e7ae      	b.n	80084c4 <_printf_float+0x100>
 8008566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008568:	2b66      	cmp	r3, #102	; 0x66
 800856a:	d11b      	bne.n	80085a4 <_printf_float+0x1e0>
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	2900      	cmp	r1, #0
 8008570:	dd09      	ble.n	8008586 <_printf_float+0x1c2>
 8008572:	6121      	str	r1, [r4, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <_printf_float+0x1ba>
 8008578:	6822      	ldr	r2, [r4, #0]
 800857a:	07d2      	lsls	r2, r2, #31
 800857c:	d50b      	bpl.n	8008596 <_printf_float+0x1d2>
 800857e:	3301      	adds	r3, #1
 8008580:	185b      	adds	r3, r3, r1
 8008582:	6123      	str	r3, [r4, #16]
 8008584:	e007      	b.n	8008596 <_printf_float+0x1d2>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <_printf_float+0x1ce>
 800858a:	2201      	movs	r2, #1
 800858c:	6821      	ldr	r1, [r4, #0]
 800858e:	4211      	tst	r1, r2
 8008590:	d000      	beq.n	8008594 <_printf_float+0x1d0>
 8008592:	1c9a      	adds	r2, r3, #2
 8008594:	6122      	str	r2, [r4, #16]
 8008596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008598:	65a3      	str	r3, [r4, #88]	; 0x58
 800859a:	2300      	movs	r3, #0
 800859c:	930b      	str	r3, [sp, #44]	; 0x2c
 800859e:	e7cf      	b.n	8008540 <_printf_float+0x17c>
 80085a0:	2367      	movs	r3, #103	; 0x67
 80085a2:	930a      	str	r3, [sp, #40]	; 0x28
 80085a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085a8:	4299      	cmp	r1, r3
 80085aa:	db06      	blt.n	80085ba <_printf_float+0x1f6>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	6121      	str	r1, [r4, #16]
 80085b0:	07db      	lsls	r3, r3, #31
 80085b2:	d5f0      	bpl.n	8008596 <_printf_float+0x1d2>
 80085b4:	3101      	adds	r1, #1
 80085b6:	6121      	str	r1, [r4, #16]
 80085b8:	e7ed      	b.n	8008596 <_printf_float+0x1d2>
 80085ba:	2201      	movs	r2, #1
 80085bc:	2900      	cmp	r1, #0
 80085be:	dc01      	bgt.n	80085c4 <_printf_float+0x200>
 80085c0:	1892      	adds	r2, r2, r2
 80085c2:	1a52      	subs	r2, r2, r1
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	e7dc      	b.n	8008582 <_printf_float+0x1be>
 80085c8:	6822      	ldr	r2, [r4, #0]
 80085ca:	0553      	lsls	r3, r2, #21
 80085cc:	d408      	bmi.n	80085e0 <_printf_float+0x21c>
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	002a      	movs	r2, r5
 80085d2:	0038      	movs	r0, r7
 80085d4:	9908      	ldr	r1, [sp, #32]
 80085d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085d8:	47a8      	blx	r5
 80085da:	3001      	adds	r0, #1
 80085dc:	d12a      	bne.n	8008634 <_printf_float+0x270>
 80085de:	e74f      	b.n	8008480 <_printf_float+0xbc>
 80085e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e2:	2b65      	cmp	r3, #101	; 0x65
 80085e4:	d800      	bhi.n	80085e8 <_printf_float+0x224>
 80085e6:	e0ec      	b.n	80087c2 <_printf_float+0x3fe>
 80085e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80085ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	f7f7 ff2c 	bl	800044c <__aeabi_dcmpeq>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d034      	beq.n	8008662 <_printf_float+0x29e>
 80085f8:	2301      	movs	r3, #1
 80085fa:	0038      	movs	r0, r7
 80085fc:	4a37      	ldr	r2, [pc, #220]	; (80086dc <_printf_float+0x318>)
 80085fe:	9908      	ldr	r1, [sp, #32]
 8008600:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008602:	47a8      	blx	r5
 8008604:	3001      	adds	r0, #1
 8008606:	d100      	bne.n	800860a <_printf_float+0x246>
 8008608:	e73a      	b.n	8008480 <_printf_float+0xbc>
 800860a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800860c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800860e:	429a      	cmp	r2, r3
 8008610:	db02      	blt.n	8008618 <_printf_float+0x254>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	07db      	lsls	r3, r3, #31
 8008616:	d50d      	bpl.n	8008634 <_printf_float+0x270>
 8008618:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800861a:	0038      	movs	r0, r7
 800861c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800861e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008620:	9908      	ldr	r1, [sp, #32]
 8008622:	47a8      	blx	r5
 8008624:	2500      	movs	r5, #0
 8008626:	3001      	adds	r0, #1
 8008628:	d100      	bne.n	800862c <_printf_float+0x268>
 800862a:	e729      	b.n	8008480 <_printf_float+0xbc>
 800862c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800862e:	3b01      	subs	r3, #1
 8008630:	42ab      	cmp	r3, r5
 8008632:	dc0a      	bgt.n	800864a <_printf_float+0x286>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	079b      	lsls	r3, r3, #30
 8008638:	d500      	bpl.n	800863c <_printf_float+0x278>
 800863a:	e116      	b.n	800886a <_printf_float+0x4a6>
 800863c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800863e:	68e0      	ldr	r0, [r4, #12]
 8008640:	4298      	cmp	r0, r3
 8008642:	db00      	blt.n	8008646 <_printf_float+0x282>
 8008644:	e71e      	b.n	8008484 <_printf_float+0xc0>
 8008646:	0018      	movs	r0, r3
 8008648:	e71c      	b.n	8008484 <_printf_float+0xc0>
 800864a:	0022      	movs	r2, r4
 800864c:	2301      	movs	r3, #1
 800864e:	0038      	movs	r0, r7
 8008650:	9908      	ldr	r1, [sp, #32]
 8008652:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008654:	321a      	adds	r2, #26
 8008656:	47b0      	blx	r6
 8008658:	3001      	adds	r0, #1
 800865a:	d100      	bne.n	800865e <_printf_float+0x29a>
 800865c:	e710      	b.n	8008480 <_printf_float+0xbc>
 800865e:	3501      	adds	r5, #1
 8008660:	e7e4      	b.n	800862c <_printf_float+0x268>
 8008662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008664:	2b00      	cmp	r3, #0
 8008666:	dc3b      	bgt.n	80086e0 <_printf_float+0x31c>
 8008668:	2301      	movs	r3, #1
 800866a:	0038      	movs	r0, r7
 800866c:	4a1b      	ldr	r2, [pc, #108]	; (80086dc <_printf_float+0x318>)
 800866e:	9908      	ldr	r1, [sp, #32]
 8008670:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008672:	47b0      	blx	r6
 8008674:	3001      	adds	r0, #1
 8008676:	d100      	bne.n	800867a <_printf_float+0x2b6>
 8008678:	e702      	b.n	8008480 <_printf_float+0xbc>
 800867a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800867c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800867e:	4313      	orrs	r3, r2
 8008680:	d102      	bne.n	8008688 <_printf_float+0x2c4>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	07db      	lsls	r3, r3, #31
 8008686:	d5d5      	bpl.n	8008634 <_printf_float+0x270>
 8008688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800868a:	0038      	movs	r0, r7
 800868c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800868e:	9908      	ldr	r1, [sp, #32]
 8008690:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008692:	47b0      	blx	r6
 8008694:	2300      	movs	r3, #0
 8008696:	3001      	adds	r0, #1
 8008698:	d100      	bne.n	800869c <_printf_float+0x2d8>
 800869a:	e6f1      	b.n	8008480 <_printf_float+0xbc>
 800869c:	930a      	str	r3, [sp, #40]	; 0x28
 800869e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a2:	425b      	negs	r3, r3
 80086a4:	4293      	cmp	r3, r2
 80086a6:	dc01      	bgt.n	80086ac <_printf_float+0x2e8>
 80086a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086aa:	e791      	b.n	80085d0 <_printf_float+0x20c>
 80086ac:	0022      	movs	r2, r4
 80086ae:	2301      	movs	r3, #1
 80086b0:	0038      	movs	r0, r7
 80086b2:	9908      	ldr	r1, [sp, #32]
 80086b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80086b6:	321a      	adds	r2, #26
 80086b8:	47b0      	blx	r6
 80086ba:	3001      	adds	r0, #1
 80086bc:	d100      	bne.n	80086c0 <_printf_float+0x2fc>
 80086be:	e6df      	b.n	8008480 <_printf_float+0xbc>
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	3301      	adds	r3, #1
 80086c4:	e7ea      	b.n	800869c <_printf_float+0x2d8>
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	7fefffff 	.word	0x7fefffff
 80086cc:	0800c259 	.word	0x0800c259
 80086d0:	0800c25d 	.word	0x0800c25d
 80086d4:	0800c261 	.word	0x0800c261
 80086d8:	0800c265 	.word	0x0800c265
 80086dc:	0800c269 	.word	0x0800c269
 80086e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086e4:	920a      	str	r2, [sp, #40]	; 0x28
 80086e6:	429a      	cmp	r2, r3
 80086e8:	dd00      	ble.n	80086ec <_printf_float+0x328>
 80086ea:	930a      	str	r3, [sp, #40]	; 0x28
 80086ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dc3d      	bgt.n	800876e <_printf_float+0x3aa>
 80086f2:	2300      	movs	r3, #0
 80086f4:	930e      	str	r3, [sp, #56]	; 0x38
 80086f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f8:	43db      	mvns	r3, r3
 80086fa:	17db      	asrs	r3, r3, #31
 80086fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80086fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008702:	930b      	str	r3, [sp, #44]	; 0x2c
 8008704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008706:	4013      	ands	r3, r2
 8008708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800870e:	4293      	cmp	r3, r2
 8008710:	dc36      	bgt.n	8008780 <_printf_float+0x3bc>
 8008712:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008716:	429a      	cmp	r2, r3
 8008718:	db40      	blt.n	800879c <_printf_float+0x3d8>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	07db      	lsls	r3, r3, #31
 800871e:	d43d      	bmi.n	800879c <_printf_float+0x3d8>
 8008720:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008722:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008726:	1af3      	subs	r3, r6, r3
 8008728:	1ab6      	subs	r6, r6, r2
 800872a:	429e      	cmp	r6, r3
 800872c:	dd00      	ble.n	8008730 <_printf_float+0x36c>
 800872e:	001e      	movs	r6, r3
 8008730:	2e00      	cmp	r6, #0
 8008732:	dc3c      	bgt.n	80087ae <_printf_float+0x3ea>
 8008734:	2300      	movs	r3, #0
 8008736:	930a      	str	r3, [sp, #40]	; 0x28
 8008738:	43f3      	mvns	r3, r6
 800873a:	17db      	asrs	r3, r3, #31
 800873c:	930b      	str	r3, [sp, #44]	; 0x2c
 800873e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008746:	4032      	ands	r2, r6
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800874c:	4293      	cmp	r3, r2
 800874e:	dc00      	bgt.n	8008752 <_printf_float+0x38e>
 8008750:	e770      	b.n	8008634 <_printf_float+0x270>
 8008752:	0022      	movs	r2, r4
 8008754:	2301      	movs	r3, #1
 8008756:	0038      	movs	r0, r7
 8008758:	9908      	ldr	r1, [sp, #32]
 800875a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800875c:	321a      	adds	r2, #26
 800875e:	47a8      	blx	r5
 8008760:	3001      	adds	r0, #1
 8008762:	d100      	bne.n	8008766 <_printf_float+0x3a2>
 8008764:	e68c      	b.n	8008480 <_printf_float+0xbc>
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	3301      	adds	r3, #1
 800876a:	930a      	str	r3, [sp, #40]	; 0x28
 800876c:	e7e7      	b.n	800873e <_printf_float+0x37a>
 800876e:	002a      	movs	r2, r5
 8008770:	0038      	movs	r0, r7
 8008772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008774:	9908      	ldr	r1, [sp, #32]
 8008776:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008778:	47b0      	blx	r6
 800877a:	3001      	adds	r0, #1
 800877c:	d1b9      	bne.n	80086f2 <_printf_float+0x32e>
 800877e:	e67f      	b.n	8008480 <_printf_float+0xbc>
 8008780:	0022      	movs	r2, r4
 8008782:	2301      	movs	r3, #1
 8008784:	0038      	movs	r0, r7
 8008786:	9908      	ldr	r1, [sp, #32]
 8008788:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800878a:	321a      	adds	r2, #26
 800878c:	47b0      	blx	r6
 800878e:	3001      	adds	r0, #1
 8008790:	d100      	bne.n	8008794 <_printf_float+0x3d0>
 8008792:	e675      	b.n	8008480 <_printf_float+0xbc>
 8008794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008796:	3301      	adds	r3, #1
 8008798:	930e      	str	r3, [sp, #56]	; 0x38
 800879a:	e7b0      	b.n	80086fe <_printf_float+0x33a>
 800879c:	0038      	movs	r0, r7
 800879e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087a2:	9908      	ldr	r1, [sp, #32]
 80087a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087a6:	47b0      	blx	r6
 80087a8:	3001      	adds	r0, #1
 80087aa:	d1b9      	bne.n	8008720 <_printf_float+0x35c>
 80087ac:	e668      	b.n	8008480 <_printf_float+0xbc>
 80087ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b0:	0038      	movs	r0, r7
 80087b2:	18ea      	adds	r2, r5, r3
 80087b4:	9908      	ldr	r1, [sp, #32]
 80087b6:	0033      	movs	r3, r6
 80087b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087ba:	47a8      	blx	r5
 80087bc:	3001      	adds	r0, #1
 80087be:	d1b9      	bne.n	8008734 <_printf_float+0x370>
 80087c0:	e65e      	b.n	8008480 <_printf_float+0xbc>
 80087c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	dc02      	bgt.n	80087ce <_printf_float+0x40a>
 80087c8:	2301      	movs	r3, #1
 80087ca:	421a      	tst	r2, r3
 80087cc:	d03a      	beq.n	8008844 <_printf_float+0x480>
 80087ce:	2301      	movs	r3, #1
 80087d0:	002a      	movs	r2, r5
 80087d2:	0038      	movs	r0, r7
 80087d4:	9908      	ldr	r1, [sp, #32]
 80087d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087d8:	47b0      	blx	r6
 80087da:	3001      	adds	r0, #1
 80087dc:	d100      	bne.n	80087e0 <_printf_float+0x41c>
 80087de:	e64f      	b.n	8008480 <_printf_float+0xbc>
 80087e0:	0038      	movs	r0, r7
 80087e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087e6:	9908      	ldr	r1, [sp, #32]
 80087e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087ea:	47b0      	blx	r6
 80087ec:	3001      	adds	r0, #1
 80087ee:	d100      	bne.n	80087f2 <_printf_float+0x42e>
 80087f0:	e646      	b.n	8008480 <_printf_float+0xbc>
 80087f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80087f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80087f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087f8:	2200      	movs	r2, #0
 80087fa:	001e      	movs	r6, r3
 80087fc:	2300      	movs	r3, #0
 80087fe:	f7f7 fe25 	bl	800044c <__aeabi_dcmpeq>
 8008802:	2800      	cmp	r0, #0
 8008804:	d11c      	bne.n	8008840 <_printf_float+0x47c>
 8008806:	0033      	movs	r3, r6
 8008808:	1c6a      	adds	r2, r5, #1
 800880a:	3b01      	subs	r3, #1
 800880c:	0038      	movs	r0, r7
 800880e:	9908      	ldr	r1, [sp, #32]
 8008810:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008812:	47a8      	blx	r5
 8008814:	3001      	adds	r0, #1
 8008816:	d10f      	bne.n	8008838 <_printf_float+0x474>
 8008818:	e632      	b.n	8008480 <_printf_float+0xbc>
 800881a:	0022      	movs	r2, r4
 800881c:	2301      	movs	r3, #1
 800881e:	0038      	movs	r0, r7
 8008820:	9908      	ldr	r1, [sp, #32]
 8008822:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008824:	321a      	adds	r2, #26
 8008826:	47b0      	blx	r6
 8008828:	3001      	adds	r0, #1
 800882a:	d100      	bne.n	800882e <_printf_float+0x46a>
 800882c:	e628      	b.n	8008480 <_printf_float+0xbc>
 800882e:	3501      	adds	r5, #1
 8008830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008832:	3b01      	subs	r3, #1
 8008834:	42ab      	cmp	r3, r5
 8008836:	dcf0      	bgt.n	800881a <_printf_float+0x456>
 8008838:	0022      	movs	r2, r4
 800883a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800883c:	3250      	adds	r2, #80	; 0x50
 800883e:	e6c8      	b.n	80085d2 <_printf_float+0x20e>
 8008840:	2500      	movs	r5, #0
 8008842:	e7f5      	b.n	8008830 <_printf_float+0x46c>
 8008844:	002a      	movs	r2, r5
 8008846:	e7e1      	b.n	800880c <_printf_float+0x448>
 8008848:	0022      	movs	r2, r4
 800884a:	2301      	movs	r3, #1
 800884c:	0038      	movs	r0, r7
 800884e:	9908      	ldr	r1, [sp, #32]
 8008850:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008852:	3219      	adds	r2, #25
 8008854:	47b0      	blx	r6
 8008856:	3001      	adds	r0, #1
 8008858:	d100      	bne.n	800885c <_printf_float+0x498>
 800885a:	e611      	b.n	8008480 <_printf_float+0xbc>
 800885c:	3501      	adds	r5, #1
 800885e:	68e3      	ldr	r3, [r4, #12]
 8008860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	42ab      	cmp	r3, r5
 8008866:	dcef      	bgt.n	8008848 <_printf_float+0x484>
 8008868:	e6e8      	b.n	800863c <_printf_float+0x278>
 800886a:	2500      	movs	r5, #0
 800886c:	e7f7      	b.n	800885e <_printf_float+0x49a>
 800886e:	46c0      	nop			; (mov r8, r8)

08008870 <_printf_common>:
 8008870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008872:	0016      	movs	r6, r2
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	688a      	ldr	r2, [r1, #8]
 8008878:	690b      	ldr	r3, [r1, #16]
 800887a:	000c      	movs	r4, r1
 800887c:	9000      	str	r0, [sp, #0]
 800887e:	4293      	cmp	r3, r2
 8008880:	da00      	bge.n	8008884 <_printf_common+0x14>
 8008882:	0013      	movs	r3, r2
 8008884:	0022      	movs	r2, r4
 8008886:	6033      	str	r3, [r6, #0]
 8008888:	3243      	adds	r2, #67	; 0x43
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	2a00      	cmp	r2, #0
 800888e:	d001      	beq.n	8008894 <_printf_common+0x24>
 8008890:	3301      	adds	r3, #1
 8008892:	6033      	str	r3, [r6, #0]
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	069b      	lsls	r3, r3, #26
 8008898:	d502      	bpl.n	80088a0 <_printf_common+0x30>
 800889a:	6833      	ldr	r3, [r6, #0]
 800889c:	3302      	adds	r3, #2
 800889e:	6033      	str	r3, [r6, #0]
 80088a0:	6822      	ldr	r2, [r4, #0]
 80088a2:	2306      	movs	r3, #6
 80088a4:	0015      	movs	r5, r2
 80088a6:	401d      	ands	r5, r3
 80088a8:	421a      	tst	r2, r3
 80088aa:	d027      	beq.n	80088fc <_printf_common+0x8c>
 80088ac:	0023      	movs	r3, r4
 80088ae:	3343      	adds	r3, #67	; 0x43
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	4193      	sbcs	r3, r2
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	0692      	lsls	r2, r2, #26
 80088ba:	d430      	bmi.n	800891e <_printf_common+0xae>
 80088bc:	0022      	movs	r2, r4
 80088be:	9901      	ldr	r1, [sp, #4]
 80088c0:	9800      	ldr	r0, [sp, #0]
 80088c2:	9d08      	ldr	r5, [sp, #32]
 80088c4:	3243      	adds	r2, #67	; 0x43
 80088c6:	47a8      	blx	r5
 80088c8:	3001      	adds	r0, #1
 80088ca:	d025      	beq.n	8008918 <_printf_common+0xa8>
 80088cc:	2206      	movs	r2, #6
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	2500      	movs	r5, #0
 80088d2:	4013      	ands	r3, r2
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d105      	bne.n	80088e4 <_printf_common+0x74>
 80088d8:	6833      	ldr	r3, [r6, #0]
 80088da:	68e5      	ldr	r5, [r4, #12]
 80088dc:	1aed      	subs	r5, r5, r3
 80088de:	43eb      	mvns	r3, r5
 80088e0:	17db      	asrs	r3, r3, #31
 80088e2:	401d      	ands	r5, r3
 80088e4:	68a3      	ldr	r3, [r4, #8]
 80088e6:	6922      	ldr	r2, [r4, #16]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	dd01      	ble.n	80088f0 <_printf_common+0x80>
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	18ed      	adds	r5, r5, r3
 80088f0:	2600      	movs	r6, #0
 80088f2:	42b5      	cmp	r5, r6
 80088f4:	d120      	bne.n	8008938 <_printf_common+0xc8>
 80088f6:	2000      	movs	r0, #0
 80088f8:	e010      	b.n	800891c <_printf_common+0xac>
 80088fa:	3501      	adds	r5, #1
 80088fc:	68e3      	ldr	r3, [r4, #12]
 80088fe:	6832      	ldr	r2, [r6, #0]
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	42ab      	cmp	r3, r5
 8008904:	ddd2      	ble.n	80088ac <_printf_common+0x3c>
 8008906:	0022      	movs	r2, r4
 8008908:	2301      	movs	r3, #1
 800890a:	9901      	ldr	r1, [sp, #4]
 800890c:	9800      	ldr	r0, [sp, #0]
 800890e:	9f08      	ldr	r7, [sp, #32]
 8008910:	3219      	adds	r2, #25
 8008912:	47b8      	blx	r7
 8008914:	3001      	adds	r0, #1
 8008916:	d1f0      	bne.n	80088fa <_printf_common+0x8a>
 8008918:	2001      	movs	r0, #1
 800891a:	4240      	negs	r0, r0
 800891c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800891e:	2030      	movs	r0, #48	; 0x30
 8008920:	18e1      	adds	r1, r4, r3
 8008922:	3143      	adds	r1, #67	; 0x43
 8008924:	7008      	strb	r0, [r1, #0]
 8008926:	0021      	movs	r1, r4
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	3145      	adds	r1, #69	; 0x45
 800892c:	7809      	ldrb	r1, [r1, #0]
 800892e:	18a2      	adds	r2, r4, r2
 8008930:	3243      	adds	r2, #67	; 0x43
 8008932:	3302      	adds	r3, #2
 8008934:	7011      	strb	r1, [r2, #0]
 8008936:	e7c1      	b.n	80088bc <_printf_common+0x4c>
 8008938:	0022      	movs	r2, r4
 800893a:	2301      	movs	r3, #1
 800893c:	9901      	ldr	r1, [sp, #4]
 800893e:	9800      	ldr	r0, [sp, #0]
 8008940:	9f08      	ldr	r7, [sp, #32]
 8008942:	321a      	adds	r2, #26
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	d0e6      	beq.n	8008918 <_printf_common+0xa8>
 800894a:	3601      	adds	r6, #1
 800894c:	e7d1      	b.n	80088f2 <_printf_common+0x82>
	...

08008950 <_printf_i>:
 8008950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008952:	b08b      	sub	sp, #44	; 0x2c
 8008954:	9206      	str	r2, [sp, #24]
 8008956:	000a      	movs	r2, r1
 8008958:	3243      	adds	r2, #67	; 0x43
 800895a:	9307      	str	r3, [sp, #28]
 800895c:	9005      	str	r0, [sp, #20]
 800895e:	9204      	str	r2, [sp, #16]
 8008960:	7e0a      	ldrb	r2, [r1, #24]
 8008962:	000c      	movs	r4, r1
 8008964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008966:	2a78      	cmp	r2, #120	; 0x78
 8008968:	d809      	bhi.n	800897e <_printf_i+0x2e>
 800896a:	2a62      	cmp	r2, #98	; 0x62
 800896c:	d80b      	bhi.n	8008986 <_printf_i+0x36>
 800896e:	2a00      	cmp	r2, #0
 8008970:	d100      	bne.n	8008974 <_printf_i+0x24>
 8008972:	e0be      	b.n	8008af2 <_printf_i+0x1a2>
 8008974:	497c      	ldr	r1, [pc, #496]	; (8008b68 <_printf_i+0x218>)
 8008976:	9103      	str	r1, [sp, #12]
 8008978:	2a58      	cmp	r2, #88	; 0x58
 800897a:	d100      	bne.n	800897e <_printf_i+0x2e>
 800897c:	e093      	b.n	8008aa6 <_printf_i+0x156>
 800897e:	0026      	movs	r6, r4
 8008980:	3642      	adds	r6, #66	; 0x42
 8008982:	7032      	strb	r2, [r6, #0]
 8008984:	e022      	b.n	80089cc <_printf_i+0x7c>
 8008986:	0010      	movs	r0, r2
 8008988:	3863      	subs	r0, #99	; 0x63
 800898a:	2815      	cmp	r0, #21
 800898c:	d8f7      	bhi.n	800897e <_printf_i+0x2e>
 800898e:	f7f7 fbcd 	bl	800012c <__gnu_thumb1_case_shi>
 8008992:	0016      	.short	0x0016
 8008994:	fff6001f 	.word	0xfff6001f
 8008998:	fff6fff6 	.word	0xfff6fff6
 800899c:	001ffff6 	.word	0x001ffff6
 80089a0:	fff6fff6 	.word	0xfff6fff6
 80089a4:	fff6fff6 	.word	0xfff6fff6
 80089a8:	003600a3 	.word	0x003600a3
 80089ac:	fff60083 	.word	0xfff60083
 80089b0:	00b4fff6 	.word	0x00b4fff6
 80089b4:	0036fff6 	.word	0x0036fff6
 80089b8:	fff6fff6 	.word	0xfff6fff6
 80089bc:	0087      	.short	0x0087
 80089be:	0026      	movs	r6, r4
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	3642      	adds	r6, #66	; 0x42
 80089c4:	1d11      	adds	r1, r2, #4
 80089c6:	6019      	str	r1, [r3, #0]
 80089c8:	6813      	ldr	r3, [r2, #0]
 80089ca:	7033      	strb	r3, [r6, #0]
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0a2      	b.n	8008b16 <_printf_i+0x1c6>
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	6809      	ldr	r1, [r1, #0]
 80089d4:	1d02      	adds	r2, r0, #4
 80089d6:	060d      	lsls	r5, r1, #24
 80089d8:	d50b      	bpl.n	80089f2 <_printf_i+0xa2>
 80089da:	6805      	ldr	r5, [r0, #0]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	2d00      	cmp	r5, #0
 80089e0:	da03      	bge.n	80089ea <_printf_i+0x9a>
 80089e2:	232d      	movs	r3, #45	; 0x2d
 80089e4:	9a04      	ldr	r2, [sp, #16]
 80089e6:	426d      	negs	r5, r5
 80089e8:	7013      	strb	r3, [r2, #0]
 80089ea:	4b5f      	ldr	r3, [pc, #380]	; (8008b68 <_printf_i+0x218>)
 80089ec:	270a      	movs	r7, #10
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	e01b      	b.n	8008a2a <_printf_i+0xda>
 80089f2:	6805      	ldr	r5, [r0, #0]
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	0649      	lsls	r1, r1, #25
 80089f8:	d5f1      	bpl.n	80089de <_printf_i+0x8e>
 80089fa:	b22d      	sxth	r5, r5
 80089fc:	e7ef      	b.n	80089de <_printf_i+0x8e>
 80089fe:	680d      	ldr	r5, [r1, #0]
 8008a00:	6819      	ldr	r1, [r3, #0]
 8008a02:	1d08      	adds	r0, r1, #4
 8008a04:	6018      	str	r0, [r3, #0]
 8008a06:	062e      	lsls	r6, r5, #24
 8008a08:	d501      	bpl.n	8008a0e <_printf_i+0xbe>
 8008a0a:	680d      	ldr	r5, [r1, #0]
 8008a0c:	e003      	b.n	8008a16 <_printf_i+0xc6>
 8008a0e:	066d      	lsls	r5, r5, #25
 8008a10:	d5fb      	bpl.n	8008a0a <_printf_i+0xba>
 8008a12:	680d      	ldr	r5, [r1, #0]
 8008a14:	b2ad      	uxth	r5, r5
 8008a16:	4b54      	ldr	r3, [pc, #336]	; (8008b68 <_printf_i+0x218>)
 8008a18:	2708      	movs	r7, #8
 8008a1a:	9303      	str	r3, [sp, #12]
 8008a1c:	2a6f      	cmp	r2, #111	; 0x6f
 8008a1e:	d000      	beq.n	8008a22 <_printf_i+0xd2>
 8008a20:	3702      	adds	r7, #2
 8008a22:	0023      	movs	r3, r4
 8008a24:	2200      	movs	r2, #0
 8008a26:	3343      	adds	r3, #67	; 0x43
 8008a28:	701a      	strb	r2, [r3, #0]
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	60a3      	str	r3, [r4, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	db03      	blt.n	8008a3a <_printf_i+0xea>
 8008a32:	2104      	movs	r1, #4
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	438a      	bics	r2, r1
 8008a38:	6022      	str	r2, [r4, #0]
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	d102      	bne.n	8008a44 <_printf_i+0xf4>
 8008a3e:	9e04      	ldr	r6, [sp, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00c      	beq.n	8008a5e <_printf_i+0x10e>
 8008a44:	9e04      	ldr	r6, [sp, #16]
 8008a46:	0028      	movs	r0, r5
 8008a48:	0039      	movs	r1, r7
 8008a4a:	f7f7 fbff 	bl	800024c <__aeabi_uidivmod>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	3e01      	subs	r6, #1
 8008a52:	5c5b      	ldrb	r3, [r3, r1]
 8008a54:	7033      	strb	r3, [r6, #0]
 8008a56:	002b      	movs	r3, r5
 8008a58:	0005      	movs	r5, r0
 8008a5a:	429f      	cmp	r7, r3
 8008a5c:	d9f3      	bls.n	8008a46 <_printf_i+0xf6>
 8008a5e:	2f08      	cmp	r7, #8
 8008a60:	d109      	bne.n	8008a76 <_printf_i+0x126>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	07db      	lsls	r3, r3, #31
 8008a66:	d506      	bpl.n	8008a76 <_printf_i+0x126>
 8008a68:	6862      	ldr	r2, [r4, #4]
 8008a6a:	6923      	ldr	r3, [r4, #16]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	dc02      	bgt.n	8008a76 <_printf_i+0x126>
 8008a70:	2330      	movs	r3, #48	; 0x30
 8008a72:	3e01      	subs	r6, #1
 8008a74:	7033      	strb	r3, [r6, #0]
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	1b9b      	subs	r3, r3, r6
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	0021      	movs	r1, r4
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	9805      	ldr	r0, [sp, #20]
 8008a84:	9b06      	ldr	r3, [sp, #24]
 8008a86:	aa09      	add	r2, sp, #36	; 0x24
 8008a88:	f7ff fef2 	bl	8008870 <_printf_common>
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d147      	bne.n	8008b20 <_printf_i+0x1d0>
 8008a90:	2001      	movs	r0, #1
 8008a92:	4240      	negs	r0, r0
 8008a94:	b00b      	add	sp, #44	; 0x2c
 8008a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a98:	2220      	movs	r2, #32
 8008a9a:	6809      	ldr	r1, [r1, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	6022      	str	r2, [r4, #0]
 8008aa0:	2278      	movs	r2, #120	; 0x78
 8008aa2:	4932      	ldr	r1, [pc, #200]	; (8008b6c <_printf_i+0x21c>)
 8008aa4:	9103      	str	r1, [sp, #12]
 8008aa6:	0021      	movs	r1, r4
 8008aa8:	3145      	adds	r1, #69	; 0x45
 8008aaa:	700a      	strb	r2, [r1, #0]
 8008aac:	6819      	ldr	r1, [r3, #0]
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	c920      	ldmia	r1!, {r5}
 8008ab2:	0610      	lsls	r0, r2, #24
 8008ab4:	d402      	bmi.n	8008abc <_printf_i+0x16c>
 8008ab6:	0650      	lsls	r0, r2, #25
 8008ab8:	d500      	bpl.n	8008abc <_printf_i+0x16c>
 8008aba:	b2ad      	uxth	r5, r5
 8008abc:	6019      	str	r1, [r3, #0]
 8008abe:	07d3      	lsls	r3, r2, #31
 8008ac0:	d502      	bpl.n	8008ac8 <_printf_i+0x178>
 8008ac2:	2320      	movs	r3, #32
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	2710      	movs	r7, #16
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	d1a9      	bne.n	8008a22 <_printf_i+0xd2>
 8008ace:	2220      	movs	r2, #32
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	4393      	bics	r3, r2
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	e7a4      	b.n	8008a22 <_printf_i+0xd2>
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	680d      	ldr	r5, [r1, #0]
 8008adc:	1d10      	adds	r0, r2, #4
 8008ade:	6949      	ldr	r1, [r1, #20]
 8008ae0:	6018      	str	r0, [r3, #0]
 8008ae2:	6813      	ldr	r3, [r2, #0]
 8008ae4:	062e      	lsls	r6, r5, #24
 8008ae6:	d501      	bpl.n	8008aec <_printf_i+0x19c>
 8008ae8:	6019      	str	r1, [r3, #0]
 8008aea:	e002      	b.n	8008af2 <_printf_i+0x1a2>
 8008aec:	066d      	lsls	r5, r5, #25
 8008aee:	d5fb      	bpl.n	8008ae8 <_printf_i+0x198>
 8008af0:	8019      	strh	r1, [r3, #0]
 8008af2:	2300      	movs	r3, #0
 8008af4:	9e04      	ldr	r6, [sp, #16]
 8008af6:	6123      	str	r3, [r4, #16]
 8008af8:	e7c0      	b.n	8008a7c <_printf_i+0x12c>
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	1d11      	adds	r1, r2, #4
 8008afe:	6019      	str	r1, [r3, #0]
 8008b00:	6816      	ldr	r6, [r2, #0]
 8008b02:	2100      	movs	r1, #0
 8008b04:	0030      	movs	r0, r6
 8008b06:	6862      	ldr	r2, [r4, #4]
 8008b08:	f000 fd19 	bl	800953e <memchr>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d001      	beq.n	8008b14 <_printf_i+0x1c4>
 8008b10:	1b80      	subs	r0, r0, r6
 8008b12:	6060      	str	r0, [r4, #4]
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9a04      	ldr	r2, [sp, #16]
 8008b1c:	7013      	strb	r3, [r2, #0]
 8008b1e:	e7ad      	b.n	8008a7c <_printf_i+0x12c>
 8008b20:	0032      	movs	r2, r6
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	9906      	ldr	r1, [sp, #24]
 8008b26:	9805      	ldr	r0, [sp, #20]
 8008b28:	9d07      	ldr	r5, [sp, #28]
 8008b2a:	47a8      	blx	r5
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d0af      	beq.n	8008a90 <_printf_i+0x140>
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	079b      	lsls	r3, r3, #30
 8008b34:	d415      	bmi.n	8008b62 <_printf_i+0x212>
 8008b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b38:	68e0      	ldr	r0, [r4, #12]
 8008b3a:	4298      	cmp	r0, r3
 8008b3c:	daaa      	bge.n	8008a94 <_printf_i+0x144>
 8008b3e:	0018      	movs	r0, r3
 8008b40:	e7a8      	b.n	8008a94 <_printf_i+0x144>
 8008b42:	0022      	movs	r2, r4
 8008b44:	2301      	movs	r3, #1
 8008b46:	9906      	ldr	r1, [sp, #24]
 8008b48:	9805      	ldr	r0, [sp, #20]
 8008b4a:	9e07      	ldr	r6, [sp, #28]
 8008b4c:	3219      	adds	r2, #25
 8008b4e:	47b0      	blx	r6
 8008b50:	3001      	adds	r0, #1
 8008b52:	d09d      	beq.n	8008a90 <_printf_i+0x140>
 8008b54:	3501      	adds	r5, #1
 8008b56:	68e3      	ldr	r3, [r4, #12]
 8008b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	dcf0      	bgt.n	8008b42 <_printf_i+0x1f2>
 8008b60:	e7e9      	b.n	8008b36 <_printf_i+0x1e6>
 8008b62:	2500      	movs	r5, #0
 8008b64:	e7f7      	b.n	8008b56 <_printf_i+0x206>
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	0800c26b 	.word	0x0800c26b
 8008b6c:	0800c27c 	.word	0x0800c27c

08008b70 <_scanf_float>:
 8008b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b72:	b08b      	sub	sp, #44	; 0x2c
 8008b74:	0016      	movs	r6, r2
 8008b76:	9002      	str	r0, [sp, #8]
 8008b78:	22ae      	movs	r2, #174	; 0xae
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	9307      	str	r3, [sp, #28]
 8008b7e:	688b      	ldr	r3, [r1, #8]
 8008b80:	000f      	movs	r7, r1
 8008b82:	1e59      	subs	r1, r3, #1
 8008b84:	0052      	lsls	r2, r2, #1
 8008b86:	9006      	str	r0, [sp, #24]
 8008b88:	4291      	cmp	r1, r2
 8008b8a:	d905      	bls.n	8008b98 <_scanf_float+0x28>
 8008b8c:	3b5e      	subs	r3, #94	; 0x5e
 8008b8e:	3bff      	subs	r3, #255	; 0xff
 8008b90:	9306      	str	r3, [sp, #24]
 8008b92:	235e      	movs	r3, #94	; 0x5e
 8008b94:	33ff      	adds	r3, #255	; 0xff
 8008b96:	60bb      	str	r3, [r7, #8]
 8008b98:	23f0      	movs	r3, #240	; 0xf0
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	003b      	movs	r3, r7
 8008ba4:	2400      	movs	r4, #0
 8008ba6:	331c      	adds	r3, #28
 8008ba8:	001d      	movs	r5, r3
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	9403      	str	r4, [sp, #12]
 8008bae:	9409      	str	r4, [sp, #36]	; 0x24
 8008bb0:	9408      	str	r4, [sp, #32]
 8008bb2:	9401      	str	r4, [sp, #4]
 8008bb4:	9405      	str	r4, [sp, #20]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	d00a      	beq.n	8008bd2 <_scanf_float+0x62>
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b4e      	cmp	r3, #78	; 0x4e
 8008bc2:	d844      	bhi.n	8008c4e <_scanf_float+0xde>
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	2b40      	cmp	r3, #64	; 0x40
 8008bc8:	d82c      	bhi.n	8008c24 <_scanf_float+0xb4>
 8008bca:	382b      	subs	r0, #43	; 0x2b
 8008bcc:	b2c1      	uxtb	r1, r0
 8008bce:	290e      	cmp	r1, #14
 8008bd0:	d92a      	bls.n	8008c28 <_scanf_float+0xb8>
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <_scanf_float+0x70>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	4aa3      	ldr	r2, [pc, #652]	; (8008e68 <_scanf_float+0x2f8>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	9b03      	ldr	r3, [sp, #12]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d900      	bls.n	8008bea <_scanf_float+0x7a>
 8008be8:	e0f9      	b.n	8008dde <_scanf_float+0x26e>
 8008bea:	24be      	movs	r4, #190	; 0xbe
 8008bec:	0064      	lsls	r4, r4, #1
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	429d      	cmp	r5, r3
 8008bf2:	d900      	bls.n	8008bf6 <_scanf_float+0x86>
 8008bf4:	e0e9      	b.n	8008dca <_scanf_float+0x25a>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	e183      	b.n	8008f04 <_scanf_float+0x394>
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	3861      	subs	r0, #97	; 0x61
 8008c00:	280d      	cmp	r0, #13
 8008c02:	d8e6      	bhi.n	8008bd2 <_scanf_float+0x62>
 8008c04:	f7f7 fa92 	bl	800012c <__gnu_thumb1_case_shi>
 8008c08:	ffe50083 	.word	0xffe50083
 8008c0c:	ffe5ffe5 	.word	0xffe5ffe5
 8008c10:	00a200b6 	.word	0x00a200b6
 8008c14:	ffe5ffe5 	.word	0xffe5ffe5
 8008c18:	ffe50089 	.word	0xffe50089
 8008c1c:	ffe5ffe5 	.word	0xffe5ffe5
 8008c20:	0065ffe5 	.word	0x0065ffe5
 8008c24:	3841      	subs	r0, #65	; 0x41
 8008c26:	e7eb      	b.n	8008c00 <_scanf_float+0x90>
 8008c28:	280e      	cmp	r0, #14
 8008c2a:	d8d2      	bhi.n	8008bd2 <_scanf_float+0x62>
 8008c2c:	f7f7 fa7e 	bl	800012c <__gnu_thumb1_case_shi>
 8008c30:	ffd1004b 	.word	0xffd1004b
 8008c34:	0098004b 	.word	0x0098004b
 8008c38:	0020ffd1 	.word	0x0020ffd1
 8008c3c:	00400040 	.word	0x00400040
 8008c40:	00400040 	.word	0x00400040
 8008c44:	00400040 	.word	0x00400040
 8008c48:	00400040 	.word	0x00400040
 8008c4c:	0040      	.short	0x0040
 8008c4e:	2b6e      	cmp	r3, #110	; 0x6e
 8008c50:	d809      	bhi.n	8008c66 <_scanf_float+0xf6>
 8008c52:	2b60      	cmp	r3, #96	; 0x60
 8008c54:	d8d2      	bhi.n	8008bfc <_scanf_float+0x8c>
 8008c56:	2b54      	cmp	r3, #84	; 0x54
 8008c58:	d07d      	beq.n	8008d56 <_scanf_float+0x1e6>
 8008c5a:	2b59      	cmp	r3, #89	; 0x59
 8008c5c:	d1b9      	bne.n	8008bd2 <_scanf_float+0x62>
 8008c5e:	2c07      	cmp	r4, #7
 8008c60:	d1b7      	bne.n	8008bd2 <_scanf_float+0x62>
 8008c62:	2408      	movs	r4, #8
 8008c64:	e02c      	b.n	8008cc0 <_scanf_float+0x150>
 8008c66:	2b74      	cmp	r3, #116	; 0x74
 8008c68:	d075      	beq.n	8008d56 <_scanf_float+0x1e6>
 8008c6a:	2b79      	cmp	r3, #121	; 0x79
 8008c6c:	d0f7      	beq.n	8008c5e <_scanf_float+0xee>
 8008c6e:	e7b0      	b.n	8008bd2 <_scanf_float+0x62>
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	05c8      	lsls	r0, r1, #23
 8008c74:	d51c      	bpl.n	8008cb0 <_scanf_float+0x140>
 8008c76:	2380      	movs	r3, #128	; 0x80
 8008c78:	4399      	bics	r1, r3
 8008c7a:	9b01      	ldr	r3, [sp, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	9b06      	ldr	r3, [sp, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <_scanf_float+0x120>
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	3201      	adds	r2, #1
 8008c8c:	9306      	str	r3, [sp, #24]
 8008c8e:	60ba      	str	r2, [r7, #8]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	60bb      	str	r3, [r7, #8]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	6873      	ldr	r3, [r6, #4]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	6073      	str	r3, [r6, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dc00      	bgt.n	8008ca8 <_scanf_float+0x138>
 8008ca6:	e086      	b.n	8008db6 <_scanf_float+0x246>
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	6033      	str	r3, [r6, #0]
 8008cae:	e782      	b.n	8008bb6 <_scanf_float+0x46>
 8008cb0:	9a03      	ldr	r2, [sp, #12]
 8008cb2:	1912      	adds	r2, r2, r4
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d18c      	bne.n	8008bd2 <_scanf_float+0x62>
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	496c      	ldr	r1, [pc, #432]	; (8008e6c <_scanf_float+0x2fc>)
 8008cbc:	400a      	ands	r2, r1
 8008cbe:	603a      	str	r2, [r7, #0]
 8008cc0:	702b      	strb	r3, [r5, #0]
 8008cc2:	3501      	adds	r5, #1
 8008cc4:	e7e4      	b.n	8008c90 <_scanf_float+0x120>
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	420a      	tst	r2, r1
 8008ccc:	d081      	beq.n	8008bd2 <_scanf_float+0x62>
 8008cce:	438a      	bics	r2, r1
 8008cd0:	e7f5      	b.n	8008cbe <_scanf_float+0x14e>
 8008cd2:	9a03      	ldr	r2, [sp, #12]
 8008cd4:	2a00      	cmp	r2, #0
 8008cd6:	d10f      	bne.n	8008cf8 <_scanf_float+0x188>
 8008cd8:	9a01      	ldr	r2, [sp, #4]
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	d10f      	bne.n	8008cfe <_scanf_float+0x18e>
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	21e0      	movs	r1, #224	; 0xe0
 8008ce2:	0010      	movs	r0, r2
 8008ce4:	00c9      	lsls	r1, r1, #3
 8008ce6:	4008      	ands	r0, r1
 8008ce8:	4288      	cmp	r0, r1
 8008cea:	d108      	bne.n	8008cfe <_scanf_float+0x18e>
 8008cec:	4960      	ldr	r1, [pc, #384]	; (8008e70 <_scanf_float+0x300>)
 8008cee:	400a      	ands	r2, r1
 8008cf0:	603a      	str	r2, [r7, #0]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	9203      	str	r2, [sp, #12]
 8008cf6:	e7e3      	b.n	8008cc0 <_scanf_float+0x150>
 8008cf8:	9a03      	ldr	r2, [sp, #12]
 8008cfa:	2a02      	cmp	r2, #2
 8008cfc:	d059      	beq.n	8008db2 <_scanf_float+0x242>
 8008cfe:	2c01      	cmp	r4, #1
 8008d00:	d002      	beq.n	8008d08 <_scanf_float+0x198>
 8008d02:	2c04      	cmp	r4, #4
 8008d04:	d000      	beq.n	8008d08 <_scanf_float+0x198>
 8008d06:	e764      	b.n	8008bd2 <_scanf_float+0x62>
 8008d08:	3401      	adds	r4, #1
 8008d0a:	b2e4      	uxtb	r4, r4
 8008d0c:	e7d8      	b.n	8008cc0 <_scanf_float+0x150>
 8008d0e:	9a03      	ldr	r2, [sp, #12]
 8008d10:	2a01      	cmp	r2, #1
 8008d12:	d000      	beq.n	8008d16 <_scanf_float+0x1a6>
 8008d14:	e75d      	b.n	8008bd2 <_scanf_float+0x62>
 8008d16:	2202      	movs	r2, #2
 8008d18:	e7ec      	b.n	8008cf4 <_scanf_float+0x184>
 8008d1a:	2c00      	cmp	r4, #0
 8008d1c:	d110      	bne.n	8008d40 <_scanf_float+0x1d0>
 8008d1e:	9a01      	ldr	r2, [sp, #4]
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	d000      	beq.n	8008d26 <_scanf_float+0x1b6>
 8008d24:	e758      	b.n	8008bd8 <_scanf_float+0x68>
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	21e0      	movs	r1, #224	; 0xe0
 8008d2a:	0010      	movs	r0, r2
 8008d2c:	00c9      	lsls	r1, r1, #3
 8008d2e:	4008      	ands	r0, r1
 8008d30:	4288      	cmp	r0, r1
 8008d32:	d000      	beq.n	8008d36 <_scanf_float+0x1c6>
 8008d34:	e754      	b.n	8008be0 <_scanf_float+0x70>
 8008d36:	494e      	ldr	r1, [pc, #312]	; (8008e70 <_scanf_float+0x300>)
 8008d38:	3401      	adds	r4, #1
 8008d3a:	400a      	ands	r2, r1
 8008d3c:	603a      	str	r2, [r7, #0]
 8008d3e:	e7bf      	b.n	8008cc0 <_scanf_float+0x150>
 8008d40:	21fd      	movs	r1, #253	; 0xfd
 8008d42:	1ee2      	subs	r2, r4, #3
 8008d44:	420a      	tst	r2, r1
 8008d46:	d000      	beq.n	8008d4a <_scanf_float+0x1da>
 8008d48:	e743      	b.n	8008bd2 <_scanf_float+0x62>
 8008d4a:	e7dd      	b.n	8008d08 <_scanf_float+0x198>
 8008d4c:	2c02      	cmp	r4, #2
 8008d4e:	d000      	beq.n	8008d52 <_scanf_float+0x1e2>
 8008d50:	e73f      	b.n	8008bd2 <_scanf_float+0x62>
 8008d52:	2403      	movs	r4, #3
 8008d54:	e7b4      	b.n	8008cc0 <_scanf_float+0x150>
 8008d56:	2c06      	cmp	r4, #6
 8008d58:	d000      	beq.n	8008d5c <_scanf_float+0x1ec>
 8008d5a:	e73a      	b.n	8008bd2 <_scanf_float+0x62>
 8008d5c:	2407      	movs	r4, #7
 8008d5e:	e7af      	b.n	8008cc0 <_scanf_float+0x150>
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	0591      	lsls	r1, r2, #22
 8008d64:	d400      	bmi.n	8008d68 <_scanf_float+0x1f8>
 8008d66:	e734      	b.n	8008bd2 <_scanf_float+0x62>
 8008d68:	4942      	ldr	r1, [pc, #264]	; (8008e74 <_scanf_float+0x304>)
 8008d6a:	400a      	ands	r2, r1
 8008d6c:	603a      	str	r2, [r7, #0]
 8008d6e:	9a01      	ldr	r2, [sp, #4]
 8008d70:	9205      	str	r2, [sp, #20]
 8008d72:	e7a5      	b.n	8008cc0 <_scanf_float+0x150>
 8008d74:	21a0      	movs	r1, #160	; 0xa0
 8008d76:	2080      	movs	r0, #128	; 0x80
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	00c9      	lsls	r1, r1, #3
 8008d7c:	4011      	ands	r1, r2
 8008d7e:	00c0      	lsls	r0, r0, #3
 8008d80:	4281      	cmp	r1, r0
 8008d82:	d006      	beq.n	8008d92 <_scanf_float+0x222>
 8008d84:	4202      	tst	r2, r0
 8008d86:	d100      	bne.n	8008d8a <_scanf_float+0x21a>
 8008d88:	e723      	b.n	8008bd2 <_scanf_float+0x62>
 8008d8a:	9901      	ldr	r1, [sp, #4]
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d100      	bne.n	8008d92 <_scanf_float+0x222>
 8008d90:	e726      	b.n	8008be0 <_scanf_float+0x70>
 8008d92:	0591      	lsls	r1, r2, #22
 8008d94:	d404      	bmi.n	8008da0 <_scanf_float+0x230>
 8008d96:	9901      	ldr	r1, [sp, #4]
 8008d98:	9805      	ldr	r0, [sp, #20]
 8008d9a:	9509      	str	r5, [sp, #36]	; 0x24
 8008d9c:	1a09      	subs	r1, r1, r0
 8008d9e:	9108      	str	r1, [sp, #32]
 8008da0:	4933      	ldr	r1, [pc, #204]	; (8008e70 <_scanf_float+0x300>)
 8008da2:	400a      	ands	r2, r1
 8008da4:	21c0      	movs	r1, #192	; 0xc0
 8008da6:	0049      	lsls	r1, r1, #1
 8008da8:	430a      	orrs	r2, r1
 8008daa:	603a      	str	r2, [r7, #0]
 8008dac:	2200      	movs	r2, #0
 8008dae:	9201      	str	r2, [sp, #4]
 8008db0:	e786      	b.n	8008cc0 <_scanf_float+0x150>
 8008db2:	2203      	movs	r2, #3
 8008db4:	e79e      	b.n	8008cf4 <_scanf_float+0x184>
 8008db6:	23c0      	movs	r3, #192	; 0xc0
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	0031      	movs	r1, r6
 8008dbc:	58fb      	ldr	r3, [r7, r3]
 8008dbe:	9802      	ldr	r0, [sp, #8]
 8008dc0:	4798      	blx	r3
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d100      	bne.n	8008dc8 <_scanf_float+0x258>
 8008dc6:	e6f6      	b.n	8008bb6 <_scanf_float+0x46>
 8008dc8:	e703      	b.n	8008bd2 <_scanf_float+0x62>
 8008dca:	3d01      	subs	r5, #1
 8008dcc:	593b      	ldr	r3, [r7, r4]
 8008dce:	0032      	movs	r2, r6
 8008dd0:	7829      	ldrb	r1, [r5, #0]
 8008dd2:	9802      	ldr	r0, [sp, #8]
 8008dd4:	4798      	blx	r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	e707      	b.n	8008bee <_scanf_float+0x7e>
 8008dde:	1e63      	subs	r3, r4, #1
 8008de0:	2b06      	cmp	r3, #6
 8008de2:	d80e      	bhi.n	8008e02 <_scanf_float+0x292>
 8008de4:	9503      	str	r5, [sp, #12]
 8008de6:	2c02      	cmp	r4, #2
 8008de8:	d920      	bls.n	8008e2c <_scanf_float+0x2bc>
 8008dea:	1b63      	subs	r3, r4, r5
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	9306      	str	r3, [sp, #24]
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	9a06      	ldr	r2, [sp, #24]
 8008df4:	189b      	adds	r3, r3, r2
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d827      	bhi.n	8008e4c <_scanf_float+0x2dc>
 8008dfc:	3c03      	subs	r4, #3
 8008dfe:	b2e4      	uxtb	r4, r4
 8008e00:	1b2d      	subs	r5, r5, r4
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	05da      	lsls	r2, r3, #23
 8008e06:	d552      	bpl.n	8008eae <_scanf_float+0x33e>
 8008e08:	055b      	lsls	r3, r3, #21
 8008e0a:	d535      	bpl.n	8008e78 <_scanf_float+0x308>
 8008e0c:	24be      	movs	r4, #190	; 0xbe
 8008e0e:	0064      	lsls	r4, r4, #1
 8008e10:	9b04      	ldr	r3, [sp, #16]
 8008e12:	429d      	cmp	r5, r3
 8008e14:	d800      	bhi.n	8008e18 <_scanf_float+0x2a8>
 8008e16:	e6ee      	b.n	8008bf6 <_scanf_float+0x86>
 8008e18:	3d01      	subs	r5, #1
 8008e1a:	593b      	ldr	r3, [r7, r4]
 8008e1c:	0032      	movs	r2, r6
 8008e1e:	7829      	ldrb	r1, [r5, #0]
 8008e20:	9802      	ldr	r0, [sp, #8]
 8008e22:	4798      	blx	r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	e7f1      	b.n	8008e10 <_scanf_float+0x2a0>
 8008e2c:	24be      	movs	r4, #190	; 0xbe
 8008e2e:	0064      	lsls	r4, r4, #1
 8008e30:	9b04      	ldr	r3, [sp, #16]
 8008e32:	429d      	cmp	r5, r3
 8008e34:	d800      	bhi.n	8008e38 <_scanf_float+0x2c8>
 8008e36:	e6de      	b.n	8008bf6 <_scanf_float+0x86>
 8008e38:	3d01      	subs	r5, #1
 8008e3a:	593b      	ldr	r3, [r7, r4]
 8008e3c:	0032      	movs	r2, r6
 8008e3e:	7829      	ldrb	r1, [r5, #0]
 8008e40:	9802      	ldr	r0, [sp, #8]
 8008e42:	4798      	blx	r3
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	e7f1      	b.n	8008e30 <_scanf_float+0x2c0>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	0032      	movs	r2, r6
 8008e50:	3b01      	subs	r3, #1
 8008e52:	7819      	ldrb	r1, [r3, #0]
 8008e54:	9303      	str	r3, [sp, #12]
 8008e56:	23be      	movs	r3, #190	; 0xbe
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	58fb      	ldr	r3, [r7, r3]
 8008e5c:	9802      	ldr	r0, [sp, #8]
 8008e5e:	4798      	blx	r3
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	e7c3      	b.n	8008df0 <_scanf_float+0x280>
 8008e68:	fffffeff 	.word	0xfffffeff
 8008e6c:	fffffe7f 	.word	0xfffffe7f
 8008e70:	fffff87f 	.word	0xfffff87f
 8008e74:	fffffd7f 	.word	0xfffffd7f
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1e6c      	subs	r4, r5, #1
 8008e7c:	7821      	ldrb	r1, [r4, #0]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	2965      	cmp	r1, #101	; 0x65
 8008e84:	d00c      	beq.n	8008ea0 <_scanf_float+0x330>
 8008e86:	2945      	cmp	r1, #69	; 0x45
 8008e88:	d00a      	beq.n	8008ea0 <_scanf_float+0x330>
 8008e8a:	23be      	movs	r3, #190	; 0xbe
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	58fb      	ldr	r3, [r7, r3]
 8008e90:	0032      	movs	r2, r6
 8008e92:	9802      	ldr	r0, [sp, #8]
 8008e94:	4798      	blx	r3
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1eac      	subs	r4, r5, #2
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	7821      	ldrb	r1, [r4, #0]
 8008e9e:	613b      	str	r3, [r7, #16]
 8008ea0:	23be      	movs	r3, #190	; 0xbe
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	0032      	movs	r2, r6
 8008ea6:	58fb      	ldr	r3, [r7, r3]
 8008ea8:	9802      	ldr	r0, [sp, #8]
 8008eaa:	4798      	blx	r3
 8008eac:	0025      	movs	r5, r4
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	0011      	movs	r1, r2
 8008eb4:	4019      	ands	r1, r3
 8008eb6:	9103      	str	r1, [sp, #12]
 8008eb8:	421a      	tst	r2, r3
 8008eba:	d15b      	bne.n	8008f74 <_scanf_float+0x404>
 8008ebc:	22c0      	movs	r2, #192	; 0xc0
 8008ebe:	7029      	strb	r1, [r5, #0]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	00d2      	lsls	r2, r2, #3
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	2280      	movs	r2, #128	; 0x80
 8008ec8:	00d2      	lsls	r2, r2, #3
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d11d      	bne.n	8008f0a <_scanf_float+0x39a>
 8008ece:	9b05      	ldr	r3, [sp, #20]
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	9901      	ldr	r1, [sp, #4]
 8008ed4:	1a9a      	subs	r2, r3, r2
 8008ed6:	428b      	cmp	r3, r1
 8008ed8:	d124      	bne.n	8008f24 <_scanf_float+0x3b4>
 8008eda:	2200      	movs	r2, #0
 8008edc:	9904      	ldr	r1, [sp, #16]
 8008ede:	9802      	ldr	r0, [sp, #8]
 8008ee0:	f7ff f936 	bl	8008150 <_strtod_r>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	0004      	movs	r4, r0
 8008eea:	000d      	movs	r5, r1
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	0791      	lsls	r1, r2, #30
 8008ef0:	d525      	bpl.n	8008f3e <_scanf_float+0x3ce>
 8008ef2:	9907      	ldr	r1, [sp, #28]
 8008ef4:	1d1a      	adds	r2, r3, #4
 8008ef6:	600a      	str	r2, [r1, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	601c      	str	r4, [r3, #0]
 8008efc:	605d      	str	r5, [r3, #4]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	9803      	ldr	r0, [sp, #12]
 8008f06:	b00b      	add	sp, #44	; 0x2c
 8008f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f0a:	9b08      	ldr	r3, [sp, #32]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d0e4      	beq.n	8008eda <_scanf_float+0x36a>
 8008f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f12:	9a03      	ldr	r2, [sp, #12]
 8008f14:	1c59      	adds	r1, r3, #1
 8008f16:	9802      	ldr	r0, [sp, #8]
 8008f18:	230a      	movs	r3, #10
 8008f1a:	f7ff f9a7 	bl	800826c <_strtol_r>
 8008f1e:	9b08      	ldr	r3, [sp, #32]
 8008f20:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f22:	1ac2      	subs	r2, r0, r3
 8008f24:	003b      	movs	r3, r7
 8008f26:	3370      	adds	r3, #112	; 0x70
 8008f28:	33ff      	adds	r3, #255	; 0xff
 8008f2a:	429d      	cmp	r5, r3
 8008f2c:	d302      	bcc.n	8008f34 <_scanf_float+0x3c4>
 8008f2e:	003d      	movs	r5, r7
 8008f30:	356f      	adds	r5, #111	; 0x6f
 8008f32:	35ff      	adds	r5, #255	; 0xff
 8008f34:	0028      	movs	r0, r5
 8008f36:	4910      	ldr	r1, [pc, #64]	; (8008f78 <_scanf_float+0x408>)
 8008f38:	f000 f956 	bl	80091e8 <siprintf>
 8008f3c:	e7cd      	b.n	8008eda <_scanf_float+0x36a>
 8008f3e:	1d19      	adds	r1, r3, #4
 8008f40:	0752      	lsls	r2, r2, #29
 8008f42:	d502      	bpl.n	8008f4a <_scanf_float+0x3da>
 8008f44:	9a07      	ldr	r2, [sp, #28]
 8008f46:	6011      	str	r1, [r2, #0]
 8008f48:	e7d6      	b.n	8008ef8 <_scanf_float+0x388>
 8008f4a:	9a07      	ldr	r2, [sp, #28]
 8008f4c:	0020      	movs	r0, r4
 8008f4e:	6011      	str	r1, [r2, #0]
 8008f50:	681e      	ldr	r6, [r3, #0]
 8008f52:	0022      	movs	r2, r4
 8008f54:	002b      	movs	r3, r5
 8008f56:	0029      	movs	r1, r5
 8008f58:	f7f9 fe1e 	bl	8002b98 <__aeabi_dcmpun>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d004      	beq.n	8008f6a <_scanf_float+0x3fa>
 8008f60:	4806      	ldr	r0, [pc, #24]	; (8008f7c <_scanf_float+0x40c>)
 8008f62:	f000 fb07 	bl	8009574 <nanf>
 8008f66:	6030      	str	r0, [r6, #0]
 8008f68:	e7c9      	b.n	8008efe <_scanf_float+0x38e>
 8008f6a:	0020      	movs	r0, r4
 8008f6c:	0029      	movs	r1, r5
 8008f6e:	f7f9 ff05 	bl	8002d7c <__aeabi_d2f>
 8008f72:	e7f8      	b.n	8008f66 <_scanf_float+0x3f6>
 8008f74:	2300      	movs	r3, #0
 8008f76:	e63f      	b.n	8008bf8 <_scanf_float+0x88>
 8008f78:	0800c28d 	.word	0x0800c28d
 8008f7c:	0800c528 	.word	0x0800c528

08008f80 <std>:
 8008f80:	2300      	movs	r3, #0
 8008f82:	b510      	push	{r4, lr}
 8008f84:	0004      	movs	r4, r0
 8008f86:	6003      	str	r3, [r0, #0]
 8008f88:	6043      	str	r3, [r0, #4]
 8008f8a:	6083      	str	r3, [r0, #8]
 8008f8c:	8181      	strh	r1, [r0, #12]
 8008f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008f90:	81c2      	strh	r2, [r0, #14]
 8008f92:	6103      	str	r3, [r0, #16]
 8008f94:	6143      	str	r3, [r0, #20]
 8008f96:	6183      	str	r3, [r0, #24]
 8008f98:	0019      	movs	r1, r3
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	305c      	adds	r0, #92	; 0x5c
 8008f9e:	f000 fa35 	bl	800940c <memset>
 8008fa2:	4b0b      	ldr	r3, [pc, #44]	; (8008fd0 <std+0x50>)
 8008fa4:	6224      	str	r4, [r4, #32]
 8008fa6:	6263      	str	r3, [r4, #36]	; 0x24
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <std+0x54>)
 8008faa:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fac:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <std+0x58>)
 8008fae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fb0:	4b0a      	ldr	r3, [pc, #40]	; (8008fdc <std+0x5c>)
 8008fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8008fb4:	4b0a      	ldr	r3, [pc, #40]	; (8008fe0 <std+0x60>)
 8008fb6:	429c      	cmp	r4, r3
 8008fb8:	d005      	beq.n	8008fc6 <std+0x46>
 8008fba:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <std+0x64>)
 8008fbc:	429c      	cmp	r4, r3
 8008fbe:	d002      	beq.n	8008fc6 <std+0x46>
 8008fc0:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <std+0x68>)
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d103      	bne.n	8008fce <std+0x4e>
 8008fc6:	0020      	movs	r0, r4
 8008fc8:	3058      	adds	r0, #88	; 0x58
 8008fca:	f000 fab5 	bl	8009538 <__retarget_lock_init_recursive>
 8008fce:	bd10      	pop	{r4, pc}
 8008fd0:	08009229 	.word	0x08009229
 8008fd4:	08009251 	.word	0x08009251
 8008fd8:	08009289 	.word	0x08009289
 8008fdc:	080092b5 	.word	0x080092b5
 8008fe0:	200005a0 	.word	0x200005a0
 8008fe4:	20000608 	.word	0x20000608
 8008fe8:	20000670 	.word	0x20000670

08008fec <stdio_exit_handler>:
 8008fec:	b510      	push	{r4, lr}
 8008fee:	4a03      	ldr	r2, [pc, #12]	; (8008ffc <stdio_exit_handler+0x10>)
 8008ff0:	4903      	ldr	r1, [pc, #12]	; (8009000 <stdio_exit_handler+0x14>)
 8008ff2:	4804      	ldr	r0, [pc, #16]	; (8009004 <stdio_exit_handler+0x18>)
 8008ff4:	f000 f86c 	bl	80090d0 <_fwalk_sglue>
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	2000000c 	.word	0x2000000c
 8009000:	0800bb95 	.word	0x0800bb95
 8009004:	20000184 	.word	0x20000184

08009008 <cleanup_stdio>:
 8009008:	6841      	ldr	r1, [r0, #4]
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <cleanup_stdio+0x30>)
 800900c:	b510      	push	{r4, lr}
 800900e:	0004      	movs	r4, r0
 8009010:	4299      	cmp	r1, r3
 8009012:	d001      	beq.n	8009018 <cleanup_stdio+0x10>
 8009014:	f002 fdbe 	bl	800bb94 <_fflush_r>
 8009018:	68a1      	ldr	r1, [r4, #8]
 800901a:	4b08      	ldr	r3, [pc, #32]	; (800903c <cleanup_stdio+0x34>)
 800901c:	4299      	cmp	r1, r3
 800901e:	d002      	beq.n	8009026 <cleanup_stdio+0x1e>
 8009020:	0020      	movs	r0, r4
 8009022:	f002 fdb7 	bl	800bb94 <_fflush_r>
 8009026:	68e1      	ldr	r1, [r4, #12]
 8009028:	4b05      	ldr	r3, [pc, #20]	; (8009040 <cleanup_stdio+0x38>)
 800902a:	4299      	cmp	r1, r3
 800902c:	d002      	beq.n	8009034 <cleanup_stdio+0x2c>
 800902e:	0020      	movs	r0, r4
 8009030:	f002 fdb0 	bl	800bb94 <_fflush_r>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	200005a0 	.word	0x200005a0
 800903c:	20000608 	.word	0x20000608
 8009040:	20000670 	.word	0x20000670

08009044 <global_stdio_init.part.0>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4b09      	ldr	r3, [pc, #36]	; (800906c <global_stdio_init.part.0+0x28>)
 8009048:	4a09      	ldr	r2, [pc, #36]	; (8009070 <global_stdio_init.part.0+0x2c>)
 800904a:	2104      	movs	r1, #4
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	4809      	ldr	r0, [pc, #36]	; (8009074 <global_stdio_init.part.0+0x30>)
 8009050:	2200      	movs	r2, #0
 8009052:	f7ff ff95 	bl	8008f80 <std>
 8009056:	2201      	movs	r2, #1
 8009058:	2109      	movs	r1, #9
 800905a:	4807      	ldr	r0, [pc, #28]	; (8009078 <global_stdio_init.part.0+0x34>)
 800905c:	f7ff ff90 	bl	8008f80 <std>
 8009060:	2202      	movs	r2, #2
 8009062:	2112      	movs	r1, #18
 8009064:	4805      	ldr	r0, [pc, #20]	; (800907c <global_stdio_init.part.0+0x38>)
 8009066:	f7ff ff8b 	bl	8008f80 <std>
 800906a:	bd10      	pop	{r4, pc}
 800906c:	200006d8 	.word	0x200006d8
 8009070:	08008fed 	.word	0x08008fed
 8009074:	200005a0 	.word	0x200005a0
 8009078:	20000608 	.word	0x20000608
 800907c:	20000670 	.word	0x20000670

08009080 <__sfp_lock_acquire>:
 8009080:	b510      	push	{r4, lr}
 8009082:	4802      	ldr	r0, [pc, #8]	; (800908c <__sfp_lock_acquire+0xc>)
 8009084:	f000 fa59 	bl	800953a <__retarget_lock_acquire_recursive>
 8009088:	bd10      	pop	{r4, pc}
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	200006e1 	.word	0x200006e1

08009090 <__sfp_lock_release>:
 8009090:	b510      	push	{r4, lr}
 8009092:	4802      	ldr	r0, [pc, #8]	; (800909c <__sfp_lock_release+0xc>)
 8009094:	f000 fa52 	bl	800953c <__retarget_lock_release_recursive>
 8009098:	bd10      	pop	{r4, pc}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	200006e1 	.word	0x200006e1

080090a0 <__sinit>:
 80090a0:	b510      	push	{r4, lr}
 80090a2:	0004      	movs	r4, r0
 80090a4:	f7ff ffec 	bl	8009080 <__sfp_lock_acquire>
 80090a8:	6a23      	ldr	r3, [r4, #32]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <__sinit+0x14>
 80090ae:	f7ff ffef 	bl	8009090 <__sfp_lock_release>
 80090b2:	bd10      	pop	{r4, pc}
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <__sinit+0x28>)
 80090b6:	6223      	str	r3, [r4, #32]
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <__sinit+0x2c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1f6      	bne.n	80090ae <__sinit+0xe>
 80090c0:	f7ff ffc0 	bl	8009044 <global_stdio_init.part.0>
 80090c4:	e7f3      	b.n	80090ae <__sinit+0xe>
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	08009009 	.word	0x08009009
 80090cc:	200006d8 	.word	0x200006d8

080090d0 <_fwalk_sglue>:
 80090d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d2:	0014      	movs	r4, r2
 80090d4:	2600      	movs	r6, #0
 80090d6:	9000      	str	r0, [sp, #0]
 80090d8:	9101      	str	r1, [sp, #4]
 80090da:	68a5      	ldr	r5, [r4, #8]
 80090dc:	6867      	ldr	r7, [r4, #4]
 80090de:	3f01      	subs	r7, #1
 80090e0:	d504      	bpl.n	80090ec <_fwalk_sglue+0x1c>
 80090e2:	6824      	ldr	r4, [r4, #0]
 80090e4:	2c00      	cmp	r4, #0
 80090e6:	d1f8      	bne.n	80090da <_fwalk_sglue+0xa>
 80090e8:	0030      	movs	r0, r6
 80090ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ec:	89ab      	ldrh	r3, [r5, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d908      	bls.n	8009104 <_fwalk_sglue+0x34>
 80090f2:	220e      	movs	r2, #14
 80090f4:	5eab      	ldrsh	r3, [r5, r2]
 80090f6:	3301      	adds	r3, #1
 80090f8:	d004      	beq.n	8009104 <_fwalk_sglue+0x34>
 80090fa:	0029      	movs	r1, r5
 80090fc:	9800      	ldr	r0, [sp, #0]
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	4798      	blx	r3
 8009102:	4306      	orrs	r6, r0
 8009104:	3568      	adds	r5, #104	; 0x68
 8009106:	e7ea      	b.n	80090de <_fwalk_sglue+0xe>

08009108 <iprintf>:
 8009108:	b40f      	push	{r0, r1, r2, r3}
 800910a:	b507      	push	{r0, r1, r2, lr}
 800910c:	4905      	ldr	r1, [pc, #20]	; (8009124 <iprintf+0x1c>)
 800910e:	ab04      	add	r3, sp, #16
 8009110:	6808      	ldr	r0, [r1, #0]
 8009112:	cb04      	ldmia	r3!, {r2}
 8009114:	6881      	ldr	r1, [r0, #8]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	f002 fb96 	bl	800b848 <_vfiprintf_r>
 800911c:	b003      	add	sp, #12
 800911e:	bc08      	pop	{r3}
 8009120:	b004      	add	sp, #16
 8009122:	4718      	bx	r3
 8009124:	200001d0 	.word	0x200001d0

08009128 <_puts_r>:
 8009128:	6a03      	ldr	r3, [r0, #32]
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	0005      	movs	r5, r0
 800912e:	000e      	movs	r6, r1
 8009130:	6884      	ldr	r4, [r0, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <_puts_r+0x12>
 8009136:	f7ff ffb3 	bl	80090a0 <__sinit>
 800913a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800913c:	07db      	lsls	r3, r3, #31
 800913e:	d405      	bmi.n	800914c <_puts_r+0x24>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	059b      	lsls	r3, r3, #22
 8009144:	d402      	bmi.n	800914c <_puts_r+0x24>
 8009146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009148:	f000 f9f7 	bl	800953a <__retarget_lock_acquire_recursive>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	071b      	lsls	r3, r3, #28
 8009150:	d502      	bpl.n	8009158 <_puts_r+0x30>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d11f      	bne.n	8009198 <_puts_r+0x70>
 8009158:	0021      	movs	r1, r4
 800915a:	0028      	movs	r0, r5
 800915c:	f000 f8f2 	bl	8009344 <__swsetup_r>
 8009160:	2800      	cmp	r0, #0
 8009162:	d019      	beq.n	8009198 <_puts_r+0x70>
 8009164:	2501      	movs	r5, #1
 8009166:	426d      	negs	r5, r5
 8009168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800916a:	07db      	lsls	r3, r3, #31
 800916c:	d405      	bmi.n	800917a <_puts_r+0x52>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	059b      	lsls	r3, r3, #22
 8009172:	d402      	bmi.n	800917a <_puts_r+0x52>
 8009174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009176:	f000 f9e1 	bl	800953c <__retarget_lock_release_recursive>
 800917a:	0028      	movs	r0, r5
 800917c:	bd70      	pop	{r4, r5, r6, pc}
 800917e:	3601      	adds	r6, #1
 8009180:	60a3      	str	r3, [r4, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da04      	bge.n	8009190 <_puts_r+0x68>
 8009186:	69a2      	ldr	r2, [r4, #24]
 8009188:	429a      	cmp	r2, r3
 800918a:	dc16      	bgt.n	80091ba <_puts_r+0x92>
 800918c:	290a      	cmp	r1, #10
 800918e:	d014      	beq.n	80091ba <_puts_r+0x92>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	6022      	str	r2, [r4, #0]
 8009196:	7019      	strb	r1, [r3, #0]
 8009198:	68a3      	ldr	r3, [r4, #8]
 800919a:	7831      	ldrb	r1, [r6, #0]
 800919c:	3b01      	subs	r3, #1
 800919e:	2900      	cmp	r1, #0
 80091a0:	d1ed      	bne.n	800917e <_puts_r+0x56>
 80091a2:	60a3      	str	r3, [r4, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	da0f      	bge.n	80091c8 <_puts_r+0xa0>
 80091a8:	0028      	movs	r0, r5
 80091aa:	0022      	movs	r2, r4
 80091ac:	310a      	adds	r1, #10
 80091ae:	f000 f887 	bl	80092c0 <__swbuf_r>
 80091b2:	250a      	movs	r5, #10
 80091b4:	3001      	adds	r0, #1
 80091b6:	d1d7      	bne.n	8009168 <_puts_r+0x40>
 80091b8:	e7d4      	b.n	8009164 <_puts_r+0x3c>
 80091ba:	0022      	movs	r2, r4
 80091bc:	0028      	movs	r0, r5
 80091be:	f000 f87f 	bl	80092c0 <__swbuf_r>
 80091c2:	3001      	adds	r0, #1
 80091c4:	d1e8      	bne.n	8009198 <_puts_r+0x70>
 80091c6:	e7cd      	b.n	8009164 <_puts_r+0x3c>
 80091c8:	250a      	movs	r5, #10
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	6022      	str	r2, [r4, #0]
 80091d0:	701d      	strb	r5, [r3, #0]
 80091d2:	e7c9      	b.n	8009168 <_puts_r+0x40>

080091d4 <puts>:
 80091d4:	b510      	push	{r4, lr}
 80091d6:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <puts+0x10>)
 80091d8:	0001      	movs	r1, r0
 80091da:	6818      	ldr	r0, [r3, #0]
 80091dc:	f7ff ffa4 	bl	8009128 <_puts_r>
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	200001d0 	.word	0x200001d0

080091e8 <siprintf>:
 80091e8:	b40e      	push	{r1, r2, r3}
 80091ea:	b500      	push	{lr}
 80091ec:	490b      	ldr	r1, [pc, #44]	; (800921c <siprintf+0x34>)
 80091ee:	b09c      	sub	sp, #112	; 0x70
 80091f0:	ab1d      	add	r3, sp, #116	; 0x74
 80091f2:	9002      	str	r0, [sp, #8]
 80091f4:	9006      	str	r0, [sp, #24]
 80091f6:	9107      	str	r1, [sp, #28]
 80091f8:	9104      	str	r1, [sp, #16]
 80091fa:	4809      	ldr	r0, [pc, #36]	; (8009220 <siprintf+0x38>)
 80091fc:	4909      	ldr	r1, [pc, #36]	; (8009224 <siprintf+0x3c>)
 80091fe:	cb04      	ldmia	r3!, {r2}
 8009200:	9105      	str	r1, [sp, #20]
 8009202:	6800      	ldr	r0, [r0, #0]
 8009204:	a902      	add	r1, sp, #8
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	f002 f9f6 	bl	800b5f8 <_svfiprintf_r>
 800920c:	2200      	movs	r2, #0
 800920e:	9b02      	ldr	r3, [sp, #8]
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	b01c      	add	sp, #112	; 0x70
 8009214:	bc08      	pop	{r3}
 8009216:	b003      	add	sp, #12
 8009218:	4718      	bx	r3
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	7fffffff 	.word	0x7fffffff
 8009220:	200001d0 	.word	0x200001d0
 8009224:	ffff0208 	.word	0xffff0208

08009228 <__sread>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	000c      	movs	r4, r1
 800922c:	250e      	movs	r5, #14
 800922e:	5f49      	ldrsh	r1, [r1, r5]
 8009230:	f000 f930 	bl	8009494 <_read_r>
 8009234:	2800      	cmp	r0, #0
 8009236:	db03      	blt.n	8009240 <__sread+0x18>
 8009238:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800923a:	181b      	adds	r3, r3, r0
 800923c:	6563      	str	r3, [r4, #84]	; 0x54
 800923e:	bd70      	pop	{r4, r5, r6, pc}
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	4a02      	ldr	r2, [pc, #8]	; (800924c <__sread+0x24>)
 8009244:	4013      	ands	r3, r2
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	e7f9      	b.n	800923e <__sread+0x16>
 800924a:	46c0      	nop			; (mov r8, r8)
 800924c:	ffffefff 	.word	0xffffefff

08009250 <__swrite>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	001f      	movs	r7, r3
 8009254:	898b      	ldrh	r3, [r1, #12]
 8009256:	0005      	movs	r5, r0
 8009258:	000c      	movs	r4, r1
 800925a:	0016      	movs	r6, r2
 800925c:	05db      	lsls	r3, r3, #23
 800925e:	d505      	bpl.n	800926c <__swrite+0x1c>
 8009260:	230e      	movs	r3, #14
 8009262:	5ec9      	ldrsh	r1, [r1, r3]
 8009264:	2200      	movs	r2, #0
 8009266:	2302      	movs	r3, #2
 8009268:	f000 f900 	bl	800946c <_lseek_r>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	4a05      	ldr	r2, [pc, #20]	; (8009284 <__swrite+0x34>)
 8009270:	0028      	movs	r0, r5
 8009272:	4013      	ands	r3, r2
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	0032      	movs	r2, r6
 8009278:	230e      	movs	r3, #14
 800927a:	5ee1      	ldrsh	r1, [r4, r3]
 800927c:	003b      	movs	r3, r7
 800927e:	f000 f91d 	bl	80094bc <_write_r>
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009284:	ffffefff 	.word	0xffffefff

08009288 <__sseek>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	000c      	movs	r4, r1
 800928c:	250e      	movs	r5, #14
 800928e:	5f49      	ldrsh	r1, [r1, r5]
 8009290:	f000 f8ec 	bl	800946c <_lseek_r>
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	1c42      	adds	r2, r0, #1
 8009298:	d103      	bne.n	80092a2 <__sseek+0x1a>
 800929a:	4a05      	ldr	r2, [pc, #20]	; (80092b0 <__sseek+0x28>)
 800929c:	4013      	ands	r3, r2
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	2280      	movs	r2, #128	; 0x80
 80092a4:	0152      	lsls	r2, r2, #5
 80092a6:	4313      	orrs	r3, r2
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	6560      	str	r0, [r4, #84]	; 0x54
 80092ac:	e7f8      	b.n	80092a0 <__sseek+0x18>
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	ffffefff 	.word	0xffffefff

080092b4 <__sclose>:
 80092b4:	b510      	push	{r4, lr}
 80092b6:	230e      	movs	r3, #14
 80092b8:	5ec9      	ldrsh	r1, [r1, r3]
 80092ba:	f000 f8c5 	bl	8009448 <_close_r>
 80092be:	bd10      	pop	{r4, pc}

080092c0 <__swbuf_r>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	0006      	movs	r6, r0
 80092c4:	000d      	movs	r5, r1
 80092c6:	0014      	movs	r4, r2
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d004      	beq.n	80092d6 <__swbuf_r+0x16>
 80092cc:	6a03      	ldr	r3, [r0, #32]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <__swbuf_r+0x16>
 80092d2:	f7ff fee5 	bl	80090a0 <__sinit>
 80092d6:	69a3      	ldr	r3, [r4, #24]
 80092d8:	60a3      	str	r3, [r4, #8]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	071b      	lsls	r3, r3, #28
 80092de:	d528      	bpl.n	8009332 <__swbuf_r+0x72>
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d025      	beq.n	8009332 <__swbuf_r+0x72>
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	6820      	ldr	r0, [r4, #0]
 80092ea:	b2ef      	uxtb	r7, r5
 80092ec:	1ac0      	subs	r0, r0, r3
 80092ee:	6963      	ldr	r3, [r4, #20]
 80092f0:	b2ed      	uxtb	r5, r5
 80092f2:	4283      	cmp	r3, r0
 80092f4:	dc05      	bgt.n	8009302 <__swbuf_r+0x42>
 80092f6:	0021      	movs	r1, r4
 80092f8:	0030      	movs	r0, r6
 80092fa:	f002 fc4b 	bl	800bb94 <_fflush_r>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d11d      	bne.n	800933e <__swbuf_r+0x7e>
 8009302:	68a3      	ldr	r3, [r4, #8]
 8009304:	3001      	adds	r0, #1
 8009306:	3b01      	subs	r3, #1
 8009308:	60a3      	str	r3, [r4, #8]
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	6022      	str	r2, [r4, #0]
 8009310:	701f      	strb	r7, [r3, #0]
 8009312:	6963      	ldr	r3, [r4, #20]
 8009314:	4283      	cmp	r3, r0
 8009316:	d004      	beq.n	8009322 <__swbuf_r+0x62>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	07db      	lsls	r3, r3, #31
 800931c:	d507      	bpl.n	800932e <__swbuf_r+0x6e>
 800931e:	2d0a      	cmp	r5, #10
 8009320:	d105      	bne.n	800932e <__swbuf_r+0x6e>
 8009322:	0021      	movs	r1, r4
 8009324:	0030      	movs	r0, r6
 8009326:	f002 fc35 	bl	800bb94 <_fflush_r>
 800932a:	2800      	cmp	r0, #0
 800932c:	d107      	bne.n	800933e <__swbuf_r+0x7e>
 800932e:	0028      	movs	r0, r5
 8009330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009332:	0021      	movs	r1, r4
 8009334:	0030      	movs	r0, r6
 8009336:	f000 f805 	bl	8009344 <__swsetup_r>
 800933a:	2800      	cmp	r0, #0
 800933c:	d0d3      	beq.n	80092e6 <__swbuf_r+0x26>
 800933e:	2501      	movs	r5, #1
 8009340:	426d      	negs	r5, r5
 8009342:	e7f4      	b.n	800932e <__swbuf_r+0x6e>

08009344 <__swsetup_r>:
 8009344:	4b30      	ldr	r3, [pc, #192]	; (8009408 <__swsetup_r+0xc4>)
 8009346:	b570      	push	{r4, r5, r6, lr}
 8009348:	0005      	movs	r5, r0
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	000c      	movs	r4, r1
 800934e:	2800      	cmp	r0, #0
 8009350:	d004      	beq.n	800935c <__swsetup_r+0x18>
 8009352:	6a03      	ldr	r3, [r0, #32]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <__swsetup_r+0x18>
 8009358:	f7ff fea2 	bl	80090a0 <__sinit>
 800935c:	230c      	movs	r3, #12
 800935e:	5ee2      	ldrsh	r2, [r4, r3]
 8009360:	b293      	uxth	r3, r2
 8009362:	0711      	lsls	r1, r2, #28
 8009364:	d423      	bmi.n	80093ae <__swsetup_r+0x6a>
 8009366:	06d9      	lsls	r1, r3, #27
 8009368:	d407      	bmi.n	800937a <__swsetup_r+0x36>
 800936a:	2309      	movs	r3, #9
 800936c:	2001      	movs	r0, #1
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	3337      	adds	r3, #55	; 0x37
 8009372:	4313      	orrs	r3, r2
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	4240      	negs	r0, r0
 8009378:	bd70      	pop	{r4, r5, r6, pc}
 800937a:	075b      	lsls	r3, r3, #29
 800937c:	d513      	bpl.n	80093a6 <__swsetup_r+0x62>
 800937e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009380:	2900      	cmp	r1, #0
 8009382:	d008      	beq.n	8009396 <__swsetup_r+0x52>
 8009384:	0023      	movs	r3, r4
 8009386:	3344      	adds	r3, #68	; 0x44
 8009388:	4299      	cmp	r1, r3
 800938a:	d002      	beq.n	8009392 <__swsetup_r+0x4e>
 800938c:	0028      	movs	r0, r5
 800938e:	f000 ff93 	bl	800a2b8 <_free_r>
 8009392:	2300      	movs	r3, #0
 8009394:	6363      	str	r3, [r4, #52]	; 0x34
 8009396:	2224      	movs	r2, #36	; 0x24
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	4393      	bics	r3, r2
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	2300      	movs	r3, #0
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	2308      	movs	r3, #8
 80093a8:	89a2      	ldrh	r2, [r4, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10b      	bne.n	80093cc <__swsetup_r+0x88>
 80093b4:	21a0      	movs	r1, #160	; 0xa0
 80093b6:	2280      	movs	r2, #128	; 0x80
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	0089      	lsls	r1, r1, #2
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	400b      	ands	r3, r1
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d003      	beq.n	80093cc <__swsetup_r+0x88>
 80093c4:	0021      	movs	r1, r4
 80093c6:	0028      	movs	r0, r5
 80093c8:	f002 fc38 	bl	800bc3c <__smakebuf_r>
 80093cc:	220c      	movs	r2, #12
 80093ce:	5ea3      	ldrsh	r3, [r4, r2]
 80093d0:	2001      	movs	r0, #1
 80093d2:	001a      	movs	r2, r3
 80093d4:	b299      	uxth	r1, r3
 80093d6:	4002      	ands	r2, r0
 80093d8:	4203      	tst	r3, r0
 80093da:	d00f      	beq.n	80093fc <__swsetup_r+0xb8>
 80093dc:	2200      	movs	r2, #0
 80093de:	60a2      	str	r2, [r4, #8]
 80093e0:	6962      	ldr	r2, [r4, #20]
 80093e2:	4252      	negs	r2, r2
 80093e4:	61a2      	str	r2, [r4, #24]
 80093e6:	2000      	movs	r0, #0
 80093e8:	6922      	ldr	r2, [r4, #16]
 80093ea:	4282      	cmp	r2, r0
 80093ec:	d1c4      	bne.n	8009378 <__swsetup_r+0x34>
 80093ee:	0609      	lsls	r1, r1, #24
 80093f0:	d5c2      	bpl.n	8009378 <__swsetup_r+0x34>
 80093f2:	2240      	movs	r2, #64	; 0x40
 80093f4:	4313      	orrs	r3, r2
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	3801      	subs	r0, #1
 80093fa:	e7bd      	b.n	8009378 <__swsetup_r+0x34>
 80093fc:	0788      	lsls	r0, r1, #30
 80093fe:	d400      	bmi.n	8009402 <__swsetup_r+0xbe>
 8009400:	6962      	ldr	r2, [r4, #20]
 8009402:	60a2      	str	r2, [r4, #8]
 8009404:	e7ef      	b.n	80093e6 <__swsetup_r+0xa2>
 8009406:	46c0      	nop			; (mov r8, r8)
 8009408:	200001d0 	.word	0x200001d0

0800940c <memset>:
 800940c:	0003      	movs	r3, r0
 800940e:	1882      	adds	r2, r0, r2
 8009410:	4293      	cmp	r3, r2
 8009412:	d100      	bne.n	8009416 <memset+0xa>
 8009414:	4770      	bx	lr
 8009416:	7019      	strb	r1, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	e7f9      	b.n	8009410 <memset+0x4>

0800941c <strncmp>:
 800941c:	b530      	push	{r4, r5, lr}
 800941e:	0005      	movs	r5, r0
 8009420:	1e10      	subs	r0, r2, #0
 8009422:	d00b      	beq.n	800943c <strncmp+0x20>
 8009424:	2400      	movs	r4, #0
 8009426:	3a01      	subs	r2, #1
 8009428:	5d2b      	ldrb	r3, [r5, r4]
 800942a:	5d08      	ldrb	r0, [r1, r4]
 800942c:	4283      	cmp	r3, r0
 800942e:	d104      	bne.n	800943a <strncmp+0x1e>
 8009430:	42a2      	cmp	r2, r4
 8009432:	d002      	beq.n	800943a <strncmp+0x1e>
 8009434:	3401      	adds	r4, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f6      	bne.n	8009428 <strncmp+0xc>
 800943a:	1a18      	subs	r0, r3, r0
 800943c:	bd30      	pop	{r4, r5, pc}
	...

08009440 <_localeconv_r>:
 8009440:	4800      	ldr	r0, [pc, #0]	; (8009444 <_localeconv_r+0x4>)
 8009442:	4770      	bx	lr
 8009444:	20000108 	.word	0x20000108

08009448 <_close_r>:
 8009448:	2300      	movs	r3, #0
 800944a:	b570      	push	{r4, r5, r6, lr}
 800944c:	4d06      	ldr	r5, [pc, #24]	; (8009468 <_close_r+0x20>)
 800944e:	0004      	movs	r4, r0
 8009450:	0008      	movs	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7fa fa1b 	bl	800388e <_close>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d103      	bne.n	8009464 <_close_r+0x1c>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d000      	beq.n	8009464 <_close_r+0x1c>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	200006dc 	.word	0x200006dc

0800946c <_lseek_r>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	0004      	movs	r4, r0
 8009470:	0008      	movs	r0, r1
 8009472:	0011      	movs	r1, r2
 8009474:	001a      	movs	r2, r3
 8009476:	2300      	movs	r3, #0
 8009478:	4d05      	ldr	r5, [pc, #20]	; (8009490 <_lseek_r+0x24>)
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	f7fa fa28 	bl	80038d0 <_lseek>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d103      	bne.n	800948c <_lseek_r+0x20>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d000      	beq.n	800948c <_lseek_r+0x20>
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	200006dc 	.word	0x200006dc

08009494 <_read_r>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	0004      	movs	r4, r0
 8009498:	0008      	movs	r0, r1
 800949a:	0011      	movs	r1, r2
 800949c:	001a      	movs	r2, r3
 800949e:	2300      	movs	r3, #0
 80094a0:	4d05      	ldr	r5, [pc, #20]	; (80094b8 <_read_r+0x24>)
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f7fa f9ba 	bl	800381c <_read>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d103      	bne.n	80094b4 <_read_r+0x20>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d000      	beq.n	80094b4 <_read_r+0x20>
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	bd70      	pop	{r4, r5, r6, pc}
 80094b6:	46c0      	nop			; (mov r8, r8)
 80094b8:	200006dc 	.word	0x200006dc

080094bc <_write_r>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	0004      	movs	r4, r0
 80094c0:	0008      	movs	r0, r1
 80094c2:	0011      	movs	r1, r2
 80094c4:	001a      	movs	r2, r3
 80094c6:	2300      	movs	r3, #0
 80094c8:	4d05      	ldr	r5, [pc, #20]	; (80094e0 <_write_r+0x24>)
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	f7fa f9c3 	bl	8003856 <_write>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d103      	bne.n	80094dc <_write_r+0x20>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d000      	beq.n	80094dc <_write_r+0x20>
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	bd70      	pop	{r4, r5, r6, pc}
 80094de:	46c0      	nop			; (mov r8, r8)
 80094e0:	200006dc 	.word	0x200006dc

080094e4 <__errno>:
 80094e4:	4b01      	ldr	r3, [pc, #4]	; (80094ec <__errno+0x8>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	4770      	bx	lr
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	200001d0 	.word	0x200001d0

080094f0 <__libc_init_array>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	2600      	movs	r6, #0
 80094f4:	4c0c      	ldr	r4, [pc, #48]	; (8009528 <__libc_init_array+0x38>)
 80094f6:	4d0d      	ldr	r5, [pc, #52]	; (800952c <__libc_init_array+0x3c>)
 80094f8:	1b64      	subs	r4, r4, r5
 80094fa:	10a4      	asrs	r4, r4, #2
 80094fc:	42a6      	cmp	r6, r4
 80094fe:	d109      	bne.n	8009514 <__libc_init_array+0x24>
 8009500:	2600      	movs	r6, #0
 8009502:	f002 fd07 	bl	800bf14 <_init>
 8009506:	4c0a      	ldr	r4, [pc, #40]	; (8009530 <__libc_init_array+0x40>)
 8009508:	4d0a      	ldr	r5, [pc, #40]	; (8009534 <__libc_init_array+0x44>)
 800950a:	1b64      	subs	r4, r4, r5
 800950c:	10a4      	asrs	r4, r4, #2
 800950e:	42a6      	cmp	r6, r4
 8009510:	d105      	bne.n	800951e <__libc_init_array+0x2e>
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	00b3      	lsls	r3, r6, #2
 8009516:	58eb      	ldr	r3, [r5, r3]
 8009518:	4798      	blx	r3
 800951a:	3601      	adds	r6, #1
 800951c:	e7ee      	b.n	80094fc <__libc_init_array+0xc>
 800951e:	00b3      	lsls	r3, r6, #2
 8009520:	58eb      	ldr	r3, [r5, r3]
 8009522:	4798      	blx	r3
 8009524:	3601      	adds	r6, #1
 8009526:	e7f2      	b.n	800950e <__libc_init_array+0x1e>
 8009528:	0800c534 	.word	0x0800c534
 800952c:	0800c534 	.word	0x0800c534
 8009530:	0800c538 	.word	0x0800c538
 8009534:	0800c534 	.word	0x0800c534

08009538 <__retarget_lock_init_recursive>:
 8009538:	4770      	bx	lr

0800953a <__retarget_lock_acquire_recursive>:
 800953a:	4770      	bx	lr

0800953c <__retarget_lock_release_recursive>:
 800953c:	4770      	bx	lr

0800953e <memchr>:
 800953e:	b2c9      	uxtb	r1, r1
 8009540:	1882      	adds	r2, r0, r2
 8009542:	4290      	cmp	r0, r2
 8009544:	d101      	bne.n	800954a <memchr+0xc>
 8009546:	2000      	movs	r0, #0
 8009548:	4770      	bx	lr
 800954a:	7803      	ldrb	r3, [r0, #0]
 800954c:	428b      	cmp	r3, r1
 800954e:	d0fb      	beq.n	8009548 <memchr+0xa>
 8009550:	3001      	adds	r0, #1
 8009552:	e7f6      	b.n	8009542 <memchr+0x4>

08009554 <memcpy>:
 8009554:	2300      	movs	r3, #0
 8009556:	b510      	push	{r4, lr}
 8009558:	429a      	cmp	r2, r3
 800955a:	d100      	bne.n	800955e <memcpy+0xa>
 800955c:	bd10      	pop	{r4, pc}
 800955e:	5ccc      	ldrb	r4, [r1, r3]
 8009560:	54c4      	strb	r4, [r0, r3]
 8009562:	3301      	adds	r3, #1
 8009564:	e7f8      	b.n	8009558 <memcpy+0x4>
	...

08009568 <nan>:
 8009568:	2000      	movs	r0, #0
 800956a:	4901      	ldr	r1, [pc, #4]	; (8009570 <nan+0x8>)
 800956c:	4770      	bx	lr
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	7ff80000 	.word	0x7ff80000

08009574 <nanf>:
 8009574:	4800      	ldr	r0, [pc, #0]	; (8009578 <nanf+0x4>)
 8009576:	4770      	bx	lr
 8009578:	7fc00000 	.word	0x7fc00000

0800957c <quorem>:
 800957c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800957e:	6902      	ldr	r2, [r0, #16]
 8009580:	690b      	ldr	r3, [r1, #16]
 8009582:	b089      	sub	sp, #36	; 0x24
 8009584:	0007      	movs	r7, r0
 8009586:	9104      	str	r1, [sp, #16]
 8009588:	2000      	movs	r0, #0
 800958a:	429a      	cmp	r2, r3
 800958c:	db69      	blt.n	8009662 <quorem+0xe6>
 800958e:	3b01      	subs	r3, #1
 8009590:	009c      	lsls	r4, r3, #2
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	000b      	movs	r3, r1
 8009596:	3314      	adds	r3, #20
 8009598:	9306      	str	r3, [sp, #24]
 800959a:	191b      	adds	r3, r3, r4
 800959c:	9305      	str	r3, [sp, #20]
 800959e:	003b      	movs	r3, r7
 80095a0:	3314      	adds	r3, #20
 80095a2:	9303      	str	r3, [sp, #12]
 80095a4:	191c      	adds	r4, r3, r4
 80095a6:	9b05      	ldr	r3, [sp, #20]
 80095a8:	6826      	ldr	r6, [r4, #0]
 80095aa:	681d      	ldr	r5, [r3, #0]
 80095ac:	0030      	movs	r0, r6
 80095ae:	3501      	adds	r5, #1
 80095b0:	0029      	movs	r1, r5
 80095b2:	f7f6 fdc5 	bl	8000140 <__udivsi3>
 80095b6:	9002      	str	r0, [sp, #8]
 80095b8:	42ae      	cmp	r6, r5
 80095ba:	d329      	bcc.n	8009610 <quorem+0x94>
 80095bc:	9b06      	ldr	r3, [sp, #24]
 80095be:	2600      	movs	r6, #0
 80095c0:	469c      	mov	ip, r3
 80095c2:	9d03      	ldr	r5, [sp, #12]
 80095c4:	9606      	str	r6, [sp, #24]
 80095c6:	4662      	mov	r2, ip
 80095c8:	ca08      	ldmia	r2!, {r3}
 80095ca:	6828      	ldr	r0, [r5, #0]
 80095cc:	4694      	mov	ip, r2
 80095ce:	9a02      	ldr	r2, [sp, #8]
 80095d0:	b299      	uxth	r1, r3
 80095d2:	4351      	muls	r1, r2
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	4353      	muls	r3, r2
 80095d8:	1989      	adds	r1, r1, r6
 80095da:	0c0a      	lsrs	r2, r1, #16
 80095dc:	189b      	adds	r3, r3, r2
 80095de:	9307      	str	r3, [sp, #28]
 80095e0:	0c1e      	lsrs	r6, r3, #16
 80095e2:	9b06      	ldr	r3, [sp, #24]
 80095e4:	b282      	uxth	r2, r0
 80095e6:	18d2      	adds	r2, r2, r3
 80095e8:	466b      	mov	r3, sp
 80095ea:	b289      	uxth	r1, r1
 80095ec:	8b9b      	ldrh	r3, [r3, #28]
 80095ee:	1a52      	subs	r2, r2, r1
 80095f0:	0c01      	lsrs	r1, r0, #16
 80095f2:	1ac9      	subs	r1, r1, r3
 80095f4:	1413      	asrs	r3, r2, #16
 80095f6:	18cb      	adds	r3, r1, r3
 80095f8:	1419      	asrs	r1, r3, #16
 80095fa:	b292      	uxth	r2, r2
 80095fc:	041b      	lsls	r3, r3, #16
 80095fe:	4313      	orrs	r3, r2
 8009600:	c508      	stmia	r5!, {r3}
 8009602:	9b05      	ldr	r3, [sp, #20]
 8009604:	9106      	str	r1, [sp, #24]
 8009606:	4563      	cmp	r3, ip
 8009608:	d2dd      	bcs.n	80095c6 <quorem+0x4a>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d030      	beq.n	8009672 <quorem+0xf6>
 8009610:	0038      	movs	r0, r7
 8009612:	9904      	ldr	r1, [sp, #16]
 8009614:	f001 fd98 	bl	800b148 <__mcmp>
 8009618:	2800      	cmp	r0, #0
 800961a:	db21      	blt.n	8009660 <quorem+0xe4>
 800961c:	0038      	movs	r0, r7
 800961e:	2600      	movs	r6, #0
 8009620:	9b02      	ldr	r3, [sp, #8]
 8009622:	9c04      	ldr	r4, [sp, #16]
 8009624:	3301      	adds	r3, #1
 8009626:	9302      	str	r3, [sp, #8]
 8009628:	3014      	adds	r0, #20
 800962a:	3414      	adds	r4, #20
 800962c:	6803      	ldr	r3, [r0, #0]
 800962e:	cc02      	ldmia	r4!, {r1}
 8009630:	b29d      	uxth	r5, r3
 8009632:	19ad      	adds	r5, r5, r6
 8009634:	b28a      	uxth	r2, r1
 8009636:	1aaa      	subs	r2, r5, r2
 8009638:	0c09      	lsrs	r1, r1, #16
 800963a:	0c1b      	lsrs	r3, r3, #16
 800963c:	1a5b      	subs	r3, r3, r1
 800963e:	1411      	asrs	r1, r2, #16
 8009640:	185b      	adds	r3, r3, r1
 8009642:	141e      	asrs	r6, r3, #16
 8009644:	b292      	uxth	r2, r2
 8009646:	041b      	lsls	r3, r3, #16
 8009648:	4313      	orrs	r3, r2
 800964a:	c008      	stmia	r0!, {r3}
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	42a3      	cmp	r3, r4
 8009650:	d2ec      	bcs.n	800962c <quorem+0xb0>
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	9a03      	ldr	r2, [sp, #12]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	18d3      	adds	r3, r2, r3
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	2a00      	cmp	r2, #0
 800965e:	d015      	beq.n	800968c <quorem+0x110>
 8009660:	9802      	ldr	r0, [sp, #8]
 8009662:	b009      	add	sp, #36	; 0x24
 8009664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d106      	bne.n	800967a <quorem+0xfe>
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	3b01      	subs	r3, #1
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	9b03      	ldr	r3, [sp, #12]
 8009674:	3c04      	subs	r4, #4
 8009676:	42a3      	cmp	r3, r4
 8009678:	d3f5      	bcc.n	8009666 <quorem+0xea>
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	613b      	str	r3, [r7, #16]
 800967e:	e7c7      	b.n	8009610 <quorem+0x94>
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	2a00      	cmp	r2, #0
 8009684:	d106      	bne.n	8009694 <quorem+0x118>
 8009686:	9a01      	ldr	r2, [sp, #4]
 8009688:	3a01      	subs	r2, #1
 800968a:	9201      	str	r2, [sp, #4]
 800968c:	9a03      	ldr	r2, [sp, #12]
 800968e:	3b04      	subs	r3, #4
 8009690:	429a      	cmp	r2, r3
 8009692:	d3f5      	bcc.n	8009680 <quorem+0x104>
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	e7e2      	b.n	8009660 <quorem+0xe4>
	...

0800969c <_dtoa_r>:
 800969c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800969e:	0014      	movs	r4, r2
 80096a0:	001d      	movs	r5, r3
 80096a2:	69c6      	ldr	r6, [r0, #28]
 80096a4:	b09d      	sub	sp, #116	; 0x74
 80096a6:	9408      	str	r4, [sp, #32]
 80096a8:	9509      	str	r5, [sp, #36]	; 0x24
 80096aa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80096ac:	9004      	str	r0, [sp, #16]
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	d10f      	bne.n	80096d2 <_dtoa_r+0x36>
 80096b2:	2010      	movs	r0, #16
 80096b4:	f001 f9a6 	bl	800aa04 <malloc>
 80096b8:	9b04      	ldr	r3, [sp, #16]
 80096ba:	1e02      	subs	r2, r0, #0
 80096bc:	61d8      	str	r0, [r3, #28]
 80096be:	d104      	bne.n	80096ca <_dtoa_r+0x2e>
 80096c0:	21ef      	movs	r1, #239	; 0xef
 80096c2:	4bc6      	ldr	r3, [pc, #792]	; (80099dc <_dtoa_r+0x340>)
 80096c4:	48c6      	ldr	r0, [pc, #792]	; (80099e0 <_dtoa_r+0x344>)
 80096c6:	f002 fb41 	bl	800bd4c <__assert_func>
 80096ca:	6046      	str	r6, [r0, #4]
 80096cc:	6086      	str	r6, [r0, #8]
 80096ce:	6006      	str	r6, [r0, #0]
 80096d0:	60c6      	str	r6, [r0, #12]
 80096d2:	9b04      	ldr	r3, [sp, #16]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	6819      	ldr	r1, [r3, #0]
 80096d8:	2900      	cmp	r1, #0
 80096da:	d00b      	beq.n	80096f4 <_dtoa_r+0x58>
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	2301      	movs	r3, #1
 80096e0:	4093      	lsls	r3, r2
 80096e2:	604a      	str	r2, [r1, #4]
 80096e4:	608b      	str	r3, [r1, #8]
 80096e6:	9804      	ldr	r0, [sp, #16]
 80096e8:	f001 faa0 	bl	800ac2c <_Bfree>
 80096ec:	2200      	movs	r2, #0
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	2d00      	cmp	r5, #0
 80096f6:	da1e      	bge.n	8009736 <_dtoa_r+0x9a>
 80096f8:	2301      	movs	r3, #1
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	006b      	lsls	r3, r5, #1
 80096fe:	085b      	lsrs	r3, r3, #1
 8009700:	9309      	str	r3, [sp, #36]	; 0x24
 8009702:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009704:	4bb7      	ldr	r3, [pc, #732]	; (80099e4 <_dtoa_r+0x348>)
 8009706:	4ab7      	ldr	r2, [pc, #732]	; (80099e4 <_dtoa_r+0x348>)
 8009708:	403b      	ands	r3, r7
 800970a:	4293      	cmp	r3, r2
 800970c:	d116      	bne.n	800973c <_dtoa_r+0xa0>
 800970e:	4bb6      	ldr	r3, [pc, #728]	; (80099e8 <_dtoa_r+0x34c>)
 8009710:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	033b      	lsls	r3, r7, #12
 8009716:	0b1b      	lsrs	r3, r3, #12
 8009718:	4323      	orrs	r3, r4
 800971a:	d101      	bne.n	8009720 <_dtoa_r+0x84>
 800971c:	f000 fdb5 	bl	800a28a <_dtoa_r+0xbee>
 8009720:	4bb2      	ldr	r3, [pc, #712]	; (80099ec <_dtoa_r+0x350>)
 8009722:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009724:	9306      	str	r3, [sp, #24]
 8009726:	2a00      	cmp	r2, #0
 8009728:	d002      	beq.n	8009730 <_dtoa_r+0x94>
 800972a:	4bb1      	ldr	r3, [pc, #708]	; (80099f0 <_dtoa_r+0x354>)
 800972c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	9806      	ldr	r0, [sp, #24]
 8009732:	b01d      	add	sp, #116	; 0x74
 8009734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009736:	2300      	movs	r3, #0
 8009738:	603b      	str	r3, [r7, #0]
 800973a:	e7e2      	b.n	8009702 <_dtoa_r+0x66>
 800973c:	9a08      	ldr	r2, [sp, #32]
 800973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009740:	9210      	str	r2, [sp, #64]	; 0x40
 8009742:	9311      	str	r3, [sp, #68]	; 0x44
 8009744:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009746:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009748:	2200      	movs	r2, #0
 800974a:	2300      	movs	r3, #0
 800974c:	f7f6 fe7e 	bl	800044c <__aeabi_dcmpeq>
 8009750:	1e06      	subs	r6, r0, #0
 8009752:	d009      	beq.n	8009768 <_dtoa_r+0xcc>
 8009754:	2301      	movs	r3, #1
 8009756:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	4ba6      	ldr	r3, [pc, #664]	; (80099f4 <_dtoa_r+0x358>)
 800975c:	9306      	str	r3, [sp, #24]
 800975e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0e5      	beq.n	8009730 <_dtoa_r+0x94>
 8009764:	4ba4      	ldr	r3, [pc, #656]	; (80099f8 <_dtoa_r+0x35c>)
 8009766:	e7e1      	b.n	800972c <_dtoa_r+0x90>
 8009768:	ab1a      	add	r3, sp, #104	; 0x68
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	ab1b      	add	r3, sp, #108	; 0x6c
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	9804      	ldr	r0, [sp, #16]
 8009772:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009776:	f001 fe03 	bl	800b380 <__d2b>
 800977a:	007a      	lsls	r2, r7, #1
 800977c:	9005      	str	r0, [sp, #20]
 800977e:	0d52      	lsrs	r2, r2, #21
 8009780:	d100      	bne.n	8009784 <_dtoa_r+0xe8>
 8009782:	e07b      	b.n	800987c <_dtoa_r+0x1e0>
 8009784:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009786:	9617      	str	r6, [sp, #92]	; 0x5c
 8009788:	0319      	lsls	r1, r3, #12
 800978a:	4b9c      	ldr	r3, [pc, #624]	; (80099fc <_dtoa_r+0x360>)
 800978c:	0b09      	lsrs	r1, r1, #12
 800978e:	430b      	orrs	r3, r1
 8009790:	499b      	ldr	r1, [pc, #620]	; (8009a00 <_dtoa_r+0x364>)
 8009792:	1857      	adds	r7, r2, r1
 8009794:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009796:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009798:	0019      	movs	r1, r3
 800979a:	2200      	movs	r2, #0
 800979c:	4b99      	ldr	r3, [pc, #612]	; (8009a04 <_dtoa_r+0x368>)
 800979e:	f7f8 fe79 	bl	8002494 <__aeabi_dsub>
 80097a2:	4a99      	ldr	r2, [pc, #612]	; (8009a08 <_dtoa_r+0x36c>)
 80097a4:	4b99      	ldr	r3, [pc, #612]	; (8009a0c <_dtoa_r+0x370>)
 80097a6:	f7f8 fbb3 	bl	8001f10 <__aeabi_dmul>
 80097aa:	4a99      	ldr	r2, [pc, #612]	; (8009a10 <_dtoa_r+0x374>)
 80097ac:	4b99      	ldr	r3, [pc, #612]	; (8009a14 <_dtoa_r+0x378>)
 80097ae:	f7f7 fc55 	bl	800105c <__aeabi_dadd>
 80097b2:	0004      	movs	r4, r0
 80097b4:	0038      	movs	r0, r7
 80097b6:	000d      	movs	r5, r1
 80097b8:	f7f9 fa42 	bl	8002c40 <__aeabi_i2d>
 80097bc:	4a96      	ldr	r2, [pc, #600]	; (8009a18 <_dtoa_r+0x37c>)
 80097be:	4b97      	ldr	r3, [pc, #604]	; (8009a1c <_dtoa_r+0x380>)
 80097c0:	f7f8 fba6 	bl	8001f10 <__aeabi_dmul>
 80097c4:	0002      	movs	r2, r0
 80097c6:	000b      	movs	r3, r1
 80097c8:	0020      	movs	r0, r4
 80097ca:	0029      	movs	r1, r5
 80097cc:	f7f7 fc46 	bl	800105c <__aeabi_dadd>
 80097d0:	0004      	movs	r4, r0
 80097d2:	000d      	movs	r5, r1
 80097d4:	f7f9 f9fe 	bl	8002bd4 <__aeabi_d2iz>
 80097d8:	2200      	movs	r2, #0
 80097da:	9003      	str	r0, [sp, #12]
 80097dc:	2300      	movs	r3, #0
 80097de:	0020      	movs	r0, r4
 80097e0:	0029      	movs	r1, r5
 80097e2:	f7f6 fe39 	bl	8000458 <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d00b      	beq.n	8009802 <_dtoa_r+0x166>
 80097ea:	9803      	ldr	r0, [sp, #12]
 80097ec:	f7f9 fa28 	bl	8002c40 <__aeabi_i2d>
 80097f0:	002b      	movs	r3, r5
 80097f2:	0022      	movs	r2, r4
 80097f4:	f7f6 fe2a 	bl	800044c <__aeabi_dcmpeq>
 80097f8:	4243      	negs	r3, r0
 80097fa:	4158      	adcs	r0, r3
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	1a1b      	subs	r3, r3, r0
 8009800:	9303      	str	r3, [sp, #12]
 8009802:	2301      	movs	r3, #1
 8009804:	9316      	str	r3, [sp, #88]	; 0x58
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	2b16      	cmp	r3, #22
 800980a:	d810      	bhi.n	800982e <_dtoa_r+0x192>
 800980c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800980e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009810:	9a03      	ldr	r2, [sp, #12]
 8009812:	4b83      	ldr	r3, [pc, #524]	; (8009a20 <_dtoa_r+0x384>)
 8009814:	00d2      	lsls	r2, r2, #3
 8009816:	189b      	adds	r3, r3, r2
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f7f6 fe1c 	bl	8000458 <__aeabi_dcmplt>
 8009820:	2800      	cmp	r0, #0
 8009822:	d047      	beq.n	80098b4 <_dtoa_r+0x218>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	3b01      	subs	r3, #1
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	2300      	movs	r3, #0
 800982c:	9316      	str	r3, [sp, #88]	; 0x58
 800982e:	2200      	movs	r2, #0
 8009830:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009832:	920a      	str	r2, [sp, #40]	; 0x28
 8009834:	1bdb      	subs	r3, r3, r7
 8009836:	1e5a      	subs	r2, r3, #1
 8009838:	d53e      	bpl.n	80098b8 <_dtoa_r+0x21c>
 800983a:	2201      	movs	r2, #1
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	930a      	str	r3, [sp, #40]	; 0x28
 8009840:	2300      	movs	r3, #0
 8009842:	930c      	str	r3, [sp, #48]	; 0x30
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	db38      	blt.n	80098bc <_dtoa_r+0x220>
 800984a:	9a03      	ldr	r2, [sp, #12]
 800984c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800984e:	4694      	mov	ip, r2
 8009850:	4463      	add	r3, ip
 8009852:	930c      	str	r3, [sp, #48]	; 0x30
 8009854:	2300      	movs	r3, #0
 8009856:	9213      	str	r2, [sp, #76]	; 0x4c
 8009858:	930d      	str	r3, [sp, #52]	; 0x34
 800985a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800985c:	2401      	movs	r4, #1
 800985e:	2b09      	cmp	r3, #9
 8009860:	d867      	bhi.n	8009932 <_dtoa_r+0x296>
 8009862:	2b05      	cmp	r3, #5
 8009864:	dd02      	ble.n	800986c <_dtoa_r+0x1d0>
 8009866:	2400      	movs	r4, #0
 8009868:	3b04      	subs	r3, #4
 800986a:	9322      	str	r3, [sp, #136]	; 0x88
 800986c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800986e:	1e98      	subs	r0, r3, #2
 8009870:	2803      	cmp	r0, #3
 8009872:	d867      	bhi.n	8009944 <_dtoa_r+0x2a8>
 8009874:	f7f6 fc50 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009878:	5b383a2b 	.word	0x5b383a2b
 800987c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800987e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009880:	18f6      	adds	r6, r6, r3
 8009882:	4b68      	ldr	r3, [pc, #416]	; (8009a24 <_dtoa_r+0x388>)
 8009884:	18f2      	adds	r2, r6, r3
 8009886:	2a20      	cmp	r2, #32
 8009888:	dd0f      	ble.n	80098aa <_dtoa_r+0x20e>
 800988a:	2340      	movs	r3, #64	; 0x40
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	409f      	lsls	r7, r3
 8009890:	4b65      	ldr	r3, [pc, #404]	; (8009a28 <_dtoa_r+0x38c>)
 8009892:	0038      	movs	r0, r7
 8009894:	18f3      	adds	r3, r6, r3
 8009896:	40dc      	lsrs	r4, r3
 8009898:	4320      	orrs	r0, r4
 800989a:	f7f9 fa01 	bl	8002ca0 <__aeabi_ui2d>
 800989e:	2201      	movs	r2, #1
 80098a0:	4b62      	ldr	r3, [pc, #392]	; (8009a2c <_dtoa_r+0x390>)
 80098a2:	1e77      	subs	r7, r6, #1
 80098a4:	18cb      	adds	r3, r1, r3
 80098a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80098a8:	e776      	b.n	8009798 <_dtoa_r+0xfc>
 80098aa:	2320      	movs	r3, #32
 80098ac:	0020      	movs	r0, r4
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	4098      	lsls	r0, r3
 80098b2:	e7f2      	b.n	800989a <_dtoa_r+0x1fe>
 80098b4:	9016      	str	r0, [sp, #88]	; 0x58
 80098b6:	e7ba      	b.n	800982e <_dtoa_r+0x192>
 80098b8:	920c      	str	r2, [sp, #48]	; 0x30
 80098ba:	e7c3      	b.n	8009844 <_dtoa_r+0x1a8>
 80098bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098be:	9a03      	ldr	r2, [sp, #12]
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	930a      	str	r3, [sp, #40]	; 0x28
 80098c4:	4253      	negs	r3, r2
 80098c6:	930d      	str	r3, [sp, #52]	; 0x34
 80098c8:	2300      	movs	r3, #0
 80098ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80098cc:	e7c5      	b.n	800985a <_dtoa_r+0x1be>
 80098ce:	2300      	movs	r3, #0
 80098d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	dc13      	bgt.n	8009904 <_dtoa_r+0x268>
 80098dc:	2301      	movs	r3, #1
 80098de:	001a      	movs	r2, r3
 80098e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80098e2:	9307      	str	r3, [sp, #28]
 80098e4:	9223      	str	r2, [sp, #140]	; 0x8c
 80098e6:	e00d      	b.n	8009904 <_dtoa_r+0x268>
 80098e8:	2301      	movs	r3, #1
 80098ea:	e7f1      	b.n	80098d0 <_dtoa_r+0x234>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80098f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098f2:	4694      	mov	ip, r2
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	4463      	add	r3, ip
 80098f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098fa:	3301      	adds	r3, #1
 80098fc:	9307      	str	r3, [sp, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	dc00      	bgt.n	8009904 <_dtoa_r+0x268>
 8009902:	2301      	movs	r3, #1
 8009904:	9a04      	ldr	r2, [sp, #16]
 8009906:	2100      	movs	r1, #0
 8009908:	69d0      	ldr	r0, [r2, #28]
 800990a:	2204      	movs	r2, #4
 800990c:	0015      	movs	r5, r2
 800990e:	3514      	adds	r5, #20
 8009910:	429d      	cmp	r5, r3
 8009912:	d91b      	bls.n	800994c <_dtoa_r+0x2b0>
 8009914:	6041      	str	r1, [r0, #4]
 8009916:	9804      	ldr	r0, [sp, #16]
 8009918:	f001 f944 	bl	800aba4 <_Balloc>
 800991c:	9006      	str	r0, [sp, #24]
 800991e:	2800      	cmp	r0, #0
 8009920:	d117      	bne.n	8009952 <_dtoa_r+0x2b6>
 8009922:	21b0      	movs	r1, #176	; 0xb0
 8009924:	4b42      	ldr	r3, [pc, #264]	; (8009a30 <_dtoa_r+0x394>)
 8009926:	482e      	ldr	r0, [pc, #184]	; (80099e0 <_dtoa_r+0x344>)
 8009928:	9a06      	ldr	r2, [sp, #24]
 800992a:	31ff      	adds	r1, #255	; 0xff
 800992c:	e6cb      	b.n	80096c6 <_dtoa_r+0x2a>
 800992e:	2301      	movs	r3, #1
 8009930:	e7dd      	b.n	80098ee <_dtoa_r+0x252>
 8009932:	2300      	movs	r3, #0
 8009934:	940f      	str	r4, [sp, #60]	; 0x3c
 8009936:	9322      	str	r3, [sp, #136]	; 0x88
 8009938:	3b01      	subs	r3, #1
 800993a:	930b      	str	r3, [sp, #44]	; 0x2c
 800993c:	9307      	str	r3, [sp, #28]
 800993e:	2200      	movs	r2, #0
 8009940:	3313      	adds	r3, #19
 8009942:	e7cf      	b.n	80098e4 <_dtoa_r+0x248>
 8009944:	2301      	movs	r3, #1
 8009946:	930f      	str	r3, [sp, #60]	; 0x3c
 8009948:	3b02      	subs	r3, #2
 800994a:	e7f6      	b.n	800993a <_dtoa_r+0x29e>
 800994c:	3101      	adds	r1, #1
 800994e:	0052      	lsls	r2, r2, #1
 8009950:	e7dc      	b.n	800990c <_dtoa_r+0x270>
 8009952:	9b04      	ldr	r3, [sp, #16]
 8009954:	9a06      	ldr	r2, [sp, #24]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	9b07      	ldr	r3, [sp, #28]
 800995c:	2b0e      	cmp	r3, #14
 800995e:	d900      	bls.n	8009962 <_dtoa_r+0x2c6>
 8009960:	e0e5      	b.n	8009b2e <_dtoa_r+0x492>
 8009962:	2c00      	cmp	r4, #0
 8009964:	d100      	bne.n	8009968 <_dtoa_r+0x2cc>
 8009966:	e0e2      	b.n	8009b2e <_dtoa_r+0x492>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	dd64      	ble.n	8009a38 <_dtoa_r+0x39c>
 800996e:	210f      	movs	r1, #15
 8009970:	9a03      	ldr	r2, [sp, #12]
 8009972:	4b2b      	ldr	r3, [pc, #172]	; (8009a20 <_dtoa_r+0x384>)
 8009974:	400a      	ands	r2, r1
 8009976:	00d2      	lsls	r2, r2, #3
 8009978:	189b      	adds	r3, r3, r2
 800997a:	681e      	ldr	r6, [r3, #0]
 800997c:	685f      	ldr	r7, [r3, #4]
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	2402      	movs	r4, #2
 8009982:	111d      	asrs	r5, r3, #4
 8009984:	05db      	lsls	r3, r3, #23
 8009986:	d50a      	bpl.n	800999e <_dtoa_r+0x302>
 8009988:	4b2a      	ldr	r3, [pc, #168]	; (8009a34 <_dtoa_r+0x398>)
 800998a:	400d      	ands	r5, r1
 800998c:	6a1a      	ldr	r2, [r3, #32]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009992:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009994:	f7f7 fec2 	bl	800171c <__aeabi_ddiv>
 8009998:	9008      	str	r0, [sp, #32]
 800999a:	9109      	str	r1, [sp, #36]	; 0x24
 800999c:	3401      	adds	r4, #1
 800999e:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <_dtoa_r+0x398>)
 80099a0:	930e      	str	r3, [sp, #56]	; 0x38
 80099a2:	2d00      	cmp	r5, #0
 80099a4:	d108      	bne.n	80099b8 <_dtoa_r+0x31c>
 80099a6:	9808      	ldr	r0, [sp, #32]
 80099a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099aa:	0032      	movs	r2, r6
 80099ac:	003b      	movs	r3, r7
 80099ae:	f7f7 feb5 	bl	800171c <__aeabi_ddiv>
 80099b2:	9008      	str	r0, [sp, #32]
 80099b4:	9109      	str	r1, [sp, #36]	; 0x24
 80099b6:	e05a      	b.n	8009a6e <_dtoa_r+0x3d2>
 80099b8:	2301      	movs	r3, #1
 80099ba:	421d      	tst	r5, r3
 80099bc:	d009      	beq.n	80099d2 <_dtoa_r+0x336>
 80099be:	18e4      	adds	r4, r4, r3
 80099c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c2:	0030      	movs	r0, r6
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	0039      	movs	r1, r7
 80099ca:	f7f8 faa1 	bl	8001f10 <__aeabi_dmul>
 80099ce:	0006      	movs	r6, r0
 80099d0:	000f      	movs	r7, r1
 80099d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099d4:	106d      	asrs	r5, r5, #1
 80099d6:	3308      	adds	r3, #8
 80099d8:	e7e2      	b.n	80099a0 <_dtoa_r+0x304>
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	0800c2a7 	.word	0x0800c2a7
 80099e0:	0800c2be 	.word	0x0800c2be
 80099e4:	7ff00000 	.word	0x7ff00000
 80099e8:	0000270f 	.word	0x0000270f
 80099ec:	0800c2a3 	.word	0x0800c2a3
 80099f0:	0800c2a6 	.word	0x0800c2a6
 80099f4:	0800c269 	.word	0x0800c269
 80099f8:	0800c26a 	.word	0x0800c26a
 80099fc:	3ff00000 	.word	0x3ff00000
 8009a00:	fffffc01 	.word	0xfffffc01
 8009a04:	3ff80000 	.word	0x3ff80000
 8009a08:	636f4361 	.word	0x636f4361
 8009a0c:	3fd287a7 	.word	0x3fd287a7
 8009a10:	8b60c8b3 	.word	0x8b60c8b3
 8009a14:	3fc68a28 	.word	0x3fc68a28
 8009a18:	509f79fb 	.word	0x509f79fb
 8009a1c:	3fd34413 	.word	0x3fd34413
 8009a20:	0800c408 	.word	0x0800c408
 8009a24:	00000432 	.word	0x00000432
 8009a28:	00000412 	.word	0x00000412
 8009a2c:	fe100000 	.word	0xfe100000
 8009a30:	0800c316 	.word	0x0800c316
 8009a34:	0800c3e0 	.word	0x0800c3e0
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	2402      	movs	r4, #2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d016      	beq.n	8009a6e <_dtoa_r+0x3d2>
 8009a40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a44:	220f      	movs	r2, #15
 8009a46:	425d      	negs	r5, r3
 8009a48:	402a      	ands	r2, r5
 8009a4a:	4bdd      	ldr	r3, [pc, #884]	; (8009dc0 <_dtoa_r+0x724>)
 8009a4c:	00d2      	lsls	r2, r2, #3
 8009a4e:	189b      	adds	r3, r3, r2
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f7f8 fa5c 	bl	8001f10 <__aeabi_dmul>
 8009a58:	2701      	movs	r7, #1
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	9008      	str	r0, [sp, #32]
 8009a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8009a60:	4ed8      	ldr	r6, [pc, #864]	; (8009dc4 <_dtoa_r+0x728>)
 8009a62:	112d      	asrs	r5, r5, #4
 8009a64:	2d00      	cmp	r5, #0
 8009a66:	d000      	beq.n	8009a6a <_dtoa_r+0x3ce>
 8009a68:	e091      	b.n	8009b8e <_dtoa_r+0x4f2>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1a1      	bne.n	80099b2 <_dtoa_r+0x316>
 8009a6e:	9e08      	ldr	r6, [sp, #32]
 8009a70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d100      	bne.n	8009a7a <_dtoa_r+0x3de>
 8009a78:	e094      	b.n	8009ba4 <_dtoa_r+0x508>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	0030      	movs	r0, r6
 8009a7e:	0039      	movs	r1, r7
 8009a80:	4bd1      	ldr	r3, [pc, #836]	; (8009dc8 <_dtoa_r+0x72c>)
 8009a82:	f7f6 fce9 	bl	8000458 <__aeabi_dcmplt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d100      	bne.n	8009a8c <_dtoa_r+0x3f0>
 8009a8a:	e08b      	b.n	8009ba4 <_dtoa_r+0x508>
 8009a8c:	9b07      	ldr	r3, [sp, #28]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d100      	bne.n	8009a94 <_dtoa_r+0x3f8>
 8009a92:	e087      	b.n	8009ba4 <_dtoa_r+0x508>
 8009a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dd45      	ble.n	8009b26 <_dtoa_r+0x48a>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8009aa2:	0030      	movs	r0, r6
 8009aa4:	4bc9      	ldr	r3, [pc, #804]	; (8009dcc <_dtoa_r+0x730>)
 8009aa6:	0039      	movs	r1, r7
 8009aa8:	f7f8 fa32 	bl	8001f10 <__aeabi_dmul>
 8009aac:	9008      	str	r0, [sp, #32]
 8009aae:	9109      	str	r1, [sp, #36]	; 0x24
 8009ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab2:	3401      	adds	r4, #1
 8009ab4:	0020      	movs	r0, r4
 8009ab6:	9e08      	ldr	r6, [sp, #32]
 8009ab8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009aba:	9312      	str	r3, [sp, #72]	; 0x48
 8009abc:	f7f9 f8c0 	bl	8002c40 <__aeabi_i2d>
 8009ac0:	0032      	movs	r2, r6
 8009ac2:	003b      	movs	r3, r7
 8009ac4:	f7f8 fa24 	bl	8001f10 <__aeabi_dmul>
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4bc1      	ldr	r3, [pc, #772]	; (8009dd0 <_dtoa_r+0x734>)
 8009acc:	f7f7 fac6 	bl	800105c <__aeabi_dadd>
 8009ad0:	4ac0      	ldr	r2, [pc, #768]	; (8009dd4 <_dtoa_r+0x738>)
 8009ad2:	9014      	str	r0, [sp, #80]	; 0x50
 8009ad4:	9115      	str	r1, [sp, #84]	; 0x54
 8009ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ad8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009ada:	4694      	mov	ip, r2
 8009adc:	9308      	str	r3, [sp, #32]
 8009ade:	9409      	str	r4, [sp, #36]	; 0x24
 8009ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ae2:	4463      	add	r3, ip
 8009ae4:	9318      	str	r3, [sp, #96]	; 0x60
 8009ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d15e      	bne.n	8009bac <_dtoa_r+0x510>
 8009aee:	2200      	movs	r2, #0
 8009af0:	4bb9      	ldr	r3, [pc, #740]	; (8009dd8 <_dtoa_r+0x73c>)
 8009af2:	0030      	movs	r0, r6
 8009af4:	0039      	movs	r1, r7
 8009af6:	f7f8 fccd 	bl	8002494 <__aeabi_dsub>
 8009afa:	9a08      	ldr	r2, [sp, #32]
 8009afc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009afe:	0004      	movs	r4, r0
 8009b00:	000d      	movs	r5, r1
 8009b02:	f7f6 fcbd 	bl	8000480 <__aeabi_dcmpgt>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d000      	beq.n	8009b0c <_dtoa_r+0x470>
 8009b0a:	e2b3      	b.n	800a074 <_dtoa_r+0x9d8>
 8009b0c:	48b3      	ldr	r0, [pc, #716]	; (8009ddc <_dtoa_r+0x740>)
 8009b0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009b10:	4684      	mov	ip, r0
 8009b12:	4461      	add	r1, ip
 8009b14:	000b      	movs	r3, r1
 8009b16:	0020      	movs	r0, r4
 8009b18:	0029      	movs	r1, r5
 8009b1a:	9a08      	ldr	r2, [sp, #32]
 8009b1c:	f7f6 fc9c 	bl	8000458 <__aeabi_dcmplt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d000      	beq.n	8009b26 <_dtoa_r+0x48a>
 8009b24:	e2a3      	b.n	800a06e <_dtoa_r+0x9d2>
 8009b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	9409      	str	r4, [sp, #36]	; 0x24
 8009b2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da00      	bge.n	8009b36 <_dtoa_r+0x49a>
 8009b34:	e179      	b.n	8009e2a <_dtoa_r+0x78e>
 8009b36:	9a03      	ldr	r2, [sp, #12]
 8009b38:	2a0e      	cmp	r2, #14
 8009b3a:	dd00      	ble.n	8009b3e <_dtoa_r+0x4a2>
 8009b3c:	e175      	b.n	8009e2a <_dtoa_r+0x78e>
 8009b3e:	4ba0      	ldr	r3, [pc, #640]	; (8009dc0 <_dtoa_r+0x724>)
 8009b40:	00d2      	lsls	r2, r2, #3
 8009b42:	189b      	adds	r3, r3, r2
 8009b44:	681e      	ldr	r6, [r3, #0]
 8009b46:	685f      	ldr	r7, [r3, #4]
 8009b48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	db00      	blt.n	8009b50 <_dtoa_r+0x4b4>
 8009b4e:	e0e5      	b.n	8009d1c <_dtoa_r+0x680>
 8009b50:	9b07      	ldr	r3, [sp, #28]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dd00      	ble.n	8009b58 <_dtoa_r+0x4bc>
 8009b56:	e0e1      	b.n	8009d1c <_dtoa_r+0x680>
 8009b58:	d000      	beq.n	8009b5c <_dtoa_r+0x4c0>
 8009b5a:	e288      	b.n	800a06e <_dtoa_r+0x9d2>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	0030      	movs	r0, r6
 8009b60:	0039      	movs	r1, r7
 8009b62:	4b9d      	ldr	r3, [pc, #628]	; (8009dd8 <_dtoa_r+0x73c>)
 8009b64:	f7f8 f9d4 	bl	8001f10 <__aeabi_dmul>
 8009b68:	9a08      	ldr	r2, [sp, #32]
 8009b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6c:	f7f6 fc92 	bl	8000494 <__aeabi_dcmpge>
 8009b70:	9e07      	ldr	r6, [sp, #28]
 8009b72:	0037      	movs	r7, r6
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d000      	beq.n	8009b7a <_dtoa_r+0x4de>
 8009b78:	e25f      	b.n	800a03a <_dtoa_r+0x99e>
 8009b7a:	9b06      	ldr	r3, [sp, #24]
 8009b7c:	9a06      	ldr	r2, [sp, #24]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	9308      	str	r3, [sp, #32]
 8009b82:	2331      	movs	r3, #49	; 0x31
 8009b84:	7013      	strb	r3, [r2, #0]
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	9303      	str	r3, [sp, #12]
 8009b8c:	e25a      	b.n	800a044 <_dtoa_r+0x9a8>
 8009b8e:	423d      	tst	r5, r7
 8009b90:	d005      	beq.n	8009b9e <_dtoa_r+0x502>
 8009b92:	6832      	ldr	r2, [r6, #0]
 8009b94:	6873      	ldr	r3, [r6, #4]
 8009b96:	f7f8 f9bb 	bl	8001f10 <__aeabi_dmul>
 8009b9a:	003b      	movs	r3, r7
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	106d      	asrs	r5, r5, #1
 8009ba0:	3608      	adds	r6, #8
 8009ba2:	e75f      	b.n	8009a64 <_dtoa_r+0x3c8>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ba8:	9b07      	ldr	r3, [sp, #28]
 8009baa:	e783      	b.n	8009ab4 <_dtoa_r+0x418>
 8009bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bae:	4b84      	ldr	r3, [pc, #528]	; (8009dc0 <_dtoa_r+0x724>)
 8009bb0:	3a01      	subs	r2, #1
 8009bb2:	00d2      	lsls	r2, r2, #3
 8009bb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bb6:	189b      	adds	r3, r3, r2
 8009bb8:	9c08      	ldr	r4, [sp, #32]
 8009bba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	d051      	beq.n	8009c68 <_dtoa_r+0x5cc>
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	4986      	ldr	r1, [pc, #536]	; (8009de0 <_dtoa_r+0x744>)
 8009bc8:	f7f7 fda8 	bl	800171c <__aeabi_ddiv>
 8009bcc:	0022      	movs	r2, r4
 8009bce:	002b      	movs	r3, r5
 8009bd0:	f7f8 fc60 	bl	8002494 <__aeabi_dsub>
 8009bd4:	9a06      	ldr	r2, [sp, #24]
 8009bd6:	0004      	movs	r4, r0
 8009bd8:	4694      	mov	ip, r2
 8009bda:	000d      	movs	r5, r1
 8009bdc:	9b06      	ldr	r3, [sp, #24]
 8009bde:	9314      	str	r3, [sp, #80]	; 0x50
 8009be0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009be2:	4463      	add	r3, ip
 8009be4:	9318      	str	r3, [sp, #96]	; 0x60
 8009be6:	0039      	movs	r1, r7
 8009be8:	0030      	movs	r0, r6
 8009bea:	f7f8 fff3 	bl	8002bd4 <__aeabi_d2iz>
 8009bee:	9012      	str	r0, [sp, #72]	; 0x48
 8009bf0:	f7f9 f826 	bl	8002c40 <__aeabi_i2d>
 8009bf4:	0002      	movs	r2, r0
 8009bf6:	000b      	movs	r3, r1
 8009bf8:	0030      	movs	r0, r6
 8009bfa:	0039      	movs	r1, r7
 8009bfc:	f7f8 fc4a 	bl	8002494 <__aeabi_dsub>
 8009c00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c04:	3301      	adds	r3, #1
 8009c06:	9308      	str	r3, [sp, #32]
 8009c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c0a:	0006      	movs	r6, r0
 8009c0c:	3330      	adds	r3, #48	; 0x30
 8009c0e:	7013      	strb	r3, [r2, #0]
 8009c10:	0022      	movs	r2, r4
 8009c12:	002b      	movs	r3, r5
 8009c14:	000f      	movs	r7, r1
 8009c16:	f7f6 fc1f 	bl	8000458 <__aeabi_dcmplt>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d174      	bne.n	8009d08 <_dtoa_r+0x66c>
 8009c1e:	0032      	movs	r2, r6
 8009c20:	003b      	movs	r3, r7
 8009c22:	2000      	movs	r0, #0
 8009c24:	4968      	ldr	r1, [pc, #416]	; (8009dc8 <_dtoa_r+0x72c>)
 8009c26:	f7f8 fc35 	bl	8002494 <__aeabi_dsub>
 8009c2a:	0022      	movs	r2, r4
 8009c2c:	002b      	movs	r3, r5
 8009c2e:	f7f6 fc13 	bl	8000458 <__aeabi_dcmplt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d000      	beq.n	8009c38 <_dtoa_r+0x59c>
 8009c36:	e0d7      	b.n	8009de8 <_dtoa_r+0x74c>
 8009c38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009c3a:	9a08      	ldr	r2, [sp, #32]
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d100      	bne.n	8009c42 <_dtoa_r+0x5a6>
 8009c40:	e771      	b.n	8009b26 <_dtoa_r+0x48a>
 8009c42:	2200      	movs	r2, #0
 8009c44:	0020      	movs	r0, r4
 8009c46:	0029      	movs	r1, r5
 8009c48:	4b60      	ldr	r3, [pc, #384]	; (8009dcc <_dtoa_r+0x730>)
 8009c4a:	f7f8 f961 	bl	8001f10 <__aeabi_dmul>
 8009c4e:	4b5f      	ldr	r3, [pc, #380]	; (8009dcc <_dtoa_r+0x730>)
 8009c50:	0004      	movs	r4, r0
 8009c52:	000d      	movs	r5, r1
 8009c54:	0030      	movs	r0, r6
 8009c56:	0039      	movs	r1, r7
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f8 f959 	bl	8001f10 <__aeabi_dmul>
 8009c5e:	9b08      	ldr	r3, [sp, #32]
 8009c60:	0006      	movs	r6, r0
 8009c62:	000f      	movs	r7, r1
 8009c64:	9314      	str	r3, [sp, #80]	; 0x50
 8009c66:	e7be      	b.n	8009be6 <_dtoa_r+0x54a>
 8009c68:	0020      	movs	r0, r4
 8009c6a:	0029      	movs	r1, r5
 8009c6c:	f7f8 f950 	bl	8001f10 <__aeabi_dmul>
 8009c70:	9a06      	ldr	r2, [sp, #24]
 8009c72:	9b06      	ldr	r3, [sp, #24]
 8009c74:	4694      	mov	ip, r2
 8009c76:	9308      	str	r3, [sp, #32]
 8009c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c7a:	9014      	str	r0, [sp, #80]	; 0x50
 8009c7c:	9115      	str	r1, [sp, #84]	; 0x54
 8009c7e:	4463      	add	r3, ip
 8009c80:	9319      	str	r3, [sp, #100]	; 0x64
 8009c82:	0030      	movs	r0, r6
 8009c84:	0039      	movs	r1, r7
 8009c86:	f7f8 ffa5 	bl	8002bd4 <__aeabi_d2iz>
 8009c8a:	9018      	str	r0, [sp, #96]	; 0x60
 8009c8c:	f7f8 ffd8 	bl	8002c40 <__aeabi_i2d>
 8009c90:	0002      	movs	r2, r0
 8009c92:	000b      	movs	r3, r1
 8009c94:	0030      	movs	r0, r6
 8009c96:	0039      	movs	r1, r7
 8009c98:	f7f8 fbfc 	bl	8002494 <__aeabi_dsub>
 8009c9c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009c9e:	9b08      	ldr	r3, [sp, #32]
 8009ca0:	3630      	adds	r6, #48	; 0x30
 8009ca2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ca4:	701e      	strb	r6, [r3, #0]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	0004      	movs	r4, r0
 8009caa:	000d      	movs	r5, r1
 8009cac:	9308      	str	r3, [sp, #32]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d12d      	bne.n	8009d0e <_dtoa_r+0x672>
 8009cb2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009cb4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009cb6:	9a06      	ldr	r2, [sp, #24]
 8009cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cba:	4694      	mov	ip, r2
 8009cbc:	4463      	add	r3, ip
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	9308      	str	r3, [sp, #32]
 8009cc2:	4b47      	ldr	r3, [pc, #284]	; (8009de0 <_dtoa_r+0x744>)
 8009cc4:	f7f7 f9ca 	bl	800105c <__aeabi_dadd>
 8009cc8:	0002      	movs	r2, r0
 8009cca:	000b      	movs	r3, r1
 8009ccc:	0020      	movs	r0, r4
 8009cce:	0029      	movs	r1, r5
 8009cd0:	f7f6 fbd6 	bl	8000480 <__aeabi_dcmpgt>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d000      	beq.n	8009cda <_dtoa_r+0x63e>
 8009cd8:	e086      	b.n	8009de8 <_dtoa_r+0x74c>
 8009cda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cde:	2000      	movs	r0, #0
 8009ce0:	493f      	ldr	r1, [pc, #252]	; (8009de0 <_dtoa_r+0x744>)
 8009ce2:	f7f8 fbd7 	bl	8002494 <__aeabi_dsub>
 8009ce6:	0002      	movs	r2, r0
 8009ce8:	000b      	movs	r3, r1
 8009cea:	0020      	movs	r0, r4
 8009cec:	0029      	movs	r1, r5
 8009cee:	f7f6 fbb3 	bl	8000458 <__aeabi_dcmplt>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d100      	bne.n	8009cf8 <_dtoa_r+0x65c>
 8009cf6:	e716      	b.n	8009b26 <_dtoa_r+0x48a>
 8009cf8:	9b08      	ldr	r3, [sp, #32]
 8009cfa:	001a      	movs	r2, r3
 8009cfc:	3a01      	subs	r2, #1
 8009cfe:	9208      	str	r2, [sp, #32]
 8009d00:	7812      	ldrb	r2, [r2, #0]
 8009d02:	2a30      	cmp	r2, #48	; 0x30
 8009d04:	d0f8      	beq.n	8009cf8 <_dtoa_r+0x65c>
 8009d06:	9308      	str	r3, [sp, #32]
 8009d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	e046      	b.n	8009d9c <_dtoa_r+0x700>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4b2e      	ldr	r3, [pc, #184]	; (8009dcc <_dtoa_r+0x730>)
 8009d12:	f7f8 f8fd 	bl	8001f10 <__aeabi_dmul>
 8009d16:	0006      	movs	r6, r0
 8009d18:	000f      	movs	r7, r1
 8009d1a:	e7b2      	b.n	8009c82 <_dtoa_r+0x5e6>
 8009d1c:	9b06      	ldr	r3, [sp, #24]
 8009d1e:	9a06      	ldr	r2, [sp, #24]
 8009d20:	930a      	str	r3, [sp, #40]	; 0x28
 8009d22:	9b07      	ldr	r3, [sp, #28]
 8009d24:	9c08      	ldr	r4, [sp, #32]
 8009d26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	189b      	adds	r3, r3, r2
 8009d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d2e:	0032      	movs	r2, r6
 8009d30:	003b      	movs	r3, r7
 8009d32:	0020      	movs	r0, r4
 8009d34:	0029      	movs	r1, r5
 8009d36:	f7f7 fcf1 	bl	800171c <__aeabi_ddiv>
 8009d3a:	f7f8 ff4b 	bl	8002bd4 <__aeabi_d2iz>
 8009d3e:	9007      	str	r0, [sp, #28]
 8009d40:	f7f8 ff7e 	bl	8002c40 <__aeabi_i2d>
 8009d44:	0032      	movs	r2, r6
 8009d46:	003b      	movs	r3, r7
 8009d48:	f7f8 f8e2 	bl	8001f10 <__aeabi_dmul>
 8009d4c:	0002      	movs	r2, r0
 8009d4e:	000b      	movs	r3, r1
 8009d50:	0020      	movs	r0, r4
 8009d52:	0029      	movs	r1, r5
 8009d54:	f7f8 fb9e 	bl	8002494 <__aeabi_dsub>
 8009d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5a:	001a      	movs	r2, r3
 8009d5c:	3201      	adds	r2, #1
 8009d5e:	920a      	str	r2, [sp, #40]	; 0x28
 8009d60:	9208      	str	r2, [sp, #32]
 8009d62:	9a07      	ldr	r2, [sp, #28]
 8009d64:	3230      	adds	r2, #48	; 0x30
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d14f      	bne.n	8009e0e <_dtoa_r+0x772>
 8009d6e:	0002      	movs	r2, r0
 8009d70:	000b      	movs	r3, r1
 8009d72:	f7f7 f973 	bl	800105c <__aeabi_dadd>
 8009d76:	0032      	movs	r2, r6
 8009d78:	003b      	movs	r3, r7
 8009d7a:	0004      	movs	r4, r0
 8009d7c:	000d      	movs	r5, r1
 8009d7e:	f7f6 fb7f 	bl	8000480 <__aeabi_dcmpgt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d12e      	bne.n	8009de4 <_dtoa_r+0x748>
 8009d86:	0032      	movs	r2, r6
 8009d88:	003b      	movs	r3, r7
 8009d8a:	0020      	movs	r0, r4
 8009d8c:	0029      	movs	r1, r5
 8009d8e:	f7f6 fb5d 	bl	800044c <__aeabi_dcmpeq>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d002      	beq.n	8009d9c <_dtoa_r+0x700>
 8009d96:	9b07      	ldr	r3, [sp, #28]
 8009d98:	07de      	lsls	r6, r3, #31
 8009d9a:	d423      	bmi.n	8009de4 <_dtoa_r+0x748>
 8009d9c:	9905      	ldr	r1, [sp, #20]
 8009d9e:	9804      	ldr	r0, [sp, #16]
 8009da0:	f000 ff44 	bl	800ac2c <_Bfree>
 8009da4:	2300      	movs	r3, #0
 8009da6:	9a08      	ldr	r2, [sp, #32]
 8009da8:	7013      	strb	r3, [r2, #0]
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009dae:	3301      	adds	r3, #1
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d100      	bne.n	8009dba <_dtoa_r+0x71e>
 8009db8:	e4ba      	b.n	8009730 <_dtoa_r+0x94>
 8009dba:	9a08      	ldr	r2, [sp, #32]
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	e4b7      	b.n	8009730 <_dtoa_r+0x94>
 8009dc0:	0800c408 	.word	0x0800c408
 8009dc4:	0800c3e0 	.word	0x0800c3e0
 8009dc8:	3ff00000 	.word	0x3ff00000
 8009dcc:	40240000 	.word	0x40240000
 8009dd0:	401c0000 	.word	0x401c0000
 8009dd4:	fcc00000 	.word	0xfcc00000
 8009dd8:	40140000 	.word	0x40140000
 8009ddc:	7cc00000 	.word	0x7cc00000
 8009de0:	3fe00000 	.word	0x3fe00000
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	930e      	str	r3, [sp, #56]	; 0x38
 8009de8:	9b08      	ldr	r3, [sp, #32]
 8009dea:	9308      	str	r3, [sp, #32]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	781a      	ldrb	r2, [r3, #0]
 8009df0:	2a39      	cmp	r2, #57	; 0x39
 8009df2:	d108      	bne.n	8009e06 <_dtoa_r+0x76a>
 8009df4:	9a06      	ldr	r2, [sp, #24]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d1f7      	bne.n	8009dea <_dtoa_r+0x74e>
 8009dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dfc:	9906      	ldr	r1, [sp, #24]
 8009dfe:	3201      	adds	r2, #1
 8009e00:	920e      	str	r2, [sp, #56]	; 0x38
 8009e02:	2230      	movs	r2, #48	; 0x30
 8009e04:	700a      	strb	r2, [r1, #0]
 8009e06:	781a      	ldrb	r2, [r3, #0]
 8009e08:	3201      	adds	r2, #1
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e77c      	b.n	8009d08 <_dtoa_r+0x66c>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4ba9      	ldr	r3, [pc, #676]	; (800a0b8 <_dtoa_r+0xa1c>)
 8009e12:	f7f8 f87d 	bl	8001f10 <__aeabi_dmul>
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	0004      	movs	r4, r0
 8009e1c:	000d      	movs	r5, r1
 8009e1e:	f7f6 fb15 	bl	800044c <__aeabi_dcmpeq>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d100      	bne.n	8009e28 <_dtoa_r+0x78c>
 8009e26:	e782      	b.n	8009d2e <_dtoa_r+0x692>
 8009e28:	e7b8      	b.n	8009d9c <_dtoa_r+0x700>
 8009e2a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009e2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009e2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e30:	2f00      	cmp	r7, #0
 8009e32:	d012      	beq.n	8009e5a <_dtoa_r+0x7be>
 8009e34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e36:	2a01      	cmp	r2, #1
 8009e38:	dc6e      	bgt.n	8009f18 <_dtoa_r+0x87c>
 8009e3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e3c:	2a00      	cmp	r2, #0
 8009e3e:	d065      	beq.n	8009f0c <_dtoa_r+0x870>
 8009e40:	4a9e      	ldr	r2, [pc, #632]	; (800a0bc <_dtoa_r+0xa20>)
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e46:	2101      	movs	r1, #1
 8009e48:	18d2      	adds	r2, r2, r3
 8009e4a:	920a      	str	r2, [sp, #40]	; 0x28
 8009e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e4e:	9804      	ldr	r0, [sp, #16]
 8009e50:	18d3      	adds	r3, r2, r3
 8009e52:	930c      	str	r3, [sp, #48]	; 0x30
 8009e54:	f000 ffe6 	bl	800ae24 <__i2b>
 8009e58:	0007      	movs	r7, r0
 8009e5a:	2c00      	cmp	r4, #0
 8009e5c:	d00e      	beq.n	8009e7c <_dtoa_r+0x7e0>
 8009e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	dd0b      	ble.n	8009e7c <_dtoa_r+0x7e0>
 8009e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e66:	0023      	movs	r3, r4
 8009e68:	4294      	cmp	r4, r2
 8009e6a:	dd00      	ble.n	8009e6e <_dtoa_r+0x7d2>
 8009e6c:	0013      	movs	r3, r2
 8009e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e70:	1ae4      	subs	r4, r4, r3
 8009e72:	1ad2      	subs	r2, r2, r3
 8009e74:	920a      	str	r2, [sp, #40]	; 0x28
 8009e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d01e      	beq.n	8009ec0 <_dtoa_r+0x824>
 8009e82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d05c      	beq.n	8009f42 <_dtoa_r+0x8a6>
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	dd10      	ble.n	8009eae <_dtoa_r+0x812>
 8009e8c:	0039      	movs	r1, r7
 8009e8e:	002a      	movs	r2, r5
 8009e90:	9804      	ldr	r0, [sp, #16]
 8009e92:	f001 f88f 	bl	800afb4 <__pow5mult>
 8009e96:	9a05      	ldr	r2, [sp, #20]
 8009e98:	0001      	movs	r1, r0
 8009e9a:	0007      	movs	r7, r0
 8009e9c:	9804      	ldr	r0, [sp, #16]
 8009e9e:	f000 ffd9 	bl	800ae54 <__multiply>
 8009ea2:	0006      	movs	r6, r0
 8009ea4:	9905      	ldr	r1, [sp, #20]
 8009ea6:	9804      	ldr	r0, [sp, #16]
 8009ea8:	f000 fec0 	bl	800ac2c <_Bfree>
 8009eac:	9605      	str	r6, [sp, #20]
 8009eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eb0:	1b5a      	subs	r2, r3, r5
 8009eb2:	42ab      	cmp	r3, r5
 8009eb4:	d004      	beq.n	8009ec0 <_dtoa_r+0x824>
 8009eb6:	9905      	ldr	r1, [sp, #20]
 8009eb8:	9804      	ldr	r0, [sp, #16]
 8009eba:	f001 f87b 	bl	800afb4 <__pow5mult>
 8009ebe:	9005      	str	r0, [sp, #20]
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	9804      	ldr	r0, [sp, #16]
 8009ec4:	f000 ffae 	bl	800ae24 <__i2b>
 8009ec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009eca:	0006      	movs	r6, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd3a      	ble.n	8009f46 <_dtoa_r+0x8aa>
 8009ed0:	001a      	movs	r2, r3
 8009ed2:	0001      	movs	r1, r0
 8009ed4:	9804      	ldr	r0, [sp, #16]
 8009ed6:	f001 f86d 	bl	800afb4 <__pow5mult>
 8009eda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009edc:	0006      	movs	r6, r0
 8009ede:	2500      	movs	r5, #0
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	dc38      	bgt.n	8009f56 <_dtoa_r+0x8ba>
 8009ee4:	2500      	movs	r5, #0
 8009ee6:	9b08      	ldr	r3, [sp, #32]
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	d130      	bne.n	8009f4e <_dtoa_r+0x8b2>
 8009eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eee:	031b      	lsls	r3, r3, #12
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	d12c      	bne.n	8009f4e <_dtoa_r+0x8b2>
 8009ef4:	4b72      	ldr	r3, [pc, #456]	; (800a0c0 <_dtoa_r+0xa24>)
 8009ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef8:	4213      	tst	r3, r2
 8009efa:	d028      	beq.n	8009f4e <_dtoa_r+0x8b2>
 8009efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efe:	3501      	adds	r5, #1
 8009f00:	3301      	adds	r3, #1
 8009f02:	930a      	str	r3, [sp, #40]	; 0x28
 8009f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f06:	3301      	adds	r3, #1
 8009f08:	930c      	str	r3, [sp, #48]	; 0x30
 8009f0a:	e020      	b.n	8009f4e <_dtoa_r+0x8b2>
 8009f0c:	2336      	movs	r3, #54	; 0x36
 8009f0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	e795      	b.n	8009e44 <_dtoa_r+0x7a8>
 8009f18:	9b07      	ldr	r3, [sp, #28]
 8009f1a:	1e5d      	subs	r5, r3, #1
 8009f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1e:	42ab      	cmp	r3, r5
 8009f20:	db07      	blt.n	8009f32 <_dtoa_r+0x896>
 8009f22:	1b5d      	subs	r5, r3, r5
 8009f24:	9b07      	ldr	r3, [sp, #28]
 8009f26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	da8b      	bge.n	8009e44 <_dtoa_r+0x7a8>
 8009f2c:	1ae4      	subs	r4, r4, r3
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e788      	b.n	8009e44 <_dtoa_r+0x7a8>
 8009f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f36:	1aeb      	subs	r3, r5, r3
 8009f38:	18d3      	adds	r3, r2, r3
 8009f3a:	950d      	str	r5, [sp, #52]	; 0x34
 8009f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f3e:	2500      	movs	r5, #0
 8009f40:	e7f0      	b.n	8009f24 <_dtoa_r+0x888>
 8009f42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f44:	e7b7      	b.n	8009eb6 <_dtoa_r+0x81a>
 8009f46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f48:	2500      	movs	r5, #0
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	ddca      	ble.n	8009ee4 <_dtoa_r+0x848>
 8009f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f50:	2001      	movs	r0, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d008      	beq.n	8009f68 <_dtoa_r+0x8cc>
 8009f56:	6933      	ldr	r3, [r6, #16]
 8009f58:	3303      	adds	r3, #3
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	18f3      	adds	r3, r6, r3
 8009f5e:	6858      	ldr	r0, [r3, #4]
 8009f60:	f000 ff18 	bl	800ad94 <__hi0bits>
 8009f64:	2320      	movs	r3, #32
 8009f66:	1a18      	subs	r0, r3, r0
 8009f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f6a:	1818      	adds	r0, r3, r0
 8009f6c:	0002      	movs	r2, r0
 8009f6e:	231f      	movs	r3, #31
 8009f70:	401a      	ands	r2, r3
 8009f72:	4218      	tst	r0, r3
 8009f74:	d047      	beq.n	800a006 <_dtoa_r+0x96a>
 8009f76:	3301      	adds	r3, #1
 8009f78:	1a9b      	subs	r3, r3, r2
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	dd3f      	ble.n	8009ffe <_dtoa_r+0x962>
 8009f7e:	231c      	movs	r3, #28
 8009f80:	1a9b      	subs	r3, r3, r2
 8009f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f84:	18e4      	adds	r4, r4, r3
 8009f86:	18d2      	adds	r2, r2, r3
 8009f88:	920a      	str	r2, [sp, #40]	; 0x28
 8009f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f8c:	18d3      	adds	r3, r2, r3
 8009f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dd05      	ble.n	8009fa2 <_dtoa_r+0x906>
 8009f96:	001a      	movs	r2, r3
 8009f98:	9905      	ldr	r1, [sp, #20]
 8009f9a:	9804      	ldr	r0, [sp, #16]
 8009f9c:	f001 f866 	bl	800b06c <__lshift>
 8009fa0:	9005      	str	r0, [sp, #20]
 8009fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dd05      	ble.n	8009fb4 <_dtoa_r+0x918>
 8009fa8:	0031      	movs	r1, r6
 8009faa:	001a      	movs	r2, r3
 8009fac:	9804      	ldr	r0, [sp, #16]
 8009fae:	f001 f85d 	bl	800b06c <__lshift>
 8009fb2:	0006      	movs	r6, r0
 8009fb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d027      	beq.n	800a00a <_dtoa_r+0x96e>
 8009fba:	0031      	movs	r1, r6
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	f001 f8c3 	bl	800b148 <__mcmp>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	da21      	bge.n	800a00a <_dtoa_r+0x96e>
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	220a      	movs	r2, #10
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	9303      	str	r3, [sp, #12]
 8009fce:	9905      	ldr	r1, [sp, #20]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9804      	ldr	r0, [sp, #16]
 8009fd4:	f000 fe4e 	bl	800ac74 <__multadd>
 8009fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fda:	9005      	str	r0, [sp, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d100      	bne.n	8009fe2 <_dtoa_r+0x946>
 8009fe0:	e15d      	b.n	800a29e <_dtoa_r+0xc02>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	0039      	movs	r1, r7
 8009fe6:	220a      	movs	r2, #10
 8009fe8:	9804      	ldr	r0, [sp, #16]
 8009fea:	f000 fe43 	bl	800ac74 <__multadd>
 8009fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff0:	0007      	movs	r7, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dc49      	bgt.n	800a08a <_dtoa_r+0x9ee>
 8009ff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	dc0e      	bgt.n	800a01a <_dtoa_r+0x97e>
 8009ffc:	e045      	b.n	800a08a <_dtoa_r+0x9ee>
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d0c6      	beq.n	8009f90 <_dtoa_r+0x8f4>
 800a002:	331c      	adds	r3, #28
 800a004:	e7bd      	b.n	8009f82 <_dtoa_r+0x8e6>
 800a006:	0013      	movs	r3, r2
 800a008:	e7fb      	b.n	800a002 <_dtoa_r+0x966>
 800a00a:	9b07      	ldr	r3, [sp, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc36      	bgt.n	800a07e <_dtoa_r+0x9e2>
 800a010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a012:	2b02      	cmp	r3, #2
 800a014:	dd33      	ble.n	800a07e <_dtoa_r+0x9e2>
 800a016:	9b07      	ldr	r3, [sp, #28]
 800a018:	930b      	str	r3, [sp, #44]	; 0x2c
 800a01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10c      	bne.n	800a03a <_dtoa_r+0x99e>
 800a020:	0031      	movs	r1, r6
 800a022:	2205      	movs	r2, #5
 800a024:	9804      	ldr	r0, [sp, #16]
 800a026:	f000 fe25 	bl	800ac74 <__multadd>
 800a02a:	0006      	movs	r6, r0
 800a02c:	0001      	movs	r1, r0
 800a02e:	9805      	ldr	r0, [sp, #20]
 800a030:	f001 f88a 	bl	800b148 <__mcmp>
 800a034:	2800      	cmp	r0, #0
 800a036:	dd00      	ble.n	800a03a <_dtoa_r+0x99e>
 800a038:	e59f      	b.n	8009b7a <_dtoa_r+0x4de>
 800a03a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a03c:	43db      	mvns	r3, r3
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	9b06      	ldr	r3, [sp, #24]
 800a042:	9308      	str	r3, [sp, #32]
 800a044:	2500      	movs	r5, #0
 800a046:	0031      	movs	r1, r6
 800a048:	9804      	ldr	r0, [sp, #16]
 800a04a:	f000 fdef 	bl	800ac2c <_Bfree>
 800a04e:	2f00      	cmp	r7, #0
 800a050:	d100      	bne.n	800a054 <_dtoa_r+0x9b8>
 800a052:	e6a3      	b.n	8009d9c <_dtoa_r+0x700>
 800a054:	2d00      	cmp	r5, #0
 800a056:	d005      	beq.n	800a064 <_dtoa_r+0x9c8>
 800a058:	42bd      	cmp	r5, r7
 800a05a:	d003      	beq.n	800a064 <_dtoa_r+0x9c8>
 800a05c:	0029      	movs	r1, r5
 800a05e:	9804      	ldr	r0, [sp, #16]
 800a060:	f000 fde4 	bl	800ac2c <_Bfree>
 800a064:	0039      	movs	r1, r7
 800a066:	9804      	ldr	r0, [sp, #16]
 800a068:	f000 fde0 	bl	800ac2c <_Bfree>
 800a06c:	e696      	b.n	8009d9c <_dtoa_r+0x700>
 800a06e:	2600      	movs	r6, #0
 800a070:	0037      	movs	r7, r6
 800a072:	e7e2      	b.n	800a03a <_dtoa_r+0x99e>
 800a074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a076:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	0037      	movs	r7, r6
 800a07c:	e57d      	b.n	8009b7a <_dtoa_r+0x4de>
 800a07e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d100      	bne.n	800a086 <_dtoa_r+0x9ea>
 800a084:	e0c3      	b.n	800a20e <_dtoa_r+0xb72>
 800a086:	9b07      	ldr	r3, [sp, #28]
 800a088:	930b      	str	r3, [sp, #44]	; 0x2c
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	dd05      	ble.n	800a09a <_dtoa_r+0x9fe>
 800a08e:	0039      	movs	r1, r7
 800a090:	0022      	movs	r2, r4
 800a092:	9804      	ldr	r0, [sp, #16]
 800a094:	f000 ffea 	bl	800b06c <__lshift>
 800a098:	0007      	movs	r7, r0
 800a09a:	0038      	movs	r0, r7
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	d024      	beq.n	800a0ea <_dtoa_r+0xa4e>
 800a0a0:	6879      	ldr	r1, [r7, #4]
 800a0a2:	9804      	ldr	r0, [sp, #16]
 800a0a4:	f000 fd7e 	bl	800aba4 <_Balloc>
 800a0a8:	1e04      	subs	r4, r0, #0
 800a0aa:	d111      	bne.n	800a0d0 <_dtoa_r+0xa34>
 800a0ac:	0022      	movs	r2, r4
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <_dtoa_r+0xa28>)
 800a0b0:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <_dtoa_r+0xa2c>)
 800a0b2:	4906      	ldr	r1, [pc, #24]	; (800a0cc <_dtoa_r+0xa30>)
 800a0b4:	f7ff fb07 	bl	80096c6 <_dtoa_r+0x2a>
 800a0b8:	40240000 	.word	0x40240000
 800a0bc:	00000433 	.word	0x00000433
 800a0c0:	7ff00000 	.word	0x7ff00000
 800a0c4:	0800c316 	.word	0x0800c316
 800a0c8:	0800c2be 	.word	0x0800c2be
 800a0cc:	000002ef 	.word	0x000002ef
 800a0d0:	0039      	movs	r1, r7
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	310c      	adds	r1, #12
 800a0d6:	3202      	adds	r2, #2
 800a0d8:	0092      	lsls	r2, r2, #2
 800a0da:	300c      	adds	r0, #12
 800a0dc:	f7ff fa3a 	bl	8009554 <memcpy>
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	0021      	movs	r1, r4
 800a0e4:	9804      	ldr	r0, [sp, #16]
 800a0e6:	f000 ffc1 	bl	800b06c <__lshift>
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0ee:	9307      	str	r3, [sp, #28]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	189b      	adds	r3, r3, r2
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	003d      	movs	r5, r7
 800a0f8:	0007      	movs	r7, r0
 800a0fa:	930e      	str	r3, [sp, #56]	; 0x38
 800a0fc:	9b08      	ldr	r3, [sp, #32]
 800a0fe:	4013      	ands	r3, r2
 800a100:	930d      	str	r3, [sp, #52]	; 0x34
 800a102:	0031      	movs	r1, r6
 800a104:	9805      	ldr	r0, [sp, #20]
 800a106:	f7ff fa39 	bl	800957c <quorem>
 800a10a:	0029      	movs	r1, r5
 800a10c:	0004      	movs	r4, r0
 800a10e:	900b      	str	r0, [sp, #44]	; 0x2c
 800a110:	9805      	ldr	r0, [sp, #20]
 800a112:	f001 f819 	bl	800b148 <__mcmp>
 800a116:	003a      	movs	r2, r7
 800a118:	900c      	str	r0, [sp, #48]	; 0x30
 800a11a:	0031      	movs	r1, r6
 800a11c:	9804      	ldr	r0, [sp, #16]
 800a11e:	f001 f82f 	bl	800b180 <__mdiff>
 800a122:	2201      	movs	r2, #1
 800a124:	68c3      	ldr	r3, [r0, #12]
 800a126:	3430      	adds	r4, #48	; 0x30
 800a128:	9008      	str	r0, [sp, #32]
 800a12a:	920a      	str	r2, [sp, #40]	; 0x28
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <_dtoa_r+0xa9e>
 800a130:	0001      	movs	r1, r0
 800a132:	9805      	ldr	r0, [sp, #20]
 800a134:	f001 f808 	bl	800b148 <__mcmp>
 800a138:	900a      	str	r0, [sp, #40]	; 0x28
 800a13a:	9908      	ldr	r1, [sp, #32]
 800a13c:	9804      	ldr	r0, [sp, #16]
 800a13e:	f000 fd75 	bl	800ac2c <_Bfree>
 800a142:	9b07      	ldr	r3, [sp, #28]
 800a144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a146:	3301      	adds	r3, #1
 800a148:	9308      	str	r3, [sp, #32]
 800a14a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a14c:	4313      	orrs	r3, r2
 800a14e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a150:	4313      	orrs	r3, r2
 800a152:	d109      	bne.n	800a168 <_dtoa_r+0xacc>
 800a154:	2c39      	cmp	r4, #57	; 0x39
 800a156:	d022      	beq.n	800a19e <_dtoa_r+0xb02>
 800a158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	dd01      	ble.n	800a162 <_dtoa_r+0xac6>
 800a15e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a160:	3431      	adds	r4, #49	; 0x31
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	701c      	strb	r4, [r3, #0]
 800a166:	e76e      	b.n	800a046 <_dtoa_r+0x9aa>
 800a168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	db04      	blt.n	800a178 <_dtoa_r+0xadc>
 800a16e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a170:	4313      	orrs	r3, r2
 800a172:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a174:	4313      	orrs	r3, r2
 800a176:	d11e      	bne.n	800a1b6 <_dtoa_r+0xb1a>
 800a178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	ddf1      	ble.n	800a162 <_dtoa_r+0xac6>
 800a17e:	9905      	ldr	r1, [sp, #20]
 800a180:	2201      	movs	r2, #1
 800a182:	9804      	ldr	r0, [sp, #16]
 800a184:	f000 ff72 	bl	800b06c <__lshift>
 800a188:	0031      	movs	r1, r6
 800a18a:	9005      	str	r0, [sp, #20]
 800a18c:	f000 ffdc 	bl	800b148 <__mcmp>
 800a190:	2800      	cmp	r0, #0
 800a192:	dc02      	bgt.n	800a19a <_dtoa_r+0xafe>
 800a194:	d1e5      	bne.n	800a162 <_dtoa_r+0xac6>
 800a196:	07e3      	lsls	r3, r4, #31
 800a198:	d5e3      	bpl.n	800a162 <_dtoa_r+0xac6>
 800a19a:	2c39      	cmp	r4, #57	; 0x39
 800a19c:	d1df      	bne.n	800a15e <_dtoa_r+0xac2>
 800a19e:	2339      	movs	r3, #57	; 0x39
 800a1a0:	9a07      	ldr	r2, [sp, #28]
 800a1a2:	7013      	strb	r3, [r2, #0]
 800a1a4:	9b08      	ldr	r3, [sp, #32]
 800a1a6:	9308      	str	r3, [sp, #32]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	781a      	ldrb	r2, [r3, #0]
 800a1ac:	2a39      	cmp	r2, #57	; 0x39
 800a1ae:	d063      	beq.n	800a278 <_dtoa_r+0xbdc>
 800a1b0:	3201      	adds	r2, #1
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e747      	b.n	800a046 <_dtoa_r+0x9aa>
 800a1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dd03      	ble.n	800a1c4 <_dtoa_r+0xb28>
 800a1bc:	2c39      	cmp	r4, #57	; 0x39
 800a1be:	d0ee      	beq.n	800a19e <_dtoa_r+0xb02>
 800a1c0:	3401      	adds	r4, #1
 800a1c2:	e7ce      	b.n	800a162 <_dtoa_r+0xac6>
 800a1c4:	9b07      	ldr	r3, [sp, #28]
 800a1c6:	9a07      	ldr	r2, [sp, #28]
 800a1c8:	701c      	strb	r4, [r3, #0]
 800a1ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d03e      	beq.n	800a24e <_dtoa_r+0xbb2>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	9905      	ldr	r1, [sp, #20]
 800a1d6:	9804      	ldr	r0, [sp, #16]
 800a1d8:	f000 fd4c 	bl	800ac74 <__multadd>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9005      	str	r0, [sp, #20]
 800a1e0:	220a      	movs	r2, #10
 800a1e2:	0029      	movs	r1, r5
 800a1e4:	9804      	ldr	r0, [sp, #16]
 800a1e6:	42bd      	cmp	r5, r7
 800a1e8:	d106      	bne.n	800a1f8 <_dtoa_r+0xb5c>
 800a1ea:	f000 fd43 	bl	800ac74 <__multadd>
 800a1ee:	0005      	movs	r5, r0
 800a1f0:	0007      	movs	r7, r0
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	9307      	str	r3, [sp, #28]
 800a1f6:	e784      	b.n	800a102 <_dtoa_r+0xa66>
 800a1f8:	f000 fd3c 	bl	800ac74 <__multadd>
 800a1fc:	0039      	movs	r1, r7
 800a1fe:	0005      	movs	r5, r0
 800a200:	2300      	movs	r3, #0
 800a202:	220a      	movs	r2, #10
 800a204:	9804      	ldr	r0, [sp, #16]
 800a206:	f000 fd35 	bl	800ac74 <__multadd>
 800a20a:	0007      	movs	r7, r0
 800a20c:	e7f1      	b.n	800a1f2 <_dtoa_r+0xb56>
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	930b      	str	r3, [sp, #44]	; 0x2c
 800a212:	2500      	movs	r5, #0
 800a214:	0031      	movs	r1, r6
 800a216:	9805      	ldr	r0, [sp, #20]
 800a218:	f7ff f9b0 	bl	800957c <quorem>
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	3030      	adds	r0, #48	; 0x30
 800a220:	5558      	strb	r0, [r3, r5]
 800a222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a224:	3501      	adds	r5, #1
 800a226:	0004      	movs	r4, r0
 800a228:	42ab      	cmp	r3, r5
 800a22a:	dd07      	ble.n	800a23c <_dtoa_r+0xba0>
 800a22c:	2300      	movs	r3, #0
 800a22e:	220a      	movs	r2, #10
 800a230:	9905      	ldr	r1, [sp, #20]
 800a232:	9804      	ldr	r0, [sp, #16]
 800a234:	f000 fd1e 	bl	800ac74 <__multadd>
 800a238:	9005      	str	r0, [sp, #20]
 800a23a:	e7eb      	b.n	800a214 <_dtoa_r+0xb78>
 800a23c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a23e:	2301      	movs	r3, #1
 800a240:	2a00      	cmp	r2, #0
 800a242:	dd00      	ble.n	800a246 <_dtoa_r+0xbaa>
 800a244:	0013      	movs	r3, r2
 800a246:	2500      	movs	r5, #0
 800a248:	9a06      	ldr	r2, [sp, #24]
 800a24a:	18d3      	adds	r3, r2, r3
 800a24c:	9308      	str	r3, [sp, #32]
 800a24e:	9905      	ldr	r1, [sp, #20]
 800a250:	2201      	movs	r2, #1
 800a252:	9804      	ldr	r0, [sp, #16]
 800a254:	f000 ff0a 	bl	800b06c <__lshift>
 800a258:	0031      	movs	r1, r6
 800a25a:	9005      	str	r0, [sp, #20]
 800a25c:	f000 ff74 	bl	800b148 <__mcmp>
 800a260:	2800      	cmp	r0, #0
 800a262:	dc9f      	bgt.n	800a1a4 <_dtoa_r+0xb08>
 800a264:	d101      	bne.n	800a26a <_dtoa_r+0xbce>
 800a266:	07e4      	lsls	r4, r4, #31
 800a268:	d49c      	bmi.n	800a1a4 <_dtoa_r+0xb08>
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	9308      	str	r3, [sp, #32]
 800a26e:	3b01      	subs	r3, #1
 800a270:	781a      	ldrb	r2, [r3, #0]
 800a272:	2a30      	cmp	r2, #48	; 0x30
 800a274:	d0fa      	beq.n	800a26c <_dtoa_r+0xbd0>
 800a276:	e6e6      	b.n	800a046 <_dtoa_r+0x9aa>
 800a278:	9a06      	ldr	r2, [sp, #24]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d193      	bne.n	800a1a6 <_dtoa_r+0xb0a>
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	2331      	movs	r3, #49	; 0x31
 800a286:	7013      	strb	r3, [r2, #0]
 800a288:	e6dd      	b.n	800a046 <_dtoa_r+0x9aa>
 800a28a:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <_dtoa_r+0xc14>)
 800a28c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a28e:	9306      	str	r3, [sp, #24]
 800a290:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <_dtoa_r+0xc18>)
 800a292:	2a00      	cmp	r2, #0
 800a294:	d001      	beq.n	800a29a <_dtoa_r+0xbfe>
 800a296:	f7ff fa49 	bl	800972c <_dtoa_r+0x90>
 800a29a:	f7ff fa49 	bl	8009730 <_dtoa_r+0x94>
 800a29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	dcb6      	bgt.n	800a212 <_dtoa_r+0xb76>
 800a2a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	dd00      	ble.n	800a2ac <_dtoa_r+0xc10>
 800a2aa:	e6b6      	b.n	800a01a <_dtoa_r+0x97e>
 800a2ac:	e7b1      	b.n	800a212 <_dtoa_r+0xb76>
 800a2ae:	46c0      	nop			; (mov r8, r8)
 800a2b0:	0800c29a 	.word	0x0800c29a
 800a2b4:	0800c2a2 	.word	0x0800c2a2

0800a2b8 <_free_r>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	0005      	movs	r5, r0
 800a2bc:	2900      	cmp	r1, #0
 800a2be:	d010      	beq.n	800a2e2 <_free_r+0x2a>
 800a2c0:	1f0c      	subs	r4, r1, #4
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	da00      	bge.n	800a2ca <_free_r+0x12>
 800a2c8:	18e4      	adds	r4, r4, r3
 800a2ca:	0028      	movs	r0, r5
 800a2cc:	f000 fc5a 	bl	800ab84 <__malloc_lock>
 800a2d0:	4a1d      	ldr	r2, [pc, #116]	; (800a348 <_free_r+0x90>)
 800a2d2:	6813      	ldr	r3, [r2, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d105      	bne.n	800a2e4 <_free_r+0x2c>
 800a2d8:	6063      	str	r3, [r4, #4]
 800a2da:	6014      	str	r4, [r2, #0]
 800a2dc:	0028      	movs	r0, r5
 800a2de:	f000 fc59 	bl	800ab94 <__malloc_unlock>
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	d908      	bls.n	800a2fa <_free_r+0x42>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	1821      	adds	r1, r4, r0
 800a2ec:	428b      	cmp	r3, r1
 800a2ee:	d1f3      	bne.n	800a2d8 <_free_r+0x20>
 800a2f0:	6819      	ldr	r1, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	1809      	adds	r1, r1, r0
 800a2f6:	6021      	str	r1, [r4, #0]
 800a2f8:	e7ee      	b.n	800a2d8 <_free_r+0x20>
 800a2fa:	001a      	movs	r2, r3
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <_free_r+0x4e>
 800a302:	42a3      	cmp	r3, r4
 800a304:	d9f9      	bls.n	800a2fa <_free_r+0x42>
 800a306:	6811      	ldr	r1, [r2, #0]
 800a308:	1850      	adds	r0, r2, r1
 800a30a:	42a0      	cmp	r0, r4
 800a30c:	d10b      	bne.n	800a326 <_free_r+0x6e>
 800a30e:	6820      	ldr	r0, [r4, #0]
 800a310:	1809      	adds	r1, r1, r0
 800a312:	1850      	adds	r0, r2, r1
 800a314:	6011      	str	r1, [r2, #0]
 800a316:	4283      	cmp	r3, r0
 800a318:	d1e0      	bne.n	800a2dc <_free_r+0x24>
 800a31a:	6818      	ldr	r0, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	1841      	adds	r1, r0, r1
 800a320:	6011      	str	r1, [r2, #0]
 800a322:	6053      	str	r3, [r2, #4]
 800a324:	e7da      	b.n	800a2dc <_free_r+0x24>
 800a326:	42a0      	cmp	r0, r4
 800a328:	d902      	bls.n	800a330 <_free_r+0x78>
 800a32a:	230c      	movs	r3, #12
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	e7d5      	b.n	800a2dc <_free_r+0x24>
 800a330:	6820      	ldr	r0, [r4, #0]
 800a332:	1821      	adds	r1, r4, r0
 800a334:	428b      	cmp	r3, r1
 800a336:	d103      	bne.n	800a340 <_free_r+0x88>
 800a338:	6819      	ldr	r1, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	1809      	adds	r1, r1, r0
 800a33e:	6021      	str	r1, [r4, #0]
 800a340:	6063      	str	r3, [r4, #4]
 800a342:	6054      	str	r4, [r2, #4]
 800a344:	e7ca      	b.n	800a2dc <_free_r+0x24>
 800a346:	46c0      	nop			; (mov r8, r8)
 800a348:	200006e4 	.word	0x200006e4

0800a34c <rshift>:
 800a34c:	0002      	movs	r2, r0
 800a34e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a350:	6904      	ldr	r4, [r0, #16]
 800a352:	114b      	asrs	r3, r1, #5
 800a354:	b085      	sub	sp, #20
 800a356:	3214      	adds	r2, #20
 800a358:	9302      	str	r3, [sp, #8]
 800a35a:	114d      	asrs	r5, r1, #5
 800a35c:	0013      	movs	r3, r2
 800a35e:	42ac      	cmp	r4, r5
 800a360:	dd32      	ble.n	800a3c8 <rshift+0x7c>
 800a362:	261f      	movs	r6, #31
 800a364:	000f      	movs	r7, r1
 800a366:	114b      	asrs	r3, r1, #5
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	00a5      	lsls	r5, r4, #2
 800a36c:	18d3      	adds	r3, r2, r3
 800a36e:	4037      	ands	r7, r6
 800a370:	1955      	adds	r5, r2, r5
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	9701      	str	r7, [sp, #4]
 800a376:	4231      	tst	r1, r6
 800a378:	d10d      	bne.n	800a396 <rshift+0x4a>
 800a37a:	0016      	movs	r6, r2
 800a37c:	0019      	movs	r1, r3
 800a37e:	428d      	cmp	r5, r1
 800a380:	d836      	bhi.n	800a3f0 <rshift+0xa4>
 800a382:	9900      	ldr	r1, [sp, #0]
 800a384:	2300      	movs	r3, #0
 800a386:	3903      	subs	r1, #3
 800a388:	428d      	cmp	r5, r1
 800a38a:	d302      	bcc.n	800a392 <rshift+0x46>
 800a38c:	9b02      	ldr	r3, [sp, #8]
 800a38e:	1ae4      	subs	r4, r4, r3
 800a390:	00a3      	lsls	r3, r4, #2
 800a392:	18d3      	adds	r3, r2, r3
 800a394:	e018      	b.n	800a3c8 <rshift+0x7c>
 800a396:	2120      	movs	r1, #32
 800a398:	9e01      	ldr	r6, [sp, #4]
 800a39a:	9f01      	ldr	r7, [sp, #4]
 800a39c:	1b89      	subs	r1, r1, r6
 800a39e:	9e00      	ldr	r6, [sp, #0]
 800a3a0:	9103      	str	r1, [sp, #12]
 800a3a2:	ce02      	ldmia	r6!, {r1}
 800a3a4:	4694      	mov	ip, r2
 800a3a6:	40f9      	lsrs	r1, r7
 800a3a8:	42b5      	cmp	r5, r6
 800a3aa:	d816      	bhi.n	800a3da <rshift+0x8e>
 800a3ac:	9e00      	ldr	r6, [sp, #0]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	3601      	adds	r6, #1
 800a3b2:	42b5      	cmp	r5, r6
 800a3b4:	d303      	bcc.n	800a3be <rshift+0x72>
 800a3b6:	9b02      	ldr	r3, [sp, #8]
 800a3b8:	1ae3      	subs	r3, r4, r3
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	3b04      	subs	r3, #4
 800a3be:	18d3      	adds	r3, r2, r3
 800a3c0:	6019      	str	r1, [r3, #0]
 800a3c2:	2900      	cmp	r1, #0
 800a3c4:	d000      	beq.n	800a3c8 <rshift+0x7c>
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	1a99      	subs	r1, r3, r2
 800a3ca:	1089      	asrs	r1, r1, #2
 800a3cc:	6101      	str	r1, [r0, #16]
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d101      	bne.n	800a3d6 <rshift+0x8a>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	6143      	str	r3, [r0, #20]
 800a3d6:	b005      	add	sp, #20
 800a3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3da:	6837      	ldr	r7, [r6, #0]
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	409f      	lsls	r7, r3
 800a3e0:	430f      	orrs	r7, r1
 800a3e2:	4661      	mov	r1, ip
 800a3e4:	c180      	stmia	r1!, {r7}
 800a3e6:	468c      	mov	ip, r1
 800a3e8:	9b01      	ldr	r3, [sp, #4]
 800a3ea:	ce02      	ldmia	r6!, {r1}
 800a3ec:	40d9      	lsrs	r1, r3
 800a3ee:	e7db      	b.n	800a3a8 <rshift+0x5c>
 800a3f0:	c980      	ldmia	r1!, {r7}
 800a3f2:	c680      	stmia	r6!, {r7}
 800a3f4:	e7c3      	b.n	800a37e <rshift+0x32>

0800a3f6 <__hexdig_fun>:
 800a3f6:	0002      	movs	r2, r0
 800a3f8:	3a30      	subs	r2, #48	; 0x30
 800a3fa:	0003      	movs	r3, r0
 800a3fc:	2a09      	cmp	r2, #9
 800a3fe:	d802      	bhi.n	800a406 <__hexdig_fun+0x10>
 800a400:	3b20      	subs	r3, #32
 800a402:	b2d8      	uxtb	r0, r3
 800a404:	4770      	bx	lr
 800a406:	0002      	movs	r2, r0
 800a408:	3a61      	subs	r2, #97	; 0x61
 800a40a:	2a05      	cmp	r2, #5
 800a40c:	d801      	bhi.n	800a412 <__hexdig_fun+0x1c>
 800a40e:	3b47      	subs	r3, #71	; 0x47
 800a410:	e7f7      	b.n	800a402 <__hexdig_fun+0xc>
 800a412:	001a      	movs	r2, r3
 800a414:	3a41      	subs	r2, #65	; 0x41
 800a416:	2000      	movs	r0, #0
 800a418:	2a05      	cmp	r2, #5
 800a41a:	d8f3      	bhi.n	800a404 <__hexdig_fun+0xe>
 800a41c:	3b27      	subs	r3, #39	; 0x27
 800a41e:	e7f0      	b.n	800a402 <__hexdig_fun+0xc>

0800a420 <__gethex>:
 800a420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a422:	b089      	sub	sp, #36	; 0x24
 800a424:	9307      	str	r3, [sp, #28]
 800a426:	2302      	movs	r3, #2
 800a428:	9201      	str	r2, [sp, #4]
 800a42a:	680a      	ldr	r2, [r1, #0]
 800a42c:	425b      	negs	r3, r3
 800a42e:	9003      	str	r0, [sp, #12]
 800a430:	9106      	str	r1, [sp, #24]
 800a432:	1c96      	adds	r6, r2, #2
 800a434:	1a9b      	subs	r3, r3, r2
 800a436:	199a      	adds	r2, r3, r6
 800a438:	9600      	str	r6, [sp, #0]
 800a43a:	9205      	str	r2, [sp, #20]
 800a43c:	9a00      	ldr	r2, [sp, #0]
 800a43e:	3601      	adds	r6, #1
 800a440:	7810      	ldrb	r0, [r2, #0]
 800a442:	2830      	cmp	r0, #48	; 0x30
 800a444:	d0f7      	beq.n	800a436 <__gethex+0x16>
 800a446:	f7ff ffd6 	bl	800a3f6 <__hexdig_fun>
 800a44a:	2300      	movs	r3, #0
 800a44c:	001d      	movs	r5, r3
 800a44e:	9302      	str	r3, [sp, #8]
 800a450:	4298      	cmp	r0, r3
 800a452:	d11d      	bne.n	800a490 <__gethex+0x70>
 800a454:	2201      	movs	r2, #1
 800a456:	49a6      	ldr	r1, [pc, #664]	; (800a6f0 <__gethex+0x2d0>)
 800a458:	9800      	ldr	r0, [sp, #0]
 800a45a:	f7fe ffdf 	bl	800941c <strncmp>
 800a45e:	0007      	movs	r7, r0
 800a460:	42a8      	cmp	r0, r5
 800a462:	d169      	bne.n	800a538 <__gethex+0x118>
 800a464:	9b00      	ldr	r3, [sp, #0]
 800a466:	0034      	movs	r4, r6
 800a468:	7858      	ldrb	r0, [r3, #1]
 800a46a:	f7ff ffc4 	bl	800a3f6 <__hexdig_fun>
 800a46e:	2301      	movs	r3, #1
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	42a8      	cmp	r0, r5
 800a474:	d02f      	beq.n	800a4d6 <__gethex+0xb6>
 800a476:	9600      	str	r6, [sp, #0]
 800a478:	9b00      	ldr	r3, [sp, #0]
 800a47a:	7818      	ldrb	r0, [r3, #0]
 800a47c:	2830      	cmp	r0, #48	; 0x30
 800a47e:	d009      	beq.n	800a494 <__gethex+0x74>
 800a480:	f7ff ffb9 	bl	800a3f6 <__hexdig_fun>
 800a484:	4242      	negs	r2, r0
 800a486:	4142      	adcs	r2, r0
 800a488:	2301      	movs	r3, #1
 800a48a:	0035      	movs	r5, r6
 800a48c:	9202      	str	r2, [sp, #8]
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	9c00      	ldr	r4, [sp, #0]
 800a492:	e004      	b.n	800a49e <__gethex+0x7e>
 800a494:	9b00      	ldr	r3, [sp, #0]
 800a496:	3301      	adds	r3, #1
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	e7ed      	b.n	800a478 <__gethex+0x58>
 800a49c:	3401      	adds	r4, #1
 800a49e:	7820      	ldrb	r0, [r4, #0]
 800a4a0:	f7ff ffa9 	bl	800a3f6 <__hexdig_fun>
 800a4a4:	1e07      	subs	r7, r0, #0
 800a4a6:	d1f9      	bne.n	800a49c <__gethex+0x7c>
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	0020      	movs	r0, r4
 800a4ac:	4990      	ldr	r1, [pc, #576]	; (800a6f0 <__gethex+0x2d0>)
 800a4ae:	f7fe ffb5 	bl	800941c <strncmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d10d      	bne.n	800a4d2 <__gethex+0xb2>
 800a4b6:	2d00      	cmp	r5, #0
 800a4b8:	d106      	bne.n	800a4c8 <__gethex+0xa8>
 800a4ba:	3401      	adds	r4, #1
 800a4bc:	0025      	movs	r5, r4
 800a4be:	7820      	ldrb	r0, [r4, #0]
 800a4c0:	f7ff ff99 	bl	800a3f6 <__hexdig_fun>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d102      	bne.n	800a4ce <__gethex+0xae>
 800a4c8:	1b2d      	subs	r5, r5, r4
 800a4ca:	00af      	lsls	r7, r5, #2
 800a4cc:	e003      	b.n	800a4d6 <__gethex+0xb6>
 800a4ce:	3401      	adds	r4, #1
 800a4d0:	e7f5      	b.n	800a4be <__gethex+0x9e>
 800a4d2:	2d00      	cmp	r5, #0
 800a4d4:	d1f8      	bne.n	800a4c8 <__gethex+0xa8>
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	7823      	ldrb	r3, [r4, #0]
 800a4da:	0026      	movs	r6, r4
 800a4dc:	4393      	bics	r3, r2
 800a4de:	2b50      	cmp	r3, #80	; 0x50
 800a4e0:	d11d      	bne.n	800a51e <__gethex+0xfe>
 800a4e2:	7863      	ldrb	r3, [r4, #1]
 800a4e4:	2b2b      	cmp	r3, #43	; 0x2b
 800a4e6:	d02c      	beq.n	800a542 <__gethex+0x122>
 800a4e8:	2b2d      	cmp	r3, #45	; 0x2d
 800a4ea:	d02e      	beq.n	800a54a <__gethex+0x12a>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	1c66      	adds	r6, r4, #1
 800a4f0:	9304      	str	r3, [sp, #16]
 800a4f2:	7830      	ldrb	r0, [r6, #0]
 800a4f4:	f7ff ff7f 	bl	800a3f6 <__hexdig_fun>
 800a4f8:	1e43      	subs	r3, r0, #1
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b18      	cmp	r3, #24
 800a4fe:	d82b      	bhi.n	800a558 <__gethex+0x138>
 800a500:	3810      	subs	r0, #16
 800a502:	0005      	movs	r5, r0
 800a504:	7870      	ldrb	r0, [r6, #1]
 800a506:	f7ff ff76 	bl	800a3f6 <__hexdig_fun>
 800a50a:	1e43      	subs	r3, r0, #1
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	3601      	adds	r6, #1
 800a510:	2b18      	cmp	r3, #24
 800a512:	d91c      	bls.n	800a54e <__gethex+0x12e>
 800a514:	9b04      	ldr	r3, [sp, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d000      	beq.n	800a51c <__gethex+0xfc>
 800a51a:	426d      	negs	r5, r5
 800a51c:	197f      	adds	r7, r7, r5
 800a51e:	9b06      	ldr	r3, [sp, #24]
 800a520:	601e      	str	r6, [r3, #0]
 800a522:	9b02      	ldr	r3, [sp, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d019      	beq.n	800a55c <__gethex+0x13c>
 800a528:	2600      	movs	r6, #0
 800a52a:	9b05      	ldr	r3, [sp, #20]
 800a52c:	42b3      	cmp	r3, r6
 800a52e:	d100      	bne.n	800a532 <__gethex+0x112>
 800a530:	3606      	adds	r6, #6
 800a532:	0030      	movs	r0, r6
 800a534:	b009      	add	sp, #36	; 0x24
 800a536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a538:	2301      	movs	r3, #1
 800a53a:	2700      	movs	r7, #0
 800a53c:	9c00      	ldr	r4, [sp, #0]
 800a53e:	9302      	str	r3, [sp, #8]
 800a540:	e7c9      	b.n	800a4d6 <__gethex+0xb6>
 800a542:	2300      	movs	r3, #0
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	1ca6      	adds	r6, r4, #2
 800a548:	e7d3      	b.n	800a4f2 <__gethex+0xd2>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e7fa      	b.n	800a544 <__gethex+0x124>
 800a54e:	230a      	movs	r3, #10
 800a550:	435d      	muls	r5, r3
 800a552:	182d      	adds	r5, r5, r0
 800a554:	3d10      	subs	r5, #16
 800a556:	e7d5      	b.n	800a504 <__gethex+0xe4>
 800a558:	0026      	movs	r6, r4
 800a55a:	e7e0      	b.n	800a51e <__gethex+0xfe>
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	9902      	ldr	r1, [sp, #8]
 800a560:	1ae3      	subs	r3, r4, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	2b07      	cmp	r3, #7
 800a566:	dc0a      	bgt.n	800a57e <__gethex+0x15e>
 800a568:	9803      	ldr	r0, [sp, #12]
 800a56a:	f000 fb1b 	bl	800aba4 <_Balloc>
 800a56e:	1e05      	subs	r5, r0, #0
 800a570:	d108      	bne.n	800a584 <__gethex+0x164>
 800a572:	002a      	movs	r2, r5
 800a574:	21e4      	movs	r1, #228	; 0xe4
 800a576:	4b5f      	ldr	r3, [pc, #380]	; (800a6f4 <__gethex+0x2d4>)
 800a578:	485f      	ldr	r0, [pc, #380]	; (800a6f8 <__gethex+0x2d8>)
 800a57a:	f001 fbe7 	bl	800bd4c <__assert_func>
 800a57e:	3101      	adds	r1, #1
 800a580:	105b      	asrs	r3, r3, #1
 800a582:	e7ef      	b.n	800a564 <__gethex+0x144>
 800a584:	0003      	movs	r3, r0
 800a586:	3314      	adds	r3, #20
 800a588:	9302      	str	r3, [sp, #8]
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	2300      	movs	r3, #0
 800a58e:	001e      	movs	r6, r3
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	9b00      	ldr	r3, [sp, #0]
 800a594:	42a3      	cmp	r3, r4
 800a596:	d33f      	bcc.n	800a618 <__gethex+0x1f8>
 800a598:	9c05      	ldr	r4, [sp, #20]
 800a59a:	9b02      	ldr	r3, [sp, #8]
 800a59c:	c440      	stmia	r4!, {r6}
 800a59e:	1ae4      	subs	r4, r4, r3
 800a5a0:	10a4      	asrs	r4, r4, #2
 800a5a2:	0030      	movs	r0, r6
 800a5a4:	612c      	str	r4, [r5, #16]
 800a5a6:	f000 fbf5 	bl	800ad94 <__hi0bits>
 800a5aa:	9b01      	ldr	r3, [sp, #4]
 800a5ac:	0164      	lsls	r4, r4, #5
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	1a26      	subs	r6, r4, r0
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	429e      	cmp	r6, r3
 800a5b6:	dd51      	ble.n	800a65c <__gethex+0x23c>
 800a5b8:	1af6      	subs	r6, r6, r3
 800a5ba:	0031      	movs	r1, r6
 800a5bc:	0028      	movs	r0, r5
 800a5be:	f000 ff89 	bl	800b4d4 <__any_on>
 800a5c2:	1e04      	subs	r4, r0, #0
 800a5c4:	d016      	beq.n	800a5f4 <__gethex+0x1d4>
 800a5c6:	2401      	movs	r4, #1
 800a5c8:	231f      	movs	r3, #31
 800a5ca:	0020      	movs	r0, r4
 800a5cc:	1e72      	subs	r2, r6, #1
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	4098      	lsls	r0, r3
 800a5d2:	0003      	movs	r3, r0
 800a5d4:	1151      	asrs	r1, r2, #5
 800a5d6:	9802      	ldr	r0, [sp, #8]
 800a5d8:	0089      	lsls	r1, r1, #2
 800a5da:	5809      	ldr	r1, [r1, r0]
 800a5dc:	4219      	tst	r1, r3
 800a5de:	d009      	beq.n	800a5f4 <__gethex+0x1d4>
 800a5e0:	42a2      	cmp	r2, r4
 800a5e2:	dd06      	ble.n	800a5f2 <__gethex+0x1d2>
 800a5e4:	0028      	movs	r0, r5
 800a5e6:	1eb1      	subs	r1, r6, #2
 800a5e8:	f000 ff74 	bl	800b4d4 <__any_on>
 800a5ec:	3402      	adds	r4, #2
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d100      	bne.n	800a5f4 <__gethex+0x1d4>
 800a5f2:	2402      	movs	r4, #2
 800a5f4:	0031      	movs	r1, r6
 800a5f6:	0028      	movs	r0, r5
 800a5f8:	f7ff fea8 	bl	800a34c <rshift>
 800a5fc:	19bf      	adds	r7, r7, r6
 800a5fe:	9b01      	ldr	r3, [sp, #4]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	42bb      	cmp	r3, r7
 800a604:	da3a      	bge.n	800a67c <__gethex+0x25c>
 800a606:	0029      	movs	r1, r5
 800a608:	9803      	ldr	r0, [sp, #12]
 800a60a:	f000 fb0f 	bl	800ac2c <_Bfree>
 800a60e:	2300      	movs	r3, #0
 800a610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a612:	26a3      	movs	r6, #163	; 0xa3
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	e78c      	b.n	800a532 <__gethex+0x112>
 800a618:	3c01      	subs	r4, #1
 800a61a:	7823      	ldrb	r3, [r4, #0]
 800a61c:	2b2e      	cmp	r3, #46	; 0x2e
 800a61e:	d012      	beq.n	800a646 <__gethex+0x226>
 800a620:	9b04      	ldr	r3, [sp, #16]
 800a622:	2b20      	cmp	r3, #32
 800a624:	d104      	bne.n	800a630 <__gethex+0x210>
 800a626:	9b05      	ldr	r3, [sp, #20]
 800a628:	c340      	stmia	r3!, {r6}
 800a62a:	2600      	movs	r6, #0
 800a62c:	9305      	str	r3, [sp, #20]
 800a62e:	9604      	str	r6, [sp, #16]
 800a630:	7820      	ldrb	r0, [r4, #0]
 800a632:	f7ff fee0 	bl	800a3f6 <__hexdig_fun>
 800a636:	230f      	movs	r3, #15
 800a638:	4018      	ands	r0, r3
 800a63a:	9b04      	ldr	r3, [sp, #16]
 800a63c:	4098      	lsls	r0, r3
 800a63e:	3304      	adds	r3, #4
 800a640:	4306      	orrs	r6, r0
 800a642:	9304      	str	r3, [sp, #16]
 800a644:	e7a5      	b.n	800a592 <__gethex+0x172>
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d8e9      	bhi.n	800a620 <__gethex+0x200>
 800a64c:	2201      	movs	r2, #1
 800a64e:	0020      	movs	r0, r4
 800a650:	4927      	ldr	r1, [pc, #156]	; (800a6f0 <__gethex+0x2d0>)
 800a652:	f7fe fee3 	bl	800941c <strncmp>
 800a656:	2800      	cmp	r0, #0
 800a658:	d1e2      	bne.n	800a620 <__gethex+0x200>
 800a65a:	e79a      	b.n	800a592 <__gethex+0x172>
 800a65c:	9b00      	ldr	r3, [sp, #0]
 800a65e:	2400      	movs	r4, #0
 800a660:	429e      	cmp	r6, r3
 800a662:	dacc      	bge.n	800a5fe <__gethex+0x1de>
 800a664:	1b9e      	subs	r6, r3, r6
 800a666:	0029      	movs	r1, r5
 800a668:	0032      	movs	r2, r6
 800a66a:	9803      	ldr	r0, [sp, #12]
 800a66c:	f000 fcfe 	bl	800b06c <__lshift>
 800a670:	0003      	movs	r3, r0
 800a672:	3314      	adds	r3, #20
 800a674:	0005      	movs	r5, r0
 800a676:	1bbf      	subs	r7, r7, r6
 800a678:	9302      	str	r3, [sp, #8]
 800a67a:	e7c0      	b.n	800a5fe <__gethex+0x1de>
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	685e      	ldr	r6, [r3, #4]
 800a680:	42be      	cmp	r6, r7
 800a682:	dd70      	ble.n	800a766 <__gethex+0x346>
 800a684:	9b00      	ldr	r3, [sp, #0]
 800a686:	1bf6      	subs	r6, r6, r7
 800a688:	42b3      	cmp	r3, r6
 800a68a:	dc37      	bgt.n	800a6fc <__gethex+0x2dc>
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	2b02      	cmp	r3, #2
 800a692:	d024      	beq.n	800a6de <__gethex+0x2be>
 800a694:	2b03      	cmp	r3, #3
 800a696:	d026      	beq.n	800a6e6 <__gethex+0x2c6>
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d117      	bne.n	800a6cc <__gethex+0x2ac>
 800a69c:	9b00      	ldr	r3, [sp, #0]
 800a69e:	42b3      	cmp	r3, r6
 800a6a0:	d114      	bne.n	800a6cc <__gethex+0x2ac>
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d10b      	bne.n	800a6be <__gethex+0x29e>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	9a07      	ldr	r2, [sp, #28]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	2662      	movs	r6, #98	; 0x62
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	9a02      	ldr	r2, [sp, #8]
 800a6b4:	612b      	str	r3, [r5, #16]
 800a6b6:	6013      	str	r3, [r2, #0]
 800a6b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6ba:	601d      	str	r5, [r3, #0]
 800a6bc:	e739      	b.n	800a532 <__gethex+0x112>
 800a6be:	9900      	ldr	r1, [sp, #0]
 800a6c0:	0028      	movs	r0, r5
 800a6c2:	3901      	subs	r1, #1
 800a6c4:	f000 ff06 	bl	800b4d4 <__any_on>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1ec      	bne.n	800a6a6 <__gethex+0x286>
 800a6cc:	0029      	movs	r1, r5
 800a6ce:	9803      	ldr	r0, [sp, #12]
 800a6d0:	f000 faac 	bl	800ac2c <_Bfree>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6d8:	2650      	movs	r6, #80	; 0x50
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	e729      	b.n	800a532 <__gethex+0x112>
 800a6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1f3      	bne.n	800a6cc <__gethex+0x2ac>
 800a6e4:	e7df      	b.n	800a6a6 <__gethex+0x286>
 800a6e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1dc      	bne.n	800a6a6 <__gethex+0x286>
 800a6ec:	e7ee      	b.n	800a6cc <__gethex+0x2ac>
 800a6ee:	46c0      	nop			; (mov r8, r8)
 800a6f0:	0800c104 	.word	0x0800c104
 800a6f4:	0800c316 	.word	0x0800c316
 800a6f8:	0800c327 	.word	0x0800c327
 800a6fc:	1e77      	subs	r7, r6, #1
 800a6fe:	2c00      	cmp	r4, #0
 800a700:	d12f      	bne.n	800a762 <__gethex+0x342>
 800a702:	2f00      	cmp	r7, #0
 800a704:	d004      	beq.n	800a710 <__gethex+0x2f0>
 800a706:	0039      	movs	r1, r7
 800a708:	0028      	movs	r0, r5
 800a70a:	f000 fee3 	bl	800b4d4 <__any_on>
 800a70e:	0004      	movs	r4, r0
 800a710:	231f      	movs	r3, #31
 800a712:	117a      	asrs	r2, r7, #5
 800a714:	401f      	ands	r7, r3
 800a716:	3b1e      	subs	r3, #30
 800a718:	40bb      	lsls	r3, r7
 800a71a:	9902      	ldr	r1, [sp, #8]
 800a71c:	0092      	lsls	r2, r2, #2
 800a71e:	5852      	ldr	r2, [r2, r1]
 800a720:	421a      	tst	r2, r3
 800a722:	d001      	beq.n	800a728 <__gethex+0x308>
 800a724:	2302      	movs	r3, #2
 800a726:	431c      	orrs	r4, r3
 800a728:	9b00      	ldr	r3, [sp, #0]
 800a72a:	0031      	movs	r1, r6
 800a72c:	1b9b      	subs	r3, r3, r6
 800a72e:	2602      	movs	r6, #2
 800a730:	0028      	movs	r0, r5
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	f7ff fe0a 	bl	800a34c <rshift>
 800a738:	9b01      	ldr	r3, [sp, #4]
 800a73a:	685f      	ldr	r7, [r3, #4]
 800a73c:	2c00      	cmp	r4, #0
 800a73e:	d041      	beq.n	800a7c4 <__gethex+0x3a4>
 800a740:	9b01      	ldr	r3, [sp, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	2b02      	cmp	r3, #2
 800a746:	d010      	beq.n	800a76a <__gethex+0x34a>
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d012      	beq.n	800a772 <__gethex+0x352>
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d106      	bne.n	800a75e <__gethex+0x33e>
 800a750:	07a2      	lsls	r2, r4, #30
 800a752:	d504      	bpl.n	800a75e <__gethex+0x33e>
 800a754:	9a02      	ldr	r2, [sp, #8]
 800a756:	6812      	ldr	r2, [r2, #0]
 800a758:	4314      	orrs	r4, r2
 800a75a:	421c      	tst	r4, r3
 800a75c:	d10c      	bne.n	800a778 <__gethex+0x358>
 800a75e:	2310      	movs	r3, #16
 800a760:	e02f      	b.n	800a7c2 <__gethex+0x3a2>
 800a762:	2401      	movs	r4, #1
 800a764:	e7d4      	b.n	800a710 <__gethex+0x2f0>
 800a766:	2601      	movs	r6, #1
 800a768:	e7e8      	b.n	800a73c <__gethex+0x31c>
 800a76a:	2301      	movs	r3, #1
 800a76c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a76e:	1a9b      	subs	r3, r3, r2
 800a770:	930f      	str	r3, [sp, #60]	; 0x3c
 800a772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0f2      	beq.n	800a75e <__gethex+0x33e>
 800a778:	692b      	ldr	r3, [r5, #16]
 800a77a:	2000      	movs	r0, #0
 800a77c:	9302      	str	r3, [sp, #8]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	9304      	str	r3, [sp, #16]
 800a782:	002b      	movs	r3, r5
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	3314      	adds	r3, #20
 800a788:	1899      	adds	r1, r3, r2
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	1c54      	adds	r4, r2, #1
 800a78e:	d01e      	beq.n	800a7ce <__gethex+0x3ae>
 800a790:	3201      	adds	r2, #1
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	002b      	movs	r3, r5
 800a796:	3314      	adds	r3, #20
 800a798:	2e02      	cmp	r6, #2
 800a79a:	d141      	bne.n	800a820 <__gethex+0x400>
 800a79c:	9a01      	ldr	r2, [sp, #4]
 800a79e:	9900      	ldr	r1, [sp, #0]
 800a7a0:	6812      	ldr	r2, [r2, #0]
 800a7a2:	3a01      	subs	r2, #1
 800a7a4:	428a      	cmp	r2, r1
 800a7a6:	d10b      	bne.n	800a7c0 <__gethex+0x3a0>
 800a7a8:	221f      	movs	r2, #31
 800a7aa:	9800      	ldr	r0, [sp, #0]
 800a7ac:	1149      	asrs	r1, r1, #5
 800a7ae:	4002      	ands	r2, r0
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	0004      	movs	r4, r0
 800a7b4:	4094      	lsls	r4, r2
 800a7b6:	0089      	lsls	r1, r1, #2
 800a7b8:	58cb      	ldr	r3, [r1, r3]
 800a7ba:	4223      	tst	r3, r4
 800a7bc:	d000      	beq.n	800a7c0 <__gethex+0x3a0>
 800a7be:	2601      	movs	r6, #1
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	431e      	orrs	r6, r3
 800a7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7c6:	601d      	str	r5, [r3, #0]
 800a7c8:	9b07      	ldr	r3, [sp, #28]
 800a7ca:	601f      	str	r7, [r3, #0]
 800a7cc:	e6b1      	b.n	800a532 <__gethex+0x112>
 800a7ce:	c301      	stmia	r3!, {r0}
 800a7d0:	4299      	cmp	r1, r3
 800a7d2:	d8da      	bhi.n	800a78a <__gethex+0x36a>
 800a7d4:	68ab      	ldr	r3, [r5, #8]
 800a7d6:	9a02      	ldr	r2, [sp, #8]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	db18      	blt.n	800a80e <__gethex+0x3ee>
 800a7dc:	6869      	ldr	r1, [r5, #4]
 800a7de:	9803      	ldr	r0, [sp, #12]
 800a7e0:	3101      	adds	r1, #1
 800a7e2:	f000 f9df 	bl	800aba4 <_Balloc>
 800a7e6:	1e04      	subs	r4, r0, #0
 800a7e8:	d104      	bne.n	800a7f4 <__gethex+0x3d4>
 800a7ea:	0022      	movs	r2, r4
 800a7ec:	2184      	movs	r1, #132	; 0x84
 800a7ee:	4b1c      	ldr	r3, [pc, #112]	; (800a860 <__gethex+0x440>)
 800a7f0:	481c      	ldr	r0, [pc, #112]	; (800a864 <__gethex+0x444>)
 800a7f2:	e6c2      	b.n	800a57a <__gethex+0x15a>
 800a7f4:	0029      	movs	r1, r5
 800a7f6:	692a      	ldr	r2, [r5, #16]
 800a7f8:	310c      	adds	r1, #12
 800a7fa:	3202      	adds	r2, #2
 800a7fc:	0092      	lsls	r2, r2, #2
 800a7fe:	300c      	adds	r0, #12
 800a800:	f7fe fea8 	bl	8009554 <memcpy>
 800a804:	0029      	movs	r1, r5
 800a806:	9803      	ldr	r0, [sp, #12]
 800a808:	f000 fa10 	bl	800ac2c <_Bfree>
 800a80c:	0025      	movs	r5, r4
 800a80e:	692b      	ldr	r3, [r5, #16]
 800a810:	1c5a      	adds	r2, r3, #1
 800a812:	612a      	str	r2, [r5, #16]
 800a814:	2201      	movs	r2, #1
 800a816:	3304      	adds	r3, #4
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	18eb      	adds	r3, r5, r3
 800a81c:	605a      	str	r2, [r3, #4]
 800a81e:	e7b9      	b.n	800a794 <__gethex+0x374>
 800a820:	692a      	ldr	r2, [r5, #16]
 800a822:	9902      	ldr	r1, [sp, #8]
 800a824:	428a      	cmp	r2, r1
 800a826:	dd09      	ble.n	800a83c <__gethex+0x41c>
 800a828:	2101      	movs	r1, #1
 800a82a:	0028      	movs	r0, r5
 800a82c:	f7ff fd8e 	bl	800a34c <rshift>
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	3701      	adds	r7, #1
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	42bb      	cmp	r3, r7
 800a838:	dac1      	bge.n	800a7be <__gethex+0x39e>
 800a83a:	e6e4      	b.n	800a606 <__gethex+0x1e6>
 800a83c:	221f      	movs	r2, #31
 800a83e:	9c00      	ldr	r4, [sp, #0]
 800a840:	9900      	ldr	r1, [sp, #0]
 800a842:	2601      	movs	r6, #1
 800a844:	4014      	ands	r4, r2
 800a846:	4211      	tst	r1, r2
 800a848:	d0ba      	beq.n	800a7c0 <__gethex+0x3a0>
 800a84a:	9a04      	ldr	r2, [sp, #16]
 800a84c:	189b      	adds	r3, r3, r2
 800a84e:	3b04      	subs	r3, #4
 800a850:	6818      	ldr	r0, [r3, #0]
 800a852:	f000 fa9f 	bl	800ad94 <__hi0bits>
 800a856:	2320      	movs	r3, #32
 800a858:	1b1b      	subs	r3, r3, r4
 800a85a:	4298      	cmp	r0, r3
 800a85c:	dbe4      	blt.n	800a828 <__gethex+0x408>
 800a85e:	e7af      	b.n	800a7c0 <__gethex+0x3a0>
 800a860:	0800c316 	.word	0x0800c316
 800a864:	0800c327 	.word	0x0800c327

0800a868 <L_shift>:
 800a868:	2308      	movs	r3, #8
 800a86a:	b570      	push	{r4, r5, r6, lr}
 800a86c:	2520      	movs	r5, #32
 800a86e:	1a9a      	subs	r2, r3, r2
 800a870:	0092      	lsls	r2, r2, #2
 800a872:	1aad      	subs	r5, r5, r2
 800a874:	6843      	ldr	r3, [r0, #4]
 800a876:	6804      	ldr	r4, [r0, #0]
 800a878:	001e      	movs	r6, r3
 800a87a:	40ae      	lsls	r6, r5
 800a87c:	40d3      	lsrs	r3, r2
 800a87e:	4334      	orrs	r4, r6
 800a880:	6004      	str	r4, [r0, #0]
 800a882:	6043      	str	r3, [r0, #4]
 800a884:	3004      	adds	r0, #4
 800a886:	4288      	cmp	r0, r1
 800a888:	d3f4      	bcc.n	800a874 <L_shift+0xc>
 800a88a:	bd70      	pop	{r4, r5, r6, pc}

0800a88c <__match>:
 800a88c:	b530      	push	{r4, r5, lr}
 800a88e:	6803      	ldr	r3, [r0, #0]
 800a890:	780c      	ldrb	r4, [r1, #0]
 800a892:	3301      	adds	r3, #1
 800a894:	2c00      	cmp	r4, #0
 800a896:	d102      	bne.n	800a89e <__match+0x12>
 800a898:	6003      	str	r3, [r0, #0]
 800a89a:	2001      	movs	r0, #1
 800a89c:	bd30      	pop	{r4, r5, pc}
 800a89e:	781a      	ldrb	r2, [r3, #0]
 800a8a0:	0015      	movs	r5, r2
 800a8a2:	3d41      	subs	r5, #65	; 0x41
 800a8a4:	2d19      	cmp	r5, #25
 800a8a6:	d800      	bhi.n	800a8aa <__match+0x1e>
 800a8a8:	3220      	adds	r2, #32
 800a8aa:	3101      	adds	r1, #1
 800a8ac:	42a2      	cmp	r2, r4
 800a8ae:	d0ef      	beq.n	800a890 <__match+0x4>
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e7f3      	b.n	800a89c <__match+0x10>

0800a8b4 <__hexnan>:
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	680b      	ldr	r3, [r1, #0]
 800a8b8:	b08b      	sub	sp, #44	; 0x2c
 800a8ba:	9201      	str	r2, [sp, #4]
 800a8bc:	9901      	ldr	r1, [sp, #4]
 800a8be:	115a      	asrs	r2, r3, #5
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	188a      	adds	r2, r1, r2
 800a8c4:	9202      	str	r2, [sp, #8]
 800a8c6:	0019      	movs	r1, r3
 800a8c8:	221f      	movs	r2, #31
 800a8ca:	4011      	ands	r1, r2
 800a8cc:	9008      	str	r0, [sp, #32]
 800a8ce:	9106      	str	r1, [sp, #24]
 800a8d0:	4213      	tst	r3, r2
 800a8d2:	d002      	beq.n	800a8da <__hexnan+0x26>
 800a8d4:	9b02      	ldr	r3, [sp, #8]
 800a8d6:	3304      	adds	r3, #4
 800a8d8:	9302      	str	r3, [sp, #8]
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	2500      	movs	r5, #0
 800a8de:	1f1f      	subs	r7, r3, #4
 800a8e0:	003e      	movs	r6, r7
 800a8e2:	003c      	movs	r4, r7
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	603d      	str	r5, [r7, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	9507      	str	r5, [sp, #28]
 800a8ec:	9305      	str	r3, [sp, #20]
 800a8ee:	9503      	str	r5, [sp, #12]
 800a8f0:	9b05      	ldr	r3, [sp, #20]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	9b05      	ldr	r3, [sp, #20]
 800a8f8:	785b      	ldrb	r3, [r3, #1]
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d028      	beq.n	800a952 <__hexnan+0x9e>
 800a900:	9804      	ldr	r0, [sp, #16]
 800a902:	f7ff fd78 	bl	800a3f6 <__hexdig_fun>
 800a906:	2800      	cmp	r0, #0
 800a908:	d154      	bne.n	800a9b4 <__hexnan+0x100>
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	2b20      	cmp	r3, #32
 800a90e:	d819      	bhi.n	800a944 <__hexnan+0x90>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	9a07      	ldr	r2, [sp, #28]
 800a914:	4293      	cmp	r3, r2
 800a916:	dd12      	ble.n	800a93e <__hexnan+0x8a>
 800a918:	42b4      	cmp	r4, r6
 800a91a:	d206      	bcs.n	800a92a <__hexnan+0x76>
 800a91c:	2d07      	cmp	r5, #7
 800a91e:	dc04      	bgt.n	800a92a <__hexnan+0x76>
 800a920:	002a      	movs	r2, r5
 800a922:	0031      	movs	r1, r6
 800a924:	0020      	movs	r0, r4
 800a926:	f7ff ff9f 	bl	800a868 <L_shift>
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	2508      	movs	r5, #8
 800a92e:	429c      	cmp	r4, r3
 800a930:	d905      	bls.n	800a93e <__hexnan+0x8a>
 800a932:	1f26      	subs	r6, r4, #4
 800a934:	2500      	movs	r5, #0
 800a936:	0034      	movs	r4, r6
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	6035      	str	r5, [r6, #0]
 800a93c:	9307      	str	r3, [sp, #28]
 800a93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	e7d5      	b.n	800a8f0 <__hexnan+0x3c>
 800a944:	9b04      	ldr	r3, [sp, #16]
 800a946:	2b29      	cmp	r3, #41	; 0x29
 800a948:	d159      	bne.n	800a9fe <__hexnan+0x14a>
 800a94a:	9b05      	ldr	r3, [sp, #20]
 800a94c:	9a08      	ldr	r2, [sp, #32]
 800a94e:	3302      	adds	r3, #2
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d052      	beq.n	800a9fe <__hexnan+0x14a>
 800a958:	42b4      	cmp	r4, r6
 800a95a:	d206      	bcs.n	800a96a <__hexnan+0xb6>
 800a95c:	2d07      	cmp	r5, #7
 800a95e:	dc04      	bgt.n	800a96a <__hexnan+0xb6>
 800a960:	002a      	movs	r2, r5
 800a962:	0031      	movs	r1, r6
 800a964:	0020      	movs	r0, r4
 800a966:	f7ff ff7f 	bl	800a868 <L_shift>
 800a96a:	9b01      	ldr	r3, [sp, #4]
 800a96c:	429c      	cmp	r4, r3
 800a96e:	d935      	bls.n	800a9dc <__hexnan+0x128>
 800a970:	001a      	movs	r2, r3
 800a972:	0023      	movs	r3, r4
 800a974:	cb02      	ldmia	r3!, {r1}
 800a976:	c202      	stmia	r2!, {r1}
 800a978:	429f      	cmp	r7, r3
 800a97a:	d2fb      	bcs.n	800a974 <__hexnan+0xc0>
 800a97c:	9b02      	ldr	r3, [sp, #8]
 800a97e:	1c62      	adds	r2, r4, #1
 800a980:	1ed9      	subs	r1, r3, #3
 800a982:	2304      	movs	r3, #4
 800a984:	4291      	cmp	r1, r2
 800a986:	d305      	bcc.n	800a994 <__hexnan+0xe0>
 800a988:	9b02      	ldr	r3, [sp, #8]
 800a98a:	3b04      	subs	r3, #4
 800a98c:	1b1b      	subs	r3, r3, r4
 800a98e:	089b      	lsrs	r3, r3, #2
 800a990:	3301      	adds	r3, #1
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	9a01      	ldr	r2, [sp, #4]
 800a996:	18d3      	adds	r3, r2, r3
 800a998:	2200      	movs	r2, #0
 800a99a:	c304      	stmia	r3!, {r2}
 800a99c:	429f      	cmp	r7, r3
 800a99e:	d2fc      	bcs.n	800a99a <__hexnan+0xe6>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d104      	bne.n	800a9b0 <__hexnan+0xfc>
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	429f      	cmp	r7, r3
 800a9aa:	d126      	bne.n	800a9fa <__hexnan+0x146>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	2005      	movs	r0, #5
 800a9b2:	e025      	b.n	800aa00 <__hexnan+0x14c>
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	3501      	adds	r5, #1
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	9303      	str	r3, [sp, #12]
 800a9bc:	2d08      	cmp	r5, #8
 800a9be:	dd06      	ble.n	800a9ce <__hexnan+0x11a>
 800a9c0:	9b01      	ldr	r3, [sp, #4]
 800a9c2:	429c      	cmp	r4, r3
 800a9c4:	d9bb      	bls.n	800a93e <__hexnan+0x8a>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	2501      	movs	r5, #1
 800a9ca:	3c04      	subs	r4, #4
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	220f      	movs	r2, #15
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	4010      	ands	r0, r2
 800a9d4:	011b      	lsls	r3, r3, #4
 800a9d6:	4303      	orrs	r3, r0
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	e7b0      	b.n	800a93e <__hexnan+0x8a>
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0de      	beq.n	800a9a0 <__hexnan+0xec>
 800a9e2:	2320      	movs	r3, #32
 800a9e4:	9a06      	ldr	r2, [sp, #24]
 800a9e6:	9902      	ldr	r1, [sp, #8]
 800a9e8:	1a9b      	subs	r3, r3, r2
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4252      	negs	r2, r2
 800a9ee:	40da      	lsrs	r2, r3
 800a9f0:	3904      	subs	r1, #4
 800a9f2:	680b      	ldr	r3, [r1, #0]
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	600b      	str	r3, [r1, #0]
 800a9f8:	e7d2      	b.n	800a9a0 <__hexnan+0xec>
 800a9fa:	3f04      	subs	r7, #4
 800a9fc:	e7d0      	b.n	800a9a0 <__hexnan+0xec>
 800a9fe:	2004      	movs	r0, #4
 800aa00:	b00b      	add	sp, #44	; 0x2c
 800aa02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa04 <malloc>:
 800aa04:	b510      	push	{r4, lr}
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <malloc+0x10>)
 800aa08:	0001      	movs	r1, r0
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	f000 f826 	bl	800aa5c <_malloc_r>
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	200001d0 	.word	0x200001d0

0800aa18 <sbrk_aligned>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	4e0f      	ldr	r6, [pc, #60]	; (800aa58 <sbrk_aligned+0x40>)
 800aa1c:	000d      	movs	r5, r1
 800aa1e:	6831      	ldr	r1, [r6, #0]
 800aa20:	0004      	movs	r4, r0
 800aa22:	2900      	cmp	r1, #0
 800aa24:	d102      	bne.n	800aa2c <sbrk_aligned+0x14>
 800aa26:	f001 f97f 	bl	800bd28 <_sbrk_r>
 800aa2a:	6030      	str	r0, [r6, #0]
 800aa2c:	0029      	movs	r1, r5
 800aa2e:	0020      	movs	r0, r4
 800aa30:	f001 f97a 	bl	800bd28 <_sbrk_r>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d00a      	beq.n	800aa4e <sbrk_aligned+0x36>
 800aa38:	2303      	movs	r3, #3
 800aa3a:	1cc5      	adds	r5, r0, #3
 800aa3c:	439d      	bics	r5, r3
 800aa3e:	42a8      	cmp	r0, r5
 800aa40:	d007      	beq.n	800aa52 <sbrk_aligned+0x3a>
 800aa42:	1a29      	subs	r1, r5, r0
 800aa44:	0020      	movs	r0, r4
 800aa46:	f001 f96f 	bl	800bd28 <_sbrk_r>
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d101      	bne.n	800aa52 <sbrk_aligned+0x3a>
 800aa4e:	2501      	movs	r5, #1
 800aa50:	426d      	negs	r5, r5
 800aa52:	0028      	movs	r0, r5
 800aa54:	bd70      	pop	{r4, r5, r6, pc}
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	200006e8 	.word	0x200006e8

0800aa5c <_malloc_r>:
 800aa5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa5e:	2203      	movs	r2, #3
 800aa60:	1ccb      	adds	r3, r1, #3
 800aa62:	4393      	bics	r3, r2
 800aa64:	3308      	adds	r3, #8
 800aa66:	0006      	movs	r6, r0
 800aa68:	001f      	movs	r7, r3
 800aa6a:	2b0c      	cmp	r3, #12
 800aa6c:	d238      	bcs.n	800aae0 <_malloc_r+0x84>
 800aa6e:	270c      	movs	r7, #12
 800aa70:	42b9      	cmp	r1, r7
 800aa72:	d837      	bhi.n	800aae4 <_malloc_r+0x88>
 800aa74:	0030      	movs	r0, r6
 800aa76:	f000 f885 	bl	800ab84 <__malloc_lock>
 800aa7a:	4b38      	ldr	r3, [pc, #224]	; (800ab5c <_malloc_r+0x100>)
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	001c      	movs	r4, r3
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	d133      	bne.n	800aaee <_malloc_r+0x92>
 800aa86:	0039      	movs	r1, r7
 800aa88:	0030      	movs	r0, r6
 800aa8a:	f7ff ffc5 	bl	800aa18 <sbrk_aligned>
 800aa8e:	0004      	movs	r4, r0
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d15e      	bne.n	800ab52 <_malloc_r+0xf6>
 800aa94:	9b00      	ldr	r3, [sp, #0]
 800aa96:	681c      	ldr	r4, [r3, #0]
 800aa98:	0025      	movs	r5, r4
 800aa9a:	2d00      	cmp	r5, #0
 800aa9c:	d14e      	bne.n	800ab3c <_malloc_r+0xe0>
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	d051      	beq.n	800ab46 <_malloc_r+0xea>
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	0029      	movs	r1, r5
 800aaa6:	18e3      	adds	r3, r4, r3
 800aaa8:	0030      	movs	r0, r6
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	f001 f93c 	bl	800bd28 <_sbrk_r>
 800aab0:	9b01      	ldr	r3, [sp, #4]
 800aab2:	4283      	cmp	r3, r0
 800aab4:	d147      	bne.n	800ab46 <_malloc_r+0xea>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	0030      	movs	r0, r6
 800aaba:	1aff      	subs	r7, r7, r3
 800aabc:	0039      	movs	r1, r7
 800aabe:	f7ff ffab 	bl	800aa18 <sbrk_aligned>
 800aac2:	3001      	adds	r0, #1
 800aac4:	d03f      	beq.n	800ab46 <_malloc_r+0xea>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	19db      	adds	r3, r3, r7
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d040      	beq.n	800ab56 <_malloc_r+0xfa>
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	42a2      	cmp	r2, r4
 800aad8:	d133      	bne.n	800ab42 <_malloc_r+0xe6>
 800aada:	2200      	movs	r2, #0
 800aadc:	605a      	str	r2, [r3, #4]
 800aade:	e014      	b.n	800ab0a <_malloc_r+0xae>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dac5      	bge.n	800aa70 <_malloc_r+0x14>
 800aae4:	230c      	movs	r3, #12
 800aae6:	2500      	movs	r5, #0
 800aae8:	6033      	str	r3, [r6, #0]
 800aaea:	0028      	movs	r0, r5
 800aaec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aaee:	6821      	ldr	r1, [r4, #0]
 800aaf0:	1bc9      	subs	r1, r1, r7
 800aaf2:	d420      	bmi.n	800ab36 <_malloc_r+0xda>
 800aaf4:	290b      	cmp	r1, #11
 800aaf6:	d918      	bls.n	800ab2a <_malloc_r+0xce>
 800aaf8:	19e2      	adds	r2, r4, r7
 800aafa:	6027      	str	r7, [r4, #0]
 800aafc:	42a3      	cmp	r3, r4
 800aafe:	d112      	bne.n	800ab26 <_malloc_r+0xca>
 800ab00:	9b00      	ldr	r3, [sp, #0]
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	6863      	ldr	r3, [r4, #4]
 800ab06:	6011      	str	r1, [r2, #0]
 800ab08:	6053      	str	r3, [r2, #4]
 800ab0a:	0030      	movs	r0, r6
 800ab0c:	0025      	movs	r5, r4
 800ab0e:	f000 f841 	bl	800ab94 <__malloc_unlock>
 800ab12:	2207      	movs	r2, #7
 800ab14:	350b      	adds	r5, #11
 800ab16:	1d23      	adds	r3, r4, #4
 800ab18:	4395      	bics	r5, r2
 800ab1a:	1aea      	subs	r2, r5, r3
 800ab1c:	429d      	cmp	r5, r3
 800ab1e:	d0e4      	beq.n	800aaea <_malloc_r+0x8e>
 800ab20:	1b5b      	subs	r3, r3, r5
 800ab22:	50a3      	str	r3, [r4, r2]
 800ab24:	e7e1      	b.n	800aaea <_malloc_r+0x8e>
 800ab26:	605a      	str	r2, [r3, #4]
 800ab28:	e7ec      	b.n	800ab04 <_malloc_r+0xa8>
 800ab2a:	6862      	ldr	r2, [r4, #4]
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	d1d5      	bne.n	800aadc <_malloc_r+0x80>
 800ab30:	9b00      	ldr	r3, [sp, #0]
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	e7e9      	b.n	800ab0a <_malloc_r+0xae>
 800ab36:	0023      	movs	r3, r4
 800ab38:	6864      	ldr	r4, [r4, #4]
 800ab3a:	e7a2      	b.n	800aa82 <_malloc_r+0x26>
 800ab3c:	002c      	movs	r4, r5
 800ab3e:	686d      	ldr	r5, [r5, #4]
 800ab40:	e7ab      	b.n	800aa9a <_malloc_r+0x3e>
 800ab42:	0013      	movs	r3, r2
 800ab44:	e7c4      	b.n	800aad0 <_malloc_r+0x74>
 800ab46:	230c      	movs	r3, #12
 800ab48:	0030      	movs	r0, r6
 800ab4a:	6033      	str	r3, [r6, #0]
 800ab4c:	f000 f822 	bl	800ab94 <__malloc_unlock>
 800ab50:	e7cb      	b.n	800aaea <_malloc_r+0x8e>
 800ab52:	6027      	str	r7, [r4, #0]
 800ab54:	e7d9      	b.n	800ab0a <_malloc_r+0xae>
 800ab56:	605b      	str	r3, [r3, #4]
 800ab58:	deff      	udf	#255	; 0xff
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	200006e4 	.word	0x200006e4

0800ab60 <__ascii_mbtowc>:
 800ab60:	b082      	sub	sp, #8
 800ab62:	2900      	cmp	r1, #0
 800ab64:	d100      	bne.n	800ab68 <__ascii_mbtowc+0x8>
 800ab66:	a901      	add	r1, sp, #4
 800ab68:	1e10      	subs	r0, r2, #0
 800ab6a:	d006      	beq.n	800ab7a <__ascii_mbtowc+0x1a>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d006      	beq.n	800ab7e <__ascii_mbtowc+0x1e>
 800ab70:	7813      	ldrb	r3, [r2, #0]
 800ab72:	600b      	str	r3, [r1, #0]
 800ab74:	7810      	ldrb	r0, [r2, #0]
 800ab76:	1e43      	subs	r3, r0, #1
 800ab78:	4198      	sbcs	r0, r3
 800ab7a:	b002      	add	sp, #8
 800ab7c:	4770      	bx	lr
 800ab7e:	2002      	movs	r0, #2
 800ab80:	4240      	negs	r0, r0
 800ab82:	e7fa      	b.n	800ab7a <__ascii_mbtowc+0x1a>

0800ab84 <__malloc_lock>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4802      	ldr	r0, [pc, #8]	; (800ab90 <__malloc_lock+0xc>)
 800ab88:	f7fe fcd7 	bl	800953a <__retarget_lock_acquire_recursive>
 800ab8c:	bd10      	pop	{r4, pc}
 800ab8e:	46c0      	nop			; (mov r8, r8)
 800ab90:	200006e0 	.word	0x200006e0

0800ab94 <__malloc_unlock>:
 800ab94:	b510      	push	{r4, lr}
 800ab96:	4802      	ldr	r0, [pc, #8]	; (800aba0 <__malloc_unlock+0xc>)
 800ab98:	f7fe fcd0 	bl	800953c <__retarget_lock_release_recursive>
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	200006e0 	.word	0x200006e0

0800aba4 <_Balloc>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	69c5      	ldr	r5, [r0, #28]
 800aba8:	0006      	movs	r6, r0
 800abaa:	000c      	movs	r4, r1
 800abac:	2d00      	cmp	r5, #0
 800abae:	d10e      	bne.n	800abce <_Balloc+0x2a>
 800abb0:	2010      	movs	r0, #16
 800abb2:	f7ff ff27 	bl	800aa04 <malloc>
 800abb6:	1e02      	subs	r2, r0, #0
 800abb8:	61f0      	str	r0, [r6, #28]
 800abba:	d104      	bne.n	800abc6 <_Balloc+0x22>
 800abbc:	216b      	movs	r1, #107	; 0x6b
 800abbe:	4b19      	ldr	r3, [pc, #100]	; (800ac24 <_Balloc+0x80>)
 800abc0:	4819      	ldr	r0, [pc, #100]	; (800ac28 <_Balloc+0x84>)
 800abc2:	f001 f8c3 	bl	800bd4c <__assert_func>
 800abc6:	6045      	str	r5, [r0, #4]
 800abc8:	6085      	str	r5, [r0, #8]
 800abca:	6005      	str	r5, [r0, #0]
 800abcc:	60c5      	str	r5, [r0, #12]
 800abce:	69f5      	ldr	r5, [r6, #28]
 800abd0:	68eb      	ldr	r3, [r5, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d013      	beq.n	800abfe <_Balloc+0x5a>
 800abd6:	69f3      	ldr	r3, [r6, #28]
 800abd8:	00a2      	lsls	r2, r4, #2
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	189b      	adds	r3, r3, r2
 800abde:	6818      	ldr	r0, [r3, #0]
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d118      	bne.n	800ac16 <_Balloc+0x72>
 800abe4:	2101      	movs	r1, #1
 800abe6:	000d      	movs	r5, r1
 800abe8:	40a5      	lsls	r5, r4
 800abea:	1d6a      	adds	r2, r5, #5
 800abec:	0030      	movs	r0, r6
 800abee:	0092      	lsls	r2, r2, #2
 800abf0:	f001 f8ca 	bl	800bd88 <_calloc_r>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d00c      	beq.n	800ac12 <_Balloc+0x6e>
 800abf8:	6044      	str	r4, [r0, #4]
 800abfa:	6085      	str	r5, [r0, #8]
 800abfc:	e00d      	b.n	800ac1a <_Balloc+0x76>
 800abfe:	2221      	movs	r2, #33	; 0x21
 800ac00:	2104      	movs	r1, #4
 800ac02:	0030      	movs	r0, r6
 800ac04:	f001 f8c0 	bl	800bd88 <_calloc_r>
 800ac08:	69f3      	ldr	r3, [r6, #28]
 800ac0a:	60e8      	str	r0, [r5, #12]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e1      	bne.n	800abd6 <_Balloc+0x32>
 800ac12:	2000      	movs	r0, #0
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	6802      	ldr	r2, [r0, #0]
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6103      	str	r3, [r0, #16]
 800ac1e:	60c3      	str	r3, [r0, #12]
 800ac20:	e7f8      	b.n	800ac14 <_Balloc+0x70>
 800ac22:	46c0      	nop			; (mov r8, r8)
 800ac24:	0800c2a7 	.word	0x0800c2a7
 800ac28:	0800c387 	.word	0x0800c387

0800ac2c <_Bfree>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	69c6      	ldr	r6, [r0, #28]
 800ac30:	0005      	movs	r5, r0
 800ac32:	000c      	movs	r4, r1
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	d10e      	bne.n	800ac56 <_Bfree+0x2a>
 800ac38:	2010      	movs	r0, #16
 800ac3a:	f7ff fee3 	bl	800aa04 <malloc>
 800ac3e:	1e02      	subs	r2, r0, #0
 800ac40:	61e8      	str	r0, [r5, #28]
 800ac42:	d104      	bne.n	800ac4e <_Bfree+0x22>
 800ac44:	218f      	movs	r1, #143	; 0x8f
 800ac46:	4b09      	ldr	r3, [pc, #36]	; (800ac6c <_Bfree+0x40>)
 800ac48:	4809      	ldr	r0, [pc, #36]	; (800ac70 <_Bfree+0x44>)
 800ac4a:	f001 f87f 	bl	800bd4c <__assert_func>
 800ac4e:	6046      	str	r6, [r0, #4]
 800ac50:	6086      	str	r6, [r0, #8]
 800ac52:	6006      	str	r6, [r0, #0]
 800ac54:	60c6      	str	r6, [r0, #12]
 800ac56:	2c00      	cmp	r4, #0
 800ac58:	d007      	beq.n	800ac6a <_Bfree+0x3e>
 800ac5a:	69eb      	ldr	r3, [r5, #28]
 800ac5c:	6862      	ldr	r2, [r4, #4]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	0092      	lsls	r2, r2, #2
 800ac62:	189b      	adds	r3, r3, r2
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	6022      	str	r2, [r4, #0]
 800ac68:	601c      	str	r4, [r3, #0]
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	0800c2a7 	.word	0x0800c2a7
 800ac70:	0800c387 	.word	0x0800c387

0800ac74 <__multadd>:
 800ac74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac76:	000e      	movs	r6, r1
 800ac78:	9001      	str	r0, [sp, #4]
 800ac7a:	000c      	movs	r4, r1
 800ac7c:	001d      	movs	r5, r3
 800ac7e:	2000      	movs	r0, #0
 800ac80:	690f      	ldr	r7, [r1, #16]
 800ac82:	3614      	adds	r6, #20
 800ac84:	6833      	ldr	r3, [r6, #0]
 800ac86:	3001      	adds	r0, #1
 800ac88:	b299      	uxth	r1, r3
 800ac8a:	4351      	muls	r1, r2
 800ac8c:	0c1b      	lsrs	r3, r3, #16
 800ac8e:	4353      	muls	r3, r2
 800ac90:	1949      	adds	r1, r1, r5
 800ac92:	0c0d      	lsrs	r5, r1, #16
 800ac94:	195b      	adds	r3, r3, r5
 800ac96:	0c1d      	lsrs	r5, r3, #16
 800ac98:	b289      	uxth	r1, r1
 800ac9a:	041b      	lsls	r3, r3, #16
 800ac9c:	185b      	adds	r3, r3, r1
 800ac9e:	c608      	stmia	r6!, {r3}
 800aca0:	4287      	cmp	r7, r0
 800aca2:	dcef      	bgt.n	800ac84 <__multadd+0x10>
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	d022      	beq.n	800acee <__multadd+0x7a>
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	42bb      	cmp	r3, r7
 800acac:	dc19      	bgt.n	800ace2 <__multadd+0x6e>
 800acae:	6861      	ldr	r1, [r4, #4]
 800acb0:	9801      	ldr	r0, [sp, #4]
 800acb2:	3101      	adds	r1, #1
 800acb4:	f7ff ff76 	bl	800aba4 <_Balloc>
 800acb8:	1e06      	subs	r6, r0, #0
 800acba:	d105      	bne.n	800acc8 <__multadd+0x54>
 800acbc:	0032      	movs	r2, r6
 800acbe:	21ba      	movs	r1, #186	; 0xba
 800acc0:	4b0c      	ldr	r3, [pc, #48]	; (800acf4 <__multadd+0x80>)
 800acc2:	480d      	ldr	r0, [pc, #52]	; (800acf8 <__multadd+0x84>)
 800acc4:	f001 f842 	bl	800bd4c <__assert_func>
 800acc8:	0021      	movs	r1, r4
 800acca:	6922      	ldr	r2, [r4, #16]
 800accc:	310c      	adds	r1, #12
 800acce:	3202      	adds	r2, #2
 800acd0:	0092      	lsls	r2, r2, #2
 800acd2:	300c      	adds	r0, #12
 800acd4:	f7fe fc3e 	bl	8009554 <memcpy>
 800acd8:	0021      	movs	r1, r4
 800acda:	9801      	ldr	r0, [sp, #4]
 800acdc:	f7ff ffa6 	bl	800ac2c <_Bfree>
 800ace0:	0034      	movs	r4, r6
 800ace2:	1d3b      	adds	r3, r7, #4
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	18e3      	adds	r3, r4, r3
 800ace8:	605d      	str	r5, [r3, #4]
 800acea:	1c7b      	adds	r3, r7, #1
 800acec:	6123      	str	r3, [r4, #16]
 800acee:	0020      	movs	r0, r4
 800acf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	0800c316 	.word	0x0800c316
 800acf8:	0800c387 	.word	0x0800c387

0800acfc <__s2b>:
 800acfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acfe:	0006      	movs	r6, r0
 800ad00:	0018      	movs	r0, r3
 800ad02:	000c      	movs	r4, r1
 800ad04:	3008      	adds	r0, #8
 800ad06:	2109      	movs	r1, #9
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	0015      	movs	r5, r2
 800ad0c:	f7f5 faa2 	bl	8000254 <__divsi3>
 800ad10:	2301      	movs	r3, #1
 800ad12:	2100      	movs	r1, #0
 800ad14:	4283      	cmp	r3, r0
 800ad16:	db0a      	blt.n	800ad2e <__s2b+0x32>
 800ad18:	0030      	movs	r0, r6
 800ad1a:	f7ff ff43 	bl	800aba4 <_Balloc>
 800ad1e:	1e01      	subs	r1, r0, #0
 800ad20:	d108      	bne.n	800ad34 <__s2b+0x38>
 800ad22:	000a      	movs	r2, r1
 800ad24:	4b19      	ldr	r3, [pc, #100]	; (800ad8c <__s2b+0x90>)
 800ad26:	481a      	ldr	r0, [pc, #104]	; (800ad90 <__s2b+0x94>)
 800ad28:	31d3      	adds	r1, #211	; 0xd3
 800ad2a:	f001 f80f 	bl	800bd4c <__assert_func>
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	3101      	adds	r1, #1
 800ad32:	e7ef      	b.n	800ad14 <__s2b+0x18>
 800ad34:	9b08      	ldr	r3, [sp, #32]
 800ad36:	6143      	str	r3, [r0, #20]
 800ad38:	2301      	movs	r3, #1
 800ad3a:	6103      	str	r3, [r0, #16]
 800ad3c:	2d09      	cmp	r5, #9
 800ad3e:	dd18      	ble.n	800ad72 <__s2b+0x76>
 800ad40:	0023      	movs	r3, r4
 800ad42:	3309      	adds	r3, #9
 800ad44:	001f      	movs	r7, r3
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	1964      	adds	r4, r4, r5
 800ad4a:	783b      	ldrb	r3, [r7, #0]
 800ad4c:	220a      	movs	r2, #10
 800ad4e:	0030      	movs	r0, r6
 800ad50:	3b30      	subs	r3, #48	; 0x30
 800ad52:	f7ff ff8f 	bl	800ac74 <__multadd>
 800ad56:	3701      	adds	r7, #1
 800ad58:	0001      	movs	r1, r0
 800ad5a:	42a7      	cmp	r7, r4
 800ad5c:	d1f5      	bne.n	800ad4a <__s2b+0x4e>
 800ad5e:	002c      	movs	r4, r5
 800ad60:	9b00      	ldr	r3, [sp, #0]
 800ad62:	3c08      	subs	r4, #8
 800ad64:	191c      	adds	r4, r3, r4
 800ad66:	002f      	movs	r7, r5
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	429f      	cmp	r7, r3
 800ad6c:	db04      	blt.n	800ad78 <__s2b+0x7c>
 800ad6e:	0008      	movs	r0, r1
 800ad70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad72:	2509      	movs	r5, #9
 800ad74:	340a      	adds	r4, #10
 800ad76:	e7f6      	b.n	800ad66 <__s2b+0x6a>
 800ad78:	1b63      	subs	r3, r4, r5
 800ad7a:	5ddb      	ldrb	r3, [r3, r7]
 800ad7c:	220a      	movs	r2, #10
 800ad7e:	0030      	movs	r0, r6
 800ad80:	3b30      	subs	r3, #48	; 0x30
 800ad82:	f7ff ff77 	bl	800ac74 <__multadd>
 800ad86:	3701      	adds	r7, #1
 800ad88:	0001      	movs	r1, r0
 800ad8a:	e7ed      	b.n	800ad68 <__s2b+0x6c>
 800ad8c:	0800c316 	.word	0x0800c316
 800ad90:	0800c387 	.word	0x0800c387

0800ad94 <__hi0bits>:
 800ad94:	0003      	movs	r3, r0
 800ad96:	0c02      	lsrs	r2, r0, #16
 800ad98:	2000      	movs	r0, #0
 800ad9a:	4282      	cmp	r2, r0
 800ad9c:	d101      	bne.n	800ada2 <__hi0bits+0xe>
 800ad9e:	041b      	lsls	r3, r3, #16
 800ada0:	3010      	adds	r0, #16
 800ada2:	0e1a      	lsrs	r2, r3, #24
 800ada4:	d101      	bne.n	800adaa <__hi0bits+0x16>
 800ada6:	3008      	adds	r0, #8
 800ada8:	021b      	lsls	r3, r3, #8
 800adaa:	0f1a      	lsrs	r2, r3, #28
 800adac:	d101      	bne.n	800adb2 <__hi0bits+0x1e>
 800adae:	3004      	adds	r0, #4
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	0f9a      	lsrs	r2, r3, #30
 800adb4:	d101      	bne.n	800adba <__hi0bits+0x26>
 800adb6:	3002      	adds	r0, #2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	db03      	blt.n	800adc6 <__hi0bits+0x32>
 800adbe:	3001      	adds	r0, #1
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	d400      	bmi.n	800adc6 <__hi0bits+0x32>
 800adc4:	2020      	movs	r0, #32
 800adc6:	4770      	bx	lr

0800adc8 <__lo0bits>:
 800adc8:	6803      	ldr	r3, [r0, #0]
 800adca:	0001      	movs	r1, r0
 800adcc:	2207      	movs	r2, #7
 800adce:	0018      	movs	r0, r3
 800add0:	4010      	ands	r0, r2
 800add2:	4213      	tst	r3, r2
 800add4:	d00d      	beq.n	800adf2 <__lo0bits+0x2a>
 800add6:	3a06      	subs	r2, #6
 800add8:	2000      	movs	r0, #0
 800adda:	4213      	tst	r3, r2
 800addc:	d105      	bne.n	800adea <__lo0bits+0x22>
 800adde:	3002      	adds	r0, #2
 800ade0:	4203      	tst	r3, r0
 800ade2:	d003      	beq.n	800adec <__lo0bits+0x24>
 800ade4:	40d3      	lsrs	r3, r2
 800ade6:	0010      	movs	r0, r2
 800ade8:	600b      	str	r3, [r1, #0]
 800adea:	4770      	bx	lr
 800adec:	089b      	lsrs	r3, r3, #2
 800adee:	600b      	str	r3, [r1, #0]
 800adf0:	e7fb      	b.n	800adea <__lo0bits+0x22>
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	2a00      	cmp	r2, #0
 800adf6:	d101      	bne.n	800adfc <__lo0bits+0x34>
 800adf8:	2010      	movs	r0, #16
 800adfa:	0c1b      	lsrs	r3, r3, #16
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	2a00      	cmp	r2, #0
 800ae00:	d101      	bne.n	800ae06 <__lo0bits+0x3e>
 800ae02:	3008      	adds	r0, #8
 800ae04:	0a1b      	lsrs	r3, r3, #8
 800ae06:	071a      	lsls	r2, r3, #28
 800ae08:	d101      	bne.n	800ae0e <__lo0bits+0x46>
 800ae0a:	3004      	adds	r0, #4
 800ae0c:	091b      	lsrs	r3, r3, #4
 800ae0e:	079a      	lsls	r2, r3, #30
 800ae10:	d101      	bne.n	800ae16 <__lo0bits+0x4e>
 800ae12:	3002      	adds	r0, #2
 800ae14:	089b      	lsrs	r3, r3, #2
 800ae16:	07da      	lsls	r2, r3, #31
 800ae18:	d4e9      	bmi.n	800adee <__lo0bits+0x26>
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	085b      	lsrs	r3, r3, #1
 800ae1e:	d1e6      	bne.n	800adee <__lo0bits+0x26>
 800ae20:	2020      	movs	r0, #32
 800ae22:	e7e2      	b.n	800adea <__lo0bits+0x22>

0800ae24 <__i2b>:
 800ae24:	b510      	push	{r4, lr}
 800ae26:	000c      	movs	r4, r1
 800ae28:	2101      	movs	r1, #1
 800ae2a:	f7ff febb 	bl	800aba4 <_Balloc>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d107      	bne.n	800ae42 <__i2b+0x1e>
 800ae32:	2146      	movs	r1, #70	; 0x46
 800ae34:	4c05      	ldr	r4, [pc, #20]	; (800ae4c <__i2b+0x28>)
 800ae36:	0002      	movs	r2, r0
 800ae38:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <__i2b+0x2c>)
 800ae3a:	0020      	movs	r0, r4
 800ae3c:	31ff      	adds	r1, #255	; 0xff
 800ae3e:	f000 ff85 	bl	800bd4c <__assert_func>
 800ae42:	2301      	movs	r3, #1
 800ae44:	6144      	str	r4, [r0, #20]
 800ae46:	6103      	str	r3, [r0, #16]
 800ae48:	bd10      	pop	{r4, pc}
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	0800c387 	.word	0x0800c387
 800ae50:	0800c316 	.word	0x0800c316

0800ae54 <__multiply>:
 800ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae56:	0015      	movs	r5, r2
 800ae58:	690a      	ldr	r2, [r1, #16]
 800ae5a:	692b      	ldr	r3, [r5, #16]
 800ae5c:	000c      	movs	r4, r1
 800ae5e:	b08b      	sub	sp, #44	; 0x2c
 800ae60:	429a      	cmp	r2, r3
 800ae62:	da01      	bge.n	800ae68 <__multiply+0x14>
 800ae64:	002c      	movs	r4, r5
 800ae66:	000d      	movs	r5, r1
 800ae68:	6927      	ldr	r7, [r4, #16]
 800ae6a:	692e      	ldr	r6, [r5, #16]
 800ae6c:	6861      	ldr	r1, [r4, #4]
 800ae6e:	19bb      	adds	r3, r7, r6
 800ae70:	9303      	str	r3, [sp, #12]
 800ae72:	68a3      	ldr	r3, [r4, #8]
 800ae74:	19ba      	adds	r2, r7, r6
 800ae76:	4293      	cmp	r3, r2
 800ae78:	da00      	bge.n	800ae7c <__multiply+0x28>
 800ae7a:	3101      	adds	r1, #1
 800ae7c:	f7ff fe92 	bl	800aba4 <_Balloc>
 800ae80:	9002      	str	r0, [sp, #8]
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d106      	bne.n	800ae94 <__multiply+0x40>
 800ae86:	21b1      	movs	r1, #177	; 0xb1
 800ae88:	4b48      	ldr	r3, [pc, #288]	; (800afac <__multiply+0x158>)
 800ae8a:	4849      	ldr	r0, [pc, #292]	; (800afb0 <__multiply+0x15c>)
 800ae8c:	9a02      	ldr	r2, [sp, #8]
 800ae8e:	0049      	lsls	r1, r1, #1
 800ae90:	f000 ff5c 	bl	800bd4c <__assert_func>
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	2200      	movs	r2, #0
 800ae98:	3314      	adds	r3, #20
 800ae9a:	469c      	mov	ip, r3
 800ae9c:	19bb      	adds	r3, r7, r6
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4463      	add	r3, ip
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	4663      	mov	r3, ip
 800aea6:	9904      	ldr	r1, [sp, #16]
 800aea8:	428b      	cmp	r3, r1
 800aeaa:	d32a      	bcc.n	800af02 <__multiply+0xae>
 800aeac:	0023      	movs	r3, r4
 800aeae:	00bf      	lsls	r7, r7, #2
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	3514      	adds	r5, #20
 800aeb4:	9308      	str	r3, [sp, #32]
 800aeb6:	00b6      	lsls	r6, r6, #2
 800aeb8:	19db      	adds	r3, r3, r7
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	19ab      	adds	r3, r5, r6
 800aebe:	9309      	str	r3, [sp, #36]	; 0x24
 800aec0:	2304      	movs	r3, #4
 800aec2:	9306      	str	r3, [sp, #24]
 800aec4:	0023      	movs	r3, r4
 800aec6:	9a05      	ldr	r2, [sp, #20]
 800aec8:	3315      	adds	r3, #21
 800aeca:	9501      	str	r5, [sp, #4]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d305      	bcc.n	800aedc <__multiply+0x88>
 800aed0:	1b13      	subs	r3, r2, r4
 800aed2:	3b15      	subs	r3, #21
 800aed4:	089b      	lsrs	r3, r3, #2
 800aed6:	3301      	adds	r3, #1
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	9306      	str	r3, [sp, #24]
 800aedc:	9b01      	ldr	r3, [sp, #4]
 800aede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d310      	bcc.n	800af06 <__multiply+0xb2>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	dd05      	ble.n	800aef6 <__multiply+0xa2>
 800aeea:	9b04      	ldr	r3, [sp, #16]
 800aeec:	3b04      	subs	r3, #4
 800aeee:	9304      	str	r3, [sp, #16]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d056      	beq.n	800afa4 <__multiply+0x150>
 800aef6:	9b02      	ldr	r3, [sp, #8]
 800aef8:	9a03      	ldr	r2, [sp, #12]
 800aefa:	0018      	movs	r0, r3
 800aefc:	611a      	str	r2, [r3, #16]
 800aefe:	b00b      	add	sp, #44	; 0x2c
 800af00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af02:	c304      	stmia	r3!, {r2}
 800af04:	e7cf      	b.n	800aea6 <__multiply+0x52>
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	b280      	uxth	r0, r0
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d01e      	beq.n	800af4e <__multiply+0xfa>
 800af10:	4667      	mov	r7, ip
 800af12:	2500      	movs	r5, #0
 800af14:	9e08      	ldr	r6, [sp, #32]
 800af16:	ce02      	ldmia	r6!, {r1}
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	9307      	str	r3, [sp, #28]
 800af1c:	b28b      	uxth	r3, r1
 800af1e:	4343      	muls	r3, r0
 800af20:	001a      	movs	r2, r3
 800af22:	466b      	mov	r3, sp
 800af24:	8b9b      	ldrh	r3, [r3, #28]
 800af26:	18d3      	adds	r3, r2, r3
 800af28:	195b      	adds	r3, r3, r5
 800af2a:	0c0d      	lsrs	r5, r1, #16
 800af2c:	4345      	muls	r5, r0
 800af2e:	9a07      	ldr	r2, [sp, #28]
 800af30:	0c11      	lsrs	r1, r2, #16
 800af32:	1869      	adds	r1, r5, r1
 800af34:	0c1a      	lsrs	r2, r3, #16
 800af36:	188a      	adds	r2, r1, r2
 800af38:	b29b      	uxth	r3, r3
 800af3a:	0c15      	lsrs	r5, r2, #16
 800af3c:	0412      	lsls	r2, r2, #16
 800af3e:	431a      	orrs	r2, r3
 800af40:	9b05      	ldr	r3, [sp, #20]
 800af42:	c704      	stmia	r7!, {r2}
 800af44:	42b3      	cmp	r3, r6
 800af46:	d8e6      	bhi.n	800af16 <__multiply+0xc2>
 800af48:	4663      	mov	r3, ip
 800af4a:	9a06      	ldr	r2, [sp, #24]
 800af4c:	509d      	str	r5, [r3, r2]
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	6818      	ldr	r0, [r3, #0]
 800af52:	0c00      	lsrs	r0, r0, #16
 800af54:	d020      	beq.n	800af98 <__multiply+0x144>
 800af56:	4663      	mov	r3, ip
 800af58:	0025      	movs	r5, r4
 800af5a:	4661      	mov	r1, ip
 800af5c:	2700      	movs	r7, #0
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3514      	adds	r5, #20
 800af62:	682a      	ldr	r2, [r5, #0]
 800af64:	680e      	ldr	r6, [r1, #0]
 800af66:	b292      	uxth	r2, r2
 800af68:	4342      	muls	r2, r0
 800af6a:	0c36      	lsrs	r6, r6, #16
 800af6c:	1992      	adds	r2, r2, r6
 800af6e:	19d2      	adds	r2, r2, r7
 800af70:	0416      	lsls	r6, r2, #16
 800af72:	b29b      	uxth	r3, r3
 800af74:	431e      	orrs	r6, r3
 800af76:	600e      	str	r6, [r1, #0]
 800af78:	cd40      	ldmia	r5!, {r6}
 800af7a:	684b      	ldr	r3, [r1, #4]
 800af7c:	0c36      	lsrs	r6, r6, #16
 800af7e:	4346      	muls	r6, r0
 800af80:	b29b      	uxth	r3, r3
 800af82:	0c12      	lsrs	r2, r2, #16
 800af84:	18f3      	adds	r3, r6, r3
 800af86:	189b      	adds	r3, r3, r2
 800af88:	9a05      	ldr	r2, [sp, #20]
 800af8a:	0c1f      	lsrs	r7, r3, #16
 800af8c:	3104      	adds	r1, #4
 800af8e:	42aa      	cmp	r2, r5
 800af90:	d8e7      	bhi.n	800af62 <__multiply+0x10e>
 800af92:	4662      	mov	r2, ip
 800af94:	9906      	ldr	r1, [sp, #24]
 800af96:	5053      	str	r3, [r2, r1]
 800af98:	9b01      	ldr	r3, [sp, #4]
 800af9a:	3304      	adds	r3, #4
 800af9c:	9301      	str	r3, [sp, #4]
 800af9e:	2304      	movs	r3, #4
 800afa0:	449c      	add	ip, r3
 800afa2:	e79b      	b.n	800aedc <__multiply+0x88>
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	9303      	str	r3, [sp, #12]
 800afaa:	e79b      	b.n	800aee4 <__multiply+0x90>
 800afac:	0800c316 	.word	0x0800c316
 800afb0:	0800c387 	.word	0x0800c387

0800afb4 <__pow5mult>:
 800afb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afb6:	2303      	movs	r3, #3
 800afb8:	0015      	movs	r5, r2
 800afba:	0007      	movs	r7, r0
 800afbc:	000e      	movs	r6, r1
 800afbe:	401a      	ands	r2, r3
 800afc0:	421d      	tst	r5, r3
 800afc2:	d008      	beq.n	800afd6 <__pow5mult+0x22>
 800afc4:	4925      	ldr	r1, [pc, #148]	; (800b05c <__pow5mult+0xa8>)
 800afc6:	3a01      	subs	r2, #1
 800afc8:	0092      	lsls	r2, r2, #2
 800afca:	5852      	ldr	r2, [r2, r1]
 800afcc:	2300      	movs	r3, #0
 800afce:	0031      	movs	r1, r6
 800afd0:	f7ff fe50 	bl	800ac74 <__multadd>
 800afd4:	0006      	movs	r6, r0
 800afd6:	10ad      	asrs	r5, r5, #2
 800afd8:	d03d      	beq.n	800b056 <__pow5mult+0xa2>
 800afda:	69fc      	ldr	r4, [r7, #28]
 800afdc:	2c00      	cmp	r4, #0
 800afde:	d10f      	bne.n	800b000 <__pow5mult+0x4c>
 800afe0:	2010      	movs	r0, #16
 800afe2:	f7ff fd0f 	bl	800aa04 <malloc>
 800afe6:	1e02      	subs	r2, r0, #0
 800afe8:	61f8      	str	r0, [r7, #28]
 800afea:	d105      	bne.n	800aff8 <__pow5mult+0x44>
 800afec:	21b4      	movs	r1, #180	; 0xb4
 800afee:	4b1c      	ldr	r3, [pc, #112]	; (800b060 <__pow5mult+0xac>)
 800aff0:	481c      	ldr	r0, [pc, #112]	; (800b064 <__pow5mult+0xb0>)
 800aff2:	31ff      	adds	r1, #255	; 0xff
 800aff4:	f000 feaa 	bl	800bd4c <__assert_func>
 800aff8:	6044      	str	r4, [r0, #4]
 800affa:	6084      	str	r4, [r0, #8]
 800affc:	6004      	str	r4, [r0, #0]
 800affe:	60c4      	str	r4, [r0, #12]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	689c      	ldr	r4, [r3, #8]
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	2c00      	cmp	r4, #0
 800b008:	d108      	bne.n	800b01c <__pow5mult+0x68>
 800b00a:	0038      	movs	r0, r7
 800b00c:	4916      	ldr	r1, [pc, #88]	; (800b068 <__pow5mult+0xb4>)
 800b00e:	f7ff ff09 	bl	800ae24 <__i2b>
 800b012:	9b01      	ldr	r3, [sp, #4]
 800b014:	0004      	movs	r4, r0
 800b016:	6098      	str	r0, [r3, #8]
 800b018:	2300      	movs	r3, #0
 800b01a:	6003      	str	r3, [r0, #0]
 800b01c:	2301      	movs	r3, #1
 800b01e:	421d      	tst	r5, r3
 800b020:	d00a      	beq.n	800b038 <__pow5mult+0x84>
 800b022:	0031      	movs	r1, r6
 800b024:	0022      	movs	r2, r4
 800b026:	0038      	movs	r0, r7
 800b028:	f7ff ff14 	bl	800ae54 <__multiply>
 800b02c:	0031      	movs	r1, r6
 800b02e:	9001      	str	r0, [sp, #4]
 800b030:	0038      	movs	r0, r7
 800b032:	f7ff fdfb 	bl	800ac2c <_Bfree>
 800b036:	9e01      	ldr	r6, [sp, #4]
 800b038:	106d      	asrs	r5, r5, #1
 800b03a:	d00c      	beq.n	800b056 <__pow5mult+0xa2>
 800b03c:	6820      	ldr	r0, [r4, #0]
 800b03e:	2800      	cmp	r0, #0
 800b040:	d107      	bne.n	800b052 <__pow5mult+0x9e>
 800b042:	0022      	movs	r2, r4
 800b044:	0021      	movs	r1, r4
 800b046:	0038      	movs	r0, r7
 800b048:	f7ff ff04 	bl	800ae54 <__multiply>
 800b04c:	2300      	movs	r3, #0
 800b04e:	6020      	str	r0, [r4, #0]
 800b050:	6003      	str	r3, [r0, #0]
 800b052:	0004      	movs	r4, r0
 800b054:	e7e2      	b.n	800b01c <__pow5mult+0x68>
 800b056:	0030      	movs	r0, r6
 800b058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b05a:	46c0      	nop			; (mov r8, r8)
 800b05c:	0800c4d0 	.word	0x0800c4d0
 800b060:	0800c2a7 	.word	0x0800c2a7
 800b064:	0800c387 	.word	0x0800c387
 800b068:	00000271 	.word	0x00000271

0800b06c <__lshift>:
 800b06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06e:	000c      	movs	r4, r1
 800b070:	0017      	movs	r7, r2
 800b072:	6923      	ldr	r3, [r4, #16]
 800b074:	1155      	asrs	r5, r2, #5
 800b076:	b087      	sub	sp, #28
 800b078:	18eb      	adds	r3, r5, r3
 800b07a:	9302      	str	r3, [sp, #8]
 800b07c:	3301      	adds	r3, #1
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	6849      	ldr	r1, [r1, #4]
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	9004      	str	r0, [sp, #16]
 800b086:	9a01      	ldr	r2, [sp, #4]
 800b088:	4293      	cmp	r3, r2
 800b08a:	db10      	blt.n	800b0ae <__lshift+0x42>
 800b08c:	9804      	ldr	r0, [sp, #16]
 800b08e:	f7ff fd89 	bl	800aba4 <_Balloc>
 800b092:	2300      	movs	r3, #0
 800b094:	0002      	movs	r2, r0
 800b096:	0006      	movs	r6, r0
 800b098:	0019      	movs	r1, r3
 800b09a:	3214      	adds	r2, #20
 800b09c:	4298      	cmp	r0, r3
 800b09e:	d10c      	bne.n	800b0ba <__lshift+0x4e>
 800b0a0:	31df      	adds	r1, #223	; 0xdf
 800b0a2:	0032      	movs	r2, r6
 800b0a4:	4b26      	ldr	r3, [pc, #152]	; (800b140 <__lshift+0xd4>)
 800b0a6:	4827      	ldr	r0, [pc, #156]	; (800b144 <__lshift+0xd8>)
 800b0a8:	31ff      	adds	r1, #255	; 0xff
 800b0aa:	f000 fe4f 	bl	800bd4c <__assert_func>
 800b0ae:	3101      	adds	r1, #1
 800b0b0:	005b      	lsls	r3, r3, #1
 800b0b2:	e7e8      	b.n	800b086 <__lshift+0x1a>
 800b0b4:	0098      	lsls	r0, r3, #2
 800b0b6:	5011      	str	r1, [r2, r0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	42ab      	cmp	r3, r5
 800b0bc:	dbfa      	blt.n	800b0b4 <__lshift+0x48>
 800b0be:	43eb      	mvns	r3, r5
 800b0c0:	17db      	asrs	r3, r3, #31
 800b0c2:	401d      	ands	r5, r3
 800b0c4:	211f      	movs	r1, #31
 800b0c6:	0023      	movs	r3, r4
 800b0c8:	0038      	movs	r0, r7
 800b0ca:	00ad      	lsls	r5, r5, #2
 800b0cc:	1955      	adds	r5, r2, r5
 800b0ce:	6922      	ldr	r2, [r4, #16]
 800b0d0:	3314      	adds	r3, #20
 800b0d2:	0092      	lsls	r2, r2, #2
 800b0d4:	4008      	ands	r0, r1
 800b0d6:	4684      	mov	ip, r0
 800b0d8:	189a      	adds	r2, r3, r2
 800b0da:	420f      	tst	r7, r1
 800b0dc:	d02a      	beq.n	800b134 <__lshift+0xc8>
 800b0de:	3101      	adds	r1, #1
 800b0e0:	1a09      	subs	r1, r1, r0
 800b0e2:	9105      	str	r1, [sp, #20]
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	9503      	str	r5, [sp, #12]
 800b0e8:	4667      	mov	r7, ip
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	40b8      	lsls	r0, r7
 800b0ee:	4308      	orrs	r0, r1
 800b0f0:	9903      	ldr	r1, [sp, #12]
 800b0f2:	c101      	stmia	r1!, {r0}
 800b0f4:	9103      	str	r1, [sp, #12]
 800b0f6:	9805      	ldr	r0, [sp, #20]
 800b0f8:	cb02      	ldmia	r3!, {r1}
 800b0fa:	40c1      	lsrs	r1, r0
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d8f3      	bhi.n	800b0e8 <__lshift+0x7c>
 800b100:	0020      	movs	r0, r4
 800b102:	3015      	adds	r0, #21
 800b104:	2304      	movs	r3, #4
 800b106:	4282      	cmp	r2, r0
 800b108:	d304      	bcc.n	800b114 <__lshift+0xa8>
 800b10a:	1b13      	subs	r3, r2, r4
 800b10c:	3b15      	subs	r3, #21
 800b10e:	089b      	lsrs	r3, r3, #2
 800b110:	3301      	adds	r3, #1
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	50e9      	str	r1, [r5, r3]
 800b116:	2900      	cmp	r1, #0
 800b118:	d002      	beq.n	800b120 <__lshift+0xb4>
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	3302      	adds	r3, #2
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	9804      	ldr	r0, [sp, #16]
 800b124:	3b01      	subs	r3, #1
 800b126:	0021      	movs	r1, r4
 800b128:	6133      	str	r3, [r6, #16]
 800b12a:	f7ff fd7f 	bl	800ac2c <_Bfree>
 800b12e:	0030      	movs	r0, r6
 800b130:	b007      	add	sp, #28
 800b132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b134:	cb02      	ldmia	r3!, {r1}
 800b136:	c502      	stmia	r5!, {r1}
 800b138:	429a      	cmp	r2, r3
 800b13a:	d8fb      	bhi.n	800b134 <__lshift+0xc8>
 800b13c:	e7f0      	b.n	800b120 <__lshift+0xb4>
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	0800c316 	.word	0x0800c316
 800b144:	0800c387 	.word	0x0800c387

0800b148 <__mcmp>:
 800b148:	b530      	push	{r4, r5, lr}
 800b14a:	690b      	ldr	r3, [r1, #16]
 800b14c:	6904      	ldr	r4, [r0, #16]
 800b14e:	0002      	movs	r2, r0
 800b150:	1ae0      	subs	r0, r4, r3
 800b152:	429c      	cmp	r4, r3
 800b154:	d10e      	bne.n	800b174 <__mcmp+0x2c>
 800b156:	3214      	adds	r2, #20
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	3114      	adds	r1, #20
 800b15c:	0014      	movs	r4, r2
 800b15e:	18c9      	adds	r1, r1, r3
 800b160:	18d2      	adds	r2, r2, r3
 800b162:	3a04      	subs	r2, #4
 800b164:	3904      	subs	r1, #4
 800b166:	6815      	ldr	r5, [r2, #0]
 800b168:	680b      	ldr	r3, [r1, #0]
 800b16a:	429d      	cmp	r5, r3
 800b16c:	d003      	beq.n	800b176 <__mcmp+0x2e>
 800b16e:	2001      	movs	r0, #1
 800b170:	429d      	cmp	r5, r3
 800b172:	d303      	bcc.n	800b17c <__mcmp+0x34>
 800b174:	bd30      	pop	{r4, r5, pc}
 800b176:	4294      	cmp	r4, r2
 800b178:	d3f3      	bcc.n	800b162 <__mcmp+0x1a>
 800b17a:	e7fb      	b.n	800b174 <__mcmp+0x2c>
 800b17c:	4240      	negs	r0, r0
 800b17e:	e7f9      	b.n	800b174 <__mcmp+0x2c>

0800b180 <__mdiff>:
 800b180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b182:	000e      	movs	r6, r1
 800b184:	0007      	movs	r7, r0
 800b186:	0011      	movs	r1, r2
 800b188:	0030      	movs	r0, r6
 800b18a:	b087      	sub	sp, #28
 800b18c:	0014      	movs	r4, r2
 800b18e:	f7ff ffdb 	bl	800b148 <__mcmp>
 800b192:	1e05      	subs	r5, r0, #0
 800b194:	d110      	bne.n	800b1b8 <__mdiff+0x38>
 800b196:	0001      	movs	r1, r0
 800b198:	0038      	movs	r0, r7
 800b19a:	f7ff fd03 	bl	800aba4 <_Balloc>
 800b19e:	1e02      	subs	r2, r0, #0
 800b1a0:	d104      	bne.n	800b1ac <__mdiff+0x2c>
 800b1a2:	4b3f      	ldr	r3, [pc, #252]	; (800b2a0 <__mdiff+0x120>)
 800b1a4:	483f      	ldr	r0, [pc, #252]	; (800b2a4 <__mdiff+0x124>)
 800b1a6:	4940      	ldr	r1, [pc, #256]	; (800b2a8 <__mdiff+0x128>)
 800b1a8:	f000 fdd0 	bl	800bd4c <__assert_func>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	6145      	str	r5, [r0, #20]
 800b1b0:	6103      	str	r3, [r0, #16]
 800b1b2:	0010      	movs	r0, r2
 800b1b4:	b007      	add	sp, #28
 800b1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	db04      	blt.n	800b1ca <__mdiff+0x4a>
 800b1c0:	0023      	movs	r3, r4
 800b1c2:	0034      	movs	r4, r6
 800b1c4:	001e      	movs	r6, r3
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	0038      	movs	r0, r7
 800b1cc:	6861      	ldr	r1, [r4, #4]
 800b1ce:	f7ff fce9 	bl	800aba4 <_Balloc>
 800b1d2:	1e02      	subs	r2, r0, #0
 800b1d4:	d103      	bne.n	800b1de <__mdiff+0x5e>
 800b1d6:	4b32      	ldr	r3, [pc, #200]	; (800b2a0 <__mdiff+0x120>)
 800b1d8:	4832      	ldr	r0, [pc, #200]	; (800b2a4 <__mdiff+0x124>)
 800b1da:	4934      	ldr	r1, [pc, #208]	; (800b2ac <__mdiff+0x12c>)
 800b1dc:	e7e4      	b.n	800b1a8 <__mdiff+0x28>
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	2700      	movs	r7, #0
 800b1e2:	60c3      	str	r3, [r0, #12]
 800b1e4:	6920      	ldr	r0, [r4, #16]
 800b1e6:	3414      	adds	r4, #20
 800b1e8:	0083      	lsls	r3, r0, #2
 800b1ea:	18e3      	adds	r3, r4, r3
 800b1ec:	0021      	movs	r1, r4
 800b1ee:	9401      	str	r4, [sp, #4]
 800b1f0:	0034      	movs	r4, r6
 800b1f2:	9302      	str	r3, [sp, #8]
 800b1f4:	6933      	ldr	r3, [r6, #16]
 800b1f6:	3414      	adds	r4, #20
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	18e3      	adds	r3, r4, r3
 800b1fc:	9303      	str	r3, [sp, #12]
 800b1fe:	0013      	movs	r3, r2
 800b200:	3314      	adds	r3, #20
 800b202:	469c      	mov	ip, r3
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	9104      	str	r1, [sp, #16]
 800b208:	9b04      	ldr	r3, [sp, #16]
 800b20a:	cc02      	ldmia	r4!, {r1}
 800b20c:	cb20      	ldmia	r3!, {r5}
 800b20e:	9304      	str	r3, [sp, #16]
 800b210:	b2ab      	uxth	r3, r5
 800b212:	19df      	adds	r7, r3, r7
 800b214:	b28b      	uxth	r3, r1
 800b216:	1afb      	subs	r3, r7, r3
 800b218:	0c09      	lsrs	r1, r1, #16
 800b21a:	0c2d      	lsrs	r5, r5, #16
 800b21c:	1a6d      	subs	r5, r5, r1
 800b21e:	1419      	asrs	r1, r3, #16
 800b220:	1869      	adds	r1, r5, r1
 800b222:	b29b      	uxth	r3, r3
 800b224:	140f      	asrs	r7, r1, #16
 800b226:	0409      	lsls	r1, r1, #16
 800b228:	4319      	orrs	r1, r3
 800b22a:	4663      	mov	r3, ip
 800b22c:	c302      	stmia	r3!, {r1}
 800b22e:	469c      	mov	ip, r3
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	42a3      	cmp	r3, r4
 800b234:	d8e8      	bhi.n	800b208 <__mdiff+0x88>
 800b236:	0031      	movs	r1, r6
 800b238:	9c03      	ldr	r4, [sp, #12]
 800b23a:	3115      	adds	r1, #21
 800b23c:	2304      	movs	r3, #4
 800b23e:	428c      	cmp	r4, r1
 800b240:	d304      	bcc.n	800b24c <__mdiff+0xcc>
 800b242:	1ba3      	subs	r3, r4, r6
 800b244:	3b15      	subs	r3, #21
 800b246:	089b      	lsrs	r3, r3, #2
 800b248:	3301      	adds	r3, #1
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	9901      	ldr	r1, [sp, #4]
 800b24e:	18cd      	adds	r5, r1, r3
 800b250:	9905      	ldr	r1, [sp, #20]
 800b252:	002e      	movs	r6, r5
 800b254:	18cb      	adds	r3, r1, r3
 800b256:	469c      	mov	ip, r3
 800b258:	9902      	ldr	r1, [sp, #8]
 800b25a:	428e      	cmp	r6, r1
 800b25c:	d310      	bcc.n	800b280 <__mdiff+0x100>
 800b25e:	9e02      	ldr	r6, [sp, #8]
 800b260:	1ee9      	subs	r1, r5, #3
 800b262:	2400      	movs	r4, #0
 800b264:	428e      	cmp	r6, r1
 800b266:	d304      	bcc.n	800b272 <__mdiff+0xf2>
 800b268:	0031      	movs	r1, r6
 800b26a:	3103      	adds	r1, #3
 800b26c:	1b49      	subs	r1, r1, r5
 800b26e:	0889      	lsrs	r1, r1, #2
 800b270:	008c      	lsls	r4, r1, #2
 800b272:	191b      	adds	r3, r3, r4
 800b274:	3b04      	subs	r3, #4
 800b276:	6819      	ldr	r1, [r3, #0]
 800b278:	2900      	cmp	r1, #0
 800b27a:	d00f      	beq.n	800b29c <__mdiff+0x11c>
 800b27c:	6110      	str	r0, [r2, #16]
 800b27e:	e798      	b.n	800b1b2 <__mdiff+0x32>
 800b280:	ce02      	ldmia	r6!, {r1}
 800b282:	b28c      	uxth	r4, r1
 800b284:	19e4      	adds	r4, r4, r7
 800b286:	0c0f      	lsrs	r7, r1, #16
 800b288:	1421      	asrs	r1, r4, #16
 800b28a:	1879      	adds	r1, r7, r1
 800b28c:	b2a4      	uxth	r4, r4
 800b28e:	140f      	asrs	r7, r1, #16
 800b290:	0409      	lsls	r1, r1, #16
 800b292:	4321      	orrs	r1, r4
 800b294:	4664      	mov	r4, ip
 800b296:	c402      	stmia	r4!, {r1}
 800b298:	46a4      	mov	ip, r4
 800b29a:	e7dd      	b.n	800b258 <__mdiff+0xd8>
 800b29c:	3801      	subs	r0, #1
 800b29e:	e7e9      	b.n	800b274 <__mdiff+0xf4>
 800b2a0:	0800c316 	.word	0x0800c316
 800b2a4:	0800c387 	.word	0x0800c387
 800b2a8:	00000237 	.word	0x00000237
 800b2ac:	00000245 	.word	0x00000245

0800b2b0 <__ulp>:
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	4b0b      	ldr	r3, [pc, #44]	; (800b2e0 <__ulp+0x30>)
 800b2b4:	4019      	ands	r1, r3
 800b2b6:	4b0b      	ldr	r3, [pc, #44]	; (800b2e4 <__ulp+0x34>)
 800b2b8:	18c9      	adds	r1, r1, r3
 800b2ba:	4281      	cmp	r1, r0
 800b2bc:	dc06      	bgt.n	800b2cc <__ulp+0x1c>
 800b2be:	4249      	negs	r1, r1
 800b2c0:	150b      	asrs	r3, r1, #20
 800b2c2:	2b13      	cmp	r3, #19
 800b2c4:	dc03      	bgt.n	800b2ce <__ulp+0x1e>
 800b2c6:	2180      	movs	r1, #128	; 0x80
 800b2c8:	0309      	lsls	r1, r1, #12
 800b2ca:	4119      	asrs	r1, r3
 800b2cc:	4770      	bx	lr
 800b2ce:	3b14      	subs	r3, #20
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	2b1e      	cmp	r3, #30
 800b2d4:	dc02      	bgt.n	800b2dc <__ulp+0x2c>
 800b2d6:	2080      	movs	r0, #128	; 0x80
 800b2d8:	0600      	lsls	r0, r0, #24
 800b2da:	40d8      	lsrs	r0, r3
 800b2dc:	2100      	movs	r1, #0
 800b2de:	e7f5      	b.n	800b2cc <__ulp+0x1c>
 800b2e0:	7ff00000 	.word	0x7ff00000
 800b2e4:	fcc00000 	.word	0xfcc00000

0800b2e8 <__b2d>:
 800b2e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ea:	0006      	movs	r6, r0
 800b2ec:	6903      	ldr	r3, [r0, #16]
 800b2ee:	3614      	adds	r6, #20
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	18f3      	adds	r3, r6, r3
 800b2f4:	1f1d      	subs	r5, r3, #4
 800b2f6:	682c      	ldr	r4, [r5, #0]
 800b2f8:	000f      	movs	r7, r1
 800b2fa:	0020      	movs	r0, r4
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f7ff fd49 	bl	800ad94 <__hi0bits>
 800b302:	2220      	movs	r2, #32
 800b304:	1a12      	subs	r2, r2, r0
 800b306:	603a      	str	r2, [r7, #0]
 800b308:	0003      	movs	r3, r0
 800b30a:	4a1c      	ldr	r2, [pc, #112]	; (800b37c <__b2d+0x94>)
 800b30c:	280a      	cmp	r0, #10
 800b30e:	dc15      	bgt.n	800b33c <__b2d+0x54>
 800b310:	210b      	movs	r1, #11
 800b312:	0027      	movs	r7, r4
 800b314:	1a09      	subs	r1, r1, r0
 800b316:	40cf      	lsrs	r7, r1
 800b318:	433a      	orrs	r2, r7
 800b31a:	468c      	mov	ip, r1
 800b31c:	0011      	movs	r1, r2
 800b31e:	2200      	movs	r2, #0
 800b320:	42ae      	cmp	r6, r5
 800b322:	d202      	bcs.n	800b32a <__b2d+0x42>
 800b324:	9a01      	ldr	r2, [sp, #4]
 800b326:	3a08      	subs	r2, #8
 800b328:	6812      	ldr	r2, [r2, #0]
 800b32a:	3315      	adds	r3, #21
 800b32c:	409c      	lsls	r4, r3
 800b32e:	4663      	mov	r3, ip
 800b330:	0027      	movs	r7, r4
 800b332:	40da      	lsrs	r2, r3
 800b334:	4317      	orrs	r7, r2
 800b336:	0038      	movs	r0, r7
 800b338:	b003      	add	sp, #12
 800b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33c:	2700      	movs	r7, #0
 800b33e:	42ae      	cmp	r6, r5
 800b340:	d202      	bcs.n	800b348 <__b2d+0x60>
 800b342:	9d01      	ldr	r5, [sp, #4]
 800b344:	3d08      	subs	r5, #8
 800b346:	682f      	ldr	r7, [r5, #0]
 800b348:	210b      	movs	r1, #11
 800b34a:	4249      	negs	r1, r1
 800b34c:	468c      	mov	ip, r1
 800b34e:	449c      	add	ip, r3
 800b350:	2b0b      	cmp	r3, #11
 800b352:	d010      	beq.n	800b376 <__b2d+0x8e>
 800b354:	4661      	mov	r1, ip
 800b356:	2320      	movs	r3, #32
 800b358:	408c      	lsls	r4, r1
 800b35a:	1a5b      	subs	r3, r3, r1
 800b35c:	0039      	movs	r1, r7
 800b35e:	40d9      	lsrs	r1, r3
 800b360:	430c      	orrs	r4, r1
 800b362:	4322      	orrs	r2, r4
 800b364:	0011      	movs	r1, r2
 800b366:	2200      	movs	r2, #0
 800b368:	42b5      	cmp	r5, r6
 800b36a:	d901      	bls.n	800b370 <__b2d+0x88>
 800b36c:	3d04      	subs	r5, #4
 800b36e:	682a      	ldr	r2, [r5, #0]
 800b370:	4664      	mov	r4, ip
 800b372:	40a7      	lsls	r7, r4
 800b374:	e7dd      	b.n	800b332 <__b2d+0x4a>
 800b376:	4322      	orrs	r2, r4
 800b378:	0011      	movs	r1, r2
 800b37a:	e7dc      	b.n	800b336 <__b2d+0x4e>
 800b37c:	3ff00000 	.word	0x3ff00000

0800b380 <__d2b>:
 800b380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b382:	2101      	movs	r1, #1
 800b384:	0014      	movs	r4, r2
 800b386:	001d      	movs	r5, r3
 800b388:	9f08      	ldr	r7, [sp, #32]
 800b38a:	f7ff fc0b 	bl	800aba4 <_Balloc>
 800b38e:	1e06      	subs	r6, r0, #0
 800b390:	d105      	bne.n	800b39e <__d2b+0x1e>
 800b392:	0032      	movs	r2, r6
 800b394:	4b24      	ldr	r3, [pc, #144]	; (800b428 <__d2b+0xa8>)
 800b396:	4825      	ldr	r0, [pc, #148]	; (800b42c <__d2b+0xac>)
 800b398:	4925      	ldr	r1, [pc, #148]	; (800b430 <__d2b+0xb0>)
 800b39a:	f000 fcd7 	bl	800bd4c <__assert_func>
 800b39e:	032b      	lsls	r3, r5, #12
 800b3a0:	006d      	lsls	r5, r5, #1
 800b3a2:	0b1b      	lsrs	r3, r3, #12
 800b3a4:	0d6d      	lsrs	r5, r5, #21
 800b3a6:	d125      	bne.n	800b3f4 <__d2b+0x74>
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	2c00      	cmp	r4, #0
 800b3ac:	d028      	beq.n	800b400 <__d2b+0x80>
 800b3ae:	4668      	mov	r0, sp
 800b3b0:	9400      	str	r4, [sp, #0]
 800b3b2:	f7ff fd09 	bl	800adc8 <__lo0bits>
 800b3b6:	9b01      	ldr	r3, [sp, #4]
 800b3b8:	9900      	ldr	r1, [sp, #0]
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d01e      	beq.n	800b3fc <__d2b+0x7c>
 800b3be:	2220      	movs	r2, #32
 800b3c0:	001c      	movs	r4, r3
 800b3c2:	1a12      	subs	r2, r2, r0
 800b3c4:	4094      	lsls	r4, r2
 800b3c6:	0022      	movs	r2, r4
 800b3c8:	40c3      	lsrs	r3, r0
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	6172      	str	r2, [r6, #20]
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	9c01      	ldr	r4, [sp, #4]
 800b3d2:	61b4      	str	r4, [r6, #24]
 800b3d4:	1e63      	subs	r3, r4, #1
 800b3d6:	419c      	sbcs	r4, r3
 800b3d8:	3401      	adds	r4, #1
 800b3da:	6134      	str	r4, [r6, #16]
 800b3dc:	2d00      	cmp	r5, #0
 800b3de:	d017      	beq.n	800b410 <__d2b+0x90>
 800b3e0:	2435      	movs	r4, #53	; 0x35
 800b3e2:	4b14      	ldr	r3, [pc, #80]	; (800b434 <__d2b+0xb4>)
 800b3e4:	18ed      	adds	r5, r5, r3
 800b3e6:	182d      	adds	r5, r5, r0
 800b3e8:	603d      	str	r5, [r7, #0]
 800b3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ec:	1a24      	subs	r4, r4, r0
 800b3ee:	601c      	str	r4, [r3, #0]
 800b3f0:	0030      	movs	r0, r6
 800b3f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3f4:	2280      	movs	r2, #128	; 0x80
 800b3f6:	0352      	lsls	r2, r2, #13
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	e7d5      	b.n	800b3a8 <__d2b+0x28>
 800b3fc:	6171      	str	r1, [r6, #20]
 800b3fe:	e7e7      	b.n	800b3d0 <__d2b+0x50>
 800b400:	a801      	add	r0, sp, #4
 800b402:	f7ff fce1 	bl	800adc8 <__lo0bits>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	2401      	movs	r4, #1
 800b40a:	6173      	str	r3, [r6, #20]
 800b40c:	3020      	adds	r0, #32
 800b40e:	e7e4      	b.n	800b3da <__d2b+0x5a>
 800b410:	4b09      	ldr	r3, [pc, #36]	; (800b438 <__d2b+0xb8>)
 800b412:	18c0      	adds	r0, r0, r3
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <__d2b+0xbc>)
 800b416:	6038      	str	r0, [r7, #0]
 800b418:	18e3      	adds	r3, r4, r3
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	18f3      	adds	r3, r6, r3
 800b41e:	6958      	ldr	r0, [r3, #20]
 800b420:	f7ff fcb8 	bl	800ad94 <__hi0bits>
 800b424:	0164      	lsls	r4, r4, #5
 800b426:	e7e0      	b.n	800b3ea <__d2b+0x6a>
 800b428:	0800c316 	.word	0x0800c316
 800b42c:	0800c387 	.word	0x0800c387
 800b430:	0000030f 	.word	0x0000030f
 800b434:	fffffbcd 	.word	0xfffffbcd
 800b438:	fffffbce 	.word	0xfffffbce
 800b43c:	3fffffff 	.word	0x3fffffff

0800b440 <__ratio>:
 800b440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b442:	b087      	sub	sp, #28
 800b444:	000f      	movs	r7, r1
 800b446:	a904      	add	r1, sp, #16
 800b448:	0006      	movs	r6, r0
 800b44a:	f7ff ff4d 	bl	800b2e8 <__b2d>
 800b44e:	9000      	str	r0, [sp, #0]
 800b450:	9101      	str	r1, [sp, #4]
 800b452:	9c00      	ldr	r4, [sp, #0]
 800b454:	9d01      	ldr	r5, [sp, #4]
 800b456:	0038      	movs	r0, r7
 800b458:	a905      	add	r1, sp, #20
 800b45a:	f7ff ff45 	bl	800b2e8 <__b2d>
 800b45e:	9002      	str	r0, [sp, #8]
 800b460:	9103      	str	r1, [sp, #12]
 800b462:	9a02      	ldr	r2, [sp, #8]
 800b464:	9b03      	ldr	r3, [sp, #12]
 800b466:	6930      	ldr	r0, [r6, #16]
 800b468:	6939      	ldr	r1, [r7, #16]
 800b46a:	9e04      	ldr	r6, [sp, #16]
 800b46c:	1a40      	subs	r0, r0, r1
 800b46e:	9905      	ldr	r1, [sp, #20]
 800b470:	0140      	lsls	r0, r0, #5
 800b472:	1a71      	subs	r1, r6, r1
 800b474:	1841      	adds	r1, r0, r1
 800b476:	0508      	lsls	r0, r1, #20
 800b478:	2900      	cmp	r1, #0
 800b47a:	dd07      	ble.n	800b48c <__ratio+0x4c>
 800b47c:	9901      	ldr	r1, [sp, #4]
 800b47e:	1845      	adds	r5, r0, r1
 800b480:	0020      	movs	r0, r4
 800b482:	0029      	movs	r1, r5
 800b484:	f7f6 f94a 	bl	800171c <__aeabi_ddiv>
 800b488:	b007      	add	sp, #28
 800b48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b48c:	9903      	ldr	r1, [sp, #12]
 800b48e:	1a0b      	subs	r3, r1, r0
 800b490:	e7f6      	b.n	800b480 <__ratio+0x40>

0800b492 <__copybits>:
 800b492:	b570      	push	{r4, r5, r6, lr}
 800b494:	0014      	movs	r4, r2
 800b496:	0005      	movs	r5, r0
 800b498:	3901      	subs	r1, #1
 800b49a:	6913      	ldr	r3, [r2, #16]
 800b49c:	1149      	asrs	r1, r1, #5
 800b49e:	3101      	adds	r1, #1
 800b4a0:	0089      	lsls	r1, r1, #2
 800b4a2:	3414      	adds	r4, #20
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	1841      	adds	r1, r0, r1
 800b4a8:	18e3      	adds	r3, r4, r3
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	d80d      	bhi.n	800b4ca <__copybits+0x38>
 800b4ae:	0014      	movs	r4, r2
 800b4b0:	3411      	adds	r4, #17
 800b4b2:	2500      	movs	r5, #0
 800b4b4:	429c      	cmp	r4, r3
 800b4b6:	d803      	bhi.n	800b4c0 <__copybits+0x2e>
 800b4b8:	1a9b      	subs	r3, r3, r2
 800b4ba:	3b11      	subs	r3, #17
 800b4bc:	089b      	lsrs	r3, r3, #2
 800b4be:	009d      	lsls	r5, r3, #2
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	1940      	adds	r0, r0, r5
 800b4c4:	4281      	cmp	r1, r0
 800b4c6:	d803      	bhi.n	800b4d0 <__copybits+0x3e>
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	cc40      	ldmia	r4!, {r6}
 800b4cc:	c540      	stmia	r5!, {r6}
 800b4ce:	e7ec      	b.n	800b4aa <__copybits+0x18>
 800b4d0:	c008      	stmia	r0!, {r3}
 800b4d2:	e7f7      	b.n	800b4c4 <__copybits+0x32>

0800b4d4 <__any_on>:
 800b4d4:	0002      	movs	r2, r0
 800b4d6:	6900      	ldr	r0, [r0, #16]
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	3214      	adds	r2, #20
 800b4dc:	114b      	asrs	r3, r1, #5
 800b4de:	4298      	cmp	r0, r3
 800b4e0:	db13      	blt.n	800b50a <__any_on+0x36>
 800b4e2:	dd0c      	ble.n	800b4fe <__any_on+0x2a>
 800b4e4:	241f      	movs	r4, #31
 800b4e6:	0008      	movs	r0, r1
 800b4e8:	4020      	ands	r0, r4
 800b4ea:	4221      	tst	r1, r4
 800b4ec:	d007      	beq.n	800b4fe <__any_on+0x2a>
 800b4ee:	0099      	lsls	r1, r3, #2
 800b4f0:	588c      	ldr	r4, [r1, r2]
 800b4f2:	0021      	movs	r1, r4
 800b4f4:	40c1      	lsrs	r1, r0
 800b4f6:	4081      	lsls	r1, r0
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	428c      	cmp	r4, r1
 800b4fc:	d104      	bne.n	800b508 <__any_on+0x34>
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	18d3      	adds	r3, r2, r3
 800b502:	4293      	cmp	r3, r2
 800b504:	d803      	bhi.n	800b50e <__any_on+0x3a>
 800b506:	2000      	movs	r0, #0
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	0003      	movs	r3, r0
 800b50c:	e7f7      	b.n	800b4fe <__any_on+0x2a>
 800b50e:	3b04      	subs	r3, #4
 800b510:	6819      	ldr	r1, [r3, #0]
 800b512:	2900      	cmp	r1, #0
 800b514:	d0f5      	beq.n	800b502 <__any_on+0x2e>
 800b516:	2001      	movs	r0, #1
 800b518:	e7f6      	b.n	800b508 <__any_on+0x34>

0800b51a <__ascii_wctomb>:
 800b51a:	0003      	movs	r3, r0
 800b51c:	1e08      	subs	r0, r1, #0
 800b51e:	d005      	beq.n	800b52c <__ascii_wctomb+0x12>
 800b520:	2aff      	cmp	r2, #255	; 0xff
 800b522:	d904      	bls.n	800b52e <__ascii_wctomb+0x14>
 800b524:	228a      	movs	r2, #138	; 0x8a
 800b526:	2001      	movs	r0, #1
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	4240      	negs	r0, r0
 800b52c:	4770      	bx	lr
 800b52e:	2001      	movs	r0, #1
 800b530:	700a      	strb	r2, [r1, #0]
 800b532:	e7fb      	b.n	800b52c <__ascii_wctomb+0x12>

0800b534 <__ssputs_r>:
 800b534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b536:	b085      	sub	sp, #20
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	9203      	str	r2, [sp, #12]
 800b53c:	688e      	ldr	r6, [r1, #8]
 800b53e:	9a01      	ldr	r2, [sp, #4]
 800b540:	0007      	movs	r7, r0
 800b542:	000c      	movs	r4, r1
 800b544:	680b      	ldr	r3, [r1, #0]
 800b546:	4296      	cmp	r6, r2
 800b548:	d831      	bhi.n	800b5ae <__ssputs_r+0x7a>
 800b54a:	898a      	ldrh	r2, [r1, #12]
 800b54c:	2190      	movs	r1, #144	; 0x90
 800b54e:	00c9      	lsls	r1, r1, #3
 800b550:	420a      	tst	r2, r1
 800b552:	d029      	beq.n	800b5a8 <__ssputs_r+0x74>
 800b554:	2003      	movs	r0, #3
 800b556:	6921      	ldr	r1, [r4, #16]
 800b558:	1a5b      	subs	r3, r3, r1
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	6963      	ldr	r3, [r4, #20]
 800b55e:	4343      	muls	r3, r0
 800b560:	0fdd      	lsrs	r5, r3, #31
 800b562:	18ed      	adds	r5, r5, r3
 800b564:	9b01      	ldr	r3, [sp, #4]
 800b566:	9802      	ldr	r0, [sp, #8]
 800b568:	3301      	adds	r3, #1
 800b56a:	181b      	adds	r3, r3, r0
 800b56c:	106d      	asrs	r5, r5, #1
 800b56e:	42ab      	cmp	r3, r5
 800b570:	d900      	bls.n	800b574 <__ssputs_r+0x40>
 800b572:	001d      	movs	r5, r3
 800b574:	0552      	lsls	r2, r2, #21
 800b576:	d529      	bpl.n	800b5cc <__ssputs_r+0x98>
 800b578:	0029      	movs	r1, r5
 800b57a:	0038      	movs	r0, r7
 800b57c:	f7ff fa6e 	bl	800aa5c <_malloc_r>
 800b580:	1e06      	subs	r6, r0, #0
 800b582:	d02d      	beq.n	800b5e0 <__ssputs_r+0xac>
 800b584:	9a02      	ldr	r2, [sp, #8]
 800b586:	6921      	ldr	r1, [r4, #16]
 800b588:	f7fd ffe4 	bl	8009554 <memcpy>
 800b58c:	89a2      	ldrh	r2, [r4, #12]
 800b58e:	4b19      	ldr	r3, [pc, #100]	; (800b5f4 <__ssputs_r+0xc0>)
 800b590:	401a      	ands	r2, r3
 800b592:	2380      	movs	r3, #128	; 0x80
 800b594:	4313      	orrs	r3, r2
 800b596:	81a3      	strh	r3, [r4, #12]
 800b598:	9b02      	ldr	r3, [sp, #8]
 800b59a:	6126      	str	r6, [r4, #16]
 800b59c:	18f6      	adds	r6, r6, r3
 800b59e:	6026      	str	r6, [r4, #0]
 800b5a0:	6165      	str	r5, [r4, #20]
 800b5a2:	9e01      	ldr	r6, [sp, #4]
 800b5a4:	1aed      	subs	r5, r5, r3
 800b5a6:	60a5      	str	r5, [r4, #8]
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	429e      	cmp	r6, r3
 800b5ac:	d900      	bls.n	800b5b0 <__ssputs_r+0x7c>
 800b5ae:	9e01      	ldr	r6, [sp, #4]
 800b5b0:	0032      	movs	r2, r6
 800b5b2:	9903      	ldr	r1, [sp, #12]
 800b5b4:	6820      	ldr	r0, [r4, #0]
 800b5b6:	f000 fb7f 	bl	800bcb8 <memmove>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	1b9b      	subs	r3, r3, r6
 800b5c0:	60a3      	str	r3, [r4, #8]
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	199b      	adds	r3, r3, r6
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	b005      	add	sp, #20
 800b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5cc:	002a      	movs	r2, r5
 800b5ce:	0038      	movs	r0, r7
 800b5d0:	f000 fc07 	bl	800bde2 <_realloc_r>
 800b5d4:	1e06      	subs	r6, r0, #0
 800b5d6:	d1df      	bne.n	800b598 <__ssputs_r+0x64>
 800b5d8:	0038      	movs	r0, r7
 800b5da:	6921      	ldr	r1, [r4, #16]
 800b5dc:	f7fe fe6c 	bl	800a2b8 <_free_r>
 800b5e0:	230c      	movs	r3, #12
 800b5e2:	2001      	movs	r0, #1
 800b5e4:	603b      	str	r3, [r7, #0]
 800b5e6:	89a2      	ldrh	r2, [r4, #12]
 800b5e8:	3334      	adds	r3, #52	; 0x34
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	4240      	negs	r0, r0
 800b5f0:	e7ea      	b.n	800b5c8 <__ssputs_r+0x94>
 800b5f2:	46c0      	nop			; (mov r8, r8)
 800b5f4:	fffffb7f 	.word	0xfffffb7f

0800b5f8 <_svfiprintf_r>:
 800b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fa:	b0a1      	sub	sp, #132	; 0x84
 800b5fc:	9003      	str	r0, [sp, #12]
 800b5fe:	001d      	movs	r5, r3
 800b600:	898b      	ldrh	r3, [r1, #12]
 800b602:	000f      	movs	r7, r1
 800b604:	0016      	movs	r6, r2
 800b606:	061b      	lsls	r3, r3, #24
 800b608:	d511      	bpl.n	800b62e <_svfiprintf_r+0x36>
 800b60a:	690b      	ldr	r3, [r1, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10e      	bne.n	800b62e <_svfiprintf_r+0x36>
 800b610:	2140      	movs	r1, #64	; 0x40
 800b612:	f7ff fa23 	bl	800aa5c <_malloc_r>
 800b616:	6038      	str	r0, [r7, #0]
 800b618:	6138      	str	r0, [r7, #16]
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d105      	bne.n	800b62a <_svfiprintf_r+0x32>
 800b61e:	230c      	movs	r3, #12
 800b620:	9a03      	ldr	r2, [sp, #12]
 800b622:	3801      	subs	r0, #1
 800b624:	6013      	str	r3, [r2, #0]
 800b626:	b021      	add	sp, #132	; 0x84
 800b628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b62a:	2340      	movs	r3, #64	; 0x40
 800b62c:	617b      	str	r3, [r7, #20]
 800b62e:	2300      	movs	r3, #0
 800b630:	ac08      	add	r4, sp, #32
 800b632:	6163      	str	r3, [r4, #20]
 800b634:	3320      	adds	r3, #32
 800b636:	7663      	strb	r3, [r4, #25]
 800b638:	3310      	adds	r3, #16
 800b63a:	76a3      	strb	r3, [r4, #26]
 800b63c:	9507      	str	r5, [sp, #28]
 800b63e:	0035      	movs	r5, r6
 800b640:	782b      	ldrb	r3, [r5, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <_svfiprintf_r+0x52>
 800b646:	2b25      	cmp	r3, #37	; 0x25
 800b648:	d148      	bne.n	800b6dc <_svfiprintf_r+0xe4>
 800b64a:	1bab      	subs	r3, r5, r6
 800b64c:	9305      	str	r3, [sp, #20]
 800b64e:	42b5      	cmp	r5, r6
 800b650:	d00b      	beq.n	800b66a <_svfiprintf_r+0x72>
 800b652:	0032      	movs	r2, r6
 800b654:	0039      	movs	r1, r7
 800b656:	9803      	ldr	r0, [sp, #12]
 800b658:	f7ff ff6c 	bl	800b534 <__ssputs_r>
 800b65c:	3001      	adds	r0, #1
 800b65e:	d100      	bne.n	800b662 <_svfiprintf_r+0x6a>
 800b660:	e0af      	b.n	800b7c2 <_svfiprintf_r+0x1ca>
 800b662:	6963      	ldr	r3, [r4, #20]
 800b664:	9a05      	ldr	r2, [sp, #20]
 800b666:	189b      	adds	r3, r3, r2
 800b668:	6163      	str	r3, [r4, #20]
 800b66a:	782b      	ldrb	r3, [r5, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d100      	bne.n	800b672 <_svfiprintf_r+0x7a>
 800b670:	e0a7      	b.n	800b7c2 <_svfiprintf_r+0x1ca>
 800b672:	2201      	movs	r2, #1
 800b674:	2300      	movs	r3, #0
 800b676:	4252      	negs	r2, r2
 800b678:	6062      	str	r2, [r4, #4]
 800b67a:	a904      	add	r1, sp, #16
 800b67c:	3254      	adds	r2, #84	; 0x54
 800b67e:	1852      	adds	r2, r2, r1
 800b680:	1c6e      	adds	r6, r5, #1
 800b682:	6023      	str	r3, [r4, #0]
 800b684:	60e3      	str	r3, [r4, #12]
 800b686:	60a3      	str	r3, [r4, #8]
 800b688:	7013      	strb	r3, [r2, #0]
 800b68a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b68c:	4b55      	ldr	r3, [pc, #340]	; (800b7e4 <_svfiprintf_r+0x1ec>)
 800b68e:	2205      	movs	r2, #5
 800b690:	0018      	movs	r0, r3
 800b692:	7831      	ldrb	r1, [r6, #0]
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	f7fd ff52 	bl	800953e <memchr>
 800b69a:	1c75      	adds	r5, r6, #1
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d11f      	bne.n	800b6e0 <_svfiprintf_r+0xe8>
 800b6a0:	6822      	ldr	r2, [r4, #0]
 800b6a2:	06d3      	lsls	r3, r2, #27
 800b6a4:	d504      	bpl.n	800b6b0 <_svfiprintf_r+0xb8>
 800b6a6:	2353      	movs	r3, #83	; 0x53
 800b6a8:	a904      	add	r1, sp, #16
 800b6aa:	185b      	adds	r3, r3, r1
 800b6ac:	2120      	movs	r1, #32
 800b6ae:	7019      	strb	r1, [r3, #0]
 800b6b0:	0713      	lsls	r3, r2, #28
 800b6b2:	d504      	bpl.n	800b6be <_svfiprintf_r+0xc6>
 800b6b4:	2353      	movs	r3, #83	; 0x53
 800b6b6:	a904      	add	r1, sp, #16
 800b6b8:	185b      	adds	r3, r3, r1
 800b6ba:	212b      	movs	r1, #43	; 0x2b
 800b6bc:	7019      	strb	r1, [r3, #0]
 800b6be:	7833      	ldrb	r3, [r6, #0]
 800b6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c2:	d016      	beq.n	800b6f2 <_svfiprintf_r+0xfa>
 800b6c4:	0035      	movs	r5, r6
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	200a      	movs	r0, #10
 800b6ca:	68e3      	ldr	r3, [r4, #12]
 800b6cc:	782a      	ldrb	r2, [r5, #0]
 800b6ce:	1c6e      	adds	r6, r5, #1
 800b6d0:	3a30      	subs	r2, #48	; 0x30
 800b6d2:	2a09      	cmp	r2, #9
 800b6d4:	d94e      	bls.n	800b774 <_svfiprintf_r+0x17c>
 800b6d6:	2900      	cmp	r1, #0
 800b6d8:	d111      	bne.n	800b6fe <_svfiprintf_r+0x106>
 800b6da:	e017      	b.n	800b70c <_svfiprintf_r+0x114>
 800b6dc:	3501      	adds	r5, #1
 800b6de:	e7af      	b.n	800b640 <_svfiprintf_r+0x48>
 800b6e0:	9b05      	ldr	r3, [sp, #20]
 800b6e2:	6822      	ldr	r2, [r4, #0]
 800b6e4:	1ac0      	subs	r0, r0, r3
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4083      	lsls	r3, r0
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	002e      	movs	r6, r5
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	e7cc      	b.n	800b68c <_svfiprintf_r+0x94>
 800b6f2:	9b07      	ldr	r3, [sp, #28]
 800b6f4:	1d19      	adds	r1, r3, #4
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	9107      	str	r1, [sp, #28]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	db01      	blt.n	800b702 <_svfiprintf_r+0x10a>
 800b6fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b700:	e004      	b.n	800b70c <_svfiprintf_r+0x114>
 800b702:	425b      	negs	r3, r3
 800b704:	60e3      	str	r3, [r4, #12]
 800b706:	2302      	movs	r3, #2
 800b708:	4313      	orrs	r3, r2
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	782b      	ldrb	r3, [r5, #0]
 800b70e:	2b2e      	cmp	r3, #46	; 0x2e
 800b710:	d10a      	bne.n	800b728 <_svfiprintf_r+0x130>
 800b712:	786b      	ldrb	r3, [r5, #1]
 800b714:	2b2a      	cmp	r3, #42	; 0x2a
 800b716:	d135      	bne.n	800b784 <_svfiprintf_r+0x18c>
 800b718:	9b07      	ldr	r3, [sp, #28]
 800b71a:	3502      	adds	r5, #2
 800b71c:	1d1a      	adds	r2, r3, #4
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	9207      	str	r2, [sp, #28]
 800b722:	2b00      	cmp	r3, #0
 800b724:	db2b      	blt.n	800b77e <_svfiprintf_r+0x186>
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
 800b728:	4e2f      	ldr	r6, [pc, #188]	; (800b7e8 <_svfiprintf_r+0x1f0>)
 800b72a:	2203      	movs	r2, #3
 800b72c:	0030      	movs	r0, r6
 800b72e:	7829      	ldrb	r1, [r5, #0]
 800b730:	f7fd ff05 	bl	800953e <memchr>
 800b734:	2800      	cmp	r0, #0
 800b736:	d006      	beq.n	800b746 <_svfiprintf_r+0x14e>
 800b738:	2340      	movs	r3, #64	; 0x40
 800b73a:	1b80      	subs	r0, r0, r6
 800b73c:	4083      	lsls	r3, r0
 800b73e:	6822      	ldr	r2, [r4, #0]
 800b740:	3501      	adds	r5, #1
 800b742:	4313      	orrs	r3, r2
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	7829      	ldrb	r1, [r5, #0]
 800b748:	2206      	movs	r2, #6
 800b74a:	4828      	ldr	r0, [pc, #160]	; (800b7ec <_svfiprintf_r+0x1f4>)
 800b74c:	1c6e      	adds	r6, r5, #1
 800b74e:	7621      	strb	r1, [r4, #24]
 800b750:	f7fd fef5 	bl	800953e <memchr>
 800b754:	2800      	cmp	r0, #0
 800b756:	d03c      	beq.n	800b7d2 <_svfiprintf_r+0x1da>
 800b758:	4b25      	ldr	r3, [pc, #148]	; (800b7f0 <_svfiprintf_r+0x1f8>)
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d125      	bne.n	800b7aa <_svfiprintf_r+0x1b2>
 800b75e:	2207      	movs	r2, #7
 800b760:	9b07      	ldr	r3, [sp, #28]
 800b762:	3307      	adds	r3, #7
 800b764:	4393      	bics	r3, r2
 800b766:	3308      	adds	r3, #8
 800b768:	9307      	str	r3, [sp, #28]
 800b76a:	6963      	ldr	r3, [r4, #20]
 800b76c:	9a04      	ldr	r2, [sp, #16]
 800b76e:	189b      	adds	r3, r3, r2
 800b770:	6163      	str	r3, [r4, #20]
 800b772:	e764      	b.n	800b63e <_svfiprintf_r+0x46>
 800b774:	4343      	muls	r3, r0
 800b776:	0035      	movs	r5, r6
 800b778:	2101      	movs	r1, #1
 800b77a:	189b      	adds	r3, r3, r2
 800b77c:	e7a6      	b.n	800b6cc <_svfiprintf_r+0xd4>
 800b77e:	2301      	movs	r3, #1
 800b780:	425b      	negs	r3, r3
 800b782:	e7d0      	b.n	800b726 <_svfiprintf_r+0x12e>
 800b784:	2300      	movs	r3, #0
 800b786:	200a      	movs	r0, #10
 800b788:	001a      	movs	r2, r3
 800b78a:	3501      	adds	r5, #1
 800b78c:	6063      	str	r3, [r4, #4]
 800b78e:	7829      	ldrb	r1, [r5, #0]
 800b790:	1c6e      	adds	r6, r5, #1
 800b792:	3930      	subs	r1, #48	; 0x30
 800b794:	2909      	cmp	r1, #9
 800b796:	d903      	bls.n	800b7a0 <_svfiprintf_r+0x1a8>
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0c5      	beq.n	800b728 <_svfiprintf_r+0x130>
 800b79c:	9209      	str	r2, [sp, #36]	; 0x24
 800b79e:	e7c3      	b.n	800b728 <_svfiprintf_r+0x130>
 800b7a0:	4342      	muls	r2, r0
 800b7a2:	0035      	movs	r5, r6
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	1852      	adds	r2, r2, r1
 800b7a8:	e7f1      	b.n	800b78e <_svfiprintf_r+0x196>
 800b7aa:	aa07      	add	r2, sp, #28
 800b7ac:	9200      	str	r2, [sp, #0]
 800b7ae:	0021      	movs	r1, r4
 800b7b0:	003a      	movs	r2, r7
 800b7b2:	4b10      	ldr	r3, [pc, #64]	; (800b7f4 <_svfiprintf_r+0x1fc>)
 800b7b4:	9803      	ldr	r0, [sp, #12]
 800b7b6:	f7fc fe05 	bl	80083c4 <_printf_float>
 800b7ba:	9004      	str	r0, [sp, #16]
 800b7bc:	9b04      	ldr	r3, [sp, #16]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	d1d3      	bne.n	800b76a <_svfiprintf_r+0x172>
 800b7c2:	89bb      	ldrh	r3, [r7, #12]
 800b7c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b7c6:	065b      	lsls	r3, r3, #25
 800b7c8:	d400      	bmi.n	800b7cc <_svfiprintf_r+0x1d4>
 800b7ca:	e72c      	b.n	800b626 <_svfiprintf_r+0x2e>
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	4240      	negs	r0, r0
 800b7d0:	e729      	b.n	800b626 <_svfiprintf_r+0x2e>
 800b7d2:	aa07      	add	r2, sp, #28
 800b7d4:	9200      	str	r2, [sp, #0]
 800b7d6:	0021      	movs	r1, r4
 800b7d8:	003a      	movs	r2, r7
 800b7da:	4b06      	ldr	r3, [pc, #24]	; (800b7f4 <_svfiprintf_r+0x1fc>)
 800b7dc:	9803      	ldr	r0, [sp, #12]
 800b7de:	f7fd f8b7 	bl	8008950 <_printf_i>
 800b7e2:	e7ea      	b.n	800b7ba <_svfiprintf_r+0x1c2>
 800b7e4:	0800c4dc 	.word	0x0800c4dc
 800b7e8:	0800c4e2 	.word	0x0800c4e2
 800b7ec:	0800c4e6 	.word	0x0800c4e6
 800b7f0:	080083c5 	.word	0x080083c5
 800b7f4:	0800b535 	.word	0x0800b535

0800b7f8 <__sfputc_r>:
 800b7f8:	6893      	ldr	r3, [r2, #8]
 800b7fa:	b510      	push	{r4, lr}
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	6093      	str	r3, [r2, #8]
 800b800:	2b00      	cmp	r3, #0
 800b802:	da04      	bge.n	800b80e <__sfputc_r+0x16>
 800b804:	6994      	ldr	r4, [r2, #24]
 800b806:	42a3      	cmp	r3, r4
 800b808:	db07      	blt.n	800b81a <__sfputc_r+0x22>
 800b80a:	290a      	cmp	r1, #10
 800b80c:	d005      	beq.n	800b81a <__sfputc_r+0x22>
 800b80e:	6813      	ldr	r3, [r2, #0]
 800b810:	1c58      	adds	r0, r3, #1
 800b812:	6010      	str	r0, [r2, #0]
 800b814:	7019      	strb	r1, [r3, #0]
 800b816:	0008      	movs	r0, r1
 800b818:	bd10      	pop	{r4, pc}
 800b81a:	f7fd fd51 	bl	80092c0 <__swbuf_r>
 800b81e:	0001      	movs	r1, r0
 800b820:	e7f9      	b.n	800b816 <__sfputc_r+0x1e>

0800b822 <__sfputs_r>:
 800b822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b824:	0006      	movs	r6, r0
 800b826:	000f      	movs	r7, r1
 800b828:	0014      	movs	r4, r2
 800b82a:	18d5      	adds	r5, r2, r3
 800b82c:	42ac      	cmp	r4, r5
 800b82e:	d101      	bne.n	800b834 <__sfputs_r+0x12>
 800b830:	2000      	movs	r0, #0
 800b832:	e007      	b.n	800b844 <__sfputs_r+0x22>
 800b834:	7821      	ldrb	r1, [r4, #0]
 800b836:	003a      	movs	r2, r7
 800b838:	0030      	movs	r0, r6
 800b83a:	f7ff ffdd 	bl	800b7f8 <__sfputc_r>
 800b83e:	3401      	adds	r4, #1
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d1f3      	bne.n	800b82c <__sfputs_r+0xa>
 800b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b848 <_vfiprintf_r>:
 800b848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84a:	b0a1      	sub	sp, #132	; 0x84
 800b84c:	000f      	movs	r7, r1
 800b84e:	0015      	movs	r5, r2
 800b850:	001e      	movs	r6, r3
 800b852:	9003      	str	r0, [sp, #12]
 800b854:	2800      	cmp	r0, #0
 800b856:	d004      	beq.n	800b862 <_vfiprintf_r+0x1a>
 800b858:	6a03      	ldr	r3, [r0, #32]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <_vfiprintf_r+0x1a>
 800b85e:	f7fd fc1f 	bl	80090a0 <__sinit>
 800b862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b864:	07db      	lsls	r3, r3, #31
 800b866:	d405      	bmi.n	800b874 <_vfiprintf_r+0x2c>
 800b868:	89bb      	ldrh	r3, [r7, #12]
 800b86a:	059b      	lsls	r3, r3, #22
 800b86c:	d402      	bmi.n	800b874 <_vfiprintf_r+0x2c>
 800b86e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b870:	f7fd fe63 	bl	800953a <__retarget_lock_acquire_recursive>
 800b874:	89bb      	ldrh	r3, [r7, #12]
 800b876:	071b      	lsls	r3, r3, #28
 800b878:	d502      	bpl.n	800b880 <_vfiprintf_r+0x38>
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d113      	bne.n	800b8a8 <_vfiprintf_r+0x60>
 800b880:	0039      	movs	r1, r7
 800b882:	9803      	ldr	r0, [sp, #12]
 800b884:	f7fd fd5e 	bl	8009344 <__swsetup_r>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d00d      	beq.n	800b8a8 <_vfiprintf_r+0x60>
 800b88c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b88e:	07db      	lsls	r3, r3, #31
 800b890:	d503      	bpl.n	800b89a <_vfiprintf_r+0x52>
 800b892:	2001      	movs	r0, #1
 800b894:	4240      	negs	r0, r0
 800b896:	b021      	add	sp, #132	; 0x84
 800b898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b89a:	89bb      	ldrh	r3, [r7, #12]
 800b89c:	059b      	lsls	r3, r3, #22
 800b89e:	d4f8      	bmi.n	800b892 <_vfiprintf_r+0x4a>
 800b8a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b8a2:	f7fd fe4b 	bl	800953c <__retarget_lock_release_recursive>
 800b8a6:	e7f4      	b.n	800b892 <_vfiprintf_r+0x4a>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	ac08      	add	r4, sp, #32
 800b8ac:	6163      	str	r3, [r4, #20]
 800b8ae:	3320      	adds	r3, #32
 800b8b0:	7663      	strb	r3, [r4, #25]
 800b8b2:	3310      	adds	r3, #16
 800b8b4:	76a3      	strb	r3, [r4, #26]
 800b8b6:	9607      	str	r6, [sp, #28]
 800b8b8:	002e      	movs	r6, r5
 800b8ba:	7833      	ldrb	r3, [r6, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <_vfiprintf_r+0x7c>
 800b8c0:	2b25      	cmp	r3, #37	; 0x25
 800b8c2:	d148      	bne.n	800b956 <_vfiprintf_r+0x10e>
 800b8c4:	1b73      	subs	r3, r6, r5
 800b8c6:	9305      	str	r3, [sp, #20]
 800b8c8:	42ae      	cmp	r6, r5
 800b8ca:	d00b      	beq.n	800b8e4 <_vfiprintf_r+0x9c>
 800b8cc:	002a      	movs	r2, r5
 800b8ce:	0039      	movs	r1, r7
 800b8d0:	9803      	ldr	r0, [sp, #12]
 800b8d2:	f7ff ffa6 	bl	800b822 <__sfputs_r>
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	d100      	bne.n	800b8dc <_vfiprintf_r+0x94>
 800b8da:	e0af      	b.n	800ba3c <_vfiprintf_r+0x1f4>
 800b8dc:	6963      	ldr	r3, [r4, #20]
 800b8de:	9a05      	ldr	r2, [sp, #20]
 800b8e0:	189b      	adds	r3, r3, r2
 800b8e2:	6163      	str	r3, [r4, #20]
 800b8e4:	7833      	ldrb	r3, [r6, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d100      	bne.n	800b8ec <_vfiprintf_r+0xa4>
 800b8ea:	e0a7      	b.n	800ba3c <_vfiprintf_r+0x1f4>
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	4252      	negs	r2, r2
 800b8f2:	6062      	str	r2, [r4, #4]
 800b8f4:	a904      	add	r1, sp, #16
 800b8f6:	3254      	adds	r2, #84	; 0x54
 800b8f8:	1852      	adds	r2, r2, r1
 800b8fa:	1c75      	adds	r5, r6, #1
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	60e3      	str	r3, [r4, #12]
 800b900:	60a3      	str	r3, [r4, #8]
 800b902:	7013      	strb	r3, [r2, #0]
 800b904:	65a3      	str	r3, [r4, #88]	; 0x58
 800b906:	4b59      	ldr	r3, [pc, #356]	; (800ba6c <_vfiprintf_r+0x224>)
 800b908:	2205      	movs	r2, #5
 800b90a:	0018      	movs	r0, r3
 800b90c:	7829      	ldrb	r1, [r5, #0]
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	f7fd fe15 	bl	800953e <memchr>
 800b914:	1c6e      	adds	r6, r5, #1
 800b916:	2800      	cmp	r0, #0
 800b918:	d11f      	bne.n	800b95a <_vfiprintf_r+0x112>
 800b91a:	6822      	ldr	r2, [r4, #0]
 800b91c:	06d3      	lsls	r3, r2, #27
 800b91e:	d504      	bpl.n	800b92a <_vfiprintf_r+0xe2>
 800b920:	2353      	movs	r3, #83	; 0x53
 800b922:	a904      	add	r1, sp, #16
 800b924:	185b      	adds	r3, r3, r1
 800b926:	2120      	movs	r1, #32
 800b928:	7019      	strb	r1, [r3, #0]
 800b92a:	0713      	lsls	r3, r2, #28
 800b92c:	d504      	bpl.n	800b938 <_vfiprintf_r+0xf0>
 800b92e:	2353      	movs	r3, #83	; 0x53
 800b930:	a904      	add	r1, sp, #16
 800b932:	185b      	adds	r3, r3, r1
 800b934:	212b      	movs	r1, #43	; 0x2b
 800b936:	7019      	strb	r1, [r3, #0]
 800b938:	782b      	ldrb	r3, [r5, #0]
 800b93a:	2b2a      	cmp	r3, #42	; 0x2a
 800b93c:	d016      	beq.n	800b96c <_vfiprintf_r+0x124>
 800b93e:	002e      	movs	r6, r5
 800b940:	2100      	movs	r1, #0
 800b942:	200a      	movs	r0, #10
 800b944:	68e3      	ldr	r3, [r4, #12]
 800b946:	7832      	ldrb	r2, [r6, #0]
 800b948:	1c75      	adds	r5, r6, #1
 800b94a:	3a30      	subs	r2, #48	; 0x30
 800b94c:	2a09      	cmp	r2, #9
 800b94e:	d94e      	bls.n	800b9ee <_vfiprintf_r+0x1a6>
 800b950:	2900      	cmp	r1, #0
 800b952:	d111      	bne.n	800b978 <_vfiprintf_r+0x130>
 800b954:	e017      	b.n	800b986 <_vfiprintf_r+0x13e>
 800b956:	3601      	adds	r6, #1
 800b958:	e7af      	b.n	800b8ba <_vfiprintf_r+0x72>
 800b95a:	9b05      	ldr	r3, [sp, #20]
 800b95c:	6822      	ldr	r2, [r4, #0]
 800b95e:	1ac0      	subs	r0, r0, r3
 800b960:	2301      	movs	r3, #1
 800b962:	4083      	lsls	r3, r0
 800b964:	4313      	orrs	r3, r2
 800b966:	0035      	movs	r5, r6
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	e7cc      	b.n	800b906 <_vfiprintf_r+0xbe>
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	1d19      	adds	r1, r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	9107      	str	r1, [sp, #28]
 800b974:	2b00      	cmp	r3, #0
 800b976:	db01      	blt.n	800b97c <_vfiprintf_r+0x134>
 800b978:	930b      	str	r3, [sp, #44]	; 0x2c
 800b97a:	e004      	b.n	800b986 <_vfiprintf_r+0x13e>
 800b97c:	425b      	negs	r3, r3
 800b97e:	60e3      	str	r3, [r4, #12]
 800b980:	2302      	movs	r3, #2
 800b982:	4313      	orrs	r3, r2
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	7833      	ldrb	r3, [r6, #0]
 800b988:	2b2e      	cmp	r3, #46	; 0x2e
 800b98a:	d10a      	bne.n	800b9a2 <_vfiprintf_r+0x15a>
 800b98c:	7873      	ldrb	r3, [r6, #1]
 800b98e:	2b2a      	cmp	r3, #42	; 0x2a
 800b990:	d135      	bne.n	800b9fe <_vfiprintf_r+0x1b6>
 800b992:	9b07      	ldr	r3, [sp, #28]
 800b994:	3602      	adds	r6, #2
 800b996:	1d1a      	adds	r2, r3, #4
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	9207      	str	r2, [sp, #28]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	db2b      	blt.n	800b9f8 <_vfiprintf_r+0x1b0>
 800b9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a2:	4d33      	ldr	r5, [pc, #204]	; (800ba70 <_vfiprintf_r+0x228>)
 800b9a4:	2203      	movs	r2, #3
 800b9a6:	0028      	movs	r0, r5
 800b9a8:	7831      	ldrb	r1, [r6, #0]
 800b9aa:	f7fd fdc8 	bl	800953e <memchr>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d006      	beq.n	800b9c0 <_vfiprintf_r+0x178>
 800b9b2:	2340      	movs	r3, #64	; 0x40
 800b9b4:	1b40      	subs	r0, r0, r5
 800b9b6:	4083      	lsls	r3, r0
 800b9b8:	6822      	ldr	r2, [r4, #0]
 800b9ba:	3601      	adds	r6, #1
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	7831      	ldrb	r1, [r6, #0]
 800b9c2:	2206      	movs	r2, #6
 800b9c4:	482b      	ldr	r0, [pc, #172]	; (800ba74 <_vfiprintf_r+0x22c>)
 800b9c6:	1c75      	adds	r5, r6, #1
 800b9c8:	7621      	strb	r1, [r4, #24]
 800b9ca:	f7fd fdb8 	bl	800953e <memchr>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d043      	beq.n	800ba5a <_vfiprintf_r+0x212>
 800b9d2:	4b29      	ldr	r3, [pc, #164]	; (800ba78 <_vfiprintf_r+0x230>)
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d125      	bne.n	800ba24 <_vfiprintf_r+0x1dc>
 800b9d8:	2207      	movs	r2, #7
 800b9da:	9b07      	ldr	r3, [sp, #28]
 800b9dc:	3307      	adds	r3, #7
 800b9de:	4393      	bics	r3, r2
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	9307      	str	r3, [sp, #28]
 800b9e4:	6963      	ldr	r3, [r4, #20]
 800b9e6:	9a04      	ldr	r2, [sp, #16]
 800b9e8:	189b      	adds	r3, r3, r2
 800b9ea:	6163      	str	r3, [r4, #20]
 800b9ec:	e764      	b.n	800b8b8 <_vfiprintf_r+0x70>
 800b9ee:	4343      	muls	r3, r0
 800b9f0:	002e      	movs	r6, r5
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	189b      	adds	r3, r3, r2
 800b9f6:	e7a6      	b.n	800b946 <_vfiprintf_r+0xfe>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	425b      	negs	r3, r3
 800b9fc:	e7d0      	b.n	800b9a0 <_vfiprintf_r+0x158>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	200a      	movs	r0, #10
 800ba02:	001a      	movs	r2, r3
 800ba04:	3601      	adds	r6, #1
 800ba06:	6063      	str	r3, [r4, #4]
 800ba08:	7831      	ldrb	r1, [r6, #0]
 800ba0a:	1c75      	adds	r5, r6, #1
 800ba0c:	3930      	subs	r1, #48	; 0x30
 800ba0e:	2909      	cmp	r1, #9
 800ba10:	d903      	bls.n	800ba1a <_vfiprintf_r+0x1d2>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0c5      	beq.n	800b9a2 <_vfiprintf_r+0x15a>
 800ba16:	9209      	str	r2, [sp, #36]	; 0x24
 800ba18:	e7c3      	b.n	800b9a2 <_vfiprintf_r+0x15a>
 800ba1a:	4342      	muls	r2, r0
 800ba1c:	002e      	movs	r6, r5
 800ba1e:	2301      	movs	r3, #1
 800ba20:	1852      	adds	r2, r2, r1
 800ba22:	e7f1      	b.n	800ba08 <_vfiprintf_r+0x1c0>
 800ba24:	aa07      	add	r2, sp, #28
 800ba26:	9200      	str	r2, [sp, #0]
 800ba28:	0021      	movs	r1, r4
 800ba2a:	003a      	movs	r2, r7
 800ba2c:	4b13      	ldr	r3, [pc, #76]	; (800ba7c <_vfiprintf_r+0x234>)
 800ba2e:	9803      	ldr	r0, [sp, #12]
 800ba30:	f7fc fcc8 	bl	80083c4 <_printf_float>
 800ba34:	9004      	str	r0, [sp, #16]
 800ba36:	9b04      	ldr	r3, [sp, #16]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	d1d3      	bne.n	800b9e4 <_vfiprintf_r+0x19c>
 800ba3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba3e:	07db      	lsls	r3, r3, #31
 800ba40:	d405      	bmi.n	800ba4e <_vfiprintf_r+0x206>
 800ba42:	89bb      	ldrh	r3, [r7, #12]
 800ba44:	059b      	lsls	r3, r3, #22
 800ba46:	d402      	bmi.n	800ba4e <_vfiprintf_r+0x206>
 800ba48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ba4a:	f7fd fd77 	bl	800953c <__retarget_lock_release_recursive>
 800ba4e:	89bb      	ldrh	r3, [r7, #12]
 800ba50:	065b      	lsls	r3, r3, #25
 800ba52:	d500      	bpl.n	800ba56 <_vfiprintf_r+0x20e>
 800ba54:	e71d      	b.n	800b892 <_vfiprintf_r+0x4a>
 800ba56:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ba58:	e71d      	b.n	800b896 <_vfiprintf_r+0x4e>
 800ba5a:	aa07      	add	r2, sp, #28
 800ba5c:	9200      	str	r2, [sp, #0]
 800ba5e:	0021      	movs	r1, r4
 800ba60:	003a      	movs	r2, r7
 800ba62:	4b06      	ldr	r3, [pc, #24]	; (800ba7c <_vfiprintf_r+0x234>)
 800ba64:	9803      	ldr	r0, [sp, #12]
 800ba66:	f7fc ff73 	bl	8008950 <_printf_i>
 800ba6a:	e7e3      	b.n	800ba34 <_vfiprintf_r+0x1ec>
 800ba6c:	0800c4dc 	.word	0x0800c4dc
 800ba70:	0800c4e2 	.word	0x0800c4e2
 800ba74:	0800c4e6 	.word	0x0800c4e6
 800ba78:	080083c5 	.word	0x080083c5
 800ba7c:	0800b823 	.word	0x0800b823

0800ba80 <__sflush_r>:
 800ba80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba82:	898b      	ldrh	r3, [r1, #12]
 800ba84:	0005      	movs	r5, r0
 800ba86:	000c      	movs	r4, r1
 800ba88:	071a      	lsls	r2, r3, #28
 800ba8a:	d45c      	bmi.n	800bb46 <__sflush_r+0xc6>
 800ba8c:	684a      	ldr	r2, [r1, #4]
 800ba8e:	2a00      	cmp	r2, #0
 800ba90:	dc04      	bgt.n	800ba9c <__sflush_r+0x1c>
 800ba92:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ba94:	2a00      	cmp	r2, #0
 800ba96:	dc01      	bgt.n	800ba9c <__sflush_r+0x1c>
 800ba98:	2000      	movs	r0, #0
 800ba9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ba9e:	2f00      	cmp	r7, #0
 800baa0:	d0fa      	beq.n	800ba98 <__sflush_r+0x18>
 800baa2:	2200      	movs	r2, #0
 800baa4:	2080      	movs	r0, #128	; 0x80
 800baa6:	682e      	ldr	r6, [r5, #0]
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	001a      	movs	r2, r3
 800baac:	0140      	lsls	r0, r0, #5
 800baae:	6a21      	ldr	r1, [r4, #32]
 800bab0:	4002      	ands	r2, r0
 800bab2:	4203      	tst	r3, r0
 800bab4:	d034      	beq.n	800bb20 <__sflush_r+0xa0>
 800bab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	075b      	lsls	r3, r3, #29
 800babc:	d506      	bpl.n	800bacc <__sflush_r+0x4c>
 800babe:	6863      	ldr	r3, [r4, #4]
 800bac0:	1ac0      	subs	r0, r0, r3
 800bac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <__sflush_r+0x4c>
 800bac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800baca:	1ac0      	subs	r0, r0, r3
 800bacc:	0002      	movs	r2, r0
 800bace:	2300      	movs	r3, #0
 800bad0:	0028      	movs	r0, r5
 800bad2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bad4:	6a21      	ldr	r1, [r4, #32]
 800bad6:	47b8      	blx	r7
 800bad8:	89a2      	ldrh	r2, [r4, #12]
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	d106      	bne.n	800baec <__sflush_r+0x6c>
 800bade:	6829      	ldr	r1, [r5, #0]
 800bae0:	291d      	cmp	r1, #29
 800bae2:	d82c      	bhi.n	800bb3e <__sflush_r+0xbe>
 800bae4:	4b2a      	ldr	r3, [pc, #168]	; (800bb90 <__sflush_r+0x110>)
 800bae6:	410b      	asrs	r3, r1
 800bae8:	07db      	lsls	r3, r3, #31
 800baea:	d428      	bmi.n	800bb3e <__sflush_r+0xbe>
 800baec:	2300      	movs	r3, #0
 800baee:	6063      	str	r3, [r4, #4]
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	04d2      	lsls	r2, r2, #19
 800baf6:	d505      	bpl.n	800bb04 <__sflush_r+0x84>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <__sflush_r+0x82>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d100      	bne.n	800bb04 <__sflush_r+0x84>
 800bb02:	6560      	str	r0, [r4, #84]	; 0x54
 800bb04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb06:	602e      	str	r6, [r5, #0]
 800bb08:	2900      	cmp	r1, #0
 800bb0a:	d0c5      	beq.n	800ba98 <__sflush_r+0x18>
 800bb0c:	0023      	movs	r3, r4
 800bb0e:	3344      	adds	r3, #68	; 0x44
 800bb10:	4299      	cmp	r1, r3
 800bb12:	d002      	beq.n	800bb1a <__sflush_r+0x9a>
 800bb14:	0028      	movs	r0, r5
 800bb16:	f7fe fbcf 	bl	800a2b8 <_free_r>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb1e:	e7bc      	b.n	800ba9a <__sflush_r+0x1a>
 800bb20:	2301      	movs	r3, #1
 800bb22:	0028      	movs	r0, r5
 800bb24:	47b8      	blx	r7
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d1c6      	bne.n	800bab8 <__sflush_r+0x38>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0c3      	beq.n	800bab8 <__sflush_r+0x38>
 800bb30:	2b1d      	cmp	r3, #29
 800bb32:	d001      	beq.n	800bb38 <__sflush_r+0xb8>
 800bb34:	2b16      	cmp	r3, #22
 800bb36:	d101      	bne.n	800bb3c <__sflush_r+0xbc>
 800bb38:	602e      	str	r6, [r5, #0]
 800bb3a:	e7ad      	b.n	800ba98 <__sflush_r+0x18>
 800bb3c:	89a2      	ldrh	r2, [r4, #12]
 800bb3e:	2340      	movs	r3, #64	; 0x40
 800bb40:	4313      	orrs	r3, r2
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	e7a9      	b.n	800ba9a <__sflush_r+0x1a>
 800bb46:	690e      	ldr	r6, [r1, #16]
 800bb48:	2e00      	cmp	r6, #0
 800bb4a:	d0a5      	beq.n	800ba98 <__sflush_r+0x18>
 800bb4c:	680f      	ldr	r7, [r1, #0]
 800bb4e:	600e      	str	r6, [r1, #0]
 800bb50:	1bba      	subs	r2, r7, r6
 800bb52:	9201      	str	r2, [sp, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	079b      	lsls	r3, r3, #30
 800bb58:	d100      	bne.n	800bb5c <__sflush_r+0xdc>
 800bb5a:	694a      	ldr	r2, [r1, #20]
 800bb5c:	60a2      	str	r2, [r4, #8]
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dd99      	ble.n	800ba98 <__sflush_r+0x18>
 800bb64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb66:	0032      	movs	r2, r6
 800bb68:	001f      	movs	r7, r3
 800bb6a:	0028      	movs	r0, r5
 800bb6c:	9b01      	ldr	r3, [sp, #4]
 800bb6e:	6a21      	ldr	r1, [r4, #32]
 800bb70:	47b8      	blx	r7
 800bb72:	2800      	cmp	r0, #0
 800bb74:	dc06      	bgt.n	800bb84 <__sflush_r+0x104>
 800bb76:	2340      	movs	r3, #64	; 0x40
 800bb78:	2001      	movs	r0, #1
 800bb7a:	89a2      	ldrh	r2, [r4, #12]
 800bb7c:	4240      	negs	r0, r0
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	e78a      	b.n	800ba9a <__sflush_r+0x1a>
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	1836      	adds	r6, r6, r0
 800bb88:	1a1b      	subs	r3, r3, r0
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	e7e7      	b.n	800bb5e <__sflush_r+0xde>
 800bb8e:	46c0      	nop			; (mov r8, r8)
 800bb90:	dfbffffe 	.word	0xdfbffffe

0800bb94 <_fflush_r>:
 800bb94:	690b      	ldr	r3, [r1, #16]
 800bb96:	b570      	push	{r4, r5, r6, lr}
 800bb98:	0005      	movs	r5, r0
 800bb9a:	000c      	movs	r4, r1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d102      	bne.n	800bba6 <_fflush_r+0x12>
 800bba0:	2500      	movs	r5, #0
 800bba2:	0028      	movs	r0, r5
 800bba4:	bd70      	pop	{r4, r5, r6, pc}
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d004      	beq.n	800bbb4 <_fflush_r+0x20>
 800bbaa:	6a03      	ldr	r3, [r0, #32]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <_fflush_r+0x20>
 800bbb0:	f7fd fa76 	bl	80090a0 <__sinit>
 800bbb4:	220c      	movs	r2, #12
 800bbb6:	5ea3      	ldrsh	r3, [r4, r2]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d0f1      	beq.n	800bba0 <_fflush_r+0xc>
 800bbbc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbbe:	07d2      	lsls	r2, r2, #31
 800bbc0:	d404      	bmi.n	800bbcc <_fflush_r+0x38>
 800bbc2:	059b      	lsls	r3, r3, #22
 800bbc4:	d402      	bmi.n	800bbcc <_fflush_r+0x38>
 800bbc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbc8:	f7fd fcb7 	bl	800953a <__retarget_lock_acquire_recursive>
 800bbcc:	0028      	movs	r0, r5
 800bbce:	0021      	movs	r1, r4
 800bbd0:	f7ff ff56 	bl	800ba80 <__sflush_r>
 800bbd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbd6:	0005      	movs	r5, r0
 800bbd8:	07db      	lsls	r3, r3, #31
 800bbda:	d4e2      	bmi.n	800bba2 <_fflush_r+0xe>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	059b      	lsls	r3, r3, #22
 800bbe0:	d4df      	bmi.n	800bba2 <_fflush_r+0xe>
 800bbe2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbe4:	f7fd fcaa 	bl	800953c <__retarget_lock_release_recursive>
 800bbe8:	e7db      	b.n	800bba2 <_fflush_r+0xe>
	...

0800bbec <__swhatbuf_r>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	000e      	movs	r6, r1
 800bbf0:	001d      	movs	r5, r3
 800bbf2:	230e      	movs	r3, #14
 800bbf4:	5ec9      	ldrsh	r1, [r1, r3]
 800bbf6:	0014      	movs	r4, r2
 800bbf8:	b096      	sub	sp, #88	; 0x58
 800bbfa:	2900      	cmp	r1, #0
 800bbfc:	da0c      	bge.n	800bc18 <__swhatbuf_r+0x2c>
 800bbfe:	89b2      	ldrh	r2, [r6, #12]
 800bc00:	2380      	movs	r3, #128	; 0x80
 800bc02:	0011      	movs	r1, r2
 800bc04:	4019      	ands	r1, r3
 800bc06:	421a      	tst	r2, r3
 800bc08:	d013      	beq.n	800bc32 <__swhatbuf_r+0x46>
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	3b40      	subs	r3, #64	; 0x40
 800bc0e:	2000      	movs	r0, #0
 800bc10:	6029      	str	r1, [r5, #0]
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	b016      	add	sp, #88	; 0x58
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	466a      	mov	r2, sp
 800bc1a:	f000 f861 	bl	800bce0 <_fstat_r>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	dbed      	blt.n	800bbfe <__swhatbuf_r+0x12>
 800bc22:	23f0      	movs	r3, #240	; 0xf0
 800bc24:	9901      	ldr	r1, [sp, #4]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	4019      	ands	r1, r3
 800bc2a:	4b03      	ldr	r3, [pc, #12]	; (800bc38 <__swhatbuf_r+0x4c>)
 800bc2c:	18c9      	adds	r1, r1, r3
 800bc2e:	424b      	negs	r3, r1
 800bc30:	4159      	adcs	r1, r3
 800bc32:	2380      	movs	r3, #128	; 0x80
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	e7ea      	b.n	800bc0e <__swhatbuf_r+0x22>
 800bc38:	ffffe000 	.word	0xffffe000

0800bc3c <__smakebuf_r>:
 800bc3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc3e:	2602      	movs	r6, #2
 800bc40:	898b      	ldrh	r3, [r1, #12]
 800bc42:	0005      	movs	r5, r0
 800bc44:	000c      	movs	r4, r1
 800bc46:	4233      	tst	r3, r6
 800bc48:	d006      	beq.n	800bc58 <__smakebuf_r+0x1c>
 800bc4a:	0023      	movs	r3, r4
 800bc4c:	3347      	adds	r3, #71	; 0x47
 800bc4e:	6023      	str	r3, [r4, #0]
 800bc50:	6123      	str	r3, [r4, #16]
 800bc52:	2301      	movs	r3, #1
 800bc54:	6163      	str	r3, [r4, #20]
 800bc56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bc58:	466a      	mov	r2, sp
 800bc5a:	ab01      	add	r3, sp, #4
 800bc5c:	f7ff ffc6 	bl	800bbec <__swhatbuf_r>
 800bc60:	9900      	ldr	r1, [sp, #0]
 800bc62:	0007      	movs	r7, r0
 800bc64:	0028      	movs	r0, r5
 800bc66:	f7fe fef9 	bl	800aa5c <_malloc_r>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d108      	bne.n	800bc80 <__smakebuf_r+0x44>
 800bc6e:	220c      	movs	r2, #12
 800bc70:	5ea3      	ldrsh	r3, [r4, r2]
 800bc72:	059a      	lsls	r2, r3, #22
 800bc74:	d4ef      	bmi.n	800bc56 <__smakebuf_r+0x1a>
 800bc76:	2203      	movs	r2, #3
 800bc78:	4393      	bics	r3, r2
 800bc7a:	431e      	orrs	r6, r3
 800bc7c:	81a6      	strh	r6, [r4, #12]
 800bc7e:	e7e4      	b.n	800bc4a <__smakebuf_r+0xe>
 800bc80:	2380      	movs	r3, #128	; 0x80
 800bc82:	89a2      	ldrh	r2, [r4, #12]
 800bc84:	6020      	str	r0, [r4, #0]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	81a3      	strh	r3, [r4, #12]
 800bc8a:	9b00      	ldr	r3, [sp, #0]
 800bc8c:	6120      	str	r0, [r4, #16]
 800bc8e:	6163      	str	r3, [r4, #20]
 800bc90:	9b01      	ldr	r3, [sp, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00c      	beq.n	800bcb0 <__smakebuf_r+0x74>
 800bc96:	0028      	movs	r0, r5
 800bc98:	230e      	movs	r3, #14
 800bc9a:	5ee1      	ldrsh	r1, [r4, r3]
 800bc9c:	f000 f832 	bl	800bd04 <_isatty_r>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d005      	beq.n	800bcb0 <__smakebuf_r+0x74>
 800bca4:	2303      	movs	r3, #3
 800bca6:	89a2      	ldrh	r2, [r4, #12]
 800bca8:	439a      	bics	r2, r3
 800bcaa:	3b02      	subs	r3, #2
 800bcac:	4313      	orrs	r3, r2
 800bcae:	81a3      	strh	r3, [r4, #12]
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	433b      	orrs	r3, r7
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	e7ce      	b.n	800bc56 <__smakebuf_r+0x1a>

0800bcb8 <memmove>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	4288      	cmp	r0, r1
 800bcbc:	d902      	bls.n	800bcc4 <memmove+0xc>
 800bcbe:	188b      	adds	r3, r1, r2
 800bcc0:	4298      	cmp	r0, r3
 800bcc2:	d303      	bcc.n	800bccc <memmove+0x14>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	e007      	b.n	800bcd8 <memmove+0x20>
 800bcc8:	5c8b      	ldrb	r3, [r1, r2]
 800bcca:	5483      	strb	r3, [r0, r2]
 800bccc:	3a01      	subs	r2, #1
 800bcce:	d2fb      	bcs.n	800bcc8 <memmove+0x10>
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	5ccc      	ldrb	r4, [r1, r3]
 800bcd4:	54c4      	strb	r4, [r0, r3]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d1fa      	bne.n	800bcd2 <memmove+0x1a>
 800bcdc:	e7f8      	b.n	800bcd0 <memmove+0x18>
	...

0800bce0 <_fstat_r>:
 800bce0:	2300      	movs	r3, #0
 800bce2:	b570      	push	{r4, r5, r6, lr}
 800bce4:	4d06      	ldr	r5, [pc, #24]	; (800bd00 <_fstat_r+0x20>)
 800bce6:	0004      	movs	r4, r0
 800bce8:	0008      	movs	r0, r1
 800bcea:	0011      	movs	r1, r2
 800bcec:	602b      	str	r3, [r5, #0]
 800bcee:	f7f7 fdd8 	bl	80038a2 <_fstat>
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	d103      	bne.n	800bcfe <_fstat_r+0x1e>
 800bcf6:	682b      	ldr	r3, [r5, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d000      	beq.n	800bcfe <_fstat_r+0x1e>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	200006dc 	.word	0x200006dc

0800bd04 <_isatty_r>:
 800bd04:	2300      	movs	r3, #0
 800bd06:	b570      	push	{r4, r5, r6, lr}
 800bd08:	4d06      	ldr	r5, [pc, #24]	; (800bd24 <_isatty_r+0x20>)
 800bd0a:	0004      	movs	r4, r0
 800bd0c:	0008      	movs	r0, r1
 800bd0e:	602b      	str	r3, [r5, #0]
 800bd10:	f7f7 fdd5 	bl	80038be <_isatty>
 800bd14:	1c43      	adds	r3, r0, #1
 800bd16:	d103      	bne.n	800bd20 <_isatty_r+0x1c>
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d000      	beq.n	800bd20 <_isatty_r+0x1c>
 800bd1e:	6023      	str	r3, [r4, #0]
 800bd20:	bd70      	pop	{r4, r5, r6, pc}
 800bd22:	46c0      	nop			; (mov r8, r8)
 800bd24:	200006dc 	.word	0x200006dc

0800bd28 <_sbrk_r>:
 800bd28:	2300      	movs	r3, #0
 800bd2a:	b570      	push	{r4, r5, r6, lr}
 800bd2c:	4d06      	ldr	r5, [pc, #24]	; (800bd48 <_sbrk_r+0x20>)
 800bd2e:	0004      	movs	r4, r0
 800bd30:	0008      	movs	r0, r1
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	f7f7 fdd8 	bl	80038e8 <_sbrk>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d103      	bne.n	800bd44 <_sbrk_r+0x1c>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d000      	beq.n	800bd44 <_sbrk_r+0x1c>
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	bd70      	pop	{r4, r5, r6, pc}
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	200006dc 	.word	0x200006dc

0800bd4c <__assert_func>:
 800bd4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bd4e:	0014      	movs	r4, r2
 800bd50:	001a      	movs	r2, r3
 800bd52:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <__assert_func+0x2c>)
 800bd54:	0005      	movs	r5, r0
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	000e      	movs	r6, r1
 800bd5a:	68d8      	ldr	r0, [r3, #12]
 800bd5c:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <__assert_func+0x30>)
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	d101      	bne.n	800bd66 <__assert_func+0x1a>
 800bd62:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <__assert_func+0x34>)
 800bd64:	001c      	movs	r4, r3
 800bd66:	4907      	ldr	r1, [pc, #28]	; (800bd84 <__assert_func+0x38>)
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	9402      	str	r4, [sp, #8]
 800bd6c:	002b      	movs	r3, r5
 800bd6e:	9600      	str	r6, [sp, #0]
 800bd70:	f000 f866 	bl	800be40 <fiprintf>
 800bd74:	f000 f874 	bl	800be60 <abort>
 800bd78:	200001d0 	.word	0x200001d0
 800bd7c:	0800c4ed 	.word	0x0800c4ed
 800bd80:	0800c528 	.word	0x0800c528
 800bd84:	0800c4fa 	.word	0x0800c4fa

0800bd88 <_calloc_r>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	0c0b      	lsrs	r3, r1, #16
 800bd8c:	0c15      	lsrs	r5, r2, #16
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d11e      	bne.n	800bdd0 <_calloc_r+0x48>
 800bd92:	2d00      	cmp	r5, #0
 800bd94:	d10c      	bne.n	800bdb0 <_calloc_r+0x28>
 800bd96:	b289      	uxth	r1, r1
 800bd98:	b294      	uxth	r4, r2
 800bd9a:	434c      	muls	r4, r1
 800bd9c:	0021      	movs	r1, r4
 800bd9e:	f7fe fe5d 	bl	800aa5c <_malloc_r>
 800bda2:	1e05      	subs	r5, r0, #0
 800bda4:	d01b      	beq.n	800bdde <_calloc_r+0x56>
 800bda6:	0022      	movs	r2, r4
 800bda8:	2100      	movs	r1, #0
 800bdaa:	f7fd fb2f 	bl	800940c <memset>
 800bdae:	e016      	b.n	800bdde <_calloc_r+0x56>
 800bdb0:	1c2b      	adds	r3, r5, #0
 800bdb2:	1c0c      	adds	r4, r1, #0
 800bdb4:	b289      	uxth	r1, r1
 800bdb6:	b292      	uxth	r2, r2
 800bdb8:	434a      	muls	r2, r1
 800bdba:	b2a1      	uxth	r1, r4
 800bdbc:	b29c      	uxth	r4, r3
 800bdbe:	434c      	muls	r4, r1
 800bdc0:	0c13      	lsrs	r3, r2, #16
 800bdc2:	18e4      	adds	r4, r4, r3
 800bdc4:	0c23      	lsrs	r3, r4, #16
 800bdc6:	d107      	bne.n	800bdd8 <_calloc_r+0x50>
 800bdc8:	0424      	lsls	r4, r4, #16
 800bdca:	b292      	uxth	r2, r2
 800bdcc:	4314      	orrs	r4, r2
 800bdce:	e7e5      	b.n	800bd9c <_calloc_r+0x14>
 800bdd0:	2d00      	cmp	r5, #0
 800bdd2:	d101      	bne.n	800bdd8 <_calloc_r+0x50>
 800bdd4:	1c14      	adds	r4, r2, #0
 800bdd6:	e7ed      	b.n	800bdb4 <_calloc_r+0x2c>
 800bdd8:	230c      	movs	r3, #12
 800bdda:	2500      	movs	r5, #0
 800bddc:	6003      	str	r3, [r0, #0]
 800bdde:	0028      	movs	r0, r5
 800bde0:	bd70      	pop	{r4, r5, r6, pc}

0800bde2 <_realloc_r>:
 800bde2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bde4:	0007      	movs	r7, r0
 800bde6:	000e      	movs	r6, r1
 800bde8:	0014      	movs	r4, r2
 800bdea:	2900      	cmp	r1, #0
 800bdec:	d105      	bne.n	800bdfa <_realloc_r+0x18>
 800bdee:	0011      	movs	r1, r2
 800bdf0:	f7fe fe34 	bl	800aa5c <_malloc_r>
 800bdf4:	0005      	movs	r5, r0
 800bdf6:	0028      	movs	r0, r5
 800bdf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bdfa:	2a00      	cmp	r2, #0
 800bdfc:	d103      	bne.n	800be06 <_realloc_r+0x24>
 800bdfe:	f7fe fa5b 	bl	800a2b8 <_free_r>
 800be02:	0025      	movs	r5, r4
 800be04:	e7f7      	b.n	800bdf6 <_realloc_r+0x14>
 800be06:	f000 f832 	bl	800be6e <_malloc_usable_size_r>
 800be0a:	9001      	str	r0, [sp, #4]
 800be0c:	4284      	cmp	r4, r0
 800be0e:	d803      	bhi.n	800be18 <_realloc_r+0x36>
 800be10:	0035      	movs	r5, r6
 800be12:	0843      	lsrs	r3, r0, #1
 800be14:	42a3      	cmp	r3, r4
 800be16:	d3ee      	bcc.n	800bdf6 <_realloc_r+0x14>
 800be18:	0021      	movs	r1, r4
 800be1a:	0038      	movs	r0, r7
 800be1c:	f7fe fe1e 	bl	800aa5c <_malloc_r>
 800be20:	1e05      	subs	r5, r0, #0
 800be22:	d0e8      	beq.n	800bdf6 <_realloc_r+0x14>
 800be24:	9b01      	ldr	r3, [sp, #4]
 800be26:	0022      	movs	r2, r4
 800be28:	429c      	cmp	r4, r3
 800be2a:	d900      	bls.n	800be2e <_realloc_r+0x4c>
 800be2c:	001a      	movs	r2, r3
 800be2e:	0031      	movs	r1, r6
 800be30:	0028      	movs	r0, r5
 800be32:	f7fd fb8f 	bl	8009554 <memcpy>
 800be36:	0031      	movs	r1, r6
 800be38:	0038      	movs	r0, r7
 800be3a:	f7fe fa3d 	bl	800a2b8 <_free_r>
 800be3e:	e7da      	b.n	800bdf6 <_realloc_r+0x14>

0800be40 <fiprintf>:
 800be40:	b40e      	push	{r1, r2, r3}
 800be42:	b517      	push	{r0, r1, r2, r4, lr}
 800be44:	4c05      	ldr	r4, [pc, #20]	; (800be5c <fiprintf+0x1c>)
 800be46:	ab05      	add	r3, sp, #20
 800be48:	cb04      	ldmia	r3!, {r2}
 800be4a:	0001      	movs	r1, r0
 800be4c:	6820      	ldr	r0, [r4, #0]
 800be4e:	9301      	str	r3, [sp, #4]
 800be50:	f7ff fcfa 	bl	800b848 <_vfiprintf_r>
 800be54:	bc1e      	pop	{r1, r2, r3, r4}
 800be56:	bc08      	pop	{r3}
 800be58:	b003      	add	sp, #12
 800be5a:	4718      	bx	r3
 800be5c:	200001d0 	.word	0x200001d0

0800be60 <abort>:
 800be60:	2006      	movs	r0, #6
 800be62:	b510      	push	{r4, lr}
 800be64:	f000 f836 	bl	800bed4 <raise>
 800be68:	2001      	movs	r0, #1
 800be6a:	f7f7 fccb 	bl	8003804 <_exit>

0800be6e <_malloc_usable_size_r>:
 800be6e:	1f0b      	subs	r3, r1, #4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	1f18      	subs	r0, r3, #4
 800be74:	2b00      	cmp	r3, #0
 800be76:	da01      	bge.n	800be7c <_malloc_usable_size_r+0xe>
 800be78:	580b      	ldr	r3, [r1, r0]
 800be7a:	18c0      	adds	r0, r0, r3
 800be7c:	4770      	bx	lr

0800be7e <_raise_r>:
 800be7e:	b570      	push	{r4, r5, r6, lr}
 800be80:	0004      	movs	r4, r0
 800be82:	000d      	movs	r5, r1
 800be84:	291f      	cmp	r1, #31
 800be86:	d904      	bls.n	800be92 <_raise_r+0x14>
 800be88:	2316      	movs	r3, #22
 800be8a:	6003      	str	r3, [r0, #0]
 800be8c:	2001      	movs	r0, #1
 800be8e:	4240      	negs	r0, r0
 800be90:	bd70      	pop	{r4, r5, r6, pc}
 800be92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <_raise_r+0x24>
 800be98:	008a      	lsls	r2, r1, #2
 800be9a:	189b      	adds	r3, r3, r2
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	d108      	bne.n	800beb4 <_raise_r+0x36>
 800bea2:	0020      	movs	r0, r4
 800bea4:	f000 f832 	bl	800bf0c <_getpid_r>
 800bea8:	002a      	movs	r2, r5
 800beaa:	0001      	movs	r1, r0
 800beac:	0020      	movs	r0, r4
 800beae:	f000 f81b 	bl	800bee8 <_kill_r>
 800beb2:	e7ed      	b.n	800be90 <_raise_r+0x12>
 800beb4:	2000      	movs	r0, #0
 800beb6:	2a01      	cmp	r2, #1
 800beb8:	d0ea      	beq.n	800be90 <_raise_r+0x12>
 800beba:	1c51      	adds	r1, r2, #1
 800bebc:	d103      	bne.n	800bec6 <_raise_r+0x48>
 800bebe:	2316      	movs	r3, #22
 800bec0:	3001      	adds	r0, #1
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	e7e4      	b.n	800be90 <_raise_r+0x12>
 800bec6:	2400      	movs	r4, #0
 800bec8:	0028      	movs	r0, r5
 800beca:	601c      	str	r4, [r3, #0]
 800becc:	4790      	blx	r2
 800bece:	0020      	movs	r0, r4
 800bed0:	e7de      	b.n	800be90 <_raise_r+0x12>
	...

0800bed4 <raise>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	4b03      	ldr	r3, [pc, #12]	; (800bee4 <raise+0x10>)
 800bed8:	0001      	movs	r1, r0
 800beda:	6818      	ldr	r0, [r3, #0]
 800bedc:	f7ff ffcf 	bl	800be7e <_raise_r>
 800bee0:	bd10      	pop	{r4, pc}
 800bee2:	46c0      	nop			; (mov r8, r8)
 800bee4:	200001d0 	.word	0x200001d0

0800bee8 <_kill_r>:
 800bee8:	2300      	movs	r3, #0
 800beea:	b570      	push	{r4, r5, r6, lr}
 800beec:	4d06      	ldr	r5, [pc, #24]	; (800bf08 <_kill_r+0x20>)
 800beee:	0004      	movs	r4, r0
 800bef0:	0008      	movs	r0, r1
 800bef2:	0011      	movs	r1, r2
 800bef4:	602b      	str	r3, [r5, #0]
 800bef6:	f7f7 fc75 	bl	80037e4 <_kill>
 800befa:	1c43      	adds	r3, r0, #1
 800befc:	d103      	bne.n	800bf06 <_kill_r+0x1e>
 800befe:	682b      	ldr	r3, [r5, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d000      	beq.n	800bf06 <_kill_r+0x1e>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	200006dc 	.word	0x200006dc

0800bf0c <_getpid_r>:
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	f7f7 fc63 	bl	80037d8 <_getpid>
 800bf12:	bd10      	pop	{r4, pc}

0800bf14 <_init>:
 800bf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf16:	46c0      	nop			; (mov r8, r8)
 800bf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1a:	bc08      	pop	{r3}
 800bf1c:	469e      	mov	lr, r3
 800bf1e:	4770      	bx	lr

0800bf20 <_fini>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf26:	bc08      	pop	{r3}
 800bf28:	469e      	mov	lr, r3
 800bf2a:	4770      	bx	lr
