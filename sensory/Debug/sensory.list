
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800bcb0  0800bcb0  0001bcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c19c  0800c19c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c19c  0800c19c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a4  0800c1a4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a4  0800c1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1a8  0800c1a8  0001c1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001d8  0800c380  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800c380  000208ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f49  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000370a  00000000  00000000  00037188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004934  00000000  00000000  0003cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001adb3  00000000  00000000  00041824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088739  00000000  00000000  0005c5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b84  00000000  00000000  000e4d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bc98 	.word	0x0800bc98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800bc98 	.word	0x0800bc98

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 feeb 	bl	8002334 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb44 	bl	8001bf4 <__aeabi_dsub>
 800056c:	f001 fee2 	bl	8002334 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f853 	bl	8001670 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 ff16 	bl	8002400 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f84a 	bl	8001670 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb06 	bl	8001bf4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fecf 	bl	80023a0 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f833 	bl	8001670 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fef6 	bl	8002400 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ffa6 	bl	8002594 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ffa1 	bl	8002594 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 fe73 	bl	8002558 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fd6e 	bl	8002558 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa1b 	bl	8002558 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 f9fe 	bl	8002558 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	0800bcc4 	.word	0x0800bcc4
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f92f 	bl	8002558 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f920 	bl	8002558 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdb1 	bl	8002558 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fd89 	bl	8002558 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd1c 	bl	8002558 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd0e 	bl	8002558 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc49 	bl	8002558 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fae2 	bl	8002558 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f8d2 	bl	8002558 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8a7 	bl	8002558 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_d2f>:
 800244c:	0002      	movs	r2, r0
 800244e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002450:	004b      	lsls	r3, r1, #1
 8002452:	030d      	lsls	r5, r1, #12
 8002454:	0f40      	lsrs	r0, r0, #29
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	0fcc      	lsrs	r4, r1, #31
 800245a:	0a6d      	lsrs	r5, r5, #9
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <__aeabi_d2f+0xfc>)
 800245e:	4305      	orrs	r5, r0
 8002460:	1c58      	adds	r0, r3, #1
 8002462:	00d7      	lsls	r7, r2, #3
 8002464:	4208      	tst	r0, r1
 8002466:	d00a      	beq.n	800247e <__aeabi_d2f+0x32>
 8002468:	4938      	ldr	r1, [pc, #224]	; (800254c <__aeabi_d2f+0x100>)
 800246a:	1859      	adds	r1, r3, r1
 800246c:	29fe      	cmp	r1, #254	; 0xfe
 800246e:	dd16      	ble.n	800249e <__aeabi_d2f+0x52>
 8002470:	20ff      	movs	r0, #255	; 0xff
 8002472:	2200      	movs	r2, #0
 8002474:	05c0      	lsls	r0, r0, #23
 8002476:	4310      	orrs	r0, r2
 8002478:	07e4      	lsls	r4, r4, #31
 800247a:	4320      	orrs	r0, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <__aeabi_d2f+0x44>
 8002482:	433d      	orrs	r5, r7
 8002484:	d026      	beq.n	80024d4 <__aeabi_d2f+0x88>
 8002486:	2205      	movs	r2, #5
 8002488:	0192      	lsls	r2, r2, #6
 800248a:	0a52      	lsrs	r2, r2, #9
 800248c:	b2d8      	uxtb	r0, r3
 800248e:	e7f1      	b.n	8002474 <__aeabi_d2f+0x28>
 8002490:	432f      	orrs	r7, r5
 8002492:	d0ed      	beq.n	8002470 <__aeabi_d2f+0x24>
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	03d2      	lsls	r2, r2, #15
 8002498:	20ff      	movs	r0, #255	; 0xff
 800249a:	432a      	orrs	r2, r5
 800249c:	e7ea      	b.n	8002474 <__aeabi_d2f+0x28>
 800249e:	2900      	cmp	r1, #0
 80024a0:	dd1b      	ble.n	80024da <__aeabi_d2f+0x8e>
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	1e50      	subs	r0, r2, #1
 80024a6:	4182      	sbcs	r2, r0
 80024a8:	00ed      	lsls	r5, r5, #3
 80024aa:	0f7f      	lsrs	r7, r7, #29
 80024ac:	432a      	orrs	r2, r5
 80024ae:	433a      	orrs	r2, r7
 80024b0:	0753      	lsls	r3, r2, #29
 80024b2:	d047      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024b4:	230f      	movs	r3, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d000      	beq.n	80024be <__aeabi_d2f+0x72>
 80024bc:	3204      	adds	r2, #4
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	04db      	lsls	r3, r3, #19
 80024c2:	4013      	ands	r3, r2
 80024c4:	d03e      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024c6:	1c48      	adds	r0, r1, #1
 80024c8:	29fe      	cmp	r1, #254	; 0xfe
 80024ca:	d0d1      	beq.n	8002470 <__aeabi_d2f+0x24>
 80024cc:	0192      	lsls	r2, r2, #6
 80024ce:	0a52      	lsrs	r2, r2, #9
 80024d0:	b2c0      	uxtb	r0, r0
 80024d2:	e7cf      	b.n	8002474 <__aeabi_d2f+0x28>
 80024d4:	2000      	movs	r0, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	e7cc      	b.n	8002474 <__aeabi_d2f+0x28>
 80024da:	000a      	movs	r2, r1
 80024dc:	3217      	adds	r2, #23
 80024de:	db2f      	blt.n	8002540 <__aeabi_d2f+0xf4>
 80024e0:	2680      	movs	r6, #128	; 0x80
 80024e2:	0436      	lsls	r6, r6, #16
 80024e4:	432e      	orrs	r6, r5
 80024e6:	251e      	movs	r5, #30
 80024e8:	1a6d      	subs	r5, r5, r1
 80024ea:	2d1f      	cmp	r5, #31
 80024ec:	dd11      	ble.n	8002512 <__aeabi_d2f+0xc6>
 80024ee:	2202      	movs	r2, #2
 80024f0:	4252      	negs	r2, r2
 80024f2:	1a52      	subs	r2, r2, r1
 80024f4:	0031      	movs	r1, r6
 80024f6:	40d1      	lsrs	r1, r2
 80024f8:	2d20      	cmp	r5, #32
 80024fa:	d004      	beq.n	8002506 <__aeabi_d2f+0xba>
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <__aeabi_d2f+0x104>)
 80024fe:	4694      	mov	ip, r2
 8002500:	4463      	add	r3, ip
 8002502:	409e      	lsls	r6, r3
 8002504:	4337      	orrs	r7, r6
 8002506:	003a      	movs	r2, r7
 8002508:	1e53      	subs	r3, r2, #1
 800250a:	419a      	sbcs	r2, r3
 800250c:	430a      	orrs	r2, r1
 800250e:	2100      	movs	r1, #0
 8002510:	e7ce      	b.n	80024b0 <__aeabi_d2f+0x64>
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <__aeabi_d2f+0x108>)
 8002514:	0038      	movs	r0, r7
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	4098      	lsls	r0, r3
 800251c:	003a      	movs	r2, r7
 800251e:	1e41      	subs	r1, r0, #1
 8002520:	4188      	sbcs	r0, r1
 8002522:	409e      	lsls	r6, r3
 8002524:	40ea      	lsrs	r2, r5
 8002526:	4330      	orrs	r0, r6
 8002528:	4302      	orrs	r2, r0
 800252a:	2100      	movs	r1, #0
 800252c:	0753      	lsls	r3, r2, #29
 800252e:	d1c1      	bne.n	80024b4 <__aeabi_d2f+0x68>
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0013      	movs	r3, r2
 8002534:	04c9      	lsls	r1, r1, #19
 8002536:	2001      	movs	r0, #1
 8002538:	400b      	ands	r3, r1
 800253a:	420a      	tst	r2, r1
 800253c:	d1c6      	bne.n	80024cc <__aeabi_d2f+0x80>
 800253e:	e7a3      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002540:	2300      	movs	r3, #0
 8002542:	e7a0      	b.n	8002486 <__aeabi_d2f+0x3a>
 8002544:	000b      	movs	r3, r1
 8002546:	e79f      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002548:	000007fe 	.word	0x000007fe
 800254c:	fffffc80 	.word	0xfffffc80
 8002550:	fffffca2 	.word	0xfffffca2
 8002554:	fffffc82 	.word	0xfffffc82

08002558 <__clzsi2>:
 8002558:	211c      	movs	r1, #28
 800255a:	2301      	movs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	4298      	cmp	r0, r3
 8002560:	d301      	bcc.n	8002566 <__clzsi2+0xe>
 8002562:	0c00      	lsrs	r0, r0, #16
 8002564:	3910      	subs	r1, #16
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	4298      	cmp	r0, r3
 800256a:	d301      	bcc.n	8002570 <__clzsi2+0x18>
 800256c:	0a00      	lsrs	r0, r0, #8
 800256e:	3908      	subs	r1, #8
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	4298      	cmp	r0, r3
 8002574:	d301      	bcc.n	800257a <__clzsi2+0x22>
 8002576:	0900      	lsrs	r0, r0, #4
 8002578:	3904      	subs	r1, #4
 800257a:	a202      	add	r2, pc, #8	; (adr r2, 8002584 <__clzsi2+0x2c>)
 800257c:	5c10      	ldrb	r0, [r2, r0]
 800257e:	1840      	adds	r0, r0, r1
 8002580:	4770      	bx	lr
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	02020304 	.word	0x02020304
 8002588:	01010101 	.word	0x01010101
	...

08002594 <__clzdi2>:
 8002594:	b510      	push	{r4, lr}
 8002596:	2900      	cmp	r1, #0
 8002598:	d103      	bne.n	80025a2 <__clzdi2+0xe>
 800259a:	f7ff ffdd 	bl	8002558 <__clzsi2>
 800259e:	3020      	adds	r0, #32
 80025a0:	e002      	b.n	80025a8 <__clzdi2+0x14>
 80025a2:	0008      	movs	r0, r1
 80025a4:	f7ff ffd8 	bl	8002558 <__clzsi2>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	2382      	movs	r3, #130	; 0x82
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a2b      	ldr	r2, [pc, #172]	; (800266c <NEO6_ReceiveUartChar+0xc0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	d503      	bpl.n	80025cc <NEO6_ReceiveUartChar+0x20>
 80025c4:	3b01      	subs	r3, #1
 80025c6:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <NEO6_ReceiveUartChar+0xc4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	3301      	adds	r3, #1
 80025cc:	001a      	movs	r2, r3
 80025ce:	200f      	movs	r0, #15
 80025d0:	183b      	adds	r3, r7, r0
 80025d2:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	2306      	movs	r3, #6
 80025d8:	33ff      	adds	r3, #255	; 0xff
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	183a      	adds	r2, r7, r0
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d038      	beq.n	8002656 <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b0d      	cmp	r3, #13
 80025ec:	d119      	bne.n	8002622 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	2383      	movs	r3, #131	; 0x83
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2d9      	uxtb	r1, r3
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	2383      	movs	r3, #131	; 0x83
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	1839      	adds	r1, r7, r0
 8002606:	2382      	movs	r3, #130	; 0x82
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	7809      	ldrb	r1, [r1, #0]
 800260c:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 800260e:	183b      	adds	r3, r7, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	b2d1      	uxtb	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	18d3      	adds	r3, r2, r3
 800261c:	1c0a      	adds	r2, r1, #0
 800261e:	711a      	strb	r2, [r3, #4]
 8002620:	e019      	b.n	8002656 <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d014      	beq.n	8002656 <NEO6_ReceiveUartChar+0xaa>
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d00f      	beq.n	8002656 <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	200f      	movs	r0, #15
 800263a:	1839      	adds	r1, r7, r0
 800263c:	2382      	movs	r3, #130	; 0x82
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	7809      	ldrb	r1, [r1, #0]
 8002642:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8002644:	183b      	adds	r3, r7, r0
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	b2d1      	uxtb	r1, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	1c0a      	adds	r2, r1, #0
 8002654:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4906      	ldr	r1, [pc, #24]	; (8002674 <NEO6_ReceiveUartChar+0xc8>)
 800265c:	2201      	movs	r2, #1
 800265e:	0018      	movs	r0, r3
 8002660:	f003 faec 	bl	8005c3c <HAL_UART_Receive_IT>
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}
 800266c:	800000ff 	.word	0x800000ff
 8002670:	ffffff00 	.word	0xffffff00
 8002674:	200001f4 	.word	0x200001f4

08002678 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800267e:	003b      	movs	r3, r7
 8002680:	0018      	movs	r0, r3
 8002682:	2308      	movs	r3, #8
 8002684:	001a      	movs	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	f006 fd82 	bl	8009190 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <MX_ADC_Init+0xbc>)
 800268e:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <MX_ADC_Init+0xc0>)
 8002690:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <MX_ADC_Init+0xbc>)
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <MX_ADC_Init+0xbc>)
 800269a:	2200      	movs	r2, #0
 800269c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <MX_ADC_Init+0xbc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <MX_ADC_Init+0xbc>)
 80026a6:	2207      	movs	r2, #7
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <MX_ADC_Init+0xbc>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <MX_ADC_Init+0xbc>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <MX_ADC_Init+0xbc>)
 80026b8:	2220      	movs	r2, #32
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <MX_ADC_Init+0xbc>)
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <MX_ADC_Init+0xbc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <MX_ADC_Init+0xbc>)
 80026ce:	22c2      	movs	r2, #194	; 0xc2
 80026d0:	32ff      	adds	r2, #255	; 0xff
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80026d4:	4b17      	ldr	r3, [pc, #92]	; (8002734 <MX_ADC_Init+0xbc>)
 80026d6:	222c      	movs	r2, #44	; 0x2c
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <MX_ADC_Init+0xbc>)
 80026de:	2204      	movs	r2, #4
 80026e0:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <MX_ADC_Init+0xbc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <MX_ADC_Init+0xbc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_ADC_Init+0xbc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <MX_ADC_Init+0xbc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_ADC_Init+0xbc>)
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 ff2d 	bl	800355c <HAL_ADC_Init>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d001      	beq.n	800270a <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8002706:	f000 fad9 	bl	8002cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800270a:	003b      	movs	r3, r7
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002710:	003b      	movs	r3, r7
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	0152      	lsls	r2, r2, #5
 8002716:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002718:	003a      	movs	r2, r7
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_ADC_Init+0xbc>)
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f001 f890 	bl	8003844 <HAL_ADC_ConfigChannel>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d001      	beq.n	800272c <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8002728:	f000 fac8 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200001f8 	.word	0x200001f8
 8002738:	40012400 	.word	0x40012400

0800273c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	240c      	movs	r4, #12
 8002746:	193b      	adds	r3, r7, r4
 8002748:	0018      	movs	r0, r3
 800274a:	2314      	movs	r3, #20
 800274c:	001a      	movs	r2, r3
 800274e:	2100      	movs	r1, #0
 8002750:	f006 fd1e 	bl	8009190 <memset>
  if(adcHandle->Instance==ADC1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_ADC_MspInit+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d14d      	bne.n	80027fa <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275e:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0089      	lsls	r1, r1, #2
 8002768:	430a      	orrs	r2, r1
 800276a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_ADC_MspInit+0xcc>)
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2201      	movs	r2, #1
 800277e:	4013      	ands	r3, r2
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002784:	193b      	adds	r3, r7, r4
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278a:	193b      	adds	r3, r7, r4
 800278c:	2203      	movs	r2, #3
 800278e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	193b      	adds	r3, r7, r4
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	193a      	adds	r2, r7, r4
 8002798:	23a0      	movs	r3, #160	; 0xa0
 800279a:	05db      	lsls	r3, r3, #23
 800279c:	0011      	movs	r1, r2
 800279e:	0018      	movs	r0, r3
 80027a0:	f001 fb9c 	bl	8003edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_ADC_MspInit+0xd4>)
 80027a8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027d4:	2220      	movs	r2, #32
 80027d6:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f001 f9cd 	bl	8003b80 <HAL_DMA_Init>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d001      	beq.n	80027ee <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80027ea:	f000 fa67 	bl	8002cbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_ADC_MspInit+0xd0>)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b009      	add	sp, #36	; 0x24
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	40012400 	.word	0x40012400
 8002808:	40021000 	.word	0x40021000
 800280c:	20000254 	.word	0x20000254
 8002810:	40020008 	.word	0x40020008

08002814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_DMA_Init+0x38>)
 800281c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_DMA_Init+0x38>)
 8002820:	2101      	movs	r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_DMA_Init+0x38>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2101      	movs	r1, #1
 8002836:	2009      	movs	r0, #9
 8002838:	f001 f970 	bl	8003b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800283c:	2009      	movs	r0, #9
 800283e:	f001 f982 	bl	8003b46 <HAL_NVIC_EnableIRQ>

}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40021000 	.word	0x40021000

08002850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b08b      	sub	sp, #44	; 0x2c
 8002854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002856:	2414      	movs	r4, #20
 8002858:	193b      	adds	r3, r7, r4
 800285a:	0018      	movs	r0, r3
 800285c:	2314      	movs	r3, #20
 800285e:	001a      	movs	r2, r3
 8002860:	2100      	movs	r1, #0
 8002862:	f006 fc95 	bl	8009190 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002866:	4b48      	ldr	r3, [pc, #288]	; (8002988 <MX_GPIO_Init+0x138>)
 8002868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <MX_GPIO_Init+0x138>)
 800286c:	2104      	movs	r1, #4
 800286e:	430a      	orrs	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
 8002872:	4b45      	ldr	r3, [pc, #276]	; (8002988 <MX_GPIO_Init+0x138>)
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800287e:	4b42      	ldr	r3, [pc, #264]	; (8002988 <MX_GPIO_Init+0x138>)
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <MX_GPIO_Init+0x138>)
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	430a      	orrs	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	; 0x2c
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <MX_GPIO_Init+0x138>)
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <MX_GPIO_Init+0x138>)
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <MX_GPIO_Init+0x138>)
 800289c:	2101      	movs	r1, #1
 800289e:	430a      	orrs	r2, r1
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <MX_GPIO_Init+0x138>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <MX_GPIO_Init+0x138>)
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	4b35      	ldr	r3, [pc, #212]	; (8002988 <MX_GPIO_Init+0x138>)
 80028b4:	2102      	movs	r1, #2
 80028b6:	430a      	orrs	r2, r1
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <MX_GPIO_Init+0x138>)
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028c6:	23a0      	movs	r3, #160	; 0xa0
 80028c8:	05db      	lsls	r3, r3, #23
 80028ca:	2200      	movs	r2, #0
 80028cc:	2120      	movs	r1, #32
 80028ce:	0018      	movs	r0, r3
 80028d0:	f001 fc7a 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <MX_GPIO_Init+0x13c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	21c0      	movs	r1, #192	; 0xc0
 80028da:	0018      	movs	r0, r3
 80028dc:	f001 fc74 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	0192      	lsls	r2, r2, #6
 80028e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2284      	movs	r2, #132	; 0x84
 80028ec:	0392      	lsls	r2, r2, #14
 80028ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <MX_GPIO_Init+0x13c>)
 80028fa:	0019      	movs	r1, r3
 80028fc:	0010      	movs	r0, r2
 80028fe:	f001 faed 	bl	8003edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2220      	movs	r2, #32
 8002906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	193b      	adds	r3, r7, r4
 800290a:	2201      	movs	r2, #1
 800290c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800291a:	193a      	adds	r2, r7, r4
 800291c:	23a0      	movs	r3, #160	; 0xa0
 800291e:	05db      	lsls	r3, r3, #23
 8002920:	0011      	movs	r1, r2
 8002922:	0018      	movs	r0, r3
 8002924:	f001 fada 	bl	8003edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8002928:	193b      	adds	r3, r7, r4
 800292a:	22c0      	movs	r2, #192	; 0xc0
 800292c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	193b      	adds	r3, r7, r4
 8002930:	2201      	movs	r2, #1
 8002932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	193b      	adds	r3, r7, r4
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002940:	193b      	adds	r3, r7, r4
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <MX_GPIO_Init+0x13c>)
 8002944:	0019      	movs	r1, r3
 8002946:	0010      	movs	r0, r2
 8002948:	f001 fac8 	bl	8003edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800294c:	0021      	movs	r1, r4
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	0052      	lsls	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2288      	movs	r2, #136	; 0x88
 800295a:	0352      	lsls	r2, r2, #13
 800295c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	187b      	adds	r3, r7, r1
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002964:	187b      	adds	r3, r7, r1
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <MX_GPIO_Init+0x13c>)
 8002968:	0019      	movs	r1, r3
 800296a:	0010      	movs	r0, r2
 800296c:	f001 fab6 	bl	8003edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	2007      	movs	r0, #7
 8002976:	f001 f8d1 	bl	8003b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800297a:	2007      	movs	r0, #7
 800297c:	f001 f8e3 	bl	8003b46 <HAL_NVIC_EnableIRQ>

}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b00b      	add	sp, #44	; 0x2c
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	50000800 	.word	0x50000800

08002990 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <MX_I2C1_Init+0x74>)
 8002996:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <MX_I2C1_Init+0x78>)
 8002998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_I2C1_Init+0x74>)
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <MX_I2C1_Init+0x7c>)
 800299e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f001 fc59 	bl	8004284 <HAL_I2C_Init>
 80029d2:	1e03      	subs	r3, r0, #0
 80029d4:	d001      	beq.n	80029da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029d6:	f000 f971 	bl	8002cbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029dc:	2100      	movs	r1, #0
 80029de:	0018      	movs	r0, r3
 80029e0:	f001 fce6 	bl	80043b0 <HAL_I2CEx_ConfigAnalogFilter>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d001      	beq.n	80029ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029e8:	f000 f968 	bl	8002cbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <MX_I2C1_Init+0x74>)
 80029ee:	2100      	movs	r1, #0
 80029f0:	0018      	movs	r0, r3
 80029f2:	f001 fd29 	bl	8004448 <HAL_I2CEx_ConfigDigitalFilter>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d001      	beq.n	80029fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029fa:	f000 f95f 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2000029c 	.word	0x2000029c
 8002a08:	40005400 	.word	0x40005400
 8002a0c:	00707cbb 	.word	0x00707cbb

08002a10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	240c      	movs	r4, #12
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	2314      	movs	r3, #20
 8002a20:	001a      	movs	r2, r3
 8002a22:	2100      	movs	r1, #0
 8002a24:	f006 fbb4 	bl	8009190 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_I2C_MspInit+0x7c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d128      	bne.n	8002a84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a38:	2102      	movs	r1, #2
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	22c0      	movs	r2, #192	; 0xc0
 8002a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2212      	movs	r2, #18
 8002a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2203      	movs	r2, #3
 8002a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2201      	movs	r2, #1
 8002a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_I2C_MspInit+0x84>)
 8002a6e:	0019      	movs	r1, r3
 8002a70:	0010      	movs	r0, r2
 8002a72:	f001 fa33 	bl	8003edc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_I2C_MspInit+0x80>)
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	0389      	lsls	r1, r1, #14
 8002a80:	430a      	orrs	r2, r1
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b009      	add	sp, #36	; 0x24
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	40005400 	.word	0x40005400
 8002a90:	40021000 	.word	0x40021000
 8002a94:	50000400 	.word	0x50000400

08002a98 <__io_putchar>:
		line_buffer[line_length++] = value;
	}
}

int __io_putchar(int ch) // to pc
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d102      	bne.n	8002aac <__io_putchar+0x14>
    __io_putchar('\r');
 8002aa6:	200d      	movs	r0, #13
 8002aa8:	f7ff fff6 	bl	8002a98 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002aac:	2301      	movs	r3, #1
 8002aae:	425b      	negs	r3, r3
 8002ab0:	1d39      	adds	r1, r7, #4
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <__io_putchar+0x2c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f002 ffb1 	bl	8005a1c <HAL_UART_Transmit>

  return 1;
 8002aba:	2301      	movs	r3, #1
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200006d4 	.word	0x200006d4

08002ac8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_UART_RxCpltCallback+0x38>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_RxCpltCallback+0x1c>
  {
    NEO6_ReceiveUartChar(&GpsState);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_UART_RxCpltCallback+0x38>)
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7ff fd65 	bl	80025ac <NEO6_ReceiveUartChar>
  }
  else if(huart == &hlpuart1)
  {
	  HAL_UART_Receive_IT(&hlpuart1, Mess, sizeof(Mess));
  }
}
 8002ae2:	e009      	b.n	8002af8 <HAL_UART_RxCpltCallback+0x30>
  else if(huart == &hlpuart1)
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <HAL_UART_RxCpltCallback+0x3c>)
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d105      	bne.n	8002af8 <HAL_UART_RxCpltCallback+0x30>
	  HAL_UART_Receive_IT(&hlpuart1, Mess, sizeof(Mess));
 8002aec:	4906      	ldr	r1, [pc, #24]	; (8002b08 <HAL_UART_RxCpltCallback+0x40>)
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_UART_RxCpltCallback+0x3c>)
 8002af0:	2250      	movs	r2, #80	; 0x50
 8002af2:	0018      	movs	r0, r3
 8002af4:	f003 f8a2 	bl	8005c3c <HAL_UART_Receive_IT>
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200002f0 	.word	0x200002f0
 8002b04:	200005c4 	.word	0x200005c4
 8002b08:	200004d8 	.word	0x200004d8

08002b0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d10b      	bne.n	8002b34 <HAL_TIM_PeriodElapsedCallback+0x28>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b1c:	23a0      	movs	r3, #160	; 0xa0
 8002b1e:	05db      	lsls	r3, r3, #23
 8002b20:	2120      	movs	r1, #32
 8002b22:	0018      	movs	r0, r3
 8002b24:	f001 fb6d 	bl	8004202 <HAL_GPIO_TogglePin>
//    AHT20_Read(&Temp, &Hum); // reads AHT20 measurements every second
//    printf("Temperature = ???\n Hum = ???\n");
    HAL_UART_Transmit(&huart2, ".", 1, 100);
 8002b28:	4905      	ldr	r1, [pc, #20]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b2a:	4806      	ldr	r0, [pc, #24]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b2c:	2364      	movs	r3, #100	; 0x64
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f002 ff74 	bl	8005a1c <HAL_UART_Transmit>
  }
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000584 	.word	0x20000584
 8002b40:	0800bcc0 	.word	0x0800bcc0
 8002b44:	200006d4 	.word	0x200006d4

08002b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b4e:	f000 fc71 	bl	8003434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b52:	f000 f833 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b56:	f7ff fe7b 	bl	8002850 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b5a:	f7ff fe5b 	bl	8002814 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b5e:	f7ff ff17 	bl	8002990 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002b62:	f000 fb17 	bl	8003194 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b66:	f000 fb49 	bl	80031fc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002b6a:	f000 f8ad 	bl	8002cc8 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002b6e:	f000 fa81 	bl	8003074 <MX_TIM6_Init>
  MX_ADC_Init();
 8002b72:	f7ff fd81 	bl	8002678 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8002b76:	f000 fadb 	bl	8003130 <MX_LPUART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  AHT20_Init();
//  NEO6_Init(&GpsState, &huart1);
  HAL_TIM_Base_Start_IT(&htim6);
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <main+0x64>)
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f002 fcf9 	bl	8005574 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&hlpuart1, Mess, sizeof(Mess));
 8002b82:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <main+0x68>)
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <main+0x6c>)
 8002b86:	2250      	movs	r2, #80	; 0x50
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f003 f857 	bl	8005c3c <HAL_UART_Receive_IT>
//  nRF24_SetRXAddress(0, "Odb");
//  nRF24_SetTXAddress("Nad");
//  nRF24_RX_Mode();

  uint8_t value;
  uint8_t size = 0;
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  {
//	  printf("Heart Beat =  ???\n");
//	  HAL_Delay(100);\


	  HAL_UART_Transmit_IT(&huart2, Mess, sizeof(Mess));
 8002b94:	4906      	ldr	r1, [pc, #24]	; (8002bb0 <main+0x68>)
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <main+0x70>)
 8002b98:	2250      	movs	r2, #80	; 0x50
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f002 ffde 	bl	8005b5c <HAL_UART_Transmit_IT>
	  HAL_Delay(500);
 8002ba0:	23fa      	movs	r3, #250	; 0xfa
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 fcb5 	bl	8003514 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart2, Mess, sizeof(Mess));
 8002baa:	e7f3      	b.n	8002b94 <main+0x4c>
 8002bac:	20000584 	.word	0x20000584
 8002bb0:	200004d8 	.word	0x200004d8
 8002bb4:	200005c4 	.word	0x200005c4
 8002bb8:	200006d4 	.word	0x200006d4

08002bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b09d      	sub	sp, #116	; 0x74
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	2438      	movs	r4, #56	; 0x38
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	2338      	movs	r3, #56	; 0x38
 8002bca:	001a      	movs	r2, r3
 8002bcc:	2100      	movs	r1, #0
 8002bce:	f006 fadf 	bl	8009190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd2:	2324      	movs	r3, #36	; 0x24
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	2314      	movs	r3, #20
 8002bda:	001a      	movs	r2, r3
 8002bdc:	2100      	movs	r1, #0
 8002bde:	f006 fad7 	bl	8009190 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be2:	003b      	movs	r3, r7
 8002be4:	0018      	movs	r0, r3
 8002be6:	2324      	movs	r3, #36	; 0x24
 8002be8:	001a      	movs	r2, r3
 8002bea:	2100      	movs	r1, #0
 8002bec:	f006 fad0 	bl	8009190 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <SystemClock_Config+0xf8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <SystemClock_Config+0xfc>)
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <SystemClock_Config+0xf8>)
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	0109      	lsls	r1, r1, #4
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2203      	movs	r2, #3
 8002c06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	22a0      	movs	r2, #160	; 0xa0
 8002c0c:	02d2      	lsls	r2, r2, #11
 8002c0e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c10:	0021      	movs	r1, r4
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2201      	movs	r2, #1
 8002c16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	2202      	movs	r2, #2
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	0252      	lsls	r2, r2, #9
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	22c0      	movs	r2, #192	; 0xc0
 8002c30:	0312      	lsls	r2, r2, #12
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	03d2      	lsls	r2, r2, #15
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f001 fc4e 	bl	80044e0 <HAL_RCC_OscConfig>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002c48:	f000 f838 	bl	8002cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4c:	2124      	movs	r1, #36	; 0x24
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	220f      	movs	r2, #15
 8002c52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	2203      	movs	r2, #3
 8002c58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2101      	movs	r1, #1
 8002c70:	0018      	movs	r0, r3
 8002c72:	f001 fff9 	bl	8004c68 <HAL_RCC_ClockConfig>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c7a:	f000 f81f 	bl	8002cbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002c7e:	003b      	movs	r3, r7
 8002c80:	220f      	movs	r2, #15
 8002c82:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c84:	003b      	movs	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c8a:	003b      	movs	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002c90:	003b      	movs	r3, r7
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c96:	003b      	movs	r3, r7
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c9c:	003b      	movs	r3, r7
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f002 fa06 	bl	80050b0 <HAL_RCCEx_PeriphCLKConfig>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d001      	beq.n	8002cac <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002ca8:	f000 f808 	bl	8002cbc <Error_Handler>
  }
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b01d      	add	sp, #116	; 0x74
 8002cb2:	bd90      	pop	{r4, r7, pc}
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	ffffe7ff 	.word	0xffffe7ff

08002cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc0:	b672      	cpsid	i
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <Error_Handler+0x8>
	...

08002cc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002cce:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <MX_SPI1_Init+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002cd4:	2282      	movs	r2, #130	; 0x82
 8002cd6:	0052      	lsls	r2, r2, #1
 8002cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002cfa:	2218      	movs	r2, #24
 8002cfc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002d12:	2207      	movs	r2, #7
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <MX_SPI1_Init+0x64>)
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f002 fb57 	bl	80053cc <HAL_SPI_Init>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8002d22:	f7ff ffcb 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000528 	.word	0x20000528
 8002d30:	40013000 	.word	0x40013000

08002d34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b08b      	sub	sp, #44	; 0x2c
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	2414      	movs	r4, #20
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	0018      	movs	r0, r3
 8002d42:	2314      	movs	r3, #20
 8002d44:	001a      	movs	r2, r3
 8002d46:	2100      	movs	r1, #0
 8002d48:	f006 fa22 	bl	8009190 <memset>
  if(spiHandle->Instance==SPI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <HAL_SPI_MspInit+0xc0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d14a      	bne.n	8002dec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	0149      	lsls	r1, r1, #5
 8002d60:	430a      	orrs	r2, r1
 8002d62:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d82:	2102      	movs	r1, #2
 8002d84:	430a      	orrs	r2, r1
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_SPI_MspInit+0xc4>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	22d0      	movs	r2, #208	; 0xd0
 8002d98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	193b      	adds	r3, r7, r4
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	2203      	movs	r2, #3
 8002daa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	193a      	adds	r2, r7, r4
 8002db4:	23a0      	movs	r3, #160	; 0xa0
 8002db6:	05db      	lsls	r3, r3, #23
 8002db8:	0011      	movs	r1, r2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f001 f88e 	bl	8003edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dc0:	0021      	movs	r1, r4
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2202      	movs	r2, #2
 8002dcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <HAL_SPI_MspInit+0xc8>)
 8002de4:	0019      	movs	r1, r3
 8002de6:	0010      	movs	r0, r2
 8002de8:	f001 f878 	bl	8003edc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b00b      	add	sp, #44	; 0x2c
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	40013000 	.word	0x40013000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	50000400 	.word	0x50000400

08002e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_MspInit+0x24>)
 8002e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_MspInit+0x24>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <HAL_MspInit+0x24>)
 8002e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_MspInit+0x24>)
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	0549      	lsls	r1, r1, #21
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000

08002e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e2c:	e7fe      	b.n	8002e2c <NMI_Handler+0x4>

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e4c:	f000 fb46 	bl	80034dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f001 f9ea 	bl	8004238 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	019b      	lsls	r3, r3, #6
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f001 f9e5 	bl	8004238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <DMA1_Channel1_IRQHandler+0x14>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 ff7f 	bl	8003d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000254 	.word	0x20000254

08002e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <TIM6_DAC_IRQHandler+0x14>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f002 fbba 	bl	800560c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	20000584 	.word	0x20000584

08002ea4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <USART1_IRQHandler+0x14>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f002 ff24 	bl	8005cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	2000064c 	.word	0x2000064c

08002ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <USART2_IRQHandler+0x14>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f002 ff18 	bl	8005cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	200006d4 	.word	0x200006d4

08002ed4 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <RNG_LPUART1_IRQHandler+0x14>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f002 ff0c 	bl	8005cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	200005c4 	.word	0x200005c4

08002eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  return 1;
 8002ef0:	2301      	movs	r3, #1
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_kill>:

int _kill(int pid, int sig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f02:	f006 f9b1 	bl	8009268 <__errno>
 8002f06:	0003      	movs	r3, r0
 8002f08:	2216      	movs	r2, #22
 8002f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	425b      	negs	r3, r3
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_exit>:

void _exit (int status)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f20:	2301      	movs	r3, #1
 8002f22:	425a      	negs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0011      	movs	r1, r2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff ffe5 	bl	8002ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f2e:	e7fe      	b.n	8002f2e <_exit+0x16>

08002f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e00a      	b.n	8002f58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f42:	e000      	b.n	8002f46 <_read+0x16>
 8002f44:	bf00      	nop
 8002f46:	0001      	movs	r1, r0
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	60ba      	str	r2, [r7, #8]
 8002f4e:	b2ca      	uxtb	r2, r1
 8002f50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbf0      	blt.n	8002f42 <_read+0x12>
  }

  return len;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b006      	add	sp, #24
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e009      	b.n	8002f90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	60ba      	str	r2, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff fd87 	bl	8002a98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	dbf1      	blt.n	8002f7c <_write+0x12>
  }
  return len;
 8002f98:	687b      	ldr	r3, [r7, #4]
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b006      	add	sp, #24
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <_close>:

int _close(int file)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	425b      	negs	r3, r3
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	0192      	lsls	r2, r2, #6
 8002fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_isatty>:

int _isatty(int file)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b004      	add	sp, #16
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <_sbrk+0x5c>)
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <_sbrk+0x60>)
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <_sbrk+0x64>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <_sbrk+0x64>)
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <_sbrk+0x68>)
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	429a      	cmp	r2, r3
 800302a:	d207      	bcs.n	800303c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800302c:	f006 f91c 	bl	8009268 <__errno>
 8003030:	0003      	movs	r3, r0
 8003032:	220c      	movs	r2, #12
 8003034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003036:	2301      	movs	r3, #1
 8003038:	425b      	negs	r3, r3
 800303a:	e009      	b.n	8003050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	18d2      	adds	r2, r2, r3
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <_sbrk+0x64>)
 800304c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20002000 	.word	0x20002000
 800305c:	00000400 	.word	0x00000400
 8003060:	20000580 	.word	0x20000580
 8003064:	200008b0 	.word	0x200008b0

08003068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800307a:	003b      	movs	r3, r7
 800307c:	0018      	movs	r0, r3
 800307e:	2308      	movs	r3, #8
 8003080:	001a      	movs	r2, r3
 8003082:	2100      	movs	r1, #0
 8003084:	f006 f884 	bl	8009190 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <MX_TIM6_Init+0x6c>)
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <MX_TIM6_Init+0x70>)
 800308c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <MX_TIM6_Init+0x6c>)
 8003090:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <MX_TIM6_Init+0x74>)
 8003092:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <MX_TIM6_Init+0x6c>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <MX_TIM6_Init+0x6c>)
 800309c:	4a13      	ldr	r2, [pc, #76]	; (80030ec <MX_TIM6_Init+0x78>)
 800309e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <MX_TIM6_Init+0x6c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <MX_TIM6_Init+0x6c>)
 80030a8:	0018      	movs	r0, r3
 80030aa:	f002 fa23 	bl	80054f4 <HAL_TIM_Base_Init>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80030b2:	f7ff fe03 	bl	8002cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b6:	003b      	movs	r3, r7
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030bc:	003b      	movs	r3, r7
 80030be:	2200      	movs	r2, #0
 80030c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030c2:	003a      	movs	r2, r7
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <MX_TIM6_Init+0x6c>)
 80030c6:	0011      	movs	r1, r2
 80030c8:	0018      	movs	r0, r3
 80030ca:	f002 fbfb 	bl	80058c4 <HAL_TIMEx_MasterConfigSynchronization>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80030d2:	f7ff fdf3 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	20000584 	.word	0x20000584
 80030e4:	40001000 	.word	0x40001000
 80030e8:	00000c7f 	.word	0x00000c7f
 80030ec:	0000270f 	.word	0x0000270f

080030f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_TIM_Base_MspInit+0x38>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_TIM_Base_MspInit+0x3c>)
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_TIM_Base_MspInit+0x3c>)
 8003108:	2110      	movs	r1, #16
 800310a:	430a      	orrs	r2, r1
 800310c:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2103      	movs	r1, #3
 8003112:	2011      	movs	r0, #17
 8003114:	f000 fd02 	bl	8003b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003118:	2011      	movs	r0, #17
 800311a:	f000 fd14 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b002      	add	sp, #8
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40001000 	.word	0x40001000
 800312c:	40021000 	.word	0x40021000

08003130 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 8003136:	4a16      	ldr	r2, [pc, #88]	; (8003190 <MX_LPUART1_UART_Init+0x60>)
 8003138:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 800313c:	2296      	movs	r2, #150	; 0x96
 800313e:	0192      	lsls	r2, r2, #6
 8003140:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 8003156:	220c      	movs	r2, #12
 8003158:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 8003162:	2200      	movs	r2, #0
 8003164:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 8003168:	2210      	movs	r2, #16
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	0152      	lsls	r2, r2, #5
 8003172:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <MX_LPUART1_UART_Init+0x5c>)
 8003176:	0018      	movs	r0, r3
 8003178:	f002 fbfc 	bl	8005974 <HAL_UART_Init>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d001      	beq.n	8003184 <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 8003180:	f7ff fd9c 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	200005c4 	.word	0x200005c4
 8003190:	40004800 	.word	0x40004800

08003194 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <MX_USART1_UART_Init+0x64>)
 800319c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031a0:	2296      	movs	r2, #150	; 0x96
 80031a2:	0192      	lsls	r2, r2, #6
 80031a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031ba:	2204      	movs	r2, #4
 80031bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031d2:	2210      	movs	r2, #16
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	0152      	lsls	r2, r2, #5
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <MX_USART1_UART_Init+0x60>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f002 fbc7 	bl	8005974 <HAL_UART_Init>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d001      	beq.n	80031ee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80031ea:	f7ff fd67 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	2000064c 	.word	0x2000064c
 80031f8:	40013800 	.word	0x40013800

080031fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <MX_USART2_UART_Init+0x5c>)
 8003204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003208:	2296      	movs	r2, #150	; 0x96
 800320a:	0192      	lsls	r2, r2, #6
 800320c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <MX_USART2_UART_Init+0x58>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003222:	220c      	movs	r2, #12
 8003224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <MX_USART2_UART_Init+0x58>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <MX_USART2_UART_Init+0x58>)
 800323a:	2200      	movs	r2, #0
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <MX_USART2_UART_Init+0x58>)
 8003240:	0018      	movs	r0, r3
 8003242:	f002 fb97 	bl	8005974 <HAL_UART_Init>
 8003246:	1e03      	subs	r3, r0, #0
 8003248:	d001      	beq.n	800324e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800324a:	f7ff fd37 	bl	8002cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200006d4 	.word	0x200006d4
 8003258:	40004400 	.word	0x40004400

0800325c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b08b      	sub	sp, #44	; 0x2c
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	2414      	movs	r4, #20
 8003266:	193b      	adds	r3, r7, r4
 8003268:	0018      	movs	r0, r3
 800326a:	2314      	movs	r3, #20
 800326c:	001a      	movs	r2, r3
 800326e:	2100      	movs	r1, #0
 8003270:	f005 ff8e 	bl	8009190 <memset>
  if(uartHandle->Instance==LPUART1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a54      	ldr	r2, [pc, #336]	; (80033cc <HAL_UART_MspInit+0x170>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d131      	bne.n	80032e2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003284:	2180      	movs	r1, #128	; 0x80
 8003286:	02c9      	lsls	r1, r1, #11
 8003288:	430a      	orrs	r2, r1
 800328a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800328c:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_UART_MspInit+0x174>)
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003292:	2104      	movs	r1, #4
 8003294:	430a      	orrs	r2, r1
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
 8003298:	4b4d      	ldr	r3, [pc, #308]	; (80033d0 <HAL_UART_MspInit+0x174>)
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	2204      	movs	r2, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032a4:	0021      	movs	r1, r4
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2230      	movs	r2, #48	; 0x30
 80032aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2202      	movs	r2, #2
 80032b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2203      	movs	r2, #3
 80032bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2202      	movs	r2, #2
 80032c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	4a43      	ldr	r2, [pc, #268]	; (80033d4 <HAL_UART_MspInit+0x178>)
 80032c8:	0019      	movs	r1, r3
 80032ca:	0010      	movs	r0, r2
 80032cc:	f000 fe06 	bl	8003edc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	201d      	movs	r0, #29
 80032d6:	f000 fc21 	bl	8003b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 80032da:	201d      	movs	r0, #29
 80032dc:	f000 fc33 	bl	8003b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032e0:	e06f      	b.n	80033c2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_UART_MspInit+0x17c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d133      	bne.n	8003354 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_UART_MspInit+0x174>)
 80032ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f0:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_UART_MspInit+0x174>)
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	01c9      	lsls	r1, r1, #7
 80032f6:	430a      	orrs	r2, r1
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <HAL_UART_MspInit+0x174>)
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003300:	2101      	movs	r1, #1
 8003302:	430a      	orrs	r2, r1
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003312:	2114      	movs	r1, #20
 8003314:	187b      	adds	r3, r7, r1
 8003316:	22c0      	movs	r2, #192	; 0xc0
 8003318:	00d2      	lsls	r2, r2, #3
 800331a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2202      	movs	r2, #2
 8003320:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2203      	movs	r2, #3
 800332c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2204      	movs	r2, #4
 8003332:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	187a      	adds	r2, r7, r1
 8003336:	23a0      	movs	r3, #160	; 0xa0
 8003338:	05db      	lsls	r3, r3, #23
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fdcd 	bl	8003edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	201b      	movs	r0, #27
 8003348:	f000 fbe8 	bl	8003b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800334c:	201b      	movs	r0, #27
 800334e:	f000 fbfa 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8003352:	e036      	b.n	80033c2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_UART_MspInit+0x180>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d131      	bne.n	80033c2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART2_CLK_ENABLE();
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	0289      	lsls	r1, r1, #10
 8003368:	430a      	orrs	r2, r1
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_UART_MspInit+0x174>)
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_UART_MspInit+0x174>)
 8003372:	2101      	movs	r1, #1
 8003374:	430a      	orrs	r2, r1
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_UART_MspInit+0x174>)
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	2201      	movs	r2, #1
 800337e:	4013      	ands	r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003384:	2114      	movs	r1, #20
 8003386:	187b      	adds	r3, r7, r1
 8003388:	220c      	movs	r2, #12
 800338a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338c:	187b      	adds	r3, r7, r1
 800338e:	2202      	movs	r2, #2
 8003390:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	187b      	adds	r3, r7, r1
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	2203      	movs	r2, #3
 800339c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	2204      	movs	r2, #4
 80033a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a4:	187a      	adds	r2, r7, r1
 80033a6:	23a0      	movs	r3, #160	; 0xa0
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	0011      	movs	r1, r2
 80033ac:	0018      	movs	r0, r3
 80033ae:	f000 fd95 	bl	8003edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	201c      	movs	r0, #28
 80033b8:	f000 fbb0 	bl	8003b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033bc:	201c      	movs	r0, #28
 80033be:	f000 fbc2 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b00b      	add	sp, #44	; 0x2c
 80033c8:	bd90      	pop	{r4, r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	40004800 	.word	0x40004800
 80033d0:	40021000 	.word	0x40021000
 80033d4:	50000800 	.word	0x50000800
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40004400 	.word	0x40004400

080033e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033e4:	f7ff fe40 	bl	8003068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033e8:	480c      	ldr	r0, [pc, #48]	; (800341c <LoopForever+0x6>)
  ldr r1, =_edata
 80033ea:	490d      	ldr	r1, [pc, #52]	; (8003420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033ec:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <LoopForever+0xe>)
  movs r3, #0
 80033ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f0:	e002      	b.n	80033f8 <LoopCopyDataInit>

080033f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033f6:	3304      	adds	r3, #4

080033f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033fc:	d3f9      	bcc.n	80033f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003400:	4c0a      	ldr	r4, [pc, #40]	; (800342c <LoopForever+0x16>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003404:	e001      	b.n	800340a <LoopFillZerobss>

08003406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003408:	3204      	adds	r2, #4

0800340a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800340a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800340c:	d3fb      	bcc.n	8003406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800340e:	f005 ff31 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003412:	f7ff fb99 	bl	8002b48 <main>

08003416 <LoopForever>:

LoopForever:
    b LoopForever
 8003416:	e7fe      	b.n	8003416 <LoopForever>
  ldr   r0, =_estack
 8003418:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800341c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003420:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003424:	0800c1ac 	.word	0x0800c1ac
  ldr r2, =_sbss
 8003428:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800342c:	200008ac 	.word	0x200008ac

08003430 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003430:	e7fe      	b.n	8003430 <ADC1_COMP_IRQHandler>
	...

08003434 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800343a:	1dfb      	adds	r3, r7, #7
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_Init+0x3c>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_Init+0x3c>)
 8003446:	2140      	movs	r1, #64	; 0x40
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800344c:	2000      	movs	r0, #0
 800344e:	f000 f811 	bl	8003474 <HAL_InitTick>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d003      	beq.n	800345e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e001      	b.n	8003462 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800345e:	f7ff fccf 	bl	8002e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	781b      	ldrb	r3, [r3, #0]
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	40022000 	.word	0x40022000

08003474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_InitTick+0x5c>)
 800347e:	681c      	ldr	r4, [r3, #0]
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_InitTick+0x60>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	0019      	movs	r1, r3
 8003486:	23fa      	movs	r3, #250	; 0xfa
 8003488:	0098      	lsls	r0, r3, #2
 800348a:	f7fc fe59 	bl	8000140 <__udivsi3>
 800348e:	0003      	movs	r3, r0
 8003490:	0019      	movs	r1, r3
 8003492:	0020      	movs	r0, r4
 8003494:	f7fc fe54 	bl	8000140 <__udivsi3>
 8003498:	0003      	movs	r3, r0
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fb63 	bl	8003b66 <HAL_SYSTICK_Config>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e00f      	b.n	80034c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d80b      	bhi.n	80034c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	2301      	movs	r3, #1
 80034b2:	425b      	negs	r3, r3
 80034b4:	2200      	movs	r2, #0
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 fb30 	bl	8003b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_InitTick+0x64>)
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b003      	add	sp, #12
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000008 	.word	0x20000008
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_IncTick+0x1c>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	001a      	movs	r2, r3
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_IncTick+0x20>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	18d2      	adds	r2, r2, r3
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <HAL_IncTick+0x20>)
 80034ee:	601a      	str	r2, [r3, #0]
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000008 	.word	0x20000008
 80034fc:	2000075c 	.word	0x2000075c

08003500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  return uwTick;
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <HAL_GetTick+0x10>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	2000075c 	.word	0x2000075c

08003514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800351c:	f7ff fff0 	bl	8003500 <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3301      	adds	r3, #1
 800352c:	d005      	beq.n	800353a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_Delay+0x44>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	001a      	movs	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	189b      	adds	r3, r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	f7ff ffe0 	bl	8003500 <HAL_GetTick>
 8003540:	0002      	movs	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d8f7      	bhi.n	800353c <HAL_Delay+0x28>
  {
  }
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	20000008 	.word	0x20000008

0800355c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e159      	b.n	8003822 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2250      	movs	r2, #80	; 0x50
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff f8d8 	bl	800273c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	2210      	movs	r2, #16
 8003592:	4013      	ands	r3, r2
 8003594:	2b10      	cmp	r3, #16
 8003596:	d005      	beq.n	80035a4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2204      	movs	r2, #4
 80035a0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80035a2:	d00b      	beq.n	80035bc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2210      	movs	r2, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2250      	movs	r2, #80	; 0x50
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e132      	b.n	8003822 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	4a9a      	ldr	r2, [pc, #616]	; (800382c <HAL_ADC_Init+0x2d0>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	2202      	movs	r2, #2
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2203      	movs	r2, #3
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d108      	bne.n	80035ec <HAL_ADC_Init+0x90>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_Init+0x90>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_ADC_Init+0x92>
 80035ec:	2300      	movs	r3, #0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d149      	bne.n	8003686 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	23c0      	movs	r3, #192	; 0xc0
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d00b      	beq.n	8003616 <HAL_ADC_Init+0xba>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	429a      	cmp	r2, r3
 8003608:	d005      	beq.n	8003616 <HAL_ADC_Init+0xba>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	429a      	cmp	r2, r3
 8003614:	d111      	bne.n	800363a <HAL_ADC_Init+0xde>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0092      	lsls	r2, r2, #2
 8003622:	0892      	lsrs	r2, r2, #2
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6919      	ldr	r1, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	611a      	str	r2, [r3, #16]
 8003638:	e014      	b.n	8003664 <HAL_ADC_Init+0x108>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0092      	lsls	r2, r2, #2
 8003646:	0892      	lsrs	r2, r2, #2
 8003648:	611a      	str	r2, [r3, #16]
 800364a:	4b79      	ldr	r3, [pc, #484]	; (8003830 <HAL_ADC_Init+0x2d4>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b78      	ldr	r3, [pc, #480]	; (8003830 <HAL_ADC_Init+0x2d4>)
 8003650:	4978      	ldr	r1, [pc, #480]	; (8003834 <HAL_ADC_Init+0x2d8>)
 8003652:	400a      	ands	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	4b76      	ldr	r3, [pc, #472]	; (8003830 <HAL_ADC_Init+0x2d4>)
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4b74      	ldr	r3, [pc, #464]	; (8003830 <HAL_ADC_Init+0x2d4>)
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2118      	movs	r1, #24
 8003670:	438a      	bics	r2, r1
 8003672:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68d9      	ldr	r1, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003686:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_ADC_Init+0x2d4>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b69      	ldr	r3, [pc, #420]	; (8003830 <HAL_ADC_Init+0x2d4>)
 800368c:	496a      	ldr	r1, [pc, #424]	; (8003838 <HAL_ADC_Init+0x2dc>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003692:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_ADC_Init+0x2d4>)
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	065a      	lsls	r2, r3, #25
 800369c:	4b64      	ldr	r3, [pc, #400]	; (8003830 <HAL_ADC_Init+0x2d4>)
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	055b      	lsls	r3, r3, #21
 80036ac:	4013      	ands	r3, r2
 80036ae:	d108      	bne.n	80036c2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	0549      	lsls	r1, r1, #21
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	495b      	ldr	r1, [pc, #364]	; (800383c <HAL_ADC_Init+0x2e0>)
 80036ce:	400a      	ands	r2, r1
 80036d0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68d9      	ldr	r1, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_Init+0x18c>
 80036e4:	2304      	movs	r3, #4
 80036e6:	e000      	b.n	80036ea <HAL_ADC_Init+0x18e>
 80036e8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036ea:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2020      	movs	r0, #32
 80036f0:	5c1b      	ldrb	r3, [r3, r0]
 80036f2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80036f4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	202c      	movs	r0, #44	; 0x2c
 80036fa:	5c1b      	ldrb	r3, [r3, r0]
 80036fc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036fe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003704:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800370c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003714:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003722:	23c2      	movs	r3, #194	; 0xc2
 8003724:	33ff      	adds	r3, #255	; 0xff
 8003726:	429a      	cmp	r2, r3
 8003728:	d00b      	beq.n	8003742 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68d9      	ldr	r1, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2221      	movs	r2, #33	; 0x21
 8003746:	5c9b      	ldrb	r3, [r3, r2]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11a      	bne.n	8003782 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	5c9b      	ldrb	r3, [r3, r2]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0249      	lsls	r1, r1, #9
 8003764:	430a      	orrs	r2, r1
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	e00b      	b.n	8003782 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	2220      	movs	r2, #32
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	2201      	movs	r2, #1
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d11f      	bne.n	80037ca <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	492a      	ldr	r1, [pc, #168]	; (8003840 <HAL_ADC_Init+0x2e4>)
 8003796:	400a      	ands	r2, r1
 8003798:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6919      	ldr	r1, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80037a8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80037ae:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2101      	movs	r1, #1
 80037c4:	430a      	orrs	r2, r1
 80037c6:	611a      	str	r2, [r3, #16]
 80037c8:	e00e      	b.n	80037e8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2201      	movs	r2, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	438a      	bics	r2, r1
 80037e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2107      	movs	r1, #7
 80037f4:	438a      	bics	r2, r1
 80037f6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6959      	ldr	r1, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	2203      	movs	r2, #3
 8003816:	4393      	bics	r3, r2
 8003818:	2201      	movs	r2, #1
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b002      	add	sp, #8
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	fffffefd 	.word	0xfffffefd
 8003830:	40012708 	.word	0x40012708
 8003834:	ffc3ffff 	.word	0xffc3ffff
 8003838:	fdffffff 	.word	0xfdffffff
 800383c:	fffe0219 	.word	0xfffe0219
 8003840:	fffffc03 	.word	0xfffffc03

08003844 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2250      	movs	r2, #80	; 0x50
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_ADC_ConfigChannel+0x18>
 8003858:	2302      	movs	r3, #2
 800385a:	e085      	b.n	8003968 <HAL_ADC_ConfigChannel+0x124>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2250      	movs	r2, #80	; 0x50
 8003860:	2101      	movs	r1, #1
 8003862:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2204      	movs	r2, #4
 800386c:	4013      	ands	r3, r2
 800386e:	d00b      	beq.n	8003888 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	2220      	movs	r2, #32
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2250      	movs	r2, #80	; 0x50
 8003880:	2100      	movs	r1, #0
 8003882:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e06f      	b.n	8003968 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4a38      	ldr	r2, [pc, #224]	; (8003970 <HAL_ADC_ConfigChannel+0x12c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d035      	beq.n	80038fe <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	035b      	lsls	r3, r3, #13
 800389e:	0b5a      	lsrs	r2, r3, #13
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	02db      	lsls	r3, r3, #11
 80038b0:	4013      	ands	r3, r2
 80038b2:	d009      	beq.n	80038c8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80038b4:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	0409      	lsls	r1, r1, #16
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80038c2:	200a      	movs	r0, #10
 80038c4:	f000 f85e 	bl	8003984 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	029b      	lsls	r3, r3, #10
 80038d0:	4013      	ands	r3, r2
 80038d2:	d006      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b26      	ldr	r3, [pc, #152]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	03c9      	lsls	r1, r1, #15
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	025b      	lsls	r3, r3, #9
 80038ea:	4013      	ands	r3, r2
 80038ec:	d037      	beq.n	800395e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	0449      	lsls	r1, r1, #17
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e02f      	b.n	800395e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	035b      	lsls	r3, r3, #13
 800390a:	0b5b      	lsrs	r3, r3, #13
 800390c:	43d9      	mvns	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	400a      	ands	r2, r1
 8003914:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	02db      	lsls	r3, r3, #11
 800391e:	4013      	ands	r3, r2
 8003920:	d005      	beq.n	800392e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 8003928:	4913      	ldr	r1, [pc, #76]	; (8003978 <HAL_ADC_ConfigChannel+0x134>)
 800392a:	400a      	ands	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	029b      	lsls	r3, r3, #10
 8003936:	4013      	ands	r3, r2
 8003938:	d005      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <HAL_ADC_ConfigChannel+0x138>)
 8003942:	400a      	ands	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	025b      	lsls	r3, r3, #9
 800394e:	4013      	ands	r3, r2
 8003950:	d005      	beq.n	800395e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8003952:	4b08      	ldr	r3, [pc, #32]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <HAL_ADC_ConfigChannel+0x130>)
 8003958:	4909      	ldr	r1, [pc, #36]	; (8003980 <HAL_ADC_ConfigChannel+0x13c>)
 800395a:	400a      	ands	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2250      	movs	r2, #80	; 0x50
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	00001001 	.word	0x00001001
 8003974:	40012708 	.word	0x40012708
 8003978:	ff7fffff 	.word	0xff7fffff
 800397c:	ffbfffff 	.word	0xffbfffff
 8003980:	feffffff 	.word	0xfeffffff

08003984 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <ADC_DelayMicroSecond+0x38>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	490b      	ldr	r1, [pc, #44]	; (80039c0 <ADC_DelayMicroSecond+0x3c>)
 8003992:	0018      	movs	r0, r3
 8003994:	f7fc fbd4 	bl	8000140 <__udivsi3>
 8003998:	0003      	movs	r3, r0
 800399a:	001a      	movs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4353      	muls	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80039a2:	e002      	b.n	80039aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f9      	bne.n	80039a4 <ADC_DelayMicroSecond+0x20>
  }
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000000 	.word	0x20000000
 80039c0:	000f4240 	.word	0x000f4240

080039c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	0002      	movs	r2, r0
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b7f      	cmp	r3, #127	; 0x7f
 80039d6:	d809      	bhi.n	80039ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	001a      	movs	r2, r3
 80039de:	231f      	movs	r3, #31
 80039e0:	401a      	ands	r2, r3
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <__NVIC_EnableIRQ+0x30>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	4091      	lsls	r1, r2
 80039e8:	000a      	movs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
  }
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b002      	add	sp, #8
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0002      	movs	r2, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a0c:	d828      	bhi.n	8003a60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a0e:	4a2f      	ldr	r2, [pc, #188]	; (8003acc <__NVIC_SetPriority+0xd4>)
 8003a10:	1dfb      	adds	r3, r7, #7
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	33c0      	adds	r3, #192	; 0xc0
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	589b      	ldr	r3, [r3, r2]
 8003a1e:	1dfa      	adds	r2, r7, #7
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	0011      	movs	r1, r2
 8003a24:	2203      	movs	r2, #3
 8003a26:	400a      	ands	r2, r1
 8003a28:	00d2      	lsls	r2, r2, #3
 8003a2a:	21ff      	movs	r1, #255	; 0xff
 8003a2c:	4091      	lsls	r1, r2
 8003a2e:	000a      	movs	r2, r1
 8003a30:	43d2      	mvns	r2, r2
 8003a32:	401a      	ands	r2, r3
 8003a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	1dfb      	adds	r3, r7, #7
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	0018      	movs	r0, r3
 8003a44:	2303      	movs	r3, #3
 8003a46:	4003      	ands	r3, r0
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a4c:	481f      	ldr	r0, [pc, #124]	; (8003acc <__NVIC_SetPriority+0xd4>)
 8003a4e:	1dfb      	adds	r3, r7, #7
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b25b      	sxtb	r3, r3
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	430a      	orrs	r2, r1
 8003a58:	33c0      	adds	r3, #192	; 0xc0
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a5e:	e031      	b.n	8003ac4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <__NVIC_SetPriority+0xd8>)
 8003a62:	1dfb      	adds	r3, r7, #7
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	0019      	movs	r1, r3
 8003a68:	230f      	movs	r3, #15
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	3b08      	subs	r3, #8
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3306      	adds	r3, #6
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	18d3      	adds	r3, r2, r3
 8003a76:	3304      	adds	r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	1dfa      	adds	r2, r7, #7
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	2203      	movs	r2, #3
 8003a82:	400a      	ands	r2, r1
 8003a84:	00d2      	lsls	r2, r2, #3
 8003a86:	21ff      	movs	r1, #255	; 0xff
 8003a88:	4091      	lsls	r1, r2
 8003a8a:	000a      	movs	r2, r1
 8003a8c:	43d2      	mvns	r2, r2
 8003a8e:	401a      	ands	r2, r3
 8003a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	019b      	lsls	r3, r3, #6
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	401a      	ands	r2, r3
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	4003      	ands	r3, r0
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aa8:	4809      	ldr	r0, [pc, #36]	; (8003ad0 <__NVIC_SetPriority+0xd8>)
 8003aaa:	1dfb      	adds	r3, r7, #7
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	001c      	movs	r4, r3
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	4023      	ands	r3, r4
 8003ab4:	3b08      	subs	r3, #8
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	3306      	adds	r3, #6
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	18c3      	adds	r3, r0, r3
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b003      	add	sp, #12
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	e000e100 	.word	0xe000e100
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1e5a      	subs	r2, r3, #1
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	045b      	lsls	r3, r3, #17
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d301      	bcc.n	8003aec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e010      	b.n	8003b0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <SysTick_Config+0x44>)
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	3a01      	subs	r2, #1
 8003af2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af4:	2301      	movs	r3, #1
 8003af6:	425b      	negs	r3, r3
 8003af8:	2103      	movs	r1, #3
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff ff7c 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <SysTick_Config+0x44>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b06:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <SysTick_Config+0x44>)
 8003b08:	2207      	movs	r2, #7
 8003b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b002      	add	sp, #8
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	e000e010 	.word	0xe000e010

08003b1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	210f      	movs	r1, #15
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	1c02      	adds	r2, r0, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	0011      	movs	r1, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b52:	1dfb      	adds	r3, r7, #7
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff ff33 	bl	80039c4 <__NVIC_EnableIRQ>
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7ff ffaf 	bl	8003ad4 <SysTick_Config>
 8003b76:	0003      	movs	r3, r0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e061      	b.n	8003c56 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a32      	ldr	r2, [pc, #200]	; (8003c60 <HAL_DMA_Init+0xe0>)
 8003b98:	4694      	mov	ip, r2
 8003b9a:	4463      	add	r3, ip
 8003b9c:	2114      	movs	r1, #20
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fc face 	bl	8000140 <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	009a      	lsls	r2, r3, #2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <HAL_DMA_Init+0xe4>)
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2225      	movs	r2, #37	; 0x25
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <HAL_DMA_Init+0xe8>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	01db      	lsls	r3, r3, #7
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d018      	beq.n	8003c3e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_DMA_Init+0xec>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	211c      	movs	r1, #28
 8003c16:	400b      	ands	r3, r1
 8003c18:	210f      	movs	r1, #15
 8003c1a:	4099      	lsls	r1, r3
 8003c1c:	000b      	movs	r3, r1
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_DMA_Init+0xec>)
 8003c22:	400a      	ands	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_DMA_Init+0xec>)
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	201c      	movs	r0, #28
 8003c34:	4003      	ands	r3, r0
 8003c36:	409a      	lsls	r2, r3
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_DMA_Init+0xec>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2225      	movs	r2, #37	; 0x25
 8003c48:	2101      	movs	r1, #1
 8003c4a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	2100      	movs	r1, #0
 8003c52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	bffdfff8 	.word	0xbffdfff8
 8003c64:	40020000 	.word	0x40020000
 8003c68:	ffff800f 	.word	0xffff800f
 8003c6c:	400200a8 	.word	0x400200a8

08003c70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2225      	movs	r2, #37	; 0x25
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d008      	beq.n	8003c9e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2224      	movs	r2, #36	; 0x24
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e024      	b.n	8003ce8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	210e      	movs	r1, #14
 8003caa:	438a      	bics	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	438a      	bics	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	221c      	movs	r2, #28
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4091      	lsls	r1, r2
 8003cce:	000a      	movs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2225      	movs	r2, #37	; 0x25
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2224      	movs	r2, #36	; 0x24
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5499      	strb	r1, [r3, r2]

    return status;
 8003ce2:	230f      	movs	r3, #15
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b004      	add	sp, #16
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	210f      	movs	r1, #15
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2225      	movs	r2, #37	; 0x25
 8003d04:	5c9b      	ldrb	r3, [r3, r2]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d006      	beq.n	8003d1a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e02a      	b.n	8003d70 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	210e      	movs	r1, #14
 8003d26:	438a      	bics	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2101      	movs	r1, #1
 8003d36:	438a      	bics	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	221c      	movs	r2, #28
 8003d40:	401a      	ands	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2101      	movs	r1, #1
 8003d48:	4091      	lsls	r1, r2
 8003d4a:	000a      	movs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2225      	movs	r2, #37	; 0x25
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2224      	movs	r2, #36	; 0x24
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	0010      	movs	r0, r2
 8003d6e:	4798      	blx	r3
    }
  }
  return status;
 8003d70:	230f      	movs	r3, #15
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	781b      	ldrb	r3, [r3, #0]
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	221c      	movs	r2, #28
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2204      	movs	r2, #4
 8003da0:	409a      	lsls	r2, r3
 8003da2:	0013      	movs	r3, r2
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	d026      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x7a>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2204      	movs	r2, #4
 8003dae:	4013      	ands	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2220      	movs	r2, #32
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d107      	bne.n	8003dce <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2104      	movs	r1, #4
 8003dca:	438a      	bics	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	221c      	movs	r2, #28
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2104      	movs	r1, #4
 8003ddc:	4091      	lsls	r1, r2
 8003dde:	000a      	movs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d100      	bne.n	8003dec <HAL_DMA_IRQHandler+0x6e>
 8003dea:	e071      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	0010      	movs	r0, r2
 8003df4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003df6:	e06b      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	221c      	movs	r2, #28
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2202      	movs	r2, #2
 8003e02:	409a      	lsls	r2, r3
 8003e04:	0013      	movs	r3, r2
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d02d      	beq.n	8003e68 <HAL_DMA_IRQHandler+0xea>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d029      	beq.n	8003e68 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d10b      	bne.n	8003e38 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	210a      	movs	r1, #10
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2225      	movs	r2, #37	; 0x25
 8003e34:	2101      	movs	r1, #1
 8003e36:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	221c      	movs	r2, #28
 8003e3e:	401a      	ands	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2102      	movs	r1, #2
 8003e46:	4091      	lsls	r1, r2
 8003e48:	000a      	movs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d039      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	0010      	movs	r0, r2
 8003e64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e66:	e033      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	221c      	movs	r2, #28
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2208      	movs	r2, #8
 8003e72:	409a      	lsls	r2, r3
 8003e74:	0013      	movs	r3, r2
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d02a      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x154>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2208      	movs	r2, #8
 8003e80:	4013      	ands	r3, r2
 8003e82:	d026      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	210e      	movs	r1, #14
 8003e90:	438a      	bics	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	221c      	movs	r2, #28
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4091      	lsls	r1, r2
 8003ea4:	000a      	movs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2225      	movs	r2, #37	; 0x25
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2224      	movs	r2, #36	; 0x24
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	0010      	movs	r0, r2
 8003ece:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46c0      	nop			; (mov r8, r8)
}
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b004      	add	sp, #16
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ef2:	e14f      	b.n	8004194 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4091      	lsls	r1, r2
 8003efe:	000a      	movs	r2, r1
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d100      	bne.n	8003f0c <HAL_GPIO_Init+0x30>
 8003f0a:	e140      	b.n	800418e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2203      	movs	r2, #3
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d005      	beq.n	8003f24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d130      	bne.n	8003f86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2203      	movs	r2, #3
 8003f30:	409a      	lsls	r2, r3
 8003f32:	0013      	movs	r3, r2
 8003f34:	43da      	mvns	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	409a      	lsls	r2, r3
 8003f46:	0013      	movs	r3, r2
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	0013      	movs	r3, r2
 8003f62:	43da      	mvns	r2, r3
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	2201      	movs	r2, #1
 8003f72:	401a      	ands	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	409a      	lsls	r2, r3
 8003f78:	0013      	movs	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d017      	beq.n	8003fc2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d123      	bne.n	8004016 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	0092      	lsls	r2, r2, #2
 8003fd8:	58d3      	ldr	r3, [r2, r3]
 8003fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2207      	movs	r2, #7
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	0013      	movs	r3, r2
 8003fea:	43da      	mvns	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2107      	movs	r1, #7
 8003ffa:	400b      	ands	r3, r1
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	409a      	lsls	r2, r3
 8004000:	0013      	movs	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	08da      	lsrs	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3208      	adds	r2, #8
 8004010:	0092      	lsls	r2, r2, #2
 8004012:	6939      	ldr	r1, [r7, #16]
 8004014:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	409a      	lsls	r2, r3
 8004024:	0013      	movs	r3, r2
 8004026:	43da      	mvns	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	401a      	ands	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	0013      	movs	r3, r2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	23c0      	movs	r3, #192	; 0xc0
 8004050:	029b      	lsls	r3, r3, #10
 8004052:	4013      	ands	r3, r2
 8004054:	d100      	bne.n	8004058 <HAL_GPIO_Init+0x17c>
 8004056:	e09a      	b.n	800418e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004058:	4b54      	ldr	r3, [pc, #336]	; (80041ac <HAL_GPIO_Init+0x2d0>)
 800405a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_GPIO_Init+0x2d0>)
 800405e:	2101      	movs	r1, #1
 8004060:	430a      	orrs	r2, r1
 8004062:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_GPIO_Init+0x2d4>)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	089b      	lsrs	r3, r3, #2
 800406a:	3302      	adds	r3, #2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	589b      	ldr	r3, [r3, r2]
 8004070:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2203      	movs	r2, #3
 8004076:	4013      	ands	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	409a      	lsls	r2, r3
 800407e:	0013      	movs	r3, r2
 8004080:	43da      	mvns	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	23a0      	movs	r3, #160	; 0xa0
 800408c:	05db      	lsls	r3, r3, #23
 800408e:	429a      	cmp	r2, r3
 8004090:	d019      	beq.n	80040c6 <HAL_GPIO_Init+0x1ea>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a47      	ldr	r2, [pc, #284]	; (80041b4 <HAL_GPIO_Init+0x2d8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_GPIO_Init+0x1e6>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a46      	ldr	r2, [pc, #280]	; (80041b8 <HAL_GPIO_Init+0x2dc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00d      	beq.n	80040be <HAL_GPIO_Init+0x1e2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a45      	ldr	r2, [pc, #276]	; (80041bc <HAL_GPIO_Init+0x2e0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <HAL_GPIO_Init+0x1de>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a44      	ldr	r2, [pc, #272]	; (80041c0 <HAL_GPIO_Init+0x2e4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_GPIO_Init+0x1da>
 80040b2:	2305      	movs	r3, #5
 80040b4:	e008      	b.n	80040c8 <HAL_GPIO_Init+0x1ec>
 80040b6:	2306      	movs	r3, #6
 80040b8:	e006      	b.n	80040c8 <HAL_GPIO_Init+0x1ec>
 80040ba:	2303      	movs	r3, #3
 80040bc:	e004      	b.n	80040c8 <HAL_GPIO_Init+0x1ec>
 80040be:	2302      	movs	r3, #2
 80040c0:	e002      	b.n	80040c8 <HAL_GPIO_Init+0x1ec>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_GPIO_Init+0x1ec>
 80040c6:	2300      	movs	r3, #0
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	2103      	movs	r1, #3
 80040cc:	400a      	ands	r2, r1
 80040ce:	0092      	lsls	r2, r2, #2
 80040d0:	4093      	lsls	r3, r2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d8:	4935      	ldr	r1, [pc, #212]	; (80041b0 <HAL_GPIO_Init+0x2d4>)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	3302      	adds	r3, #2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	43da      	mvns	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	035b      	lsls	r3, r3, #13
 80040fe:	4013      	ands	r3, r2
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800410a:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004110:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	43da      	mvns	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4013      	ands	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	039b      	lsls	r3, r3, #14
 8004128:	4013      	ands	r3, r2
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	43da      	mvns	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	4013      	ands	r3, r2
 8004154:	d003      	beq.n	800415e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800415e:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004164:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	43da      	mvns	r2, r3
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	025b      	lsls	r3, r3, #9
 800417c:	4013      	ands	r3, r2
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_GPIO_Init+0x2e8>)
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	40da      	lsrs	r2, r3
 800419c:	1e13      	subs	r3, r2, #0
 800419e:	d000      	beq.n	80041a2 <HAL_GPIO_Init+0x2c6>
 80041a0:	e6a8      	b.n	8003ef4 <HAL_GPIO_Init+0x18>
  }
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b006      	add	sp, #24
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40010000 	.word	0x40010000
 80041b4:	50000400 	.word	0x50000400
 80041b8:	50000800 	.word	0x50000800
 80041bc:	50000c00 	.word	0x50000c00
 80041c0:	50001c00 	.word	0x50001c00
 80041c4:	40010400 	.word	0x40010400

080041c8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	0008      	movs	r0, r1
 80041d2:	0011      	movs	r1, r2
 80041d4:	1cbb      	adds	r3, r7, #2
 80041d6:	1c02      	adds	r2, r0, #0
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	1c7b      	adds	r3, r7, #1
 80041dc:	1c0a      	adds	r2, r1, #0
 80041de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041e0:	1c7b      	adds	r3, r7, #1
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e8:	1cbb      	adds	r3, r7, #2
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80041f0:	e003      	b.n	80041fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80041f2:	1cbb      	adds	r3, r7, #2
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b002      	add	sp, #8
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	000a      	movs	r2, r1
 800420c:	1cbb      	adds	r3, r7, #2
 800420e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004216:	1cbb      	adds	r3, r7, #2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4013      	ands	r3, r2
 800421e:	041a      	lsls	r2, r3, #16
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43db      	mvns	r3, r3
 8004224:	1cb9      	adds	r1, r7, #2
 8004226:	8809      	ldrh	r1, [r1, #0]
 8004228:	400b      	ands	r3, r1
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b004      	add	sp, #16
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	0002      	movs	r2, r0
 8004240:	1dbb      	adds	r3, r7, #6
 8004242:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	1dba      	adds	r2, r7, #6
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	4013      	ands	r3, r2
 800424e:	d008      	beq.n	8004262 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004252:	1dba      	adds	r2, r7, #6
 8004254:	8812      	ldrh	r2, [r2, #0]
 8004256:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004258:	1dbb      	adds	r3, r7, #6
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	0018      	movs	r0, r3
 800425e:	f000 f807 	bl	8004270 <HAL_GPIO_EXTI_Callback>
  }
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b002      	add	sp, #8
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	40010400 	.word	0x40010400

08004270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	0002      	movs	r2, r0
 8004278:	1dbb      	adds	r3, r7, #6
 800427a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b002      	add	sp, #8
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e082      	b.n	800439c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2241      	movs	r2, #65	; 0x41
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2240      	movs	r2, #64	; 0x40
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7fe fbaf 	bl	8002a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2241      	movs	r2, #65	; 0x41
 80042b6:	2124      	movs	r1, #36	; 0x24
 80042b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2101      	movs	r1, #1
 80042c6:	438a      	bics	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4934      	ldr	r1, [pc, #208]	; (80043a4 <HAL_I2C_Init+0x120>)
 80042d4:	400a      	ands	r2, r1
 80042d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4931      	ldr	r1, [pc, #196]	; (80043a8 <HAL_I2C_Init+0x124>)
 80042e4:	400a      	ands	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d108      	bne.n	8004302 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	0209      	lsls	r1, r1, #8
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	e007      	b.n	8004312 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2184      	movs	r1, #132	; 0x84
 800430c:	0209      	lsls	r1, r1, #8
 800430e:	430a      	orrs	r2, r1
 8004310:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d104      	bne.n	8004324 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	491f      	ldr	r1, [pc, #124]	; (80043ac <HAL_I2C_Init+0x128>)
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	491a      	ldr	r1, [pc, #104]	; (80043a8 <HAL_I2C_Init+0x124>)
 8004340:	400a      	ands	r2, r1
 8004342:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	431a      	orrs	r2, r3
 800434e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69d9      	ldr	r1, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2241      	movs	r2, #65	; 0x41
 8004388:	2120      	movs	r1, #32
 800438a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2242      	movs	r2, #66	; 0x42
 8004396:	2100      	movs	r1, #0
 8004398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b002      	add	sp, #8
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	f0ffffff 	.word	0xf0ffffff
 80043a8:	ffff7fff 	.word	0xffff7fff
 80043ac:	02008000 	.word	0x02008000

080043b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2241      	movs	r2, #65	; 0x41
 80043be:	5c9b      	ldrb	r3, [r3, r2]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d138      	bne.n	8004438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2240      	movs	r2, #64	; 0x40
 80043ca:	5c9b      	ldrb	r3, [r3, r2]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e032      	b.n	800443a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2240      	movs	r2, #64	; 0x40
 80043d8:	2101      	movs	r1, #1
 80043da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2241      	movs	r2, #65	; 0x41
 80043e0:	2124      	movs	r1, #36	; 0x24
 80043e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	438a      	bics	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4911      	ldr	r1, [pc, #68]	; (8004444 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004400:	400a      	ands	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2101      	movs	r1, #1
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2241      	movs	r2, #65	; 0x41
 8004428:	2120      	movs	r1, #32
 800442a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b002      	add	sp, #8
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	ffffefff 	.word	0xffffefff

08004448 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2241      	movs	r2, #65	; 0x41
 8004456:	5c9b      	ldrb	r3, [r3, r2]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b20      	cmp	r3, #32
 800445c:	d139      	bne.n	80044d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2240      	movs	r2, #64	; 0x40
 8004462:	5c9b      	ldrb	r3, [r3, r2]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004468:	2302      	movs	r3, #2
 800446a:	e033      	b.n	80044d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	2101      	movs	r1, #1
 8004472:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2241      	movs	r2, #65	; 0x41
 8004478:	2124      	movs	r1, #36	; 0x24
 800447a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2101      	movs	r1, #1
 8004488:	438a      	bics	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	430a      	orrs	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2241      	movs	r2, #65	; 0x41
 80044c2:	2120      	movs	r1, #32
 80044c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2240      	movs	r2, #64	; 0x40
 80044ca:	2100      	movs	r1, #0
 80044cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
  }
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b004      	add	sp, #16
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	fffff0ff 	.word	0xfffff0ff

080044e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f000 fbaf 	bl	8004c52 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f4:	4bcf      	ldr	r3, [pc, #828]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	220c      	movs	r2, #12
 80044fa:	4013      	ands	r3, r2
 80044fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044fe:	4bcd      	ldr	r3, [pc, #820]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	025b      	lsls	r3, r3, #9
 8004506:	4013      	ands	r3, r2
 8004508:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2201      	movs	r2, #1
 8004510:	4013      	ands	r3, r2
 8004512:	d100      	bne.n	8004516 <HAL_RCC_OscConfig+0x36>
 8004514:	e07e      	b.n	8004614 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2b08      	cmp	r3, #8
 800451a:	d007      	beq.n	800452c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d112      	bne.n	8004548 <HAL_RCC_OscConfig+0x68>
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	025b      	lsls	r3, r3, #9
 8004528:	429a      	cmp	r2, r3
 800452a:	d10d      	bne.n	8004548 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	4bc1      	ldr	r3, [pc, #772]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	029b      	lsls	r3, r3, #10
 8004534:	4013      	ands	r3, r2
 8004536:	d100      	bne.n	800453a <HAL_RCC_OscConfig+0x5a>
 8004538:	e06b      	b.n	8004612 <HAL_RCC_OscConfig+0x132>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d167      	bne.n	8004612 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f000 fb85 	bl	8004c52 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	025b      	lsls	r3, r3, #9
 8004550:	429a      	cmp	r2, r3
 8004552:	d107      	bne.n	8004564 <HAL_RCC_OscConfig+0x84>
 8004554:	4bb7      	ldr	r3, [pc, #732]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4bb6      	ldr	r3, [pc, #728]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	0249      	lsls	r1, r1, #9
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e027      	b.n	80045b4 <HAL_RCC_OscConfig+0xd4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	23a0      	movs	r3, #160	; 0xa0
 800456a:	02db      	lsls	r3, r3, #11
 800456c:	429a      	cmp	r2, r3
 800456e:	d10e      	bne.n	800458e <HAL_RCC_OscConfig+0xae>
 8004570:	4bb0      	ldr	r3, [pc, #704]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4baf      	ldr	r3, [pc, #700]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	02c9      	lsls	r1, r1, #11
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4bad      	ldr	r3, [pc, #692]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4bac      	ldr	r3, [pc, #688]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0249      	lsls	r1, r1, #9
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e012      	b.n	80045b4 <HAL_RCC_OscConfig+0xd4>
 800458e:	4ba9      	ldr	r3, [pc, #676]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4ba8      	ldr	r3, [pc, #672]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004594:	49a8      	ldr	r1, [pc, #672]	; (8004838 <HAL_RCC_OscConfig+0x358>)
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	4ba6      	ldr	r3, [pc, #664]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	025b      	lsls	r3, r3, #9
 80045a2:	4013      	ands	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4ba2      	ldr	r3, [pc, #648]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4ba1      	ldr	r3, [pc, #644]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80045ae:	49a3      	ldr	r1, [pc, #652]	; (800483c <HAL_RCC_OscConfig+0x35c>)
 80045b0:	400a      	ands	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fe ffa0 	bl	8003500 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c4:	e009      	b.n	80045da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c6:	f7fe ff9b 	bl	8003500 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b64      	cmp	r3, #100	; 0x64
 80045d2:	d902      	bls.n	80045da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	f000 fb3c 	bl	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045da:	4b96      	ldr	r3, [pc, #600]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	029b      	lsls	r3, r3, #10
 80045e2:	4013      	ands	r3, r2
 80045e4:	d0ef      	beq.n	80045c6 <HAL_RCC_OscConfig+0xe6>
 80045e6:	e015      	b.n	8004614 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe ff8a 	bl	8003500 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f2:	f7fe ff85 	bl	8003500 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b64      	cmp	r3, #100	; 0x64
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e326      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004604:	4b8b      	ldr	r3, [pc, #556]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	4013      	ands	r3, r2
 800460e:	d1f0      	bne.n	80045f2 <HAL_RCC_OscConfig+0x112>
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004612:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2202      	movs	r2, #2
 800461a:	4013      	ands	r3, r2
 800461c:	d100      	bne.n	8004620 <HAL_RCC_OscConfig+0x140>
 800461e:	e08b      	b.n	8004738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d13e      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1d0>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d13b      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004638:	4b7e      	ldr	r3, [pc, #504]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2204      	movs	r2, #4
 800463e:	4013      	ands	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_RCC_OscConfig+0x16c>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e302      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b79      	ldr	r3, [pc, #484]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a7b      	ldr	r2, [pc, #492]	; (8004840 <HAL_RCC_OscConfig+0x360>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	4b75      	ldr	r3, [pc, #468]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004662:	4b74      	ldr	r3, [pc, #464]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2209      	movs	r2, #9
 8004668:	4393      	bics	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	4b71      	ldr	r3, [pc, #452]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004674:	f000 fc40 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004678:	0001      	movs	r1, r0
 800467a:	4b6e      	ldr	r3, [pc, #440]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	220f      	movs	r2, #15
 8004682:	4013      	ands	r3, r2
 8004684:	4a6f      	ldr	r2, [pc, #444]	; (8004844 <HAL_RCC_OscConfig+0x364>)
 8004686:	5cd3      	ldrb	r3, [r2, r3]
 8004688:	000a      	movs	r2, r1
 800468a:	40da      	lsrs	r2, r3
 800468c:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <HAL_RCC_OscConfig+0x368>)
 800468e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004690:	4b6e      	ldr	r3, [pc, #440]	; (800484c <HAL_RCC_OscConfig+0x36c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2513      	movs	r5, #19
 8004696:	197c      	adds	r4, r7, r5
 8004698:	0018      	movs	r0, r3
 800469a:	f7fe feeb 	bl	8003474 <HAL_InitTick>
 800469e:	0003      	movs	r3, r0
 80046a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80046a2:	197b      	adds	r3, r7, r5
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d046      	beq.n	8004738 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80046aa:	197b      	adds	r3, r7, r5
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	e2d0      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d027      	beq.n	8004706 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80046b6:	4b5f      	ldr	r3, [pc, #380]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2209      	movs	r2, #9
 80046bc:	4393      	bics	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	4b5c      	ldr	r3, [pc, #368]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe ff1a 	bl	8003500 <HAL_GetTick>
 80046cc:	0003      	movs	r3, r0
 80046ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fe ff15 	bl	8003500 <HAL_GetTick>
 80046d6:	0002      	movs	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e2b6      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e4:	4b53      	ldr	r3, [pc, #332]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2204      	movs	r2, #4
 80046ea:	4013      	ands	r3, r2
 80046ec:	d0f1      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ee:	4b51      	ldr	r3, [pc, #324]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a53      	ldr	r2, [pc, #332]	; (8004840 <HAL_RCC_OscConfig+0x360>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	021a      	lsls	r2, r3, #8
 80046fe:	4b4d      	ldr	r3, [pc, #308]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	e018      	b.n	8004738 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b4b      	ldr	r3, [pc, #300]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800470c:	2101      	movs	r1, #1
 800470e:	438a      	bics	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004712:	f7fe fef5 	bl	8003500 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471c:	f7fe fef0 	bl	8003500 <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e291      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800472e:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2204      	movs	r2, #4
 8004734:	4013      	ands	r3, r2
 8004736:	d1f1      	bne.n	800471c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2210      	movs	r2, #16
 800473e:	4013      	ands	r3, r2
 8004740:	d100      	bne.n	8004744 <HAL_RCC_OscConfig+0x264>
 8004742:	e0a1      	b.n	8004888 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d140      	bne.n	80047cc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800474a:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4013      	ands	r3, r2
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x282>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e277      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a3a      	ldr	r2, [pc, #232]	; (8004850 <HAL_RCC_OscConfig+0x370>)
 8004768:	4013      	ands	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	0a19      	lsrs	r1, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	061a      	lsls	r2, r3, #24
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	0b5b      	lsrs	r3, r3, #13
 8004790:	3301      	adds	r3, #1
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	0212      	lsls	r2, r2, #8
 8004796:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	210f      	movs	r1, #15
 80047a0:	400b      	ands	r3, r1
 80047a2:	4928      	ldr	r1, [pc, #160]	; (8004844 <HAL_RCC_OscConfig+0x364>)
 80047a4:	5ccb      	ldrb	r3, [r1, r3]
 80047a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <HAL_RCC_OscConfig+0x368>)
 80047aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_RCC_OscConfig+0x36c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2513      	movs	r5, #19
 80047b2:	197c      	adds	r4, r7, r5
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fe fe5d 	bl	8003474 <HAL_InitTick>
 80047ba:	0003      	movs	r3, r0
 80047bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80047be:	197b      	adds	r3, r7, r5
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d060      	beq.n	8004888 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80047c6:	197b      	adds	r3, r7, r5
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	e242      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d03f      	beq.n	8004854 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b16      	ldr	r3, [pc, #88]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0049      	lsls	r1, r1, #1
 80047de:	430a      	orrs	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fe fe8d 	bl	8003500 <HAL_GetTick>
 80047e6:	0003      	movs	r3, r0
 80047e8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047ec:	f7fe fe88 	bl	8003500 <HAL_GetTick>
 80047f0:	0002      	movs	r2, r0
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e229      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4013      	ands	r3, r2
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4a10      	ldr	r2, [pc, #64]	; (8004850 <HAL_RCC_OscConfig+0x370>)
 8004810:	4013      	ands	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	0a19      	lsrs	r1, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	061a      	lsls	r2, r3, #24
 800482c:	4b01      	ldr	r3, [pc, #4]	; (8004834 <HAL_RCC_OscConfig+0x354>)
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	e029      	b.n	8004888 <HAL_RCC_OscConfig+0x3a8>
 8004834:	40021000 	.word	0x40021000
 8004838:	fffeffff 	.word	0xfffeffff
 800483c:	fffbffff 	.word	0xfffbffff
 8004840:	ffffe0ff 	.word	0xffffe0ff
 8004844:	0800bd04 	.word	0x0800bd04
 8004848:	20000000 	.word	0x20000000
 800484c:	20000004 	.word	0x20000004
 8004850:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004854:	4bbd      	ldr	r3, [pc, #756]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4bbc      	ldr	r3, [pc, #752]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 800485a:	49bd      	ldr	r1, [pc, #756]	; (8004b50 <HAL_RCC_OscConfig+0x670>)
 800485c:	400a      	ands	r2, r1
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fe4e 	bl	8003500 <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486a:	f7fe fe49 	bl	8003500 <HAL_GetTick>
 800486e:	0002      	movs	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1ea      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800487c:	4bb3      	ldr	r3, [pc, #716]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4013      	ands	r3, r2
 8004886:	d1f0      	bne.n	800486a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2208      	movs	r2, #8
 800488e:	4013      	ands	r3, r2
 8004890:	d036      	beq.n	8004900 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d019      	beq.n	80048ce <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489a:	4bac      	ldr	r3, [pc, #688]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 800489c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800489e:	4bab      	ldr	r3, [pc, #684]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80048a0:	2101      	movs	r1, #1
 80048a2:	430a      	orrs	r2, r1
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fe fe2b 	bl	8003500 <HAL_GetTick>
 80048aa:	0003      	movs	r3, r0
 80048ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b0:	f7fe fe26 	bl	8003500 <HAL_GetTick>
 80048b4:	0002      	movs	r2, r0
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1c7      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048c2:	4ba2      	ldr	r3, [pc, #648]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c6:	2202      	movs	r2, #2
 80048c8:	4013      	ands	r3, r2
 80048ca:	d0f1      	beq.n	80048b0 <HAL_RCC_OscConfig+0x3d0>
 80048cc:	e018      	b.n	8004900 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ce:	4b9f      	ldr	r3, [pc, #636]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80048d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d2:	4b9e      	ldr	r3, [pc, #632]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80048d4:	2101      	movs	r1, #1
 80048d6:	438a      	bics	r2, r1
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fe fe11 	bl	8003500 <HAL_GetTick>
 80048de:	0003      	movs	r3, r0
 80048e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e4:	f7fe fe0c 	bl	8003500 <HAL_GetTick>
 80048e8:	0002      	movs	r2, r0
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e1ad      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048f6:	4b95      	ldr	r3, [pc, #596]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80048f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fa:	2202      	movs	r2, #2
 80048fc:	4013      	ands	r3, r2
 80048fe:	d1f1      	bne.n	80048e4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2204      	movs	r2, #4
 8004906:	4013      	ands	r3, r2
 8004908:	d100      	bne.n	800490c <HAL_RCC_OscConfig+0x42c>
 800490a:	e0ae      	b.n	8004a6a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490c:	2027      	movs	r0, #39	; 0x27
 800490e:	183b      	adds	r3, r7, r0
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004914:	4b8d      	ldr	r3, [pc, #564]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	055b      	lsls	r3, r3, #21
 800491c:	4013      	ands	r3, r2
 800491e:	d109      	bne.n	8004934 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	4b8a      	ldr	r3, [pc, #552]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004924:	4b89      	ldr	r3, [pc, #548]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	0549      	lsls	r1, r1, #21
 800492a:	430a      	orrs	r2, r1
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800492e:	183b      	adds	r3, r7, r0
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b87      	ldr	r3, [pc, #540]	; (8004b54 <HAL_RCC_OscConfig+0x674>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4013      	ands	r3, r2
 800493e:	d11a      	bne.n	8004976 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004940:	4b84      	ldr	r3, [pc, #528]	; (8004b54 <HAL_RCC_OscConfig+0x674>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b83      	ldr	r3, [pc, #524]	; (8004b54 <HAL_RCC_OscConfig+0x674>)
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	0049      	lsls	r1, r1, #1
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494e:	f7fe fdd7 	bl	8003500 <HAL_GetTick>
 8004952:	0003      	movs	r3, r0
 8004954:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004958:	f7fe fdd2 	bl	8003500 <HAL_GetTick>
 800495c:	0002      	movs	r2, r0
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e173      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496a:	4b7a      	ldr	r3, [pc, #488]	; (8004b54 <HAL_RCC_OscConfig+0x674>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4013      	ands	r3, r2
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	429a      	cmp	r2, r3
 8004980:	d107      	bne.n	8004992 <HAL_RCC_OscConfig+0x4b2>
 8004982:	4b72      	ldr	r3, [pc, #456]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004986:	4b71      	ldr	r3, [pc, #452]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004988:	2180      	movs	r1, #128	; 0x80
 800498a:	0049      	lsls	r1, r1, #1
 800498c:	430a      	orrs	r2, r1
 800498e:	651a      	str	r2, [r3, #80]	; 0x50
 8004990:	e031      	b.n	80049f6 <HAL_RCC_OscConfig+0x516>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4d4>
 800499a:	4b6c      	ldr	r3, [pc, #432]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 800499c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800499e:	4b6b      	ldr	r3, [pc, #428]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049a0:	496b      	ldr	r1, [pc, #428]	; (8004b50 <HAL_RCC_OscConfig+0x670>)
 80049a2:	400a      	ands	r2, r1
 80049a4:	651a      	str	r2, [r3, #80]	; 0x50
 80049a6:	4b69      	ldr	r3, [pc, #420]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049aa:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049ac:	496a      	ldr	r1, [pc, #424]	; (8004b58 <HAL_RCC_OscConfig+0x678>)
 80049ae:	400a      	ands	r2, r1
 80049b0:	651a      	str	r2, [r3, #80]	; 0x50
 80049b2:	e020      	b.n	80049f6 <HAL_RCC_OscConfig+0x516>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	23a0      	movs	r3, #160	; 0xa0
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	429a      	cmp	r2, r3
 80049be:	d10e      	bne.n	80049de <HAL_RCC_OscConfig+0x4fe>
 80049c0:	4b62      	ldr	r3, [pc, #392]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049c6:	2180      	movs	r1, #128	; 0x80
 80049c8:	00c9      	lsls	r1, r1, #3
 80049ca:	430a      	orrs	r2, r1
 80049cc:	651a      	str	r2, [r3, #80]	; 0x50
 80049ce:	4b5f      	ldr	r3, [pc, #380]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049d2:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	0049      	lsls	r1, r1, #1
 80049d8:	430a      	orrs	r2, r1
 80049da:	651a      	str	r2, [r3, #80]	; 0x50
 80049dc:	e00b      	b.n	80049f6 <HAL_RCC_OscConfig+0x516>
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049e2:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049e4:	495a      	ldr	r1, [pc, #360]	; (8004b50 <HAL_RCC_OscConfig+0x670>)
 80049e6:	400a      	ands	r2, r1
 80049e8:	651a      	str	r2, [r3, #80]	; 0x50
 80049ea:	4b58      	ldr	r3, [pc, #352]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049ee:	4b57      	ldr	r3, [pc, #348]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 80049f0:	4959      	ldr	r1, [pc, #356]	; (8004b58 <HAL_RCC_OscConfig+0x678>)
 80049f2:	400a      	ands	r2, r1
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d015      	beq.n	8004a2a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fe fd7f 	bl	8003500 <HAL_GetTick>
 8004a02:	0003      	movs	r3, r0
 8004a04:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a06:	e009      	b.n	8004a1c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fe fd7a 	bl	8003500 <HAL_GetTick>
 8004a0c:	0002      	movs	r2, r0
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	4a52      	ldr	r2, [pc, #328]	; (8004b5c <HAL_RCC_OscConfig+0x67c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e11a      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	d0ef      	beq.n	8004a08 <HAL_RCC_OscConfig+0x528>
 8004a28:	e014      	b.n	8004a54 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fd69 	bl	8003500 <HAL_GetTick>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a32:	e009      	b.n	8004a48 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fe fd64 	bl	8003500 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	4a47      	ldr	r2, [pc, #284]	; (8004b5c <HAL_RCC_OscConfig+0x67c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e104      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4013      	ands	r3, r2
 8004a52:	d1ef      	bne.n	8004a34 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a54:	2327      	movs	r3, #39	; 0x27
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a62:	4b3a      	ldr	r3, [pc, #232]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a64:	493e      	ldr	r1, [pc, #248]	; (8004b60 <HAL_RCC_OscConfig+0x680>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	4013      	ands	r3, r2
 8004a72:	d049      	beq.n	8004b08 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d026      	beq.n	8004aca <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a82:	2101      	movs	r1, #1
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8c:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004a8e:	2101      	movs	r1, #1
 8004a90:	430a      	orrs	r2, r1
 8004a92:	635a      	str	r2, [r3, #52]	; 0x34
 8004a94:	4b33      	ldr	r3, [pc, #204]	; (8004b64 <HAL_RCC_OscConfig+0x684>)
 8004a96:	6a1a      	ldr	r2, [r3, #32]
 8004a98:	4b32      	ldr	r3, [pc, #200]	; (8004b64 <HAL_RCC_OscConfig+0x684>)
 8004a9a:	2180      	movs	r1, #128	; 0x80
 8004a9c:	0189      	lsls	r1, r1, #6
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fe fd2d 	bl	8003500 <HAL_GetTick>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aac:	f7fe fd28 	bl	8003500 <HAL_GetTick>
 8004ab0:	0002      	movs	r2, r0
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0c9      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004abe:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d0f1      	beq.n	8004aac <HAL_RCC_OscConfig+0x5cc>
 8004ac8:	e01e      	b.n	8004b08 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	438a      	bics	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <HAL_RCC_OscConfig+0x684>)
 8004ad8:	6a1a      	ldr	r2, [r3, #32]
 8004ada:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <HAL_RCC_OscConfig+0x684>)
 8004adc:	4922      	ldr	r1, [pc, #136]	; (8004b68 <HAL_RCC_OscConfig+0x688>)
 8004ade:	400a      	ands	r2, r1
 8004ae0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fe fd0d 	bl	8003500 <HAL_GetTick>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aec:	f7fe fd08 	bl	8003500 <HAL_GetTick>
 8004af0:	0002      	movs	r2, r0
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0a9      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2202      	movs	r2, #2
 8004b04:	4013      	ands	r3, r2
 8004b06:	d1f1      	bne.n	8004aec <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d100      	bne.n	8004b12 <HAL_RCC_OscConfig+0x632>
 8004b10:	e09e      	b.n	8004c50 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d100      	bne.n	8004b1a <HAL_RCC_OscConfig+0x63a>
 8004b18:	e077      	b.n	8004c0a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d158      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_OscConfig+0x66c>)
 8004b28:	4910      	ldr	r1, [pc, #64]	; (8004b6c <HAL_RCC_OscConfig+0x68c>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2e:	f7fe fce7 	bl	8003500 <HAL_GetTick>
 8004b32:	0003      	movs	r3, r0
 8004b34:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b36:	e01b      	b.n	8004b70 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fe fce2 	bl	8003500 <HAL_GetTick>
 8004b3c:	0002      	movs	r2, r0
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d914      	bls.n	8004b70 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e083      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	fffffeff 	.word	0xfffffeff
 8004b54:	40007000 	.word	0x40007000
 8004b58:	fffffbff 	.word	0xfffffbff
 8004b5c:	00001388 	.word	0x00001388
 8004b60:	efffffff 	.word	0xefffffff
 8004b64:	40010000 	.word	0x40010000
 8004b68:	ffffdfff 	.word	0xffffdfff
 8004b6c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b70:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	049b      	lsls	r3, r3, #18
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d1dd      	bne.n	8004b38 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b7c:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a37      	ldr	r2, [pc, #220]	; (8004c60 <HAL_RCC_OscConfig+0x780>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	431a      	orrs	r2, r3
 8004b96:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b2f      	ldr	r3, [pc, #188]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004ba2:	2180      	movs	r1, #128	; 0x80
 8004ba4:	0449      	lsls	r1, r1, #17
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fe fca9 	bl	8003500 <HAL_GetTick>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7fe fca4 	bl	8003500 <HAL_GetTick>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e045      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004bc6:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	049b      	lsls	r3, r3, #18
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x6d4>
 8004bd2:	e03d      	b.n	8004c50 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004bda:	4922      	ldr	r1, [pc, #136]	; (8004c64 <HAL_RCC_OscConfig+0x784>)
 8004bdc:	400a      	ands	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fe fc8e 	bl	8003500 <HAL_GetTick>
 8004be4:	0003      	movs	r3, r0
 8004be6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fe fc89 	bl	8003500 <HAL_GetTick>
 8004bee:	0002      	movs	r2, r0
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e02a      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004bfc:	4b17      	ldr	r3, [pc, #92]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	049b      	lsls	r3, r3, #18
 8004c04:	4013      	ands	r3, r2
 8004c06:	d1f0      	bne.n	8004bea <HAL_RCC_OscConfig+0x70a>
 8004c08:	e022      	b.n	8004c50 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e01d      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c16:	4b11      	ldr	r3, [pc, #68]	; (8004c5c <HAL_RCC_OscConfig+0x77c>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	025b      	lsls	r3, r3, #9
 8004c22:	401a      	ands	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d10f      	bne.n	8004c4c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	23f0      	movs	r3, #240	; 0xf0
 8004c30:	039b      	lsls	r3, r3, #14
 8004c32:	401a      	ands	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d107      	bne.n	8004c4c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	23c0      	movs	r3, #192	; 0xc0
 8004c40:	041b      	lsls	r3, r3, #16
 8004c42:	401a      	ands	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b00a      	add	sp, #40	; 0x28
 8004c58:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	ff02ffff 	.word	0xff02ffff
 8004c64:	feffffff 	.word	0xfeffffff

08004c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b5b0      	push	{r4, r5, r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e128      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b96      	ldr	r3, [pc, #600]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2201      	movs	r2, #1
 8004c82:	4013      	ands	r3, r2
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d91e      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b93      	ldr	r3, [pc, #588]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4393      	bics	r3, r2
 8004c92:	0019      	movs	r1, r3
 8004c94:	4b90      	ldr	r3, [pc, #576]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c9c:	f7fe fc30 	bl	8003500 <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca4:	e009      	b.n	8004cba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca6:	f7fe fc2b 	bl	8003500 <HAL_GetTick>
 8004caa:	0002      	movs	r2, r0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	4a8a      	ldr	r2, [pc, #552]	; (8004edc <HAL_RCC_ClockConfig+0x274>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e109      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b87      	ldr	r3, [pc, #540]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1ee      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd2:	4b83      	ldr	r3, [pc, #524]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	22f0      	movs	r2, #240	; 0xf0
 8004cd8:	4393      	bics	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	4b7f      	ldr	r3, [pc, #508]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	4013      	ands	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0x8a>
 8004cf0:	e089      	b.n	8004e06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cfa:	4b79      	ldr	r3, [pc, #484]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	4013      	ands	r3, r2
 8004d04:	d120      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0e1      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d12:	4b73      	ldr	r3, [pc, #460]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	049b      	lsls	r3, r3, #18
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d114      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0d5      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d106      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	4013      	ands	r3, r2
 8004d32:	d109      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0ca      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d38:	4b69      	ldr	r3, [pc, #420]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0c2      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d48:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	4393      	bics	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4b62      	ldr	r3, [pc, #392]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fe fbd0 	bl	8003500 <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d6c:	e009      	b.n	8004d82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6e:	f7fe fbc7 	bl	8003500 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	4a58      	ldr	r2, [pc, #352]	; (8004edc <HAL_RCC_ClockConfig+0x274>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0a5      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d82:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	220c      	movs	r2, #12
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d1ef      	bne.n	8004d6e <HAL_RCC_ClockConfig+0x106>
 8004d8e:	e03a      	b.n	8004e06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d111      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d98:	e009      	b.n	8004dae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9a:	f7fe fbb1 	bl	8003500 <HAL_GetTick>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	4a4d      	ldr	r2, [pc, #308]	; (8004edc <HAL_RCC_ClockConfig+0x274>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e08f      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dae:	4b4c      	ldr	r3, [pc, #304]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	220c      	movs	r2, #12
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d1ef      	bne.n	8004d9a <HAL_RCC_ClockConfig+0x132>
 8004dba:	e024      	b.n	8004e06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d11b      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dc4:	e009      	b.n	8004dda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc6:	f7fe fb9b 	bl	8003500 <HAL_GetTick>
 8004dca:	0002      	movs	r2, r0
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	4a42      	ldr	r2, [pc, #264]	; (8004edc <HAL_RCC_ClockConfig+0x274>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e079      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dda:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	220c      	movs	r2, #12
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d1ef      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x15e>
 8004de6:	e00e      	b.n	8004e06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de8:	f7fe fb8a 	bl	8003500 <HAL_GetTick>
 8004dec:	0002      	movs	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	4a3a      	ldr	r2, [pc, #232]	; (8004edc <HAL_RCC_ClockConfig+0x274>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e068      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004dfc:	4b38      	ldr	r3, [pc, #224]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	220c      	movs	r2, #12
 8004e02:	4013      	ands	r3, r2
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e06:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d21e      	bcs.n	8004e52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e14:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4393      	bics	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e26:	f7fe fb6b 	bl	8003500 <HAL_GetTick>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	e009      	b.n	8004e44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e30:	f7fe fb66 	bl	8003500 <HAL_GetTick>
 8004e34:	0002      	movs	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	4a28      	ldr	r2, [pc, #160]	; (8004edc <HAL_RCC_ClockConfig+0x274>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e044      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e44:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCC_ClockConfig+0x270>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d1ee      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2204      	movs	r2, #4
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e5c:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <HAL_RCC_ClockConfig+0x27c>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2208      	movs	r2, #8
 8004e76:	4013      	ands	r3, r2
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e7a:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_RCC_ClockConfig+0x280>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	0019      	movs	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	00da      	lsls	r2, r3, #3
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e90:	f000 f832 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004e94:	0001      	movs	r1, r0
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_RCC_ClockConfig+0x278>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	4a12      	ldr	r2, [pc, #72]	; (8004eec <HAL_RCC_ClockConfig+0x284>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	000a      	movs	r2, r1
 8004ea6:	40da      	lsrs	r2, r3
 8004ea8:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <HAL_RCC_ClockConfig+0x288>)
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eac:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_RCC_ClockConfig+0x28c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	250b      	movs	r5, #11
 8004eb2:	197c      	adds	r4, r7, r5
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fe fadd 	bl	8003474 <HAL_InitTick>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004ebe:	197b      	adds	r3, r7, r5
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004ec6:	197b      	adds	r3, r7, r5
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	e000      	b.n	8004ece <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b004      	add	sp, #16
 8004ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	00001388 	.word	0x00001388
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	fffff8ff 	.word	0xfffff8ff
 8004ee8:	ffffc7ff 	.word	0xffffc7ff
 8004eec:	0800bd04 	.word	0x0800bd04
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	20000004 	.word	0x20000004

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	b5b0      	push	{r4, r5, r7, lr}
 8004efa:	b08e      	sub	sp, #56	; 0x38
 8004efc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004efe:	4b4c      	ldr	r3, [pc, #304]	; (8005030 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f06:	230c      	movs	r3, #12
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b0c      	cmp	r3, #12
 8004f0c:	d014      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x40>
 8004f0e:	d900      	bls.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1a>
 8004f10:	e07b      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x112>
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x24>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d00b      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1a:	e076      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004f1c:	4b44      	ldr	r3, [pc, #272]	; (8005030 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2210      	movs	r2, #16
 8004f22:	4013      	ands	r3, r2
 8004f24:	d002      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004f26:	4b43      	ldr	r3, [pc, #268]	; (8005034 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004f28:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004f2a:	e07c      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004f2c:	4b42      	ldr	r3, [pc, #264]	; (8005038 <HAL_RCC_GetSysClockFreq+0x140>)
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f30:	e079      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f32:	4b42      	ldr	r3, [pc, #264]	; (800503c <HAL_RCC_GetSysClockFreq+0x144>)
 8004f34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f36:	e076      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	0c9a      	lsrs	r2, r3, #18
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	401a      	ands	r2, r3
 8004f40:	4b3f      	ldr	r3, [pc, #252]	; (8005040 <HAL_RCC_GetSysClockFreq+0x148>)
 8004f42:	5c9b      	ldrb	r3, [r3, r2]
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	0d9a      	lsrs	r2, r3, #22
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	3301      	adds	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f52:	4b37      	ldr	r3, [pc, #220]	; (8005030 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	025b      	lsls	r3, r3, #9
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d01a      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	4a35      	ldr	r2, [pc, #212]	; (800503c <HAL_RCC_GetSysClockFreq+0x144>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	69b8      	ldr	r0, [r7, #24]
 8004f6c:	69f9      	ldr	r1, [r7, #28]
 8004f6e:	f7fb fabb 	bl	80004e8 <__aeabi_lmul>
 8004f72:	0002      	movs	r2, r0
 8004f74:	000b      	movs	r3, r1
 8004f76:	0010      	movs	r0, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f7fb fa8f 	bl	80004a8 <__aeabi_uldivmod>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	000b      	movs	r3, r1
 8004f8e:	0013      	movs	r3, r2
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
 8004f92:	e037      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2210      	movs	r2, #16
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d01a      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	4a23      	ldr	r2, [pc, #140]	; (8005034 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	68b8      	ldr	r0, [r7, #8]
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	f7fb fa9b 	bl	80004e8 <__aeabi_lmul>
 8004fb2:	0002      	movs	r2, r0
 8004fb4:	000b      	movs	r3, r1
 8004fb6:	0010      	movs	r0, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f7fb fa6f 	bl	80004a8 <__aeabi_uldivmod>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	000b      	movs	r3, r1
 8004fce:	0013      	movs	r3, r2
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd2:	e017      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	2300      	movs	r3, #0
 8004fda:	0019      	movs	r1, r3
 8004fdc:	4a16      	ldr	r2, [pc, #88]	; (8005038 <HAL_RCC_GetSysClockFreq+0x140>)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f7fb fa82 	bl	80004e8 <__aeabi_lmul>
 8004fe4:	0002      	movs	r2, r0
 8004fe6:	000b      	movs	r3, r1
 8004fe8:	0010      	movs	r0, r2
 8004fea:	0019      	movs	r1, r3
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	001c      	movs	r4, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	001d      	movs	r5, r3
 8004ff4:	0022      	movs	r2, r4
 8004ff6:	002b      	movs	r3, r5
 8004ff8:	f7fb fa56 	bl	80004a8 <__aeabi_uldivmod>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	000b      	movs	r3, r1
 8005000:	0013      	movs	r3, r2
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005008:	e00d      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_GetSysClockFreq+0x138>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	0b5b      	lsrs	r3, r3, #13
 8005010:	2207      	movs	r2, #7
 8005012:	4013      	ands	r3, r2
 8005014:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	3301      	adds	r3, #1
 800501a:	2280      	movs	r2, #128	; 0x80
 800501c:	0212      	lsls	r2, r2, #8
 800501e:	409a      	lsls	r2, r3
 8005020:	0013      	movs	r3, r2
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005024:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005028:	0018      	movs	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	b00e      	add	sp, #56	; 0x38
 800502e:	bdb0      	pop	{r4, r5, r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	003d0900 	.word	0x003d0900
 8005038:	00f42400 	.word	0x00f42400
 800503c:	007a1200 	.word	0x007a1200
 8005040:	0800bd1c 	.word	0x0800bd1c

08005044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005048:	4b02      	ldr	r3, [pc, #8]	; (8005054 <HAL_RCC_GetHCLKFreq+0x10>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	20000000 	.word	0x20000000

08005058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800505c:	f7ff fff2 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005060:	0001      	movs	r1, r0
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	2207      	movs	r2, #7
 800506a:	4013      	ands	r3, r2
 800506c:	4a04      	ldr	r2, [pc, #16]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800506e:	5cd3      	ldrb	r3, [r2, r3]
 8005070:	40d9      	lsrs	r1, r3
 8005072:	000b      	movs	r3, r1
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	40021000 	.word	0x40021000
 8005080:	0800bd14 	.word	0x0800bd14

08005084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005088:	f7ff ffdc 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 800508c:	0001      	movs	r1, r0
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	0adb      	lsrs	r3, r3, #11
 8005094:	2207      	movs	r2, #7
 8005096:	4013      	ands	r3, r2
 8005098:	4a04      	ldr	r2, [pc, #16]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800509a:	5cd3      	ldrb	r3, [r2, r3]
 800509c:	40d9      	lsrs	r1, r3
 800509e:	000b      	movs	r3, r1
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	40021000 	.word	0x40021000
 80050ac:	0800bd14 	.word	0x0800bd14

080050b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80050b8:	2317      	movs	r3, #23
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2220      	movs	r2, #32
 80050c6:	4013      	ands	r3, r2
 80050c8:	d106      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	4013      	ands	r3, r2
 80050d4:	d100      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80050d6:	e104      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d8:	4bb1      	ldr	r3, [pc, #708]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	055b      	lsls	r3, r3, #21
 80050e0:	4013      	ands	r3, r2
 80050e2:	d10a      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	4bae      	ldr	r3, [pc, #696]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e8:	4bad      	ldr	r3, [pc, #692]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	0549      	lsls	r1, r1, #21
 80050ee:	430a      	orrs	r2, r1
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80050f2:	2317      	movs	r3, #23
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	2201      	movs	r2, #1
 80050f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fa:	4baa      	ldr	r3, [pc, #680]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4013      	ands	r3, r2
 8005104:	d11a      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005106:	4ba7      	ldr	r3, [pc, #668]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4ba6      	ldr	r3, [pc, #664]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	0049      	lsls	r1, r1, #1
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005114:	f7fe f9f4 	bl	8003500 <HAL_GetTick>
 8005118:	0003      	movs	r3, r0
 800511a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511c:	e008      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511e:	f7fe f9ef 	bl	8003500 <HAL_GetTick>
 8005122:	0002      	movs	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b64      	cmp	r3, #100	; 0x64
 800512a:	d901      	bls.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e133      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	4b9c      	ldr	r3, [pc, #624]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4013      	ands	r3, r2
 800513a:	d0f0      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800513c:	4b98      	ldr	r3, [pc, #608]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	23c0      	movs	r3, #192	; 0xc0
 8005142:	039b      	lsls	r3, r3, #14
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	23c0      	movs	r3, #192	; 0xc0
 800514e:	039b      	lsls	r3, r3, #14
 8005150:	4013      	ands	r3, r2
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	23c0      	movs	r3, #192	; 0xc0
 800515e:	039b      	lsls	r3, r3, #14
 8005160:	4013      	ands	r3, r2
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d013      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	23c0      	movs	r3, #192	; 0xc0
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	401a      	ands	r2, r3
 8005172:	23c0      	movs	r3, #192	; 0xc0
 8005174:	029b      	lsls	r3, r3, #10
 8005176:	429a      	cmp	r2, r3
 8005178:	d10a      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800517a:	4b89      	ldr	r3, [pc, #548]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	401a      	ands	r2, r3
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	029b      	lsls	r3, r3, #10
 8005188:	429a      	cmp	r2, r3
 800518a:	d101      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e103      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005190:	4b83      	ldr	r3, [pc, #524]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005194:	23c0      	movs	r3, #192	; 0xc0
 8005196:	029b      	lsls	r3, r3, #10
 8005198:	4013      	ands	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d049      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	23c0      	movs	r3, #192	; 0xc0
 80051a8:	029b      	lsls	r3, r3, #10
 80051aa:	4013      	ands	r3, r2
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d004      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2220      	movs	r2, #32
 80051b8:	4013      	ands	r3, r2
 80051ba:	d10d      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	23c0      	movs	r3, #192	; 0xc0
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	4013      	ands	r3, r2
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d034      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	2380      	movs	r3, #128	; 0x80
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	4013      	ands	r3, r2
 80051d6:	d02e      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80051d8:	4b71      	ldr	r3, [pc, #452]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	4a72      	ldr	r2, [pc, #456]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80051de:	4013      	ands	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051e2:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051e6:	4b6e      	ldr	r3, [pc, #440]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	0309      	lsls	r1, r1, #12
 80051ec:	430a      	orrs	r2, r1
 80051ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f0:	4b6b      	ldr	r3, [pc, #428]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051f4:	4b6a      	ldr	r3, [pc, #424]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051f6:	496d      	ldr	r1, [pc, #436]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80051fc:	4b68      	ldr	r3, [pc, #416]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	2380      	movs	r3, #128	; 0x80
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4013      	ands	r3, r2
 800520a:	d014      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fe f978 	bl	8003500 <HAL_GetTick>
 8005210:	0003      	movs	r3, r0
 8005212:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005214:	e009      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005216:	f7fe f973 	bl	8003500 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	4a63      	ldr	r2, [pc, #396]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e0b6      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800522a:	4b5d      	ldr	r3, [pc, #372]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800522c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4013      	ands	r3, r2
 8005234:	d0ef      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	4013      	ands	r3, r2
 8005240:	d01f      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	23c0      	movs	r3, #192	; 0xc0
 8005248:	029b      	lsls	r3, r3, #10
 800524a:	401a      	ands	r2, r3
 800524c:	23c0      	movs	r3, #192	; 0xc0
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	429a      	cmp	r2, r3
 8005252:	d10c      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005254:	4b52      	ldr	r3, [pc, #328]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a56      	ldr	r2, [pc, #344]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	23c0      	movs	r3, #192	; 0xc0
 8005264:	039b      	lsls	r3, r3, #14
 8005266:	401a      	ands	r2, r3
 8005268:	4b4d      	ldr	r3, [pc, #308]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	4b4c      	ldr	r3, [pc, #304]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005270:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	23c0      	movs	r3, #192	; 0xc0
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	401a      	ands	r2, r3
 800527c:	4b48      	ldr	r3, [pc, #288]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800527e:	430a      	orrs	r2, r1
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2220      	movs	r2, #32
 8005288:	4013      	ands	r3, r2
 800528a:	d01f      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	23c0      	movs	r3, #192	; 0xc0
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	401a      	ands	r2, r3
 8005296:	23c0      	movs	r3, #192	; 0xc0
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	429a      	cmp	r2, r3
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800529e:	4b40      	ldr	r3, [pc, #256]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a44      	ldr	r2, [pc, #272]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	23c0      	movs	r3, #192	; 0xc0
 80052ae:	039b      	lsls	r3, r3, #14
 80052b0:	401a      	ands	r2, r3
 80052b2:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ba:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	23c0      	movs	r3, #192	; 0xc0
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	401a      	ands	r2, r3
 80052c6:	4b36      	ldr	r3, [pc, #216]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052c8:	430a      	orrs	r2, r1
 80052ca:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052cc:	2317      	movs	r3, #23
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d105      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d6:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052dc:	4936      	ldr	r1, [pc, #216]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052de:	400a      	ands	r2, r1
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2201      	movs	r2, #1
 80052e8:	4013      	ands	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052ec:	4b2c      	ldr	r3, [pc, #176]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	2203      	movs	r2, #3
 80052f2:	4393      	bics	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052fc:	430a      	orrs	r2, r1
 80052fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2202      	movs	r2, #2
 8005306:	4013      	ands	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800530a:	4b25      	ldr	r3, [pc, #148]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	220c      	movs	r2, #12
 8005310:	4393      	bics	r3, r2
 8005312:	0019      	movs	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800531a:	430a      	orrs	r2, r1
 800531c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2204      	movs	r2, #4
 8005324:	4013      	ands	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005328:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800532a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532c:	4a23      	ldr	r2, [pc, #140]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005338:	430a      	orrs	r2, r1
 800533a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2208      	movs	r2, #8
 8005342:	4013      	ands	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534a:	4a1d      	ldr	r2, [pc, #116]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800534c:	4013      	ands	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005356:	430a      	orrs	r2, r1
 8005358:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2240      	movs	r2, #64	; 0x40
 8005360:	4013      	ands	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005364:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005368:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800536a:	4013      	ands	r3, r2
 800536c:	0019      	movs	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005374:	430a      	orrs	r2, r1
 8005376:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2280      	movs	r2, #128	; 0x80
 800537e:	4013      	ands	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005388:	4013      	ands	r3, r2
 800538a:	0019      	movs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005392:	430a      	orrs	r2, r1
 8005394:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b006      	add	sp, #24
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40007000 	.word	0x40007000
 80053a8:	fffcffff 	.word	0xfffcffff
 80053ac:	fff7ffff 	.word	0xfff7ffff
 80053b0:	00001388 	.word	0x00001388
 80053b4:	ffcfffff 	.word	0xffcfffff
 80053b8:	efffffff 	.word	0xefffffff
 80053bc:	fffff3ff 	.word	0xfffff3ff
 80053c0:	ffffcfff 	.word	0xffffcfff
 80053c4:	fbffffff 	.word	0xfbffffff
 80053c8:	fff3ffff 	.word	0xfff3ffff

080053cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e083      	b.n	80054e6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	2382      	movs	r3, #130	; 0x82
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d009      	beq.n	8005406 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	61da      	str	r2, [r3, #28]
 80053f8:	e005      	b.n	8005406 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2251      	movs	r2, #81	; 0x51
 8005410:	5c9b      	ldrb	r3, [r3, r2]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2250      	movs	r2, #80	; 0x50
 800541c:	2100      	movs	r1, #0
 800541e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0018      	movs	r0, r3
 8005424:	f7fd fc86 	bl	8002d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2251      	movs	r2, #81	; 0x51
 800542c:	2102      	movs	r1, #2
 800542e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	438a      	bics	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	2382      	movs	r3, #130	; 0x82
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	401a      	ands	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6899      	ldr	r1, [r3, #8]
 800544e:	2384      	movs	r3, #132	; 0x84
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	400b      	ands	r3, r1
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68d9      	ldr	r1, [r3, #12]
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	400b      	ands	r3, r1
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2102      	movs	r1, #2
 8005468:	400b      	ands	r3, r1
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	2101      	movs	r1, #1
 8005472:	400b      	ands	r3, r1
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	400b      	ands	r3, r1
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	2138      	movs	r1, #56	; 0x38
 8005488:	400b      	ands	r3, r1
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	400b      	ands	r3, r1
 8005494:	431a      	orrs	r2, r3
 8005496:	0011      	movs	r1, r2
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	019b      	lsls	r3, r3, #6
 80054a0:	401a      	ands	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	2204      	movs	r2, #4
 80054b2:	4013      	ands	r3, r2
 80054b4:	0019      	movs	r1, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2210      	movs	r2, #16
 80054bc:	401a      	ands	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4907      	ldr	r1, [pc, #28]	; (80054f0 <HAL_SPI_Init+0x124>)
 80054d2:	400a      	ands	r2, r1
 80054d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2251      	movs	r2, #81	; 0x51
 80054e0:	2101      	movs	r1, #1
 80054e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b002      	add	sp, #8
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	fffff7ff 	.word	0xfffff7ff

080054f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e032      	b.n	800556c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2239      	movs	r2, #57	; 0x39
 800550a:	5c9b      	ldrb	r3, [r3, r2]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2238      	movs	r2, #56	; 0x38
 8005516:	2100      	movs	r1, #0
 8005518:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	0018      	movs	r0, r3
 800551e:	f7fd fde7 	bl	80030f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2239      	movs	r2, #57	; 0x39
 8005526:	2102      	movs	r1, #2
 8005528:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	0019      	movs	r1, r3
 8005534:	0010      	movs	r0, r2
 8005536:	f000 f971 	bl	800581c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	223e      	movs	r2, #62	; 0x3e
 800553e:	2101      	movs	r1, #1
 8005540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	223a      	movs	r2, #58	; 0x3a
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	223b      	movs	r2, #59	; 0x3b
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	223c      	movs	r2, #60	; 0x3c
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	223d      	movs	r2, #61	; 0x3d
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2239      	movs	r2, #57	; 0x39
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	0018      	movs	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2239      	movs	r2, #57	; 0x39
 8005580:	5c9b      	ldrb	r3, [r3, r2]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d001      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e036      	b.n	80055fa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2239      	movs	r2, #57	; 0x39
 8005590:	2102      	movs	r1, #2
 8005592:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2101      	movs	r1, #1
 80055a0:	430a      	orrs	r2, r1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	05db      	lsls	r3, r3, #23
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d009      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x50>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a13      	ldr	r2, [pc, #76]	; (8005604 <HAL_TIM_Base_Start_IT+0x90>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <HAL_TIM_Base_Start_IT+0x50>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a12      	ldr	r2, [pc, #72]	; (8005608 <HAL_TIM_Base_Start_IT+0x94>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d111      	bne.n	80055e8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2207      	movs	r2, #7
 80055cc:	4013      	ands	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d010      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2101      	movs	r1, #1
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	e007      	b.n	80055f8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2101      	movs	r1, #1
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b004      	add	sp, #16
 8005600:	bd80      	pop	{r7, pc}
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	40010800 	.word	0x40010800
 8005608:	40011400 	.word	0x40011400

0800560c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2202      	movs	r2, #2
 800561c:	4013      	ands	r3, r2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d124      	bne.n	800566c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2202      	movs	r2, #2
 800562a:	4013      	ands	r3, r2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d11d      	bne.n	800566c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2203      	movs	r2, #3
 8005636:	4252      	negs	r2, r2
 8005638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2203      	movs	r2, #3
 8005648:	4013      	ands	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0018      	movs	r0, r3
 8005650:	f000 f8cc 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005654:	e007      	b.n	8005666 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 f8bf 	bl	80057dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0018      	movs	r0, r3
 8005662:	f000 f8cb 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2204      	movs	r2, #4
 8005674:	4013      	ands	r3, r2
 8005676:	2b04      	cmp	r3, #4
 8005678:	d125      	bne.n	80056c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2204      	movs	r2, #4
 8005682:	4013      	ands	r3, r2
 8005684:	2b04      	cmp	r3, #4
 8005686:	d11e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2205      	movs	r2, #5
 800568e:	4252      	negs	r2, r2
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	23c0      	movs	r3, #192	; 0xc0
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4013      	ands	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f89f 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 80056ae:	e007      	b.n	80056c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	0018      	movs	r0, r3
 80056b4:	f000 f892 	bl	80057dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 f89e 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2208      	movs	r2, #8
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d124      	bne.n	800571e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2208      	movs	r2, #8
 80056dc:	4013      	ands	r3, r2
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d11d      	bne.n	800571e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2209      	movs	r2, #9
 80056e8:	4252      	negs	r2, r2
 80056ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2204      	movs	r2, #4
 80056f0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2203      	movs	r2, #3
 80056fa:	4013      	ands	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 f873 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005706:	e007      	b.n	8005718 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f866 	bl	80057dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0018      	movs	r0, r3
 8005714:	f000 f872 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2210      	movs	r2, #16
 8005726:	4013      	ands	r3, r2
 8005728:	2b10      	cmp	r3, #16
 800572a:	d125      	bne.n	8005778 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2210      	movs	r2, #16
 8005734:	4013      	ands	r3, r2
 8005736:	2b10      	cmp	r3, #16
 8005738:	d11e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2211      	movs	r2, #17
 8005740:	4252      	negs	r2, r2
 8005742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2208      	movs	r2, #8
 8005748:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	23c0      	movs	r3, #192	; 0xc0
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4013      	ands	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	0018      	movs	r0, r3
 800575c:	f000 f846 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005760:	e007      	b.n	8005772 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f839 	bl	80057dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f000 f845 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2201      	movs	r2, #1
 8005780:	4013      	ands	r3, r2
 8005782:	2b01      	cmp	r3, #1
 8005784:	d10f      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	4013      	ands	r3, r2
 8005790:	2b01      	cmp	r3, #1
 8005792:	d108      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2202      	movs	r2, #2
 800579a:	4252      	negs	r2, r2
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7fd f9b3 	bl	8002b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d10f      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	4013      	ands	r3, r2
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d108      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2241      	movs	r2, #65	; 0x41
 80057c8:	4252      	negs	r2, r2
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0018      	movs	r0, r3
 80057d0:	f000 f81c 	bl	800580c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d4:	46c0      	nop			; (mov r8, r8)
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b002      	add	sp, #8
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f4:	46c0      	nop			; (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	b002      	add	sp, #8
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b002      	add	sp, #8
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005814:	46c0      	nop			; (mov r8, r8)
 8005816:	46bd      	mov	sp, r7
 8005818:	b002      	add	sp, #8
 800581a:	bd80      	pop	{r7, pc}

0800581c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	05db      	lsls	r3, r3, #23
 8005832:	429a      	cmp	r2, r3
 8005834:	d007      	beq.n	8005846 <TIM_Base_SetConfig+0x2a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <TIM_Base_SetConfig+0x9c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_Base_SetConfig+0x2a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <TIM_Base_SetConfig+0xa0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d108      	bne.n	8005858 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2270      	movs	r2, #112	; 0x70
 800584a:	4393      	bics	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	05db      	lsls	r3, r3, #23
 800585e:	429a      	cmp	r2, r3
 8005860:	d007      	beq.n	8005872 <TIM_Base_SetConfig+0x56>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <TIM_Base_SetConfig+0x9c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_Base_SetConfig+0x56>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a13      	ldr	r2, [pc, #76]	; (80058bc <TIM_Base_SetConfig+0xa0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <TIM_Base_SetConfig+0xa4>)
 8005876:	4013      	ands	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	4393      	bics	r3, r2
 800588a:	001a      	movs	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	615a      	str	r2, [r3, #20]
}
 80058b0:	46c0      	nop			; (mov r8, r8)
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b004      	add	sp, #16
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40010800 	.word	0x40010800
 80058bc:	40011400 	.word	0x40011400
 80058c0:	fffffcff 	.word	0xfffffcff

080058c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2238      	movs	r2, #56	; 0x38
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d8:	2302      	movs	r3, #2
 80058da:	e042      	b.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2238      	movs	r2, #56	; 0x38
 80058e0:	2101      	movs	r1, #1
 80058e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2239      	movs	r2, #57	; 0x39
 80058e8:	2102      	movs	r1, #2
 80058ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2270      	movs	r2, #112	; 0x70
 8005900:	4393      	bics	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	05db      	lsls	r3, r3, #23
 800591e:	429a      	cmp	r2, r3
 8005920:	d009      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a11      	ldr	r2, [pc, #68]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d10c      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	4393      	bics	r3, r2
 800593c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	4313      	orrs	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2239      	movs	r2, #57	; 0x39
 8005954:	2101      	movs	r1, #1
 8005956:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2238      	movs	r2, #56	; 0x38
 800595c:	2100      	movs	r1, #0
 800595e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	0018      	movs	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	b004      	add	sp, #16
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	40010800 	.word	0x40010800
 8005970:	40011400 	.word	0x40011400

08005974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e044      	b.n	8005a10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2278      	movs	r2, #120	; 0x78
 8005992:	2100      	movs	r1, #0
 8005994:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0018      	movs	r0, r3
 800599a:	f7fd fc5f 	bl	800325c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2224      	movs	r2, #36	; 0x24
 80059a2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2101      	movs	r1, #1
 80059b0:	438a      	bics	r2, r1
 80059b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 fc9c 	bl	80062f4 <UART_SetConfig>
 80059bc:	0003      	movs	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e024      	b.n	8005a10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 ff13 	bl	80067fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	490d      	ldr	r1, [pc, #52]	; (8005a18 <HAL_UART_Init+0xa4>)
 80059e2:	400a      	ands	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	212a      	movs	r1, #42	; 0x2a
 80059f2:	438a      	bics	r2, r1
 80059f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2101      	movs	r1, #1
 8005a02:	430a      	orrs	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f000 ffab 	bl	8006964 <UART_CheckIdleState>
 8005a0e:	0003      	movs	r3, r0
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b002      	add	sp, #8
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	ffffb7ff 	.word	0xffffb7ff

08005a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	1dbb      	adds	r3, r7, #6
 8005a2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d000      	beq.n	8005a36 <HAL_UART_Transmit+0x1a>
 8005a34:	e08c      	b.n	8005b50 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_UART_Transmit+0x28>
 8005a3c:	1dbb      	adds	r3, r7, #6
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e084      	b.n	8005b52 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	015b      	lsls	r3, r3, #5
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d109      	bne.n	8005a68 <HAL_UART_Transmit+0x4c>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4013      	ands	r3, r2
 8005a62:	d001      	beq.n	8005a68 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e074      	b.n	8005b52 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2284      	movs	r2, #132	; 0x84
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2221      	movs	r2, #33	; 0x21
 8005a74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a76:	f7fd fd43 	bl	8003500 <HAL_GetTick>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1dba      	adds	r2, r7, #6
 8005a82:	2150      	movs	r1, #80	; 0x50
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1dba      	adds	r2, r7, #6
 8005a8c:	2152      	movs	r1, #82	; 0x52
 8005a8e:	8812      	ldrh	r2, [r2, #0]
 8005a90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	015b      	lsls	r3, r3, #5
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d108      	bne.n	8005ab0 <HAL_UART_Transmit+0x94>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e003      	b.n	8005ab8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ab8:	e02f      	b.n	8005b1a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	0013      	movs	r3, r2
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2180      	movs	r1, #128	; 0x80
 8005ac8:	f000 fff4 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8005acc:	1e03      	subs	r3, r0, #0
 8005ace:	d004      	beq.n	8005ada <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e03b      	b.n	8005b52 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	001a      	movs	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	05d2      	lsls	r2, r2, #23
 8005aec:	0dd2      	lsrs	r2, r2, #23
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	3302      	adds	r3, #2
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e007      	b.n	8005b08 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	781a      	ldrb	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2252      	movs	r2, #82	; 0x52
 8005b0c:	5a9b      	ldrh	r3, [r3, r2]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b299      	uxth	r1, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2252      	movs	r2, #82	; 0x52
 8005b18:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2252      	movs	r2, #82	; 0x52
 8005b1e:	5a9b      	ldrh	r3, [r3, r2]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1c9      	bne.n	8005aba <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	0013      	movs	r3, r2
 8005b30:	2200      	movs	r2, #0
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	f000 ffbe 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8005b38:	1e03      	subs	r3, r0, #0
 8005b3a:	d004      	beq.n	8005b46 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e005      	b.n	8005b52 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b008      	add	sp, #32
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	1dbb      	adds	r3, r7, #6
 8005b68:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d15b      	bne.n	8005c2a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_UART_Transmit_IT+0x24>
 8005b78:	1dbb      	adds	r3, r7, #6
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e053      	b.n	8005c2c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	015b      	lsls	r3, r3, #5
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d109      	bne.n	8005ba4 <HAL_UART_Transmit_IT+0x48>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d001      	beq.n	8005ba4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e043      	b.n	8005c2c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1dba      	adds	r2, r7, #6
 8005bae:	2150      	movs	r1, #80	; 0x50
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1dba      	adds	r2, r7, #6
 8005bb8:	2152      	movs	r1, #82	; 0x52
 8005bba:	8812      	ldrh	r2, [r2, #0]
 8005bbc:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2284      	movs	r2, #132	; 0x84
 8005bc8:	2100      	movs	r1, #0
 8005bca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2221      	movs	r2, #33	; 0x21
 8005bd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	015b      	lsls	r3, r3, #5
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d107      	bne.n	8005bee <HAL_UART_Transmit_IT+0x92>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <HAL_UART_Transmit_IT+0xd8>)
 8005bea:	66da      	str	r2, [r3, #108]	; 0x6c
 8005bec:	e002      	b.n	8005bf4 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <HAL_UART_Transmit_IT+0xdc>)
 8005bf2:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	2301      	movs	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f383 8810 	msr	PRIMASK, r3
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	430a      	orrs	r2, r1
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f383 8810 	msr	PRIMASK, r3
}
 8005c24:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b008      	add	sp, #32
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	08006ec5 	.word	0x08006ec5
 8005c38:	08006e13 	.word	0x08006e13

08005c3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	1dbb      	adds	r3, r7, #6
 8005c48:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	589b      	ldr	r3, [r3, r2]
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d14a      	bne.n	8005cea <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_UART_Receive_IT+0x26>
 8005c5a:	1dbb      	adds	r3, r7, #6
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e042      	b.n	8005cec <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	015b      	lsls	r3, r3, #5
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d109      	bne.n	8005c86 <HAL_UART_Receive_IT+0x4a>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d105      	bne.n	8005c86 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d001      	beq.n	8005c86 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e032      	b.n	8005cec <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <HAL_UART_Receive_IT+0xb8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d020      	beq.n	8005cd8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d019      	beq.n	8005cd8 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca8:	613b      	str	r3, [r7, #16]
  return(result);
 8005caa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f383 8810 	msr	PRIMASK, r3
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2180      	movs	r1, #128	; 0x80
 8005cc6:	04c9      	lsls	r1, r1, #19
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f383 8810 	msr	PRIMASK, r3
}
 8005cd6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cd8:	1dbb      	adds	r3, r7, #6
 8005cda:	881a      	ldrh	r2, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 ff51 	bl	8006b88 <UART_Start_Receive_IT>
 8005ce6:	0003      	movs	r3, r0
 8005ce8:	e000      	b.n	8005cec <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b008      	add	sp, #32
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40004800 	.word	0x40004800

08005cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b0ab      	sub	sp, #172	; 0xac
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	22a4      	movs	r2, #164	; 0xa4
 8005d08:	18b9      	adds	r1, r7, r2
 8005d0a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	20a0      	movs	r0, #160	; 0xa0
 8005d14:	1839      	adds	r1, r7, r0
 8005d16:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	219c      	movs	r1, #156	; 0x9c
 8005d20:	1879      	adds	r1, r7, r1
 8005d22:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d24:	0011      	movs	r1, r2
 8005d26:	18bb      	adds	r3, r7, r2
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a99      	ldr	r2, [pc, #612]	; (8005f90 <HAL_UART_IRQHandler+0x298>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2298      	movs	r2, #152	; 0x98
 8005d30:	18bc      	adds	r4, r7, r2
 8005d32:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005d34:	18bb      	adds	r3, r7, r2
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d114      	bne.n	8005d66 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d3c:	187b      	adds	r3, r7, r1
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2220      	movs	r2, #32
 8005d42:	4013      	ands	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d00a      	beq.n	8005d66 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d100      	bne.n	8005d5a <HAL_UART_IRQHandler+0x62>
 8005d58:	e2a0      	b.n	800629c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	0010      	movs	r0, r2
 8005d62:	4798      	blx	r3
      }
      return;
 8005d64:	e29a      	b.n	800629c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d66:	2398      	movs	r3, #152	; 0x98
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d100      	bne.n	8005d72 <HAL_UART_IRQHandler+0x7a>
 8005d70:	e114      	b.n	8005f9c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d72:	239c      	movs	r3, #156	; 0x9c
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d106      	bne.n	8005d8c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d7e:	23a0      	movs	r3, #160	; 0xa0
 8005d80:	18fb      	adds	r3, r7, r3
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a83      	ldr	r2, [pc, #524]	; (8005f94 <HAL_UART_IRQHandler+0x29c>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	d100      	bne.n	8005d8c <HAL_UART_IRQHandler+0x94>
 8005d8a:	e107      	b.n	8005f9c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d8c:	23a4      	movs	r3, #164	; 0xa4
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	4013      	ands	r3, r2
 8005d96:	d012      	beq.n	8005dbe <HAL_UART_IRQHandler+0xc6>
 8005d98:	23a0      	movs	r3, #160	; 0xa0
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	4013      	ands	r3, r2
 8005da4:	d00b      	beq.n	8005dbe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2201      	movs	r2, #1
 8005dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2284      	movs	r2, #132	; 0x84
 8005db2:	589b      	ldr	r3, [r3, r2]
 8005db4:	2201      	movs	r2, #1
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2184      	movs	r1, #132	; 0x84
 8005dbc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dbe:	23a4      	movs	r3, #164	; 0xa4
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d011      	beq.n	8005dee <HAL_UART_IRQHandler+0xf6>
 8005dca:	239c      	movs	r3, #156	; 0x9c
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2284      	movs	r2, #132	; 0x84
 8005de2:	589b      	ldr	r3, [r3, r2]
 8005de4:	2204      	movs	r2, #4
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2184      	movs	r1, #132	; 0x84
 8005dec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dee:	23a4      	movs	r3, #164	; 0xa4
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2204      	movs	r2, #4
 8005df6:	4013      	ands	r3, r2
 8005df8:	d011      	beq.n	8005e1e <HAL_UART_IRQHandler+0x126>
 8005dfa:	239c      	movs	r3, #156	; 0x9c
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2201      	movs	r2, #1
 8005e02:	4013      	ands	r3, r2
 8005e04:	d00b      	beq.n	8005e1e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2284      	movs	r2, #132	; 0x84
 8005e12:	589b      	ldr	r3, [r3, r2]
 8005e14:	2202      	movs	r2, #2
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2184      	movs	r1, #132	; 0x84
 8005e1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e1e:	23a4      	movs	r3, #164	; 0xa4
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2208      	movs	r2, #8
 8005e26:	4013      	ands	r3, r2
 8005e28:	d017      	beq.n	8005e5a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e2a:	23a0      	movs	r3, #160	; 0xa0
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2220      	movs	r2, #32
 8005e32:	4013      	ands	r3, r2
 8005e34:	d105      	bne.n	8005e42 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e36:	239c      	movs	r3, #156	; 0x9c
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e40:	d00b      	beq.n	8005e5a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2208      	movs	r2, #8
 8005e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2284      	movs	r2, #132	; 0x84
 8005e4e:	589b      	ldr	r3, [r3, r2]
 8005e50:	2208      	movs	r2, #8
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2184      	movs	r1, #132	; 0x84
 8005e58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e5a:	23a4      	movs	r3, #164	; 0xa4
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	4013      	ands	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_UART_IRQHandler+0x198>
 8005e68:	23a0      	movs	r3, #160	; 0xa0
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	04db      	lsls	r3, r3, #19
 8005e72:	4013      	ands	r3, r2
 8005e74:	d00c      	beq.n	8005e90 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2280      	movs	r2, #128	; 0x80
 8005e7c:	0112      	lsls	r2, r2, #4
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2284      	movs	r2, #132	; 0x84
 8005e84:	589b      	ldr	r3, [r3, r2]
 8005e86:	2220      	movs	r2, #32
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2184      	movs	r1, #132	; 0x84
 8005e8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2284      	movs	r2, #132	; 0x84
 8005e94:	589b      	ldr	r3, [r3, r2]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d100      	bne.n	8005e9c <HAL_UART_IRQHandler+0x1a4>
 8005e9a:	e201      	b.n	80062a0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e9c:	23a4      	movs	r3, #164	; 0xa4
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ea8:	23a0      	movs	r3, #160	; 0xa0
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d008      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	0010      	movs	r0, r2
 8005ec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2284      	movs	r2, #132	; 0x84
 8005eca:	589b      	ldr	r3, [r3, r2]
 8005ecc:	2194      	movs	r1, #148	; 0x94
 8005ece:	187a      	adds	r2, r7, r1
 8005ed0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2240      	movs	r2, #64	; 0x40
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d004      	beq.n	8005eea <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2228      	movs	r2, #40	; 0x28
 8005ee6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ee8:	d047      	beq.n	8005f7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 ff15 	bl	8006d1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2240      	movs	r2, #64	; 0x40
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d137      	bne.n	8005f70 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f00:	f3ef 8310 	mrs	r3, PRIMASK
 8005f04:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f08:	2090      	movs	r0, #144	; 0x90
 8005f0a:	183a      	adds	r2, r7, r0
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f14:	f383 8810 	msr	PRIMASK, r3
}
 8005f18:	46c0      	nop			; (mov r8, r8)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2140      	movs	r1, #64	; 0x40
 8005f26:	438a      	bics	r2, r1
 8005f28:	609a      	str	r2, [r3, #8]
 8005f2a:	183b      	adds	r3, r7, r0
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f32:	f383 8810 	msr	PRIMASK, r3
}
 8005f36:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <HAL_UART_IRQHandler+0x2a0>)
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f7fd fecf 	bl	8003cf0 <HAL_DMA_Abort_IT>
 8005f52:	1e03      	subs	r3, r0, #0
 8005f54:	d01a      	beq.n	8005f8c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f60:	0018      	movs	r0, r3
 8005f62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	e012      	b.n	8005f8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f9af 	bl	80062cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	e00d      	b.n	8005f8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 f9aa 	bl	80062cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	e008      	b.n	8005f8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f000 f9a5 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2284      	movs	r2, #132	; 0x84
 8005f86:	2100      	movs	r1, #0
 8005f88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005f8a:	e189      	b.n	80062a0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	46c0      	nop			; (mov r8, r8)
    return;
 8005f8e:	e187      	b.n	80062a0 <HAL_UART_IRQHandler+0x5a8>
 8005f90:	0000080f 	.word	0x0000080f
 8005f94:	04000120 	.word	0x04000120
 8005f98:	08006de5 	.word	0x08006de5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d000      	beq.n	8005fa6 <HAL_UART_IRQHandler+0x2ae>
 8005fa4:	e13b      	b.n	800621e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fa6:	23a4      	movs	r3, #164	; 0xa4
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2210      	movs	r2, #16
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d100      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x2bc>
 8005fb2:	e134      	b.n	800621e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fb4:	23a0      	movs	r3, #160	; 0xa0
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2210      	movs	r2, #16
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d100      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x2ca>
 8005fc0:	e12d      	b.n	800621e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2240      	movs	r2, #64	; 0x40
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d000      	beq.n	8005fda <HAL_UART_IRQHandler+0x2e2>
 8005fd8:	e0a1      	b.n	800611e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	217e      	movs	r1, #126	; 0x7e
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005fe8:	187b      	adds	r3, r7, r1
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d100      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x2fa>
 8005ff0:	e158      	b.n	80062a4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2258      	movs	r2, #88	; 0x58
 8005ff6:	5a9b      	ldrh	r3, [r3, r2]
 8005ff8:	187a      	adds	r2, r7, r1
 8005ffa:	8812      	ldrh	r2, [r2, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d300      	bcc.n	8006002 <HAL_UART_IRQHandler+0x30a>
 8006000:	e150      	b.n	80062a4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	187a      	adds	r2, r7, r1
 8006006:	215a      	movs	r1, #90	; 0x5a
 8006008:	8812      	ldrh	r2, [r2, #0]
 800600a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2220      	movs	r2, #32
 8006016:	4013      	ands	r3, r2
 8006018:	d16f      	bne.n	80060fa <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800601a:	f3ef 8310 	mrs	r3, PRIMASK
 800601e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006022:	67bb      	str	r3, [r7, #120]	; 0x78
 8006024:	2301      	movs	r3, #1
 8006026:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	f383 8810 	msr	PRIMASK, r3
}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	499e      	ldr	r1, [pc, #632]	; (80062b4 <HAL_UART_IRQHandler+0x5bc>)
 800603c:	400a      	ands	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	f383 8810 	msr	PRIMASK, r3
}
 800604a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604c:	f3ef 8310 	mrs	r3, PRIMASK
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	677b      	str	r3, [r7, #116]	; 0x74
 8006056:	2301      	movs	r3, #1
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605c:	f383 8810 	msr	PRIMASK, r3
}
 8006060:	46c0      	nop			; (mov r8, r8)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	438a      	bics	r2, r1
 8006070:	609a      	str	r2, [r3, #8]
 8006072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006078:	f383 8810 	msr	PRIMASK, r3
}
 800607c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607e:	f3ef 8310 	mrs	r3, PRIMASK
 8006082:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006084:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006086:	673b      	str	r3, [r7, #112]	; 0x70
 8006088:	2301      	movs	r3, #1
 800608a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608e:	f383 8810 	msr	PRIMASK, r3
}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2140      	movs	r1, #64	; 0x40
 80060a0:	438a      	bics	r2, r1
 80060a2:	609a      	str	r2, [r3, #8]
 80060a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060aa:	f383 8810 	msr	PRIMASK, r3
}
 80060ae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	2120      	movs	r1, #32
 80060b6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060be:	f3ef 8310 	mrs	r3, PRIMASK
 80060c2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80060c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c8:	2301      	movs	r3, #1
 80060ca:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ce:	f383 8810 	msr	PRIMASK, r3
}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2110      	movs	r1, #16
 80060e0:	438a      	bics	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7fd fdbb 	bl	8003c70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2258      	movs	r2, #88	; 0x58
 8006104:	5a9a      	ldrh	r2, [r3, r2]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	215a      	movs	r1, #90	; 0x5a
 800610a:	5a5b      	ldrh	r3, [r3, r1]
 800610c:	b29b      	uxth	r3, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	b29a      	uxth	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	0011      	movs	r1, r2
 8006116:	0018      	movs	r0, r3
 8006118:	f000 f8e0 	bl	80062dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800611c:	e0c2      	b.n	80062a4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2258      	movs	r2, #88	; 0x58
 8006122:	5a99      	ldrh	r1, [r3, r2]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	225a      	movs	r2, #90	; 0x5a
 8006128:	5a9b      	ldrh	r3, [r3, r2]
 800612a:	b29a      	uxth	r2, r3
 800612c:	208e      	movs	r0, #142	; 0x8e
 800612e:	183b      	adds	r3, r7, r0
 8006130:	1a8a      	subs	r2, r1, r2
 8006132:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	225a      	movs	r2, #90	; 0x5a
 8006138:	5a9b      	ldrh	r3, [r3, r2]
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d100      	bne.n	8006142 <HAL_UART_IRQHandler+0x44a>
 8006140:	e0b2      	b.n	80062a8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006142:	183b      	adds	r3, r7, r0
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d100      	bne.n	800614c <HAL_UART_IRQHandler+0x454>
 800614a:	e0ad      	b.n	80062a8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614c:	f3ef 8310 	mrs	r3, PRIMASK
 8006150:	60fb      	str	r3, [r7, #12]
  return(result);
 8006152:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006154:	2488      	movs	r4, #136	; 0x88
 8006156:	193a      	adds	r2, r7, r4
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	2301      	movs	r3, #1
 800615c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f383 8810 	msr	PRIMASK, r3
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4951      	ldr	r1, [pc, #324]	; (80062b8 <HAL_UART_IRQHandler+0x5c0>)
 8006172:	400a      	ands	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	193b      	adds	r3, r7, r4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006184:	f3ef 8310 	mrs	r3, PRIMASK
 8006188:	61bb      	str	r3, [r7, #24]
  return(result);
 800618a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618c:	2484      	movs	r4, #132	; 0x84
 800618e:	193a      	adds	r2, r7, r4
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	2301      	movs	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f383 8810 	msr	PRIMASK, r3
}
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2101      	movs	r1, #1
 80061aa:	438a      	bics	r2, r1
 80061ac:	609a      	str	r2, [r3, #8]
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	f383 8810 	msr	PRIMASK, r3
}
 80061ba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	2120      	movs	r1, #32
 80061c2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d0:	f3ef 8310 	mrs	r3, PRIMASK
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	2480      	movs	r4, #128	; 0x80
 80061da:	193a      	adds	r2, r7, r4
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	2301      	movs	r3, #1
 80061e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	f383 8810 	msr	PRIMASK, r3
}
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2110      	movs	r1, #16
 80061f6:	438a      	bics	r2, r1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	193b      	adds	r3, r7, r4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	f383 8810 	msr	PRIMASK, r3
}
 8006206:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800620e:	183b      	adds	r3, r7, r0
 8006210:	881a      	ldrh	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	0011      	movs	r1, r2
 8006216:	0018      	movs	r0, r3
 8006218:	f000 f860 	bl	80062dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800621c:	e044      	b.n	80062a8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800621e:	23a4      	movs	r3, #164	; 0xa4
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	035b      	lsls	r3, r3, #13
 8006228:	4013      	ands	r3, r2
 800622a:	d010      	beq.n	800624e <HAL_UART_IRQHandler+0x556>
 800622c:	239c      	movs	r3, #156	; 0x9c
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	2380      	movs	r3, #128	; 0x80
 8006234:	03db      	lsls	r3, r3, #15
 8006236:	4013      	ands	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2280      	movs	r2, #128	; 0x80
 8006240:	0352      	lsls	r2, r2, #13
 8006242:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	0018      	movs	r0, r3
 8006248:	f001 f88a 	bl	8007360 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800624c:	e02f      	b.n	80062ae <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800624e:	23a4      	movs	r3, #164	; 0xa4
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2280      	movs	r2, #128	; 0x80
 8006256:	4013      	ands	r3, r2
 8006258:	d00f      	beq.n	800627a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800625a:	23a0      	movs	r3, #160	; 0xa0
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	4013      	ands	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01e      	beq.n	80062ac <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	0010      	movs	r0, r2
 8006276:	4798      	blx	r3
    }
    return;
 8006278:	e018      	b.n	80062ac <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800627a:	23a4      	movs	r3, #164	; 0xa4
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2240      	movs	r2, #64	; 0x40
 8006282:	4013      	ands	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_UART_IRQHandler+0x5b6>
 8006286:	23a0      	movs	r3, #160	; 0xa0
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2240      	movs	r2, #64	; 0x40
 800628e:	4013      	ands	r3, r2
 8006290:	d00d      	beq.n	80062ae <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0018      	movs	r0, r3
 8006296:	f000 fe73 	bl	8006f80 <UART_EndTransmit_IT>
    return;
 800629a:	e008      	b.n	80062ae <HAL_UART_IRQHandler+0x5b6>
      return;
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	e006      	b.n	80062ae <HAL_UART_IRQHandler+0x5b6>
    return;
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	e004      	b.n	80062ae <HAL_UART_IRQHandler+0x5b6>
      return;
 80062a4:	46c0      	nop			; (mov r8, r8)
 80062a6:	e002      	b.n	80062ae <HAL_UART_IRQHandler+0x5b6>
      return;
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	e000      	b.n	80062ae <HAL_UART_IRQHandler+0x5b6>
    return;
 80062ac:	46c0      	nop			; (mov r8, r8)
  }

}
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b02b      	add	sp, #172	; 0xac
 80062b2:	bd90      	pop	{r4, r7, pc}
 80062b4:	fffffeff 	.word	0xfffffeff
 80062b8:	fffffedf 	.word	0xfffffedf

080062bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062c4:	46c0      	nop			; (mov r8, r8)
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b002      	add	sp, #8
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	000a      	movs	r2, r1
 80062e6:	1cbb      	adds	r3, r7, #2
 80062e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b002      	add	sp, #8
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f4:	b5b0      	push	{r4, r5, r7, lr}
 80062f6:	b08e      	sub	sp, #56	; 0x38
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062fc:	231a      	movs	r3, #26
 80062fe:	2218      	movs	r2, #24
 8006300:	189b      	adds	r3, r3, r2
 8006302:	19db      	adds	r3, r3, r7
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	431a      	orrs	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	431a      	orrs	r2, r3
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	4313      	orrs	r3, r2
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4ac6      	ldr	r2, [pc, #792]	; (8006640 <UART_SetConfig+0x34c>)
 8006328:	4013      	ands	r3, r2
 800632a:	0019      	movs	r1, r3
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006332:	430a      	orrs	r2, r1
 8006334:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4ac1      	ldr	r2, [pc, #772]	; (8006644 <UART_SetConfig+0x350>)
 800633e:	4013      	ands	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4abb      	ldr	r2, [pc, #748]	; (8006648 <UART_SetConfig+0x354>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006364:	4313      	orrs	r3, r2
 8006366:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	4ab7      	ldr	r2, [pc, #732]	; (800664c <UART_SetConfig+0x358>)
 8006370:	4013      	ands	r3, r2
 8006372:	0019      	movs	r1, r3
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637a:	430a      	orrs	r2, r1
 800637c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4ab3      	ldr	r2, [pc, #716]	; (8006650 <UART_SetConfig+0x35c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d131      	bne.n	80063ec <UART_SetConfig+0xf8>
 8006388:	4bb2      	ldr	r3, [pc, #712]	; (8006654 <UART_SetConfig+0x360>)
 800638a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638c:	2203      	movs	r2, #3
 800638e:	4013      	ands	r3, r2
 8006390:	2b03      	cmp	r3, #3
 8006392:	d01d      	beq.n	80063d0 <UART_SetConfig+0xdc>
 8006394:	d823      	bhi.n	80063de <UART_SetConfig+0xea>
 8006396:	2b02      	cmp	r3, #2
 8006398:	d00c      	beq.n	80063b4 <UART_SetConfig+0xc0>
 800639a:	d820      	bhi.n	80063de <UART_SetConfig+0xea>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <UART_SetConfig+0xb2>
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d00e      	beq.n	80063c2 <UART_SetConfig+0xce>
 80063a4:	e01b      	b.n	80063de <UART_SetConfig+0xea>
 80063a6:	231b      	movs	r3, #27
 80063a8:	2218      	movs	r2, #24
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	19db      	adds	r3, r3, r7
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e09c      	b.n	80064ee <UART_SetConfig+0x1fa>
 80063b4:	231b      	movs	r3, #27
 80063b6:	2218      	movs	r2, #24
 80063b8:	189b      	adds	r3, r3, r2
 80063ba:	19db      	adds	r3, r3, r7
 80063bc:	2202      	movs	r2, #2
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	e095      	b.n	80064ee <UART_SetConfig+0x1fa>
 80063c2:	231b      	movs	r3, #27
 80063c4:	2218      	movs	r2, #24
 80063c6:	189b      	adds	r3, r3, r2
 80063c8:	19db      	adds	r3, r3, r7
 80063ca:	2204      	movs	r2, #4
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e08e      	b.n	80064ee <UART_SetConfig+0x1fa>
 80063d0:	231b      	movs	r3, #27
 80063d2:	2218      	movs	r2, #24
 80063d4:	189b      	adds	r3, r3, r2
 80063d6:	19db      	adds	r3, r3, r7
 80063d8:	2208      	movs	r2, #8
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e087      	b.n	80064ee <UART_SetConfig+0x1fa>
 80063de:	231b      	movs	r3, #27
 80063e0:	2218      	movs	r2, #24
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	19db      	adds	r3, r3, r7
 80063e6:	2210      	movs	r2, #16
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e080      	b.n	80064ee <UART_SetConfig+0x1fa>
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a99      	ldr	r2, [pc, #612]	; (8006658 <UART_SetConfig+0x364>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d131      	bne.n	800645a <UART_SetConfig+0x166>
 80063f6:	4b97      	ldr	r3, [pc, #604]	; (8006654 <UART_SetConfig+0x360>)
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	220c      	movs	r2, #12
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b0c      	cmp	r3, #12
 8006400:	d01d      	beq.n	800643e <UART_SetConfig+0x14a>
 8006402:	d823      	bhi.n	800644c <UART_SetConfig+0x158>
 8006404:	2b08      	cmp	r3, #8
 8006406:	d00c      	beq.n	8006422 <UART_SetConfig+0x12e>
 8006408:	d820      	bhi.n	800644c <UART_SetConfig+0x158>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <UART_SetConfig+0x120>
 800640e:	2b04      	cmp	r3, #4
 8006410:	d00e      	beq.n	8006430 <UART_SetConfig+0x13c>
 8006412:	e01b      	b.n	800644c <UART_SetConfig+0x158>
 8006414:	231b      	movs	r3, #27
 8006416:	2218      	movs	r2, #24
 8006418:	189b      	adds	r3, r3, r2
 800641a:	19db      	adds	r3, r3, r7
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e065      	b.n	80064ee <UART_SetConfig+0x1fa>
 8006422:	231b      	movs	r3, #27
 8006424:	2218      	movs	r2, #24
 8006426:	189b      	adds	r3, r3, r2
 8006428:	19db      	adds	r3, r3, r7
 800642a:	2202      	movs	r2, #2
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e05e      	b.n	80064ee <UART_SetConfig+0x1fa>
 8006430:	231b      	movs	r3, #27
 8006432:	2218      	movs	r2, #24
 8006434:	189b      	adds	r3, r3, r2
 8006436:	19db      	adds	r3, r3, r7
 8006438:	2204      	movs	r2, #4
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	e057      	b.n	80064ee <UART_SetConfig+0x1fa>
 800643e:	231b      	movs	r3, #27
 8006440:	2218      	movs	r2, #24
 8006442:	189b      	adds	r3, r3, r2
 8006444:	19db      	adds	r3, r3, r7
 8006446:	2208      	movs	r2, #8
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	e050      	b.n	80064ee <UART_SetConfig+0x1fa>
 800644c:	231b      	movs	r3, #27
 800644e:	2218      	movs	r2, #24
 8006450:	189b      	adds	r3, r3, r2
 8006452:	19db      	adds	r3, r3, r7
 8006454:	2210      	movs	r2, #16
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e049      	b.n	80064ee <UART_SetConfig+0x1fa>
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7a      	ldr	r2, [pc, #488]	; (8006648 <UART_SetConfig+0x354>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d13e      	bne.n	80064e2 <UART_SetConfig+0x1ee>
 8006464:	4b7b      	ldr	r3, [pc, #492]	; (8006654 <UART_SetConfig+0x360>)
 8006466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006468:	23c0      	movs	r3, #192	; 0xc0
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	4013      	ands	r3, r2
 800646e:	22c0      	movs	r2, #192	; 0xc0
 8006470:	0112      	lsls	r2, r2, #4
 8006472:	4293      	cmp	r3, r2
 8006474:	d027      	beq.n	80064c6 <UART_SetConfig+0x1d2>
 8006476:	22c0      	movs	r2, #192	; 0xc0
 8006478:	0112      	lsls	r2, r2, #4
 800647a:	4293      	cmp	r3, r2
 800647c:	d82a      	bhi.n	80064d4 <UART_SetConfig+0x1e0>
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	0112      	lsls	r2, r2, #4
 8006482:	4293      	cmp	r3, r2
 8006484:	d011      	beq.n	80064aa <UART_SetConfig+0x1b6>
 8006486:	2280      	movs	r2, #128	; 0x80
 8006488:	0112      	lsls	r2, r2, #4
 800648a:	4293      	cmp	r3, r2
 800648c:	d822      	bhi.n	80064d4 <UART_SetConfig+0x1e0>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <UART_SetConfig+0x1a8>
 8006492:	2280      	movs	r2, #128	; 0x80
 8006494:	00d2      	lsls	r2, r2, #3
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <UART_SetConfig+0x1c4>
 800649a:	e01b      	b.n	80064d4 <UART_SetConfig+0x1e0>
 800649c:	231b      	movs	r3, #27
 800649e:	2218      	movs	r2, #24
 80064a0:	189b      	adds	r3, r3, r2
 80064a2:	19db      	adds	r3, r3, r7
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e021      	b.n	80064ee <UART_SetConfig+0x1fa>
 80064aa:	231b      	movs	r3, #27
 80064ac:	2218      	movs	r2, #24
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	19db      	adds	r3, r3, r7
 80064b2:	2202      	movs	r2, #2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e01a      	b.n	80064ee <UART_SetConfig+0x1fa>
 80064b8:	231b      	movs	r3, #27
 80064ba:	2218      	movs	r2, #24
 80064bc:	189b      	adds	r3, r3, r2
 80064be:	19db      	adds	r3, r3, r7
 80064c0:	2204      	movs	r2, #4
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e013      	b.n	80064ee <UART_SetConfig+0x1fa>
 80064c6:	231b      	movs	r3, #27
 80064c8:	2218      	movs	r2, #24
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	19db      	adds	r3, r3, r7
 80064ce:	2208      	movs	r2, #8
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e00c      	b.n	80064ee <UART_SetConfig+0x1fa>
 80064d4:	231b      	movs	r3, #27
 80064d6:	2218      	movs	r2, #24
 80064d8:	189b      	adds	r3, r3, r2
 80064da:	19db      	adds	r3, r3, r7
 80064dc:	2210      	movs	r2, #16
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x1fa>
 80064e2:	231b      	movs	r3, #27
 80064e4:	2218      	movs	r2, #24
 80064e6:	189b      	adds	r3, r3, r2
 80064e8:	19db      	adds	r3, r3, r7
 80064ea:	2210      	movs	r2, #16
 80064ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a55      	ldr	r2, [pc, #340]	; (8006648 <UART_SetConfig+0x354>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d000      	beq.n	80064fa <UART_SetConfig+0x206>
 80064f8:	e084      	b.n	8006604 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064fa:	231b      	movs	r3, #27
 80064fc:	2218      	movs	r2, #24
 80064fe:	189b      	adds	r3, r3, r2
 8006500:	19db      	adds	r3, r3, r7
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d01d      	beq.n	8006544 <UART_SetConfig+0x250>
 8006508:	dc20      	bgt.n	800654c <UART_SetConfig+0x258>
 800650a:	2b04      	cmp	r3, #4
 800650c:	d015      	beq.n	800653a <UART_SetConfig+0x246>
 800650e:	dc1d      	bgt.n	800654c <UART_SetConfig+0x258>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <UART_SetConfig+0x226>
 8006514:	2b02      	cmp	r3, #2
 8006516:	d005      	beq.n	8006524 <UART_SetConfig+0x230>
 8006518:	e018      	b.n	800654c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651a:	f7fe fd9d 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 800651e:	0003      	movs	r3, r0
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006522:	e01c      	b.n	800655e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006524:	4b4b      	ldr	r3, [pc, #300]	; (8006654 <UART_SetConfig+0x360>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2210      	movs	r2, #16
 800652a:	4013      	ands	r3, r2
 800652c:	d002      	beq.n	8006534 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800652e:	4b4b      	ldr	r3, [pc, #300]	; (800665c <UART_SetConfig+0x368>)
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006532:	e014      	b.n	800655e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006534:	4b4a      	ldr	r3, [pc, #296]	; (8006660 <UART_SetConfig+0x36c>)
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006538:	e011      	b.n	800655e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653a:	f7fe fcdd 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 800653e:	0003      	movs	r3, r0
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006542:	e00c      	b.n	800655e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800654a:	e008      	b.n	800655e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006550:	231a      	movs	r3, #26
 8006552:	2218      	movs	r2, #24
 8006554:	189b      	adds	r3, r3, r2
 8006556:	19db      	adds	r3, r3, r7
 8006558:	2201      	movs	r2, #1
 800655a:	701a      	strb	r2, [r3, #0]
        break;
 800655c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d100      	bne.n	8006566 <UART_SetConfig+0x272>
 8006564:	e132      	b.n	80067cc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	0013      	movs	r3, r2
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	189b      	adds	r3, r3, r2
 8006570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006572:	429a      	cmp	r2, r3
 8006574:	d305      	bcc.n	8006582 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800657c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657e:	429a      	cmp	r2, r3
 8006580:	d906      	bls.n	8006590 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8006582:	231a      	movs	r3, #26
 8006584:	2218      	movs	r2, #24
 8006586:	189b      	adds	r3, r3, r2
 8006588:	19db      	adds	r3, r3, r7
 800658a:	2201      	movs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	e11d      	b.n	80067cc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	6939      	ldr	r1, [r7, #16]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	000b      	movs	r3, r1
 800659e:	0e1b      	lsrs	r3, r3, #24
 80065a0:	0010      	movs	r0, r2
 80065a2:	0205      	lsls	r5, r0, #8
 80065a4:	431d      	orrs	r5, r3
 80065a6:	000b      	movs	r3, r1
 80065a8:	021c      	lsls	r4, r3, #8
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	60bb      	str	r3, [r7, #8]
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	68b8      	ldr	r0, [r7, #8]
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	1900      	adds	r0, r0, r4
 80065bc:	4169      	adcs	r1, r5
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f7f9 ff6c 	bl	80004a8 <__aeabi_uldivmod>
 80065d0:	0002      	movs	r2, r0
 80065d2:	000b      	movs	r3, r1
 80065d4:	0013      	movs	r3, r2
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065da:	23c0      	movs	r3, #192	; 0xc0
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	429a      	cmp	r2, r3
 80065e0:	d309      	bcc.n	80065f6 <UART_SetConfig+0x302>
 80065e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e4:	2380      	movs	r3, #128	; 0x80
 80065e6:	035b      	lsls	r3, r3, #13
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d204      	bcs.n	80065f6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f2:	60da      	str	r2, [r3, #12]
 80065f4:	e0ea      	b.n	80067cc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80065f6:	231a      	movs	r3, #26
 80065f8:	2218      	movs	r2, #24
 80065fa:	189b      	adds	r3, r3, r2
 80065fc:	19db      	adds	r3, r3, r7
 80065fe:	2201      	movs	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e0e3      	b.n	80067cc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	429a      	cmp	r2, r3
 800660e:	d000      	beq.n	8006612 <UART_SetConfig+0x31e>
 8006610:	e085      	b.n	800671e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8006612:	231b      	movs	r3, #27
 8006614:	2218      	movs	r2, #24
 8006616:	189b      	adds	r3, r3, r2
 8006618:	19db      	adds	r3, r3, r7
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d837      	bhi.n	8006690 <UART_SetConfig+0x39c>
 8006620:	009a      	lsls	r2, r3, #2
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <UART_SetConfig+0x370>)
 8006624:	18d3      	adds	r3, r2, r3
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800662a:	f7fe fd15 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 800662e:	0003      	movs	r3, r0
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006632:	e036      	b.n	80066a2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006634:	f7fe fd26 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8006638:	0003      	movs	r3, r0
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800663c:	e031      	b.n	80066a2 <UART_SetConfig+0x3ae>
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	efff69f3 	.word	0xefff69f3
 8006644:	ffffcfff 	.word	0xffffcfff
 8006648:	40004800 	.word	0x40004800
 800664c:	fffff4ff 	.word	0xfffff4ff
 8006650:	40013800 	.word	0x40013800
 8006654:	40021000 	.word	0x40021000
 8006658:	40004400 	.word	0x40004400
 800665c:	003d0900 	.word	0x003d0900
 8006660:	00f42400 	.word	0x00f42400
 8006664:	0800bd28 	.word	0x0800bd28
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006668:	4b60      	ldr	r3, [pc, #384]	; (80067ec <UART_SetConfig+0x4f8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2210      	movs	r2, #16
 800666e:	4013      	ands	r3, r2
 8006670:	d002      	beq.n	8006678 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006672:	4b5f      	ldr	r3, [pc, #380]	; (80067f0 <UART_SetConfig+0x4fc>)
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006678:	4b5e      	ldr	r3, [pc, #376]	; (80067f4 <UART_SetConfig+0x500>)
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800667c:	e011      	b.n	80066a2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667e:	f7fe fc3b 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8006682:	0003      	movs	r3, r0
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006686:	e00c      	b.n	80066a2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668e:	e008      	b.n	80066a2 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006694:	231a      	movs	r3, #26
 8006696:	2218      	movs	r2, #24
 8006698:	189b      	adds	r3, r3, r2
 800669a:	19db      	adds	r3, r3, r7
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
        break;
 80066a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d100      	bne.n	80066aa <UART_SetConfig+0x3b6>
 80066a8:	e090      	b.n	80067cc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	005a      	lsls	r2, r3, #1
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	18d2      	adds	r2, r2, r3
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	0019      	movs	r1, r3
 80066bc:	0010      	movs	r0, r2
 80066be:	f7f9 fd3f 	bl	8000140 <__udivsi3>
 80066c2:	0003      	movs	r3, r0
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d921      	bls.n	8006710 <UART_SetConfig+0x41c>
 80066cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	025b      	lsls	r3, r3, #9
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d21c      	bcs.n	8006710 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	b29a      	uxth	r2, r3
 80066da:	200e      	movs	r0, #14
 80066dc:	2418      	movs	r4, #24
 80066de:	1903      	adds	r3, r0, r4
 80066e0:	19db      	adds	r3, r3, r7
 80066e2:	210f      	movs	r1, #15
 80066e4:	438a      	bics	r2, r1
 80066e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2207      	movs	r2, #7
 80066f0:	4013      	ands	r3, r2
 80066f2:	b299      	uxth	r1, r3
 80066f4:	1903      	adds	r3, r0, r4
 80066f6:	19db      	adds	r3, r3, r7
 80066f8:	1902      	adds	r2, r0, r4
 80066fa:	19d2      	adds	r2, r2, r7
 80066fc:	8812      	ldrh	r2, [r2, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	1902      	adds	r2, r0, r4
 8006708:	19d2      	adds	r2, r2, r7
 800670a:	8812      	ldrh	r2, [r2, #0]
 800670c:	60da      	str	r2, [r3, #12]
 800670e:	e05d      	b.n	80067cc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006710:	231a      	movs	r3, #26
 8006712:	2218      	movs	r2, #24
 8006714:	189b      	adds	r3, r3, r2
 8006716:	19db      	adds	r3, r3, r7
 8006718:	2201      	movs	r2, #1
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e056      	b.n	80067cc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800671e:	231b      	movs	r3, #27
 8006720:	2218      	movs	r2, #24
 8006722:	189b      	adds	r3, r3, r2
 8006724:	19db      	adds	r3, r3, r7
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d822      	bhi.n	8006772 <UART_SetConfig+0x47e>
 800672c:	009a      	lsls	r2, r3, #2
 800672e:	4b32      	ldr	r3, [pc, #200]	; (80067f8 <UART_SetConfig+0x504>)
 8006730:	18d3      	adds	r3, r2, r3
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006736:	f7fe fc8f 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 800673a:	0003      	movs	r3, r0
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800673e:	e021      	b.n	8006784 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7fe fca0 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8006744:	0003      	movs	r3, r0
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006748:	e01c      	b.n	8006784 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800674a:	4b28      	ldr	r3, [pc, #160]	; (80067ec <UART_SetConfig+0x4f8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2210      	movs	r2, #16
 8006750:	4013      	ands	r3, r2
 8006752:	d002      	beq.n	800675a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006754:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <UART_SetConfig+0x4fc>)
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006758:	e014      	b.n	8006784 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800675a:	4b26      	ldr	r3, [pc, #152]	; (80067f4 <UART_SetConfig+0x500>)
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800675e:	e011      	b.n	8006784 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006760:	f7fe fbca 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8006764:	0003      	movs	r3, r0
 8006766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006768:	e00c      	b.n	8006784 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	2380      	movs	r3, #128	; 0x80
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006770:	e008      	b.n	8006784 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006776:	231a      	movs	r3, #26
 8006778:	2218      	movs	r2, #24
 800677a:	189b      	adds	r3, r3, r2
 800677c:	19db      	adds	r3, r3, r7
 800677e:	2201      	movs	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
        break;
 8006782:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d020      	beq.n	80067cc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085a      	lsrs	r2, r3, #1
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	18d2      	adds	r2, r2, r3
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	0019      	movs	r1, r3
 800679a:	0010      	movs	r0, r2
 800679c:	f7f9 fcd0 	bl	8000140 <__udivsi3>
 80067a0:	0003      	movs	r3, r0
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2b0f      	cmp	r3, #15
 80067a8:	d90a      	bls.n	80067c0 <UART_SetConfig+0x4cc>
 80067aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	025b      	lsls	r3, r3, #9
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d205      	bcs.n	80067c0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60da      	str	r2, [r3, #12]
 80067be:	e005      	b.n	80067cc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80067c0:	231a      	movs	r3, #26
 80067c2:	2218      	movs	r2, #24
 80067c4:	189b      	adds	r3, r3, r2
 80067c6:	19db      	adds	r3, r3, r7
 80067c8:	2201      	movs	r2, #1
 80067ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2200      	movs	r2, #0
 80067d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2200      	movs	r2, #0
 80067d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067d8:	231a      	movs	r3, #26
 80067da:	2218      	movs	r2, #24
 80067dc:	189b      	adds	r3, r3, r2
 80067de:	19db      	adds	r3, r3, r7
 80067e0:	781b      	ldrb	r3, [r3, #0]
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b00e      	add	sp, #56	; 0x38
 80067e8:	bdb0      	pop	{r4, r5, r7, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	40021000 	.word	0x40021000
 80067f0:	003d0900 	.word	0x003d0900
 80067f4:	00f42400 	.word	0x00f42400
 80067f8:	0800bd4c 	.word	0x0800bd4c

080067fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	2201      	movs	r2, #1
 800680a:	4013      	ands	r3, r2
 800680c:	d00b      	beq.n	8006826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4a4a      	ldr	r2, [pc, #296]	; (8006940 <UART_AdvFeatureConfig+0x144>)
 8006816:	4013      	ands	r3, r2
 8006818:	0019      	movs	r1, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	2202      	movs	r2, #2
 800682c:	4013      	ands	r3, r2
 800682e:	d00b      	beq.n	8006848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4a43      	ldr	r2, [pc, #268]	; (8006944 <UART_AdvFeatureConfig+0x148>)
 8006838:	4013      	ands	r3, r2
 800683a:	0019      	movs	r1, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	2204      	movs	r2, #4
 800684e:	4013      	ands	r3, r2
 8006850:	d00b      	beq.n	800686a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4a3b      	ldr	r2, [pc, #236]	; (8006948 <UART_AdvFeatureConfig+0x14c>)
 800685a:	4013      	ands	r3, r2
 800685c:	0019      	movs	r1, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2208      	movs	r2, #8
 8006870:	4013      	ands	r3, r2
 8006872:	d00b      	beq.n	800688c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4a34      	ldr	r2, [pc, #208]	; (800694c <UART_AdvFeatureConfig+0x150>)
 800687c:	4013      	ands	r3, r2
 800687e:	0019      	movs	r1, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2210      	movs	r2, #16
 8006892:	4013      	ands	r3, r2
 8006894:	d00b      	beq.n	80068ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	4a2c      	ldr	r2, [pc, #176]	; (8006950 <UART_AdvFeatureConfig+0x154>)
 800689e:	4013      	ands	r3, r2
 80068a0:	0019      	movs	r1, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	2220      	movs	r2, #32
 80068b4:	4013      	ands	r3, r2
 80068b6:	d00b      	beq.n	80068d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	4a25      	ldr	r2, [pc, #148]	; (8006954 <UART_AdvFeatureConfig+0x158>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	0019      	movs	r1, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	2240      	movs	r2, #64	; 0x40
 80068d6:	4013      	ands	r3, r2
 80068d8:	d01d      	beq.n	8006916 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <UART_AdvFeatureConfig+0x15c>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	0019      	movs	r1, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f6:	2380      	movs	r3, #128	; 0x80
 80068f8:	035b      	lsls	r3, r3, #13
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d10b      	bne.n	8006916 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <UART_AdvFeatureConfig+0x160>)
 8006906:	4013      	ands	r3, r2
 8006908:	0019      	movs	r1, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2280      	movs	r2, #128	; 0x80
 800691c:	4013      	ands	r3, r2
 800691e:	d00b      	beq.n	8006938 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4a0e      	ldr	r2, [pc, #56]	; (8006960 <UART_AdvFeatureConfig+0x164>)
 8006928:	4013      	ands	r3, r2
 800692a:	0019      	movs	r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	b002      	add	sp, #8
 800693e:	bd80      	pop	{r7, pc}
 8006940:	fffdffff 	.word	0xfffdffff
 8006944:	fffeffff 	.word	0xfffeffff
 8006948:	fffbffff 	.word	0xfffbffff
 800694c:	ffff7fff 	.word	0xffff7fff
 8006950:	ffffefff 	.word	0xffffefff
 8006954:	ffffdfff 	.word	0xffffdfff
 8006958:	ffefffff 	.word	0xffefffff
 800695c:	ff9fffff 	.word	0xff9fffff
 8006960:	fff7ffff 	.word	0xfff7ffff

08006964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b092      	sub	sp, #72	; 0x48
 8006968:	af02      	add	r7, sp, #8
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2284      	movs	r2, #132	; 0x84
 8006970:	2100      	movs	r1, #0
 8006972:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006974:	f7fc fdc4 	bl	8003500 <HAL_GetTick>
 8006978:	0003      	movs	r3, r0
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2208      	movs	r2, #8
 8006984:	4013      	ands	r3, r2
 8006986:	2b08      	cmp	r3, #8
 8006988:	d12c      	bne.n	80069e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698c:	2280      	movs	r2, #128	; 0x80
 800698e:	0391      	lsls	r1, r2, #14
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4a46      	ldr	r2, [pc, #280]	; (8006aac <UART_CheckIdleState+0x148>)
 8006994:	9200      	str	r2, [sp, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	f000 f88c 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 800699c:	1e03      	subs	r3, r0, #0
 800699e:	d021      	beq.n	80069e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069aa:	2301      	movs	r3, #1
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	f383 8810 	msr	PRIMASK, r3
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	438a      	bics	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2278      	movs	r2, #120	; 0x78
 80069dc:	2100      	movs	r1, #0
 80069de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e05f      	b.n	8006aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2204      	movs	r2, #4
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d146      	bne.n	8006a80 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f4:	2280      	movs	r2, #128	; 0x80
 80069f6:	03d1      	lsls	r1, r2, #15
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <UART_CheckIdleState+0x148>)
 80069fc:	9200      	str	r2, [sp, #0]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f000 f858 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006a04:	1e03      	subs	r3, r0, #0
 8006a06:	d03b      	beq.n	8006a80 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a08:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
 8006a12:	2301      	movs	r3, #1
 8006a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f383 8810 	msr	PRIMASK, r3
}
 8006a1c:	46c0      	nop			; (mov r8, r8)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4921      	ldr	r1, [pc, #132]	; (8006ab0 <UART_CheckIdleState+0x14c>)
 8006a2a:	400a      	ands	r2, r1
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f383 8810 	msr	PRIMASK, r3
}
 8006a38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a40:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	633b      	str	r3, [r7, #48]	; 0x30
 8006a44:	2301      	movs	r3, #1
 8006a46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	f383 8810 	msr	PRIMASK, r3
}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	438a      	bics	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	f383 8810 	msr	PRIMASK, r3
}
 8006a6a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2280      	movs	r2, #128	; 0x80
 8006a70:	2120      	movs	r1, #32
 8006a72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2278      	movs	r2, #120	; 0x78
 8006a78:	2100      	movs	r1, #0
 8006a7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e011      	b.n	8006aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2280      	movs	r2, #128	; 0x80
 8006a8a:	2120      	movs	r1, #32
 8006a8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2278      	movs	r2, #120	; 0x78
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b010      	add	sp, #64	; 0x40
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	01ffffff 	.word	0x01ffffff
 8006ab0:	fffffedf 	.word	0xfffffedf

08006ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	1dfb      	adds	r3, r7, #7
 8006ac2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac4:	e04b      	b.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	d048      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006acc:	f7fc fd18 	bl	8003500 <HAL_GetTick>
 8006ad0:	0002      	movs	r2, r0
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d302      	bcc.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e04b      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2204      	movs	r2, #4
 8006aee:	4013      	ands	r3, r2
 8006af0:	d035      	beq.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	2208      	movs	r2, #8
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d111      	bne.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2208      	movs	r2, #8
 8006b06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f000 f906 	bl	8006d1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2284      	movs	r2, #132	; 0x84
 8006b14:	2108      	movs	r1, #8
 8006b16:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2278      	movs	r2, #120	; 0x78
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e02c      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69da      	ldr	r2, [r3, #28]
 8006b2a:	2380      	movs	r3, #128	; 0x80
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	401a      	ands	r2, r3
 8006b30:	2380      	movs	r3, #128	; 0x80
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d112      	bne.n	8006b5e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2280      	movs	r2, #128	; 0x80
 8006b3e:	0112      	lsls	r2, r2, #4
 8006b40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	0018      	movs	r0, r3
 8006b46:	f000 f8e9 	bl	8006d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2284      	movs	r2, #132	; 0x84
 8006b4e:	2120      	movs	r1, #32
 8006b50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2278      	movs	r2, #120	; 0x78
 8006b56:	2100      	movs	r1, #0
 8006b58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e00f      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	425a      	negs	r2, r3
 8006b6e:	4153      	adcs	r3, r2
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	001a      	movs	r2, r3
 8006b74:	1dfb      	adds	r3, r7, #7
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d0a4      	beq.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	0018      	movs	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b004      	add	sp, #16
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b090      	sub	sp, #64	; 0x40
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	1dbb      	adds	r3, r7, #6
 8006b94:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1dba      	adds	r2, r7, #6
 8006ba0:	2158      	movs	r1, #88	; 0x58
 8006ba2:	8812      	ldrh	r2, [r2, #0]
 8006ba4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	1dba      	adds	r2, r7, #6
 8006baa:	215a      	movs	r1, #90	; 0x5a
 8006bac:	8812      	ldrh	r2, [r2, #0]
 8006bae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	2380      	movs	r3, #128	; 0x80
 8006bbc:	015b      	lsls	r3, r3, #5
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d10d      	bne.n	8006bde <UART_Start_Receive_IT+0x56>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <UART_Start_Receive_IT+0x4c>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	225c      	movs	r2, #92	; 0x5c
 8006bce:	4950      	ldr	r1, [pc, #320]	; (8006d10 <UART_Start_Receive_IT+0x188>)
 8006bd0:	5299      	strh	r1, [r3, r2]
 8006bd2:	e02e      	b.n	8006c32 <UART_Start_Receive_IT+0xaa>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	225c      	movs	r2, #92	; 0x5c
 8006bd8:	21ff      	movs	r1, #255	; 0xff
 8006bda:	5299      	strh	r1, [r3, r2]
 8006bdc:	e029      	b.n	8006c32 <UART_Start_Receive_IT+0xaa>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10d      	bne.n	8006c02 <UART_Start_Receive_IT+0x7a>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <UART_Start_Receive_IT+0x70>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	225c      	movs	r2, #92	; 0x5c
 8006bf2:	21ff      	movs	r1, #255	; 0xff
 8006bf4:	5299      	strh	r1, [r3, r2]
 8006bf6:	e01c      	b.n	8006c32 <UART_Start_Receive_IT+0xaa>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	225c      	movs	r2, #92	; 0x5c
 8006bfc:	217f      	movs	r1, #127	; 0x7f
 8006bfe:	5299      	strh	r1, [r3, r2]
 8006c00:	e017      	b.n	8006c32 <UART_Start_Receive_IT+0xaa>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	2380      	movs	r3, #128	; 0x80
 8006c08:	055b      	lsls	r3, r3, #21
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d10d      	bne.n	8006c2a <UART_Start_Receive_IT+0xa2>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <UART_Start_Receive_IT+0x98>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	225c      	movs	r2, #92	; 0x5c
 8006c1a:	217f      	movs	r1, #127	; 0x7f
 8006c1c:	5299      	strh	r1, [r3, r2]
 8006c1e:	e008      	b.n	8006c32 <UART_Start_Receive_IT+0xaa>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	225c      	movs	r2, #92	; 0x5c
 8006c24:	213f      	movs	r1, #63	; 0x3f
 8006c26:	5299      	strh	r1, [r3, r2]
 8006c28:	e003      	b.n	8006c32 <UART_Start_Receive_IT+0xaa>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	225c      	movs	r2, #92	; 0x5c
 8006c2e:	2100      	movs	r1, #0
 8006c30:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2284      	movs	r2, #132	; 0x84
 8006c36:	2100      	movs	r1, #0
 8006c38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2280      	movs	r2, #128	; 0x80
 8006c3e:	2122      	movs	r1, #34	; 0x22
 8006c40:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c42:	f3ef 8310 	mrs	r3, PRIMASK
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2101      	movs	r1, #1
 8006c64:	430a      	orrs	r2, r1
 8006c66:	609a      	str	r2, [r3, #8]
 8006c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	f383 8810 	msr	PRIMASK, r3
}
 8006c72:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	015b      	lsls	r3, r3, #5
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d107      	bne.n	8006c90 <UART_Start_Receive_IT+0x108>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d103      	bne.n	8006c90 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a22      	ldr	r2, [pc, #136]	; (8006d14 <UART_Start_Receive_IT+0x18c>)
 8006c8c:	669a      	str	r2, [r3, #104]	; 0x68
 8006c8e:	e002      	b.n	8006c96 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a21      	ldr	r2, [pc, #132]	; (8006d18 <UART_Start_Receive_IT+0x190>)
 8006c94:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d019      	beq.n	8006cd2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca2:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ca4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca8:	2301      	movs	r3, #1
 8006caa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	f383 8810 	msr	PRIMASK, r3
}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2190      	movs	r1, #144	; 0x90
 8006cc0:	0049      	lsls	r1, r1, #1
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	f383 8810 	msr	PRIMASK, r3
}
 8006cd0:	e018      	b.n	8006d04 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd6:	613b      	str	r3, [r7, #16]
  return(result);
 8006cd8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cdc:	2301      	movs	r3, #1
 8006cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2120      	movs	r1, #32
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f383 8810 	msr	PRIMASK, r3
}
 8006d02:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	0018      	movs	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b010      	add	sp, #64	; 0x40
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	000001ff 	.word	0x000001ff
 8006d14:	0800719d 	.word	0x0800719d
 8006d18:	08006fd9 	.word	0x08006fd9

08006d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d24:	f3ef 8310 	mrs	r3, PRIMASK
 8006d28:	617b      	str	r3, [r7, #20]
  return(result);
 8006d2a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2e:	2301      	movs	r3, #1
 8006d30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f383 8810 	msr	PRIMASK, r3
}
 8006d38:	46c0      	nop			; (mov r8, r8)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4926      	ldr	r1, [pc, #152]	; (8006de0 <UART_EndRxTransfer+0xc4>)
 8006d46:	400a      	ands	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f383 8810 	msr	PRIMASK, r3
}
 8006d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d56:	f3ef 8310 	mrs	r3, PRIMASK
 8006d5a:	623b      	str	r3, [r7, #32]
  return(result);
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d60:	2301      	movs	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	f383 8810 	msr	PRIMASK, r3
}
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2101      	movs	r1, #1
 8006d78:	438a      	bics	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	f383 8810 	msr	PRIMASK, r3
}
 8006d86:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d118      	bne.n	8006dc2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d90:	f3ef 8310 	mrs	r3, PRIMASK
 8006d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d96:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f383 8810 	msr	PRIMASK, r3
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2110      	movs	r1, #16
 8006db2:	438a      	bics	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f383 8810 	msr	PRIMASK, r3
}
 8006dc0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2280      	movs	r2, #128	; 0x80
 8006dc6:	2120      	movs	r1, #32
 8006dc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b00e      	add	sp, #56	; 0x38
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	fffffedf 	.word	0xfffffedf

08006de4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	225a      	movs	r2, #90	; 0x5a
 8006df6:	2100      	movs	r1, #0
 8006df8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2252      	movs	r2, #82	; 0x52
 8006dfe:	2100      	movs	r1, #0
 8006e00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7ff fa61 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b004      	add	sp, #16
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b08a      	sub	sp, #40	; 0x28
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e1e:	2b21      	cmp	r3, #33	; 0x21
 8006e20:	d14c      	bne.n	8006ebc <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2252      	movs	r2, #82	; 0x52
 8006e26:	5a9b      	ldrh	r3, [r3, r2]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d132      	bne.n	8006e94 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e32:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e34:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
 8006e38:	2301      	movs	r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f383 8810 	msr	PRIMASK, r3
}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	438a      	bics	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f383 8810 	msr	PRIMASK, r3
}
 8006e5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e60:	f3ef 8310 	mrs	r3, PRIMASK
 8006e64:	617b      	str	r3, [r7, #20]
  return(result);
 8006e66:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f383 8810 	msr	PRIMASK, r3
}
 8006e74:	46c0      	nop			; (mov r8, r8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f383 8810 	msr	PRIMASK, r3
}
 8006e90:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e92:	e013      	b.n	8006ebc <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2252      	movs	r2, #82	; 0x52
 8006eae:	5a9b      	ldrh	r3, [r3, r2]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b299      	uxth	r1, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2252      	movs	r2, #82	; 0x52
 8006eba:	5299      	strh	r1, [r3, r2]
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b00a      	add	sp, #40	; 0x28
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08c      	sub	sp, #48	; 0x30
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed0:	2b21      	cmp	r3, #33	; 0x21
 8006ed2:	d151      	bne.n	8006f78 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2252      	movs	r2, #82	; 0x52
 8006ed8:	5a9b      	ldrh	r3, [r3, r2]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d132      	bne.n	8006f46 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eea:	2301      	movs	r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f383 8810 	msr	PRIMASK, r3
}
 8006ef4:	46c0      	nop			; (mov r8, r8)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2180      	movs	r1, #128	; 0x80
 8006f02:	438a      	bics	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f383 8810 	msr	PRIMASK, r3
}
 8006f10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f12:	f3ef 8310 	mrs	r3, PRIMASK
 8006f16:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f18:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f383 8810 	msr	PRIMASK, r3
}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2140      	movs	r1, #64	; 0x40
 8006f34:	430a      	orrs	r2, r1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	f383 8810 	msr	PRIMASK, r3
}
 8006f42:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006f44:	e018      	b.n	8006f78 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	001a      	movs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	05d2      	lsls	r2, r2, #23
 8006f58:	0dd2      	lsrs	r2, r2, #23
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f60:	1c9a      	adds	r2, r3, #2
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2252      	movs	r2, #82	; 0x52
 8006f6a:	5a9b      	ldrh	r3, [r3, r2]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b299      	uxth	r1, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2252      	movs	r2, #82	; 0x52
 8006f76:	5299      	strh	r1, [r3, r2]
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b00c      	add	sp, #48	; 0x30
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f88:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	2301      	movs	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f383 8810 	msr	PRIMASK, r3
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2140      	movs	r1, #64	; 0x40
 8006faa:	438a      	bics	r2, r1
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f383 8810 	msr	PRIMASK, r3
}
 8006fb8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7ff f977 	bl	80062bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b006      	add	sp, #24
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b094      	sub	sp, #80	; 0x50
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fe0:	204e      	movs	r0, #78	; 0x4e
 8006fe2:	183b      	adds	r3, r7, r0
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	215c      	movs	r1, #92	; 0x5c
 8006fe8:	5a52      	ldrh	r2, [r2, r1]
 8006fea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	589b      	ldr	r3, [r3, r2]
 8006ff2:	2b22      	cmp	r3, #34	; 0x22
 8006ff4:	d000      	beq.n	8006ff8 <UART_RxISR_8BIT+0x20>
 8006ff6:	e0bf      	b.n	8007178 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ffe:	214c      	movs	r1, #76	; 0x4c
 8007000:	187b      	adds	r3, r7, r1
 8007002:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007004:	187b      	adds	r3, r7, r1
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	183b      	adds	r3, r7, r0
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b2d9      	uxtb	r1, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007014:	400a      	ands	r2, r1
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	225a      	movs	r2, #90	; 0x5a
 8007028:	5a9b      	ldrh	r3, [r3, r2]
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b299      	uxth	r1, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	225a      	movs	r2, #90	; 0x5a
 8007034:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	225a      	movs	r2, #90	; 0x5a
 800703a:	5a9b      	ldrh	r3, [r3, r2]
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d000      	beq.n	8007044 <UART_RxISR_8BIT+0x6c>
 8007042:	e0a1      	b.n	8007188 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007044:	f3ef 8310 	mrs	r3, PRIMASK
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800704c:	64bb      	str	r3, [r7, #72]	; 0x48
 800704e:	2301      	movs	r3, #1
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	f383 8810 	msr	PRIMASK, r3
}
 8007058:	46c0      	nop			; (mov r8, r8)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	494a      	ldr	r1, [pc, #296]	; (8007190 <UART_RxISR_8BIT+0x1b8>)
 8007066:	400a      	ands	r2, r1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	f383 8810 	msr	PRIMASK, r3
}
 8007074:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007076:	f3ef 8310 	mrs	r3, PRIMASK
 800707a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707e:	647b      	str	r3, [r7, #68]	; 0x44
 8007080:	2301      	movs	r3, #1
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	f383 8810 	msr	PRIMASK, r3
}
 800708a:	46c0      	nop			; (mov r8, r8)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2101      	movs	r1, #1
 8007098:	438a      	bics	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
 800709c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800709e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	f383 8810 	msr	PRIMASK, r3
}
 80070a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2280      	movs	r2, #128	; 0x80
 80070ac:	2120      	movs	r1, #32
 80070ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a34      	ldr	r2, [pc, #208]	; (8007194 <UART_RxISR_8BIT+0x1bc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01f      	beq.n	8007106 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	4013      	ands	r3, r2
 80070d2:	d018      	beq.n	8007106 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d4:	f3ef 8310 	mrs	r3, PRIMASK
 80070d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80070da:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
 80070de:	2301      	movs	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f383 8810 	msr	PRIMASK, r3
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4928      	ldr	r1, [pc, #160]	; (8007198 <UART_RxISR_8BIT+0x1c0>)
 80070f6:	400a      	ands	r2, r1
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	f383 8810 	msr	PRIMASK, r3
}
 8007104:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	2b01      	cmp	r3, #1
 800710c:	d12f      	bne.n	800716e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007114:	f3ef 8310 	mrs	r3, PRIMASK
 8007118:	60fb      	str	r3, [r7, #12]
  return(result);
 800711a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800711e:	2301      	movs	r3, #1
 8007120:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f383 8810 	msr	PRIMASK, r3
}
 8007128:	46c0      	nop			; (mov r8, r8)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2110      	movs	r1, #16
 8007136:	438a      	bics	r2, r1
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f383 8810 	msr	PRIMASK, r3
}
 8007144:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	2210      	movs	r2, #16
 800714e:	4013      	ands	r3, r2
 8007150:	2b10      	cmp	r3, #16
 8007152:	d103      	bne.n	800715c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2210      	movs	r2, #16
 800715a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2258      	movs	r2, #88	; 0x58
 8007160:	5a9a      	ldrh	r2, [r3, r2]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	0011      	movs	r1, r2
 8007166:	0018      	movs	r0, r3
 8007168:	f7ff f8b8 	bl	80062dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800716c:	e00c      	b.n	8007188 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0018      	movs	r0, r3
 8007172:	f7fb fca9 	bl	8002ac8 <HAL_UART_RxCpltCallback>
}
 8007176:	e007      	b.n	8007188 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2108      	movs	r1, #8
 8007184:	430a      	orrs	r2, r1
 8007186:	619a      	str	r2, [r3, #24]
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b014      	add	sp, #80	; 0x50
 800718e:	bd80      	pop	{r7, pc}
 8007190:	fffffedf 	.word	0xfffffedf
 8007194:	40004800 	.word	0x40004800
 8007198:	fbffffff 	.word	0xfbffffff

0800719c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b094      	sub	sp, #80	; 0x50
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80071a4:	204e      	movs	r0, #78	; 0x4e
 80071a6:	183b      	adds	r3, r7, r0
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	215c      	movs	r1, #92	; 0x5c
 80071ac:	5a52      	ldrh	r2, [r2, r1]
 80071ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2280      	movs	r2, #128	; 0x80
 80071b4:	589b      	ldr	r3, [r3, r2]
 80071b6:	2b22      	cmp	r3, #34	; 0x22
 80071b8:	d000      	beq.n	80071bc <UART_RxISR_16BIT+0x20>
 80071ba:	e0bf      	b.n	800733c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071c2:	214c      	movs	r1, #76	; 0x4c
 80071c4:	187b      	adds	r3, r7, r1
 80071c6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071cc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80071ce:	187b      	adds	r3, r7, r1
 80071d0:	183a      	adds	r2, r7, r0
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	8812      	ldrh	r2, [r2, #0]
 80071d6:	4013      	ands	r3, r2
 80071d8:	b29a      	uxth	r2, r3
 80071da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	225a      	movs	r2, #90	; 0x5a
 80071ec:	5a9b      	ldrh	r3, [r3, r2]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b299      	uxth	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	225a      	movs	r2, #90	; 0x5a
 80071f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	225a      	movs	r2, #90	; 0x5a
 80071fe:	5a9b      	ldrh	r3, [r3, r2]
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d000      	beq.n	8007208 <UART_RxISR_16BIT+0x6c>
 8007206:	e0a1      	b.n	800734c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007208:	f3ef 8310 	mrs	r3, PRIMASK
 800720c:	623b      	str	r3, [r7, #32]
  return(result);
 800720e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007210:	647b      	str	r3, [r7, #68]	; 0x44
 8007212:	2301      	movs	r3, #1
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	f383 8810 	msr	PRIMASK, r3
}
 800721c:	46c0      	nop			; (mov r8, r8)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	494a      	ldr	r1, [pc, #296]	; (8007354 <UART_RxISR_16BIT+0x1b8>)
 800722a:	400a      	ands	r2, r1
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	f383 8810 	msr	PRIMASK, r3
}
 8007238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800723a:	f3ef 8310 	mrs	r3, PRIMASK
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	643b      	str	r3, [r7, #64]	; 0x40
 8007244:	2301      	movs	r3, #1
 8007246:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f383 8810 	msr	PRIMASK, r3
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2101      	movs	r1, #1
 800725c:	438a      	bics	r2, r1
 800725e:	609a      	str	r2, [r3, #8]
 8007260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007266:	f383 8810 	msr	PRIMASK, r3
}
 800726a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2280      	movs	r2, #128	; 0x80
 8007270:	2120      	movs	r1, #32
 8007272:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a34      	ldr	r2, [pc, #208]	; (8007358 <UART_RxISR_16BIT+0x1bc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01f      	beq.n	80072ca <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	041b      	lsls	r3, r3, #16
 8007294:	4013      	ands	r3, r2
 8007296:	d018      	beq.n	80072ca <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007298:	f3ef 8310 	mrs	r3, PRIMASK
 800729c:	617b      	str	r3, [r7, #20]
  return(result);
 800729e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a2:	2301      	movs	r3, #1
 80072a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f383 8810 	msr	PRIMASK, r3
}
 80072ac:	46c0      	nop			; (mov r8, r8)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4928      	ldr	r1, [pc, #160]	; (800735c <UART_RxISR_16BIT+0x1c0>)
 80072ba:	400a      	ands	r2, r1
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	f383 8810 	msr	PRIMASK, r3
}
 80072c8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d12f      	bne.n	8007332 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d8:	f3ef 8310 	mrs	r3, PRIMASK
 80072dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80072de:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072e2:	2301      	movs	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f383 8810 	msr	PRIMASK, r3
}
 80072ec:	46c0      	nop			; (mov r8, r8)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2110      	movs	r1, #16
 80072fa:	438a      	bics	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	2210      	movs	r2, #16
 8007312:	4013      	ands	r3, r2
 8007314:	2b10      	cmp	r3, #16
 8007316:	d103      	bne.n	8007320 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2210      	movs	r2, #16
 800731e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2258      	movs	r2, #88	; 0x58
 8007324:	5a9a      	ldrh	r2, [r3, r2]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0011      	movs	r1, r2
 800732a:	0018      	movs	r0, r3
 800732c:	f7fe ffd6 	bl	80062dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007330:	e00c      	b.n	800734c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	0018      	movs	r0, r3
 8007336:	f7fb fbc7 	bl	8002ac8 <HAL_UART_RxCpltCallback>
}
 800733a:	e007      	b.n	800734c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2108      	movs	r1, #8
 8007348:	430a      	orrs	r2, r1
 800734a:	619a      	str	r2, [r3, #24]
}
 800734c:	46c0      	nop			; (mov r8, r8)
 800734e:	46bd      	mov	sp, r7
 8007350:	b014      	add	sp, #80	; 0x50
 8007352:	bd80      	pop	{r7, pc}
 8007354:	fffffedf 	.word	0xfffffedf
 8007358:	40004800 	.word	0x40004800
 800735c:	fbffffff 	.word	0xfbffffff

08007360 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007368:	46c0      	nop			; (mov r8, r8)
 800736a:	46bd      	mov	sp, r7
 800736c:	b002      	add	sp, #8
 800736e:	bd80      	pop	{r7, pc}

08007370 <sulp>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	0016      	movs	r6, r2
 8007374:	000d      	movs	r5, r1
 8007376:	f003 fe5d 	bl	800b034 <__ulp>
 800737a:	2e00      	cmp	r6, #0
 800737c:	d00d      	beq.n	800739a <sulp+0x2a>
 800737e:	236b      	movs	r3, #107	; 0x6b
 8007380:	006a      	lsls	r2, r5, #1
 8007382:	0d52      	lsrs	r2, r2, #21
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	dd07      	ble.n	800739a <sulp+0x2a>
 800738a:	2400      	movs	r4, #0
 800738c:	4a03      	ldr	r2, [pc, #12]	; (800739c <sulp+0x2c>)
 800738e:	051b      	lsls	r3, r3, #20
 8007390:	189d      	adds	r5, r3, r2
 8007392:	002b      	movs	r3, r5
 8007394:	0022      	movs	r2, r4
 8007396:	f7fa f96b 	bl	8001670 <__aeabi_dmul>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	3ff00000 	.word	0x3ff00000

080073a0 <_strtod_l>:
 80073a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073a2:	b0a1      	sub	sp, #132	; 0x84
 80073a4:	9219      	str	r2, [sp, #100]	; 0x64
 80073a6:	2200      	movs	r2, #0
 80073a8:	2600      	movs	r6, #0
 80073aa:	2700      	movs	r7, #0
 80073ac:	9004      	str	r0, [sp, #16]
 80073ae:	9107      	str	r1, [sp, #28]
 80073b0:	921c      	str	r2, [sp, #112]	; 0x70
 80073b2:	911b      	str	r1, [sp, #108]	; 0x6c
 80073b4:	780a      	ldrb	r2, [r1, #0]
 80073b6:	2a2b      	cmp	r2, #43	; 0x2b
 80073b8:	d055      	beq.n	8007466 <_strtod_l+0xc6>
 80073ba:	d841      	bhi.n	8007440 <_strtod_l+0xa0>
 80073bc:	2a0d      	cmp	r2, #13
 80073be:	d83b      	bhi.n	8007438 <_strtod_l+0x98>
 80073c0:	2a08      	cmp	r2, #8
 80073c2:	d83b      	bhi.n	800743c <_strtod_l+0x9c>
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	d044      	beq.n	8007452 <_strtod_l+0xb2>
 80073c8:	2200      	movs	r2, #0
 80073ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80073cc:	2100      	movs	r1, #0
 80073ce:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80073d0:	9109      	str	r1, [sp, #36]	; 0x24
 80073d2:	782a      	ldrb	r2, [r5, #0]
 80073d4:	2a30      	cmp	r2, #48	; 0x30
 80073d6:	d000      	beq.n	80073da <_strtod_l+0x3a>
 80073d8:	e085      	b.n	80074e6 <_strtod_l+0x146>
 80073da:	786a      	ldrb	r2, [r5, #1]
 80073dc:	3120      	adds	r1, #32
 80073de:	438a      	bics	r2, r1
 80073e0:	2a58      	cmp	r2, #88	; 0x58
 80073e2:	d000      	beq.n	80073e6 <_strtod_l+0x46>
 80073e4:	e075      	b.n	80074d2 <_strtod_l+0x132>
 80073e6:	9302      	str	r3, [sp, #8]
 80073e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073ea:	4a97      	ldr	r2, [pc, #604]	; (8007648 <_strtod_l+0x2a8>)
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	ab1c      	add	r3, sp, #112	; 0x70
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	9804      	ldr	r0, [sp, #16]
 80073f4:	ab1d      	add	r3, sp, #116	; 0x74
 80073f6:	a91b      	add	r1, sp, #108	; 0x6c
 80073f8:	f002 fed4 	bl	800a1a4 <__gethex>
 80073fc:	230f      	movs	r3, #15
 80073fe:	0002      	movs	r2, r0
 8007400:	401a      	ands	r2, r3
 8007402:	0004      	movs	r4, r0
 8007404:	9205      	str	r2, [sp, #20]
 8007406:	4218      	tst	r0, r3
 8007408:	d005      	beq.n	8007416 <_strtod_l+0x76>
 800740a:	2a06      	cmp	r2, #6
 800740c:	d12d      	bne.n	800746a <_strtod_l+0xca>
 800740e:	1c6b      	adds	r3, r5, #1
 8007410:	931b      	str	r3, [sp, #108]	; 0x6c
 8007412:	2300      	movs	r3, #0
 8007414:	930f      	str	r3, [sp, #60]	; 0x3c
 8007416:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <_strtod_l+0x82>
 800741c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800741e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01b      	beq.n	8007460 <_strtod_l+0xc0>
 8007428:	2380      	movs	r3, #128	; 0x80
 800742a:	0032      	movs	r2, r6
 800742c:	061b      	lsls	r3, r3, #24
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	0010      	movs	r0, r2
 8007432:	0019      	movs	r1, r3
 8007434:	b021      	add	sp, #132	; 0x84
 8007436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007438:	2a20      	cmp	r2, #32
 800743a:	d1c5      	bne.n	80073c8 <_strtod_l+0x28>
 800743c:	3101      	adds	r1, #1
 800743e:	e7b8      	b.n	80073b2 <_strtod_l+0x12>
 8007440:	2a2d      	cmp	r2, #45	; 0x2d
 8007442:	d1c1      	bne.n	80073c8 <_strtod_l+0x28>
 8007444:	3a2c      	subs	r2, #44	; 0x2c
 8007446:	920f      	str	r2, [sp, #60]	; 0x3c
 8007448:	1c4a      	adds	r2, r1, #1
 800744a:	921b      	str	r2, [sp, #108]	; 0x6c
 800744c:	784a      	ldrb	r2, [r1, #1]
 800744e:	2a00      	cmp	r2, #0
 8007450:	d1bc      	bne.n	80073cc <_strtod_l+0x2c>
 8007452:	9b07      	ldr	r3, [sp, #28]
 8007454:	931b      	str	r3, [sp, #108]	; 0x6c
 8007456:	2300      	movs	r3, #0
 8007458:	930f      	str	r3, [sp, #60]	; 0x3c
 800745a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1dd      	bne.n	800741c <_strtod_l+0x7c>
 8007460:	0032      	movs	r2, r6
 8007462:	003b      	movs	r3, r7
 8007464:	e7e4      	b.n	8007430 <_strtod_l+0x90>
 8007466:	2200      	movs	r2, #0
 8007468:	e7ed      	b.n	8007446 <_strtod_l+0xa6>
 800746a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800746c:	2a00      	cmp	r2, #0
 800746e:	d007      	beq.n	8007480 <_strtod_l+0xe0>
 8007470:	2135      	movs	r1, #53	; 0x35
 8007472:	a81e      	add	r0, sp, #120	; 0x78
 8007474:	f003 fecf 	bl	800b216 <__copybits>
 8007478:	991c      	ldr	r1, [sp, #112]	; 0x70
 800747a:	9804      	ldr	r0, [sp, #16]
 800747c:	f003 fa98 	bl	800a9b0 <_Bfree>
 8007480:	9805      	ldr	r0, [sp, #20]
 8007482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007484:	3801      	subs	r0, #1
 8007486:	2804      	cmp	r0, #4
 8007488:	d806      	bhi.n	8007498 <_strtod_l+0xf8>
 800748a:	f7f8 fe45 	bl	8000118 <__gnu_thumb1_case_uqi>
 800748e:	0312      	.short	0x0312
 8007490:	1e1c      	.short	0x1e1c
 8007492:	12          	.byte	0x12
 8007493:	00          	.byte	0x00
 8007494:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007496:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007498:	05e4      	lsls	r4, r4, #23
 800749a:	d502      	bpl.n	80074a2 <_strtod_l+0x102>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	061b      	lsls	r3, r3, #24
 80074a0:	431f      	orrs	r7, r3
 80074a2:	4b6a      	ldr	r3, [pc, #424]	; (800764c <_strtod_l+0x2ac>)
 80074a4:	423b      	tst	r3, r7
 80074a6:	d1b6      	bne.n	8007416 <_strtod_l+0x76>
 80074a8:	f001 fede 	bl	8009268 <__errno>
 80074ac:	2322      	movs	r3, #34	; 0x22
 80074ae:	6003      	str	r3, [r0, #0]
 80074b0:	e7b1      	b.n	8007416 <_strtod_l+0x76>
 80074b2:	4967      	ldr	r1, [pc, #412]	; (8007650 <_strtod_l+0x2b0>)
 80074b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80074b6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80074b8:	400a      	ands	r2, r1
 80074ba:	4966      	ldr	r1, [pc, #408]	; (8007654 <_strtod_l+0x2b4>)
 80074bc:	185b      	adds	r3, r3, r1
 80074be:	051b      	lsls	r3, r3, #20
 80074c0:	431a      	orrs	r2, r3
 80074c2:	0017      	movs	r7, r2
 80074c4:	e7e8      	b.n	8007498 <_strtod_l+0xf8>
 80074c6:	4f61      	ldr	r7, [pc, #388]	; (800764c <_strtod_l+0x2ac>)
 80074c8:	e7e6      	b.n	8007498 <_strtod_l+0xf8>
 80074ca:	2601      	movs	r6, #1
 80074cc:	4f62      	ldr	r7, [pc, #392]	; (8007658 <_strtod_l+0x2b8>)
 80074ce:	4276      	negs	r6, r6
 80074d0:	e7e2      	b.n	8007498 <_strtod_l+0xf8>
 80074d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	921b      	str	r2, [sp, #108]	; 0x6c
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b30      	cmp	r3, #48	; 0x30
 80074dc:	d0f9      	beq.n	80074d2 <_strtod_l+0x132>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d099      	beq.n	8007416 <_strtod_l+0x76>
 80074e2:	2301      	movs	r3, #1
 80074e4:	9309      	str	r3, [sp, #36]	; 0x24
 80074e6:	2500      	movs	r5, #0
 80074e8:	220a      	movs	r2, #10
 80074ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074ec:	950d      	str	r5, [sp, #52]	; 0x34
 80074ee:	9310      	str	r3, [sp, #64]	; 0x40
 80074f0:	9508      	str	r5, [sp, #32]
 80074f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80074f4:	7804      	ldrb	r4, [r0, #0]
 80074f6:	0023      	movs	r3, r4
 80074f8:	3b30      	subs	r3, #48	; 0x30
 80074fa:	b2d9      	uxtb	r1, r3
 80074fc:	2909      	cmp	r1, #9
 80074fe:	d927      	bls.n	8007550 <_strtod_l+0x1b0>
 8007500:	2201      	movs	r2, #1
 8007502:	4956      	ldr	r1, [pc, #344]	; (800765c <_strtod_l+0x2bc>)
 8007504:	f001 fe4c 	bl	80091a0 <strncmp>
 8007508:	2800      	cmp	r0, #0
 800750a:	d031      	beq.n	8007570 <_strtod_l+0x1d0>
 800750c:	2000      	movs	r0, #0
 800750e:	0023      	movs	r3, r4
 8007510:	4684      	mov	ip, r0
 8007512:	9a08      	ldr	r2, [sp, #32]
 8007514:	900c      	str	r0, [sp, #48]	; 0x30
 8007516:	9205      	str	r2, [sp, #20]
 8007518:	2220      	movs	r2, #32
 800751a:	0019      	movs	r1, r3
 800751c:	4391      	bics	r1, r2
 800751e:	000a      	movs	r2, r1
 8007520:	2100      	movs	r1, #0
 8007522:	9106      	str	r1, [sp, #24]
 8007524:	2a45      	cmp	r2, #69	; 0x45
 8007526:	d000      	beq.n	800752a <_strtod_l+0x18a>
 8007528:	e0c2      	b.n	80076b0 <_strtod_l+0x310>
 800752a:	9b05      	ldr	r3, [sp, #20]
 800752c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800752e:	4303      	orrs	r3, r0
 8007530:	4313      	orrs	r3, r2
 8007532:	428b      	cmp	r3, r1
 8007534:	d08d      	beq.n	8007452 <_strtod_l+0xb2>
 8007536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007538:	9307      	str	r3, [sp, #28]
 800753a:	3301      	adds	r3, #1
 800753c:	931b      	str	r3, [sp, #108]	; 0x6c
 800753e:	9b07      	ldr	r3, [sp, #28]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b2b      	cmp	r3, #43	; 0x2b
 8007544:	d071      	beq.n	800762a <_strtod_l+0x28a>
 8007546:	000c      	movs	r4, r1
 8007548:	2b2d      	cmp	r3, #45	; 0x2d
 800754a:	d174      	bne.n	8007636 <_strtod_l+0x296>
 800754c:	2401      	movs	r4, #1
 800754e:	e06d      	b.n	800762c <_strtod_l+0x28c>
 8007550:	9908      	ldr	r1, [sp, #32]
 8007552:	2908      	cmp	r1, #8
 8007554:	dc09      	bgt.n	800756a <_strtod_l+0x1ca>
 8007556:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007558:	4351      	muls	r1, r2
 800755a:	185b      	adds	r3, r3, r1
 800755c:	930d      	str	r3, [sp, #52]	; 0x34
 800755e:	9b08      	ldr	r3, [sp, #32]
 8007560:	3001      	adds	r0, #1
 8007562:	3301      	adds	r3, #1
 8007564:	9308      	str	r3, [sp, #32]
 8007566:	901b      	str	r0, [sp, #108]	; 0x6c
 8007568:	e7c3      	b.n	80074f2 <_strtod_l+0x152>
 800756a:	4355      	muls	r5, r2
 800756c:	195d      	adds	r5, r3, r5
 800756e:	e7f6      	b.n	800755e <_strtod_l+0x1be>
 8007570:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	921b      	str	r2, [sp, #108]	; 0x6c
 8007576:	9a08      	ldr	r2, [sp, #32]
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	2a00      	cmp	r2, #0
 800757c:	d03a      	beq.n	80075f4 <_strtod_l+0x254>
 800757e:	900c      	str	r0, [sp, #48]	; 0x30
 8007580:	9205      	str	r2, [sp, #20]
 8007582:	001a      	movs	r2, r3
 8007584:	3a30      	subs	r2, #48	; 0x30
 8007586:	2a09      	cmp	r2, #9
 8007588:	d912      	bls.n	80075b0 <_strtod_l+0x210>
 800758a:	2201      	movs	r2, #1
 800758c:	4694      	mov	ip, r2
 800758e:	e7c3      	b.n	8007518 <_strtod_l+0x178>
 8007590:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007592:	3001      	adds	r0, #1
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	921b      	str	r2, [sp, #108]	; 0x6c
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b30      	cmp	r3, #48	; 0x30
 800759c:	d0f8      	beq.n	8007590 <_strtod_l+0x1f0>
 800759e:	001a      	movs	r2, r3
 80075a0:	3a31      	subs	r2, #49	; 0x31
 80075a2:	2a08      	cmp	r2, #8
 80075a4:	d83c      	bhi.n	8007620 <_strtod_l+0x280>
 80075a6:	900c      	str	r0, [sp, #48]	; 0x30
 80075a8:	2000      	movs	r0, #0
 80075aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80075ac:	9005      	str	r0, [sp, #20]
 80075ae:	9210      	str	r2, [sp, #64]	; 0x40
 80075b0:	001a      	movs	r2, r3
 80075b2:	1c41      	adds	r1, r0, #1
 80075b4:	3a30      	subs	r2, #48	; 0x30
 80075b6:	2b30      	cmp	r3, #48	; 0x30
 80075b8:	d016      	beq.n	80075e8 <_strtod_l+0x248>
 80075ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075bc:	185b      	adds	r3, r3, r1
 80075be:	930c      	str	r3, [sp, #48]	; 0x30
 80075c0:	9b05      	ldr	r3, [sp, #20]
 80075c2:	210a      	movs	r1, #10
 80075c4:	469c      	mov	ip, r3
 80075c6:	4484      	add	ip, r0
 80075c8:	4563      	cmp	r3, ip
 80075ca:	d115      	bne.n	80075f8 <_strtod_l+0x258>
 80075cc:	9905      	ldr	r1, [sp, #20]
 80075ce:	9b05      	ldr	r3, [sp, #20]
 80075d0:	3101      	adds	r1, #1
 80075d2:	1809      	adds	r1, r1, r0
 80075d4:	181b      	adds	r3, r3, r0
 80075d6:	9105      	str	r1, [sp, #20]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	dc19      	bgt.n	8007610 <_strtod_l+0x270>
 80075dc:	230a      	movs	r3, #10
 80075de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075e0:	434b      	muls	r3, r1
 80075e2:	2100      	movs	r1, #0
 80075e4:	18d3      	adds	r3, r2, r3
 80075e6:	930d      	str	r3, [sp, #52]	; 0x34
 80075e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075ea:	0008      	movs	r0, r1
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	e7c6      	b.n	8007582 <_strtod_l+0x1e2>
 80075f4:	9808      	ldr	r0, [sp, #32]
 80075f6:	e7d0      	b.n	800759a <_strtod_l+0x1fa>
 80075f8:	1c5c      	adds	r4, r3, #1
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	dc04      	bgt.n	8007608 <_strtod_l+0x268>
 80075fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007600:	434b      	muls	r3, r1
 8007602:	930d      	str	r3, [sp, #52]	; 0x34
 8007604:	0023      	movs	r3, r4
 8007606:	e7df      	b.n	80075c8 <_strtod_l+0x228>
 8007608:	2c10      	cmp	r4, #16
 800760a:	dcfb      	bgt.n	8007604 <_strtod_l+0x264>
 800760c:	434d      	muls	r5, r1
 800760e:	e7f9      	b.n	8007604 <_strtod_l+0x264>
 8007610:	9b05      	ldr	r3, [sp, #20]
 8007612:	2100      	movs	r1, #0
 8007614:	2b10      	cmp	r3, #16
 8007616:	dce7      	bgt.n	80075e8 <_strtod_l+0x248>
 8007618:	230a      	movs	r3, #10
 800761a:	435d      	muls	r5, r3
 800761c:	1955      	adds	r5, r2, r5
 800761e:	e7e3      	b.n	80075e8 <_strtod_l+0x248>
 8007620:	2200      	movs	r2, #0
 8007622:	920c      	str	r2, [sp, #48]	; 0x30
 8007624:	9205      	str	r2, [sp, #20]
 8007626:	3201      	adds	r2, #1
 8007628:	e7b0      	b.n	800758c <_strtod_l+0x1ec>
 800762a:	2400      	movs	r4, #0
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	3302      	adds	r3, #2
 8007630:	931b      	str	r3, [sp, #108]	; 0x6c
 8007632:	9b07      	ldr	r3, [sp, #28]
 8007634:	789b      	ldrb	r3, [r3, #2]
 8007636:	001a      	movs	r2, r3
 8007638:	3a30      	subs	r2, #48	; 0x30
 800763a:	2a09      	cmp	r2, #9
 800763c:	d914      	bls.n	8007668 <_strtod_l+0x2c8>
 800763e:	9a07      	ldr	r2, [sp, #28]
 8007640:	921b      	str	r2, [sp, #108]	; 0x6c
 8007642:	2200      	movs	r2, #0
 8007644:	e033      	b.n	80076ae <_strtod_l+0x30e>
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	0800bd74 	.word	0x0800bd74
 800764c:	7ff00000 	.word	0x7ff00000
 8007650:	ffefffff 	.word	0xffefffff
 8007654:	00000433 	.word	0x00000433
 8007658:	7fffffff 	.word	0x7fffffff
 800765c:	0800bd70 	.word	0x0800bd70
 8007660:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	921b      	str	r2, [sp, #108]	; 0x6c
 8007666:	785b      	ldrb	r3, [r3, #1]
 8007668:	2b30      	cmp	r3, #48	; 0x30
 800766a:	d0f9      	beq.n	8007660 <_strtod_l+0x2c0>
 800766c:	2200      	movs	r2, #0
 800766e:	9206      	str	r2, [sp, #24]
 8007670:	001a      	movs	r2, r3
 8007672:	3a31      	subs	r2, #49	; 0x31
 8007674:	2a08      	cmp	r2, #8
 8007676:	d81b      	bhi.n	80076b0 <_strtod_l+0x310>
 8007678:	3b30      	subs	r3, #48	; 0x30
 800767a:	930e      	str	r3, [sp, #56]	; 0x38
 800767c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800767e:	9306      	str	r3, [sp, #24]
 8007680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007682:	1c59      	adds	r1, r3, #1
 8007684:	911b      	str	r1, [sp, #108]	; 0x6c
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	001a      	movs	r2, r3
 800768a:	3a30      	subs	r2, #48	; 0x30
 800768c:	2a09      	cmp	r2, #9
 800768e:	d93a      	bls.n	8007706 <_strtod_l+0x366>
 8007690:	9a06      	ldr	r2, [sp, #24]
 8007692:	1a8a      	subs	r2, r1, r2
 8007694:	49b2      	ldr	r1, [pc, #712]	; (8007960 <_strtod_l+0x5c0>)
 8007696:	9106      	str	r1, [sp, #24]
 8007698:	2a08      	cmp	r2, #8
 800769a:	dc04      	bgt.n	80076a6 <_strtod_l+0x306>
 800769c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800769e:	9206      	str	r2, [sp, #24]
 80076a0:	428a      	cmp	r2, r1
 80076a2:	dd00      	ble.n	80076a6 <_strtod_l+0x306>
 80076a4:	9106      	str	r1, [sp, #24]
 80076a6:	2c00      	cmp	r4, #0
 80076a8:	d002      	beq.n	80076b0 <_strtod_l+0x310>
 80076aa:	9a06      	ldr	r2, [sp, #24]
 80076ac:	4252      	negs	r2, r2
 80076ae:	9206      	str	r2, [sp, #24]
 80076b0:	9a05      	ldr	r2, [sp, #20]
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	d14d      	bne.n	8007752 <_strtod_l+0x3b2>
 80076b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b8:	4310      	orrs	r0, r2
 80076ba:	d000      	beq.n	80076be <_strtod_l+0x31e>
 80076bc:	e6ab      	b.n	8007416 <_strtod_l+0x76>
 80076be:	4662      	mov	r2, ip
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d000      	beq.n	80076c6 <_strtod_l+0x326>
 80076c4:	e6c5      	b.n	8007452 <_strtod_l+0xb2>
 80076c6:	2b69      	cmp	r3, #105	; 0x69
 80076c8:	d027      	beq.n	800771a <_strtod_l+0x37a>
 80076ca:	dc23      	bgt.n	8007714 <_strtod_l+0x374>
 80076cc:	2b49      	cmp	r3, #73	; 0x49
 80076ce:	d024      	beq.n	800771a <_strtod_l+0x37a>
 80076d0:	2b4e      	cmp	r3, #78	; 0x4e
 80076d2:	d000      	beq.n	80076d6 <_strtod_l+0x336>
 80076d4:	e6bd      	b.n	8007452 <_strtod_l+0xb2>
 80076d6:	49a3      	ldr	r1, [pc, #652]	; (8007964 <_strtod_l+0x5c4>)
 80076d8:	a81b      	add	r0, sp, #108	; 0x6c
 80076da:	f002 ff99 	bl	800a610 <__match>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d100      	bne.n	80076e4 <_strtod_l+0x344>
 80076e2:	e6b6      	b.n	8007452 <_strtod_l+0xb2>
 80076e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b28      	cmp	r3, #40	; 0x28
 80076ea:	d12c      	bne.n	8007746 <_strtod_l+0x3a6>
 80076ec:	499e      	ldr	r1, [pc, #632]	; (8007968 <_strtod_l+0x5c8>)
 80076ee:	aa1e      	add	r2, sp, #120	; 0x78
 80076f0:	a81b      	add	r0, sp, #108	; 0x6c
 80076f2:	f002 ffa1 	bl	800a638 <__hexnan>
 80076f6:	2805      	cmp	r0, #5
 80076f8:	d125      	bne.n	8007746 <_strtod_l+0x3a6>
 80076fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076fc:	4a9b      	ldr	r2, [pc, #620]	; (800796c <_strtod_l+0x5cc>)
 80076fe:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007700:	431a      	orrs	r2, r3
 8007702:	0017      	movs	r7, r2
 8007704:	e687      	b.n	8007416 <_strtod_l+0x76>
 8007706:	220a      	movs	r2, #10
 8007708:	990e      	ldr	r1, [sp, #56]	; 0x38
 800770a:	434a      	muls	r2, r1
 800770c:	18d2      	adds	r2, r2, r3
 800770e:	3a30      	subs	r2, #48	; 0x30
 8007710:	920e      	str	r2, [sp, #56]	; 0x38
 8007712:	e7b5      	b.n	8007680 <_strtod_l+0x2e0>
 8007714:	2b6e      	cmp	r3, #110	; 0x6e
 8007716:	d0de      	beq.n	80076d6 <_strtod_l+0x336>
 8007718:	e69b      	b.n	8007452 <_strtod_l+0xb2>
 800771a:	4995      	ldr	r1, [pc, #596]	; (8007970 <_strtod_l+0x5d0>)
 800771c:	a81b      	add	r0, sp, #108	; 0x6c
 800771e:	f002 ff77 	bl	800a610 <__match>
 8007722:	2800      	cmp	r0, #0
 8007724:	d100      	bne.n	8007728 <_strtod_l+0x388>
 8007726:	e694      	b.n	8007452 <_strtod_l+0xb2>
 8007728:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800772a:	4992      	ldr	r1, [pc, #584]	; (8007974 <_strtod_l+0x5d4>)
 800772c:	3b01      	subs	r3, #1
 800772e:	a81b      	add	r0, sp, #108	; 0x6c
 8007730:	931b      	str	r3, [sp, #108]	; 0x6c
 8007732:	f002 ff6d 	bl	800a610 <__match>
 8007736:	2800      	cmp	r0, #0
 8007738:	d102      	bne.n	8007740 <_strtod_l+0x3a0>
 800773a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800773c:	3301      	adds	r3, #1
 800773e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007740:	2600      	movs	r6, #0
 8007742:	4f8a      	ldr	r7, [pc, #552]	; (800796c <_strtod_l+0x5cc>)
 8007744:	e667      	b.n	8007416 <_strtod_l+0x76>
 8007746:	488c      	ldr	r0, [pc, #560]	; (8007978 <_strtod_l+0x5d8>)
 8007748:	f001 fdd0 	bl	80092ec <nan>
 800774c:	0006      	movs	r6, r0
 800774e:	000f      	movs	r7, r1
 8007750:	e661      	b.n	8007416 <_strtod_l+0x76>
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	9309      	str	r3, [sp, #36]	; 0x24
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <_strtod_l+0x3c4>
 8007760:	9b05      	ldr	r3, [sp, #20]
 8007762:	9308      	str	r3, [sp, #32]
 8007764:	9c05      	ldr	r4, [sp, #20]
 8007766:	2c10      	cmp	r4, #16
 8007768:	dd00      	ble.n	800776c <_strtod_l+0x3cc>
 800776a:	2410      	movs	r4, #16
 800776c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800776e:	f7fa fe47 	bl	8002400 <__aeabi_ui2d>
 8007772:	9b05      	ldr	r3, [sp, #20]
 8007774:	0006      	movs	r6, r0
 8007776:	000f      	movs	r7, r1
 8007778:	2b09      	cmp	r3, #9
 800777a:	dd15      	ble.n	80077a8 <_strtod_l+0x408>
 800777c:	0022      	movs	r2, r4
 800777e:	4b7f      	ldr	r3, [pc, #508]	; (800797c <_strtod_l+0x5dc>)
 8007780:	3a09      	subs	r2, #9
 8007782:	00d2      	lsls	r2, r2, #3
 8007784:	189b      	adds	r3, r3, r2
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f7f9 ff71 	bl	8001670 <__aeabi_dmul>
 800778e:	0006      	movs	r6, r0
 8007790:	0028      	movs	r0, r5
 8007792:	000f      	movs	r7, r1
 8007794:	f7fa fe34 	bl	8002400 <__aeabi_ui2d>
 8007798:	0002      	movs	r2, r0
 800779a:	000b      	movs	r3, r1
 800779c:	0030      	movs	r0, r6
 800779e:	0039      	movs	r1, r7
 80077a0:	f7f9 f80c 	bl	80007bc <__aeabi_dadd>
 80077a4:	0006      	movs	r6, r0
 80077a6:	000f      	movs	r7, r1
 80077a8:	9b05      	ldr	r3, [sp, #20]
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	dc39      	bgt.n	8007822 <_strtod_l+0x482>
 80077ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d100      	bne.n	80077b6 <_strtod_l+0x416>
 80077b4:	e62f      	b.n	8007416 <_strtod_l+0x76>
 80077b6:	dd24      	ble.n	8007802 <_strtod_l+0x462>
 80077b8:	2b16      	cmp	r3, #22
 80077ba:	dc09      	bgt.n	80077d0 <_strtod_l+0x430>
 80077bc:	496f      	ldr	r1, [pc, #444]	; (800797c <_strtod_l+0x5dc>)
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	18c9      	adds	r1, r1, r3
 80077c2:	0032      	movs	r2, r6
 80077c4:	6808      	ldr	r0, [r1, #0]
 80077c6:	6849      	ldr	r1, [r1, #4]
 80077c8:	003b      	movs	r3, r7
 80077ca:	f7f9 ff51 	bl	8001670 <__aeabi_dmul>
 80077ce:	e7bd      	b.n	800774c <_strtod_l+0x3ac>
 80077d0:	2325      	movs	r3, #37	; 0x25
 80077d2:	9a05      	ldr	r2, [sp, #20]
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077d8:	4293      	cmp	r3, r2
 80077da:	db22      	blt.n	8007822 <_strtod_l+0x482>
 80077dc:	240f      	movs	r4, #15
 80077de:	9b05      	ldr	r3, [sp, #20]
 80077e0:	4d66      	ldr	r5, [pc, #408]	; (800797c <_strtod_l+0x5dc>)
 80077e2:	1ae4      	subs	r4, r4, r3
 80077e4:	00e1      	lsls	r1, r4, #3
 80077e6:	1869      	adds	r1, r5, r1
 80077e8:	0032      	movs	r2, r6
 80077ea:	6808      	ldr	r0, [r1, #0]
 80077ec:	6849      	ldr	r1, [r1, #4]
 80077ee:	003b      	movs	r3, r7
 80077f0:	f7f9 ff3e 	bl	8001670 <__aeabi_dmul>
 80077f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f6:	1b1c      	subs	r4, r3, r4
 80077f8:	00e4      	lsls	r4, r4, #3
 80077fa:	192d      	adds	r5, r5, r4
 80077fc:	682a      	ldr	r2, [r5, #0]
 80077fe:	686b      	ldr	r3, [r5, #4]
 8007800:	e7e3      	b.n	80077ca <_strtod_l+0x42a>
 8007802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007804:	3316      	adds	r3, #22
 8007806:	db0c      	blt.n	8007822 <_strtod_l+0x482>
 8007808:	9906      	ldr	r1, [sp, #24]
 800780a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800780c:	4b5b      	ldr	r3, [pc, #364]	; (800797c <_strtod_l+0x5dc>)
 800780e:	1a52      	subs	r2, r2, r1
 8007810:	00d2      	lsls	r2, r2, #3
 8007812:	189b      	adds	r3, r3, r2
 8007814:	0030      	movs	r0, r6
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	0039      	movs	r1, r7
 800781c:	f7f9 fb2e 	bl	8000e7c <__aeabi_ddiv>
 8007820:	e794      	b.n	800774c <_strtod_l+0x3ac>
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	1b1c      	subs	r4, r3, r4
 8007826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007828:	18e4      	adds	r4, r4, r3
 800782a:	2c00      	cmp	r4, #0
 800782c:	dd72      	ble.n	8007914 <_strtod_l+0x574>
 800782e:	220f      	movs	r2, #15
 8007830:	0023      	movs	r3, r4
 8007832:	4013      	ands	r3, r2
 8007834:	4214      	tst	r4, r2
 8007836:	d00a      	beq.n	800784e <_strtod_l+0x4ae>
 8007838:	4950      	ldr	r1, [pc, #320]	; (800797c <_strtod_l+0x5dc>)
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	18c9      	adds	r1, r1, r3
 800783e:	0032      	movs	r2, r6
 8007840:	6808      	ldr	r0, [r1, #0]
 8007842:	6849      	ldr	r1, [r1, #4]
 8007844:	003b      	movs	r3, r7
 8007846:	f7f9 ff13 	bl	8001670 <__aeabi_dmul>
 800784a:	0006      	movs	r6, r0
 800784c:	000f      	movs	r7, r1
 800784e:	230f      	movs	r3, #15
 8007850:	439c      	bics	r4, r3
 8007852:	d04a      	beq.n	80078ea <_strtod_l+0x54a>
 8007854:	3326      	adds	r3, #38	; 0x26
 8007856:	33ff      	adds	r3, #255	; 0xff
 8007858:	429c      	cmp	r4, r3
 800785a:	dd22      	ble.n	80078a2 <_strtod_l+0x502>
 800785c:	2300      	movs	r3, #0
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	9306      	str	r3, [sp, #24]
 8007862:	930d      	str	r3, [sp, #52]	; 0x34
 8007864:	9308      	str	r3, [sp, #32]
 8007866:	2322      	movs	r3, #34	; 0x22
 8007868:	2600      	movs	r6, #0
 800786a:	9a04      	ldr	r2, [sp, #16]
 800786c:	4f3f      	ldr	r7, [pc, #252]	; (800796c <_strtod_l+0x5cc>)
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007872:	42b3      	cmp	r3, r6
 8007874:	d100      	bne.n	8007878 <_strtod_l+0x4d8>
 8007876:	e5ce      	b.n	8007416 <_strtod_l+0x76>
 8007878:	991c      	ldr	r1, [sp, #112]	; 0x70
 800787a:	9804      	ldr	r0, [sp, #16]
 800787c:	f003 f898 	bl	800a9b0 <_Bfree>
 8007880:	9908      	ldr	r1, [sp, #32]
 8007882:	9804      	ldr	r0, [sp, #16]
 8007884:	f003 f894 	bl	800a9b0 <_Bfree>
 8007888:	9906      	ldr	r1, [sp, #24]
 800788a:	9804      	ldr	r0, [sp, #16]
 800788c:	f003 f890 	bl	800a9b0 <_Bfree>
 8007890:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007892:	9804      	ldr	r0, [sp, #16]
 8007894:	f003 f88c 	bl	800a9b0 <_Bfree>
 8007898:	9905      	ldr	r1, [sp, #20]
 800789a:	9804      	ldr	r0, [sp, #16]
 800789c:	f003 f888 	bl	800a9b0 <_Bfree>
 80078a0:	e5b9      	b.n	8007416 <_strtod_l+0x76>
 80078a2:	2300      	movs	r3, #0
 80078a4:	0030      	movs	r0, r6
 80078a6:	0039      	movs	r1, r7
 80078a8:	4d35      	ldr	r5, [pc, #212]	; (8007980 <_strtod_l+0x5e0>)
 80078aa:	1124      	asrs	r4, r4, #4
 80078ac:	9307      	str	r3, [sp, #28]
 80078ae:	2c01      	cmp	r4, #1
 80078b0:	dc1e      	bgt.n	80078f0 <_strtod_l+0x550>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <_strtod_l+0x51a>
 80078b6:	0006      	movs	r6, r0
 80078b8:	000f      	movs	r7, r1
 80078ba:	4b32      	ldr	r3, [pc, #200]	; (8007984 <_strtod_l+0x5e4>)
 80078bc:	9a07      	ldr	r2, [sp, #28]
 80078be:	18ff      	adds	r7, r7, r3
 80078c0:	4b2f      	ldr	r3, [pc, #188]	; (8007980 <_strtod_l+0x5e0>)
 80078c2:	00d2      	lsls	r2, r2, #3
 80078c4:	189d      	adds	r5, r3, r2
 80078c6:	6828      	ldr	r0, [r5, #0]
 80078c8:	6869      	ldr	r1, [r5, #4]
 80078ca:	0032      	movs	r2, r6
 80078cc:	003b      	movs	r3, r7
 80078ce:	f7f9 fecf 	bl	8001670 <__aeabi_dmul>
 80078d2:	4b26      	ldr	r3, [pc, #152]	; (800796c <_strtod_l+0x5cc>)
 80078d4:	4a2c      	ldr	r2, [pc, #176]	; (8007988 <_strtod_l+0x5e8>)
 80078d6:	0006      	movs	r6, r0
 80078d8:	400b      	ands	r3, r1
 80078da:	4293      	cmp	r3, r2
 80078dc:	d8be      	bhi.n	800785c <_strtod_l+0x4bc>
 80078de:	4a2b      	ldr	r2, [pc, #172]	; (800798c <_strtod_l+0x5ec>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d913      	bls.n	800790c <_strtod_l+0x56c>
 80078e4:	2601      	movs	r6, #1
 80078e6:	4f2a      	ldr	r7, [pc, #168]	; (8007990 <_strtod_l+0x5f0>)
 80078e8:	4276      	negs	r6, r6
 80078ea:	2300      	movs	r3, #0
 80078ec:	9307      	str	r3, [sp, #28]
 80078ee:	e088      	b.n	8007a02 <_strtod_l+0x662>
 80078f0:	2201      	movs	r2, #1
 80078f2:	4214      	tst	r4, r2
 80078f4:	d004      	beq.n	8007900 <_strtod_l+0x560>
 80078f6:	682a      	ldr	r2, [r5, #0]
 80078f8:	686b      	ldr	r3, [r5, #4]
 80078fa:	f7f9 feb9 	bl	8001670 <__aeabi_dmul>
 80078fe:	2301      	movs	r3, #1
 8007900:	9a07      	ldr	r2, [sp, #28]
 8007902:	1064      	asrs	r4, r4, #1
 8007904:	3201      	adds	r2, #1
 8007906:	9207      	str	r2, [sp, #28]
 8007908:	3508      	adds	r5, #8
 800790a:	e7d0      	b.n	80078ae <_strtod_l+0x50e>
 800790c:	23d4      	movs	r3, #212	; 0xd4
 800790e:	049b      	lsls	r3, r3, #18
 8007910:	18cf      	adds	r7, r1, r3
 8007912:	e7ea      	b.n	80078ea <_strtod_l+0x54a>
 8007914:	2c00      	cmp	r4, #0
 8007916:	d0e8      	beq.n	80078ea <_strtod_l+0x54a>
 8007918:	4264      	negs	r4, r4
 800791a:	230f      	movs	r3, #15
 800791c:	0022      	movs	r2, r4
 800791e:	401a      	ands	r2, r3
 8007920:	421c      	tst	r4, r3
 8007922:	d00a      	beq.n	800793a <_strtod_l+0x59a>
 8007924:	4b15      	ldr	r3, [pc, #84]	; (800797c <_strtod_l+0x5dc>)
 8007926:	00d2      	lsls	r2, r2, #3
 8007928:	189b      	adds	r3, r3, r2
 800792a:	0030      	movs	r0, r6
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	0039      	movs	r1, r7
 8007932:	f7f9 faa3 	bl	8000e7c <__aeabi_ddiv>
 8007936:	0006      	movs	r6, r0
 8007938:	000f      	movs	r7, r1
 800793a:	1124      	asrs	r4, r4, #4
 800793c:	d0d5      	beq.n	80078ea <_strtod_l+0x54a>
 800793e:	2c1f      	cmp	r4, #31
 8007940:	dd28      	ble.n	8007994 <_strtod_l+0x5f4>
 8007942:	2300      	movs	r3, #0
 8007944:	9305      	str	r3, [sp, #20]
 8007946:	9306      	str	r3, [sp, #24]
 8007948:	930d      	str	r3, [sp, #52]	; 0x34
 800794a:	9308      	str	r3, [sp, #32]
 800794c:	2322      	movs	r3, #34	; 0x22
 800794e:	9a04      	ldr	r2, [sp, #16]
 8007950:	2600      	movs	r6, #0
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007956:	2700      	movs	r7, #0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d18d      	bne.n	8007878 <_strtod_l+0x4d8>
 800795c:	e55b      	b.n	8007416 <_strtod_l+0x76>
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	00004e1f 	.word	0x00004e1f
 8007964:	0800bed6 	.word	0x0800bed6
 8007968:	0800bd88 	.word	0x0800bd88
 800796c:	7ff00000 	.word	0x7ff00000
 8007970:	0800bece 	.word	0x0800bece
 8007974:	0800bf0d 	.word	0x0800bf0d
 8007978:	0800c198 	.word	0x0800c198
 800797c:	0800c078 	.word	0x0800c078
 8007980:	0800c050 	.word	0x0800c050
 8007984:	fcb00000 	.word	0xfcb00000
 8007988:	7ca00000 	.word	0x7ca00000
 800798c:	7c900000 	.word	0x7c900000
 8007990:	7fefffff 	.word	0x7fefffff
 8007994:	2310      	movs	r3, #16
 8007996:	0022      	movs	r2, r4
 8007998:	401a      	ands	r2, r3
 800799a:	9207      	str	r2, [sp, #28]
 800799c:	421c      	tst	r4, r3
 800799e:	d001      	beq.n	80079a4 <_strtod_l+0x604>
 80079a0:	335a      	adds	r3, #90	; 0x5a
 80079a2:	9307      	str	r3, [sp, #28]
 80079a4:	0030      	movs	r0, r6
 80079a6:	0039      	movs	r1, r7
 80079a8:	2300      	movs	r3, #0
 80079aa:	4dc4      	ldr	r5, [pc, #784]	; (8007cbc <_strtod_l+0x91c>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	4214      	tst	r4, r2
 80079b0:	d004      	beq.n	80079bc <_strtod_l+0x61c>
 80079b2:	682a      	ldr	r2, [r5, #0]
 80079b4:	686b      	ldr	r3, [r5, #4]
 80079b6:	f7f9 fe5b 	bl	8001670 <__aeabi_dmul>
 80079ba:	2301      	movs	r3, #1
 80079bc:	1064      	asrs	r4, r4, #1
 80079be:	3508      	adds	r5, #8
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	d1f3      	bne.n	80079ac <_strtod_l+0x60c>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <_strtod_l+0x62c>
 80079c8:	0006      	movs	r6, r0
 80079ca:	000f      	movs	r7, r1
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00f      	beq.n	80079f2 <_strtod_l+0x652>
 80079d2:	236b      	movs	r3, #107	; 0x6b
 80079d4:	007a      	lsls	r2, r7, #1
 80079d6:	0d52      	lsrs	r2, r2, #21
 80079d8:	0039      	movs	r1, r7
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd08      	ble.n	80079f2 <_strtod_l+0x652>
 80079e0:	2b1f      	cmp	r3, #31
 80079e2:	dc00      	bgt.n	80079e6 <_strtod_l+0x646>
 80079e4:	e121      	b.n	8007c2a <_strtod_l+0x88a>
 80079e6:	2600      	movs	r6, #0
 80079e8:	2b34      	cmp	r3, #52	; 0x34
 80079ea:	dc00      	bgt.n	80079ee <_strtod_l+0x64e>
 80079ec:	e116      	b.n	8007c1c <_strtod_l+0x87c>
 80079ee:	27dc      	movs	r7, #220	; 0xdc
 80079f0:	04bf      	lsls	r7, r7, #18
 80079f2:	2200      	movs	r2, #0
 80079f4:	2300      	movs	r3, #0
 80079f6:	0030      	movs	r0, r6
 80079f8:	0039      	movs	r1, r7
 80079fa:	f7f8 fd27 	bl	800044c <__aeabi_dcmpeq>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d19f      	bne.n	8007942 <_strtod_l+0x5a2>
 8007a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a04:	9a08      	ldr	r2, [sp, #32]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	9804      	ldr	r0, [sp, #16]
 8007a0e:	f003 f837 	bl	800aa80 <__s2b>
 8007a12:	900d      	str	r0, [sp, #52]	; 0x34
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d100      	bne.n	8007a1a <_strtod_l+0x67a>
 8007a18:	e720      	b.n	800785c <_strtod_l+0x4bc>
 8007a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1c:	9906      	ldr	r1, [sp, #24]
 8007a1e:	17da      	asrs	r2, r3, #31
 8007a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a22:	1a5b      	subs	r3, r3, r1
 8007a24:	401a      	ands	r2, r3
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	9215      	str	r2, [sp, #84]	; 0x54
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a2e:	17db      	asrs	r3, r3, #31
 8007a30:	401a      	ands	r2, r3
 8007a32:	2300      	movs	r3, #0
 8007a34:	9218      	str	r2, [sp, #96]	; 0x60
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	9306      	str	r3, [sp, #24]
 8007a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3c:	9804      	ldr	r0, [sp, #16]
 8007a3e:	6859      	ldr	r1, [r3, #4]
 8007a40:	f002 ff72 	bl	800a928 <_Balloc>
 8007a44:	9008      	str	r0, [sp, #32]
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d100      	bne.n	8007a4c <_strtod_l+0x6ac>
 8007a4a:	e70c      	b.n	8007866 <_strtod_l+0x4c6>
 8007a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a4e:	300c      	adds	r0, #12
 8007a50:	0019      	movs	r1, r3
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	310c      	adds	r1, #12
 8007a56:	3202      	adds	r2, #2
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	f001 fc3d 	bl	80092d8 <memcpy>
 8007a5e:	ab1e      	add	r3, sp, #120	; 0x78
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	ab1d      	add	r3, sp, #116	; 0x74
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	0032      	movs	r2, r6
 8007a68:	003b      	movs	r3, r7
 8007a6a:	9804      	ldr	r0, [sp, #16]
 8007a6c:	9610      	str	r6, [sp, #64]	; 0x40
 8007a6e:	9711      	str	r7, [sp, #68]	; 0x44
 8007a70:	f003 fb48 	bl	800b104 <__d2b>
 8007a74:	901c      	str	r0, [sp, #112]	; 0x70
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d100      	bne.n	8007a7c <_strtod_l+0x6dc>
 8007a7a:	e6f4      	b.n	8007866 <_strtod_l+0x4c6>
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	9804      	ldr	r0, [sp, #16]
 8007a80:	f003 f892 	bl	800aba8 <__i2b>
 8007a84:	9006      	str	r0, [sp, #24]
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d100      	bne.n	8007a8c <_strtod_l+0x6ec>
 8007a8a:	e6ec      	b.n	8007866 <_strtod_l+0x4c6>
 8007a8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a90:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a92:	1ad4      	subs	r4, r2, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	db01      	blt.n	8007a9c <_strtod_l+0x6fc>
 8007a98:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007a9a:	195d      	adds	r5, r3, r5
 8007a9c:	9907      	ldr	r1, [sp, #28]
 8007a9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007aa0:	1a5b      	subs	r3, r3, r1
 8007aa2:	2136      	movs	r1, #54	; 0x36
 8007aa4:	189b      	adds	r3, r3, r2
 8007aa6:	1a8a      	subs	r2, r1, r2
 8007aa8:	4985      	ldr	r1, [pc, #532]	; (8007cc0 <_strtod_l+0x920>)
 8007aaa:	2001      	movs	r0, #1
 8007aac:	468c      	mov	ip, r1
 8007aae:	2100      	movs	r1, #0
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	9114      	str	r1, [sp, #80]	; 0x50
 8007ab4:	9012      	str	r0, [sp, #72]	; 0x48
 8007ab6:	4563      	cmp	r3, ip
 8007ab8:	da07      	bge.n	8007aca <_strtod_l+0x72a>
 8007aba:	4661      	mov	r1, ip
 8007abc:	1ac9      	subs	r1, r1, r3
 8007abe:	1a52      	subs	r2, r2, r1
 8007ac0:	291f      	cmp	r1, #31
 8007ac2:	dd00      	ble.n	8007ac6 <_strtod_l+0x726>
 8007ac4:	e0b6      	b.n	8007c34 <_strtod_l+0x894>
 8007ac6:	4088      	lsls	r0, r1
 8007ac8:	9012      	str	r0, [sp, #72]	; 0x48
 8007aca:	18ab      	adds	r3, r5, r2
 8007acc:	930c      	str	r3, [sp, #48]	; 0x30
 8007ace:	18a4      	adds	r4, r4, r2
 8007ad0:	9b07      	ldr	r3, [sp, #28]
 8007ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad4:	191c      	adds	r4, r3, r4
 8007ad6:	002b      	movs	r3, r5
 8007ad8:	4295      	cmp	r5, r2
 8007ada:	dd00      	ble.n	8007ade <_strtod_l+0x73e>
 8007adc:	0013      	movs	r3, r2
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	dd00      	ble.n	8007ae4 <_strtod_l+0x744>
 8007ae2:	0023      	movs	r3, r4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dd04      	ble.n	8007af2 <_strtod_l+0x752>
 8007ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aea:	1ae4      	subs	r4, r4, r3
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	920c      	str	r2, [sp, #48]	; 0x30
 8007af0:	1aed      	subs	r5, r5, r3
 8007af2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd17      	ble.n	8007b28 <_strtod_l+0x788>
 8007af8:	001a      	movs	r2, r3
 8007afa:	9906      	ldr	r1, [sp, #24]
 8007afc:	9804      	ldr	r0, [sp, #16]
 8007afe:	f003 f91b 	bl	800ad38 <__pow5mult>
 8007b02:	9006      	str	r0, [sp, #24]
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d100      	bne.n	8007b0a <_strtod_l+0x76a>
 8007b08:	e6ad      	b.n	8007866 <_strtod_l+0x4c6>
 8007b0a:	0001      	movs	r1, r0
 8007b0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b0e:	9804      	ldr	r0, [sp, #16]
 8007b10:	f003 f862 	bl	800abd8 <__multiply>
 8007b14:	900e      	str	r0, [sp, #56]	; 0x38
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d100      	bne.n	8007b1c <_strtod_l+0x77c>
 8007b1a:	e6a4      	b.n	8007866 <_strtod_l+0x4c6>
 8007b1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b1e:	9804      	ldr	r0, [sp, #16]
 8007b20:	f002 ff46 	bl	800a9b0 <_Bfree>
 8007b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b26:	931c      	str	r3, [sp, #112]	; 0x70
 8007b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	dd00      	ble.n	8007b30 <_strtod_l+0x790>
 8007b2e:	e087      	b.n	8007c40 <_strtod_l+0x8a0>
 8007b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	dd08      	ble.n	8007b48 <_strtod_l+0x7a8>
 8007b36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b38:	9908      	ldr	r1, [sp, #32]
 8007b3a:	9804      	ldr	r0, [sp, #16]
 8007b3c:	f003 f8fc 	bl	800ad38 <__pow5mult>
 8007b40:	9008      	str	r0, [sp, #32]
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d100      	bne.n	8007b48 <_strtod_l+0x7a8>
 8007b46:	e68e      	b.n	8007866 <_strtod_l+0x4c6>
 8007b48:	2c00      	cmp	r4, #0
 8007b4a:	dd08      	ble.n	8007b5e <_strtod_l+0x7be>
 8007b4c:	0022      	movs	r2, r4
 8007b4e:	9908      	ldr	r1, [sp, #32]
 8007b50:	9804      	ldr	r0, [sp, #16]
 8007b52:	f003 f94d 	bl	800adf0 <__lshift>
 8007b56:	9008      	str	r0, [sp, #32]
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d100      	bne.n	8007b5e <_strtod_l+0x7be>
 8007b5c:	e683      	b.n	8007866 <_strtod_l+0x4c6>
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	dd08      	ble.n	8007b74 <_strtod_l+0x7d4>
 8007b62:	002a      	movs	r2, r5
 8007b64:	9906      	ldr	r1, [sp, #24]
 8007b66:	9804      	ldr	r0, [sp, #16]
 8007b68:	f003 f942 	bl	800adf0 <__lshift>
 8007b6c:	9006      	str	r0, [sp, #24]
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d100      	bne.n	8007b74 <_strtod_l+0x7d4>
 8007b72:	e678      	b.n	8007866 <_strtod_l+0x4c6>
 8007b74:	9a08      	ldr	r2, [sp, #32]
 8007b76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b78:	9804      	ldr	r0, [sp, #16]
 8007b7a:	f003 f9c3 	bl	800af04 <__mdiff>
 8007b7e:	9005      	str	r0, [sp, #20]
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d100      	bne.n	8007b86 <_strtod_l+0x7e6>
 8007b84:	e66f      	b.n	8007866 <_strtod_l+0x4c6>
 8007b86:	2200      	movs	r2, #0
 8007b88:	68c3      	ldr	r3, [r0, #12]
 8007b8a:	9906      	ldr	r1, [sp, #24]
 8007b8c:	60c2      	str	r2, [r0, #12]
 8007b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b90:	f003 f99c 	bl	800aecc <__mcmp>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	da5d      	bge.n	8007c54 <_strtod_l+0x8b4>
 8007b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b9a:	4333      	orrs	r3, r6
 8007b9c:	d000      	beq.n	8007ba0 <_strtod_l+0x800>
 8007b9e:	e088      	b.n	8007cb2 <_strtod_l+0x912>
 8007ba0:	033b      	lsls	r3, r7, #12
 8007ba2:	d000      	beq.n	8007ba6 <_strtod_l+0x806>
 8007ba4:	e085      	b.n	8007cb2 <_strtod_l+0x912>
 8007ba6:	22d6      	movs	r2, #214	; 0xd6
 8007ba8:	4b46      	ldr	r3, [pc, #280]	; (8007cc4 <_strtod_l+0x924>)
 8007baa:	04d2      	lsls	r2, r2, #19
 8007bac:	403b      	ands	r3, r7
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d97f      	bls.n	8007cb2 <_strtod_l+0x912>
 8007bb2:	9b05      	ldr	r3, [sp, #20]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d103      	bne.n	8007bc2 <_strtod_l+0x822>
 8007bba:	9b05      	ldr	r3, [sp, #20]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	dd77      	ble.n	8007cb2 <_strtod_l+0x912>
 8007bc2:	9905      	ldr	r1, [sp, #20]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	9804      	ldr	r0, [sp, #16]
 8007bc8:	f003 f912 	bl	800adf0 <__lshift>
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	9005      	str	r0, [sp, #20]
 8007bd0:	f003 f97c 	bl	800aecc <__mcmp>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	dd6c      	ble.n	8007cb2 <_strtod_l+0x912>
 8007bd8:	9907      	ldr	r1, [sp, #28]
 8007bda:	003b      	movs	r3, r7
 8007bdc:	4a39      	ldr	r2, [pc, #228]	; (8007cc4 <_strtod_l+0x924>)
 8007bde:	2900      	cmp	r1, #0
 8007be0:	d100      	bne.n	8007be4 <_strtod_l+0x844>
 8007be2:	e094      	b.n	8007d0e <_strtod_l+0x96e>
 8007be4:	0011      	movs	r1, r2
 8007be6:	20d6      	movs	r0, #214	; 0xd6
 8007be8:	4039      	ands	r1, r7
 8007bea:	04c0      	lsls	r0, r0, #19
 8007bec:	4281      	cmp	r1, r0
 8007bee:	dd00      	ble.n	8007bf2 <_strtod_l+0x852>
 8007bf0:	e08d      	b.n	8007d0e <_strtod_l+0x96e>
 8007bf2:	23dc      	movs	r3, #220	; 0xdc
 8007bf4:	049b      	lsls	r3, r3, #18
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	dc00      	bgt.n	8007bfc <_strtod_l+0x85c>
 8007bfa:	e6a7      	b.n	800794c <_strtod_l+0x5ac>
 8007bfc:	0030      	movs	r0, r6
 8007bfe:	0039      	movs	r1, r7
 8007c00:	4b31      	ldr	r3, [pc, #196]	; (8007cc8 <_strtod_l+0x928>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	f7f9 fd34 	bl	8001670 <__aeabi_dmul>
 8007c08:	4b2e      	ldr	r3, [pc, #184]	; (8007cc4 <_strtod_l+0x924>)
 8007c0a:	0006      	movs	r6, r0
 8007c0c:	000f      	movs	r7, r1
 8007c0e:	420b      	tst	r3, r1
 8007c10:	d000      	beq.n	8007c14 <_strtod_l+0x874>
 8007c12:	e631      	b.n	8007878 <_strtod_l+0x4d8>
 8007c14:	2322      	movs	r3, #34	; 0x22
 8007c16:	9a04      	ldr	r2, [sp, #16]
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e62d      	b.n	8007878 <_strtod_l+0x4d8>
 8007c1c:	234b      	movs	r3, #75	; 0x4b
 8007c1e:	1a9a      	subs	r2, r3, r2
 8007c20:	3b4c      	subs	r3, #76	; 0x4c
 8007c22:	4093      	lsls	r3, r2
 8007c24:	4019      	ands	r1, r3
 8007c26:	000f      	movs	r7, r1
 8007c28:	e6e3      	b.n	80079f2 <_strtod_l+0x652>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4252      	negs	r2, r2
 8007c2e:	409a      	lsls	r2, r3
 8007c30:	4016      	ands	r6, r2
 8007c32:	e6de      	b.n	80079f2 <_strtod_l+0x652>
 8007c34:	4925      	ldr	r1, [pc, #148]	; (8007ccc <_strtod_l+0x92c>)
 8007c36:	1acb      	subs	r3, r1, r3
 8007c38:	0001      	movs	r1, r0
 8007c3a:	4099      	lsls	r1, r3
 8007c3c:	9114      	str	r1, [sp, #80]	; 0x50
 8007c3e:	e743      	b.n	8007ac8 <_strtod_l+0x728>
 8007c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c44:	9804      	ldr	r0, [sp, #16]
 8007c46:	f003 f8d3 	bl	800adf0 <__lshift>
 8007c4a:	901c      	str	r0, [sp, #112]	; 0x70
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d000      	beq.n	8007c52 <_strtod_l+0x8b2>
 8007c50:	e76e      	b.n	8007b30 <_strtod_l+0x790>
 8007c52:	e608      	b.n	8007866 <_strtod_l+0x4c6>
 8007c54:	970e      	str	r7, [sp, #56]	; 0x38
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d177      	bne.n	8007d4a <_strtod_l+0x9aa>
 8007c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c5c:	033b      	lsls	r3, r7, #12
 8007c5e:	0b1b      	lsrs	r3, r3, #12
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	d039      	beq.n	8007cd8 <_strtod_l+0x938>
 8007c64:	4a1a      	ldr	r2, [pc, #104]	; (8007cd0 <_strtod_l+0x930>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d139      	bne.n	8007cde <_strtod_l+0x93e>
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	4249      	negs	r1, r1
 8007c70:	0032      	movs	r2, r6
 8007c72:	0008      	movs	r0, r1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <_strtod_l+0x8f0>
 8007c78:	24d4      	movs	r4, #212	; 0xd4
 8007c7a:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <_strtod_l+0x924>)
 8007c7c:	0008      	movs	r0, r1
 8007c7e:	403b      	ands	r3, r7
 8007c80:	04e4      	lsls	r4, r4, #19
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	d804      	bhi.n	8007c90 <_strtod_l+0x8f0>
 8007c86:	306c      	adds	r0, #108	; 0x6c
 8007c88:	0d1b      	lsrs	r3, r3, #20
 8007c8a:	1ac3      	subs	r3, r0, r3
 8007c8c:	4099      	lsls	r1, r3
 8007c8e:	0008      	movs	r0, r1
 8007c90:	4282      	cmp	r2, r0
 8007c92:	d124      	bne.n	8007cde <_strtod_l+0x93e>
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <_strtod_l+0x934>)
 8007c96:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d102      	bne.n	8007ca2 <_strtod_l+0x902>
 8007c9c:	3201      	adds	r2, #1
 8007c9e:	d100      	bne.n	8007ca2 <_strtod_l+0x902>
 8007ca0:	e5e1      	b.n	8007866 <_strtod_l+0x4c6>
 8007ca2:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <_strtod_l+0x924>)
 8007ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	401a      	ands	r2, r3
 8007caa:	0013      	movs	r3, r2
 8007cac:	2280      	movs	r2, #128	; 0x80
 8007cae:	0352      	lsls	r2, r2, #13
 8007cb0:	189f      	adds	r7, r3, r2
 8007cb2:	9b07      	ldr	r3, [sp, #28]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1a1      	bne.n	8007bfc <_strtod_l+0x85c>
 8007cb8:	e5de      	b.n	8007878 <_strtod_l+0x4d8>
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	0800bda0 	.word	0x0800bda0
 8007cc0:	fffffc02 	.word	0xfffffc02
 8007cc4:	7ff00000 	.word	0x7ff00000
 8007cc8:	39500000 	.word	0x39500000
 8007ccc:	fffffbe2 	.word	0xfffffbe2
 8007cd0:	000fffff 	.word	0x000fffff
 8007cd4:	7fefffff 	.word	0x7fefffff
 8007cd8:	4333      	orrs	r3, r6
 8007cda:	d100      	bne.n	8007cde <_strtod_l+0x93e>
 8007cdc:	e77c      	b.n	8007bd8 <_strtod_l+0x838>
 8007cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01d      	beq.n	8007d20 <_strtod_l+0x980>
 8007ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ce6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ce8:	4213      	tst	r3, r2
 8007cea:	d0e2      	beq.n	8007cb2 <_strtod_l+0x912>
 8007cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cee:	0030      	movs	r0, r6
 8007cf0:	0039      	movs	r1, r7
 8007cf2:	9a07      	ldr	r2, [sp, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d017      	beq.n	8007d28 <_strtod_l+0x988>
 8007cf8:	f7ff fb3a 	bl	8007370 <sulp>
 8007cfc:	0002      	movs	r2, r0
 8007cfe:	000b      	movs	r3, r1
 8007d00:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d02:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d04:	f7f8 fd5a 	bl	80007bc <__aeabi_dadd>
 8007d08:	0006      	movs	r6, r0
 8007d0a:	000f      	movs	r7, r1
 8007d0c:	e7d1      	b.n	8007cb2 <_strtod_l+0x912>
 8007d0e:	2601      	movs	r6, #1
 8007d10:	4013      	ands	r3, r2
 8007d12:	4a98      	ldr	r2, [pc, #608]	; (8007f74 <_strtod_l+0xbd4>)
 8007d14:	4276      	negs	r6, r6
 8007d16:	189b      	adds	r3, r3, r2
 8007d18:	4a97      	ldr	r2, [pc, #604]	; (8007f78 <_strtod_l+0xbd8>)
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	0017      	movs	r7, r2
 8007d1e:	e7c8      	b.n	8007cb2 <_strtod_l+0x912>
 8007d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d22:	4233      	tst	r3, r6
 8007d24:	d0c5      	beq.n	8007cb2 <_strtod_l+0x912>
 8007d26:	e7e1      	b.n	8007cec <_strtod_l+0x94c>
 8007d28:	f7ff fb22 	bl	8007370 <sulp>
 8007d2c:	0002      	movs	r2, r0
 8007d2e:	000b      	movs	r3, r1
 8007d30:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d34:	f7f9 ff5e 	bl	8001bf4 <__aeabi_dsub>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	0006      	movs	r6, r0
 8007d3e:	000f      	movs	r7, r1
 8007d40:	f7f8 fb84 	bl	800044c <__aeabi_dcmpeq>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d0b4      	beq.n	8007cb2 <_strtod_l+0x912>
 8007d48:	e600      	b.n	800794c <_strtod_l+0x5ac>
 8007d4a:	9906      	ldr	r1, [sp, #24]
 8007d4c:	9805      	ldr	r0, [sp, #20]
 8007d4e:	f003 fa39 	bl	800b1c4 <__ratio>
 8007d52:	2380      	movs	r3, #128	; 0x80
 8007d54:	2200      	movs	r2, #0
 8007d56:	05db      	lsls	r3, r3, #23
 8007d58:	0004      	movs	r4, r0
 8007d5a:	000d      	movs	r5, r1
 8007d5c:	f7f8 fb86 	bl	800046c <__aeabi_dcmple>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d06d      	beq.n	8007e40 <_strtod_l+0xaa0>
 8007d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d000      	beq.n	8007d6c <_strtod_l+0x9cc>
 8007d6a:	e07e      	b.n	8007e6a <_strtod_l+0xaca>
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	d158      	bne.n	8007e22 <_strtod_l+0xa82>
 8007d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d72:	031b      	lsls	r3, r3, #12
 8007d74:	d000      	beq.n	8007d78 <_strtod_l+0x9d8>
 8007d76:	e07f      	b.n	8007e78 <_strtod_l+0xad8>
 8007d78:	2200      	movs	r2, #0
 8007d7a:	0020      	movs	r0, r4
 8007d7c:	0029      	movs	r1, r5
 8007d7e:	4b7f      	ldr	r3, [pc, #508]	; (8007f7c <_strtod_l+0xbdc>)
 8007d80:	f7f8 fb6a 	bl	8000458 <__aeabi_dcmplt>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d158      	bne.n	8007e3a <_strtod_l+0xa9a>
 8007d88:	0020      	movs	r0, r4
 8007d8a:	0029      	movs	r1, r5
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4b7c      	ldr	r3, [pc, #496]	; (8007f80 <_strtod_l+0xbe0>)
 8007d90:	f7f9 fc6e 	bl	8001670 <__aeabi_dmul>
 8007d94:	0004      	movs	r4, r0
 8007d96:	000d      	movs	r5, r1
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	061b      	lsls	r3, r3, #24
 8007d9c:	940a      	str	r4, [sp, #40]	; 0x28
 8007d9e:	18eb      	adds	r3, r5, r3
 8007da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da6:	9212      	str	r2, [sp, #72]	; 0x48
 8007da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007daa:	4a76      	ldr	r2, [pc, #472]	; (8007f84 <_strtod_l+0xbe4>)
 8007dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dae:	4013      	ands	r3, r2
 8007db0:	9314      	str	r3, [sp, #80]	; 0x50
 8007db2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007db4:	4b74      	ldr	r3, [pc, #464]	; (8007f88 <_strtod_l+0xbe8>)
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d000      	beq.n	8007dbc <_strtod_l+0xa1c>
 8007dba:	e091      	b.n	8007ee0 <_strtod_l+0xb40>
 8007dbc:	4a73      	ldr	r2, [pc, #460]	; (8007f8c <_strtod_l+0xbec>)
 8007dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc0:	4694      	mov	ip, r2
 8007dc2:	4463      	add	r3, ip
 8007dc4:	001f      	movs	r7, r3
 8007dc6:	0030      	movs	r0, r6
 8007dc8:	0019      	movs	r1, r3
 8007dca:	f003 f933 	bl	800b034 <__ulp>
 8007dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd2:	f7f9 fc4d 	bl	8001670 <__aeabi_dmul>
 8007dd6:	0032      	movs	r2, r6
 8007dd8:	003b      	movs	r3, r7
 8007dda:	f7f8 fcef 	bl	80007bc <__aeabi_dadd>
 8007dde:	4a69      	ldr	r2, [pc, #420]	; (8007f84 <_strtod_l+0xbe4>)
 8007de0:	4b6b      	ldr	r3, [pc, #428]	; (8007f90 <_strtod_l+0xbf0>)
 8007de2:	0006      	movs	r6, r0
 8007de4:	400a      	ands	r2, r1
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d949      	bls.n	8007e7e <_strtod_l+0xade>
 8007dea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007dec:	4b69      	ldr	r3, [pc, #420]	; (8007f94 <_strtod_l+0xbf4>)
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d103      	bne.n	8007dfa <_strtod_l+0xa5a>
 8007df2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007df4:	3301      	adds	r3, #1
 8007df6:	d100      	bne.n	8007dfa <_strtod_l+0xa5a>
 8007df8:	e535      	b.n	8007866 <_strtod_l+0x4c6>
 8007dfa:	2601      	movs	r6, #1
 8007dfc:	4f65      	ldr	r7, [pc, #404]	; (8007f94 <_strtod_l+0xbf4>)
 8007dfe:	4276      	negs	r6, r6
 8007e00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e02:	9804      	ldr	r0, [sp, #16]
 8007e04:	f002 fdd4 	bl	800a9b0 <_Bfree>
 8007e08:	9908      	ldr	r1, [sp, #32]
 8007e0a:	9804      	ldr	r0, [sp, #16]
 8007e0c:	f002 fdd0 	bl	800a9b0 <_Bfree>
 8007e10:	9906      	ldr	r1, [sp, #24]
 8007e12:	9804      	ldr	r0, [sp, #16]
 8007e14:	f002 fdcc 	bl	800a9b0 <_Bfree>
 8007e18:	9905      	ldr	r1, [sp, #20]
 8007e1a:	9804      	ldr	r0, [sp, #16]
 8007e1c:	f002 fdc8 	bl	800a9b0 <_Bfree>
 8007e20:	e60b      	b.n	8007a3a <_strtod_l+0x69a>
 8007e22:	2e01      	cmp	r6, #1
 8007e24:	d103      	bne.n	8007e2e <_strtod_l+0xa8e>
 8007e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d100      	bne.n	8007e2e <_strtod_l+0xa8e>
 8007e2c:	e58e      	b.n	800794c <_strtod_l+0x5ac>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	4c59      	ldr	r4, [pc, #356]	; (8007f98 <_strtod_l+0xbf8>)
 8007e32:	930a      	str	r3, [sp, #40]	; 0x28
 8007e34:	940b      	str	r4, [sp, #44]	; 0x2c
 8007e36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e38:	e01c      	b.n	8007e74 <_strtod_l+0xad4>
 8007e3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e3c:	4d50      	ldr	r5, [pc, #320]	; (8007f80 <_strtod_l+0xbe0>)
 8007e3e:	e7ab      	b.n	8007d98 <_strtod_l+0x9f8>
 8007e40:	2200      	movs	r2, #0
 8007e42:	0020      	movs	r0, r4
 8007e44:	0029      	movs	r1, r5
 8007e46:	4b4e      	ldr	r3, [pc, #312]	; (8007f80 <_strtod_l+0xbe0>)
 8007e48:	f7f9 fc12 	bl	8001670 <__aeabi_dmul>
 8007e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e4e:	0004      	movs	r4, r0
 8007e50:	000b      	movs	r3, r1
 8007e52:	000d      	movs	r5, r1
 8007e54:	2a00      	cmp	r2, #0
 8007e56:	d104      	bne.n	8007e62 <_strtod_l+0xac2>
 8007e58:	2280      	movs	r2, #128	; 0x80
 8007e5a:	0612      	lsls	r2, r2, #24
 8007e5c:	900a      	str	r0, [sp, #40]	; 0x28
 8007e5e:	188b      	adds	r3, r1, r2
 8007e60:	e79e      	b.n	8007da0 <_strtod_l+0xa00>
 8007e62:	0002      	movs	r2, r0
 8007e64:	920a      	str	r2, [sp, #40]	; 0x28
 8007e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e68:	e79b      	b.n	8007da2 <_strtod_l+0xa02>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4c43      	ldr	r4, [pc, #268]	; (8007f7c <_strtod_l+0xbdc>)
 8007e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e70:	940b      	str	r4, [sp, #44]	; 0x2c
 8007e72:	2400      	movs	r4, #0
 8007e74:	4d41      	ldr	r5, [pc, #260]	; (8007f7c <_strtod_l+0xbdc>)
 8007e76:	e794      	b.n	8007da2 <_strtod_l+0xa02>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4c47      	ldr	r4, [pc, #284]	; (8007f98 <_strtod_l+0xbf8>)
 8007e7c:	e7f7      	b.n	8007e6e <_strtod_l+0xace>
 8007e7e:	23d4      	movs	r3, #212	; 0xd4
 8007e80:	049b      	lsls	r3, r3, #18
 8007e82:	18cf      	adds	r7, r1, r3
 8007e84:	9b07      	ldr	r3, [sp, #28]
 8007e86:	970e      	str	r7, [sp, #56]	; 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1b9      	bne.n	8007e00 <_strtod_l+0xa60>
 8007e8c:	4b3d      	ldr	r3, [pc, #244]	; (8007f84 <_strtod_l+0xbe4>)
 8007e8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e90:	403b      	ands	r3, r7
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d1b4      	bne.n	8007e00 <_strtod_l+0xa60>
 8007e96:	0020      	movs	r0, r4
 8007e98:	0029      	movs	r1, r5
 8007e9a:	f7f8 fb71 	bl	8000580 <__aeabi_d2lz>
 8007e9e:	f7f8 fbab 	bl	80005f8 <__aeabi_l2d>
 8007ea2:	0002      	movs	r2, r0
 8007ea4:	000b      	movs	r3, r1
 8007ea6:	0020      	movs	r0, r4
 8007ea8:	0029      	movs	r1, r5
 8007eaa:	f7f9 fea3 	bl	8001bf4 <__aeabi_dsub>
 8007eae:	033b      	lsls	r3, r7, #12
 8007eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eb2:	0b1b      	lsrs	r3, r3, #12
 8007eb4:	4333      	orrs	r3, r6
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	0004      	movs	r4, r0
 8007eba:	000d      	movs	r5, r1
 8007ebc:	4a37      	ldr	r2, [pc, #220]	; (8007f9c <_strtod_l+0xbfc>)
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d054      	beq.n	8007f6c <_strtod_l+0xbcc>
 8007ec2:	4b37      	ldr	r3, [pc, #220]	; (8007fa0 <_strtod_l+0xc00>)
 8007ec4:	f7f8 fac8 	bl	8000458 <__aeabi_dcmplt>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d000      	beq.n	8007ece <_strtod_l+0xb2e>
 8007ecc:	e4d4      	b.n	8007878 <_strtod_l+0x4d8>
 8007ece:	0020      	movs	r0, r4
 8007ed0:	0029      	movs	r1, r5
 8007ed2:	4a34      	ldr	r2, [pc, #208]	; (8007fa4 <_strtod_l+0xc04>)
 8007ed4:	4b2a      	ldr	r3, [pc, #168]	; (8007f80 <_strtod_l+0xbe0>)
 8007ed6:	f7f8 fad3 	bl	8000480 <__aeabi_dcmpgt>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d090      	beq.n	8007e00 <_strtod_l+0xa60>
 8007ede:	e4cb      	b.n	8007878 <_strtod_l+0x4d8>
 8007ee0:	9b07      	ldr	r3, [sp, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d02b      	beq.n	8007f3e <_strtod_l+0xb9e>
 8007ee6:	23d4      	movs	r3, #212	; 0xd4
 8007ee8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007eea:	04db      	lsls	r3, r3, #19
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d826      	bhi.n	8007f3e <_strtod_l+0xb9e>
 8007ef0:	0020      	movs	r0, r4
 8007ef2:	0029      	movs	r1, r5
 8007ef4:	4a2c      	ldr	r2, [pc, #176]	; (8007fa8 <_strtod_l+0xc08>)
 8007ef6:	4b2d      	ldr	r3, [pc, #180]	; (8007fac <_strtod_l+0xc0c>)
 8007ef8:	f7f8 fab8 	bl	800046c <__aeabi_dcmple>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d017      	beq.n	8007f30 <_strtod_l+0xb90>
 8007f00:	0020      	movs	r0, r4
 8007f02:	0029      	movs	r1, r5
 8007f04:	f7f8 fb1e 	bl	8000544 <__aeabi_d2uiz>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d100      	bne.n	8007f0e <_strtod_l+0xb6e>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	f7fa fa77 	bl	8002400 <__aeabi_ui2d>
 8007f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f14:	0004      	movs	r4, r0
 8007f16:	000b      	movs	r3, r1
 8007f18:	000d      	movs	r5, r1
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d122      	bne.n	8007f64 <_strtod_l+0xbc4>
 8007f1e:	2280      	movs	r2, #128	; 0x80
 8007f20:	0612      	lsls	r2, r2, #24
 8007f22:	188b      	adds	r3, r1, r2
 8007f24:	9016      	str	r0, [sp, #88]	; 0x58
 8007f26:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f28:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f2c:	9212      	str	r2, [sp, #72]	; 0x48
 8007f2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f30:	22d6      	movs	r2, #214	; 0xd6
 8007f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f34:	04d2      	lsls	r2, r2, #19
 8007f36:	189b      	adds	r3, r3, r2
 8007f38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f42:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007f44:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007f46:	f003 f875 	bl	800b034 <__ulp>
 8007f4a:	0002      	movs	r2, r0
 8007f4c:	000b      	movs	r3, r1
 8007f4e:	0030      	movs	r0, r6
 8007f50:	0039      	movs	r1, r7
 8007f52:	f7f9 fb8d 	bl	8001670 <__aeabi_dmul>
 8007f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f5a:	f7f8 fc2f 	bl	80007bc <__aeabi_dadd>
 8007f5e:	0006      	movs	r6, r0
 8007f60:	000f      	movs	r7, r1
 8007f62:	e78f      	b.n	8007e84 <_strtod_l+0xae4>
 8007f64:	0002      	movs	r2, r0
 8007f66:	9216      	str	r2, [sp, #88]	; 0x58
 8007f68:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f6a:	e7dd      	b.n	8007f28 <_strtod_l+0xb88>
 8007f6c:	4b10      	ldr	r3, [pc, #64]	; (8007fb0 <_strtod_l+0xc10>)
 8007f6e:	f7f8 fa73 	bl	8000458 <__aeabi_dcmplt>
 8007f72:	e7b2      	b.n	8007eda <_strtod_l+0xb3a>
 8007f74:	fff00000 	.word	0xfff00000
 8007f78:	000fffff 	.word	0x000fffff
 8007f7c:	3ff00000 	.word	0x3ff00000
 8007f80:	3fe00000 	.word	0x3fe00000
 8007f84:	7ff00000 	.word	0x7ff00000
 8007f88:	7fe00000 	.word	0x7fe00000
 8007f8c:	fcb00000 	.word	0xfcb00000
 8007f90:	7c9fffff 	.word	0x7c9fffff
 8007f94:	7fefffff 	.word	0x7fefffff
 8007f98:	bff00000 	.word	0xbff00000
 8007f9c:	94a03595 	.word	0x94a03595
 8007fa0:	3fdfffff 	.word	0x3fdfffff
 8007fa4:	35afe535 	.word	0x35afe535
 8007fa8:	ffc00000 	.word	0xffc00000
 8007fac:	41dfffff 	.word	0x41dfffff
 8007fb0:	3fcfffff 	.word	0x3fcfffff

08007fb4 <_strtod_r>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <_strtod_r+0xc>)
 8007fb8:	f7ff f9f2 	bl	80073a0 <_strtod_l>
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	20000018 	.word	0x20000018

08007fc4 <_strtol_l.constprop.0>:
 8007fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	001e      	movs	r6, r3
 8007fca:	9005      	str	r0, [sp, #20]
 8007fcc:	9101      	str	r1, [sp, #4]
 8007fce:	9202      	str	r2, [sp, #8]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d048      	beq.n	8008066 <_strtol_l.constprop.0+0xa2>
 8007fd4:	000b      	movs	r3, r1
 8007fd6:	2e24      	cmp	r6, #36	; 0x24
 8007fd8:	d845      	bhi.n	8008066 <_strtol_l.constprop.0+0xa2>
 8007fda:	4a3b      	ldr	r2, [pc, #236]	; (80080c8 <_strtol_l.constprop.0+0x104>)
 8007fdc:	2108      	movs	r1, #8
 8007fde:	4694      	mov	ip, r2
 8007fe0:	001a      	movs	r2, r3
 8007fe2:	4660      	mov	r0, ip
 8007fe4:	7814      	ldrb	r4, [r2, #0]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	5d00      	ldrb	r0, [r0, r4]
 8007fea:	001d      	movs	r5, r3
 8007fec:	0007      	movs	r7, r0
 8007fee:	400f      	ands	r7, r1
 8007ff0:	4208      	tst	r0, r1
 8007ff2:	d1f5      	bne.n	8007fe0 <_strtol_l.constprop.0+0x1c>
 8007ff4:	2c2d      	cmp	r4, #45	; 0x2d
 8007ff6:	d13d      	bne.n	8008074 <_strtol_l.constprop.0+0xb0>
 8007ff8:	2701      	movs	r7, #1
 8007ffa:	781c      	ldrb	r4, [r3, #0]
 8007ffc:	1c95      	adds	r5, r2, #2
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	d05e      	beq.n	80080c0 <_strtol_l.constprop.0+0xfc>
 8008002:	2e10      	cmp	r6, #16
 8008004:	d109      	bne.n	800801a <_strtol_l.constprop.0+0x56>
 8008006:	2c30      	cmp	r4, #48	; 0x30
 8008008:	d107      	bne.n	800801a <_strtol_l.constprop.0+0x56>
 800800a:	2220      	movs	r2, #32
 800800c:	782b      	ldrb	r3, [r5, #0]
 800800e:	4393      	bics	r3, r2
 8008010:	2b58      	cmp	r3, #88	; 0x58
 8008012:	d150      	bne.n	80080b6 <_strtol_l.constprop.0+0xf2>
 8008014:	2610      	movs	r6, #16
 8008016:	786c      	ldrb	r4, [r5, #1]
 8008018:	3502      	adds	r5, #2
 800801a:	4b2c      	ldr	r3, [pc, #176]	; (80080cc <_strtol_l.constprop.0+0x108>)
 800801c:	0031      	movs	r1, r6
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	0018      	movs	r0, r3
 8008022:	9303      	str	r3, [sp, #12]
 8008024:	f7f8 f912 	bl	800024c <__aeabi_uidivmod>
 8008028:	2200      	movs	r2, #0
 800802a:	9104      	str	r1, [sp, #16]
 800802c:	2101      	movs	r1, #1
 800802e:	4684      	mov	ip, r0
 8008030:	0010      	movs	r0, r2
 8008032:	4249      	negs	r1, r1
 8008034:	0023      	movs	r3, r4
 8008036:	3b30      	subs	r3, #48	; 0x30
 8008038:	2b09      	cmp	r3, #9
 800803a:	d903      	bls.n	8008044 <_strtol_l.constprop.0+0x80>
 800803c:	3b11      	subs	r3, #17
 800803e:	2b19      	cmp	r3, #25
 8008040:	d81d      	bhi.n	800807e <_strtol_l.constprop.0+0xba>
 8008042:	330a      	adds	r3, #10
 8008044:	429e      	cmp	r6, r3
 8008046:	dd1e      	ble.n	8008086 <_strtol_l.constprop.0+0xc2>
 8008048:	1c54      	adds	r4, r2, #1
 800804a:	d009      	beq.n	8008060 <_strtol_l.constprop.0+0x9c>
 800804c:	000a      	movs	r2, r1
 800804e:	4584      	cmp	ip, r0
 8008050:	d306      	bcc.n	8008060 <_strtol_l.constprop.0+0x9c>
 8008052:	d102      	bne.n	800805a <_strtol_l.constprop.0+0x96>
 8008054:	9c04      	ldr	r4, [sp, #16]
 8008056:	429c      	cmp	r4, r3
 8008058:	db02      	blt.n	8008060 <_strtol_l.constprop.0+0x9c>
 800805a:	2201      	movs	r2, #1
 800805c:	4370      	muls	r0, r6
 800805e:	1818      	adds	r0, r3, r0
 8008060:	782c      	ldrb	r4, [r5, #0]
 8008062:	3501      	adds	r5, #1
 8008064:	e7e6      	b.n	8008034 <_strtol_l.constprop.0+0x70>
 8008066:	f001 f8ff 	bl	8009268 <__errno>
 800806a:	2316      	movs	r3, #22
 800806c:	6003      	str	r3, [r0, #0]
 800806e:	2000      	movs	r0, #0
 8008070:	b007      	add	sp, #28
 8008072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008074:	2c2b      	cmp	r4, #43	; 0x2b
 8008076:	d1c2      	bne.n	8007ffe <_strtol_l.constprop.0+0x3a>
 8008078:	781c      	ldrb	r4, [r3, #0]
 800807a:	1c95      	adds	r5, r2, #2
 800807c:	e7bf      	b.n	8007ffe <_strtol_l.constprop.0+0x3a>
 800807e:	0023      	movs	r3, r4
 8008080:	3b61      	subs	r3, #97	; 0x61
 8008082:	2b19      	cmp	r3, #25
 8008084:	d9dd      	bls.n	8008042 <_strtol_l.constprop.0+0x7e>
 8008086:	1c53      	adds	r3, r2, #1
 8008088:	d109      	bne.n	800809e <_strtol_l.constprop.0+0xda>
 800808a:	2322      	movs	r3, #34	; 0x22
 800808c:	9a05      	ldr	r2, [sp, #20]
 800808e:	9803      	ldr	r0, [sp, #12]
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0eb      	beq.n	8008070 <_strtol_l.constprop.0+0xac>
 8008098:	1e6b      	subs	r3, r5, #1
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	e007      	b.n	80080ae <_strtol_l.constprop.0+0xea>
 800809e:	2f00      	cmp	r7, #0
 80080a0:	d000      	beq.n	80080a4 <_strtol_l.constprop.0+0xe0>
 80080a2:	4240      	negs	r0, r0
 80080a4:	9b02      	ldr	r3, [sp, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0e2      	beq.n	8008070 <_strtol_l.constprop.0+0xac>
 80080aa:	2a00      	cmp	r2, #0
 80080ac:	d1f4      	bne.n	8008098 <_strtol_l.constprop.0+0xd4>
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	9a01      	ldr	r2, [sp, #4]
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e7dc      	b.n	8008070 <_strtol_l.constprop.0+0xac>
 80080b6:	2430      	movs	r4, #48	; 0x30
 80080b8:	2e00      	cmp	r6, #0
 80080ba:	d1ae      	bne.n	800801a <_strtol_l.constprop.0+0x56>
 80080bc:	3608      	adds	r6, #8
 80080be:	e7ac      	b.n	800801a <_strtol_l.constprop.0+0x56>
 80080c0:	2c30      	cmp	r4, #48	; 0x30
 80080c2:	d0a2      	beq.n	800800a <_strtol_l.constprop.0+0x46>
 80080c4:	260a      	movs	r6, #10
 80080c6:	e7a8      	b.n	800801a <_strtol_l.constprop.0+0x56>
 80080c8:	0800bdc9 	.word	0x0800bdc9
 80080cc:	7fffffff 	.word	0x7fffffff

080080d0 <_strtol_r>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	f7ff ff77 	bl	8007fc4 <_strtol_l.constprop.0>
 80080d6:	bd10      	pop	{r4, pc}

080080d8 <__cvt>:
 80080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080da:	001e      	movs	r6, r3
 80080dc:	2300      	movs	r3, #0
 80080de:	0014      	movs	r4, r2
 80080e0:	b08b      	sub	sp, #44	; 0x2c
 80080e2:	429e      	cmp	r6, r3
 80080e4:	da04      	bge.n	80080f0 <__cvt+0x18>
 80080e6:	2180      	movs	r1, #128	; 0x80
 80080e8:	0609      	lsls	r1, r1, #24
 80080ea:	1873      	adds	r3, r6, r1
 80080ec:	001e      	movs	r6, r3
 80080ee:	232d      	movs	r3, #45	; 0x2d
 80080f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80080f4:	7013      	strb	r3, [r2, #0]
 80080f6:	2320      	movs	r3, #32
 80080f8:	2203      	movs	r2, #3
 80080fa:	439f      	bics	r7, r3
 80080fc:	2f46      	cmp	r7, #70	; 0x46
 80080fe:	d007      	beq.n	8008110 <__cvt+0x38>
 8008100:	003b      	movs	r3, r7
 8008102:	3b45      	subs	r3, #69	; 0x45
 8008104:	4259      	negs	r1, r3
 8008106:	414b      	adcs	r3, r1
 8008108:	9910      	ldr	r1, [sp, #64]	; 0x40
 800810a:	3a01      	subs	r2, #1
 800810c:	18cb      	adds	r3, r1, r3
 800810e:	9310      	str	r3, [sp, #64]	; 0x40
 8008110:	ab09      	add	r3, sp, #36	; 0x24
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	ab08      	add	r3, sp, #32
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800811a:	9200      	str	r2, [sp, #0]
 800811c:	9302      	str	r3, [sp, #8]
 800811e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008120:	0022      	movs	r2, r4
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	0033      	movs	r3, r6
 8008126:	f001 f97b 	bl	8009420 <_dtoa_r>
 800812a:	0005      	movs	r5, r0
 800812c:	2f47      	cmp	r7, #71	; 0x47
 800812e:	d102      	bne.n	8008136 <__cvt+0x5e>
 8008130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008132:	07db      	lsls	r3, r3, #31
 8008134:	d528      	bpl.n	8008188 <__cvt+0xb0>
 8008136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008138:	18eb      	adds	r3, r5, r3
 800813a:	9307      	str	r3, [sp, #28]
 800813c:	2f46      	cmp	r7, #70	; 0x46
 800813e:	d114      	bne.n	800816a <__cvt+0x92>
 8008140:	782b      	ldrb	r3, [r5, #0]
 8008142:	2b30      	cmp	r3, #48	; 0x30
 8008144:	d10c      	bne.n	8008160 <__cvt+0x88>
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	0020      	movs	r0, r4
 800814c:	0031      	movs	r1, r6
 800814e:	f7f8 f97d 	bl	800044c <__aeabi_dcmpeq>
 8008152:	2800      	cmp	r0, #0
 8008154:	d104      	bne.n	8008160 <__cvt+0x88>
 8008156:	2301      	movs	r3, #1
 8008158:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008162:	9a07      	ldr	r2, [sp, #28]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	18d3      	adds	r3, r2, r3
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	0020      	movs	r0, r4
 8008170:	0031      	movs	r1, r6
 8008172:	f7f8 f96b 	bl	800044c <__aeabi_dcmpeq>
 8008176:	2800      	cmp	r0, #0
 8008178:	d001      	beq.n	800817e <__cvt+0xa6>
 800817a:	9b07      	ldr	r3, [sp, #28]
 800817c:	9309      	str	r3, [sp, #36]	; 0x24
 800817e:	2230      	movs	r2, #48	; 0x30
 8008180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008182:	9907      	ldr	r1, [sp, #28]
 8008184:	428b      	cmp	r3, r1
 8008186:	d306      	bcc.n	8008196 <__cvt+0xbe>
 8008188:	0028      	movs	r0, r5
 800818a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800818e:	1b5b      	subs	r3, r3, r5
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	b00b      	add	sp, #44	; 0x2c
 8008194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008196:	1c59      	adds	r1, r3, #1
 8008198:	9109      	str	r1, [sp, #36]	; 0x24
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e7f0      	b.n	8008180 <__cvt+0xa8>

0800819e <__exponent>:
 800819e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081a0:	1c83      	adds	r3, r0, #2
 80081a2:	b087      	sub	sp, #28
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	0005      	movs	r5, r0
 80081a8:	000c      	movs	r4, r1
 80081aa:	232b      	movs	r3, #43	; 0x2b
 80081ac:	7002      	strb	r2, [r0, #0]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	da01      	bge.n	80081b6 <__exponent+0x18>
 80081b2:	424c      	negs	r4, r1
 80081b4:	3302      	adds	r3, #2
 80081b6:	706b      	strb	r3, [r5, #1]
 80081b8:	2c09      	cmp	r4, #9
 80081ba:	dd2f      	ble.n	800821c <__exponent+0x7e>
 80081bc:	270a      	movs	r7, #10
 80081be:	ab04      	add	r3, sp, #16
 80081c0:	1dde      	adds	r6, r3, #7
 80081c2:	0020      	movs	r0, r4
 80081c4:	0039      	movs	r1, r7
 80081c6:	9601      	str	r6, [sp, #4]
 80081c8:	f7f8 f92a 	bl	8000420 <__aeabi_idivmod>
 80081cc:	3e01      	subs	r6, #1
 80081ce:	3130      	adds	r1, #48	; 0x30
 80081d0:	0020      	movs	r0, r4
 80081d2:	7031      	strb	r1, [r6, #0]
 80081d4:	0039      	movs	r1, r7
 80081d6:	9402      	str	r4, [sp, #8]
 80081d8:	f7f8 f83c 	bl	8000254 <__divsi3>
 80081dc:	9b02      	ldr	r3, [sp, #8]
 80081de:	0004      	movs	r4, r0
 80081e0:	2b63      	cmp	r3, #99	; 0x63
 80081e2:	dcee      	bgt.n	80081c2 <__exponent+0x24>
 80081e4:	9b01      	ldr	r3, [sp, #4]
 80081e6:	3430      	adds	r4, #48	; 0x30
 80081e8:	1e9a      	subs	r2, r3, #2
 80081ea:	0013      	movs	r3, r2
 80081ec:	9903      	ldr	r1, [sp, #12]
 80081ee:	7014      	strb	r4, [r2, #0]
 80081f0:	a804      	add	r0, sp, #16
 80081f2:	3007      	adds	r0, #7
 80081f4:	4298      	cmp	r0, r3
 80081f6:	d80c      	bhi.n	8008212 <__exponent+0x74>
 80081f8:	2300      	movs	r3, #0
 80081fa:	4282      	cmp	r2, r0
 80081fc:	d804      	bhi.n	8008208 <__exponent+0x6a>
 80081fe:	aa04      	add	r2, sp, #16
 8008200:	3309      	adds	r3, #9
 8008202:	189b      	adds	r3, r3, r2
 8008204:	9a01      	ldr	r2, [sp, #4]
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	9a03      	ldr	r2, [sp, #12]
 800820a:	18d3      	adds	r3, r2, r3
 800820c:	1b58      	subs	r0, r3, r5
 800820e:	b007      	add	sp, #28
 8008210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008212:	7818      	ldrb	r0, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	7008      	strb	r0, [r1, #0]
 8008218:	3101      	adds	r1, #1
 800821a:	e7e9      	b.n	80081f0 <__exponent+0x52>
 800821c:	2330      	movs	r3, #48	; 0x30
 800821e:	3430      	adds	r4, #48	; 0x30
 8008220:	70ab      	strb	r3, [r5, #2]
 8008222:	70ec      	strb	r4, [r5, #3]
 8008224:	1d2b      	adds	r3, r5, #4
 8008226:	e7f1      	b.n	800820c <__exponent+0x6e>

08008228 <_printf_float>:
 8008228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800822a:	b095      	sub	sp, #84	; 0x54
 800822c:	000c      	movs	r4, r1
 800822e:	9208      	str	r2, [sp, #32]
 8008230:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008232:	9309      	str	r3, [sp, #36]	; 0x24
 8008234:	0007      	movs	r7, r0
 8008236:	f000 ffc5 	bl	80091c4 <_localeconv_r>
 800823a:	6803      	ldr	r3, [r0, #0]
 800823c:	0018      	movs	r0, r3
 800823e:	930c      	str	r3, [sp, #48]	; 0x30
 8008240:	f7f7 ff62 	bl	8000108 <strlen>
 8008244:	2300      	movs	r3, #0
 8008246:	9312      	str	r3, [sp, #72]	; 0x48
 8008248:	7e23      	ldrb	r3, [r4, #24]
 800824a:	2207      	movs	r2, #7
 800824c:	930a      	str	r3, [sp, #40]	; 0x28
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	900d      	str	r0, [sp, #52]	; 0x34
 8008252:	930b      	str	r3, [sp, #44]	; 0x2c
 8008254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	05c9      	lsls	r1, r1, #23
 800825a:	d547      	bpl.n	80082ec <_printf_float+0xc4>
 800825c:	189b      	adds	r3, r3, r2
 800825e:	4393      	bics	r3, r2
 8008260:	001a      	movs	r2, r3
 8008262:	3208      	adds	r2, #8
 8008264:	602a      	str	r2, [r5, #0]
 8008266:	681e      	ldr	r6, [r3, #0]
 8008268:	685d      	ldr	r5, [r3, #4]
 800826a:	0032      	movs	r2, r6
 800826c:	002b      	movs	r3, r5
 800826e:	64a2      	str	r2, [r4, #72]	; 0x48
 8008270:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008272:	2201      	movs	r2, #1
 8008274:	006b      	lsls	r3, r5, #1
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	930e      	str	r3, [sp, #56]	; 0x38
 800827a:	0030      	movs	r0, r6
 800827c:	4bab      	ldr	r3, [pc, #684]	; (800852c <_printf_float+0x304>)
 800827e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008280:	4252      	negs	r2, r2
 8008282:	f7fa f839 	bl	80022f8 <__aeabi_dcmpun>
 8008286:	2800      	cmp	r0, #0
 8008288:	d132      	bne.n	80082f0 <_printf_float+0xc8>
 800828a:	2201      	movs	r2, #1
 800828c:	0030      	movs	r0, r6
 800828e:	4ba7      	ldr	r3, [pc, #668]	; (800852c <_printf_float+0x304>)
 8008290:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008292:	4252      	negs	r2, r2
 8008294:	f7f8 f8ea 	bl	800046c <__aeabi_dcmple>
 8008298:	2800      	cmp	r0, #0
 800829a:	d129      	bne.n	80082f0 <_printf_float+0xc8>
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	0030      	movs	r0, r6
 80082a2:	0029      	movs	r1, r5
 80082a4:	f7f8 f8d8 	bl	8000458 <__aeabi_dcmplt>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d003      	beq.n	80082b4 <_printf_float+0x8c>
 80082ac:	0023      	movs	r3, r4
 80082ae:	222d      	movs	r2, #45	; 0x2d
 80082b0:	3343      	adds	r3, #67	; 0x43
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b6:	4d9e      	ldr	r5, [pc, #632]	; (8008530 <_printf_float+0x308>)
 80082b8:	2b47      	cmp	r3, #71	; 0x47
 80082ba:	d900      	bls.n	80082be <_printf_float+0x96>
 80082bc:	4d9d      	ldr	r5, [pc, #628]	; (8008534 <_printf_float+0x30c>)
 80082be:	2303      	movs	r3, #3
 80082c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	3301      	adds	r3, #1
 80082c6:	439a      	bics	r2, r3
 80082c8:	2300      	movs	r3, #0
 80082ca:	6022      	str	r2, [r4, #0]
 80082cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d0:	0021      	movs	r1, r4
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	0038      	movs	r0, r7
 80082d6:	9b08      	ldr	r3, [sp, #32]
 80082d8:	aa13      	add	r2, sp, #76	; 0x4c
 80082da:	f000 f9fb 	bl	80086d4 <_printf_common>
 80082de:	3001      	adds	r0, #1
 80082e0:	d000      	beq.n	80082e4 <_printf_float+0xbc>
 80082e2:	e0a3      	b.n	800842c <_printf_float+0x204>
 80082e4:	2001      	movs	r0, #1
 80082e6:	4240      	negs	r0, r0
 80082e8:	b015      	add	sp, #84	; 0x54
 80082ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ec:	3307      	adds	r3, #7
 80082ee:	e7b6      	b.n	800825e <_printf_float+0x36>
 80082f0:	0032      	movs	r2, r6
 80082f2:	002b      	movs	r3, r5
 80082f4:	0030      	movs	r0, r6
 80082f6:	0029      	movs	r1, r5
 80082f8:	f7f9 fffe 	bl	80022f8 <__aeabi_dcmpun>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d00b      	beq.n	8008318 <_printf_float+0xf0>
 8008300:	2d00      	cmp	r5, #0
 8008302:	da03      	bge.n	800830c <_printf_float+0xe4>
 8008304:	0023      	movs	r3, r4
 8008306:	222d      	movs	r2, #45	; 0x2d
 8008308:	3343      	adds	r3, #67	; 0x43
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830e:	4d8a      	ldr	r5, [pc, #552]	; (8008538 <_printf_float+0x310>)
 8008310:	2b47      	cmp	r3, #71	; 0x47
 8008312:	d9d4      	bls.n	80082be <_printf_float+0x96>
 8008314:	4d89      	ldr	r5, [pc, #548]	; (800853c <_printf_float+0x314>)
 8008316:	e7d2      	b.n	80082be <_printf_float+0x96>
 8008318:	2220      	movs	r2, #32
 800831a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	4391      	bics	r1, r2
 8008320:	910e      	str	r1, [sp, #56]	; 0x38
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	d14a      	bne.n	80083bc <_printf_float+0x194>
 8008326:	3307      	adds	r3, #7
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	2380      	movs	r3, #128	; 0x80
 800832c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	4313      	orrs	r3, r2
 8008332:	2200      	movs	r2, #0
 8008334:	9206      	str	r2, [sp, #24]
 8008336:	aa12      	add	r2, sp, #72	; 0x48
 8008338:	9205      	str	r2, [sp, #20]
 800833a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	9204      	str	r2, [sp, #16]
 8008340:	aa11      	add	r2, sp, #68	; 0x44
 8008342:	9203      	str	r2, [sp, #12]
 8008344:	2223      	movs	r2, #35	; 0x23
 8008346:	a908      	add	r1, sp, #32
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	6863      	ldr	r3, [r4, #4]
 800834c:	1852      	adds	r2, r2, r1
 800834e:	9202      	str	r2, [sp, #8]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	0032      	movs	r2, r6
 8008354:	002b      	movs	r3, r5
 8008356:	0038      	movs	r0, r7
 8008358:	f7ff febe 	bl	80080d8 <__cvt>
 800835c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800835e:	0005      	movs	r5, r0
 8008360:	2b47      	cmp	r3, #71	; 0x47
 8008362:	d109      	bne.n	8008378 <_printf_float+0x150>
 8008364:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008366:	1cda      	adds	r2, r3, #3
 8008368:	db02      	blt.n	8008370 <_printf_float+0x148>
 800836a:	6862      	ldr	r2, [r4, #4]
 800836c:	4293      	cmp	r3, r2
 800836e:	dd49      	ble.n	8008404 <_printf_float+0x1dc>
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	3b02      	subs	r3, #2
 8008374:	b2db      	uxtb	r3, r3
 8008376:	930a      	str	r3, [sp, #40]	; 0x28
 8008378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800837c:	2b65      	cmp	r3, #101	; 0x65
 800837e:	d824      	bhi.n	80083ca <_printf_float+0x1a2>
 8008380:	0020      	movs	r0, r4
 8008382:	001a      	movs	r2, r3
 8008384:	3901      	subs	r1, #1
 8008386:	3050      	adds	r0, #80	; 0x50
 8008388:	9111      	str	r1, [sp, #68]	; 0x44
 800838a:	f7ff ff08 	bl	800819e <__exponent>
 800838e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008390:	900b      	str	r0, [sp, #44]	; 0x2c
 8008392:	1813      	adds	r3, r2, r0
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	2a01      	cmp	r2, #1
 8008398:	dc02      	bgt.n	80083a0 <_printf_float+0x178>
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	07d2      	lsls	r2, r2, #31
 800839e:	d501      	bpl.n	80083a4 <_printf_float+0x17c>
 80083a0:	3301      	adds	r3, #1
 80083a2:	6123      	str	r3, [r4, #16]
 80083a4:	2323      	movs	r3, #35	; 0x23
 80083a6:	aa08      	add	r2, sp, #32
 80083a8:	189b      	adds	r3, r3, r2
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d100      	bne.n	80083b2 <_printf_float+0x18a>
 80083b0:	e78d      	b.n	80082ce <_printf_float+0xa6>
 80083b2:	0023      	movs	r3, r4
 80083b4:	222d      	movs	r2, #45	; 0x2d
 80083b6:	3343      	adds	r3, #67	; 0x43
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e788      	b.n	80082ce <_printf_float+0xa6>
 80083bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083be:	2a47      	cmp	r2, #71	; 0x47
 80083c0:	d1b3      	bne.n	800832a <_printf_float+0x102>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1b1      	bne.n	800832a <_printf_float+0x102>
 80083c6:	3301      	adds	r3, #1
 80083c8:	e7ae      	b.n	8008328 <_printf_float+0x100>
 80083ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083cc:	2b66      	cmp	r3, #102	; 0x66
 80083ce:	d11b      	bne.n	8008408 <_printf_float+0x1e0>
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	2900      	cmp	r1, #0
 80083d4:	dd09      	ble.n	80083ea <_printf_float+0x1c2>
 80083d6:	6121      	str	r1, [r4, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <_printf_float+0x1ba>
 80083dc:	6822      	ldr	r2, [r4, #0]
 80083de:	07d2      	lsls	r2, r2, #31
 80083e0:	d50b      	bpl.n	80083fa <_printf_float+0x1d2>
 80083e2:	3301      	adds	r3, #1
 80083e4:	185b      	adds	r3, r3, r1
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	e007      	b.n	80083fa <_printf_float+0x1d2>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <_printf_float+0x1ce>
 80083ee:	2201      	movs	r2, #1
 80083f0:	6821      	ldr	r1, [r4, #0]
 80083f2:	4211      	tst	r1, r2
 80083f4:	d000      	beq.n	80083f8 <_printf_float+0x1d0>
 80083f6:	1c9a      	adds	r2, r3, #2
 80083f8:	6122      	str	r2, [r4, #16]
 80083fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80083fe:	2300      	movs	r3, #0
 8008400:	930b      	str	r3, [sp, #44]	; 0x2c
 8008402:	e7cf      	b.n	80083a4 <_printf_float+0x17c>
 8008404:	2367      	movs	r3, #103	; 0x67
 8008406:	930a      	str	r3, [sp, #40]	; 0x28
 8008408:	9911      	ldr	r1, [sp, #68]	; 0x44
 800840a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800840c:	4299      	cmp	r1, r3
 800840e:	db06      	blt.n	800841e <_printf_float+0x1f6>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	6121      	str	r1, [r4, #16]
 8008414:	07db      	lsls	r3, r3, #31
 8008416:	d5f0      	bpl.n	80083fa <_printf_float+0x1d2>
 8008418:	3101      	adds	r1, #1
 800841a:	6121      	str	r1, [r4, #16]
 800841c:	e7ed      	b.n	80083fa <_printf_float+0x1d2>
 800841e:	2201      	movs	r2, #1
 8008420:	2900      	cmp	r1, #0
 8008422:	dc01      	bgt.n	8008428 <_printf_float+0x200>
 8008424:	1892      	adds	r2, r2, r2
 8008426:	1a52      	subs	r2, r2, r1
 8008428:	189b      	adds	r3, r3, r2
 800842a:	e7dc      	b.n	80083e6 <_printf_float+0x1be>
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	0553      	lsls	r3, r2, #21
 8008430:	d408      	bmi.n	8008444 <_printf_float+0x21c>
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	002a      	movs	r2, r5
 8008436:	0038      	movs	r0, r7
 8008438:	9908      	ldr	r1, [sp, #32]
 800843a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800843c:	47a8      	blx	r5
 800843e:	3001      	adds	r0, #1
 8008440:	d12a      	bne.n	8008498 <_printf_float+0x270>
 8008442:	e74f      	b.n	80082e4 <_printf_float+0xbc>
 8008444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008446:	2b65      	cmp	r3, #101	; 0x65
 8008448:	d800      	bhi.n	800844c <_printf_float+0x224>
 800844a:	e0ec      	b.n	8008626 <_printf_float+0x3fe>
 800844c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800844e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	f7f7 fffa 	bl	800044c <__aeabi_dcmpeq>
 8008458:	2800      	cmp	r0, #0
 800845a:	d034      	beq.n	80084c6 <_printf_float+0x29e>
 800845c:	2301      	movs	r3, #1
 800845e:	0038      	movs	r0, r7
 8008460:	4a37      	ldr	r2, [pc, #220]	; (8008540 <_printf_float+0x318>)
 8008462:	9908      	ldr	r1, [sp, #32]
 8008464:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008466:	47a8      	blx	r5
 8008468:	3001      	adds	r0, #1
 800846a:	d100      	bne.n	800846e <_printf_float+0x246>
 800846c:	e73a      	b.n	80082e4 <_printf_float+0xbc>
 800846e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008472:	429a      	cmp	r2, r3
 8008474:	db02      	blt.n	800847c <_printf_float+0x254>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	07db      	lsls	r3, r3, #31
 800847a:	d50d      	bpl.n	8008498 <_printf_float+0x270>
 800847c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800847e:	0038      	movs	r0, r7
 8008480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008484:	9908      	ldr	r1, [sp, #32]
 8008486:	47a8      	blx	r5
 8008488:	2500      	movs	r5, #0
 800848a:	3001      	adds	r0, #1
 800848c:	d100      	bne.n	8008490 <_printf_float+0x268>
 800848e:	e729      	b.n	80082e4 <_printf_float+0xbc>
 8008490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008492:	3b01      	subs	r3, #1
 8008494:	42ab      	cmp	r3, r5
 8008496:	dc0a      	bgt.n	80084ae <_printf_float+0x286>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	079b      	lsls	r3, r3, #30
 800849c:	d500      	bpl.n	80084a0 <_printf_float+0x278>
 800849e:	e116      	b.n	80086ce <_printf_float+0x4a6>
 80084a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084a2:	68e0      	ldr	r0, [r4, #12]
 80084a4:	4298      	cmp	r0, r3
 80084a6:	db00      	blt.n	80084aa <_printf_float+0x282>
 80084a8:	e71e      	b.n	80082e8 <_printf_float+0xc0>
 80084aa:	0018      	movs	r0, r3
 80084ac:	e71c      	b.n	80082e8 <_printf_float+0xc0>
 80084ae:	0022      	movs	r2, r4
 80084b0:	2301      	movs	r3, #1
 80084b2:	0038      	movs	r0, r7
 80084b4:	9908      	ldr	r1, [sp, #32]
 80084b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084b8:	321a      	adds	r2, #26
 80084ba:	47b0      	blx	r6
 80084bc:	3001      	adds	r0, #1
 80084be:	d100      	bne.n	80084c2 <_printf_float+0x29a>
 80084c0:	e710      	b.n	80082e4 <_printf_float+0xbc>
 80084c2:	3501      	adds	r5, #1
 80084c4:	e7e4      	b.n	8008490 <_printf_float+0x268>
 80084c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc3b      	bgt.n	8008544 <_printf_float+0x31c>
 80084cc:	2301      	movs	r3, #1
 80084ce:	0038      	movs	r0, r7
 80084d0:	4a1b      	ldr	r2, [pc, #108]	; (8008540 <_printf_float+0x318>)
 80084d2:	9908      	ldr	r1, [sp, #32]
 80084d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084d6:	47b0      	blx	r6
 80084d8:	3001      	adds	r0, #1
 80084da:	d100      	bne.n	80084de <_printf_float+0x2b6>
 80084dc:	e702      	b.n	80082e4 <_printf_float+0xbc>
 80084de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084e2:	4313      	orrs	r3, r2
 80084e4:	d102      	bne.n	80084ec <_printf_float+0x2c4>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d5d5      	bpl.n	8008498 <_printf_float+0x270>
 80084ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ee:	0038      	movs	r0, r7
 80084f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084f2:	9908      	ldr	r1, [sp, #32]
 80084f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084f6:	47b0      	blx	r6
 80084f8:	2300      	movs	r3, #0
 80084fa:	3001      	adds	r0, #1
 80084fc:	d100      	bne.n	8008500 <_printf_float+0x2d8>
 80084fe:	e6f1      	b.n	80082e4 <_printf_float+0xbc>
 8008500:	930a      	str	r3, [sp, #40]	; 0x28
 8008502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008506:	425b      	negs	r3, r3
 8008508:	4293      	cmp	r3, r2
 800850a:	dc01      	bgt.n	8008510 <_printf_float+0x2e8>
 800850c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800850e:	e791      	b.n	8008434 <_printf_float+0x20c>
 8008510:	0022      	movs	r2, r4
 8008512:	2301      	movs	r3, #1
 8008514:	0038      	movs	r0, r7
 8008516:	9908      	ldr	r1, [sp, #32]
 8008518:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800851a:	321a      	adds	r2, #26
 800851c:	47b0      	blx	r6
 800851e:	3001      	adds	r0, #1
 8008520:	d100      	bne.n	8008524 <_printf_float+0x2fc>
 8008522:	e6df      	b.n	80082e4 <_printf_float+0xbc>
 8008524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008526:	3301      	adds	r3, #1
 8008528:	e7ea      	b.n	8008500 <_printf_float+0x2d8>
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	7fefffff 	.word	0x7fefffff
 8008530:	0800bec9 	.word	0x0800bec9
 8008534:	0800becd 	.word	0x0800becd
 8008538:	0800bed1 	.word	0x0800bed1
 800853c:	0800bed5 	.word	0x0800bed5
 8008540:	0800bed9 	.word	0x0800bed9
 8008544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008548:	920a      	str	r2, [sp, #40]	; 0x28
 800854a:	429a      	cmp	r2, r3
 800854c:	dd00      	ble.n	8008550 <_printf_float+0x328>
 800854e:	930a      	str	r3, [sp, #40]	; 0x28
 8008550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	dc3d      	bgt.n	80085d2 <_printf_float+0x3aa>
 8008556:	2300      	movs	r3, #0
 8008558:	930e      	str	r3, [sp, #56]	; 0x38
 800855a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855c:	43db      	mvns	r3, r3
 800855e:	17db      	asrs	r3, r3, #31
 8008560:	930f      	str	r3, [sp, #60]	; 0x3c
 8008562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008566:	930b      	str	r3, [sp, #44]	; 0x2c
 8008568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800856a:	4013      	ands	r3, r2
 800856c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008572:	4293      	cmp	r3, r2
 8008574:	dc36      	bgt.n	80085e4 <_printf_float+0x3bc>
 8008576:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800857a:	429a      	cmp	r2, r3
 800857c:	db40      	blt.n	8008600 <_printf_float+0x3d8>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	07db      	lsls	r3, r3, #31
 8008582:	d43d      	bmi.n	8008600 <_printf_float+0x3d8>
 8008584:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008586:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800858a:	1af3      	subs	r3, r6, r3
 800858c:	1ab6      	subs	r6, r6, r2
 800858e:	429e      	cmp	r6, r3
 8008590:	dd00      	ble.n	8008594 <_printf_float+0x36c>
 8008592:	001e      	movs	r6, r3
 8008594:	2e00      	cmp	r6, #0
 8008596:	dc3c      	bgt.n	8008612 <_printf_float+0x3ea>
 8008598:	2300      	movs	r3, #0
 800859a:	930a      	str	r3, [sp, #40]	; 0x28
 800859c:	43f3      	mvns	r3, r6
 800859e:	17db      	asrs	r3, r3, #31
 80085a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085aa:	4032      	ands	r2, r6
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b0:	4293      	cmp	r3, r2
 80085b2:	dc00      	bgt.n	80085b6 <_printf_float+0x38e>
 80085b4:	e770      	b.n	8008498 <_printf_float+0x270>
 80085b6:	0022      	movs	r2, r4
 80085b8:	2301      	movs	r3, #1
 80085ba:	0038      	movs	r0, r7
 80085bc:	9908      	ldr	r1, [sp, #32]
 80085be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085c0:	321a      	adds	r2, #26
 80085c2:	47a8      	blx	r5
 80085c4:	3001      	adds	r0, #1
 80085c6:	d100      	bne.n	80085ca <_printf_float+0x3a2>
 80085c8:	e68c      	b.n	80082e4 <_printf_float+0xbc>
 80085ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085cc:	3301      	adds	r3, #1
 80085ce:	930a      	str	r3, [sp, #40]	; 0x28
 80085d0:	e7e7      	b.n	80085a2 <_printf_float+0x37a>
 80085d2:	002a      	movs	r2, r5
 80085d4:	0038      	movs	r0, r7
 80085d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d8:	9908      	ldr	r1, [sp, #32]
 80085da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085dc:	47b0      	blx	r6
 80085de:	3001      	adds	r0, #1
 80085e0:	d1b9      	bne.n	8008556 <_printf_float+0x32e>
 80085e2:	e67f      	b.n	80082e4 <_printf_float+0xbc>
 80085e4:	0022      	movs	r2, r4
 80085e6:	2301      	movs	r3, #1
 80085e8:	0038      	movs	r0, r7
 80085ea:	9908      	ldr	r1, [sp, #32]
 80085ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085ee:	321a      	adds	r2, #26
 80085f0:	47b0      	blx	r6
 80085f2:	3001      	adds	r0, #1
 80085f4:	d100      	bne.n	80085f8 <_printf_float+0x3d0>
 80085f6:	e675      	b.n	80082e4 <_printf_float+0xbc>
 80085f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085fa:	3301      	adds	r3, #1
 80085fc:	930e      	str	r3, [sp, #56]	; 0x38
 80085fe:	e7b0      	b.n	8008562 <_printf_float+0x33a>
 8008600:	0038      	movs	r0, r7
 8008602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008606:	9908      	ldr	r1, [sp, #32]
 8008608:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800860a:	47b0      	blx	r6
 800860c:	3001      	adds	r0, #1
 800860e:	d1b9      	bne.n	8008584 <_printf_float+0x35c>
 8008610:	e668      	b.n	80082e4 <_printf_float+0xbc>
 8008612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008614:	0038      	movs	r0, r7
 8008616:	18ea      	adds	r2, r5, r3
 8008618:	9908      	ldr	r1, [sp, #32]
 800861a:	0033      	movs	r3, r6
 800861c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800861e:	47a8      	blx	r5
 8008620:	3001      	adds	r0, #1
 8008622:	d1b9      	bne.n	8008598 <_printf_float+0x370>
 8008624:	e65e      	b.n	80082e4 <_printf_float+0xbc>
 8008626:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008628:	2b01      	cmp	r3, #1
 800862a:	dc02      	bgt.n	8008632 <_printf_float+0x40a>
 800862c:	2301      	movs	r3, #1
 800862e:	421a      	tst	r2, r3
 8008630:	d03a      	beq.n	80086a8 <_printf_float+0x480>
 8008632:	2301      	movs	r3, #1
 8008634:	002a      	movs	r2, r5
 8008636:	0038      	movs	r0, r7
 8008638:	9908      	ldr	r1, [sp, #32]
 800863a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800863c:	47b0      	blx	r6
 800863e:	3001      	adds	r0, #1
 8008640:	d100      	bne.n	8008644 <_printf_float+0x41c>
 8008642:	e64f      	b.n	80082e4 <_printf_float+0xbc>
 8008644:	0038      	movs	r0, r7
 8008646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800864a:	9908      	ldr	r1, [sp, #32]
 800864c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800864e:	47b0      	blx	r6
 8008650:	3001      	adds	r0, #1
 8008652:	d100      	bne.n	8008656 <_printf_float+0x42e>
 8008654:	e646      	b.n	80082e4 <_printf_float+0xbc>
 8008656:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008658:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800865a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800865c:	2200      	movs	r2, #0
 800865e:	001e      	movs	r6, r3
 8008660:	2300      	movs	r3, #0
 8008662:	f7f7 fef3 	bl	800044c <__aeabi_dcmpeq>
 8008666:	2800      	cmp	r0, #0
 8008668:	d11c      	bne.n	80086a4 <_printf_float+0x47c>
 800866a:	0033      	movs	r3, r6
 800866c:	1c6a      	adds	r2, r5, #1
 800866e:	3b01      	subs	r3, #1
 8008670:	0038      	movs	r0, r7
 8008672:	9908      	ldr	r1, [sp, #32]
 8008674:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008676:	47a8      	blx	r5
 8008678:	3001      	adds	r0, #1
 800867a:	d10f      	bne.n	800869c <_printf_float+0x474>
 800867c:	e632      	b.n	80082e4 <_printf_float+0xbc>
 800867e:	0022      	movs	r2, r4
 8008680:	2301      	movs	r3, #1
 8008682:	0038      	movs	r0, r7
 8008684:	9908      	ldr	r1, [sp, #32]
 8008686:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008688:	321a      	adds	r2, #26
 800868a:	47b0      	blx	r6
 800868c:	3001      	adds	r0, #1
 800868e:	d100      	bne.n	8008692 <_printf_float+0x46a>
 8008690:	e628      	b.n	80082e4 <_printf_float+0xbc>
 8008692:	3501      	adds	r5, #1
 8008694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008696:	3b01      	subs	r3, #1
 8008698:	42ab      	cmp	r3, r5
 800869a:	dcf0      	bgt.n	800867e <_printf_float+0x456>
 800869c:	0022      	movs	r2, r4
 800869e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a0:	3250      	adds	r2, #80	; 0x50
 80086a2:	e6c8      	b.n	8008436 <_printf_float+0x20e>
 80086a4:	2500      	movs	r5, #0
 80086a6:	e7f5      	b.n	8008694 <_printf_float+0x46c>
 80086a8:	002a      	movs	r2, r5
 80086aa:	e7e1      	b.n	8008670 <_printf_float+0x448>
 80086ac:	0022      	movs	r2, r4
 80086ae:	2301      	movs	r3, #1
 80086b0:	0038      	movs	r0, r7
 80086b2:	9908      	ldr	r1, [sp, #32]
 80086b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80086b6:	3219      	adds	r2, #25
 80086b8:	47b0      	blx	r6
 80086ba:	3001      	adds	r0, #1
 80086bc:	d100      	bne.n	80086c0 <_printf_float+0x498>
 80086be:	e611      	b.n	80082e4 <_printf_float+0xbc>
 80086c0:	3501      	adds	r5, #1
 80086c2:	68e3      	ldr	r3, [r4, #12]
 80086c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	42ab      	cmp	r3, r5
 80086ca:	dcef      	bgt.n	80086ac <_printf_float+0x484>
 80086cc:	e6e8      	b.n	80084a0 <_printf_float+0x278>
 80086ce:	2500      	movs	r5, #0
 80086d0:	e7f7      	b.n	80086c2 <_printf_float+0x49a>
 80086d2:	46c0      	nop			; (mov r8, r8)

080086d4 <_printf_common>:
 80086d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086d6:	0016      	movs	r6, r2
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	688a      	ldr	r2, [r1, #8]
 80086dc:	690b      	ldr	r3, [r1, #16]
 80086de:	000c      	movs	r4, r1
 80086e0:	9000      	str	r0, [sp, #0]
 80086e2:	4293      	cmp	r3, r2
 80086e4:	da00      	bge.n	80086e8 <_printf_common+0x14>
 80086e6:	0013      	movs	r3, r2
 80086e8:	0022      	movs	r2, r4
 80086ea:	6033      	str	r3, [r6, #0]
 80086ec:	3243      	adds	r2, #67	; 0x43
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	d001      	beq.n	80086f8 <_printf_common+0x24>
 80086f4:	3301      	adds	r3, #1
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	069b      	lsls	r3, r3, #26
 80086fc:	d502      	bpl.n	8008704 <_printf_common+0x30>
 80086fe:	6833      	ldr	r3, [r6, #0]
 8008700:	3302      	adds	r3, #2
 8008702:	6033      	str	r3, [r6, #0]
 8008704:	6822      	ldr	r2, [r4, #0]
 8008706:	2306      	movs	r3, #6
 8008708:	0015      	movs	r5, r2
 800870a:	401d      	ands	r5, r3
 800870c:	421a      	tst	r2, r3
 800870e:	d027      	beq.n	8008760 <_printf_common+0x8c>
 8008710:	0023      	movs	r3, r4
 8008712:	3343      	adds	r3, #67	; 0x43
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	1e5a      	subs	r2, r3, #1
 8008718:	4193      	sbcs	r3, r2
 800871a:	6822      	ldr	r2, [r4, #0]
 800871c:	0692      	lsls	r2, r2, #26
 800871e:	d430      	bmi.n	8008782 <_printf_common+0xae>
 8008720:	0022      	movs	r2, r4
 8008722:	9901      	ldr	r1, [sp, #4]
 8008724:	9800      	ldr	r0, [sp, #0]
 8008726:	9d08      	ldr	r5, [sp, #32]
 8008728:	3243      	adds	r2, #67	; 0x43
 800872a:	47a8      	blx	r5
 800872c:	3001      	adds	r0, #1
 800872e:	d025      	beq.n	800877c <_printf_common+0xa8>
 8008730:	2206      	movs	r2, #6
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	2500      	movs	r5, #0
 8008736:	4013      	ands	r3, r2
 8008738:	2b04      	cmp	r3, #4
 800873a:	d105      	bne.n	8008748 <_printf_common+0x74>
 800873c:	6833      	ldr	r3, [r6, #0]
 800873e:	68e5      	ldr	r5, [r4, #12]
 8008740:	1aed      	subs	r5, r5, r3
 8008742:	43eb      	mvns	r3, r5
 8008744:	17db      	asrs	r3, r3, #31
 8008746:	401d      	ands	r5, r3
 8008748:	68a3      	ldr	r3, [r4, #8]
 800874a:	6922      	ldr	r2, [r4, #16]
 800874c:	4293      	cmp	r3, r2
 800874e:	dd01      	ble.n	8008754 <_printf_common+0x80>
 8008750:	1a9b      	subs	r3, r3, r2
 8008752:	18ed      	adds	r5, r5, r3
 8008754:	2600      	movs	r6, #0
 8008756:	42b5      	cmp	r5, r6
 8008758:	d120      	bne.n	800879c <_printf_common+0xc8>
 800875a:	2000      	movs	r0, #0
 800875c:	e010      	b.n	8008780 <_printf_common+0xac>
 800875e:	3501      	adds	r5, #1
 8008760:	68e3      	ldr	r3, [r4, #12]
 8008762:	6832      	ldr	r2, [r6, #0]
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	42ab      	cmp	r3, r5
 8008768:	ddd2      	ble.n	8008710 <_printf_common+0x3c>
 800876a:	0022      	movs	r2, r4
 800876c:	2301      	movs	r3, #1
 800876e:	9901      	ldr	r1, [sp, #4]
 8008770:	9800      	ldr	r0, [sp, #0]
 8008772:	9f08      	ldr	r7, [sp, #32]
 8008774:	3219      	adds	r2, #25
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	d1f0      	bne.n	800875e <_printf_common+0x8a>
 800877c:	2001      	movs	r0, #1
 800877e:	4240      	negs	r0, r0
 8008780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008782:	2030      	movs	r0, #48	; 0x30
 8008784:	18e1      	adds	r1, r4, r3
 8008786:	3143      	adds	r1, #67	; 0x43
 8008788:	7008      	strb	r0, [r1, #0]
 800878a:	0021      	movs	r1, r4
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	3145      	adds	r1, #69	; 0x45
 8008790:	7809      	ldrb	r1, [r1, #0]
 8008792:	18a2      	adds	r2, r4, r2
 8008794:	3243      	adds	r2, #67	; 0x43
 8008796:	3302      	adds	r3, #2
 8008798:	7011      	strb	r1, [r2, #0]
 800879a:	e7c1      	b.n	8008720 <_printf_common+0x4c>
 800879c:	0022      	movs	r2, r4
 800879e:	2301      	movs	r3, #1
 80087a0:	9901      	ldr	r1, [sp, #4]
 80087a2:	9800      	ldr	r0, [sp, #0]
 80087a4:	9f08      	ldr	r7, [sp, #32]
 80087a6:	321a      	adds	r2, #26
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	d0e6      	beq.n	800877c <_printf_common+0xa8>
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7d1      	b.n	8008756 <_printf_common+0x82>
	...

080087b4 <_printf_i>:
 80087b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087b6:	b08b      	sub	sp, #44	; 0x2c
 80087b8:	9206      	str	r2, [sp, #24]
 80087ba:	000a      	movs	r2, r1
 80087bc:	3243      	adds	r2, #67	; 0x43
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	9005      	str	r0, [sp, #20]
 80087c2:	9204      	str	r2, [sp, #16]
 80087c4:	7e0a      	ldrb	r2, [r1, #24]
 80087c6:	000c      	movs	r4, r1
 80087c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087ca:	2a78      	cmp	r2, #120	; 0x78
 80087cc:	d809      	bhi.n	80087e2 <_printf_i+0x2e>
 80087ce:	2a62      	cmp	r2, #98	; 0x62
 80087d0:	d80b      	bhi.n	80087ea <_printf_i+0x36>
 80087d2:	2a00      	cmp	r2, #0
 80087d4:	d100      	bne.n	80087d8 <_printf_i+0x24>
 80087d6:	e0be      	b.n	8008956 <_printf_i+0x1a2>
 80087d8:	497c      	ldr	r1, [pc, #496]	; (80089cc <_printf_i+0x218>)
 80087da:	9103      	str	r1, [sp, #12]
 80087dc:	2a58      	cmp	r2, #88	; 0x58
 80087de:	d100      	bne.n	80087e2 <_printf_i+0x2e>
 80087e0:	e093      	b.n	800890a <_printf_i+0x156>
 80087e2:	0026      	movs	r6, r4
 80087e4:	3642      	adds	r6, #66	; 0x42
 80087e6:	7032      	strb	r2, [r6, #0]
 80087e8:	e022      	b.n	8008830 <_printf_i+0x7c>
 80087ea:	0010      	movs	r0, r2
 80087ec:	3863      	subs	r0, #99	; 0x63
 80087ee:	2815      	cmp	r0, #21
 80087f0:	d8f7      	bhi.n	80087e2 <_printf_i+0x2e>
 80087f2:	f7f7 fc9b 	bl	800012c <__gnu_thumb1_case_shi>
 80087f6:	0016      	.short	0x0016
 80087f8:	fff6001f 	.word	0xfff6001f
 80087fc:	fff6fff6 	.word	0xfff6fff6
 8008800:	001ffff6 	.word	0x001ffff6
 8008804:	fff6fff6 	.word	0xfff6fff6
 8008808:	fff6fff6 	.word	0xfff6fff6
 800880c:	003600a3 	.word	0x003600a3
 8008810:	fff60083 	.word	0xfff60083
 8008814:	00b4fff6 	.word	0x00b4fff6
 8008818:	0036fff6 	.word	0x0036fff6
 800881c:	fff6fff6 	.word	0xfff6fff6
 8008820:	0087      	.short	0x0087
 8008822:	0026      	movs	r6, r4
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	3642      	adds	r6, #66	; 0x42
 8008828:	1d11      	adds	r1, r2, #4
 800882a:	6019      	str	r1, [r3, #0]
 800882c:	6813      	ldr	r3, [r2, #0]
 800882e:	7033      	strb	r3, [r6, #0]
 8008830:	2301      	movs	r3, #1
 8008832:	e0a2      	b.n	800897a <_printf_i+0x1c6>
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	6809      	ldr	r1, [r1, #0]
 8008838:	1d02      	adds	r2, r0, #4
 800883a:	060d      	lsls	r5, r1, #24
 800883c:	d50b      	bpl.n	8008856 <_printf_i+0xa2>
 800883e:	6805      	ldr	r5, [r0, #0]
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	2d00      	cmp	r5, #0
 8008844:	da03      	bge.n	800884e <_printf_i+0x9a>
 8008846:	232d      	movs	r3, #45	; 0x2d
 8008848:	9a04      	ldr	r2, [sp, #16]
 800884a:	426d      	negs	r5, r5
 800884c:	7013      	strb	r3, [r2, #0]
 800884e:	4b5f      	ldr	r3, [pc, #380]	; (80089cc <_printf_i+0x218>)
 8008850:	270a      	movs	r7, #10
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	e01b      	b.n	800888e <_printf_i+0xda>
 8008856:	6805      	ldr	r5, [r0, #0]
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	0649      	lsls	r1, r1, #25
 800885c:	d5f1      	bpl.n	8008842 <_printf_i+0x8e>
 800885e:	b22d      	sxth	r5, r5
 8008860:	e7ef      	b.n	8008842 <_printf_i+0x8e>
 8008862:	680d      	ldr	r5, [r1, #0]
 8008864:	6819      	ldr	r1, [r3, #0]
 8008866:	1d08      	adds	r0, r1, #4
 8008868:	6018      	str	r0, [r3, #0]
 800886a:	062e      	lsls	r6, r5, #24
 800886c:	d501      	bpl.n	8008872 <_printf_i+0xbe>
 800886e:	680d      	ldr	r5, [r1, #0]
 8008870:	e003      	b.n	800887a <_printf_i+0xc6>
 8008872:	066d      	lsls	r5, r5, #25
 8008874:	d5fb      	bpl.n	800886e <_printf_i+0xba>
 8008876:	680d      	ldr	r5, [r1, #0]
 8008878:	b2ad      	uxth	r5, r5
 800887a:	4b54      	ldr	r3, [pc, #336]	; (80089cc <_printf_i+0x218>)
 800887c:	2708      	movs	r7, #8
 800887e:	9303      	str	r3, [sp, #12]
 8008880:	2a6f      	cmp	r2, #111	; 0x6f
 8008882:	d000      	beq.n	8008886 <_printf_i+0xd2>
 8008884:	3702      	adds	r7, #2
 8008886:	0023      	movs	r3, r4
 8008888:	2200      	movs	r2, #0
 800888a:	3343      	adds	r3, #67	; 0x43
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	6863      	ldr	r3, [r4, #4]
 8008890:	60a3      	str	r3, [r4, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	db03      	blt.n	800889e <_printf_i+0xea>
 8008896:	2104      	movs	r1, #4
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	438a      	bics	r2, r1
 800889c:	6022      	str	r2, [r4, #0]
 800889e:	2d00      	cmp	r5, #0
 80088a0:	d102      	bne.n	80088a8 <_printf_i+0xf4>
 80088a2:	9e04      	ldr	r6, [sp, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00c      	beq.n	80088c2 <_printf_i+0x10e>
 80088a8:	9e04      	ldr	r6, [sp, #16]
 80088aa:	0028      	movs	r0, r5
 80088ac:	0039      	movs	r1, r7
 80088ae:	f7f7 fccd 	bl	800024c <__aeabi_uidivmod>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	3e01      	subs	r6, #1
 80088b6:	5c5b      	ldrb	r3, [r3, r1]
 80088b8:	7033      	strb	r3, [r6, #0]
 80088ba:	002b      	movs	r3, r5
 80088bc:	0005      	movs	r5, r0
 80088be:	429f      	cmp	r7, r3
 80088c0:	d9f3      	bls.n	80088aa <_printf_i+0xf6>
 80088c2:	2f08      	cmp	r7, #8
 80088c4:	d109      	bne.n	80088da <_printf_i+0x126>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	07db      	lsls	r3, r3, #31
 80088ca:	d506      	bpl.n	80088da <_printf_i+0x126>
 80088cc:	6862      	ldr	r2, [r4, #4]
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	dc02      	bgt.n	80088da <_printf_i+0x126>
 80088d4:	2330      	movs	r3, #48	; 0x30
 80088d6:	3e01      	subs	r6, #1
 80088d8:	7033      	strb	r3, [r6, #0]
 80088da:	9b04      	ldr	r3, [sp, #16]
 80088dc:	1b9b      	subs	r3, r3, r6
 80088de:	6123      	str	r3, [r4, #16]
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	0021      	movs	r1, r4
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	9805      	ldr	r0, [sp, #20]
 80088e8:	9b06      	ldr	r3, [sp, #24]
 80088ea:	aa09      	add	r2, sp, #36	; 0x24
 80088ec:	f7ff fef2 	bl	80086d4 <_printf_common>
 80088f0:	3001      	adds	r0, #1
 80088f2:	d147      	bne.n	8008984 <_printf_i+0x1d0>
 80088f4:	2001      	movs	r0, #1
 80088f6:	4240      	negs	r0, r0
 80088f8:	b00b      	add	sp, #44	; 0x2c
 80088fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088fc:	2220      	movs	r2, #32
 80088fe:	6809      	ldr	r1, [r1, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	6022      	str	r2, [r4, #0]
 8008904:	2278      	movs	r2, #120	; 0x78
 8008906:	4932      	ldr	r1, [pc, #200]	; (80089d0 <_printf_i+0x21c>)
 8008908:	9103      	str	r1, [sp, #12]
 800890a:	0021      	movs	r1, r4
 800890c:	3145      	adds	r1, #69	; 0x45
 800890e:	700a      	strb	r2, [r1, #0]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	c920      	ldmia	r1!, {r5}
 8008916:	0610      	lsls	r0, r2, #24
 8008918:	d402      	bmi.n	8008920 <_printf_i+0x16c>
 800891a:	0650      	lsls	r0, r2, #25
 800891c:	d500      	bpl.n	8008920 <_printf_i+0x16c>
 800891e:	b2ad      	uxth	r5, r5
 8008920:	6019      	str	r1, [r3, #0]
 8008922:	07d3      	lsls	r3, r2, #31
 8008924:	d502      	bpl.n	800892c <_printf_i+0x178>
 8008926:	2320      	movs	r3, #32
 8008928:	4313      	orrs	r3, r2
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	2710      	movs	r7, #16
 800892e:	2d00      	cmp	r5, #0
 8008930:	d1a9      	bne.n	8008886 <_printf_i+0xd2>
 8008932:	2220      	movs	r2, #32
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	4393      	bics	r3, r2
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	e7a4      	b.n	8008886 <_printf_i+0xd2>
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	680d      	ldr	r5, [r1, #0]
 8008940:	1d10      	adds	r0, r2, #4
 8008942:	6949      	ldr	r1, [r1, #20]
 8008944:	6018      	str	r0, [r3, #0]
 8008946:	6813      	ldr	r3, [r2, #0]
 8008948:	062e      	lsls	r6, r5, #24
 800894a:	d501      	bpl.n	8008950 <_printf_i+0x19c>
 800894c:	6019      	str	r1, [r3, #0]
 800894e:	e002      	b.n	8008956 <_printf_i+0x1a2>
 8008950:	066d      	lsls	r5, r5, #25
 8008952:	d5fb      	bpl.n	800894c <_printf_i+0x198>
 8008954:	8019      	strh	r1, [r3, #0]
 8008956:	2300      	movs	r3, #0
 8008958:	9e04      	ldr	r6, [sp, #16]
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	e7c0      	b.n	80088e0 <_printf_i+0x12c>
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	1d11      	adds	r1, r2, #4
 8008962:	6019      	str	r1, [r3, #0]
 8008964:	6816      	ldr	r6, [r2, #0]
 8008966:	2100      	movs	r1, #0
 8008968:	0030      	movs	r0, r6
 800896a:	6862      	ldr	r2, [r4, #4]
 800896c:	f000 fca9 	bl	80092c2 <memchr>
 8008970:	2800      	cmp	r0, #0
 8008972:	d001      	beq.n	8008978 <_printf_i+0x1c4>
 8008974:	1b80      	subs	r0, r0, r6
 8008976:	6060      	str	r0, [r4, #4]
 8008978:	6863      	ldr	r3, [r4, #4]
 800897a:	6123      	str	r3, [r4, #16]
 800897c:	2300      	movs	r3, #0
 800897e:	9a04      	ldr	r2, [sp, #16]
 8008980:	7013      	strb	r3, [r2, #0]
 8008982:	e7ad      	b.n	80088e0 <_printf_i+0x12c>
 8008984:	0032      	movs	r2, r6
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	9906      	ldr	r1, [sp, #24]
 800898a:	9805      	ldr	r0, [sp, #20]
 800898c:	9d07      	ldr	r5, [sp, #28]
 800898e:	47a8      	blx	r5
 8008990:	3001      	adds	r0, #1
 8008992:	d0af      	beq.n	80088f4 <_printf_i+0x140>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	079b      	lsls	r3, r3, #30
 8008998:	d415      	bmi.n	80089c6 <_printf_i+0x212>
 800899a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899c:	68e0      	ldr	r0, [r4, #12]
 800899e:	4298      	cmp	r0, r3
 80089a0:	daaa      	bge.n	80088f8 <_printf_i+0x144>
 80089a2:	0018      	movs	r0, r3
 80089a4:	e7a8      	b.n	80088f8 <_printf_i+0x144>
 80089a6:	0022      	movs	r2, r4
 80089a8:	2301      	movs	r3, #1
 80089aa:	9906      	ldr	r1, [sp, #24]
 80089ac:	9805      	ldr	r0, [sp, #20]
 80089ae:	9e07      	ldr	r6, [sp, #28]
 80089b0:	3219      	adds	r2, #25
 80089b2:	47b0      	blx	r6
 80089b4:	3001      	adds	r0, #1
 80089b6:	d09d      	beq.n	80088f4 <_printf_i+0x140>
 80089b8:	3501      	adds	r5, #1
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dcf0      	bgt.n	80089a6 <_printf_i+0x1f2>
 80089c4:	e7e9      	b.n	800899a <_printf_i+0x1e6>
 80089c6:	2500      	movs	r5, #0
 80089c8:	e7f7      	b.n	80089ba <_printf_i+0x206>
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	0800bedb 	.word	0x0800bedb
 80089d0:	0800beec 	.word	0x0800beec

080089d4 <_scanf_float>:
 80089d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d6:	b08b      	sub	sp, #44	; 0x2c
 80089d8:	0016      	movs	r6, r2
 80089da:	9002      	str	r0, [sp, #8]
 80089dc:	22ae      	movs	r2, #174	; 0xae
 80089de:	2000      	movs	r0, #0
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	688b      	ldr	r3, [r1, #8]
 80089e4:	000f      	movs	r7, r1
 80089e6:	1e59      	subs	r1, r3, #1
 80089e8:	0052      	lsls	r2, r2, #1
 80089ea:	9006      	str	r0, [sp, #24]
 80089ec:	4291      	cmp	r1, r2
 80089ee:	d905      	bls.n	80089fc <_scanf_float+0x28>
 80089f0:	3b5e      	subs	r3, #94	; 0x5e
 80089f2:	3bff      	subs	r3, #255	; 0xff
 80089f4:	9306      	str	r3, [sp, #24]
 80089f6:	235e      	movs	r3, #94	; 0x5e
 80089f8:	33ff      	adds	r3, #255	; 0xff
 80089fa:	60bb      	str	r3, [r7, #8]
 80089fc:	23f0      	movs	r3, #240	; 0xf0
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	00db      	lsls	r3, r3, #3
 8008a02:	4313      	orrs	r3, r2
 8008a04:	603b      	str	r3, [r7, #0]
 8008a06:	003b      	movs	r3, r7
 8008a08:	2400      	movs	r4, #0
 8008a0a:	331c      	adds	r3, #28
 8008a0c:	001d      	movs	r5, r3
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	9403      	str	r4, [sp, #12]
 8008a12:	9409      	str	r4, [sp, #36]	; 0x24
 8008a14:	9408      	str	r4, [sp, #32]
 8008a16:	9401      	str	r4, [sp, #4]
 8008a18:	9405      	str	r4, [sp, #20]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	d00a      	beq.n	8008a36 <_scanf_float+0x62>
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b4e      	cmp	r3, #78	; 0x4e
 8008a26:	d844      	bhi.n	8008ab2 <_scanf_float+0xde>
 8008a28:	0018      	movs	r0, r3
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d82c      	bhi.n	8008a88 <_scanf_float+0xb4>
 8008a2e:	382b      	subs	r0, #43	; 0x2b
 8008a30:	b2c1      	uxtb	r1, r0
 8008a32:	290e      	cmp	r1, #14
 8008a34:	d92a      	bls.n	8008a8c <_scanf_float+0xb8>
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <_scanf_float+0x70>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	4aa3      	ldr	r2, [pc, #652]	; (8008ccc <_scanf_float+0x2f8>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d900      	bls.n	8008a4e <_scanf_float+0x7a>
 8008a4c:	e0f9      	b.n	8008c42 <_scanf_float+0x26e>
 8008a4e:	24be      	movs	r4, #190	; 0xbe
 8008a50:	0064      	lsls	r4, r4, #1
 8008a52:	9b04      	ldr	r3, [sp, #16]
 8008a54:	429d      	cmp	r5, r3
 8008a56:	d900      	bls.n	8008a5a <_scanf_float+0x86>
 8008a58:	e0e9      	b.n	8008c2e <_scanf_float+0x25a>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	e183      	b.n	8008d68 <_scanf_float+0x394>
 8008a60:	0018      	movs	r0, r3
 8008a62:	3861      	subs	r0, #97	; 0x61
 8008a64:	280d      	cmp	r0, #13
 8008a66:	d8e6      	bhi.n	8008a36 <_scanf_float+0x62>
 8008a68:	f7f7 fb60 	bl	800012c <__gnu_thumb1_case_shi>
 8008a6c:	ffe50083 	.word	0xffe50083
 8008a70:	ffe5ffe5 	.word	0xffe5ffe5
 8008a74:	00a200b6 	.word	0x00a200b6
 8008a78:	ffe5ffe5 	.word	0xffe5ffe5
 8008a7c:	ffe50089 	.word	0xffe50089
 8008a80:	ffe5ffe5 	.word	0xffe5ffe5
 8008a84:	0065ffe5 	.word	0x0065ffe5
 8008a88:	3841      	subs	r0, #65	; 0x41
 8008a8a:	e7eb      	b.n	8008a64 <_scanf_float+0x90>
 8008a8c:	280e      	cmp	r0, #14
 8008a8e:	d8d2      	bhi.n	8008a36 <_scanf_float+0x62>
 8008a90:	f7f7 fb4c 	bl	800012c <__gnu_thumb1_case_shi>
 8008a94:	ffd1004b 	.word	0xffd1004b
 8008a98:	0098004b 	.word	0x0098004b
 8008a9c:	0020ffd1 	.word	0x0020ffd1
 8008aa0:	00400040 	.word	0x00400040
 8008aa4:	00400040 	.word	0x00400040
 8008aa8:	00400040 	.word	0x00400040
 8008aac:	00400040 	.word	0x00400040
 8008ab0:	0040      	.short	0x0040
 8008ab2:	2b6e      	cmp	r3, #110	; 0x6e
 8008ab4:	d809      	bhi.n	8008aca <_scanf_float+0xf6>
 8008ab6:	2b60      	cmp	r3, #96	; 0x60
 8008ab8:	d8d2      	bhi.n	8008a60 <_scanf_float+0x8c>
 8008aba:	2b54      	cmp	r3, #84	; 0x54
 8008abc:	d07d      	beq.n	8008bba <_scanf_float+0x1e6>
 8008abe:	2b59      	cmp	r3, #89	; 0x59
 8008ac0:	d1b9      	bne.n	8008a36 <_scanf_float+0x62>
 8008ac2:	2c07      	cmp	r4, #7
 8008ac4:	d1b7      	bne.n	8008a36 <_scanf_float+0x62>
 8008ac6:	2408      	movs	r4, #8
 8008ac8:	e02c      	b.n	8008b24 <_scanf_float+0x150>
 8008aca:	2b74      	cmp	r3, #116	; 0x74
 8008acc:	d075      	beq.n	8008bba <_scanf_float+0x1e6>
 8008ace:	2b79      	cmp	r3, #121	; 0x79
 8008ad0:	d0f7      	beq.n	8008ac2 <_scanf_float+0xee>
 8008ad2:	e7b0      	b.n	8008a36 <_scanf_float+0x62>
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	05c8      	lsls	r0, r1, #23
 8008ad8:	d51c      	bpl.n	8008b14 <_scanf_float+0x140>
 8008ada:	2380      	movs	r3, #128	; 0x80
 8008adc:	4399      	bics	r1, r3
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	9b06      	ldr	r3, [sp, #24]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <_scanf_float+0x120>
 8008aec:	3b01      	subs	r3, #1
 8008aee:	3201      	adds	r2, #1
 8008af0:	9306      	str	r3, [sp, #24]
 8008af2:	60ba      	str	r2, [r7, #8]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	60bb      	str	r3, [r7, #8]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	3301      	adds	r3, #1
 8008afe:	613b      	str	r3, [r7, #16]
 8008b00:	6873      	ldr	r3, [r6, #4]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	6073      	str	r3, [r6, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dc00      	bgt.n	8008b0c <_scanf_float+0x138>
 8008b0a:	e086      	b.n	8008c1a <_scanf_float+0x246>
 8008b0c:	6833      	ldr	r3, [r6, #0]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	6033      	str	r3, [r6, #0]
 8008b12:	e782      	b.n	8008a1a <_scanf_float+0x46>
 8008b14:	9a03      	ldr	r2, [sp, #12]
 8008b16:	1912      	adds	r2, r2, r4
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	d18c      	bne.n	8008a36 <_scanf_float+0x62>
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	496c      	ldr	r1, [pc, #432]	; (8008cd0 <_scanf_float+0x2fc>)
 8008b20:	400a      	ands	r2, r1
 8008b22:	603a      	str	r2, [r7, #0]
 8008b24:	702b      	strb	r3, [r5, #0]
 8008b26:	3501      	adds	r5, #1
 8008b28:	e7e4      	b.n	8008af4 <_scanf_float+0x120>
 8008b2a:	2180      	movs	r1, #128	; 0x80
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	420a      	tst	r2, r1
 8008b30:	d081      	beq.n	8008a36 <_scanf_float+0x62>
 8008b32:	438a      	bics	r2, r1
 8008b34:	e7f5      	b.n	8008b22 <_scanf_float+0x14e>
 8008b36:	9a03      	ldr	r2, [sp, #12]
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d10f      	bne.n	8008b5c <_scanf_float+0x188>
 8008b3c:	9a01      	ldr	r2, [sp, #4]
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d10f      	bne.n	8008b62 <_scanf_float+0x18e>
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	21e0      	movs	r1, #224	; 0xe0
 8008b46:	0010      	movs	r0, r2
 8008b48:	00c9      	lsls	r1, r1, #3
 8008b4a:	4008      	ands	r0, r1
 8008b4c:	4288      	cmp	r0, r1
 8008b4e:	d108      	bne.n	8008b62 <_scanf_float+0x18e>
 8008b50:	4960      	ldr	r1, [pc, #384]	; (8008cd4 <_scanf_float+0x300>)
 8008b52:	400a      	ands	r2, r1
 8008b54:	603a      	str	r2, [r7, #0]
 8008b56:	2201      	movs	r2, #1
 8008b58:	9203      	str	r2, [sp, #12]
 8008b5a:	e7e3      	b.n	8008b24 <_scanf_float+0x150>
 8008b5c:	9a03      	ldr	r2, [sp, #12]
 8008b5e:	2a02      	cmp	r2, #2
 8008b60:	d059      	beq.n	8008c16 <_scanf_float+0x242>
 8008b62:	2c01      	cmp	r4, #1
 8008b64:	d002      	beq.n	8008b6c <_scanf_float+0x198>
 8008b66:	2c04      	cmp	r4, #4
 8008b68:	d000      	beq.n	8008b6c <_scanf_float+0x198>
 8008b6a:	e764      	b.n	8008a36 <_scanf_float+0x62>
 8008b6c:	3401      	adds	r4, #1
 8008b6e:	b2e4      	uxtb	r4, r4
 8008b70:	e7d8      	b.n	8008b24 <_scanf_float+0x150>
 8008b72:	9a03      	ldr	r2, [sp, #12]
 8008b74:	2a01      	cmp	r2, #1
 8008b76:	d000      	beq.n	8008b7a <_scanf_float+0x1a6>
 8008b78:	e75d      	b.n	8008a36 <_scanf_float+0x62>
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	e7ec      	b.n	8008b58 <_scanf_float+0x184>
 8008b7e:	2c00      	cmp	r4, #0
 8008b80:	d110      	bne.n	8008ba4 <_scanf_float+0x1d0>
 8008b82:	9a01      	ldr	r2, [sp, #4]
 8008b84:	2a00      	cmp	r2, #0
 8008b86:	d000      	beq.n	8008b8a <_scanf_float+0x1b6>
 8008b88:	e758      	b.n	8008a3c <_scanf_float+0x68>
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	21e0      	movs	r1, #224	; 0xe0
 8008b8e:	0010      	movs	r0, r2
 8008b90:	00c9      	lsls	r1, r1, #3
 8008b92:	4008      	ands	r0, r1
 8008b94:	4288      	cmp	r0, r1
 8008b96:	d000      	beq.n	8008b9a <_scanf_float+0x1c6>
 8008b98:	e754      	b.n	8008a44 <_scanf_float+0x70>
 8008b9a:	494e      	ldr	r1, [pc, #312]	; (8008cd4 <_scanf_float+0x300>)
 8008b9c:	3401      	adds	r4, #1
 8008b9e:	400a      	ands	r2, r1
 8008ba0:	603a      	str	r2, [r7, #0]
 8008ba2:	e7bf      	b.n	8008b24 <_scanf_float+0x150>
 8008ba4:	21fd      	movs	r1, #253	; 0xfd
 8008ba6:	1ee2      	subs	r2, r4, #3
 8008ba8:	420a      	tst	r2, r1
 8008baa:	d000      	beq.n	8008bae <_scanf_float+0x1da>
 8008bac:	e743      	b.n	8008a36 <_scanf_float+0x62>
 8008bae:	e7dd      	b.n	8008b6c <_scanf_float+0x198>
 8008bb0:	2c02      	cmp	r4, #2
 8008bb2:	d000      	beq.n	8008bb6 <_scanf_float+0x1e2>
 8008bb4:	e73f      	b.n	8008a36 <_scanf_float+0x62>
 8008bb6:	2403      	movs	r4, #3
 8008bb8:	e7b4      	b.n	8008b24 <_scanf_float+0x150>
 8008bba:	2c06      	cmp	r4, #6
 8008bbc:	d000      	beq.n	8008bc0 <_scanf_float+0x1ec>
 8008bbe:	e73a      	b.n	8008a36 <_scanf_float+0x62>
 8008bc0:	2407      	movs	r4, #7
 8008bc2:	e7af      	b.n	8008b24 <_scanf_float+0x150>
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	0591      	lsls	r1, r2, #22
 8008bc8:	d400      	bmi.n	8008bcc <_scanf_float+0x1f8>
 8008bca:	e734      	b.n	8008a36 <_scanf_float+0x62>
 8008bcc:	4942      	ldr	r1, [pc, #264]	; (8008cd8 <_scanf_float+0x304>)
 8008bce:	400a      	ands	r2, r1
 8008bd0:	603a      	str	r2, [r7, #0]
 8008bd2:	9a01      	ldr	r2, [sp, #4]
 8008bd4:	9205      	str	r2, [sp, #20]
 8008bd6:	e7a5      	b.n	8008b24 <_scanf_float+0x150>
 8008bd8:	21a0      	movs	r1, #160	; 0xa0
 8008bda:	2080      	movs	r0, #128	; 0x80
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	00c9      	lsls	r1, r1, #3
 8008be0:	4011      	ands	r1, r2
 8008be2:	00c0      	lsls	r0, r0, #3
 8008be4:	4281      	cmp	r1, r0
 8008be6:	d006      	beq.n	8008bf6 <_scanf_float+0x222>
 8008be8:	4202      	tst	r2, r0
 8008bea:	d100      	bne.n	8008bee <_scanf_float+0x21a>
 8008bec:	e723      	b.n	8008a36 <_scanf_float+0x62>
 8008bee:	9901      	ldr	r1, [sp, #4]
 8008bf0:	2900      	cmp	r1, #0
 8008bf2:	d100      	bne.n	8008bf6 <_scanf_float+0x222>
 8008bf4:	e726      	b.n	8008a44 <_scanf_float+0x70>
 8008bf6:	0591      	lsls	r1, r2, #22
 8008bf8:	d404      	bmi.n	8008c04 <_scanf_float+0x230>
 8008bfa:	9901      	ldr	r1, [sp, #4]
 8008bfc:	9805      	ldr	r0, [sp, #20]
 8008bfe:	9509      	str	r5, [sp, #36]	; 0x24
 8008c00:	1a09      	subs	r1, r1, r0
 8008c02:	9108      	str	r1, [sp, #32]
 8008c04:	4933      	ldr	r1, [pc, #204]	; (8008cd4 <_scanf_float+0x300>)
 8008c06:	400a      	ands	r2, r1
 8008c08:	21c0      	movs	r1, #192	; 0xc0
 8008c0a:	0049      	lsls	r1, r1, #1
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	603a      	str	r2, [r7, #0]
 8008c10:	2200      	movs	r2, #0
 8008c12:	9201      	str	r2, [sp, #4]
 8008c14:	e786      	b.n	8008b24 <_scanf_float+0x150>
 8008c16:	2203      	movs	r2, #3
 8008c18:	e79e      	b.n	8008b58 <_scanf_float+0x184>
 8008c1a:	23c0      	movs	r3, #192	; 0xc0
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	0031      	movs	r1, r6
 8008c20:	58fb      	ldr	r3, [r7, r3]
 8008c22:	9802      	ldr	r0, [sp, #8]
 8008c24:	4798      	blx	r3
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d100      	bne.n	8008c2c <_scanf_float+0x258>
 8008c2a:	e6f6      	b.n	8008a1a <_scanf_float+0x46>
 8008c2c:	e703      	b.n	8008a36 <_scanf_float+0x62>
 8008c2e:	3d01      	subs	r5, #1
 8008c30:	593b      	ldr	r3, [r7, r4]
 8008c32:	0032      	movs	r2, r6
 8008c34:	7829      	ldrb	r1, [r5, #0]
 8008c36:	9802      	ldr	r0, [sp, #8]
 8008c38:	4798      	blx	r3
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	e707      	b.n	8008a52 <_scanf_float+0x7e>
 8008c42:	1e63      	subs	r3, r4, #1
 8008c44:	2b06      	cmp	r3, #6
 8008c46:	d80e      	bhi.n	8008c66 <_scanf_float+0x292>
 8008c48:	9503      	str	r5, [sp, #12]
 8008c4a:	2c02      	cmp	r4, #2
 8008c4c:	d920      	bls.n	8008c90 <_scanf_float+0x2bc>
 8008c4e:	1b63      	subs	r3, r4, r5
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	9a06      	ldr	r2, [sp, #24]
 8008c58:	189b      	adds	r3, r3, r2
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d827      	bhi.n	8008cb0 <_scanf_float+0x2dc>
 8008c60:	3c03      	subs	r4, #3
 8008c62:	b2e4      	uxtb	r4, r4
 8008c64:	1b2d      	subs	r5, r5, r4
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	05da      	lsls	r2, r3, #23
 8008c6a:	d552      	bpl.n	8008d12 <_scanf_float+0x33e>
 8008c6c:	055b      	lsls	r3, r3, #21
 8008c6e:	d535      	bpl.n	8008cdc <_scanf_float+0x308>
 8008c70:	24be      	movs	r4, #190	; 0xbe
 8008c72:	0064      	lsls	r4, r4, #1
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	429d      	cmp	r5, r3
 8008c78:	d800      	bhi.n	8008c7c <_scanf_float+0x2a8>
 8008c7a:	e6ee      	b.n	8008a5a <_scanf_float+0x86>
 8008c7c:	3d01      	subs	r5, #1
 8008c7e:	593b      	ldr	r3, [r7, r4]
 8008c80:	0032      	movs	r2, r6
 8008c82:	7829      	ldrb	r1, [r5, #0]
 8008c84:	9802      	ldr	r0, [sp, #8]
 8008c86:	4798      	blx	r3
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	613b      	str	r3, [r7, #16]
 8008c8e:	e7f1      	b.n	8008c74 <_scanf_float+0x2a0>
 8008c90:	24be      	movs	r4, #190	; 0xbe
 8008c92:	0064      	lsls	r4, r4, #1
 8008c94:	9b04      	ldr	r3, [sp, #16]
 8008c96:	429d      	cmp	r5, r3
 8008c98:	d800      	bhi.n	8008c9c <_scanf_float+0x2c8>
 8008c9a:	e6de      	b.n	8008a5a <_scanf_float+0x86>
 8008c9c:	3d01      	subs	r5, #1
 8008c9e:	593b      	ldr	r3, [r7, r4]
 8008ca0:	0032      	movs	r2, r6
 8008ca2:	7829      	ldrb	r1, [r5, #0]
 8008ca4:	9802      	ldr	r0, [sp, #8]
 8008ca6:	4798      	blx	r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	e7f1      	b.n	8008c94 <_scanf_float+0x2c0>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	0032      	movs	r2, r6
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	7819      	ldrb	r1, [r3, #0]
 8008cb8:	9303      	str	r3, [sp, #12]
 8008cba:	23be      	movs	r3, #190	; 0xbe
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	58fb      	ldr	r3, [r7, r3]
 8008cc0:	9802      	ldr	r0, [sp, #8]
 8008cc2:	4798      	blx	r3
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	613b      	str	r3, [r7, #16]
 8008cca:	e7c3      	b.n	8008c54 <_scanf_float+0x280>
 8008ccc:	fffffeff 	.word	0xfffffeff
 8008cd0:	fffffe7f 	.word	0xfffffe7f
 8008cd4:	fffff87f 	.word	0xfffff87f
 8008cd8:	fffffd7f 	.word	0xfffffd7f
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	1e6c      	subs	r4, r5, #1
 8008ce0:	7821      	ldrb	r1, [r4, #0]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	613b      	str	r3, [r7, #16]
 8008ce6:	2965      	cmp	r1, #101	; 0x65
 8008ce8:	d00c      	beq.n	8008d04 <_scanf_float+0x330>
 8008cea:	2945      	cmp	r1, #69	; 0x45
 8008cec:	d00a      	beq.n	8008d04 <_scanf_float+0x330>
 8008cee:	23be      	movs	r3, #190	; 0xbe
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	58fb      	ldr	r3, [r7, r3]
 8008cf4:	0032      	movs	r2, r6
 8008cf6:	9802      	ldr	r0, [sp, #8]
 8008cf8:	4798      	blx	r3
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	1eac      	subs	r4, r5, #2
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	7821      	ldrb	r1, [r4, #0]
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	23be      	movs	r3, #190	; 0xbe
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	0032      	movs	r2, r6
 8008d0a:	58fb      	ldr	r3, [r7, r3]
 8008d0c:	9802      	ldr	r0, [sp, #8]
 8008d0e:	4798      	blx	r3
 8008d10:	0025      	movs	r5, r4
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	2310      	movs	r3, #16
 8008d16:	0011      	movs	r1, r2
 8008d18:	4019      	ands	r1, r3
 8008d1a:	9103      	str	r1, [sp, #12]
 8008d1c:	421a      	tst	r2, r3
 8008d1e:	d15b      	bne.n	8008dd8 <_scanf_float+0x404>
 8008d20:	22c0      	movs	r2, #192	; 0xc0
 8008d22:	7029      	strb	r1, [r5, #0]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	00d2      	lsls	r2, r2, #3
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2280      	movs	r2, #128	; 0x80
 8008d2c:	00d2      	lsls	r2, r2, #3
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d11d      	bne.n	8008d6e <_scanf_float+0x39a>
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	9a01      	ldr	r2, [sp, #4]
 8008d36:	9901      	ldr	r1, [sp, #4]
 8008d38:	1a9a      	subs	r2, r3, r2
 8008d3a:	428b      	cmp	r3, r1
 8008d3c:	d124      	bne.n	8008d88 <_scanf_float+0x3b4>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	9904      	ldr	r1, [sp, #16]
 8008d42:	9802      	ldr	r0, [sp, #8]
 8008d44:	f7ff f936 	bl	8007fb4 <_strtod_r>
 8008d48:	9b07      	ldr	r3, [sp, #28]
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	0004      	movs	r4, r0
 8008d4e:	000d      	movs	r5, r1
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	0791      	lsls	r1, r2, #30
 8008d54:	d525      	bpl.n	8008da2 <_scanf_float+0x3ce>
 8008d56:	9907      	ldr	r1, [sp, #28]
 8008d58:	1d1a      	adds	r2, r3, #4
 8008d5a:	600a      	str	r2, [r1, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	601c      	str	r4, [r3, #0]
 8008d60:	605d      	str	r5, [r3, #4]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	9803      	ldr	r0, [sp, #12]
 8008d6a:	b00b      	add	sp, #44	; 0x2c
 8008d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6e:	9b08      	ldr	r3, [sp, #32]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0e4      	beq.n	8008d3e <_scanf_float+0x36a>
 8008d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d76:	9a03      	ldr	r2, [sp, #12]
 8008d78:	1c59      	adds	r1, r3, #1
 8008d7a:	9802      	ldr	r0, [sp, #8]
 8008d7c:	230a      	movs	r3, #10
 8008d7e:	f7ff f9a7 	bl	80080d0 <_strtol_r>
 8008d82:	9b08      	ldr	r3, [sp, #32]
 8008d84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d86:	1ac2      	subs	r2, r0, r3
 8008d88:	003b      	movs	r3, r7
 8008d8a:	3370      	adds	r3, #112	; 0x70
 8008d8c:	33ff      	adds	r3, #255	; 0xff
 8008d8e:	429d      	cmp	r5, r3
 8008d90:	d302      	bcc.n	8008d98 <_scanf_float+0x3c4>
 8008d92:	003d      	movs	r5, r7
 8008d94:	356f      	adds	r5, #111	; 0x6f
 8008d96:	35ff      	adds	r5, #255	; 0xff
 8008d98:	0028      	movs	r0, r5
 8008d9a:	4910      	ldr	r1, [pc, #64]	; (8008ddc <_scanf_float+0x408>)
 8008d9c:	f000 f8e6 	bl	8008f6c <siprintf>
 8008da0:	e7cd      	b.n	8008d3e <_scanf_float+0x36a>
 8008da2:	1d19      	adds	r1, r3, #4
 8008da4:	0752      	lsls	r2, r2, #29
 8008da6:	d502      	bpl.n	8008dae <_scanf_float+0x3da>
 8008da8:	9a07      	ldr	r2, [sp, #28]
 8008daa:	6011      	str	r1, [r2, #0]
 8008dac:	e7d6      	b.n	8008d5c <_scanf_float+0x388>
 8008dae:	9a07      	ldr	r2, [sp, #28]
 8008db0:	0020      	movs	r0, r4
 8008db2:	6011      	str	r1, [r2, #0]
 8008db4:	681e      	ldr	r6, [r3, #0]
 8008db6:	0022      	movs	r2, r4
 8008db8:	002b      	movs	r3, r5
 8008dba:	0029      	movs	r1, r5
 8008dbc:	f7f9 fa9c 	bl	80022f8 <__aeabi_dcmpun>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d004      	beq.n	8008dce <_scanf_float+0x3fa>
 8008dc4:	4806      	ldr	r0, [pc, #24]	; (8008de0 <_scanf_float+0x40c>)
 8008dc6:	f000 fa97 	bl	80092f8 <nanf>
 8008dca:	6030      	str	r0, [r6, #0]
 8008dcc:	e7c9      	b.n	8008d62 <_scanf_float+0x38e>
 8008dce:	0020      	movs	r0, r4
 8008dd0:	0029      	movs	r1, r5
 8008dd2:	f7f9 fb3b 	bl	800244c <__aeabi_d2f>
 8008dd6:	e7f8      	b.n	8008dca <_scanf_float+0x3f6>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e63f      	b.n	8008a5c <_scanf_float+0x88>
 8008ddc:	0800befd 	.word	0x0800befd
 8008de0:	0800c198 	.word	0x0800c198

08008de4 <std>:
 8008de4:	2300      	movs	r3, #0
 8008de6:	b510      	push	{r4, lr}
 8008de8:	0004      	movs	r4, r0
 8008dea:	6003      	str	r3, [r0, #0]
 8008dec:	6043      	str	r3, [r0, #4]
 8008dee:	6083      	str	r3, [r0, #8]
 8008df0:	8181      	strh	r1, [r0, #12]
 8008df2:	6643      	str	r3, [r0, #100]	; 0x64
 8008df4:	81c2      	strh	r2, [r0, #14]
 8008df6:	6103      	str	r3, [r0, #16]
 8008df8:	6143      	str	r3, [r0, #20]
 8008dfa:	6183      	str	r3, [r0, #24]
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	2208      	movs	r2, #8
 8008e00:	305c      	adds	r0, #92	; 0x5c
 8008e02:	f000 f9c5 	bl	8009190 <memset>
 8008e06:	4b0b      	ldr	r3, [pc, #44]	; (8008e34 <std+0x50>)
 8008e08:	6224      	str	r4, [r4, #32]
 8008e0a:	6263      	str	r3, [r4, #36]	; 0x24
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <std+0x54>)
 8008e0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <std+0x58>)
 8008e12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e14:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <std+0x5c>)
 8008e16:	6323      	str	r3, [r4, #48]	; 0x30
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <std+0x60>)
 8008e1a:	429c      	cmp	r4, r3
 8008e1c:	d005      	beq.n	8008e2a <std+0x46>
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <std+0x64>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	d002      	beq.n	8008e2a <std+0x46>
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <std+0x68>)
 8008e26:	429c      	cmp	r4, r3
 8008e28:	d103      	bne.n	8008e32 <std+0x4e>
 8008e2a:	0020      	movs	r0, r4
 8008e2c:	3058      	adds	r0, #88	; 0x58
 8008e2e:	f000 fa45 	bl	80092bc <__retarget_lock_init_recursive>
 8008e32:	bd10      	pop	{r4, pc}
 8008e34:	08008fad 	.word	0x08008fad
 8008e38:	08008fd5 	.word	0x08008fd5
 8008e3c:	0800900d 	.word	0x0800900d
 8008e40:	08009039 	.word	0x08009039
 8008e44:	20000760 	.word	0x20000760
 8008e48:	200007c8 	.word	0x200007c8
 8008e4c:	20000830 	.word	0x20000830

08008e50 <stdio_exit_handler>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <stdio_exit_handler+0x10>)
 8008e54:	4903      	ldr	r1, [pc, #12]	; (8008e64 <stdio_exit_handler+0x14>)
 8008e56:	4804      	ldr	r0, [pc, #16]	; (8008e68 <stdio_exit_handler+0x18>)
 8008e58:	f000 f86c 	bl	8008f34 <_fwalk_sglue>
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	2000000c 	.word	0x2000000c
 8008e64:	0800b919 	.word	0x0800b919
 8008e68:	20000184 	.word	0x20000184

08008e6c <cleanup_stdio>:
 8008e6c:	6841      	ldr	r1, [r0, #4]
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <cleanup_stdio+0x30>)
 8008e70:	b510      	push	{r4, lr}
 8008e72:	0004      	movs	r4, r0
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d001      	beq.n	8008e7c <cleanup_stdio+0x10>
 8008e78:	f002 fd4e 	bl	800b918 <_fflush_r>
 8008e7c:	68a1      	ldr	r1, [r4, #8]
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <cleanup_stdio+0x34>)
 8008e80:	4299      	cmp	r1, r3
 8008e82:	d002      	beq.n	8008e8a <cleanup_stdio+0x1e>
 8008e84:	0020      	movs	r0, r4
 8008e86:	f002 fd47 	bl	800b918 <_fflush_r>
 8008e8a:	68e1      	ldr	r1, [r4, #12]
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <cleanup_stdio+0x38>)
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	d002      	beq.n	8008e98 <cleanup_stdio+0x2c>
 8008e92:	0020      	movs	r0, r4
 8008e94:	f002 fd40 	bl	800b918 <_fflush_r>
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	46c0      	nop			; (mov r8, r8)
 8008e9c:	20000760 	.word	0x20000760
 8008ea0:	200007c8 	.word	0x200007c8
 8008ea4:	20000830 	.word	0x20000830

08008ea8 <global_stdio_init.part.0>:
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <global_stdio_init.part.0+0x28>)
 8008eac:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <global_stdio_init.part.0+0x2c>)
 8008eae:	2104      	movs	r1, #4
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	4809      	ldr	r0, [pc, #36]	; (8008ed8 <global_stdio_init.part.0+0x30>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f7ff ff95 	bl	8008de4 <std>
 8008eba:	2201      	movs	r2, #1
 8008ebc:	2109      	movs	r1, #9
 8008ebe:	4807      	ldr	r0, [pc, #28]	; (8008edc <global_stdio_init.part.0+0x34>)
 8008ec0:	f7ff ff90 	bl	8008de4 <std>
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	2112      	movs	r1, #18
 8008ec8:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <global_stdio_init.part.0+0x38>)
 8008eca:	f7ff ff8b 	bl	8008de4 <std>
 8008ece:	bd10      	pop	{r4, pc}
 8008ed0:	20000898 	.word	0x20000898
 8008ed4:	08008e51 	.word	0x08008e51
 8008ed8:	20000760 	.word	0x20000760
 8008edc:	200007c8 	.word	0x200007c8
 8008ee0:	20000830 	.word	0x20000830

08008ee4 <__sfp_lock_acquire>:
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	4802      	ldr	r0, [pc, #8]	; (8008ef0 <__sfp_lock_acquire+0xc>)
 8008ee8:	f000 f9e9 	bl	80092be <__retarget_lock_acquire_recursive>
 8008eec:	bd10      	pop	{r4, pc}
 8008eee:	46c0      	nop			; (mov r8, r8)
 8008ef0:	200008a1 	.word	0x200008a1

08008ef4 <__sfp_lock_release>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4802      	ldr	r0, [pc, #8]	; (8008f00 <__sfp_lock_release+0xc>)
 8008ef8:	f000 f9e2 	bl	80092c0 <__retarget_lock_release_recursive>
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	200008a1 	.word	0x200008a1

08008f04 <__sinit>:
 8008f04:	b510      	push	{r4, lr}
 8008f06:	0004      	movs	r4, r0
 8008f08:	f7ff ffec 	bl	8008ee4 <__sfp_lock_acquire>
 8008f0c:	6a23      	ldr	r3, [r4, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <__sinit+0x14>
 8008f12:	f7ff ffef 	bl	8008ef4 <__sfp_lock_release>
 8008f16:	bd10      	pop	{r4, pc}
 8008f18:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <__sinit+0x28>)
 8008f1a:	6223      	str	r3, [r4, #32]
 8008f1c:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <__sinit+0x2c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f6      	bne.n	8008f12 <__sinit+0xe>
 8008f24:	f7ff ffc0 	bl	8008ea8 <global_stdio_init.part.0>
 8008f28:	e7f3      	b.n	8008f12 <__sinit+0xe>
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	08008e6d 	.word	0x08008e6d
 8008f30:	20000898 	.word	0x20000898

08008f34 <_fwalk_sglue>:
 8008f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f36:	0014      	movs	r4, r2
 8008f38:	2600      	movs	r6, #0
 8008f3a:	9000      	str	r0, [sp, #0]
 8008f3c:	9101      	str	r1, [sp, #4]
 8008f3e:	68a5      	ldr	r5, [r4, #8]
 8008f40:	6867      	ldr	r7, [r4, #4]
 8008f42:	3f01      	subs	r7, #1
 8008f44:	d504      	bpl.n	8008f50 <_fwalk_sglue+0x1c>
 8008f46:	6824      	ldr	r4, [r4, #0]
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d1f8      	bne.n	8008f3e <_fwalk_sglue+0xa>
 8008f4c:	0030      	movs	r0, r6
 8008f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f50:	89ab      	ldrh	r3, [r5, #12]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d908      	bls.n	8008f68 <_fwalk_sglue+0x34>
 8008f56:	220e      	movs	r2, #14
 8008f58:	5eab      	ldrsh	r3, [r5, r2]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	d004      	beq.n	8008f68 <_fwalk_sglue+0x34>
 8008f5e:	0029      	movs	r1, r5
 8008f60:	9800      	ldr	r0, [sp, #0]
 8008f62:	9b01      	ldr	r3, [sp, #4]
 8008f64:	4798      	blx	r3
 8008f66:	4306      	orrs	r6, r0
 8008f68:	3568      	adds	r5, #104	; 0x68
 8008f6a:	e7ea      	b.n	8008f42 <_fwalk_sglue+0xe>

08008f6c <siprintf>:
 8008f6c:	b40e      	push	{r1, r2, r3}
 8008f6e:	b500      	push	{lr}
 8008f70:	490b      	ldr	r1, [pc, #44]	; (8008fa0 <siprintf+0x34>)
 8008f72:	b09c      	sub	sp, #112	; 0x70
 8008f74:	ab1d      	add	r3, sp, #116	; 0x74
 8008f76:	9002      	str	r0, [sp, #8]
 8008f78:	9006      	str	r0, [sp, #24]
 8008f7a:	9107      	str	r1, [sp, #28]
 8008f7c:	9104      	str	r1, [sp, #16]
 8008f7e:	4809      	ldr	r0, [pc, #36]	; (8008fa4 <siprintf+0x38>)
 8008f80:	4909      	ldr	r1, [pc, #36]	; (8008fa8 <siprintf+0x3c>)
 8008f82:	cb04      	ldmia	r3!, {r2}
 8008f84:	9105      	str	r1, [sp, #20]
 8008f86:	6800      	ldr	r0, [r0, #0]
 8008f88:	a902      	add	r1, sp, #8
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	f002 f9f6 	bl	800b37c <_svfiprintf_r>
 8008f90:	2200      	movs	r2, #0
 8008f92:	9b02      	ldr	r3, [sp, #8]
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	b01c      	add	sp, #112	; 0x70
 8008f98:	bc08      	pop	{r3}
 8008f9a:	b003      	add	sp, #12
 8008f9c:	4718      	bx	r3
 8008f9e:	46c0      	nop			; (mov r8, r8)
 8008fa0:	7fffffff 	.word	0x7fffffff
 8008fa4:	200001d0 	.word	0x200001d0
 8008fa8:	ffff0208 	.word	0xffff0208

08008fac <__sread>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	000c      	movs	r4, r1
 8008fb0:	250e      	movs	r5, #14
 8008fb2:	5f49      	ldrsh	r1, [r1, r5]
 8008fb4:	f000 f930 	bl	8009218 <_read_r>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	db03      	blt.n	8008fc4 <__sread+0x18>
 8008fbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008fbe:	181b      	adds	r3, r3, r0
 8008fc0:	6563      	str	r3, [r4, #84]	; 0x54
 8008fc2:	bd70      	pop	{r4, r5, r6, pc}
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	4a02      	ldr	r2, [pc, #8]	; (8008fd0 <__sread+0x24>)
 8008fc8:	4013      	ands	r3, r2
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	e7f9      	b.n	8008fc2 <__sread+0x16>
 8008fce:	46c0      	nop			; (mov r8, r8)
 8008fd0:	ffffefff 	.word	0xffffefff

08008fd4 <__swrite>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	001f      	movs	r7, r3
 8008fd8:	898b      	ldrh	r3, [r1, #12]
 8008fda:	0005      	movs	r5, r0
 8008fdc:	000c      	movs	r4, r1
 8008fde:	0016      	movs	r6, r2
 8008fe0:	05db      	lsls	r3, r3, #23
 8008fe2:	d505      	bpl.n	8008ff0 <__swrite+0x1c>
 8008fe4:	230e      	movs	r3, #14
 8008fe6:	5ec9      	ldrsh	r1, [r1, r3]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2302      	movs	r3, #2
 8008fec:	f000 f900 	bl	80091f0 <_lseek_r>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	4a05      	ldr	r2, [pc, #20]	; (8009008 <__swrite+0x34>)
 8008ff4:	0028      	movs	r0, r5
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	0032      	movs	r2, r6
 8008ffc:	230e      	movs	r3, #14
 8008ffe:	5ee1      	ldrsh	r1, [r4, r3]
 8009000:	003b      	movs	r3, r7
 8009002:	f000 f91d 	bl	8009240 <_write_r>
 8009006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009008:	ffffefff 	.word	0xffffefff

0800900c <__sseek>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	000c      	movs	r4, r1
 8009010:	250e      	movs	r5, #14
 8009012:	5f49      	ldrsh	r1, [r1, r5]
 8009014:	f000 f8ec 	bl	80091f0 <_lseek_r>
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	1c42      	adds	r2, r0, #1
 800901c:	d103      	bne.n	8009026 <__sseek+0x1a>
 800901e:	4a05      	ldr	r2, [pc, #20]	; (8009034 <__sseek+0x28>)
 8009020:	4013      	ands	r3, r2
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	bd70      	pop	{r4, r5, r6, pc}
 8009026:	2280      	movs	r2, #128	; 0x80
 8009028:	0152      	lsls	r2, r2, #5
 800902a:	4313      	orrs	r3, r2
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	6560      	str	r0, [r4, #84]	; 0x54
 8009030:	e7f8      	b.n	8009024 <__sseek+0x18>
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	ffffefff 	.word	0xffffefff

08009038 <__sclose>:
 8009038:	b510      	push	{r4, lr}
 800903a:	230e      	movs	r3, #14
 800903c:	5ec9      	ldrsh	r1, [r1, r3]
 800903e:	f000 f8c5 	bl	80091cc <_close_r>
 8009042:	bd10      	pop	{r4, pc}

08009044 <__swbuf_r>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	0006      	movs	r6, r0
 8009048:	000d      	movs	r5, r1
 800904a:	0014      	movs	r4, r2
 800904c:	2800      	cmp	r0, #0
 800904e:	d004      	beq.n	800905a <__swbuf_r+0x16>
 8009050:	6a03      	ldr	r3, [r0, #32]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <__swbuf_r+0x16>
 8009056:	f7ff ff55 	bl	8008f04 <__sinit>
 800905a:	69a3      	ldr	r3, [r4, #24]
 800905c:	60a3      	str	r3, [r4, #8]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	071b      	lsls	r3, r3, #28
 8009062:	d528      	bpl.n	80090b6 <__swbuf_r+0x72>
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d025      	beq.n	80090b6 <__swbuf_r+0x72>
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	b2ef      	uxtb	r7, r5
 8009070:	1ac0      	subs	r0, r0, r3
 8009072:	6963      	ldr	r3, [r4, #20]
 8009074:	b2ed      	uxtb	r5, r5
 8009076:	4283      	cmp	r3, r0
 8009078:	dc05      	bgt.n	8009086 <__swbuf_r+0x42>
 800907a:	0021      	movs	r1, r4
 800907c:	0030      	movs	r0, r6
 800907e:	f002 fc4b 	bl	800b918 <_fflush_r>
 8009082:	2800      	cmp	r0, #0
 8009084:	d11d      	bne.n	80090c2 <__swbuf_r+0x7e>
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	3001      	adds	r0, #1
 800908a:	3b01      	subs	r3, #1
 800908c:	60a3      	str	r3, [r4, #8]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	6022      	str	r2, [r4, #0]
 8009094:	701f      	strb	r7, [r3, #0]
 8009096:	6963      	ldr	r3, [r4, #20]
 8009098:	4283      	cmp	r3, r0
 800909a:	d004      	beq.n	80090a6 <__swbuf_r+0x62>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	07db      	lsls	r3, r3, #31
 80090a0:	d507      	bpl.n	80090b2 <__swbuf_r+0x6e>
 80090a2:	2d0a      	cmp	r5, #10
 80090a4:	d105      	bne.n	80090b2 <__swbuf_r+0x6e>
 80090a6:	0021      	movs	r1, r4
 80090a8:	0030      	movs	r0, r6
 80090aa:	f002 fc35 	bl	800b918 <_fflush_r>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d107      	bne.n	80090c2 <__swbuf_r+0x7e>
 80090b2:	0028      	movs	r0, r5
 80090b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b6:	0021      	movs	r1, r4
 80090b8:	0030      	movs	r0, r6
 80090ba:	f000 f805 	bl	80090c8 <__swsetup_r>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d0d3      	beq.n	800906a <__swbuf_r+0x26>
 80090c2:	2501      	movs	r5, #1
 80090c4:	426d      	negs	r5, r5
 80090c6:	e7f4      	b.n	80090b2 <__swbuf_r+0x6e>

080090c8 <__swsetup_r>:
 80090c8:	4b30      	ldr	r3, [pc, #192]	; (800918c <__swsetup_r+0xc4>)
 80090ca:	b570      	push	{r4, r5, r6, lr}
 80090cc:	0005      	movs	r5, r0
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	000c      	movs	r4, r1
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d004      	beq.n	80090e0 <__swsetup_r+0x18>
 80090d6:	6a03      	ldr	r3, [r0, #32]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <__swsetup_r+0x18>
 80090dc:	f7ff ff12 	bl	8008f04 <__sinit>
 80090e0:	230c      	movs	r3, #12
 80090e2:	5ee2      	ldrsh	r2, [r4, r3]
 80090e4:	b293      	uxth	r3, r2
 80090e6:	0711      	lsls	r1, r2, #28
 80090e8:	d423      	bmi.n	8009132 <__swsetup_r+0x6a>
 80090ea:	06d9      	lsls	r1, r3, #27
 80090ec:	d407      	bmi.n	80090fe <__swsetup_r+0x36>
 80090ee:	2309      	movs	r3, #9
 80090f0:	2001      	movs	r0, #1
 80090f2:	602b      	str	r3, [r5, #0]
 80090f4:	3337      	adds	r3, #55	; 0x37
 80090f6:	4313      	orrs	r3, r2
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	4240      	negs	r0, r0
 80090fc:	bd70      	pop	{r4, r5, r6, pc}
 80090fe:	075b      	lsls	r3, r3, #29
 8009100:	d513      	bpl.n	800912a <__swsetup_r+0x62>
 8009102:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009104:	2900      	cmp	r1, #0
 8009106:	d008      	beq.n	800911a <__swsetup_r+0x52>
 8009108:	0023      	movs	r3, r4
 800910a:	3344      	adds	r3, #68	; 0x44
 800910c:	4299      	cmp	r1, r3
 800910e:	d002      	beq.n	8009116 <__swsetup_r+0x4e>
 8009110:	0028      	movs	r0, r5
 8009112:	f000 ff93 	bl	800a03c <_free_r>
 8009116:	2300      	movs	r3, #0
 8009118:	6363      	str	r3, [r4, #52]	; 0x34
 800911a:	2224      	movs	r2, #36	; 0x24
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	4393      	bics	r3, r2
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	2300      	movs	r3, #0
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	2308      	movs	r3, #8
 800912c:	89a2      	ldrh	r2, [r4, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10b      	bne.n	8009150 <__swsetup_r+0x88>
 8009138:	21a0      	movs	r1, #160	; 0xa0
 800913a:	2280      	movs	r2, #128	; 0x80
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	0089      	lsls	r1, r1, #2
 8009140:	0092      	lsls	r2, r2, #2
 8009142:	400b      	ands	r3, r1
 8009144:	4293      	cmp	r3, r2
 8009146:	d003      	beq.n	8009150 <__swsetup_r+0x88>
 8009148:	0021      	movs	r1, r4
 800914a:	0028      	movs	r0, r5
 800914c:	f002 fc38 	bl	800b9c0 <__smakebuf_r>
 8009150:	220c      	movs	r2, #12
 8009152:	5ea3      	ldrsh	r3, [r4, r2]
 8009154:	2001      	movs	r0, #1
 8009156:	001a      	movs	r2, r3
 8009158:	b299      	uxth	r1, r3
 800915a:	4002      	ands	r2, r0
 800915c:	4203      	tst	r3, r0
 800915e:	d00f      	beq.n	8009180 <__swsetup_r+0xb8>
 8009160:	2200      	movs	r2, #0
 8009162:	60a2      	str	r2, [r4, #8]
 8009164:	6962      	ldr	r2, [r4, #20]
 8009166:	4252      	negs	r2, r2
 8009168:	61a2      	str	r2, [r4, #24]
 800916a:	2000      	movs	r0, #0
 800916c:	6922      	ldr	r2, [r4, #16]
 800916e:	4282      	cmp	r2, r0
 8009170:	d1c4      	bne.n	80090fc <__swsetup_r+0x34>
 8009172:	0609      	lsls	r1, r1, #24
 8009174:	d5c2      	bpl.n	80090fc <__swsetup_r+0x34>
 8009176:	2240      	movs	r2, #64	; 0x40
 8009178:	4313      	orrs	r3, r2
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	3801      	subs	r0, #1
 800917e:	e7bd      	b.n	80090fc <__swsetup_r+0x34>
 8009180:	0788      	lsls	r0, r1, #30
 8009182:	d400      	bmi.n	8009186 <__swsetup_r+0xbe>
 8009184:	6962      	ldr	r2, [r4, #20]
 8009186:	60a2      	str	r2, [r4, #8]
 8009188:	e7ef      	b.n	800916a <__swsetup_r+0xa2>
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	200001d0 	.word	0x200001d0

08009190 <memset>:
 8009190:	0003      	movs	r3, r0
 8009192:	1882      	adds	r2, r0, r2
 8009194:	4293      	cmp	r3, r2
 8009196:	d100      	bne.n	800919a <memset+0xa>
 8009198:	4770      	bx	lr
 800919a:	7019      	strb	r1, [r3, #0]
 800919c:	3301      	adds	r3, #1
 800919e:	e7f9      	b.n	8009194 <memset+0x4>

080091a0 <strncmp>:
 80091a0:	b530      	push	{r4, r5, lr}
 80091a2:	0005      	movs	r5, r0
 80091a4:	1e10      	subs	r0, r2, #0
 80091a6:	d00b      	beq.n	80091c0 <strncmp+0x20>
 80091a8:	2400      	movs	r4, #0
 80091aa:	3a01      	subs	r2, #1
 80091ac:	5d2b      	ldrb	r3, [r5, r4]
 80091ae:	5d08      	ldrb	r0, [r1, r4]
 80091b0:	4283      	cmp	r3, r0
 80091b2:	d104      	bne.n	80091be <strncmp+0x1e>
 80091b4:	42a2      	cmp	r2, r4
 80091b6:	d002      	beq.n	80091be <strncmp+0x1e>
 80091b8:	3401      	adds	r4, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f6      	bne.n	80091ac <strncmp+0xc>
 80091be:	1a18      	subs	r0, r3, r0
 80091c0:	bd30      	pop	{r4, r5, pc}
	...

080091c4 <_localeconv_r>:
 80091c4:	4800      	ldr	r0, [pc, #0]	; (80091c8 <_localeconv_r+0x4>)
 80091c6:	4770      	bx	lr
 80091c8:	20000108 	.word	0x20000108

080091cc <_close_r>:
 80091cc:	2300      	movs	r3, #0
 80091ce:	b570      	push	{r4, r5, r6, lr}
 80091d0:	4d06      	ldr	r5, [pc, #24]	; (80091ec <_close_r+0x20>)
 80091d2:	0004      	movs	r4, r0
 80091d4:	0008      	movs	r0, r1
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	f7f9 fee3 	bl	8002fa2 <_close>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d103      	bne.n	80091e8 <_close_r+0x1c>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d000      	beq.n	80091e8 <_close_r+0x1c>
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	2000089c 	.word	0x2000089c

080091f0 <_lseek_r>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	0004      	movs	r4, r0
 80091f4:	0008      	movs	r0, r1
 80091f6:	0011      	movs	r1, r2
 80091f8:	001a      	movs	r2, r3
 80091fa:	2300      	movs	r3, #0
 80091fc:	4d05      	ldr	r5, [pc, #20]	; (8009214 <_lseek_r+0x24>)
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f9 fef0 	bl	8002fe4 <_lseek>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d103      	bne.n	8009210 <_lseek_r+0x20>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d000      	beq.n	8009210 <_lseek_r+0x20>
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	bd70      	pop	{r4, r5, r6, pc}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	2000089c 	.word	0x2000089c

08009218 <_read_r>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	0004      	movs	r4, r0
 800921c:	0008      	movs	r0, r1
 800921e:	0011      	movs	r1, r2
 8009220:	001a      	movs	r2, r3
 8009222:	2300      	movs	r3, #0
 8009224:	4d05      	ldr	r5, [pc, #20]	; (800923c <_read_r+0x24>)
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	f7f9 fe82 	bl	8002f30 <_read>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d103      	bne.n	8009238 <_read_r+0x20>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d000      	beq.n	8009238 <_read_r+0x20>
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	46c0      	nop			; (mov r8, r8)
 800923c:	2000089c 	.word	0x2000089c

08009240 <_write_r>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	0004      	movs	r4, r0
 8009244:	0008      	movs	r0, r1
 8009246:	0011      	movs	r1, r2
 8009248:	001a      	movs	r2, r3
 800924a:	2300      	movs	r3, #0
 800924c:	4d05      	ldr	r5, [pc, #20]	; (8009264 <_write_r+0x24>)
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7f9 fe8b 	bl	8002f6a <_write>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d103      	bne.n	8009260 <_write_r+0x20>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d000      	beq.n	8009260 <_write_r+0x20>
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	2000089c 	.word	0x2000089c

08009268 <__errno>:
 8009268:	4b01      	ldr	r3, [pc, #4]	; (8009270 <__errno+0x8>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	4770      	bx	lr
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	200001d0 	.word	0x200001d0

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	2600      	movs	r6, #0
 8009278:	4c0c      	ldr	r4, [pc, #48]	; (80092ac <__libc_init_array+0x38>)
 800927a:	4d0d      	ldr	r5, [pc, #52]	; (80092b0 <__libc_init_array+0x3c>)
 800927c:	1b64      	subs	r4, r4, r5
 800927e:	10a4      	asrs	r4, r4, #2
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	2600      	movs	r6, #0
 8009286:	f002 fd07 	bl	800bc98 <_init>
 800928a:	4c0a      	ldr	r4, [pc, #40]	; (80092b4 <__libc_init_array+0x40>)
 800928c:	4d0a      	ldr	r5, [pc, #40]	; (80092b8 <__libc_init_array+0x44>)
 800928e:	1b64      	subs	r4, r4, r5
 8009290:	10a4      	asrs	r4, r4, #2
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	00b3      	lsls	r3, r6, #2
 800929a:	58eb      	ldr	r3, [r5, r3]
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	00b3      	lsls	r3, r6, #2
 80092a4:	58eb      	ldr	r3, [r5, r3]
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800c1a4 	.word	0x0800c1a4
 80092b0:	0800c1a4 	.word	0x0800c1a4
 80092b4:	0800c1a8 	.word	0x0800c1a8
 80092b8:	0800c1a4 	.word	0x0800c1a4

080092bc <__retarget_lock_init_recursive>:
 80092bc:	4770      	bx	lr

080092be <__retarget_lock_acquire_recursive>:
 80092be:	4770      	bx	lr

080092c0 <__retarget_lock_release_recursive>:
 80092c0:	4770      	bx	lr

080092c2 <memchr>:
 80092c2:	b2c9      	uxtb	r1, r1
 80092c4:	1882      	adds	r2, r0, r2
 80092c6:	4290      	cmp	r0, r2
 80092c8:	d101      	bne.n	80092ce <memchr+0xc>
 80092ca:	2000      	movs	r0, #0
 80092cc:	4770      	bx	lr
 80092ce:	7803      	ldrb	r3, [r0, #0]
 80092d0:	428b      	cmp	r3, r1
 80092d2:	d0fb      	beq.n	80092cc <memchr+0xa>
 80092d4:	3001      	adds	r0, #1
 80092d6:	e7f6      	b.n	80092c6 <memchr+0x4>

080092d8 <memcpy>:
 80092d8:	2300      	movs	r3, #0
 80092da:	b510      	push	{r4, lr}
 80092dc:	429a      	cmp	r2, r3
 80092de:	d100      	bne.n	80092e2 <memcpy+0xa>
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	5ccc      	ldrb	r4, [r1, r3]
 80092e4:	54c4      	strb	r4, [r0, r3]
 80092e6:	3301      	adds	r3, #1
 80092e8:	e7f8      	b.n	80092dc <memcpy+0x4>
	...

080092ec <nan>:
 80092ec:	2000      	movs	r0, #0
 80092ee:	4901      	ldr	r1, [pc, #4]	; (80092f4 <nan+0x8>)
 80092f0:	4770      	bx	lr
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	7ff80000 	.word	0x7ff80000

080092f8 <nanf>:
 80092f8:	4800      	ldr	r0, [pc, #0]	; (80092fc <nanf+0x4>)
 80092fa:	4770      	bx	lr
 80092fc:	7fc00000 	.word	0x7fc00000

08009300 <quorem>:
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009302:	6902      	ldr	r2, [r0, #16]
 8009304:	690b      	ldr	r3, [r1, #16]
 8009306:	b089      	sub	sp, #36	; 0x24
 8009308:	0007      	movs	r7, r0
 800930a:	9104      	str	r1, [sp, #16]
 800930c:	2000      	movs	r0, #0
 800930e:	429a      	cmp	r2, r3
 8009310:	db69      	blt.n	80093e6 <quorem+0xe6>
 8009312:	3b01      	subs	r3, #1
 8009314:	009c      	lsls	r4, r3, #2
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	000b      	movs	r3, r1
 800931a:	3314      	adds	r3, #20
 800931c:	9306      	str	r3, [sp, #24]
 800931e:	191b      	adds	r3, r3, r4
 8009320:	9305      	str	r3, [sp, #20]
 8009322:	003b      	movs	r3, r7
 8009324:	3314      	adds	r3, #20
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	191c      	adds	r4, r3, r4
 800932a:	9b05      	ldr	r3, [sp, #20]
 800932c:	6826      	ldr	r6, [r4, #0]
 800932e:	681d      	ldr	r5, [r3, #0]
 8009330:	0030      	movs	r0, r6
 8009332:	3501      	adds	r5, #1
 8009334:	0029      	movs	r1, r5
 8009336:	f7f6 ff03 	bl	8000140 <__udivsi3>
 800933a:	9002      	str	r0, [sp, #8]
 800933c:	42ae      	cmp	r6, r5
 800933e:	d329      	bcc.n	8009394 <quorem+0x94>
 8009340:	9b06      	ldr	r3, [sp, #24]
 8009342:	2600      	movs	r6, #0
 8009344:	469c      	mov	ip, r3
 8009346:	9d03      	ldr	r5, [sp, #12]
 8009348:	9606      	str	r6, [sp, #24]
 800934a:	4662      	mov	r2, ip
 800934c:	ca08      	ldmia	r2!, {r3}
 800934e:	6828      	ldr	r0, [r5, #0]
 8009350:	4694      	mov	ip, r2
 8009352:	9a02      	ldr	r2, [sp, #8]
 8009354:	b299      	uxth	r1, r3
 8009356:	4351      	muls	r1, r2
 8009358:	0c1b      	lsrs	r3, r3, #16
 800935a:	4353      	muls	r3, r2
 800935c:	1989      	adds	r1, r1, r6
 800935e:	0c0a      	lsrs	r2, r1, #16
 8009360:	189b      	adds	r3, r3, r2
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	0c1e      	lsrs	r6, r3, #16
 8009366:	9b06      	ldr	r3, [sp, #24]
 8009368:	b282      	uxth	r2, r0
 800936a:	18d2      	adds	r2, r2, r3
 800936c:	466b      	mov	r3, sp
 800936e:	b289      	uxth	r1, r1
 8009370:	8b9b      	ldrh	r3, [r3, #28]
 8009372:	1a52      	subs	r2, r2, r1
 8009374:	0c01      	lsrs	r1, r0, #16
 8009376:	1ac9      	subs	r1, r1, r3
 8009378:	1413      	asrs	r3, r2, #16
 800937a:	18cb      	adds	r3, r1, r3
 800937c:	1419      	asrs	r1, r3, #16
 800937e:	b292      	uxth	r2, r2
 8009380:	041b      	lsls	r3, r3, #16
 8009382:	4313      	orrs	r3, r2
 8009384:	c508      	stmia	r5!, {r3}
 8009386:	9b05      	ldr	r3, [sp, #20]
 8009388:	9106      	str	r1, [sp, #24]
 800938a:	4563      	cmp	r3, ip
 800938c:	d2dd      	bcs.n	800934a <quorem+0x4a>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d030      	beq.n	80093f6 <quorem+0xf6>
 8009394:	0038      	movs	r0, r7
 8009396:	9904      	ldr	r1, [sp, #16]
 8009398:	f001 fd98 	bl	800aecc <__mcmp>
 800939c:	2800      	cmp	r0, #0
 800939e:	db21      	blt.n	80093e4 <quorem+0xe4>
 80093a0:	0038      	movs	r0, r7
 80093a2:	2600      	movs	r6, #0
 80093a4:	9b02      	ldr	r3, [sp, #8]
 80093a6:	9c04      	ldr	r4, [sp, #16]
 80093a8:	3301      	adds	r3, #1
 80093aa:	9302      	str	r3, [sp, #8]
 80093ac:	3014      	adds	r0, #20
 80093ae:	3414      	adds	r4, #20
 80093b0:	6803      	ldr	r3, [r0, #0]
 80093b2:	cc02      	ldmia	r4!, {r1}
 80093b4:	b29d      	uxth	r5, r3
 80093b6:	19ad      	adds	r5, r5, r6
 80093b8:	b28a      	uxth	r2, r1
 80093ba:	1aaa      	subs	r2, r5, r2
 80093bc:	0c09      	lsrs	r1, r1, #16
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	1a5b      	subs	r3, r3, r1
 80093c2:	1411      	asrs	r1, r2, #16
 80093c4:	185b      	adds	r3, r3, r1
 80093c6:	141e      	asrs	r6, r3, #16
 80093c8:	b292      	uxth	r2, r2
 80093ca:	041b      	lsls	r3, r3, #16
 80093cc:	4313      	orrs	r3, r2
 80093ce:	c008      	stmia	r0!, {r3}
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	42a3      	cmp	r3, r4
 80093d4:	d2ec      	bcs.n	80093b0 <quorem+0xb0>
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	9a03      	ldr	r2, [sp, #12]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	18d3      	adds	r3, r2, r3
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	2a00      	cmp	r2, #0
 80093e2:	d015      	beq.n	8009410 <quorem+0x110>
 80093e4:	9802      	ldr	r0, [sp, #8]
 80093e6:	b009      	add	sp, #36	; 0x24
 80093e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d106      	bne.n	80093fe <quorem+0xfe>
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	9b03      	ldr	r3, [sp, #12]
 80093f8:	3c04      	subs	r4, #4
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	d3f5      	bcc.n	80093ea <quorem+0xea>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	e7c7      	b.n	8009394 <quorem+0x94>
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	2a00      	cmp	r2, #0
 8009408:	d106      	bne.n	8009418 <quorem+0x118>
 800940a:	9a01      	ldr	r2, [sp, #4]
 800940c:	3a01      	subs	r2, #1
 800940e:	9201      	str	r2, [sp, #4]
 8009410:	9a03      	ldr	r2, [sp, #12]
 8009412:	3b04      	subs	r3, #4
 8009414:	429a      	cmp	r2, r3
 8009416:	d3f5      	bcc.n	8009404 <quorem+0x104>
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e7e2      	b.n	80093e4 <quorem+0xe4>
	...

08009420 <_dtoa_r>:
 8009420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009422:	0014      	movs	r4, r2
 8009424:	001d      	movs	r5, r3
 8009426:	69c6      	ldr	r6, [r0, #28]
 8009428:	b09d      	sub	sp, #116	; 0x74
 800942a:	9408      	str	r4, [sp, #32]
 800942c:	9509      	str	r5, [sp, #36]	; 0x24
 800942e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009430:	9004      	str	r0, [sp, #16]
 8009432:	2e00      	cmp	r6, #0
 8009434:	d10f      	bne.n	8009456 <_dtoa_r+0x36>
 8009436:	2010      	movs	r0, #16
 8009438:	f001 f9a6 	bl	800a788 <malloc>
 800943c:	9b04      	ldr	r3, [sp, #16]
 800943e:	1e02      	subs	r2, r0, #0
 8009440:	61d8      	str	r0, [r3, #28]
 8009442:	d104      	bne.n	800944e <_dtoa_r+0x2e>
 8009444:	21ef      	movs	r1, #239	; 0xef
 8009446:	4bc6      	ldr	r3, [pc, #792]	; (8009760 <_dtoa_r+0x340>)
 8009448:	48c6      	ldr	r0, [pc, #792]	; (8009764 <_dtoa_r+0x344>)
 800944a:	f002 fb41 	bl	800bad0 <__assert_func>
 800944e:	6046      	str	r6, [r0, #4]
 8009450:	6086      	str	r6, [r0, #8]
 8009452:	6006      	str	r6, [r0, #0]
 8009454:	60c6      	str	r6, [r0, #12]
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	6819      	ldr	r1, [r3, #0]
 800945c:	2900      	cmp	r1, #0
 800945e:	d00b      	beq.n	8009478 <_dtoa_r+0x58>
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	2301      	movs	r3, #1
 8009464:	4093      	lsls	r3, r2
 8009466:	604a      	str	r2, [r1, #4]
 8009468:	608b      	str	r3, [r1, #8]
 800946a:	9804      	ldr	r0, [sp, #16]
 800946c:	f001 faa0 	bl	800a9b0 <_Bfree>
 8009470:	2200      	movs	r2, #0
 8009472:	9b04      	ldr	r3, [sp, #16]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	2d00      	cmp	r5, #0
 800947a:	da1e      	bge.n	80094ba <_dtoa_r+0x9a>
 800947c:	2301      	movs	r3, #1
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	006b      	lsls	r3, r5, #1
 8009482:	085b      	lsrs	r3, r3, #1
 8009484:	9309      	str	r3, [sp, #36]	; 0x24
 8009486:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009488:	4bb7      	ldr	r3, [pc, #732]	; (8009768 <_dtoa_r+0x348>)
 800948a:	4ab7      	ldr	r2, [pc, #732]	; (8009768 <_dtoa_r+0x348>)
 800948c:	403b      	ands	r3, r7
 800948e:	4293      	cmp	r3, r2
 8009490:	d116      	bne.n	80094c0 <_dtoa_r+0xa0>
 8009492:	4bb6      	ldr	r3, [pc, #728]	; (800976c <_dtoa_r+0x34c>)
 8009494:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	033b      	lsls	r3, r7, #12
 800949a:	0b1b      	lsrs	r3, r3, #12
 800949c:	4323      	orrs	r3, r4
 800949e:	d101      	bne.n	80094a4 <_dtoa_r+0x84>
 80094a0:	f000 fdb5 	bl	800a00e <_dtoa_r+0xbee>
 80094a4:	4bb2      	ldr	r3, [pc, #712]	; (8009770 <_dtoa_r+0x350>)
 80094a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094a8:	9306      	str	r3, [sp, #24]
 80094aa:	2a00      	cmp	r2, #0
 80094ac:	d002      	beq.n	80094b4 <_dtoa_r+0x94>
 80094ae:	4bb1      	ldr	r3, [pc, #708]	; (8009774 <_dtoa_r+0x354>)
 80094b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	9806      	ldr	r0, [sp, #24]
 80094b6:	b01d      	add	sp, #116	; 0x74
 80094b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ba:	2300      	movs	r3, #0
 80094bc:	603b      	str	r3, [r7, #0]
 80094be:	e7e2      	b.n	8009486 <_dtoa_r+0x66>
 80094c0:	9a08      	ldr	r2, [sp, #32]
 80094c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c4:	9210      	str	r2, [sp, #64]	; 0x40
 80094c6:	9311      	str	r3, [sp, #68]	; 0x44
 80094c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094cc:	2200      	movs	r2, #0
 80094ce:	2300      	movs	r3, #0
 80094d0:	f7f6 ffbc 	bl	800044c <__aeabi_dcmpeq>
 80094d4:	1e06      	subs	r6, r0, #0
 80094d6:	d009      	beq.n	80094ec <_dtoa_r+0xcc>
 80094d8:	2301      	movs	r3, #1
 80094da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	4ba6      	ldr	r3, [pc, #664]	; (8009778 <_dtoa_r+0x358>)
 80094e0:	9306      	str	r3, [sp, #24]
 80094e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0e5      	beq.n	80094b4 <_dtoa_r+0x94>
 80094e8:	4ba4      	ldr	r3, [pc, #656]	; (800977c <_dtoa_r+0x35c>)
 80094ea:	e7e1      	b.n	80094b0 <_dtoa_r+0x90>
 80094ec:	ab1a      	add	r3, sp, #104	; 0x68
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	9804      	ldr	r0, [sp, #16]
 80094f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094fa:	f001 fe03 	bl	800b104 <__d2b>
 80094fe:	007a      	lsls	r2, r7, #1
 8009500:	9005      	str	r0, [sp, #20]
 8009502:	0d52      	lsrs	r2, r2, #21
 8009504:	d100      	bne.n	8009508 <_dtoa_r+0xe8>
 8009506:	e07b      	b.n	8009600 <_dtoa_r+0x1e0>
 8009508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800950a:	9617      	str	r6, [sp, #92]	; 0x5c
 800950c:	0319      	lsls	r1, r3, #12
 800950e:	4b9c      	ldr	r3, [pc, #624]	; (8009780 <_dtoa_r+0x360>)
 8009510:	0b09      	lsrs	r1, r1, #12
 8009512:	430b      	orrs	r3, r1
 8009514:	499b      	ldr	r1, [pc, #620]	; (8009784 <_dtoa_r+0x364>)
 8009516:	1857      	adds	r7, r2, r1
 8009518:	9810      	ldr	r0, [sp, #64]	; 0x40
 800951a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800951c:	0019      	movs	r1, r3
 800951e:	2200      	movs	r2, #0
 8009520:	4b99      	ldr	r3, [pc, #612]	; (8009788 <_dtoa_r+0x368>)
 8009522:	f7f8 fb67 	bl	8001bf4 <__aeabi_dsub>
 8009526:	4a99      	ldr	r2, [pc, #612]	; (800978c <_dtoa_r+0x36c>)
 8009528:	4b99      	ldr	r3, [pc, #612]	; (8009790 <_dtoa_r+0x370>)
 800952a:	f7f8 f8a1 	bl	8001670 <__aeabi_dmul>
 800952e:	4a99      	ldr	r2, [pc, #612]	; (8009794 <_dtoa_r+0x374>)
 8009530:	4b99      	ldr	r3, [pc, #612]	; (8009798 <_dtoa_r+0x378>)
 8009532:	f7f7 f943 	bl	80007bc <__aeabi_dadd>
 8009536:	0004      	movs	r4, r0
 8009538:	0038      	movs	r0, r7
 800953a:	000d      	movs	r5, r1
 800953c:	f7f8 ff30 	bl	80023a0 <__aeabi_i2d>
 8009540:	4a96      	ldr	r2, [pc, #600]	; (800979c <_dtoa_r+0x37c>)
 8009542:	4b97      	ldr	r3, [pc, #604]	; (80097a0 <_dtoa_r+0x380>)
 8009544:	f7f8 f894 	bl	8001670 <__aeabi_dmul>
 8009548:	0002      	movs	r2, r0
 800954a:	000b      	movs	r3, r1
 800954c:	0020      	movs	r0, r4
 800954e:	0029      	movs	r1, r5
 8009550:	f7f7 f934 	bl	80007bc <__aeabi_dadd>
 8009554:	0004      	movs	r4, r0
 8009556:	000d      	movs	r5, r1
 8009558:	f7f8 feec 	bl	8002334 <__aeabi_d2iz>
 800955c:	2200      	movs	r2, #0
 800955e:	9003      	str	r0, [sp, #12]
 8009560:	2300      	movs	r3, #0
 8009562:	0020      	movs	r0, r4
 8009564:	0029      	movs	r1, r5
 8009566:	f7f6 ff77 	bl	8000458 <__aeabi_dcmplt>
 800956a:	2800      	cmp	r0, #0
 800956c:	d00b      	beq.n	8009586 <_dtoa_r+0x166>
 800956e:	9803      	ldr	r0, [sp, #12]
 8009570:	f7f8 ff16 	bl	80023a0 <__aeabi_i2d>
 8009574:	002b      	movs	r3, r5
 8009576:	0022      	movs	r2, r4
 8009578:	f7f6 ff68 	bl	800044c <__aeabi_dcmpeq>
 800957c:	4243      	negs	r3, r0
 800957e:	4158      	adcs	r0, r3
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	1a1b      	subs	r3, r3, r0
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	2301      	movs	r3, #1
 8009588:	9316      	str	r3, [sp, #88]	; 0x58
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	2b16      	cmp	r3, #22
 800958e:	d810      	bhi.n	80095b2 <_dtoa_r+0x192>
 8009590:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009592:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009594:	9a03      	ldr	r2, [sp, #12]
 8009596:	4b83      	ldr	r3, [pc, #524]	; (80097a4 <_dtoa_r+0x384>)
 8009598:	00d2      	lsls	r2, r2, #3
 800959a:	189b      	adds	r3, r3, r2
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f7f6 ff5a 	bl	8000458 <__aeabi_dcmplt>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d047      	beq.n	8009638 <_dtoa_r+0x218>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	9303      	str	r3, [sp, #12]
 80095ae:	2300      	movs	r3, #0
 80095b0:	9316      	str	r3, [sp, #88]	; 0x58
 80095b2:	2200      	movs	r2, #0
 80095b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80095b6:	920a      	str	r2, [sp, #40]	; 0x28
 80095b8:	1bdb      	subs	r3, r3, r7
 80095ba:	1e5a      	subs	r2, r3, #1
 80095bc:	d53e      	bpl.n	800963c <_dtoa_r+0x21c>
 80095be:	2201      	movs	r2, #1
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	930a      	str	r3, [sp, #40]	; 0x28
 80095c4:	2300      	movs	r3, #0
 80095c6:	930c      	str	r3, [sp, #48]	; 0x30
 80095c8:	9b03      	ldr	r3, [sp, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	db38      	blt.n	8009640 <_dtoa_r+0x220>
 80095ce:	9a03      	ldr	r2, [sp, #12]
 80095d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d2:	4694      	mov	ip, r2
 80095d4:	4463      	add	r3, ip
 80095d6:	930c      	str	r3, [sp, #48]	; 0x30
 80095d8:	2300      	movs	r3, #0
 80095da:	9213      	str	r2, [sp, #76]	; 0x4c
 80095dc:	930d      	str	r3, [sp, #52]	; 0x34
 80095de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095e0:	2401      	movs	r4, #1
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d867      	bhi.n	80096b6 <_dtoa_r+0x296>
 80095e6:	2b05      	cmp	r3, #5
 80095e8:	dd02      	ble.n	80095f0 <_dtoa_r+0x1d0>
 80095ea:	2400      	movs	r4, #0
 80095ec:	3b04      	subs	r3, #4
 80095ee:	9322      	str	r3, [sp, #136]	; 0x88
 80095f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095f2:	1e98      	subs	r0, r3, #2
 80095f4:	2803      	cmp	r0, #3
 80095f6:	d867      	bhi.n	80096c8 <_dtoa_r+0x2a8>
 80095f8:	f7f6 fd8e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80095fc:	5b383a2b 	.word	0x5b383a2b
 8009600:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009602:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009604:	18f6      	adds	r6, r6, r3
 8009606:	4b68      	ldr	r3, [pc, #416]	; (80097a8 <_dtoa_r+0x388>)
 8009608:	18f2      	adds	r2, r6, r3
 800960a:	2a20      	cmp	r2, #32
 800960c:	dd0f      	ble.n	800962e <_dtoa_r+0x20e>
 800960e:	2340      	movs	r3, #64	; 0x40
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	409f      	lsls	r7, r3
 8009614:	4b65      	ldr	r3, [pc, #404]	; (80097ac <_dtoa_r+0x38c>)
 8009616:	0038      	movs	r0, r7
 8009618:	18f3      	adds	r3, r6, r3
 800961a:	40dc      	lsrs	r4, r3
 800961c:	4320      	orrs	r0, r4
 800961e:	f7f8 feef 	bl	8002400 <__aeabi_ui2d>
 8009622:	2201      	movs	r2, #1
 8009624:	4b62      	ldr	r3, [pc, #392]	; (80097b0 <_dtoa_r+0x390>)
 8009626:	1e77      	subs	r7, r6, #1
 8009628:	18cb      	adds	r3, r1, r3
 800962a:	9217      	str	r2, [sp, #92]	; 0x5c
 800962c:	e776      	b.n	800951c <_dtoa_r+0xfc>
 800962e:	2320      	movs	r3, #32
 8009630:	0020      	movs	r0, r4
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	4098      	lsls	r0, r3
 8009636:	e7f2      	b.n	800961e <_dtoa_r+0x1fe>
 8009638:	9016      	str	r0, [sp, #88]	; 0x58
 800963a:	e7ba      	b.n	80095b2 <_dtoa_r+0x192>
 800963c:	920c      	str	r2, [sp, #48]	; 0x30
 800963e:	e7c3      	b.n	80095c8 <_dtoa_r+0x1a8>
 8009640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009642:	9a03      	ldr	r2, [sp, #12]
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	930a      	str	r3, [sp, #40]	; 0x28
 8009648:	4253      	negs	r3, r2
 800964a:	930d      	str	r3, [sp, #52]	; 0x34
 800964c:	2300      	movs	r3, #0
 800964e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009650:	e7c5      	b.n	80095de <_dtoa_r+0x1be>
 8009652:	2300      	movs	r3, #0
 8009654:	930f      	str	r3, [sp, #60]	; 0x3c
 8009656:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009658:	930b      	str	r3, [sp, #44]	; 0x2c
 800965a:	9307      	str	r3, [sp, #28]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dc13      	bgt.n	8009688 <_dtoa_r+0x268>
 8009660:	2301      	movs	r3, #1
 8009662:	001a      	movs	r2, r3
 8009664:	930b      	str	r3, [sp, #44]	; 0x2c
 8009666:	9307      	str	r3, [sp, #28]
 8009668:	9223      	str	r2, [sp, #140]	; 0x8c
 800966a:	e00d      	b.n	8009688 <_dtoa_r+0x268>
 800966c:	2301      	movs	r3, #1
 800966e:	e7f1      	b.n	8009654 <_dtoa_r+0x234>
 8009670:	2300      	movs	r3, #0
 8009672:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009674:	930f      	str	r3, [sp, #60]	; 0x3c
 8009676:	4694      	mov	ip, r2
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	4463      	add	r3, ip
 800967c:	930b      	str	r3, [sp, #44]	; 0x2c
 800967e:	3301      	adds	r3, #1
 8009680:	9307      	str	r3, [sp, #28]
 8009682:	2b00      	cmp	r3, #0
 8009684:	dc00      	bgt.n	8009688 <_dtoa_r+0x268>
 8009686:	2301      	movs	r3, #1
 8009688:	9a04      	ldr	r2, [sp, #16]
 800968a:	2100      	movs	r1, #0
 800968c:	69d0      	ldr	r0, [r2, #28]
 800968e:	2204      	movs	r2, #4
 8009690:	0015      	movs	r5, r2
 8009692:	3514      	adds	r5, #20
 8009694:	429d      	cmp	r5, r3
 8009696:	d91b      	bls.n	80096d0 <_dtoa_r+0x2b0>
 8009698:	6041      	str	r1, [r0, #4]
 800969a:	9804      	ldr	r0, [sp, #16]
 800969c:	f001 f944 	bl	800a928 <_Balloc>
 80096a0:	9006      	str	r0, [sp, #24]
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d117      	bne.n	80096d6 <_dtoa_r+0x2b6>
 80096a6:	21b0      	movs	r1, #176	; 0xb0
 80096a8:	4b42      	ldr	r3, [pc, #264]	; (80097b4 <_dtoa_r+0x394>)
 80096aa:	482e      	ldr	r0, [pc, #184]	; (8009764 <_dtoa_r+0x344>)
 80096ac:	9a06      	ldr	r2, [sp, #24]
 80096ae:	31ff      	adds	r1, #255	; 0xff
 80096b0:	e6cb      	b.n	800944a <_dtoa_r+0x2a>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e7dd      	b.n	8009672 <_dtoa_r+0x252>
 80096b6:	2300      	movs	r3, #0
 80096b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80096ba:	9322      	str	r3, [sp, #136]	; 0x88
 80096bc:	3b01      	subs	r3, #1
 80096be:	930b      	str	r3, [sp, #44]	; 0x2c
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	2200      	movs	r2, #0
 80096c4:	3313      	adds	r3, #19
 80096c6:	e7cf      	b.n	8009668 <_dtoa_r+0x248>
 80096c8:	2301      	movs	r3, #1
 80096ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80096cc:	3b02      	subs	r3, #2
 80096ce:	e7f6      	b.n	80096be <_dtoa_r+0x29e>
 80096d0:	3101      	adds	r1, #1
 80096d2:	0052      	lsls	r2, r2, #1
 80096d4:	e7dc      	b.n	8009690 <_dtoa_r+0x270>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	9a06      	ldr	r2, [sp, #24]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	9b07      	ldr	r3, [sp, #28]
 80096e0:	2b0e      	cmp	r3, #14
 80096e2:	d900      	bls.n	80096e6 <_dtoa_r+0x2c6>
 80096e4:	e0e5      	b.n	80098b2 <_dtoa_r+0x492>
 80096e6:	2c00      	cmp	r4, #0
 80096e8:	d100      	bne.n	80096ec <_dtoa_r+0x2cc>
 80096ea:	e0e2      	b.n	80098b2 <_dtoa_r+0x492>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dd64      	ble.n	80097bc <_dtoa_r+0x39c>
 80096f2:	210f      	movs	r1, #15
 80096f4:	9a03      	ldr	r2, [sp, #12]
 80096f6:	4b2b      	ldr	r3, [pc, #172]	; (80097a4 <_dtoa_r+0x384>)
 80096f8:	400a      	ands	r2, r1
 80096fa:	00d2      	lsls	r2, r2, #3
 80096fc:	189b      	adds	r3, r3, r2
 80096fe:	681e      	ldr	r6, [r3, #0]
 8009700:	685f      	ldr	r7, [r3, #4]
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	2402      	movs	r4, #2
 8009706:	111d      	asrs	r5, r3, #4
 8009708:	05db      	lsls	r3, r3, #23
 800970a:	d50a      	bpl.n	8009722 <_dtoa_r+0x302>
 800970c:	4b2a      	ldr	r3, [pc, #168]	; (80097b8 <_dtoa_r+0x398>)
 800970e:	400d      	ands	r5, r1
 8009710:	6a1a      	ldr	r2, [r3, #32]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009716:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009718:	f7f7 fbb0 	bl	8000e7c <__aeabi_ddiv>
 800971c:	9008      	str	r0, [sp, #32]
 800971e:	9109      	str	r1, [sp, #36]	; 0x24
 8009720:	3401      	adds	r4, #1
 8009722:	4b25      	ldr	r3, [pc, #148]	; (80097b8 <_dtoa_r+0x398>)
 8009724:	930e      	str	r3, [sp, #56]	; 0x38
 8009726:	2d00      	cmp	r5, #0
 8009728:	d108      	bne.n	800973c <_dtoa_r+0x31c>
 800972a:	9808      	ldr	r0, [sp, #32]
 800972c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800972e:	0032      	movs	r2, r6
 8009730:	003b      	movs	r3, r7
 8009732:	f7f7 fba3 	bl	8000e7c <__aeabi_ddiv>
 8009736:	9008      	str	r0, [sp, #32]
 8009738:	9109      	str	r1, [sp, #36]	; 0x24
 800973a:	e05a      	b.n	80097f2 <_dtoa_r+0x3d2>
 800973c:	2301      	movs	r3, #1
 800973e:	421d      	tst	r5, r3
 8009740:	d009      	beq.n	8009756 <_dtoa_r+0x336>
 8009742:	18e4      	adds	r4, r4, r3
 8009744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009746:	0030      	movs	r0, r6
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	0039      	movs	r1, r7
 800974e:	f7f7 ff8f 	bl	8001670 <__aeabi_dmul>
 8009752:	0006      	movs	r6, r0
 8009754:	000f      	movs	r7, r1
 8009756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009758:	106d      	asrs	r5, r5, #1
 800975a:	3308      	adds	r3, #8
 800975c:	e7e2      	b.n	8009724 <_dtoa_r+0x304>
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	0800bf17 	.word	0x0800bf17
 8009764:	0800bf2e 	.word	0x0800bf2e
 8009768:	7ff00000 	.word	0x7ff00000
 800976c:	0000270f 	.word	0x0000270f
 8009770:	0800bf13 	.word	0x0800bf13
 8009774:	0800bf16 	.word	0x0800bf16
 8009778:	0800bed9 	.word	0x0800bed9
 800977c:	0800beda 	.word	0x0800beda
 8009780:	3ff00000 	.word	0x3ff00000
 8009784:	fffffc01 	.word	0xfffffc01
 8009788:	3ff80000 	.word	0x3ff80000
 800978c:	636f4361 	.word	0x636f4361
 8009790:	3fd287a7 	.word	0x3fd287a7
 8009794:	8b60c8b3 	.word	0x8b60c8b3
 8009798:	3fc68a28 	.word	0x3fc68a28
 800979c:	509f79fb 	.word	0x509f79fb
 80097a0:	3fd34413 	.word	0x3fd34413
 80097a4:	0800c078 	.word	0x0800c078
 80097a8:	00000432 	.word	0x00000432
 80097ac:	00000412 	.word	0x00000412
 80097b0:	fe100000 	.word	0xfe100000
 80097b4:	0800bf86 	.word	0x0800bf86
 80097b8:	0800c050 	.word	0x0800c050
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	2402      	movs	r4, #2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d016      	beq.n	80097f2 <_dtoa_r+0x3d2>
 80097c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80097c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80097c8:	220f      	movs	r2, #15
 80097ca:	425d      	negs	r5, r3
 80097cc:	402a      	ands	r2, r5
 80097ce:	4bdd      	ldr	r3, [pc, #884]	; (8009b44 <_dtoa_r+0x724>)
 80097d0:	00d2      	lsls	r2, r2, #3
 80097d2:	189b      	adds	r3, r3, r2
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f7f7 ff4a 	bl	8001670 <__aeabi_dmul>
 80097dc:	2701      	movs	r7, #1
 80097de:	2300      	movs	r3, #0
 80097e0:	9008      	str	r0, [sp, #32]
 80097e2:	9109      	str	r1, [sp, #36]	; 0x24
 80097e4:	4ed8      	ldr	r6, [pc, #864]	; (8009b48 <_dtoa_r+0x728>)
 80097e6:	112d      	asrs	r5, r5, #4
 80097e8:	2d00      	cmp	r5, #0
 80097ea:	d000      	beq.n	80097ee <_dtoa_r+0x3ce>
 80097ec:	e091      	b.n	8009912 <_dtoa_r+0x4f2>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1a1      	bne.n	8009736 <_dtoa_r+0x316>
 80097f2:	9e08      	ldr	r6, [sp, #32]
 80097f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d100      	bne.n	80097fe <_dtoa_r+0x3de>
 80097fc:	e094      	b.n	8009928 <_dtoa_r+0x508>
 80097fe:	2200      	movs	r2, #0
 8009800:	0030      	movs	r0, r6
 8009802:	0039      	movs	r1, r7
 8009804:	4bd1      	ldr	r3, [pc, #836]	; (8009b4c <_dtoa_r+0x72c>)
 8009806:	f7f6 fe27 	bl	8000458 <__aeabi_dcmplt>
 800980a:	2800      	cmp	r0, #0
 800980c:	d100      	bne.n	8009810 <_dtoa_r+0x3f0>
 800980e:	e08b      	b.n	8009928 <_dtoa_r+0x508>
 8009810:	9b07      	ldr	r3, [sp, #28]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d100      	bne.n	8009818 <_dtoa_r+0x3f8>
 8009816:	e087      	b.n	8009928 <_dtoa_r+0x508>
 8009818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800981a:	2b00      	cmp	r3, #0
 800981c:	dd45      	ble.n	80098aa <_dtoa_r+0x48a>
 800981e:	9b03      	ldr	r3, [sp, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	3b01      	subs	r3, #1
 8009824:	930e      	str	r3, [sp, #56]	; 0x38
 8009826:	0030      	movs	r0, r6
 8009828:	4bc9      	ldr	r3, [pc, #804]	; (8009b50 <_dtoa_r+0x730>)
 800982a:	0039      	movs	r1, r7
 800982c:	f7f7 ff20 	bl	8001670 <__aeabi_dmul>
 8009830:	9008      	str	r0, [sp, #32]
 8009832:	9109      	str	r1, [sp, #36]	; 0x24
 8009834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009836:	3401      	adds	r4, #1
 8009838:	0020      	movs	r0, r4
 800983a:	9e08      	ldr	r6, [sp, #32]
 800983c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800983e:	9312      	str	r3, [sp, #72]	; 0x48
 8009840:	f7f8 fdae 	bl	80023a0 <__aeabi_i2d>
 8009844:	0032      	movs	r2, r6
 8009846:	003b      	movs	r3, r7
 8009848:	f7f7 ff12 	bl	8001670 <__aeabi_dmul>
 800984c:	2200      	movs	r2, #0
 800984e:	4bc1      	ldr	r3, [pc, #772]	; (8009b54 <_dtoa_r+0x734>)
 8009850:	f7f6 ffb4 	bl	80007bc <__aeabi_dadd>
 8009854:	4ac0      	ldr	r2, [pc, #768]	; (8009b58 <_dtoa_r+0x738>)
 8009856:	9014      	str	r0, [sp, #80]	; 0x50
 8009858:	9115      	str	r1, [sp, #84]	; 0x54
 800985a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800985c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800985e:	4694      	mov	ip, r2
 8009860:	9308      	str	r3, [sp, #32]
 8009862:	9409      	str	r4, [sp, #36]	; 0x24
 8009864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009866:	4463      	add	r3, ip
 8009868:	9318      	str	r3, [sp, #96]	; 0x60
 800986a:	9309      	str	r3, [sp, #36]	; 0x24
 800986c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800986e:	2b00      	cmp	r3, #0
 8009870:	d15e      	bne.n	8009930 <_dtoa_r+0x510>
 8009872:	2200      	movs	r2, #0
 8009874:	4bb9      	ldr	r3, [pc, #740]	; (8009b5c <_dtoa_r+0x73c>)
 8009876:	0030      	movs	r0, r6
 8009878:	0039      	movs	r1, r7
 800987a:	f7f8 f9bb 	bl	8001bf4 <__aeabi_dsub>
 800987e:	9a08      	ldr	r2, [sp, #32]
 8009880:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009882:	0004      	movs	r4, r0
 8009884:	000d      	movs	r5, r1
 8009886:	f7f6 fdfb 	bl	8000480 <__aeabi_dcmpgt>
 800988a:	2800      	cmp	r0, #0
 800988c:	d000      	beq.n	8009890 <_dtoa_r+0x470>
 800988e:	e2b3      	b.n	8009df8 <_dtoa_r+0x9d8>
 8009890:	48b3      	ldr	r0, [pc, #716]	; (8009b60 <_dtoa_r+0x740>)
 8009892:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009894:	4684      	mov	ip, r0
 8009896:	4461      	add	r1, ip
 8009898:	000b      	movs	r3, r1
 800989a:	0020      	movs	r0, r4
 800989c:	0029      	movs	r1, r5
 800989e:	9a08      	ldr	r2, [sp, #32]
 80098a0:	f7f6 fdda 	bl	8000458 <__aeabi_dcmplt>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d000      	beq.n	80098aa <_dtoa_r+0x48a>
 80098a8:	e2a3      	b.n	8009df2 <_dtoa_r+0x9d2>
 80098aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80098ae:	9308      	str	r3, [sp, #32]
 80098b0:	9409      	str	r4, [sp, #36]	; 0x24
 80098b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	da00      	bge.n	80098ba <_dtoa_r+0x49a>
 80098b8:	e179      	b.n	8009bae <_dtoa_r+0x78e>
 80098ba:	9a03      	ldr	r2, [sp, #12]
 80098bc:	2a0e      	cmp	r2, #14
 80098be:	dd00      	ble.n	80098c2 <_dtoa_r+0x4a2>
 80098c0:	e175      	b.n	8009bae <_dtoa_r+0x78e>
 80098c2:	4ba0      	ldr	r3, [pc, #640]	; (8009b44 <_dtoa_r+0x724>)
 80098c4:	00d2      	lsls	r2, r2, #3
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	681e      	ldr	r6, [r3, #0]
 80098ca:	685f      	ldr	r7, [r3, #4]
 80098cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	db00      	blt.n	80098d4 <_dtoa_r+0x4b4>
 80098d2:	e0e5      	b.n	8009aa0 <_dtoa_r+0x680>
 80098d4:	9b07      	ldr	r3, [sp, #28]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dd00      	ble.n	80098dc <_dtoa_r+0x4bc>
 80098da:	e0e1      	b.n	8009aa0 <_dtoa_r+0x680>
 80098dc:	d000      	beq.n	80098e0 <_dtoa_r+0x4c0>
 80098de:	e288      	b.n	8009df2 <_dtoa_r+0x9d2>
 80098e0:	2200      	movs	r2, #0
 80098e2:	0030      	movs	r0, r6
 80098e4:	0039      	movs	r1, r7
 80098e6:	4b9d      	ldr	r3, [pc, #628]	; (8009b5c <_dtoa_r+0x73c>)
 80098e8:	f7f7 fec2 	bl	8001670 <__aeabi_dmul>
 80098ec:	9a08      	ldr	r2, [sp, #32]
 80098ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f0:	f7f6 fdd0 	bl	8000494 <__aeabi_dcmpge>
 80098f4:	9e07      	ldr	r6, [sp, #28]
 80098f6:	0037      	movs	r7, r6
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d000      	beq.n	80098fe <_dtoa_r+0x4de>
 80098fc:	e25f      	b.n	8009dbe <_dtoa_r+0x99e>
 80098fe:	9b06      	ldr	r3, [sp, #24]
 8009900:	9a06      	ldr	r2, [sp, #24]
 8009902:	3301      	adds	r3, #1
 8009904:	9308      	str	r3, [sp, #32]
 8009906:	2331      	movs	r3, #49	; 0x31
 8009908:	7013      	strb	r3, [r2, #0]
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	3301      	adds	r3, #1
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	e25a      	b.n	8009dc8 <_dtoa_r+0x9a8>
 8009912:	423d      	tst	r5, r7
 8009914:	d005      	beq.n	8009922 <_dtoa_r+0x502>
 8009916:	6832      	ldr	r2, [r6, #0]
 8009918:	6873      	ldr	r3, [r6, #4]
 800991a:	f7f7 fea9 	bl	8001670 <__aeabi_dmul>
 800991e:	003b      	movs	r3, r7
 8009920:	3401      	adds	r4, #1
 8009922:	106d      	asrs	r5, r5, #1
 8009924:	3608      	adds	r6, #8
 8009926:	e75f      	b.n	80097e8 <_dtoa_r+0x3c8>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	930e      	str	r3, [sp, #56]	; 0x38
 800992c:	9b07      	ldr	r3, [sp, #28]
 800992e:	e783      	b.n	8009838 <_dtoa_r+0x418>
 8009930:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009932:	4b84      	ldr	r3, [pc, #528]	; (8009b44 <_dtoa_r+0x724>)
 8009934:	3a01      	subs	r2, #1
 8009936:	00d2      	lsls	r2, r2, #3
 8009938:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800993a:	189b      	adds	r3, r3, r2
 800993c:	9c08      	ldr	r4, [sp, #32]
 800993e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2900      	cmp	r1, #0
 8009946:	d051      	beq.n	80099ec <_dtoa_r+0x5cc>
 8009948:	2000      	movs	r0, #0
 800994a:	4986      	ldr	r1, [pc, #536]	; (8009b64 <_dtoa_r+0x744>)
 800994c:	f7f7 fa96 	bl	8000e7c <__aeabi_ddiv>
 8009950:	0022      	movs	r2, r4
 8009952:	002b      	movs	r3, r5
 8009954:	f7f8 f94e 	bl	8001bf4 <__aeabi_dsub>
 8009958:	9a06      	ldr	r2, [sp, #24]
 800995a:	0004      	movs	r4, r0
 800995c:	4694      	mov	ip, r2
 800995e:	000d      	movs	r5, r1
 8009960:	9b06      	ldr	r3, [sp, #24]
 8009962:	9314      	str	r3, [sp, #80]	; 0x50
 8009964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009966:	4463      	add	r3, ip
 8009968:	9318      	str	r3, [sp, #96]	; 0x60
 800996a:	0039      	movs	r1, r7
 800996c:	0030      	movs	r0, r6
 800996e:	f7f8 fce1 	bl	8002334 <__aeabi_d2iz>
 8009972:	9012      	str	r0, [sp, #72]	; 0x48
 8009974:	f7f8 fd14 	bl	80023a0 <__aeabi_i2d>
 8009978:	0002      	movs	r2, r0
 800997a:	000b      	movs	r3, r1
 800997c:	0030      	movs	r0, r6
 800997e:	0039      	movs	r1, r7
 8009980:	f7f8 f938 	bl	8001bf4 <__aeabi_dsub>
 8009984:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009986:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009988:	3301      	adds	r3, #1
 800998a:	9308      	str	r3, [sp, #32]
 800998c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800998e:	0006      	movs	r6, r0
 8009990:	3330      	adds	r3, #48	; 0x30
 8009992:	7013      	strb	r3, [r2, #0]
 8009994:	0022      	movs	r2, r4
 8009996:	002b      	movs	r3, r5
 8009998:	000f      	movs	r7, r1
 800999a:	f7f6 fd5d 	bl	8000458 <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d174      	bne.n	8009a8c <_dtoa_r+0x66c>
 80099a2:	0032      	movs	r2, r6
 80099a4:	003b      	movs	r3, r7
 80099a6:	2000      	movs	r0, #0
 80099a8:	4968      	ldr	r1, [pc, #416]	; (8009b4c <_dtoa_r+0x72c>)
 80099aa:	f7f8 f923 	bl	8001bf4 <__aeabi_dsub>
 80099ae:	0022      	movs	r2, r4
 80099b0:	002b      	movs	r3, r5
 80099b2:	f7f6 fd51 	bl	8000458 <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d000      	beq.n	80099bc <_dtoa_r+0x59c>
 80099ba:	e0d7      	b.n	8009b6c <_dtoa_r+0x74c>
 80099bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80099be:	9a08      	ldr	r2, [sp, #32]
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d100      	bne.n	80099c6 <_dtoa_r+0x5a6>
 80099c4:	e771      	b.n	80098aa <_dtoa_r+0x48a>
 80099c6:	2200      	movs	r2, #0
 80099c8:	0020      	movs	r0, r4
 80099ca:	0029      	movs	r1, r5
 80099cc:	4b60      	ldr	r3, [pc, #384]	; (8009b50 <_dtoa_r+0x730>)
 80099ce:	f7f7 fe4f 	bl	8001670 <__aeabi_dmul>
 80099d2:	4b5f      	ldr	r3, [pc, #380]	; (8009b50 <_dtoa_r+0x730>)
 80099d4:	0004      	movs	r4, r0
 80099d6:	000d      	movs	r5, r1
 80099d8:	0030      	movs	r0, r6
 80099da:	0039      	movs	r1, r7
 80099dc:	2200      	movs	r2, #0
 80099de:	f7f7 fe47 	bl	8001670 <__aeabi_dmul>
 80099e2:	9b08      	ldr	r3, [sp, #32]
 80099e4:	0006      	movs	r6, r0
 80099e6:	000f      	movs	r7, r1
 80099e8:	9314      	str	r3, [sp, #80]	; 0x50
 80099ea:	e7be      	b.n	800996a <_dtoa_r+0x54a>
 80099ec:	0020      	movs	r0, r4
 80099ee:	0029      	movs	r1, r5
 80099f0:	f7f7 fe3e 	bl	8001670 <__aeabi_dmul>
 80099f4:	9a06      	ldr	r2, [sp, #24]
 80099f6:	9b06      	ldr	r3, [sp, #24]
 80099f8:	4694      	mov	ip, r2
 80099fa:	9308      	str	r3, [sp, #32]
 80099fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099fe:	9014      	str	r0, [sp, #80]	; 0x50
 8009a00:	9115      	str	r1, [sp, #84]	; 0x54
 8009a02:	4463      	add	r3, ip
 8009a04:	9319      	str	r3, [sp, #100]	; 0x64
 8009a06:	0030      	movs	r0, r6
 8009a08:	0039      	movs	r1, r7
 8009a0a:	f7f8 fc93 	bl	8002334 <__aeabi_d2iz>
 8009a0e:	9018      	str	r0, [sp, #96]	; 0x60
 8009a10:	f7f8 fcc6 	bl	80023a0 <__aeabi_i2d>
 8009a14:	0002      	movs	r2, r0
 8009a16:	000b      	movs	r3, r1
 8009a18:	0030      	movs	r0, r6
 8009a1a:	0039      	movs	r1, r7
 8009a1c:	f7f8 f8ea 	bl	8001bf4 <__aeabi_dsub>
 8009a20:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	3630      	adds	r6, #48	; 0x30
 8009a26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a28:	701e      	strb	r6, [r3, #0]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	0004      	movs	r4, r0
 8009a2e:	000d      	movs	r5, r1
 8009a30:	9308      	str	r3, [sp, #32]
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d12d      	bne.n	8009a92 <_dtoa_r+0x672>
 8009a36:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009a38:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009a3a:	9a06      	ldr	r2, [sp, #24]
 8009a3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a3e:	4694      	mov	ip, r2
 8009a40:	4463      	add	r3, ip
 8009a42:	2200      	movs	r2, #0
 8009a44:	9308      	str	r3, [sp, #32]
 8009a46:	4b47      	ldr	r3, [pc, #284]	; (8009b64 <_dtoa_r+0x744>)
 8009a48:	f7f6 feb8 	bl	80007bc <__aeabi_dadd>
 8009a4c:	0002      	movs	r2, r0
 8009a4e:	000b      	movs	r3, r1
 8009a50:	0020      	movs	r0, r4
 8009a52:	0029      	movs	r1, r5
 8009a54:	f7f6 fd14 	bl	8000480 <__aeabi_dcmpgt>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d000      	beq.n	8009a5e <_dtoa_r+0x63e>
 8009a5c:	e086      	b.n	8009b6c <_dtoa_r+0x74c>
 8009a5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a62:	2000      	movs	r0, #0
 8009a64:	493f      	ldr	r1, [pc, #252]	; (8009b64 <_dtoa_r+0x744>)
 8009a66:	f7f8 f8c5 	bl	8001bf4 <__aeabi_dsub>
 8009a6a:	0002      	movs	r2, r0
 8009a6c:	000b      	movs	r3, r1
 8009a6e:	0020      	movs	r0, r4
 8009a70:	0029      	movs	r1, r5
 8009a72:	f7f6 fcf1 	bl	8000458 <__aeabi_dcmplt>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d100      	bne.n	8009a7c <_dtoa_r+0x65c>
 8009a7a:	e716      	b.n	80098aa <_dtoa_r+0x48a>
 8009a7c:	9b08      	ldr	r3, [sp, #32]
 8009a7e:	001a      	movs	r2, r3
 8009a80:	3a01      	subs	r2, #1
 8009a82:	9208      	str	r2, [sp, #32]
 8009a84:	7812      	ldrb	r2, [r2, #0]
 8009a86:	2a30      	cmp	r2, #48	; 0x30
 8009a88:	d0f8      	beq.n	8009a7c <_dtoa_r+0x65c>
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a8e:	9303      	str	r3, [sp, #12]
 8009a90:	e046      	b.n	8009b20 <_dtoa_r+0x700>
 8009a92:	2200      	movs	r2, #0
 8009a94:	4b2e      	ldr	r3, [pc, #184]	; (8009b50 <_dtoa_r+0x730>)
 8009a96:	f7f7 fdeb 	bl	8001670 <__aeabi_dmul>
 8009a9a:	0006      	movs	r6, r0
 8009a9c:	000f      	movs	r7, r1
 8009a9e:	e7b2      	b.n	8009a06 <_dtoa_r+0x5e6>
 8009aa0:	9b06      	ldr	r3, [sp, #24]
 8009aa2:	9a06      	ldr	r2, [sp, #24]
 8009aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8009aa6:	9b07      	ldr	r3, [sp, #28]
 8009aa8:	9c08      	ldr	r4, [sp, #32]
 8009aaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009aac:	3b01      	subs	r3, #1
 8009aae:	189b      	adds	r3, r3, r2
 8009ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ab2:	0032      	movs	r2, r6
 8009ab4:	003b      	movs	r3, r7
 8009ab6:	0020      	movs	r0, r4
 8009ab8:	0029      	movs	r1, r5
 8009aba:	f7f7 f9df 	bl	8000e7c <__aeabi_ddiv>
 8009abe:	f7f8 fc39 	bl	8002334 <__aeabi_d2iz>
 8009ac2:	9007      	str	r0, [sp, #28]
 8009ac4:	f7f8 fc6c 	bl	80023a0 <__aeabi_i2d>
 8009ac8:	0032      	movs	r2, r6
 8009aca:	003b      	movs	r3, r7
 8009acc:	f7f7 fdd0 	bl	8001670 <__aeabi_dmul>
 8009ad0:	0002      	movs	r2, r0
 8009ad2:	000b      	movs	r3, r1
 8009ad4:	0020      	movs	r0, r4
 8009ad6:	0029      	movs	r1, r5
 8009ad8:	f7f8 f88c 	bl	8001bf4 <__aeabi_dsub>
 8009adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ade:	001a      	movs	r2, r3
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	920a      	str	r2, [sp, #40]	; 0x28
 8009ae4:	9208      	str	r2, [sp, #32]
 8009ae6:	9a07      	ldr	r2, [sp, #28]
 8009ae8:	3230      	adds	r2, #48	; 0x30
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d14f      	bne.n	8009b92 <_dtoa_r+0x772>
 8009af2:	0002      	movs	r2, r0
 8009af4:	000b      	movs	r3, r1
 8009af6:	f7f6 fe61 	bl	80007bc <__aeabi_dadd>
 8009afa:	0032      	movs	r2, r6
 8009afc:	003b      	movs	r3, r7
 8009afe:	0004      	movs	r4, r0
 8009b00:	000d      	movs	r5, r1
 8009b02:	f7f6 fcbd 	bl	8000480 <__aeabi_dcmpgt>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d12e      	bne.n	8009b68 <_dtoa_r+0x748>
 8009b0a:	0032      	movs	r2, r6
 8009b0c:	003b      	movs	r3, r7
 8009b0e:	0020      	movs	r0, r4
 8009b10:	0029      	movs	r1, r5
 8009b12:	f7f6 fc9b 	bl	800044c <__aeabi_dcmpeq>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d002      	beq.n	8009b20 <_dtoa_r+0x700>
 8009b1a:	9b07      	ldr	r3, [sp, #28]
 8009b1c:	07de      	lsls	r6, r3, #31
 8009b1e:	d423      	bmi.n	8009b68 <_dtoa_r+0x748>
 8009b20:	9905      	ldr	r1, [sp, #20]
 8009b22:	9804      	ldr	r0, [sp, #16]
 8009b24:	f000 ff44 	bl	800a9b0 <_Bfree>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9a08      	ldr	r2, [sp, #32]
 8009b2c:	7013      	strb	r3, [r2, #0]
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b32:	3301      	adds	r3, #1
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d100      	bne.n	8009b3e <_dtoa_r+0x71e>
 8009b3c:	e4ba      	b.n	80094b4 <_dtoa_r+0x94>
 8009b3e:	9a08      	ldr	r2, [sp, #32]
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e4b7      	b.n	80094b4 <_dtoa_r+0x94>
 8009b44:	0800c078 	.word	0x0800c078
 8009b48:	0800c050 	.word	0x0800c050
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	40240000 	.word	0x40240000
 8009b54:	401c0000 	.word	0x401c0000
 8009b58:	fcc00000 	.word	0xfcc00000
 8009b5c:	40140000 	.word	0x40140000
 8009b60:	7cc00000 	.word	0x7cc00000
 8009b64:	3fe00000 	.word	0x3fe00000
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	930e      	str	r3, [sp, #56]	; 0x38
 8009b6c:	9b08      	ldr	r3, [sp, #32]
 8009b6e:	9308      	str	r3, [sp, #32]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	781a      	ldrb	r2, [r3, #0]
 8009b74:	2a39      	cmp	r2, #57	; 0x39
 8009b76:	d108      	bne.n	8009b8a <_dtoa_r+0x76a>
 8009b78:	9a06      	ldr	r2, [sp, #24]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d1f7      	bne.n	8009b6e <_dtoa_r+0x74e>
 8009b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b80:	9906      	ldr	r1, [sp, #24]
 8009b82:	3201      	adds	r2, #1
 8009b84:	920e      	str	r2, [sp, #56]	; 0x38
 8009b86:	2230      	movs	r2, #48	; 0x30
 8009b88:	700a      	strb	r2, [r1, #0]
 8009b8a:	781a      	ldrb	r2, [r3, #0]
 8009b8c:	3201      	adds	r2, #1
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	e77c      	b.n	8009a8c <_dtoa_r+0x66c>
 8009b92:	2200      	movs	r2, #0
 8009b94:	4ba9      	ldr	r3, [pc, #676]	; (8009e3c <_dtoa_r+0xa1c>)
 8009b96:	f7f7 fd6b 	bl	8001670 <__aeabi_dmul>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	0004      	movs	r4, r0
 8009ba0:	000d      	movs	r5, r1
 8009ba2:	f7f6 fc53 	bl	800044c <__aeabi_dcmpeq>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d100      	bne.n	8009bac <_dtoa_r+0x78c>
 8009baa:	e782      	b.n	8009ab2 <_dtoa_r+0x692>
 8009bac:	e7b8      	b.n	8009b20 <_dtoa_r+0x700>
 8009bae:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009bb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009bb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009bb4:	2f00      	cmp	r7, #0
 8009bb6:	d012      	beq.n	8009bde <_dtoa_r+0x7be>
 8009bb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009bba:	2a01      	cmp	r2, #1
 8009bbc:	dc6e      	bgt.n	8009c9c <_dtoa_r+0x87c>
 8009bbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	d065      	beq.n	8009c90 <_dtoa_r+0x870>
 8009bc4:	4a9e      	ldr	r2, [pc, #632]	; (8009e40 <_dtoa_r+0xa20>)
 8009bc6:	189b      	adds	r3, r3, r2
 8009bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bca:	2101      	movs	r1, #1
 8009bcc:	18d2      	adds	r2, r2, r3
 8009bce:	920a      	str	r2, [sp, #40]	; 0x28
 8009bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bd2:	9804      	ldr	r0, [sp, #16]
 8009bd4:	18d3      	adds	r3, r2, r3
 8009bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8009bd8:	f000 ffe6 	bl	800aba8 <__i2b>
 8009bdc:	0007      	movs	r7, r0
 8009bde:	2c00      	cmp	r4, #0
 8009be0:	d00e      	beq.n	8009c00 <_dtoa_r+0x7e0>
 8009be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dd0b      	ble.n	8009c00 <_dtoa_r+0x7e0>
 8009be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bea:	0023      	movs	r3, r4
 8009bec:	4294      	cmp	r4, r2
 8009bee:	dd00      	ble.n	8009bf2 <_dtoa_r+0x7d2>
 8009bf0:	0013      	movs	r3, r2
 8009bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bf4:	1ae4      	subs	r4, r4, r3
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8009bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8009c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d01e      	beq.n	8009c44 <_dtoa_r+0x824>
 8009c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d05c      	beq.n	8009cc6 <_dtoa_r+0x8a6>
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	dd10      	ble.n	8009c32 <_dtoa_r+0x812>
 8009c10:	0039      	movs	r1, r7
 8009c12:	002a      	movs	r2, r5
 8009c14:	9804      	ldr	r0, [sp, #16]
 8009c16:	f001 f88f 	bl	800ad38 <__pow5mult>
 8009c1a:	9a05      	ldr	r2, [sp, #20]
 8009c1c:	0001      	movs	r1, r0
 8009c1e:	0007      	movs	r7, r0
 8009c20:	9804      	ldr	r0, [sp, #16]
 8009c22:	f000 ffd9 	bl	800abd8 <__multiply>
 8009c26:	0006      	movs	r6, r0
 8009c28:	9905      	ldr	r1, [sp, #20]
 8009c2a:	9804      	ldr	r0, [sp, #16]
 8009c2c:	f000 fec0 	bl	800a9b0 <_Bfree>
 8009c30:	9605      	str	r6, [sp, #20]
 8009c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c34:	1b5a      	subs	r2, r3, r5
 8009c36:	42ab      	cmp	r3, r5
 8009c38:	d004      	beq.n	8009c44 <_dtoa_r+0x824>
 8009c3a:	9905      	ldr	r1, [sp, #20]
 8009c3c:	9804      	ldr	r0, [sp, #16]
 8009c3e:	f001 f87b 	bl	800ad38 <__pow5mult>
 8009c42:	9005      	str	r0, [sp, #20]
 8009c44:	2101      	movs	r1, #1
 8009c46:	9804      	ldr	r0, [sp, #16]
 8009c48:	f000 ffae 	bl	800aba8 <__i2b>
 8009c4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c4e:	0006      	movs	r6, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dd3a      	ble.n	8009cca <_dtoa_r+0x8aa>
 8009c54:	001a      	movs	r2, r3
 8009c56:	0001      	movs	r1, r0
 8009c58:	9804      	ldr	r0, [sp, #16]
 8009c5a:	f001 f86d 	bl	800ad38 <__pow5mult>
 8009c5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c60:	0006      	movs	r6, r0
 8009c62:	2500      	movs	r5, #0
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	dc38      	bgt.n	8009cda <_dtoa_r+0x8ba>
 8009c68:	2500      	movs	r5, #0
 8009c6a:	9b08      	ldr	r3, [sp, #32]
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	d130      	bne.n	8009cd2 <_dtoa_r+0x8b2>
 8009c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c72:	031b      	lsls	r3, r3, #12
 8009c74:	42ab      	cmp	r3, r5
 8009c76:	d12c      	bne.n	8009cd2 <_dtoa_r+0x8b2>
 8009c78:	4b72      	ldr	r3, [pc, #456]	; (8009e44 <_dtoa_r+0xa24>)
 8009c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c7c:	4213      	tst	r3, r2
 8009c7e:	d028      	beq.n	8009cd2 <_dtoa_r+0x8b2>
 8009c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c82:	3501      	adds	r5, #1
 8009c84:	3301      	adds	r3, #1
 8009c86:	930a      	str	r3, [sp, #40]	; 0x28
 8009c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	930c      	str	r3, [sp, #48]	; 0x30
 8009c8e:	e020      	b.n	8009cd2 <_dtoa_r+0x8b2>
 8009c90:	2336      	movs	r3, #54	; 0x36
 8009c92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009c96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	e795      	b.n	8009bc8 <_dtoa_r+0x7a8>
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	1e5d      	subs	r5, r3, #1
 8009ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ca2:	42ab      	cmp	r3, r5
 8009ca4:	db07      	blt.n	8009cb6 <_dtoa_r+0x896>
 8009ca6:	1b5d      	subs	r5, r3, r5
 8009ca8:	9b07      	ldr	r3, [sp, #28]
 8009caa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	da8b      	bge.n	8009bc8 <_dtoa_r+0x7a8>
 8009cb0:	1ae4      	subs	r4, r4, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e788      	b.n	8009bc8 <_dtoa_r+0x7a8>
 8009cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cba:	1aeb      	subs	r3, r5, r3
 8009cbc:	18d3      	adds	r3, r2, r3
 8009cbe:	950d      	str	r5, [sp, #52]	; 0x34
 8009cc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cc2:	2500      	movs	r5, #0
 8009cc4:	e7f0      	b.n	8009ca8 <_dtoa_r+0x888>
 8009cc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cc8:	e7b7      	b.n	8009c3a <_dtoa_r+0x81a>
 8009cca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ccc:	2500      	movs	r5, #0
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	ddca      	ble.n	8009c68 <_dtoa_r+0x848>
 8009cd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d008      	beq.n	8009cec <_dtoa_r+0x8cc>
 8009cda:	6933      	ldr	r3, [r6, #16]
 8009cdc:	3303      	adds	r3, #3
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	18f3      	adds	r3, r6, r3
 8009ce2:	6858      	ldr	r0, [r3, #4]
 8009ce4:	f000 ff18 	bl	800ab18 <__hi0bits>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	1a18      	subs	r0, r3, r0
 8009cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cee:	1818      	adds	r0, r3, r0
 8009cf0:	0002      	movs	r2, r0
 8009cf2:	231f      	movs	r3, #31
 8009cf4:	401a      	ands	r2, r3
 8009cf6:	4218      	tst	r0, r3
 8009cf8:	d047      	beq.n	8009d8a <_dtoa_r+0x96a>
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	1a9b      	subs	r3, r3, r2
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	dd3f      	ble.n	8009d82 <_dtoa_r+0x962>
 8009d02:	231c      	movs	r3, #28
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d08:	18e4      	adds	r4, r4, r3
 8009d0a:	18d2      	adds	r2, r2, r3
 8009d0c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d10:	18d3      	adds	r3, r2, r3
 8009d12:	930c      	str	r3, [sp, #48]	; 0x30
 8009d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dd05      	ble.n	8009d26 <_dtoa_r+0x906>
 8009d1a:	001a      	movs	r2, r3
 8009d1c:	9905      	ldr	r1, [sp, #20]
 8009d1e:	9804      	ldr	r0, [sp, #16]
 8009d20:	f001 f866 	bl	800adf0 <__lshift>
 8009d24:	9005      	str	r0, [sp, #20]
 8009d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dd05      	ble.n	8009d38 <_dtoa_r+0x918>
 8009d2c:	0031      	movs	r1, r6
 8009d2e:	001a      	movs	r2, r3
 8009d30:	9804      	ldr	r0, [sp, #16]
 8009d32:	f001 f85d 	bl	800adf0 <__lshift>
 8009d36:	0006      	movs	r6, r0
 8009d38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d027      	beq.n	8009d8e <_dtoa_r+0x96e>
 8009d3e:	0031      	movs	r1, r6
 8009d40:	9805      	ldr	r0, [sp, #20]
 8009d42:	f001 f8c3 	bl	800aecc <__mcmp>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	da21      	bge.n	8009d8e <_dtoa_r+0x96e>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	220a      	movs	r2, #10
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	9905      	ldr	r1, [sp, #20]
 8009d54:	2300      	movs	r3, #0
 8009d56:	9804      	ldr	r0, [sp, #16]
 8009d58:	f000 fe4e 	bl	800a9f8 <__multadd>
 8009d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d5e:	9005      	str	r0, [sp, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d100      	bne.n	8009d66 <_dtoa_r+0x946>
 8009d64:	e15d      	b.n	800a022 <_dtoa_r+0xc02>
 8009d66:	2300      	movs	r3, #0
 8009d68:	0039      	movs	r1, r7
 8009d6a:	220a      	movs	r2, #10
 8009d6c:	9804      	ldr	r0, [sp, #16]
 8009d6e:	f000 fe43 	bl	800a9f8 <__multadd>
 8009d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d74:	0007      	movs	r7, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dc49      	bgt.n	8009e0e <_dtoa_r+0x9ee>
 8009d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	dc0e      	bgt.n	8009d9e <_dtoa_r+0x97e>
 8009d80:	e045      	b.n	8009e0e <_dtoa_r+0x9ee>
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d0c6      	beq.n	8009d14 <_dtoa_r+0x8f4>
 8009d86:	331c      	adds	r3, #28
 8009d88:	e7bd      	b.n	8009d06 <_dtoa_r+0x8e6>
 8009d8a:	0013      	movs	r3, r2
 8009d8c:	e7fb      	b.n	8009d86 <_dtoa_r+0x966>
 8009d8e:	9b07      	ldr	r3, [sp, #28]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc36      	bgt.n	8009e02 <_dtoa_r+0x9e2>
 8009d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	dd33      	ble.n	8009e02 <_dtoa_r+0x9e2>
 8009d9a:	9b07      	ldr	r3, [sp, #28]
 8009d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10c      	bne.n	8009dbe <_dtoa_r+0x99e>
 8009da4:	0031      	movs	r1, r6
 8009da6:	2205      	movs	r2, #5
 8009da8:	9804      	ldr	r0, [sp, #16]
 8009daa:	f000 fe25 	bl	800a9f8 <__multadd>
 8009dae:	0006      	movs	r6, r0
 8009db0:	0001      	movs	r1, r0
 8009db2:	9805      	ldr	r0, [sp, #20]
 8009db4:	f001 f88a 	bl	800aecc <__mcmp>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	dd00      	ble.n	8009dbe <_dtoa_r+0x99e>
 8009dbc:	e59f      	b.n	80098fe <_dtoa_r+0x4de>
 8009dbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	9b06      	ldr	r3, [sp, #24]
 8009dc6:	9308      	str	r3, [sp, #32]
 8009dc8:	2500      	movs	r5, #0
 8009dca:	0031      	movs	r1, r6
 8009dcc:	9804      	ldr	r0, [sp, #16]
 8009dce:	f000 fdef 	bl	800a9b0 <_Bfree>
 8009dd2:	2f00      	cmp	r7, #0
 8009dd4:	d100      	bne.n	8009dd8 <_dtoa_r+0x9b8>
 8009dd6:	e6a3      	b.n	8009b20 <_dtoa_r+0x700>
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	d005      	beq.n	8009de8 <_dtoa_r+0x9c8>
 8009ddc:	42bd      	cmp	r5, r7
 8009dde:	d003      	beq.n	8009de8 <_dtoa_r+0x9c8>
 8009de0:	0029      	movs	r1, r5
 8009de2:	9804      	ldr	r0, [sp, #16]
 8009de4:	f000 fde4 	bl	800a9b0 <_Bfree>
 8009de8:	0039      	movs	r1, r7
 8009dea:	9804      	ldr	r0, [sp, #16]
 8009dec:	f000 fde0 	bl	800a9b0 <_Bfree>
 8009df0:	e696      	b.n	8009b20 <_dtoa_r+0x700>
 8009df2:	2600      	movs	r6, #0
 8009df4:	0037      	movs	r7, r6
 8009df6:	e7e2      	b.n	8009dbe <_dtoa_r+0x99e>
 8009df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dfa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	0037      	movs	r7, r6
 8009e00:	e57d      	b.n	80098fe <_dtoa_r+0x4de>
 8009e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d100      	bne.n	8009e0a <_dtoa_r+0x9ea>
 8009e08:	e0c3      	b.n	8009f92 <_dtoa_r+0xb72>
 8009e0a:	9b07      	ldr	r3, [sp, #28]
 8009e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e0e:	2c00      	cmp	r4, #0
 8009e10:	dd05      	ble.n	8009e1e <_dtoa_r+0x9fe>
 8009e12:	0039      	movs	r1, r7
 8009e14:	0022      	movs	r2, r4
 8009e16:	9804      	ldr	r0, [sp, #16]
 8009e18:	f000 ffea 	bl	800adf0 <__lshift>
 8009e1c:	0007      	movs	r7, r0
 8009e1e:	0038      	movs	r0, r7
 8009e20:	2d00      	cmp	r5, #0
 8009e22:	d024      	beq.n	8009e6e <_dtoa_r+0xa4e>
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	9804      	ldr	r0, [sp, #16]
 8009e28:	f000 fd7e 	bl	800a928 <_Balloc>
 8009e2c:	1e04      	subs	r4, r0, #0
 8009e2e:	d111      	bne.n	8009e54 <_dtoa_r+0xa34>
 8009e30:	0022      	movs	r2, r4
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <_dtoa_r+0xa28>)
 8009e34:	4805      	ldr	r0, [pc, #20]	; (8009e4c <_dtoa_r+0xa2c>)
 8009e36:	4906      	ldr	r1, [pc, #24]	; (8009e50 <_dtoa_r+0xa30>)
 8009e38:	f7ff fb07 	bl	800944a <_dtoa_r+0x2a>
 8009e3c:	40240000 	.word	0x40240000
 8009e40:	00000433 	.word	0x00000433
 8009e44:	7ff00000 	.word	0x7ff00000
 8009e48:	0800bf86 	.word	0x0800bf86
 8009e4c:	0800bf2e 	.word	0x0800bf2e
 8009e50:	000002ef 	.word	0x000002ef
 8009e54:	0039      	movs	r1, r7
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	310c      	adds	r1, #12
 8009e5a:	3202      	adds	r2, #2
 8009e5c:	0092      	lsls	r2, r2, #2
 8009e5e:	300c      	adds	r0, #12
 8009e60:	f7ff fa3a 	bl	80092d8 <memcpy>
 8009e64:	2201      	movs	r2, #1
 8009e66:	0021      	movs	r1, r4
 8009e68:	9804      	ldr	r0, [sp, #16]
 8009e6a:	f000 ffc1 	bl	800adf0 <__lshift>
 8009e6e:	9b06      	ldr	r3, [sp, #24]
 8009e70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	189b      	adds	r3, r3, r2
 8009e78:	2201      	movs	r2, #1
 8009e7a:	003d      	movs	r5, r7
 8009e7c:	0007      	movs	r7, r0
 8009e7e:	930e      	str	r3, [sp, #56]	; 0x38
 8009e80:	9b08      	ldr	r3, [sp, #32]
 8009e82:	4013      	ands	r3, r2
 8009e84:	930d      	str	r3, [sp, #52]	; 0x34
 8009e86:	0031      	movs	r1, r6
 8009e88:	9805      	ldr	r0, [sp, #20]
 8009e8a:	f7ff fa39 	bl	8009300 <quorem>
 8009e8e:	0029      	movs	r1, r5
 8009e90:	0004      	movs	r4, r0
 8009e92:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e94:	9805      	ldr	r0, [sp, #20]
 8009e96:	f001 f819 	bl	800aecc <__mcmp>
 8009e9a:	003a      	movs	r2, r7
 8009e9c:	900c      	str	r0, [sp, #48]	; 0x30
 8009e9e:	0031      	movs	r1, r6
 8009ea0:	9804      	ldr	r0, [sp, #16]
 8009ea2:	f001 f82f 	bl	800af04 <__mdiff>
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	68c3      	ldr	r3, [r0, #12]
 8009eaa:	3430      	adds	r4, #48	; 0x30
 8009eac:	9008      	str	r0, [sp, #32]
 8009eae:	920a      	str	r2, [sp, #40]	; 0x28
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <_dtoa_r+0xa9e>
 8009eb4:	0001      	movs	r1, r0
 8009eb6:	9805      	ldr	r0, [sp, #20]
 8009eb8:	f001 f808 	bl	800aecc <__mcmp>
 8009ebc:	900a      	str	r0, [sp, #40]	; 0x28
 8009ebe:	9908      	ldr	r1, [sp, #32]
 8009ec0:	9804      	ldr	r0, [sp, #16]
 8009ec2:	f000 fd75 	bl	800a9b0 <_Bfree>
 8009ec6:	9b07      	ldr	r3, [sp, #28]
 8009ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eca:	3301      	adds	r3, #1
 8009ecc:	9308      	str	r3, [sp, #32]
 8009ece:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	d109      	bne.n	8009eec <_dtoa_r+0xacc>
 8009ed8:	2c39      	cmp	r4, #57	; 0x39
 8009eda:	d022      	beq.n	8009f22 <_dtoa_r+0xb02>
 8009edc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	dd01      	ble.n	8009ee6 <_dtoa_r+0xac6>
 8009ee2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009ee4:	3431      	adds	r4, #49	; 0x31
 8009ee6:	9b07      	ldr	r3, [sp, #28]
 8009ee8:	701c      	strb	r4, [r3, #0]
 8009eea:	e76e      	b.n	8009dca <_dtoa_r+0x9aa>
 8009eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	db04      	blt.n	8009efc <_dtoa_r+0xadc>
 8009ef2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	d11e      	bne.n	8009f3a <_dtoa_r+0xb1a>
 8009efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	ddf1      	ble.n	8009ee6 <_dtoa_r+0xac6>
 8009f02:	9905      	ldr	r1, [sp, #20]
 8009f04:	2201      	movs	r2, #1
 8009f06:	9804      	ldr	r0, [sp, #16]
 8009f08:	f000 ff72 	bl	800adf0 <__lshift>
 8009f0c:	0031      	movs	r1, r6
 8009f0e:	9005      	str	r0, [sp, #20]
 8009f10:	f000 ffdc 	bl	800aecc <__mcmp>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	dc02      	bgt.n	8009f1e <_dtoa_r+0xafe>
 8009f18:	d1e5      	bne.n	8009ee6 <_dtoa_r+0xac6>
 8009f1a:	07e3      	lsls	r3, r4, #31
 8009f1c:	d5e3      	bpl.n	8009ee6 <_dtoa_r+0xac6>
 8009f1e:	2c39      	cmp	r4, #57	; 0x39
 8009f20:	d1df      	bne.n	8009ee2 <_dtoa_r+0xac2>
 8009f22:	2339      	movs	r3, #57	; 0x39
 8009f24:	9a07      	ldr	r2, [sp, #28]
 8009f26:	7013      	strb	r3, [r2, #0]
 8009f28:	9b08      	ldr	r3, [sp, #32]
 8009f2a:	9308      	str	r3, [sp, #32]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	781a      	ldrb	r2, [r3, #0]
 8009f30:	2a39      	cmp	r2, #57	; 0x39
 8009f32:	d063      	beq.n	8009ffc <_dtoa_r+0xbdc>
 8009f34:	3201      	adds	r2, #1
 8009f36:	701a      	strb	r2, [r3, #0]
 8009f38:	e747      	b.n	8009dca <_dtoa_r+0x9aa>
 8009f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dd03      	ble.n	8009f48 <_dtoa_r+0xb28>
 8009f40:	2c39      	cmp	r4, #57	; 0x39
 8009f42:	d0ee      	beq.n	8009f22 <_dtoa_r+0xb02>
 8009f44:	3401      	adds	r4, #1
 8009f46:	e7ce      	b.n	8009ee6 <_dtoa_r+0xac6>
 8009f48:	9b07      	ldr	r3, [sp, #28]
 8009f4a:	9a07      	ldr	r2, [sp, #28]
 8009f4c:	701c      	strb	r4, [r3, #0]
 8009f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d03e      	beq.n	8009fd2 <_dtoa_r+0xbb2>
 8009f54:	2300      	movs	r3, #0
 8009f56:	220a      	movs	r2, #10
 8009f58:	9905      	ldr	r1, [sp, #20]
 8009f5a:	9804      	ldr	r0, [sp, #16]
 8009f5c:	f000 fd4c 	bl	800a9f8 <__multadd>
 8009f60:	2300      	movs	r3, #0
 8009f62:	9005      	str	r0, [sp, #20]
 8009f64:	220a      	movs	r2, #10
 8009f66:	0029      	movs	r1, r5
 8009f68:	9804      	ldr	r0, [sp, #16]
 8009f6a:	42bd      	cmp	r5, r7
 8009f6c:	d106      	bne.n	8009f7c <_dtoa_r+0xb5c>
 8009f6e:	f000 fd43 	bl	800a9f8 <__multadd>
 8009f72:	0005      	movs	r5, r0
 8009f74:	0007      	movs	r7, r0
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	9307      	str	r3, [sp, #28]
 8009f7a:	e784      	b.n	8009e86 <_dtoa_r+0xa66>
 8009f7c:	f000 fd3c 	bl	800a9f8 <__multadd>
 8009f80:	0039      	movs	r1, r7
 8009f82:	0005      	movs	r5, r0
 8009f84:	2300      	movs	r3, #0
 8009f86:	220a      	movs	r2, #10
 8009f88:	9804      	ldr	r0, [sp, #16]
 8009f8a:	f000 fd35 	bl	800a9f8 <__multadd>
 8009f8e:	0007      	movs	r7, r0
 8009f90:	e7f1      	b.n	8009f76 <_dtoa_r+0xb56>
 8009f92:	9b07      	ldr	r3, [sp, #28]
 8009f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f96:	2500      	movs	r5, #0
 8009f98:	0031      	movs	r1, r6
 8009f9a:	9805      	ldr	r0, [sp, #20]
 8009f9c:	f7ff f9b0 	bl	8009300 <quorem>
 8009fa0:	9b06      	ldr	r3, [sp, #24]
 8009fa2:	3030      	adds	r0, #48	; 0x30
 8009fa4:	5558      	strb	r0, [r3, r5]
 8009fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa8:	3501      	adds	r5, #1
 8009faa:	0004      	movs	r4, r0
 8009fac:	42ab      	cmp	r3, r5
 8009fae:	dd07      	ble.n	8009fc0 <_dtoa_r+0xba0>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	220a      	movs	r2, #10
 8009fb4:	9905      	ldr	r1, [sp, #20]
 8009fb6:	9804      	ldr	r0, [sp, #16]
 8009fb8:	f000 fd1e 	bl	800a9f8 <__multadd>
 8009fbc:	9005      	str	r0, [sp, #20]
 8009fbe:	e7eb      	b.n	8009f98 <_dtoa_r+0xb78>
 8009fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	2a00      	cmp	r2, #0
 8009fc6:	dd00      	ble.n	8009fca <_dtoa_r+0xbaa>
 8009fc8:	0013      	movs	r3, r2
 8009fca:	2500      	movs	r5, #0
 8009fcc:	9a06      	ldr	r2, [sp, #24]
 8009fce:	18d3      	adds	r3, r2, r3
 8009fd0:	9308      	str	r3, [sp, #32]
 8009fd2:	9905      	ldr	r1, [sp, #20]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	9804      	ldr	r0, [sp, #16]
 8009fd8:	f000 ff0a 	bl	800adf0 <__lshift>
 8009fdc:	0031      	movs	r1, r6
 8009fde:	9005      	str	r0, [sp, #20]
 8009fe0:	f000 ff74 	bl	800aecc <__mcmp>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	dc9f      	bgt.n	8009f28 <_dtoa_r+0xb08>
 8009fe8:	d101      	bne.n	8009fee <_dtoa_r+0xbce>
 8009fea:	07e4      	lsls	r4, r4, #31
 8009fec:	d49c      	bmi.n	8009f28 <_dtoa_r+0xb08>
 8009fee:	9b08      	ldr	r3, [sp, #32]
 8009ff0:	9308      	str	r3, [sp, #32]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	781a      	ldrb	r2, [r3, #0]
 8009ff6:	2a30      	cmp	r2, #48	; 0x30
 8009ff8:	d0fa      	beq.n	8009ff0 <_dtoa_r+0xbd0>
 8009ffa:	e6e6      	b.n	8009dca <_dtoa_r+0x9aa>
 8009ffc:	9a06      	ldr	r2, [sp, #24]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d193      	bne.n	8009f2a <_dtoa_r+0xb0a>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	3301      	adds	r3, #1
 800a006:	9303      	str	r3, [sp, #12]
 800a008:	2331      	movs	r3, #49	; 0x31
 800a00a:	7013      	strb	r3, [r2, #0]
 800a00c:	e6dd      	b.n	8009dca <_dtoa_r+0x9aa>
 800a00e:	4b09      	ldr	r3, [pc, #36]	; (800a034 <_dtoa_r+0xc14>)
 800a010:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a012:	9306      	str	r3, [sp, #24]
 800a014:	4b08      	ldr	r3, [pc, #32]	; (800a038 <_dtoa_r+0xc18>)
 800a016:	2a00      	cmp	r2, #0
 800a018:	d001      	beq.n	800a01e <_dtoa_r+0xbfe>
 800a01a:	f7ff fa49 	bl	80094b0 <_dtoa_r+0x90>
 800a01e:	f7ff fa49 	bl	80094b4 <_dtoa_r+0x94>
 800a022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a024:	2b00      	cmp	r3, #0
 800a026:	dcb6      	bgt.n	8009f96 <_dtoa_r+0xb76>
 800a028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	dd00      	ble.n	800a030 <_dtoa_r+0xc10>
 800a02e:	e6b6      	b.n	8009d9e <_dtoa_r+0x97e>
 800a030:	e7b1      	b.n	8009f96 <_dtoa_r+0xb76>
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	0800bf0a 	.word	0x0800bf0a
 800a038:	0800bf12 	.word	0x0800bf12

0800a03c <_free_r>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	0005      	movs	r5, r0
 800a040:	2900      	cmp	r1, #0
 800a042:	d010      	beq.n	800a066 <_free_r+0x2a>
 800a044:	1f0c      	subs	r4, r1, #4
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	da00      	bge.n	800a04e <_free_r+0x12>
 800a04c:	18e4      	adds	r4, r4, r3
 800a04e:	0028      	movs	r0, r5
 800a050:	f000 fc5a 	bl	800a908 <__malloc_lock>
 800a054:	4a1d      	ldr	r2, [pc, #116]	; (800a0cc <_free_r+0x90>)
 800a056:	6813      	ldr	r3, [r2, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <_free_r+0x2c>
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	6014      	str	r4, [r2, #0]
 800a060:	0028      	movs	r0, r5
 800a062:	f000 fc59 	bl	800a918 <__malloc_unlock>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d908      	bls.n	800a07e <_free_r+0x42>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	1821      	adds	r1, r4, r0
 800a070:	428b      	cmp	r3, r1
 800a072:	d1f3      	bne.n	800a05c <_free_r+0x20>
 800a074:	6819      	ldr	r1, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	1809      	adds	r1, r1, r0
 800a07a:	6021      	str	r1, [r4, #0]
 800a07c:	e7ee      	b.n	800a05c <_free_r+0x20>
 800a07e:	001a      	movs	r2, r3
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <_free_r+0x4e>
 800a086:	42a3      	cmp	r3, r4
 800a088:	d9f9      	bls.n	800a07e <_free_r+0x42>
 800a08a:	6811      	ldr	r1, [r2, #0]
 800a08c:	1850      	adds	r0, r2, r1
 800a08e:	42a0      	cmp	r0, r4
 800a090:	d10b      	bne.n	800a0aa <_free_r+0x6e>
 800a092:	6820      	ldr	r0, [r4, #0]
 800a094:	1809      	adds	r1, r1, r0
 800a096:	1850      	adds	r0, r2, r1
 800a098:	6011      	str	r1, [r2, #0]
 800a09a:	4283      	cmp	r3, r0
 800a09c:	d1e0      	bne.n	800a060 <_free_r+0x24>
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	1841      	adds	r1, r0, r1
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	6053      	str	r3, [r2, #4]
 800a0a8:	e7da      	b.n	800a060 <_free_r+0x24>
 800a0aa:	42a0      	cmp	r0, r4
 800a0ac:	d902      	bls.n	800a0b4 <_free_r+0x78>
 800a0ae:	230c      	movs	r3, #12
 800a0b0:	602b      	str	r3, [r5, #0]
 800a0b2:	e7d5      	b.n	800a060 <_free_r+0x24>
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	1821      	adds	r1, r4, r0
 800a0b8:	428b      	cmp	r3, r1
 800a0ba:	d103      	bne.n	800a0c4 <_free_r+0x88>
 800a0bc:	6819      	ldr	r1, [r3, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	1809      	adds	r1, r1, r0
 800a0c2:	6021      	str	r1, [r4, #0]
 800a0c4:	6063      	str	r3, [r4, #4]
 800a0c6:	6054      	str	r4, [r2, #4]
 800a0c8:	e7ca      	b.n	800a060 <_free_r+0x24>
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	200008a4 	.word	0x200008a4

0800a0d0 <rshift>:
 800a0d0:	0002      	movs	r2, r0
 800a0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d4:	6904      	ldr	r4, [r0, #16]
 800a0d6:	114b      	asrs	r3, r1, #5
 800a0d8:	b085      	sub	sp, #20
 800a0da:	3214      	adds	r2, #20
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	114d      	asrs	r5, r1, #5
 800a0e0:	0013      	movs	r3, r2
 800a0e2:	42ac      	cmp	r4, r5
 800a0e4:	dd32      	ble.n	800a14c <rshift+0x7c>
 800a0e6:	261f      	movs	r6, #31
 800a0e8:	000f      	movs	r7, r1
 800a0ea:	114b      	asrs	r3, r1, #5
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	00a5      	lsls	r5, r4, #2
 800a0f0:	18d3      	adds	r3, r2, r3
 800a0f2:	4037      	ands	r7, r6
 800a0f4:	1955      	adds	r5, r2, r5
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	9701      	str	r7, [sp, #4]
 800a0fa:	4231      	tst	r1, r6
 800a0fc:	d10d      	bne.n	800a11a <rshift+0x4a>
 800a0fe:	0016      	movs	r6, r2
 800a100:	0019      	movs	r1, r3
 800a102:	428d      	cmp	r5, r1
 800a104:	d836      	bhi.n	800a174 <rshift+0xa4>
 800a106:	9900      	ldr	r1, [sp, #0]
 800a108:	2300      	movs	r3, #0
 800a10a:	3903      	subs	r1, #3
 800a10c:	428d      	cmp	r5, r1
 800a10e:	d302      	bcc.n	800a116 <rshift+0x46>
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	1ae4      	subs	r4, r4, r3
 800a114:	00a3      	lsls	r3, r4, #2
 800a116:	18d3      	adds	r3, r2, r3
 800a118:	e018      	b.n	800a14c <rshift+0x7c>
 800a11a:	2120      	movs	r1, #32
 800a11c:	9e01      	ldr	r6, [sp, #4]
 800a11e:	9f01      	ldr	r7, [sp, #4]
 800a120:	1b89      	subs	r1, r1, r6
 800a122:	9e00      	ldr	r6, [sp, #0]
 800a124:	9103      	str	r1, [sp, #12]
 800a126:	ce02      	ldmia	r6!, {r1}
 800a128:	4694      	mov	ip, r2
 800a12a:	40f9      	lsrs	r1, r7
 800a12c:	42b5      	cmp	r5, r6
 800a12e:	d816      	bhi.n	800a15e <rshift+0x8e>
 800a130:	9e00      	ldr	r6, [sp, #0]
 800a132:	2300      	movs	r3, #0
 800a134:	3601      	adds	r6, #1
 800a136:	42b5      	cmp	r5, r6
 800a138:	d303      	bcc.n	800a142 <rshift+0x72>
 800a13a:	9b02      	ldr	r3, [sp, #8]
 800a13c:	1ae3      	subs	r3, r4, r3
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	3b04      	subs	r3, #4
 800a142:	18d3      	adds	r3, r2, r3
 800a144:	6019      	str	r1, [r3, #0]
 800a146:	2900      	cmp	r1, #0
 800a148:	d000      	beq.n	800a14c <rshift+0x7c>
 800a14a:	3304      	adds	r3, #4
 800a14c:	1a99      	subs	r1, r3, r2
 800a14e:	1089      	asrs	r1, r1, #2
 800a150:	6101      	str	r1, [r0, #16]
 800a152:	4293      	cmp	r3, r2
 800a154:	d101      	bne.n	800a15a <rshift+0x8a>
 800a156:	2300      	movs	r3, #0
 800a158:	6143      	str	r3, [r0, #20]
 800a15a:	b005      	add	sp, #20
 800a15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a15e:	6837      	ldr	r7, [r6, #0]
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	409f      	lsls	r7, r3
 800a164:	430f      	orrs	r7, r1
 800a166:	4661      	mov	r1, ip
 800a168:	c180      	stmia	r1!, {r7}
 800a16a:	468c      	mov	ip, r1
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	ce02      	ldmia	r6!, {r1}
 800a170:	40d9      	lsrs	r1, r3
 800a172:	e7db      	b.n	800a12c <rshift+0x5c>
 800a174:	c980      	ldmia	r1!, {r7}
 800a176:	c680      	stmia	r6!, {r7}
 800a178:	e7c3      	b.n	800a102 <rshift+0x32>

0800a17a <__hexdig_fun>:
 800a17a:	0002      	movs	r2, r0
 800a17c:	3a30      	subs	r2, #48	; 0x30
 800a17e:	0003      	movs	r3, r0
 800a180:	2a09      	cmp	r2, #9
 800a182:	d802      	bhi.n	800a18a <__hexdig_fun+0x10>
 800a184:	3b20      	subs	r3, #32
 800a186:	b2d8      	uxtb	r0, r3
 800a188:	4770      	bx	lr
 800a18a:	0002      	movs	r2, r0
 800a18c:	3a61      	subs	r2, #97	; 0x61
 800a18e:	2a05      	cmp	r2, #5
 800a190:	d801      	bhi.n	800a196 <__hexdig_fun+0x1c>
 800a192:	3b47      	subs	r3, #71	; 0x47
 800a194:	e7f7      	b.n	800a186 <__hexdig_fun+0xc>
 800a196:	001a      	movs	r2, r3
 800a198:	3a41      	subs	r2, #65	; 0x41
 800a19a:	2000      	movs	r0, #0
 800a19c:	2a05      	cmp	r2, #5
 800a19e:	d8f3      	bhi.n	800a188 <__hexdig_fun+0xe>
 800a1a0:	3b27      	subs	r3, #39	; 0x27
 800a1a2:	e7f0      	b.n	800a186 <__hexdig_fun+0xc>

0800a1a4 <__gethex>:
 800a1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1a6:	b089      	sub	sp, #36	; 0x24
 800a1a8:	9307      	str	r3, [sp, #28]
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	9201      	str	r2, [sp, #4]
 800a1ae:	680a      	ldr	r2, [r1, #0]
 800a1b0:	425b      	negs	r3, r3
 800a1b2:	9003      	str	r0, [sp, #12]
 800a1b4:	9106      	str	r1, [sp, #24]
 800a1b6:	1c96      	adds	r6, r2, #2
 800a1b8:	1a9b      	subs	r3, r3, r2
 800a1ba:	199a      	adds	r2, r3, r6
 800a1bc:	9600      	str	r6, [sp, #0]
 800a1be:	9205      	str	r2, [sp, #20]
 800a1c0:	9a00      	ldr	r2, [sp, #0]
 800a1c2:	3601      	adds	r6, #1
 800a1c4:	7810      	ldrb	r0, [r2, #0]
 800a1c6:	2830      	cmp	r0, #48	; 0x30
 800a1c8:	d0f7      	beq.n	800a1ba <__gethex+0x16>
 800a1ca:	f7ff ffd6 	bl	800a17a <__hexdig_fun>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	001d      	movs	r5, r3
 800a1d2:	9302      	str	r3, [sp, #8]
 800a1d4:	4298      	cmp	r0, r3
 800a1d6:	d11d      	bne.n	800a214 <__gethex+0x70>
 800a1d8:	2201      	movs	r2, #1
 800a1da:	49a6      	ldr	r1, [pc, #664]	; (800a474 <__gethex+0x2d0>)
 800a1dc:	9800      	ldr	r0, [sp, #0]
 800a1de:	f7fe ffdf 	bl	80091a0 <strncmp>
 800a1e2:	0007      	movs	r7, r0
 800a1e4:	42a8      	cmp	r0, r5
 800a1e6:	d169      	bne.n	800a2bc <__gethex+0x118>
 800a1e8:	9b00      	ldr	r3, [sp, #0]
 800a1ea:	0034      	movs	r4, r6
 800a1ec:	7858      	ldrb	r0, [r3, #1]
 800a1ee:	f7ff ffc4 	bl	800a17a <__hexdig_fun>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	9302      	str	r3, [sp, #8]
 800a1f6:	42a8      	cmp	r0, r5
 800a1f8:	d02f      	beq.n	800a25a <__gethex+0xb6>
 800a1fa:	9600      	str	r6, [sp, #0]
 800a1fc:	9b00      	ldr	r3, [sp, #0]
 800a1fe:	7818      	ldrb	r0, [r3, #0]
 800a200:	2830      	cmp	r0, #48	; 0x30
 800a202:	d009      	beq.n	800a218 <__gethex+0x74>
 800a204:	f7ff ffb9 	bl	800a17a <__hexdig_fun>
 800a208:	4242      	negs	r2, r0
 800a20a:	4142      	adcs	r2, r0
 800a20c:	2301      	movs	r3, #1
 800a20e:	0035      	movs	r5, r6
 800a210:	9202      	str	r2, [sp, #8]
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	9c00      	ldr	r4, [sp, #0]
 800a216:	e004      	b.n	800a222 <__gethex+0x7e>
 800a218:	9b00      	ldr	r3, [sp, #0]
 800a21a:	3301      	adds	r3, #1
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	e7ed      	b.n	800a1fc <__gethex+0x58>
 800a220:	3401      	adds	r4, #1
 800a222:	7820      	ldrb	r0, [r4, #0]
 800a224:	f7ff ffa9 	bl	800a17a <__hexdig_fun>
 800a228:	1e07      	subs	r7, r0, #0
 800a22a:	d1f9      	bne.n	800a220 <__gethex+0x7c>
 800a22c:	2201      	movs	r2, #1
 800a22e:	0020      	movs	r0, r4
 800a230:	4990      	ldr	r1, [pc, #576]	; (800a474 <__gethex+0x2d0>)
 800a232:	f7fe ffb5 	bl	80091a0 <strncmp>
 800a236:	2800      	cmp	r0, #0
 800a238:	d10d      	bne.n	800a256 <__gethex+0xb2>
 800a23a:	2d00      	cmp	r5, #0
 800a23c:	d106      	bne.n	800a24c <__gethex+0xa8>
 800a23e:	3401      	adds	r4, #1
 800a240:	0025      	movs	r5, r4
 800a242:	7820      	ldrb	r0, [r4, #0]
 800a244:	f7ff ff99 	bl	800a17a <__hexdig_fun>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d102      	bne.n	800a252 <__gethex+0xae>
 800a24c:	1b2d      	subs	r5, r5, r4
 800a24e:	00af      	lsls	r7, r5, #2
 800a250:	e003      	b.n	800a25a <__gethex+0xb6>
 800a252:	3401      	adds	r4, #1
 800a254:	e7f5      	b.n	800a242 <__gethex+0x9e>
 800a256:	2d00      	cmp	r5, #0
 800a258:	d1f8      	bne.n	800a24c <__gethex+0xa8>
 800a25a:	2220      	movs	r2, #32
 800a25c:	7823      	ldrb	r3, [r4, #0]
 800a25e:	0026      	movs	r6, r4
 800a260:	4393      	bics	r3, r2
 800a262:	2b50      	cmp	r3, #80	; 0x50
 800a264:	d11d      	bne.n	800a2a2 <__gethex+0xfe>
 800a266:	7863      	ldrb	r3, [r4, #1]
 800a268:	2b2b      	cmp	r3, #43	; 0x2b
 800a26a:	d02c      	beq.n	800a2c6 <__gethex+0x122>
 800a26c:	2b2d      	cmp	r3, #45	; 0x2d
 800a26e:	d02e      	beq.n	800a2ce <__gethex+0x12a>
 800a270:	2300      	movs	r3, #0
 800a272:	1c66      	adds	r6, r4, #1
 800a274:	9304      	str	r3, [sp, #16]
 800a276:	7830      	ldrb	r0, [r6, #0]
 800a278:	f7ff ff7f 	bl	800a17a <__hexdig_fun>
 800a27c:	1e43      	subs	r3, r0, #1
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b18      	cmp	r3, #24
 800a282:	d82b      	bhi.n	800a2dc <__gethex+0x138>
 800a284:	3810      	subs	r0, #16
 800a286:	0005      	movs	r5, r0
 800a288:	7870      	ldrb	r0, [r6, #1]
 800a28a:	f7ff ff76 	bl	800a17a <__hexdig_fun>
 800a28e:	1e43      	subs	r3, r0, #1
 800a290:	b2db      	uxtb	r3, r3
 800a292:	3601      	adds	r6, #1
 800a294:	2b18      	cmp	r3, #24
 800a296:	d91c      	bls.n	800a2d2 <__gethex+0x12e>
 800a298:	9b04      	ldr	r3, [sp, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d000      	beq.n	800a2a0 <__gethex+0xfc>
 800a29e:	426d      	negs	r5, r5
 800a2a0:	197f      	adds	r7, r7, r5
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	601e      	str	r6, [r3, #0]
 800a2a6:	9b02      	ldr	r3, [sp, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d019      	beq.n	800a2e0 <__gethex+0x13c>
 800a2ac:	2600      	movs	r6, #0
 800a2ae:	9b05      	ldr	r3, [sp, #20]
 800a2b0:	42b3      	cmp	r3, r6
 800a2b2:	d100      	bne.n	800a2b6 <__gethex+0x112>
 800a2b4:	3606      	adds	r6, #6
 800a2b6:	0030      	movs	r0, r6
 800a2b8:	b009      	add	sp, #36	; 0x24
 800a2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2bc:	2301      	movs	r3, #1
 800a2be:	2700      	movs	r7, #0
 800a2c0:	9c00      	ldr	r4, [sp, #0]
 800a2c2:	9302      	str	r3, [sp, #8]
 800a2c4:	e7c9      	b.n	800a25a <__gethex+0xb6>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	1ca6      	adds	r6, r4, #2
 800a2cc:	e7d3      	b.n	800a276 <__gethex+0xd2>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e7fa      	b.n	800a2c8 <__gethex+0x124>
 800a2d2:	230a      	movs	r3, #10
 800a2d4:	435d      	muls	r5, r3
 800a2d6:	182d      	adds	r5, r5, r0
 800a2d8:	3d10      	subs	r5, #16
 800a2da:	e7d5      	b.n	800a288 <__gethex+0xe4>
 800a2dc:	0026      	movs	r6, r4
 800a2de:	e7e0      	b.n	800a2a2 <__gethex+0xfe>
 800a2e0:	9b00      	ldr	r3, [sp, #0]
 800a2e2:	9902      	ldr	r1, [sp, #8]
 800a2e4:	1ae3      	subs	r3, r4, r3
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	2b07      	cmp	r3, #7
 800a2ea:	dc0a      	bgt.n	800a302 <__gethex+0x15e>
 800a2ec:	9803      	ldr	r0, [sp, #12]
 800a2ee:	f000 fb1b 	bl	800a928 <_Balloc>
 800a2f2:	1e05      	subs	r5, r0, #0
 800a2f4:	d108      	bne.n	800a308 <__gethex+0x164>
 800a2f6:	002a      	movs	r2, r5
 800a2f8:	21e4      	movs	r1, #228	; 0xe4
 800a2fa:	4b5f      	ldr	r3, [pc, #380]	; (800a478 <__gethex+0x2d4>)
 800a2fc:	485f      	ldr	r0, [pc, #380]	; (800a47c <__gethex+0x2d8>)
 800a2fe:	f001 fbe7 	bl	800bad0 <__assert_func>
 800a302:	3101      	adds	r1, #1
 800a304:	105b      	asrs	r3, r3, #1
 800a306:	e7ef      	b.n	800a2e8 <__gethex+0x144>
 800a308:	0003      	movs	r3, r0
 800a30a:	3314      	adds	r3, #20
 800a30c:	9302      	str	r3, [sp, #8]
 800a30e:	9305      	str	r3, [sp, #20]
 800a310:	2300      	movs	r3, #0
 800a312:	001e      	movs	r6, r3
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	9b00      	ldr	r3, [sp, #0]
 800a318:	42a3      	cmp	r3, r4
 800a31a:	d33f      	bcc.n	800a39c <__gethex+0x1f8>
 800a31c:	9c05      	ldr	r4, [sp, #20]
 800a31e:	9b02      	ldr	r3, [sp, #8]
 800a320:	c440      	stmia	r4!, {r6}
 800a322:	1ae4      	subs	r4, r4, r3
 800a324:	10a4      	asrs	r4, r4, #2
 800a326:	0030      	movs	r0, r6
 800a328:	612c      	str	r4, [r5, #16]
 800a32a:	f000 fbf5 	bl	800ab18 <__hi0bits>
 800a32e:	9b01      	ldr	r3, [sp, #4]
 800a330:	0164      	lsls	r4, r4, #5
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	1a26      	subs	r6, r4, r0
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	429e      	cmp	r6, r3
 800a33a:	dd51      	ble.n	800a3e0 <__gethex+0x23c>
 800a33c:	1af6      	subs	r6, r6, r3
 800a33e:	0031      	movs	r1, r6
 800a340:	0028      	movs	r0, r5
 800a342:	f000 ff89 	bl	800b258 <__any_on>
 800a346:	1e04      	subs	r4, r0, #0
 800a348:	d016      	beq.n	800a378 <__gethex+0x1d4>
 800a34a:	2401      	movs	r4, #1
 800a34c:	231f      	movs	r3, #31
 800a34e:	0020      	movs	r0, r4
 800a350:	1e72      	subs	r2, r6, #1
 800a352:	4013      	ands	r3, r2
 800a354:	4098      	lsls	r0, r3
 800a356:	0003      	movs	r3, r0
 800a358:	1151      	asrs	r1, r2, #5
 800a35a:	9802      	ldr	r0, [sp, #8]
 800a35c:	0089      	lsls	r1, r1, #2
 800a35e:	5809      	ldr	r1, [r1, r0]
 800a360:	4219      	tst	r1, r3
 800a362:	d009      	beq.n	800a378 <__gethex+0x1d4>
 800a364:	42a2      	cmp	r2, r4
 800a366:	dd06      	ble.n	800a376 <__gethex+0x1d2>
 800a368:	0028      	movs	r0, r5
 800a36a:	1eb1      	subs	r1, r6, #2
 800a36c:	f000 ff74 	bl	800b258 <__any_on>
 800a370:	3402      	adds	r4, #2
 800a372:	2800      	cmp	r0, #0
 800a374:	d100      	bne.n	800a378 <__gethex+0x1d4>
 800a376:	2402      	movs	r4, #2
 800a378:	0031      	movs	r1, r6
 800a37a:	0028      	movs	r0, r5
 800a37c:	f7ff fea8 	bl	800a0d0 <rshift>
 800a380:	19bf      	adds	r7, r7, r6
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	42bb      	cmp	r3, r7
 800a388:	da3a      	bge.n	800a400 <__gethex+0x25c>
 800a38a:	0029      	movs	r1, r5
 800a38c:	9803      	ldr	r0, [sp, #12]
 800a38e:	f000 fb0f 	bl	800a9b0 <_Bfree>
 800a392:	2300      	movs	r3, #0
 800a394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a396:	26a3      	movs	r6, #163	; 0xa3
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	e78c      	b.n	800a2b6 <__gethex+0x112>
 800a39c:	3c01      	subs	r4, #1
 800a39e:	7823      	ldrb	r3, [r4, #0]
 800a3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a2:	d012      	beq.n	800a3ca <__gethex+0x226>
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d104      	bne.n	800a3b4 <__gethex+0x210>
 800a3aa:	9b05      	ldr	r3, [sp, #20]
 800a3ac:	c340      	stmia	r3!, {r6}
 800a3ae:	2600      	movs	r6, #0
 800a3b0:	9305      	str	r3, [sp, #20]
 800a3b2:	9604      	str	r6, [sp, #16]
 800a3b4:	7820      	ldrb	r0, [r4, #0]
 800a3b6:	f7ff fee0 	bl	800a17a <__hexdig_fun>
 800a3ba:	230f      	movs	r3, #15
 800a3bc:	4018      	ands	r0, r3
 800a3be:	9b04      	ldr	r3, [sp, #16]
 800a3c0:	4098      	lsls	r0, r3
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	4306      	orrs	r6, r0
 800a3c6:	9304      	str	r3, [sp, #16]
 800a3c8:	e7a5      	b.n	800a316 <__gethex+0x172>
 800a3ca:	9b00      	ldr	r3, [sp, #0]
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	d8e9      	bhi.n	800a3a4 <__gethex+0x200>
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	0020      	movs	r0, r4
 800a3d4:	4927      	ldr	r1, [pc, #156]	; (800a474 <__gethex+0x2d0>)
 800a3d6:	f7fe fee3 	bl	80091a0 <strncmp>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	d1e2      	bne.n	800a3a4 <__gethex+0x200>
 800a3de:	e79a      	b.n	800a316 <__gethex+0x172>
 800a3e0:	9b00      	ldr	r3, [sp, #0]
 800a3e2:	2400      	movs	r4, #0
 800a3e4:	429e      	cmp	r6, r3
 800a3e6:	dacc      	bge.n	800a382 <__gethex+0x1de>
 800a3e8:	1b9e      	subs	r6, r3, r6
 800a3ea:	0029      	movs	r1, r5
 800a3ec:	0032      	movs	r2, r6
 800a3ee:	9803      	ldr	r0, [sp, #12]
 800a3f0:	f000 fcfe 	bl	800adf0 <__lshift>
 800a3f4:	0003      	movs	r3, r0
 800a3f6:	3314      	adds	r3, #20
 800a3f8:	0005      	movs	r5, r0
 800a3fa:	1bbf      	subs	r7, r7, r6
 800a3fc:	9302      	str	r3, [sp, #8]
 800a3fe:	e7c0      	b.n	800a382 <__gethex+0x1de>
 800a400:	9b01      	ldr	r3, [sp, #4]
 800a402:	685e      	ldr	r6, [r3, #4]
 800a404:	42be      	cmp	r6, r7
 800a406:	dd70      	ble.n	800a4ea <__gethex+0x346>
 800a408:	9b00      	ldr	r3, [sp, #0]
 800a40a:	1bf6      	subs	r6, r6, r7
 800a40c:	42b3      	cmp	r3, r6
 800a40e:	dc37      	bgt.n	800a480 <__gethex+0x2dc>
 800a410:	9b01      	ldr	r3, [sp, #4]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d024      	beq.n	800a462 <__gethex+0x2be>
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d026      	beq.n	800a46a <__gethex+0x2c6>
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d117      	bne.n	800a450 <__gethex+0x2ac>
 800a420:	9b00      	ldr	r3, [sp, #0]
 800a422:	42b3      	cmp	r3, r6
 800a424:	d114      	bne.n	800a450 <__gethex+0x2ac>
 800a426:	2b01      	cmp	r3, #1
 800a428:	d10b      	bne.n	800a442 <__gethex+0x29e>
 800a42a:	9b01      	ldr	r3, [sp, #4]
 800a42c:	9a07      	ldr	r2, [sp, #28]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	2662      	movs	r6, #98	; 0x62
 800a432:	6013      	str	r3, [r2, #0]
 800a434:	2301      	movs	r3, #1
 800a436:	9a02      	ldr	r2, [sp, #8]
 800a438:	612b      	str	r3, [r5, #16]
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a43e:	601d      	str	r5, [r3, #0]
 800a440:	e739      	b.n	800a2b6 <__gethex+0x112>
 800a442:	9900      	ldr	r1, [sp, #0]
 800a444:	0028      	movs	r0, r5
 800a446:	3901      	subs	r1, #1
 800a448:	f000 ff06 	bl	800b258 <__any_on>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d1ec      	bne.n	800a42a <__gethex+0x286>
 800a450:	0029      	movs	r1, r5
 800a452:	9803      	ldr	r0, [sp, #12]
 800a454:	f000 faac 	bl	800a9b0 <_Bfree>
 800a458:	2300      	movs	r3, #0
 800a45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a45c:	2650      	movs	r6, #80	; 0x50
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	e729      	b.n	800a2b6 <__gethex+0x112>
 800a462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f3      	bne.n	800a450 <__gethex+0x2ac>
 800a468:	e7df      	b.n	800a42a <__gethex+0x286>
 800a46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1dc      	bne.n	800a42a <__gethex+0x286>
 800a470:	e7ee      	b.n	800a450 <__gethex+0x2ac>
 800a472:	46c0      	nop			; (mov r8, r8)
 800a474:	0800bd70 	.word	0x0800bd70
 800a478:	0800bf86 	.word	0x0800bf86
 800a47c:	0800bf97 	.word	0x0800bf97
 800a480:	1e77      	subs	r7, r6, #1
 800a482:	2c00      	cmp	r4, #0
 800a484:	d12f      	bne.n	800a4e6 <__gethex+0x342>
 800a486:	2f00      	cmp	r7, #0
 800a488:	d004      	beq.n	800a494 <__gethex+0x2f0>
 800a48a:	0039      	movs	r1, r7
 800a48c:	0028      	movs	r0, r5
 800a48e:	f000 fee3 	bl	800b258 <__any_on>
 800a492:	0004      	movs	r4, r0
 800a494:	231f      	movs	r3, #31
 800a496:	117a      	asrs	r2, r7, #5
 800a498:	401f      	ands	r7, r3
 800a49a:	3b1e      	subs	r3, #30
 800a49c:	40bb      	lsls	r3, r7
 800a49e:	9902      	ldr	r1, [sp, #8]
 800a4a0:	0092      	lsls	r2, r2, #2
 800a4a2:	5852      	ldr	r2, [r2, r1]
 800a4a4:	421a      	tst	r2, r3
 800a4a6:	d001      	beq.n	800a4ac <__gethex+0x308>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	431c      	orrs	r4, r3
 800a4ac:	9b00      	ldr	r3, [sp, #0]
 800a4ae:	0031      	movs	r1, r6
 800a4b0:	1b9b      	subs	r3, r3, r6
 800a4b2:	2602      	movs	r6, #2
 800a4b4:	0028      	movs	r0, r5
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	f7ff fe0a 	bl	800a0d0 <rshift>
 800a4bc:	9b01      	ldr	r3, [sp, #4]
 800a4be:	685f      	ldr	r7, [r3, #4]
 800a4c0:	2c00      	cmp	r4, #0
 800a4c2:	d041      	beq.n	800a548 <__gethex+0x3a4>
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d010      	beq.n	800a4ee <__gethex+0x34a>
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d012      	beq.n	800a4f6 <__gethex+0x352>
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d106      	bne.n	800a4e2 <__gethex+0x33e>
 800a4d4:	07a2      	lsls	r2, r4, #30
 800a4d6:	d504      	bpl.n	800a4e2 <__gethex+0x33e>
 800a4d8:	9a02      	ldr	r2, [sp, #8]
 800a4da:	6812      	ldr	r2, [r2, #0]
 800a4dc:	4314      	orrs	r4, r2
 800a4de:	421c      	tst	r4, r3
 800a4e0:	d10c      	bne.n	800a4fc <__gethex+0x358>
 800a4e2:	2310      	movs	r3, #16
 800a4e4:	e02f      	b.n	800a546 <__gethex+0x3a2>
 800a4e6:	2401      	movs	r4, #1
 800a4e8:	e7d4      	b.n	800a494 <__gethex+0x2f0>
 800a4ea:	2601      	movs	r6, #1
 800a4ec:	e7e8      	b.n	800a4c0 <__gethex+0x31c>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4f2:	1a9b      	subs	r3, r3, r2
 800a4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0f2      	beq.n	800a4e2 <__gethex+0x33e>
 800a4fc:	692b      	ldr	r3, [r5, #16]
 800a4fe:	2000      	movs	r0, #0
 800a500:	9302      	str	r3, [sp, #8]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	9304      	str	r3, [sp, #16]
 800a506:	002b      	movs	r3, r5
 800a508:	9a04      	ldr	r2, [sp, #16]
 800a50a:	3314      	adds	r3, #20
 800a50c:	1899      	adds	r1, r3, r2
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	1c54      	adds	r4, r2, #1
 800a512:	d01e      	beq.n	800a552 <__gethex+0x3ae>
 800a514:	3201      	adds	r2, #1
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	002b      	movs	r3, r5
 800a51a:	3314      	adds	r3, #20
 800a51c:	2e02      	cmp	r6, #2
 800a51e:	d141      	bne.n	800a5a4 <__gethex+0x400>
 800a520:	9a01      	ldr	r2, [sp, #4]
 800a522:	9900      	ldr	r1, [sp, #0]
 800a524:	6812      	ldr	r2, [r2, #0]
 800a526:	3a01      	subs	r2, #1
 800a528:	428a      	cmp	r2, r1
 800a52a:	d10b      	bne.n	800a544 <__gethex+0x3a0>
 800a52c:	221f      	movs	r2, #31
 800a52e:	9800      	ldr	r0, [sp, #0]
 800a530:	1149      	asrs	r1, r1, #5
 800a532:	4002      	ands	r2, r0
 800a534:	2001      	movs	r0, #1
 800a536:	0004      	movs	r4, r0
 800a538:	4094      	lsls	r4, r2
 800a53a:	0089      	lsls	r1, r1, #2
 800a53c:	58cb      	ldr	r3, [r1, r3]
 800a53e:	4223      	tst	r3, r4
 800a540:	d000      	beq.n	800a544 <__gethex+0x3a0>
 800a542:	2601      	movs	r6, #1
 800a544:	2320      	movs	r3, #32
 800a546:	431e      	orrs	r6, r3
 800a548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a54a:	601d      	str	r5, [r3, #0]
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	601f      	str	r7, [r3, #0]
 800a550:	e6b1      	b.n	800a2b6 <__gethex+0x112>
 800a552:	c301      	stmia	r3!, {r0}
 800a554:	4299      	cmp	r1, r3
 800a556:	d8da      	bhi.n	800a50e <__gethex+0x36a>
 800a558:	68ab      	ldr	r3, [r5, #8]
 800a55a:	9a02      	ldr	r2, [sp, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	db18      	blt.n	800a592 <__gethex+0x3ee>
 800a560:	6869      	ldr	r1, [r5, #4]
 800a562:	9803      	ldr	r0, [sp, #12]
 800a564:	3101      	adds	r1, #1
 800a566:	f000 f9df 	bl	800a928 <_Balloc>
 800a56a:	1e04      	subs	r4, r0, #0
 800a56c:	d104      	bne.n	800a578 <__gethex+0x3d4>
 800a56e:	0022      	movs	r2, r4
 800a570:	2184      	movs	r1, #132	; 0x84
 800a572:	4b1c      	ldr	r3, [pc, #112]	; (800a5e4 <__gethex+0x440>)
 800a574:	481c      	ldr	r0, [pc, #112]	; (800a5e8 <__gethex+0x444>)
 800a576:	e6c2      	b.n	800a2fe <__gethex+0x15a>
 800a578:	0029      	movs	r1, r5
 800a57a:	692a      	ldr	r2, [r5, #16]
 800a57c:	310c      	adds	r1, #12
 800a57e:	3202      	adds	r2, #2
 800a580:	0092      	lsls	r2, r2, #2
 800a582:	300c      	adds	r0, #12
 800a584:	f7fe fea8 	bl	80092d8 <memcpy>
 800a588:	0029      	movs	r1, r5
 800a58a:	9803      	ldr	r0, [sp, #12]
 800a58c:	f000 fa10 	bl	800a9b0 <_Bfree>
 800a590:	0025      	movs	r5, r4
 800a592:	692b      	ldr	r3, [r5, #16]
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	612a      	str	r2, [r5, #16]
 800a598:	2201      	movs	r2, #1
 800a59a:	3304      	adds	r3, #4
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	18eb      	adds	r3, r5, r3
 800a5a0:	605a      	str	r2, [r3, #4]
 800a5a2:	e7b9      	b.n	800a518 <__gethex+0x374>
 800a5a4:	692a      	ldr	r2, [r5, #16]
 800a5a6:	9902      	ldr	r1, [sp, #8]
 800a5a8:	428a      	cmp	r2, r1
 800a5aa:	dd09      	ble.n	800a5c0 <__gethex+0x41c>
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	0028      	movs	r0, r5
 800a5b0:	f7ff fd8e 	bl	800a0d0 <rshift>
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	3701      	adds	r7, #1
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	42bb      	cmp	r3, r7
 800a5bc:	dac1      	bge.n	800a542 <__gethex+0x39e>
 800a5be:	e6e4      	b.n	800a38a <__gethex+0x1e6>
 800a5c0:	221f      	movs	r2, #31
 800a5c2:	9c00      	ldr	r4, [sp, #0]
 800a5c4:	9900      	ldr	r1, [sp, #0]
 800a5c6:	2601      	movs	r6, #1
 800a5c8:	4014      	ands	r4, r2
 800a5ca:	4211      	tst	r1, r2
 800a5cc:	d0ba      	beq.n	800a544 <__gethex+0x3a0>
 800a5ce:	9a04      	ldr	r2, [sp, #16]
 800a5d0:	189b      	adds	r3, r3, r2
 800a5d2:	3b04      	subs	r3, #4
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	f000 fa9f 	bl	800ab18 <__hi0bits>
 800a5da:	2320      	movs	r3, #32
 800a5dc:	1b1b      	subs	r3, r3, r4
 800a5de:	4298      	cmp	r0, r3
 800a5e0:	dbe4      	blt.n	800a5ac <__gethex+0x408>
 800a5e2:	e7af      	b.n	800a544 <__gethex+0x3a0>
 800a5e4:	0800bf86 	.word	0x0800bf86
 800a5e8:	0800bf97 	.word	0x0800bf97

0800a5ec <L_shift>:
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	b570      	push	{r4, r5, r6, lr}
 800a5f0:	2520      	movs	r5, #32
 800a5f2:	1a9a      	subs	r2, r3, r2
 800a5f4:	0092      	lsls	r2, r2, #2
 800a5f6:	1aad      	subs	r5, r5, r2
 800a5f8:	6843      	ldr	r3, [r0, #4]
 800a5fa:	6804      	ldr	r4, [r0, #0]
 800a5fc:	001e      	movs	r6, r3
 800a5fe:	40ae      	lsls	r6, r5
 800a600:	40d3      	lsrs	r3, r2
 800a602:	4334      	orrs	r4, r6
 800a604:	6004      	str	r4, [r0, #0]
 800a606:	6043      	str	r3, [r0, #4]
 800a608:	3004      	adds	r0, #4
 800a60a:	4288      	cmp	r0, r1
 800a60c:	d3f4      	bcc.n	800a5f8 <L_shift+0xc>
 800a60e:	bd70      	pop	{r4, r5, r6, pc}

0800a610 <__match>:
 800a610:	b530      	push	{r4, r5, lr}
 800a612:	6803      	ldr	r3, [r0, #0]
 800a614:	780c      	ldrb	r4, [r1, #0]
 800a616:	3301      	adds	r3, #1
 800a618:	2c00      	cmp	r4, #0
 800a61a:	d102      	bne.n	800a622 <__match+0x12>
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	2001      	movs	r0, #1
 800a620:	bd30      	pop	{r4, r5, pc}
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	0015      	movs	r5, r2
 800a626:	3d41      	subs	r5, #65	; 0x41
 800a628:	2d19      	cmp	r5, #25
 800a62a:	d800      	bhi.n	800a62e <__match+0x1e>
 800a62c:	3220      	adds	r2, #32
 800a62e:	3101      	adds	r1, #1
 800a630:	42a2      	cmp	r2, r4
 800a632:	d0ef      	beq.n	800a614 <__match+0x4>
 800a634:	2000      	movs	r0, #0
 800a636:	e7f3      	b.n	800a620 <__match+0x10>

0800a638 <__hexnan>:
 800a638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a63a:	680b      	ldr	r3, [r1, #0]
 800a63c:	b08b      	sub	sp, #44	; 0x2c
 800a63e:	9201      	str	r2, [sp, #4]
 800a640:	9901      	ldr	r1, [sp, #4]
 800a642:	115a      	asrs	r2, r3, #5
 800a644:	0092      	lsls	r2, r2, #2
 800a646:	188a      	adds	r2, r1, r2
 800a648:	9202      	str	r2, [sp, #8]
 800a64a:	0019      	movs	r1, r3
 800a64c:	221f      	movs	r2, #31
 800a64e:	4011      	ands	r1, r2
 800a650:	9008      	str	r0, [sp, #32]
 800a652:	9106      	str	r1, [sp, #24]
 800a654:	4213      	tst	r3, r2
 800a656:	d002      	beq.n	800a65e <__hexnan+0x26>
 800a658:	9b02      	ldr	r3, [sp, #8]
 800a65a:	3304      	adds	r3, #4
 800a65c:	9302      	str	r3, [sp, #8]
 800a65e:	9b02      	ldr	r3, [sp, #8]
 800a660:	2500      	movs	r5, #0
 800a662:	1f1f      	subs	r7, r3, #4
 800a664:	003e      	movs	r6, r7
 800a666:	003c      	movs	r4, r7
 800a668:	9b08      	ldr	r3, [sp, #32]
 800a66a:	603d      	str	r5, [r7, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	9507      	str	r5, [sp, #28]
 800a670:	9305      	str	r3, [sp, #20]
 800a672:	9503      	str	r5, [sp, #12]
 800a674:	9b05      	ldr	r3, [sp, #20]
 800a676:	3301      	adds	r3, #1
 800a678:	9309      	str	r3, [sp, #36]	; 0x24
 800a67a:	9b05      	ldr	r3, [sp, #20]
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d028      	beq.n	800a6d6 <__hexnan+0x9e>
 800a684:	9804      	ldr	r0, [sp, #16]
 800a686:	f7ff fd78 	bl	800a17a <__hexdig_fun>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d154      	bne.n	800a738 <__hexnan+0x100>
 800a68e:	9b04      	ldr	r3, [sp, #16]
 800a690:	2b20      	cmp	r3, #32
 800a692:	d819      	bhi.n	800a6c8 <__hexnan+0x90>
 800a694:	9b03      	ldr	r3, [sp, #12]
 800a696:	9a07      	ldr	r2, [sp, #28]
 800a698:	4293      	cmp	r3, r2
 800a69a:	dd12      	ble.n	800a6c2 <__hexnan+0x8a>
 800a69c:	42b4      	cmp	r4, r6
 800a69e:	d206      	bcs.n	800a6ae <__hexnan+0x76>
 800a6a0:	2d07      	cmp	r5, #7
 800a6a2:	dc04      	bgt.n	800a6ae <__hexnan+0x76>
 800a6a4:	002a      	movs	r2, r5
 800a6a6:	0031      	movs	r1, r6
 800a6a8:	0020      	movs	r0, r4
 800a6aa:	f7ff ff9f 	bl	800a5ec <L_shift>
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	2508      	movs	r5, #8
 800a6b2:	429c      	cmp	r4, r3
 800a6b4:	d905      	bls.n	800a6c2 <__hexnan+0x8a>
 800a6b6:	1f26      	subs	r6, r4, #4
 800a6b8:	2500      	movs	r5, #0
 800a6ba:	0034      	movs	r4, r6
 800a6bc:	9b03      	ldr	r3, [sp, #12]
 800a6be:	6035      	str	r5, [r6, #0]
 800a6c0:	9307      	str	r3, [sp, #28]
 800a6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c4:	9305      	str	r3, [sp, #20]
 800a6c6:	e7d5      	b.n	800a674 <__hexnan+0x3c>
 800a6c8:	9b04      	ldr	r3, [sp, #16]
 800a6ca:	2b29      	cmp	r3, #41	; 0x29
 800a6cc:	d159      	bne.n	800a782 <__hexnan+0x14a>
 800a6ce:	9b05      	ldr	r3, [sp, #20]
 800a6d0:	9a08      	ldr	r2, [sp, #32]
 800a6d2:	3302      	adds	r3, #2
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d052      	beq.n	800a782 <__hexnan+0x14a>
 800a6dc:	42b4      	cmp	r4, r6
 800a6de:	d206      	bcs.n	800a6ee <__hexnan+0xb6>
 800a6e0:	2d07      	cmp	r5, #7
 800a6e2:	dc04      	bgt.n	800a6ee <__hexnan+0xb6>
 800a6e4:	002a      	movs	r2, r5
 800a6e6:	0031      	movs	r1, r6
 800a6e8:	0020      	movs	r0, r4
 800a6ea:	f7ff ff7f 	bl	800a5ec <L_shift>
 800a6ee:	9b01      	ldr	r3, [sp, #4]
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	d935      	bls.n	800a760 <__hexnan+0x128>
 800a6f4:	001a      	movs	r2, r3
 800a6f6:	0023      	movs	r3, r4
 800a6f8:	cb02      	ldmia	r3!, {r1}
 800a6fa:	c202      	stmia	r2!, {r1}
 800a6fc:	429f      	cmp	r7, r3
 800a6fe:	d2fb      	bcs.n	800a6f8 <__hexnan+0xc0>
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	1c62      	adds	r2, r4, #1
 800a704:	1ed9      	subs	r1, r3, #3
 800a706:	2304      	movs	r3, #4
 800a708:	4291      	cmp	r1, r2
 800a70a:	d305      	bcc.n	800a718 <__hexnan+0xe0>
 800a70c:	9b02      	ldr	r3, [sp, #8]
 800a70e:	3b04      	subs	r3, #4
 800a710:	1b1b      	subs	r3, r3, r4
 800a712:	089b      	lsrs	r3, r3, #2
 800a714:	3301      	adds	r3, #1
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	9a01      	ldr	r2, [sp, #4]
 800a71a:	18d3      	adds	r3, r2, r3
 800a71c:	2200      	movs	r2, #0
 800a71e:	c304      	stmia	r3!, {r2}
 800a720:	429f      	cmp	r7, r3
 800a722:	d2fc      	bcs.n	800a71e <__hexnan+0xe6>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d104      	bne.n	800a734 <__hexnan+0xfc>
 800a72a:	9b01      	ldr	r3, [sp, #4]
 800a72c:	429f      	cmp	r7, r3
 800a72e:	d126      	bne.n	800a77e <__hexnan+0x146>
 800a730:	2301      	movs	r3, #1
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	2005      	movs	r0, #5
 800a736:	e025      	b.n	800a784 <__hexnan+0x14c>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	3501      	adds	r5, #1
 800a73c:	3301      	adds	r3, #1
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	2d08      	cmp	r5, #8
 800a742:	dd06      	ble.n	800a752 <__hexnan+0x11a>
 800a744:	9b01      	ldr	r3, [sp, #4]
 800a746:	429c      	cmp	r4, r3
 800a748:	d9bb      	bls.n	800a6c2 <__hexnan+0x8a>
 800a74a:	2300      	movs	r3, #0
 800a74c:	2501      	movs	r5, #1
 800a74e:	3c04      	subs	r4, #4
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	220f      	movs	r2, #15
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	4010      	ands	r0, r2
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	4303      	orrs	r3, r0
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	e7b0      	b.n	800a6c2 <__hexnan+0x8a>
 800a760:	9b06      	ldr	r3, [sp, #24]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0de      	beq.n	800a724 <__hexnan+0xec>
 800a766:	2320      	movs	r3, #32
 800a768:	9a06      	ldr	r2, [sp, #24]
 800a76a:	9902      	ldr	r1, [sp, #8]
 800a76c:	1a9b      	subs	r3, r3, r2
 800a76e:	2201      	movs	r2, #1
 800a770:	4252      	negs	r2, r2
 800a772:	40da      	lsrs	r2, r3
 800a774:	3904      	subs	r1, #4
 800a776:	680b      	ldr	r3, [r1, #0]
 800a778:	4013      	ands	r3, r2
 800a77a:	600b      	str	r3, [r1, #0]
 800a77c:	e7d2      	b.n	800a724 <__hexnan+0xec>
 800a77e:	3f04      	subs	r7, #4
 800a780:	e7d0      	b.n	800a724 <__hexnan+0xec>
 800a782:	2004      	movs	r0, #4
 800a784:	b00b      	add	sp, #44	; 0x2c
 800a786:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a788 <malloc>:
 800a788:	b510      	push	{r4, lr}
 800a78a:	4b03      	ldr	r3, [pc, #12]	; (800a798 <malloc+0x10>)
 800a78c:	0001      	movs	r1, r0
 800a78e:	6818      	ldr	r0, [r3, #0]
 800a790:	f000 f826 	bl	800a7e0 <_malloc_r>
 800a794:	bd10      	pop	{r4, pc}
 800a796:	46c0      	nop			; (mov r8, r8)
 800a798:	200001d0 	.word	0x200001d0

0800a79c <sbrk_aligned>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	4e0f      	ldr	r6, [pc, #60]	; (800a7dc <sbrk_aligned+0x40>)
 800a7a0:	000d      	movs	r5, r1
 800a7a2:	6831      	ldr	r1, [r6, #0]
 800a7a4:	0004      	movs	r4, r0
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	d102      	bne.n	800a7b0 <sbrk_aligned+0x14>
 800a7aa:	f001 f97f 	bl	800baac <_sbrk_r>
 800a7ae:	6030      	str	r0, [r6, #0]
 800a7b0:	0029      	movs	r1, r5
 800a7b2:	0020      	movs	r0, r4
 800a7b4:	f001 f97a 	bl	800baac <_sbrk_r>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d00a      	beq.n	800a7d2 <sbrk_aligned+0x36>
 800a7bc:	2303      	movs	r3, #3
 800a7be:	1cc5      	adds	r5, r0, #3
 800a7c0:	439d      	bics	r5, r3
 800a7c2:	42a8      	cmp	r0, r5
 800a7c4:	d007      	beq.n	800a7d6 <sbrk_aligned+0x3a>
 800a7c6:	1a29      	subs	r1, r5, r0
 800a7c8:	0020      	movs	r0, r4
 800a7ca:	f001 f96f 	bl	800baac <_sbrk_r>
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	d101      	bne.n	800a7d6 <sbrk_aligned+0x3a>
 800a7d2:	2501      	movs	r5, #1
 800a7d4:	426d      	negs	r5, r5
 800a7d6:	0028      	movs	r0, r5
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	200008a8 	.word	0x200008a8

0800a7e0 <_malloc_r>:
 800a7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7e2:	2203      	movs	r2, #3
 800a7e4:	1ccb      	adds	r3, r1, #3
 800a7e6:	4393      	bics	r3, r2
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	0006      	movs	r6, r0
 800a7ec:	001f      	movs	r7, r3
 800a7ee:	2b0c      	cmp	r3, #12
 800a7f0:	d238      	bcs.n	800a864 <_malloc_r+0x84>
 800a7f2:	270c      	movs	r7, #12
 800a7f4:	42b9      	cmp	r1, r7
 800a7f6:	d837      	bhi.n	800a868 <_malloc_r+0x88>
 800a7f8:	0030      	movs	r0, r6
 800a7fa:	f000 f885 	bl	800a908 <__malloc_lock>
 800a7fe:	4b38      	ldr	r3, [pc, #224]	; (800a8e0 <_malloc_r+0x100>)
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	001c      	movs	r4, r3
 800a806:	2c00      	cmp	r4, #0
 800a808:	d133      	bne.n	800a872 <_malloc_r+0x92>
 800a80a:	0039      	movs	r1, r7
 800a80c:	0030      	movs	r0, r6
 800a80e:	f7ff ffc5 	bl	800a79c <sbrk_aligned>
 800a812:	0004      	movs	r4, r0
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d15e      	bne.n	800a8d6 <_malloc_r+0xf6>
 800a818:	9b00      	ldr	r3, [sp, #0]
 800a81a:	681c      	ldr	r4, [r3, #0]
 800a81c:	0025      	movs	r5, r4
 800a81e:	2d00      	cmp	r5, #0
 800a820:	d14e      	bne.n	800a8c0 <_malloc_r+0xe0>
 800a822:	2c00      	cmp	r4, #0
 800a824:	d051      	beq.n	800a8ca <_malloc_r+0xea>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	0029      	movs	r1, r5
 800a82a:	18e3      	adds	r3, r4, r3
 800a82c:	0030      	movs	r0, r6
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	f001 f93c 	bl	800baac <_sbrk_r>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	4283      	cmp	r3, r0
 800a838:	d147      	bne.n	800a8ca <_malloc_r+0xea>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	0030      	movs	r0, r6
 800a83e:	1aff      	subs	r7, r7, r3
 800a840:	0039      	movs	r1, r7
 800a842:	f7ff ffab 	bl	800a79c <sbrk_aligned>
 800a846:	3001      	adds	r0, #1
 800a848:	d03f      	beq.n	800a8ca <_malloc_r+0xea>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	19db      	adds	r3, r3, r7
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	9b00      	ldr	r3, [sp, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d040      	beq.n	800a8da <_malloc_r+0xfa>
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	42a2      	cmp	r2, r4
 800a85c:	d133      	bne.n	800a8c6 <_malloc_r+0xe6>
 800a85e:	2200      	movs	r2, #0
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	e014      	b.n	800a88e <_malloc_r+0xae>
 800a864:	2b00      	cmp	r3, #0
 800a866:	dac5      	bge.n	800a7f4 <_malloc_r+0x14>
 800a868:	230c      	movs	r3, #12
 800a86a:	2500      	movs	r5, #0
 800a86c:	6033      	str	r3, [r6, #0]
 800a86e:	0028      	movs	r0, r5
 800a870:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a872:	6821      	ldr	r1, [r4, #0]
 800a874:	1bc9      	subs	r1, r1, r7
 800a876:	d420      	bmi.n	800a8ba <_malloc_r+0xda>
 800a878:	290b      	cmp	r1, #11
 800a87a:	d918      	bls.n	800a8ae <_malloc_r+0xce>
 800a87c:	19e2      	adds	r2, r4, r7
 800a87e:	6027      	str	r7, [r4, #0]
 800a880:	42a3      	cmp	r3, r4
 800a882:	d112      	bne.n	800a8aa <_malloc_r+0xca>
 800a884:	9b00      	ldr	r3, [sp, #0]
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	6863      	ldr	r3, [r4, #4]
 800a88a:	6011      	str	r1, [r2, #0]
 800a88c:	6053      	str	r3, [r2, #4]
 800a88e:	0030      	movs	r0, r6
 800a890:	0025      	movs	r5, r4
 800a892:	f000 f841 	bl	800a918 <__malloc_unlock>
 800a896:	2207      	movs	r2, #7
 800a898:	350b      	adds	r5, #11
 800a89a:	1d23      	adds	r3, r4, #4
 800a89c:	4395      	bics	r5, r2
 800a89e:	1aea      	subs	r2, r5, r3
 800a8a0:	429d      	cmp	r5, r3
 800a8a2:	d0e4      	beq.n	800a86e <_malloc_r+0x8e>
 800a8a4:	1b5b      	subs	r3, r3, r5
 800a8a6:	50a3      	str	r3, [r4, r2]
 800a8a8:	e7e1      	b.n	800a86e <_malloc_r+0x8e>
 800a8aa:	605a      	str	r2, [r3, #4]
 800a8ac:	e7ec      	b.n	800a888 <_malloc_r+0xa8>
 800a8ae:	6862      	ldr	r2, [r4, #4]
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	d1d5      	bne.n	800a860 <_malloc_r+0x80>
 800a8b4:	9b00      	ldr	r3, [sp, #0]
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	e7e9      	b.n	800a88e <_malloc_r+0xae>
 800a8ba:	0023      	movs	r3, r4
 800a8bc:	6864      	ldr	r4, [r4, #4]
 800a8be:	e7a2      	b.n	800a806 <_malloc_r+0x26>
 800a8c0:	002c      	movs	r4, r5
 800a8c2:	686d      	ldr	r5, [r5, #4]
 800a8c4:	e7ab      	b.n	800a81e <_malloc_r+0x3e>
 800a8c6:	0013      	movs	r3, r2
 800a8c8:	e7c4      	b.n	800a854 <_malloc_r+0x74>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	0030      	movs	r0, r6
 800a8ce:	6033      	str	r3, [r6, #0]
 800a8d0:	f000 f822 	bl	800a918 <__malloc_unlock>
 800a8d4:	e7cb      	b.n	800a86e <_malloc_r+0x8e>
 800a8d6:	6027      	str	r7, [r4, #0]
 800a8d8:	e7d9      	b.n	800a88e <_malloc_r+0xae>
 800a8da:	605b      	str	r3, [r3, #4]
 800a8dc:	deff      	udf	#255	; 0xff
 800a8de:	46c0      	nop			; (mov r8, r8)
 800a8e0:	200008a4 	.word	0x200008a4

0800a8e4 <__ascii_mbtowc>:
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	d100      	bne.n	800a8ec <__ascii_mbtowc+0x8>
 800a8ea:	a901      	add	r1, sp, #4
 800a8ec:	1e10      	subs	r0, r2, #0
 800a8ee:	d006      	beq.n	800a8fe <__ascii_mbtowc+0x1a>
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <__ascii_mbtowc+0x1e>
 800a8f4:	7813      	ldrb	r3, [r2, #0]
 800a8f6:	600b      	str	r3, [r1, #0]
 800a8f8:	7810      	ldrb	r0, [r2, #0]
 800a8fa:	1e43      	subs	r3, r0, #1
 800a8fc:	4198      	sbcs	r0, r3
 800a8fe:	b002      	add	sp, #8
 800a900:	4770      	bx	lr
 800a902:	2002      	movs	r0, #2
 800a904:	4240      	negs	r0, r0
 800a906:	e7fa      	b.n	800a8fe <__ascii_mbtowc+0x1a>

0800a908 <__malloc_lock>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	4802      	ldr	r0, [pc, #8]	; (800a914 <__malloc_lock+0xc>)
 800a90c:	f7fe fcd7 	bl	80092be <__retarget_lock_acquire_recursive>
 800a910:	bd10      	pop	{r4, pc}
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	200008a0 	.word	0x200008a0

0800a918 <__malloc_unlock>:
 800a918:	b510      	push	{r4, lr}
 800a91a:	4802      	ldr	r0, [pc, #8]	; (800a924 <__malloc_unlock+0xc>)
 800a91c:	f7fe fcd0 	bl	80092c0 <__retarget_lock_release_recursive>
 800a920:	bd10      	pop	{r4, pc}
 800a922:	46c0      	nop			; (mov r8, r8)
 800a924:	200008a0 	.word	0x200008a0

0800a928 <_Balloc>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	69c5      	ldr	r5, [r0, #28]
 800a92c:	0006      	movs	r6, r0
 800a92e:	000c      	movs	r4, r1
 800a930:	2d00      	cmp	r5, #0
 800a932:	d10e      	bne.n	800a952 <_Balloc+0x2a>
 800a934:	2010      	movs	r0, #16
 800a936:	f7ff ff27 	bl	800a788 <malloc>
 800a93a:	1e02      	subs	r2, r0, #0
 800a93c:	61f0      	str	r0, [r6, #28]
 800a93e:	d104      	bne.n	800a94a <_Balloc+0x22>
 800a940:	216b      	movs	r1, #107	; 0x6b
 800a942:	4b19      	ldr	r3, [pc, #100]	; (800a9a8 <_Balloc+0x80>)
 800a944:	4819      	ldr	r0, [pc, #100]	; (800a9ac <_Balloc+0x84>)
 800a946:	f001 f8c3 	bl	800bad0 <__assert_func>
 800a94a:	6045      	str	r5, [r0, #4]
 800a94c:	6085      	str	r5, [r0, #8]
 800a94e:	6005      	str	r5, [r0, #0]
 800a950:	60c5      	str	r5, [r0, #12]
 800a952:	69f5      	ldr	r5, [r6, #28]
 800a954:	68eb      	ldr	r3, [r5, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d013      	beq.n	800a982 <_Balloc+0x5a>
 800a95a:	69f3      	ldr	r3, [r6, #28]
 800a95c:	00a2      	lsls	r2, r4, #2
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	189b      	adds	r3, r3, r2
 800a962:	6818      	ldr	r0, [r3, #0]
 800a964:	2800      	cmp	r0, #0
 800a966:	d118      	bne.n	800a99a <_Balloc+0x72>
 800a968:	2101      	movs	r1, #1
 800a96a:	000d      	movs	r5, r1
 800a96c:	40a5      	lsls	r5, r4
 800a96e:	1d6a      	adds	r2, r5, #5
 800a970:	0030      	movs	r0, r6
 800a972:	0092      	lsls	r2, r2, #2
 800a974:	f001 f8ca 	bl	800bb0c <_calloc_r>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d00c      	beq.n	800a996 <_Balloc+0x6e>
 800a97c:	6044      	str	r4, [r0, #4]
 800a97e:	6085      	str	r5, [r0, #8]
 800a980:	e00d      	b.n	800a99e <_Balloc+0x76>
 800a982:	2221      	movs	r2, #33	; 0x21
 800a984:	2104      	movs	r1, #4
 800a986:	0030      	movs	r0, r6
 800a988:	f001 f8c0 	bl	800bb0c <_calloc_r>
 800a98c:	69f3      	ldr	r3, [r6, #28]
 800a98e:	60e8      	str	r0, [r5, #12]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1e1      	bne.n	800a95a <_Balloc+0x32>
 800a996:	2000      	movs	r0, #0
 800a998:	bd70      	pop	{r4, r5, r6, pc}
 800a99a:	6802      	ldr	r2, [r0, #0]
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6103      	str	r3, [r0, #16]
 800a9a2:	60c3      	str	r3, [r0, #12]
 800a9a4:	e7f8      	b.n	800a998 <_Balloc+0x70>
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	0800bf17 	.word	0x0800bf17
 800a9ac:	0800bff7 	.word	0x0800bff7

0800a9b0 <_Bfree>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	69c6      	ldr	r6, [r0, #28]
 800a9b4:	0005      	movs	r5, r0
 800a9b6:	000c      	movs	r4, r1
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	d10e      	bne.n	800a9da <_Bfree+0x2a>
 800a9bc:	2010      	movs	r0, #16
 800a9be:	f7ff fee3 	bl	800a788 <malloc>
 800a9c2:	1e02      	subs	r2, r0, #0
 800a9c4:	61e8      	str	r0, [r5, #28]
 800a9c6:	d104      	bne.n	800a9d2 <_Bfree+0x22>
 800a9c8:	218f      	movs	r1, #143	; 0x8f
 800a9ca:	4b09      	ldr	r3, [pc, #36]	; (800a9f0 <_Bfree+0x40>)
 800a9cc:	4809      	ldr	r0, [pc, #36]	; (800a9f4 <_Bfree+0x44>)
 800a9ce:	f001 f87f 	bl	800bad0 <__assert_func>
 800a9d2:	6046      	str	r6, [r0, #4]
 800a9d4:	6086      	str	r6, [r0, #8]
 800a9d6:	6006      	str	r6, [r0, #0]
 800a9d8:	60c6      	str	r6, [r0, #12]
 800a9da:	2c00      	cmp	r4, #0
 800a9dc:	d007      	beq.n	800a9ee <_Bfree+0x3e>
 800a9de:	69eb      	ldr	r3, [r5, #28]
 800a9e0:	6862      	ldr	r2, [r4, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	0092      	lsls	r2, r2, #2
 800a9e6:	189b      	adds	r3, r3, r2
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	6022      	str	r2, [r4, #0]
 800a9ec:	601c      	str	r4, [r3, #0]
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	0800bf17 	.word	0x0800bf17
 800a9f4:	0800bff7 	.word	0x0800bff7

0800a9f8 <__multadd>:
 800a9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9fa:	000e      	movs	r6, r1
 800a9fc:	9001      	str	r0, [sp, #4]
 800a9fe:	000c      	movs	r4, r1
 800aa00:	001d      	movs	r5, r3
 800aa02:	2000      	movs	r0, #0
 800aa04:	690f      	ldr	r7, [r1, #16]
 800aa06:	3614      	adds	r6, #20
 800aa08:	6833      	ldr	r3, [r6, #0]
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	b299      	uxth	r1, r3
 800aa0e:	4351      	muls	r1, r2
 800aa10:	0c1b      	lsrs	r3, r3, #16
 800aa12:	4353      	muls	r3, r2
 800aa14:	1949      	adds	r1, r1, r5
 800aa16:	0c0d      	lsrs	r5, r1, #16
 800aa18:	195b      	adds	r3, r3, r5
 800aa1a:	0c1d      	lsrs	r5, r3, #16
 800aa1c:	b289      	uxth	r1, r1
 800aa1e:	041b      	lsls	r3, r3, #16
 800aa20:	185b      	adds	r3, r3, r1
 800aa22:	c608      	stmia	r6!, {r3}
 800aa24:	4287      	cmp	r7, r0
 800aa26:	dcef      	bgt.n	800aa08 <__multadd+0x10>
 800aa28:	2d00      	cmp	r5, #0
 800aa2a:	d022      	beq.n	800aa72 <__multadd+0x7a>
 800aa2c:	68a3      	ldr	r3, [r4, #8]
 800aa2e:	42bb      	cmp	r3, r7
 800aa30:	dc19      	bgt.n	800aa66 <__multadd+0x6e>
 800aa32:	6861      	ldr	r1, [r4, #4]
 800aa34:	9801      	ldr	r0, [sp, #4]
 800aa36:	3101      	adds	r1, #1
 800aa38:	f7ff ff76 	bl	800a928 <_Balloc>
 800aa3c:	1e06      	subs	r6, r0, #0
 800aa3e:	d105      	bne.n	800aa4c <__multadd+0x54>
 800aa40:	0032      	movs	r2, r6
 800aa42:	21ba      	movs	r1, #186	; 0xba
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <__multadd+0x80>)
 800aa46:	480d      	ldr	r0, [pc, #52]	; (800aa7c <__multadd+0x84>)
 800aa48:	f001 f842 	bl	800bad0 <__assert_func>
 800aa4c:	0021      	movs	r1, r4
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	310c      	adds	r1, #12
 800aa52:	3202      	adds	r2, #2
 800aa54:	0092      	lsls	r2, r2, #2
 800aa56:	300c      	adds	r0, #12
 800aa58:	f7fe fc3e 	bl	80092d8 <memcpy>
 800aa5c:	0021      	movs	r1, r4
 800aa5e:	9801      	ldr	r0, [sp, #4]
 800aa60:	f7ff ffa6 	bl	800a9b0 <_Bfree>
 800aa64:	0034      	movs	r4, r6
 800aa66:	1d3b      	adds	r3, r7, #4
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	18e3      	adds	r3, r4, r3
 800aa6c:	605d      	str	r5, [r3, #4]
 800aa6e:	1c7b      	adds	r3, r7, #1
 800aa70:	6123      	str	r3, [r4, #16]
 800aa72:	0020      	movs	r0, r4
 800aa74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	0800bf86 	.word	0x0800bf86
 800aa7c:	0800bff7 	.word	0x0800bff7

0800aa80 <__s2b>:
 800aa80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa82:	0006      	movs	r6, r0
 800aa84:	0018      	movs	r0, r3
 800aa86:	000c      	movs	r4, r1
 800aa88:	3008      	adds	r0, #8
 800aa8a:	2109      	movs	r1, #9
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	0015      	movs	r5, r2
 800aa90:	f7f5 fbe0 	bl	8000254 <__divsi3>
 800aa94:	2301      	movs	r3, #1
 800aa96:	2100      	movs	r1, #0
 800aa98:	4283      	cmp	r3, r0
 800aa9a:	db0a      	blt.n	800aab2 <__s2b+0x32>
 800aa9c:	0030      	movs	r0, r6
 800aa9e:	f7ff ff43 	bl	800a928 <_Balloc>
 800aaa2:	1e01      	subs	r1, r0, #0
 800aaa4:	d108      	bne.n	800aab8 <__s2b+0x38>
 800aaa6:	000a      	movs	r2, r1
 800aaa8:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <__s2b+0x90>)
 800aaaa:	481a      	ldr	r0, [pc, #104]	; (800ab14 <__s2b+0x94>)
 800aaac:	31d3      	adds	r1, #211	; 0xd3
 800aaae:	f001 f80f 	bl	800bad0 <__assert_func>
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	3101      	adds	r1, #1
 800aab6:	e7ef      	b.n	800aa98 <__s2b+0x18>
 800aab8:	9b08      	ldr	r3, [sp, #32]
 800aaba:	6143      	str	r3, [r0, #20]
 800aabc:	2301      	movs	r3, #1
 800aabe:	6103      	str	r3, [r0, #16]
 800aac0:	2d09      	cmp	r5, #9
 800aac2:	dd18      	ble.n	800aaf6 <__s2b+0x76>
 800aac4:	0023      	movs	r3, r4
 800aac6:	3309      	adds	r3, #9
 800aac8:	001f      	movs	r7, r3
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	1964      	adds	r4, r4, r5
 800aace:	783b      	ldrb	r3, [r7, #0]
 800aad0:	220a      	movs	r2, #10
 800aad2:	0030      	movs	r0, r6
 800aad4:	3b30      	subs	r3, #48	; 0x30
 800aad6:	f7ff ff8f 	bl	800a9f8 <__multadd>
 800aada:	3701      	adds	r7, #1
 800aadc:	0001      	movs	r1, r0
 800aade:	42a7      	cmp	r7, r4
 800aae0:	d1f5      	bne.n	800aace <__s2b+0x4e>
 800aae2:	002c      	movs	r4, r5
 800aae4:	9b00      	ldr	r3, [sp, #0]
 800aae6:	3c08      	subs	r4, #8
 800aae8:	191c      	adds	r4, r3, r4
 800aaea:	002f      	movs	r7, r5
 800aaec:	9b01      	ldr	r3, [sp, #4]
 800aaee:	429f      	cmp	r7, r3
 800aaf0:	db04      	blt.n	800aafc <__s2b+0x7c>
 800aaf2:	0008      	movs	r0, r1
 800aaf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aaf6:	2509      	movs	r5, #9
 800aaf8:	340a      	adds	r4, #10
 800aafa:	e7f6      	b.n	800aaea <__s2b+0x6a>
 800aafc:	1b63      	subs	r3, r4, r5
 800aafe:	5ddb      	ldrb	r3, [r3, r7]
 800ab00:	220a      	movs	r2, #10
 800ab02:	0030      	movs	r0, r6
 800ab04:	3b30      	subs	r3, #48	; 0x30
 800ab06:	f7ff ff77 	bl	800a9f8 <__multadd>
 800ab0a:	3701      	adds	r7, #1
 800ab0c:	0001      	movs	r1, r0
 800ab0e:	e7ed      	b.n	800aaec <__s2b+0x6c>
 800ab10:	0800bf86 	.word	0x0800bf86
 800ab14:	0800bff7 	.word	0x0800bff7

0800ab18 <__hi0bits>:
 800ab18:	0003      	movs	r3, r0
 800ab1a:	0c02      	lsrs	r2, r0, #16
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	4282      	cmp	r2, r0
 800ab20:	d101      	bne.n	800ab26 <__hi0bits+0xe>
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	3010      	adds	r0, #16
 800ab26:	0e1a      	lsrs	r2, r3, #24
 800ab28:	d101      	bne.n	800ab2e <__hi0bits+0x16>
 800ab2a:	3008      	adds	r0, #8
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	0f1a      	lsrs	r2, r3, #28
 800ab30:	d101      	bne.n	800ab36 <__hi0bits+0x1e>
 800ab32:	3004      	adds	r0, #4
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	0f9a      	lsrs	r2, r3, #30
 800ab38:	d101      	bne.n	800ab3e <__hi0bits+0x26>
 800ab3a:	3002      	adds	r0, #2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	db03      	blt.n	800ab4a <__hi0bits+0x32>
 800ab42:	3001      	adds	r0, #1
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	d400      	bmi.n	800ab4a <__hi0bits+0x32>
 800ab48:	2020      	movs	r0, #32
 800ab4a:	4770      	bx	lr

0800ab4c <__lo0bits>:
 800ab4c:	6803      	ldr	r3, [r0, #0]
 800ab4e:	0001      	movs	r1, r0
 800ab50:	2207      	movs	r2, #7
 800ab52:	0018      	movs	r0, r3
 800ab54:	4010      	ands	r0, r2
 800ab56:	4213      	tst	r3, r2
 800ab58:	d00d      	beq.n	800ab76 <__lo0bits+0x2a>
 800ab5a:	3a06      	subs	r2, #6
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	4213      	tst	r3, r2
 800ab60:	d105      	bne.n	800ab6e <__lo0bits+0x22>
 800ab62:	3002      	adds	r0, #2
 800ab64:	4203      	tst	r3, r0
 800ab66:	d003      	beq.n	800ab70 <__lo0bits+0x24>
 800ab68:	40d3      	lsrs	r3, r2
 800ab6a:	0010      	movs	r0, r2
 800ab6c:	600b      	str	r3, [r1, #0]
 800ab6e:	4770      	bx	lr
 800ab70:	089b      	lsrs	r3, r3, #2
 800ab72:	600b      	str	r3, [r1, #0]
 800ab74:	e7fb      	b.n	800ab6e <__lo0bits+0x22>
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	2a00      	cmp	r2, #0
 800ab7a:	d101      	bne.n	800ab80 <__lo0bits+0x34>
 800ab7c:	2010      	movs	r0, #16
 800ab7e:	0c1b      	lsrs	r3, r3, #16
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	2a00      	cmp	r2, #0
 800ab84:	d101      	bne.n	800ab8a <__lo0bits+0x3e>
 800ab86:	3008      	adds	r0, #8
 800ab88:	0a1b      	lsrs	r3, r3, #8
 800ab8a:	071a      	lsls	r2, r3, #28
 800ab8c:	d101      	bne.n	800ab92 <__lo0bits+0x46>
 800ab8e:	3004      	adds	r0, #4
 800ab90:	091b      	lsrs	r3, r3, #4
 800ab92:	079a      	lsls	r2, r3, #30
 800ab94:	d101      	bne.n	800ab9a <__lo0bits+0x4e>
 800ab96:	3002      	adds	r0, #2
 800ab98:	089b      	lsrs	r3, r3, #2
 800ab9a:	07da      	lsls	r2, r3, #31
 800ab9c:	d4e9      	bmi.n	800ab72 <__lo0bits+0x26>
 800ab9e:	3001      	adds	r0, #1
 800aba0:	085b      	lsrs	r3, r3, #1
 800aba2:	d1e6      	bne.n	800ab72 <__lo0bits+0x26>
 800aba4:	2020      	movs	r0, #32
 800aba6:	e7e2      	b.n	800ab6e <__lo0bits+0x22>

0800aba8 <__i2b>:
 800aba8:	b510      	push	{r4, lr}
 800abaa:	000c      	movs	r4, r1
 800abac:	2101      	movs	r1, #1
 800abae:	f7ff febb 	bl	800a928 <_Balloc>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d107      	bne.n	800abc6 <__i2b+0x1e>
 800abb6:	2146      	movs	r1, #70	; 0x46
 800abb8:	4c05      	ldr	r4, [pc, #20]	; (800abd0 <__i2b+0x28>)
 800abba:	0002      	movs	r2, r0
 800abbc:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <__i2b+0x2c>)
 800abbe:	0020      	movs	r0, r4
 800abc0:	31ff      	adds	r1, #255	; 0xff
 800abc2:	f000 ff85 	bl	800bad0 <__assert_func>
 800abc6:	2301      	movs	r3, #1
 800abc8:	6144      	str	r4, [r0, #20]
 800abca:	6103      	str	r3, [r0, #16]
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	46c0      	nop			; (mov r8, r8)
 800abd0:	0800bff7 	.word	0x0800bff7
 800abd4:	0800bf86 	.word	0x0800bf86

0800abd8 <__multiply>:
 800abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abda:	0015      	movs	r5, r2
 800abdc:	690a      	ldr	r2, [r1, #16]
 800abde:	692b      	ldr	r3, [r5, #16]
 800abe0:	000c      	movs	r4, r1
 800abe2:	b08b      	sub	sp, #44	; 0x2c
 800abe4:	429a      	cmp	r2, r3
 800abe6:	da01      	bge.n	800abec <__multiply+0x14>
 800abe8:	002c      	movs	r4, r5
 800abea:	000d      	movs	r5, r1
 800abec:	6927      	ldr	r7, [r4, #16]
 800abee:	692e      	ldr	r6, [r5, #16]
 800abf0:	6861      	ldr	r1, [r4, #4]
 800abf2:	19bb      	adds	r3, r7, r6
 800abf4:	9303      	str	r3, [sp, #12]
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	19ba      	adds	r2, r7, r6
 800abfa:	4293      	cmp	r3, r2
 800abfc:	da00      	bge.n	800ac00 <__multiply+0x28>
 800abfe:	3101      	adds	r1, #1
 800ac00:	f7ff fe92 	bl	800a928 <_Balloc>
 800ac04:	9002      	str	r0, [sp, #8]
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d106      	bne.n	800ac18 <__multiply+0x40>
 800ac0a:	21b1      	movs	r1, #177	; 0xb1
 800ac0c:	4b48      	ldr	r3, [pc, #288]	; (800ad30 <__multiply+0x158>)
 800ac0e:	4849      	ldr	r0, [pc, #292]	; (800ad34 <__multiply+0x15c>)
 800ac10:	9a02      	ldr	r2, [sp, #8]
 800ac12:	0049      	lsls	r1, r1, #1
 800ac14:	f000 ff5c 	bl	800bad0 <__assert_func>
 800ac18:	9b02      	ldr	r3, [sp, #8]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	3314      	adds	r3, #20
 800ac1e:	469c      	mov	ip, r3
 800ac20:	19bb      	adds	r3, r7, r6
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4463      	add	r3, ip
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	4663      	mov	r3, ip
 800ac2a:	9904      	ldr	r1, [sp, #16]
 800ac2c:	428b      	cmp	r3, r1
 800ac2e:	d32a      	bcc.n	800ac86 <__multiply+0xae>
 800ac30:	0023      	movs	r3, r4
 800ac32:	00bf      	lsls	r7, r7, #2
 800ac34:	3314      	adds	r3, #20
 800ac36:	3514      	adds	r5, #20
 800ac38:	9308      	str	r3, [sp, #32]
 800ac3a:	00b6      	lsls	r6, r6, #2
 800ac3c:	19db      	adds	r3, r3, r7
 800ac3e:	9305      	str	r3, [sp, #20]
 800ac40:	19ab      	adds	r3, r5, r6
 800ac42:	9309      	str	r3, [sp, #36]	; 0x24
 800ac44:	2304      	movs	r3, #4
 800ac46:	9306      	str	r3, [sp, #24]
 800ac48:	0023      	movs	r3, r4
 800ac4a:	9a05      	ldr	r2, [sp, #20]
 800ac4c:	3315      	adds	r3, #21
 800ac4e:	9501      	str	r5, [sp, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d305      	bcc.n	800ac60 <__multiply+0x88>
 800ac54:	1b13      	subs	r3, r2, r4
 800ac56:	3b15      	subs	r3, #21
 800ac58:	089b      	lsrs	r3, r3, #2
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	9306      	str	r3, [sp, #24]
 800ac60:	9b01      	ldr	r3, [sp, #4]
 800ac62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d310      	bcc.n	800ac8a <__multiply+0xb2>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dd05      	ble.n	800ac7a <__multiply+0xa2>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d056      	beq.n	800ad28 <__multiply+0x150>
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	9a03      	ldr	r2, [sp, #12]
 800ac7e:	0018      	movs	r0, r3
 800ac80:	611a      	str	r2, [r3, #16]
 800ac82:	b00b      	add	sp, #44	; 0x2c
 800ac84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac86:	c304      	stmia	r3!, {r2}
 800ac88:	e7cf      	b.n	800ac2a <__multiply+0x52>
 800ac8a:	9b01      	ldr	r3, [sp, #4]
 800ac8c:	6818      	ldr	r0, [r3, #0]
 800ac8e:	b280      	uxth	r0, r0
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d01e      	beq.n	800acd2 <__multiply+0xfa>
 800ac94:	4667      	mov	r7, ip
 800ac96:	2500      	movs	r5, #0
 800ac98:	9e08      	ldr	r6, [sp, #32]
 800ac9a:	ce02      	ldmia	r6!, {r1}
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	9307      	str	r3, [sp, #28]
 800aca0:	b28b      	uxth	r3, r1
 800aca2:	4343      	muls	r3, r0
 800aca4:	001a      	movs	r2, r3
 800aca6:	466b      	mov	r3, sp
 800aca8:	8b9b      	ldrh	r3, [r3, #28]
 800acaa:	18d3      	adds	r3, r2, r3
 800acac:	195b      	adds	r3, r3, r5
 800acae:	0c0d      	lsrs	r5, r1, #16
 800acb0:	4345      	muls	r5, r0
 800acb2:	9a07      	ldr	r2, [sp, #28]
 800acb4:	0c11      	lsrs	r1, r2, #16
 800acb6:	1869      	adds	r1, r5, r1
 800acb8:	0c1a      	lsrs	r2, r3, #16
 800acba:	188a      	adds	r2, r1, r2
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	0c15      	lsrs	r5, r2, #16
 800acc0:	0412      	lsls	r2, r2, #16
 800acc2:	431a      	orrs	r2, r3
 800acc4:	9b05      	ldr	r3, [sp, #20]
 800acc6:	c704      	stmia	r7!, {r2}
 800acc8:	42b3      	cmp	r3, r6
 800acca:	d8e6      	bhi.n	800ac9a <__multiply+0xc2>
 800accc:	4663      	mov	r3, ip
 800acce:	9a06      	ldr	r2, [sp, #24]
 800acd0:	509d      	str	r5, [r3, r2]
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	0c00      	lsrs	r0, r0, #16
 800acd8:	d020      	beq.n	800ad1c <__multiply+0x144>
 800acda:	4663      	mov	r3, ip
 800acdc:	0025      	movs	r5, r4
 800acde:	4661      	mov	r1, ip
 800ace0:	2700      	movs	r7, #0
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3514      	adds	r5, #20
 800ace6:	682a      	ldr	r2, [r5, #0]
 800ace8:	680e      	ldr	r6, [r1, #0]
 800acea:	b292      	uxth	r2, r2
 800acec:	4342      	muls	r2, r0
 800acee:	0c36      	lsrs	r6, r6, #16
 800acf0:	1992      	adds	r2, r2, r6
 800acf2:	19d2      	adds	r2, r2, r7
 800acf4:	0416      	lsls	r6, r2, #16
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	431e      	orrs	r6, r3
 800acfa:	600e      	str	r6, [r1, #0]
 800acfc:	cd40      	ldmia	r5!, {r6}
 800acfe:	684b      	ldr	r3, [r1, #4]
 800ad00:	0c36      	lsrs	r6, r6, #16
 800ad02:	4346      	muls	r6, r0
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	0c12      	lsrs	r2, r2, #16
 800ad08:	18f3      	adds	r3, r6, r3
 800ad0a:	189b      	adds	r3, r3, r2
 800ad0c:	9a05      	ldr	r2, [sp, #20]
 800ad0e:	0c1f      	lsrs	r7, r3, #16
 800ad10:	3104      	adds	r1, #4
 800ad12:	42aa      	cmp	r2, r5
 800ad14:	d8e7      	bhi.n	800ace6 <__multiply+0x10e>
 800ad16:	4662      	mov	r2, ip
 800ad18:	9906      	ldr	r1, [sp, #24]
 800ad1a:	5053      	str	r3, [r2, r1]
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	2304      	movs	r3, #4
 800ad24:	449c      	add	ip, r3
 800ad26:	e79b      	b.n	800ac60 <__multiply+0x88>
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	9303      	str	r3, [sp, #12]
 800ad2e:	e79b      	b.n	800ac68 <__multiply+0x90>
 800ad30:	0800bf86 	.word	0x0800bf86
 800ad34:	0800bff7 	.word	0x0800bff7

0800ad38 <__pow5mult>:
 800ad38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	0015      	movs	r5, r2
 800ad3e:	0007      	movs	r7, r0
 800ad40:	000e      	movs	r6, r1
 800ad42:	401a      	ands	r2, r3
 800ad44:	421d      	tst	r5, r3
 800ad46:	d008      	beq.n	800ad5a <__pow5mult+0x22>
 800ad48:	4925      	ldr	r1, [pc, #148]	; (800ade0 <__pow5mult+0xa8>)
 800ad4a:	3a01      	subs	r2, #1
 800ad4c:	0092      	lsls	r2, r2, #2
 800ad4e:	5852      	ldr	r2, [r2, r1]
 800ad50:	2300      	movs	r3, #0
 800ad52:	0031      	movs	r1, r6
 800ad54:	f7ff fe50 	bl	800a9f8 <__multadd>
 800ad58:	0006      	movs	r6, r0
 800ad5a:	10ad      	asrs	r5, r5, #2
 800ad5c:	d03d      	beq.n	800adda <__pow5mult+0xa2>
 800ad5e:	69fc      	ldr	r4, [r7, #28]
 800ad60:	2c00      	cmp	r4, #0
 800ad62:	d10f      	bne.n	800ad84 <__pow5mult+0x4c>
 800ad64:	2010      	movs	r0, #16
 800ad66:	f7ff fd0f 	bl	800a788 <malloc>
 800ad6a:	1e02      	subs	r2, r0, #0
 800ad6c:	61f8      	str	r0, [r7, #28]
 800ad6e:	d105      	bne.n	800ad7c <__pow5mult+0x44>
 800ad70:	21b4      	movs	r1, #180	; 0xb4
 800ad72:	4b1c      	ldr	r3, [pc, #112]	; (800ade4 <__pow5mult+0xac>)
 800ad74:	481c      	ldr	r0, [pc, #112]	; (800ade8 <__pow5mult+0xb0>)
 800ad76:	31ff      	adds	r1, #255	; 0xff
 800ad78:	f000 feaa 	bl	800bad0 <__assert_func>
 800ad7c:	6044      	str	r4, [r0, #4]
 800ad7e:	6084      	str	r4, [r0, #8]
 800ad80:	6004      	str	r4, [r0, #0]
 800ad82:	60c4      	str	r4, [r0, #12]
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	689c      	ldr	r4, [r3, #8]
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	d108      	bne.n	800ada0 <__pow5mult+0x68>
 800ad8e:	0038      	movs	r0, r7
 800ad90:	4916      	ldr	r1, [pc, #88]	; (800adec <__pow5mult+0xb4>)
 800ad92:	f7ff ff09 	bl	800aba8 <__i2b>
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	0004      	movs	r4, r0
 800ad9a:	6098      	str	r0, [r3, #8]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6003      	str	r3, [r0, #0]
 800ada0:	2301      	movs	r3, #1
 800ada2:	421d      	tst	r5, r3
 800ada4:	d00a      	beq.n	800adbc <__pow5mult+0x84>
 800ada6:	0031      	movs	r1, r6
 800ada8:	0022      	movs	r2, r4
 800adaa:	0038      	movs	r0, r7
 800adac:	f7ff ff14 	bl	800abd8 <__multiply>
 800adb0:	0031      	movs	r1, r6
 800adb2:	9001      	str	r0, [sp, #4]
 800adb4:	0038      	movs	r0, r7
 800adb6:	f7ff fdfb 	bl	800a9b0 <_Bfree>
 800adba:	9e01      	ldr	r6, [sp, #4]
 800adbc:	106d      	asrs	r5, r5, #1
 800adbe:	d00c      	beq.n	800adda <__pow5mult+0xa2>
 800adc0:	6820      	ldr	r0, [r4, #0]
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d107      	bne.n	800add6 <__pow5mult+0x9e>
 800adc6:	0022      	movs	r2, r4
 800adc8:	0021      	movs	r1, r4
 800adca:	0038      	movs	r0, r7
 800adcc:	f7ff ff04 	bl	800abd8 <__multiply>
 800add0:	2300      	movs	r3, #0
 800add2:	6020      	str	r0, [r4, #0]
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	0004      	movs	r4, r0
 800add8:	e7e2      	b.n	800ada0 <__pow5mult+0x68>
 800adda:	0030      	movs	r0, r6
 800addc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	0800c140 	.word	0x0800c140
 800ade4:	0800bf17 	.word	0x0800bf17
 800ade8:	0800bff7 	.word	0x0800bff7
 800adec:	00000271 	.word	0x00000271

0800adf0 <__lshift>:
 800adf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf2:	000c      	movs	r4, r1
 800adf4:	0017      	movs	r7, r2
 800adf6:	6923      	ldr	r3, [r4, #16]
 800adf8:	1155      	asrs	r5, r2, #5
 800adfa:	b087      	sub	sp, #28
 800adfc:	18eb      	adds	r3, r5, r3
 800adfe:	9302      	str	r3, [sp, #8]
 800ae00:	3301      	adds	r3, #1
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	6849      	ldr	r1, [r1, #4]
 800ae06:	68a3      	ldr	r3, [r4, #8]
 800ae08:	9004      	str	r0, [sp, #16]
 800ae0a:	9a01      	ldr	r2, [sp, #4]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	db10      	blt.n	800ae32 <__lshift+0x42>
 800ae10:	9804      	ldr	r0, [sp, #16]
 800ae12:	f7ff fd89 	bl	800a928 <_Balloc>
 800ae16:	2300      	movs	r3, #0
 800ae18:	0002      	movs	r2, r0
 800ae1a:	0006      	movs	r6, r0
 800ae1c:	0019      	movs	r1, r3
 800ae1e:	3214      	adds	r2, #20
 800ae20:	4298      	cmp	r0, r3
 800ae22:	d10c      	bne.n	800ae3e <__lshift+0x4e>
 800ae24:	31df      	adds	r1, #223	; 0xdf
 800ae26:	0032      	movs	r2, r6
 800ae28:	4b26      	ldr	r3, [pc, #152]	; (800aec4 <__lshift+0xd4>)
 800ae2a:	4827      	ldr	r0, [pc, #156]	; (800aec8 <__lshift+0xd8>)
 800ae2c:	31ff      	adds	r1, #255	; 0xff
 800ae2e:	f000 fe4f 	bl	800bad0 <__assert_func>
 800ae32:	3101      	adds	r1, #1
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	e7e8      	b.n	800ae0a <__lshift+0x1a>
 800ae38:	0098      	lsls	r0, r3, #2
 800ae3a:	5011      	str	r1, [r2, r0]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	42ab      	cmp	r3, r5
 800ae40:	dbfa      	blt.n	800ae38 <__lshift+0x48>
 800ae42:	43eb      	mvns	r3, r5
 800ae44:	17db      	asrs	r3, r3, #31
 800ae46:	401d      	ands	r5, r3
 800ae48:	211f      	movs	r1, #31
 800ae4a:	0023      	movs	r3, r4
 800ae4c:	0038      	movs	r0, r7
 800ae4e:	00ad      	lsls	r5, r5, #2
 800ae50:	1955      	adds	r5, r2, r5
 800ae52:	6922      	ldr	r2, [r4, #16]
 800ae54:	3314      	adds	r3, #20
 800ae56:	0092      	lsls	r2, r2, #2
 800ae58:	4008      	ands	r0, r1
 800ae5a:	4684      	mov	ip, r0
 800ae5c:	189a      	adds	r2, r3, r2
 800ae5e:	420f      	tst	r7, r1
 800ae60:	d02a      	beq.n	800aeb8 <__lshift+0xc8>
 800ae62:	3101      	adds	r1, #1
 800ae64:	1a09      	subs	r1, r1, r0
 800ae66:	9105      	str	r1, [sp, #20]
 800ae68:	2100      	movs	r1, #0
 800ae6a:	9503      	str	r5, [sp, #12]
 800ae6c:	4667      	mov	r7, ip
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	40b8      	lsls	r0, r7
 800ae72:	4308      	orrs	r0, r1
 800ae74:	9903      	ldr	r1, [sp, #12]
 800ae76:	c101      	stmia	r1!, {r0}
 800ae78:	9103      	str	r1, [sp, #12]
 800ae7a:	9805      	ldr	r0, [sp, #20]
 800ae7c:	cb02      	ldmia	r3!, {r1}
 800ae7e:	40c1      	lsrs	r1, r0
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d8f3      	bhi.n	800ae6c <__lshift+0x7c>
 800ae84:	0020      	movs	r0, r4
 800ae86:	3015      	adds	r0, #21
 800ae88:	2304      	movs	r3, #4
 800ae8a:	4282      	cmp	r2, r0
 800ae8c:	d304      	bcc.n	800ae98 <__lshift+0xa8>
 800ae8e:	1b13      	subs	r3, r2, r4
 800ae90:	3b15      	subs	r3, #21
 800ae92:	089b      	lsrs	r3, r3, #2
 800ae94:	3301      	adds	r3, #1
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	50e9      	str	r1, [r5, r3]
 800ae9a:	2900      	cmp	r1, #0
 800ae9c:	d002      	beq.n	800aea4 <__lshift+0xb4>
 800ae9e:	9b02      	ldr	r3, [sp, #8]
 800aea0:	3302      	adds	r3, #2
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	9b01      	ldr	r3, [sp, #4]
 800aea6:	9804      	ldr	r0, [sp, #16]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	0021      	movs	r1, r4
 800aeac:	6133      	str	r3, [r6, #16]
 800aeae:	f7ff fd7f 	bl	800a9b0 <_Bfree>
 800aeb2:	0030      	movs	r0, r6
 800aeb4:	b007      	add	sp, #28
 800aeb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeb8:	cb02      	ldmia	r3!, {r1}
 800aeba:	c502      	stmia	r5!, {r1}
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d8fb      	bhi.n	800aeb8 <__lshift+0xc8>
 800aec0:	e7f0      	b.n	800aea4 <__lshift+0xb4>
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	0800bf86 	.word	0x0800bf86
 800aec8:	0800bff7 	.word	0x0800bff7

0800aecc <__mcmp>:
 800aecc:	b530      	push	{r4, r5, lr}
 800aece:	690b      	ldr	r3, [r1, #16]
 800aed0:	6904      	ldr	r4, [r0, #16]
 800aed2:	0002      	movs	r2, r0
 800aed4:	1ae0      	subs	r0, r4, r3
 800aed6:	429c      	cmp	r4, r3
 800aed8:	d10e      	bne.n	800aef8 <__mcmp+0x2c>
 800aeda:	3214      	adds	r2, #20
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	3114      	adds	r1, #20
 800aee0:	0014      	movs	r4, r2
 800aee2:	18c9      	adds	r1, r1, r3
 800aee4:	18d2      	adds	r2, r2, r3
 800aee6:	3a04      	subs	r2, #4
 800aee8:	3904      	subs	r1, #4
 800aeea:	6815      	ldr	r5, [r2, #0]
 800aeec:	680b      	ldr	r3, [r1, #0]
 800aeee:	429d      	cmp	r5, r3
 800aef0:	d003      	beq.n	800aefa <__mcmp+0x2e>
 800aef2:	2001      	movs	r0, #1
 800aef4:	429d      	cmp	r5, r3
 800aef6:	d303      	bcc.n	800af00 <__mcmp+0x34>
 800aef8:	bd30      	pop	{r4, r5, pc}
 800aefa:	4294      	cmp	r4, r2
 800aefc:	d3f3      	bcc.n	800aee6 <__mcmp+0x1a>
 800aefe:	e7fb      	b.n	800aef8 <__mcmp+0x2c>
 800af00:	4240      	negs	r0, r0
 800af02:	e7f9      	b.n	800aef8 <__mcmp+0x2c>

0800af04 <__mdiff>:
 800af04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af06:	000e      	movs	r6, r1
 800af08:	0007      	movs	r7, r0
 800af0a:	0011      	movs	r1, r2
 800af0c:	0030      	movs	r0, r6
 800af0e:	b087      	sub	sp, #28
 800af10:	0014      	movs	r4, r2
 800af12:	f7ff ffdb 	bl	800aecc <__mcmp>
 800af16:	1e05      	subs	r5, r0, #0
 800af18:	d110      	bne.n	800af3c <__mdiff+0x38>
 800af1a:	0001      	movs	r1, r0
 800af1c:	0038      	movs	r0, r7
 800af1e:	f7ff fd03 	bl	800a928 <_Balloc>
 800af22:	1e02      	subs	r2, r0, #0
 800af24:	d104      	bne.n	800af30 <__mdiff+0x2c>
 800af26:	4b3f      	ldr	r3, [pc, #252]	; (800b024 <__mdiff+0x120>)
 800af28:	483f      	ldr	r0, [pc, #252]	; (800b028 <__mdiff+0x124>)
 800af2a:	4940      	ldr	r1, [pc, #256]	; (800b02c <__mdiff+0x128>)
 800af2c:	f000 fdd0 	bl	800bad0 <__assert_func>
 800af30:	2301      	movs	r3, #1
 800af32:	6145      	str	r5, [r0, #20]
 800af34:	6103      	str	r3, [r0, #16]
 800af36:	0010      	movs	r0, r2
 800af38:	b007      	add	sp, #28
 800af3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af3c:	2301      	movs	r3, #1
 800af3e:	9301      	str	r3, [sp, #4]
 800af40:	2800      	cmp	r0, #0
 800af42:	db04      	blt.n	800af4e <__mdiff+0x4a>
 800af44:	0023      	movs	r3, r4
 800af46:	0034      	movs	r4, r6
 800af48:	001e      	movs	r6, r3
 800af4a:	2300      	movs	r3, #0
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	0038      	movs	r0, r7
 800af50:	6861      	ldr	r1, [r4, #4]
 800af52:	f7ff fce9 	bl	800a928 <_Balloc>
 800af56:	1e02      	subs	r2, r0, #0
 800af58:	d103      	bne.n	800af62 <__mdiff+0x5e>
 800af5a:	4b32      	ldr	r3, [pc, #200]	; (800b024 <__mdiff+0x120>)
 800af5c:	4832      	ldr	r0, [pc, #200]	; (800b028 <__mdiff+0x124>)
 800af5e:	4934      	ldr	r1, [pc, #208]	; (800b030 <__mdiff+0x12c>)
 800af60:	e7e4      	b.n	800af2c <__mdiff+0x28>
 800af62:	9b01      	ldr	r3, [sp, #4]
 800af64:	2700      	movs	r7, #0
 800af66:	60c3      	str	r3, [r0, #12]
 800af68:	6920      	ldr	r0, [r4, #16]
 800af6a:	3414      	adds	r4, #20
 800af6c:	0083      	lsls	r3, r0, #2
 800af6e:	18e3      	adds	r3, r4, r3
 800af70:	0021      	movs	r1, r4
 800af72:	9401      	str	r4, [sp, #4]
 800af74:	0034      	movs	r4, r6
 800af76:	9302      	str	r3, [sp, #8]
 800af78:	6933      	ldr	r3, [r6, #16]
 800af7a:	3414      	adds	r4, #20
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	18e3      	adds	r3, r4, r3
 800af80:	9303      	str	r3, [sp, #12]
 800af82:	0013      	movs	r3, r2
 800af84:	3314      	adds	r3, #20
 800af86:	469c      	mov	ip, r3
 800af88:	9305      	str	r3, [sp, #20]
 800af8a:	9104      	str	r1, [sp, #16]
 800af8c:	9b04      	ldr	r3, [sp, #16]
 800af8e:	cc02      	ldmia	r4!, {r1}
 800af90:	cb20      	ldmia	r3!, {r5}
 800af92:	9304      	str	r3, [sp, #16]
 800af94:	b2ab      	uxth	r3, r5
 800af96:	19df      	adds	r7, r3, r7
 800af98:	b28b      	uxth	r3, r1
 800af9a:	1afb      	subs	r3, r7, r3
 800af9c:	0c09      	lsrs	r1, r1, #16
 800af9e:	0c2d      	lsrs	r5, r5, #16
 800afa0:	1a6d      	subs	r5, r5, r1
 800afa2:	1419      	asrs	r1, r3, #16
 800afa4:	1869      	adds	r1, r5, r1
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	140f      	asrs	r7, r1, #16
 800afaa:	0409      	lsls	r1, r1, #16
 800afac:	4319      	orrs	r1, r3
 800afae:	4663      	mov	r3, ip
 800afb0:	c302      	stmia	r3!, {r1}
 800afb2:	469c      	mov	ip, r3
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	d8e8      	bhi.n	800af8c <__mdiff+0x88>
 800afba:	0031      	movs	r1, r6
 800afbc:	9c03      	ldr	r4, [sp, #12]
 800afbe:	3115      	adds	r1, #21
 800afc0:	2304      	movs	r3, #4
 800afc2:	428c      	cmp	r4, r1
 800afc4:	d304      	bcc.n	800afd0 <__mdiff+0xcc>
 800afc6:	1ba3      	subs	r3, r4, r6
 800afc8:	3b15      	subs	r3, #21
 800afca:	089b      	lsrs	r3, r3, #2
 800afcc:	3301      	adds	r3, #1
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	9901      	ldr	r1, [sp, #4]
 800afd2:	18cd      	adds	r5, r1, r3
 800afd4:	9905      	ldr	r1, [sp, #20]
 800afd6:	002e      	movs	r6, r5
 800afd8:	18cb      	adds	r3, r1, r3
 800afda:	469c      	mov	ip, r3
 800afdc:	9902      	ldr	r1, [sp, #8]
 800afde:	428e      	cmp	r6, r1
 800afe0:	d310      	bcc.n	800b004 <__mdiff+0x100>
 800afe2:	9e02      	ldr	r6, [sp, #8]
 800afe4:	1ee9      	subs	r1, r5, #3
 800afe6:	2400      	movs	r4, #0
 800afe8:	428e      	cmp	r6, r1
 800afea:	d304      	bcc.n	800aff6 <__mdiff+0xf2>
 800afec:	0031      	movs	r1, r6
 800afee:	3103      	adds	r1, #3
 800aff0:	1b49      	subs	r1, r1, r5
 800aff2:	0889      	lsrs	r1, r1, #2
 800aff4:	008c      	lsls	r4, r1, #2
 800aff6:	191b      	adds	r3, r3, r4
 800aff8:	3b04      	subs	r3, #4
 800affa:	6819      	ldr	r1, [r3, #0]
 800affc:	2900      	cmp	r1, #0
 800affe:	d00f      	beq.n	800b020 <__mdiff+0x11c>
 800b000:	6110      	str	r0, [r2, #16]
 800b002:	e798      	b.n	800af36 <__mdiff+0x32>
 800b004:	ce02      	ldmia	r6!, {r1}
 800b006:	b28c      	uxth	r4, r1
 800b008:	19e4      	adds	r4, r4, r7
 800b00a:	0c0f      	lsrs	r7, r1, #16
 800b00c:	1421      	asrs	r1, r4, #16
 800b00e:	1879      	adds	r1, r7, r1
 800b010:	b2a4      	uxth	r4, r4
 800b012:	140f      	asrs	r7, r1, #16
 800b014:	0409      	lsls	r1, r1, #16
 800b016:	4321      	orrs	r1, r4
 800b018:	4664      	mov	r4, ip
 800b01a:	c402      	stmia	r4!, {r1}
 800b01c:	46a4      	mov	ip, r4
 800b01e:	e7dd      	b.n	800afdc <__mdiff+0xd8>
 800b020:	3801      	subs	r0, #1
 800b022:	e7e9      	b.n	800aff8 <__mdiff+0xf4>
 800b024:	0800bf86 	.word	0x0800bf86
 800b028:	0800bff7 	.word	0x0800bff7
 800b02c:	00000237 	.word	0x00000237
 800b030:	00000245 	.word	0x00000245

0800b034 <__ulp>:
 800b034:	2000      	movs	r0, #0
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <__ulp+0x30>)
 800b038:	4019      	ands	r1, r3
 800b03a:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <__ulp+0x34>)
 800b03c:	18c9      	adds	r1, r1, r3
 800b03e:	4281      	cmp	r1, r0
 800b040:	dc06      	bgt.n	800b050 <__ulp+0x1c>
 800b042:	4249      	negs	r1, r1
 800b044:	150b      	asrs	r3, r1, #20
 800b046:	2b13      	cmp	r3, #19
 800b048:	dc03      	bgt.n	800b052 <__ulp+0x1e>
 800b04a:	2180      	movs	r1, #128	; 0x80
 800b04c:	0309      	lsls	r1, r1, #12
 800b04e:	4119      	asrs	r1, r3
 800b050:	4770      	bx	lr
 800b052:	3b14      	subs	r3, #20
 800b054:	2001      	movs	r0, #1
 800b056:	2b1e      	cmp	r3, #30
 800b058:	dc02      	bgt.n	800b060 <__ulp+0x2c>
 800b05a:	2080      	movs	r0, #128	; 0x80
 800b05c:	0600      	lsls	r0, r0, #24
 800b05e:	40d8      	lsrs	r0, r3
 800b060:	2100      	movs	r1, #0
 800b062:	e7f5      	b.n	800b050 <__ulp+0x1c>
 800b064:	7ff00000 	.word	0x7ff00000
 800b068:	fcc00000 	.word	0xfcc00000

0800b06c <__b2d>:
 800b06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b06e:	0006      	movs	r6, r0
 800b070:	6903      	ldr	r3, [r0, #16]
 800b072:	3614      	adds	r6, #20
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	18f3      	adds	r3, r6, r3
 800b078:	1f1d      	subs	r5, r3, #4
 800b07a:	682c      	ldr	r4, [r5, #0]
 800b07c:	000f      	movs	r7, r1
 800b07e:	0020      	movs	r0, r4
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	f7ff fd49 	bl	800ab18 <__hi0bits>
 800b086:	2220      	movs	r2, #32
 800b088:	1a12      	subs	r2, r2, r0
 800b08a:	603a      	str	r2, [r7, #0]
 800b08c:	0003      	movs	r3, r0
 800b08e:	4a1c      	ldr	r2, [pc, #112]	; (800b100 <__b2d+0x94>)
 800b090:	280a      	cmp	r0, #10
 800b092:	dc15      	bgt.n	800b0c0 <__b2d+0x54>
 800b094:	210b      	movs	r1, #11
 800b096:	0027      	movs	r7, r4
 800b098:	1a09      	subs	r1, r1, r0
 800b09a:	40cf      	lsrs	r7, r1
 800b09c:	433a      	orrs	r2, r7
 800b09e:	468c      	mov	ip, r1
 800b0a0:	0011      	movs	r1, r2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	42ae      	cmp	r6, r5
 800b0a6:	d202      	bcs.n	800b0ae <__b2d+0x42>
 800b0a8:	9a01      	ldr	r2, [sp, #4]
 800b0aa:	3a08      	subs	r2, #8
 800b0ac:	6812      	ldr	r2, [r2, #0]
 800b0ae:	3315      	adds	r3, #21
 800b0b0:	409c      	lsls	r4, r3
 800b0b2:	4663      	mov	r3, ip
 800b0b4:	0027      	movs	r7, r4
 800b0b6:	40da      	lsrs	r2, r3
 800b0b8:	4317      	orrs	r7, r2
 800b0ba:	0038      	movs	r0, r7
 800b0bc:	b003      	add	sp, #12
 800b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c0:	2700      	movs	r7, #0
 800b0c2:	42ae      	cmp	r6, r5
 800b0c4:	d202      	bcs.n	800b0cc <__b2d+0x60>
 800b0c6:	9d01      	ldr	r5, [sp, #4]
 800b0c8:	3d08      	subs	r5, #8
 800b0ca:	682f      	ldr	r7, [r5, #0]
 800b0cc:	210b      	movs	r1, #11
 800b0ce:	4249      	negs	r1, r1
 800b0d0:	468c      	mov	ip, r1
 800b0d2:	449c      	add	ip, r3
 800b0d4:	2b0b      	cmp	r3, #11
 800b0d6:	d010      	beq.n	800b0fa <__b2d+0x8e>
 800b0d8:	4661      	mov	r1, ip
 800b0da:	2320      	movs	r3, #32
 800b0dc:	408c      	lsls	r4, r1
 800b0de:	1a5b      	subs	r3, r3, r1
 800b0e0:	0039      	movs	r1, r7
 800b0e2:	40d9      	lsrs	r1, r3
 800b0e4:	430c      	orrs	r4, r1
 800b0e6:	4322      	orrs	r2, r4
 800b0e8:	0011      	movs	r1, r2
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	42b5      	cmp	r5, r6
 800b0ee:	d901      	bls.n	800b0f4 <__b2d+0x88>
 800b0f0:	3d04      	subs	r5, #4
 800b0f2:	682a      	ldr	r2, [r5, #0]
 800b0f4:	4664      	mov	r4, ip
 800b0f6:	40a7      	lsls	r7, r4
 800b0f8:	e7dd      	b.n	800b0b6 <__b2d+0x4a>
 800b0fa:	4322      	orrs	r2, r4
 800b0fc:	0011      	movs	r1, r2
 800b0fe:	e7dc      	b.n	800b0ba <__b2d+0x4e>
 800b100:	3ff00000 	.word	0x3ff00000

0800b104 <__d2b>:
 800b104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b106:	2101      	movs	r1, #1
 800b108:	0014      	movs	r4, r2
 800b10a:	001d      	movs	r5, r3
 800b10c:	9f08      	ldr	r7, [sp, #32]
 800b10e:	f7ff fc0b 	bl	800a928 <_Balloc>
 800b112:	1e06      	subs	r6, r0, #0
 800b114:	d105      	bne.n	800b122 <__d2b+0x1e>
 800b116:	0032      	movs	r2, r6
 800b118:	4b24      	ldr	r3, [pc, #144]	; (800b1ac <__d2b+0xa8>)
 800b11a:	4825      	ldr	r0, [pc, #148]	; (800b1b0 <__d2b+0xac>)
 800b11c:	4925      	ldr	r1, [pc, #148]	; (800b1b4 <__d2b+0xb0>)
 800b11e:	f000 fcd7 	bl	800bad0 <__assert_func>
 800b122:	032b      	lsls	r3, r5, #12
 800b124:	006d      	lsls	r5, r5, #1
 800b126:	0b1b      	lsrs	r3, r3, #12
 800b128:	0d6d      	lsrs	r5, r5, #21
 800b12a:	d125      	bne.n	800b178 <__d2b+0x74>
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	2c00      	cmp	r4, #0
 800b130:	d028      	beq.n	800b184 <__d2b+0x80>
 800b132:	4668      	mov	r0, sp
 800b134:	9400      	str	r4, [sp, #0]
 800b136:	f7ff fd09 	bl	800ab4c <__lo0bits>
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	9900      	ldr	r1, [sp, #0]
 800b13e:	2800      	cmp	r0, #0
 800b140:	d01e      	beq.n	800b180 <__d2b+0x7c>
 800b142:	2220      	movs	r2, #32
 800b144:	001c      	movs	r4, r3
 800b146:	1a12      	subs	r2, r2, r0
 800b148:	4094      	lsls	r4, r2
 800b14a:	0022      	movs	r2, r4
 800b14c:	40c3      	lsrs	r3, r0
 800b14e:	430a      	orrs	r2, r1
 800b150:	6172      	str	r2, [r6, #20]
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	9c01      	ldr	r4, [sp, #4]
 800b156:	61b4      	str	r4, [r6, #24]
 800b158:	1e63      	subs	r3, r4, #1
 800b15a:	419c      	sbcs	r4, r3
 800b15c:	3401      	adds	r4, #1
 800b15e:	6134      	str	r4, [r6, #16]
 800b160:	2d00      	cmp	r5, #0
 800b162:	d017      	beq.n	800b194 <__d2b+0x90>
 800b164:	2435      	movs	r4, #53	; 0x35
 800b166:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <__d2b+0xb4>)
 800b168:	18ed      	adds	r5, r5, r3
 800b16a:	182d      	adds	r5, r5, r0
 800b16c:	603d      	str	r5, [r7, #0]
 800b16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b170:	1a24      	subs	r4, r4, r0
 800b172:	601c      	str	r4, [r3, #0]
 800b174:	0030      	movs	r0, r6
 800b176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b178:	2280      	movs	r2, #128	; 0x80
 800b17a:	0352      	lsls	r2, r2, #13
 800b17c:	4313      	orrs	r3, r2
 800b17e:	e7d5      	b.n	800b12c <__d2b+0x28>
 800b180:	6171      	str	r1, [r6, #20]
 800b182:	e7e7      	b.n	800b154 <__d2b+0x50>
 800b184:	a801      	add	r0, sp, #4
 800b186:	f7ff fce1 	bl	800ab4c <__lo0bits>
 800b18a:	9b01      	ldr	r3, [sp, #4]
 800b18c:	2401      	movs	r4, #1
 800b18e:	6173      	str	r3, [r6, #20]
 800b190:	3020      	adds	r0, #32
 800b192:	e7e4      	b.n	800b15e <__d2b+0x5a>
 800b194:	4b09      	ldr	r3, [pc, #36]	; (800b1bc <__d2b+0xb8>)
 800b196:	18c0      	adds	r0, r0, r3
 800b198:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <__d2b+0xbc>)
 800b19a:	6038      	str	r0, [r7, #0]
 800b19c:	18e3      	adds	r3, r4, r3
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	18f3      	adds	r3, r6, r3
 800b1a2:	6958      	ldr	r0, [r3, #20]
 800b1a4:	f7ff fcb8 	bl	800ab18 <__hi0bits>
 800b1a8:	0164      	lsls	r4, r4, #5
 800b1aa:	e7e0      	b.n	800b16e <__d2b+0x6a>
 800b1ac:	0800bf86 	.word	0x0800bf86
 800b1b0:	0800bff7 	.word	0x0800bff7
 800b1b4:	0000030f 	.word	0x0000030f
 800b1b8:	fffffbcd 	.word	0xfffffbcd
 800b1bc:	fffffbce 	.word	0xfffffbce
 800b1c0:	3fffffff 	.word	0x3fffffff

0800b1c4 <__ratio>:
 800b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	000f      	movs	r7, r1
 800b1ca:	a904      	add	r1, sp, #16
 800b1cc:	0006      	movs	r6, r0
 800b1ce:	f7ff ff4d 	bl	800b06c <__b2d>
 800b1d2:	9000      	str	r0, [sp, #0]
 800b1d4:	9101      	str	r1, [sp, #4]
 800b1d6:	9c00      	ldr	r4, [sp, #0]
 800b1d8:	9d01      	ldr	r5, [sp, #4]
 800b1da:	0038      	movs	r0, r7
 800b1dc:	a905      	add	r1, sp, #20
 800b1de:	f7ff ff45 	bl	800b06c <__b2d>
 800b1e2:	9002      	str	r0, [sp, #8]
 800b1e4:	9103      	str	r1, [sp, #12]
 800b1e6:	9a02      	ldr	r2, [sp, #8]
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	6930      	ldr	r0, [r6, #16]
 800b1ec:	6939      	ldr	r1, [r7, #16]
 800b1ee:	9e04      	ldr	r6, [sp, #16]
 800b1f0:	1a40      	subs	r0, r0, r1
 800b1f2:	9905      	ldr	r1, [sp, #20]
 800b1f4:	0140      	lsls	r0, r0, #5
 800b1f6:	1a71      	subs	r1, r6, r1
 800b1f8:	1841      	adds	r1, r0, r1
 800b1fa:	0508      	lsls	r0, r1, #20
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	dd07      	ble.n	800b210 <__ratio+0x4c>
 800b200:	9901      	ldr	r1, [sp, #4]
 800b202:	1845      	adds	r5, r0, r1
 800b204:	0020      	movs	r0, r4
 800b206:	0029      	movs	r1, r5
 800b208:	f7f5 fe38 	bl	8000e7c <__aeabi_ddiv>
 800b20c:	b007      	add	sp, #28
 800b20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b210:	9903      	ldr	r1, [sp, #12]
 800b212:	1a0b      	subs	r3, r1, r0
 800b214:	e7f6      	b.n	800b204 <__ratio+0x40>

0800b216 <__copybits>:
 800b216:	b570      	push	{r4, r5, r6, lr}
 800b218:	0014      	movs	r4, r2
 800b21a:	0005      	movs	r5, r0
 800b21c:	3901      	subs	r1, #1
 800b21e:	6913      	ldr	r3, [r2, #16]
 800b220:	1149      	asrs	r1, r1, #5
 800b222:	3101      	adds	r1, #1
 800b224:	0089      	lsls	r1, r1, #2
 800b226:	3414      	adds	r4, #20
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	1841      	adds	r1, r0, r1
 800b22c:	18e3      	adds	r3, r4, r3
 800b22e:	42a3      	cmp	r3, r4
 800b230:	d80d      	bhi.n	800b24e <__copybits+0x38>
 800b232:	0014      	movs	r4, r2
 800b234:	3411      	adds	r4, #17
 800b236:	2500      	movs	r5, #0
 800b238:	429c      	cmp	r4, r3
 800b23a:	d803      	bhi.n	800b244 <__copybits+0x2e>
 800b23c:	1a9b      	subs	r3, r3, r2
 800b23e:	3b11      	subs	r3, #17
 800b240:	089b      	lsrs	r3, r3, #2
 800b242:	009d      	lsls	r5, r3, #2
 800b244:	2300      	movs	r3, #0
 800b246:	1940      	adds	r0, r0, r5
 800b248:	4281      	cmp	r1, r0
 800b24a:	d803      	bhi.n	800b254 <__copybits+0x3e>
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
 800b24e:	cc40      	ldmia	r4!, {r6}
 800b250:	c540      	stmia	r5!, {r6}
 800b252:	e7ec      	b.n	800b22e <__copybits+0x18>
 800b254:	c008      	stmia	r0!, {r3}
 800b256:	e7f7      	b.n	800b248 <__copybits+0x32>

0800b258 <__any_on>:
 800b258:	0002      	movs	r2, r0
 800b25a:	6900      	ldr	r0, [r0, #16]
 800b25c:	b510      	push	{r4, lr}
 800b25e:	3214      	adds	r2, #20
 800b260:	114b      	asrs	r3, r1, #5
 800b262:	4298      	cmp	r0, r3
 800b264:	db13      	blt.n	800b28e <__any_on+0x36>
 800b266:	dd0c      	ble.n	800b282 <__any_on+0x2a>
 800b268:	241f      	movs	r4, #31
 800b26a:	0008      	movs	r0, r1
 800b26c:	4020      	ands	r0, r4
 800b26e:	4221      	tst	r1, r4
 800b270:	d007      	beq.n	800b282 <__any_on+0x2a>
 800b272:	0099      	lsls	r1, r3, #2
 800b274:	588c      	ldr	r4, [r1, r2]
 800b276:	0021      	movs	r1, r4
 800b278:	40c1      	lsrs	r1, r0
 800b27a:	4081      	lsls	r1, r0
 800b27c:	2001      	movs	r0, #1
 800b27e:	428c      	cmp	r4, r1
 800b280:	d104      	bne.n	800b28c <__any_on+0x34>
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	18d3      	adds	r3, r2, r3
 800b286:	4293      	cmp	r3, r2
 800b288:	d803      	bhi.n	800b292 <__any_on+0x3a>
 800b28a:	2000      	movs	r0, #0
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	0003      	movs	r3, r0
 800b290:	e7f7      	b.n	800b282 <__any_on+0x2a>
 800b292:	3b04      	subs	r3, #4
 800b294:	6819      	ldr	r1, [r3, #0]
 800b296:	2900      	cmp	r1, #0
 800b298:	d0f5      	beq.n	800b286 <__any_on+0x2e>
 800b29a:	2001      	movs	r0, #1
 800b29c:	e7f6      	b.n	800b28c <__any_on+0x34>

0800b29e <__ascii_wctomb>:
 800b29e:	0003      	movs	r3, r0
 800b2a0:	1e08      	subs	r0, r1, #0
 800b2a2:	d005      	beq.n	800b2b0 <__ascii_wctomb+0x12>
 800b2a4:	2aff      	cmp	r2, #255	; 0xff
 800b2a6:	d904      	bls.n	800b2b2 <__ascii_wctomb+0x14>
 800b2a8:	228a      	movs	r2, #138	; 0x8a
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	4240      	negs	r0, r0
 800b2b0:	4770      	bx	lr
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	700a      	strb	r2, [r1, #0]
 800b2b6:	e7fb      	b.n	800b2b0 <__ascii_wctomb+0x12>

0800b2b8 <__ssputs_r>:
 800b2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	9203      	str	r2, [sp, #12]
 800b2c0:	688e      	ldr	r6, [r1, #8]
 800b2c2:	9a01      	ldr	r2, [sp, #4]
 800b2c4:	0007      	movs	r7, r0
 800b2c6:	000c      	movs	r4, r1
 800b2c8:	680b      	ldr	r3, [r1, #0]
 800b2ca:	4296      	cmp	r6, r2
 800b2cc:	d831      	bhi.n	800b332 <__ssputs_r+0x7a>
 800b2ce:	898a      	ldrh	r2, [r1, #12]
 800b2d0:	2190      	movs	r1, #144	; 0x90
 800b2d2:	00c9      	lsls	r1, r1, #3
 800b2d4:	420a      	tst	r2, r1
 800b2d6:	d029      	beq.n	800b32c <__ssputs_r+0x74>
 800b2d8:	2003      	movs	r0, #3
 800b2da:	6921      	ldr	r1, [r4, #16]
 800b2dc:	1a5b      	subs	r3, r3, r1
 800b2de:	9302      	str	r3, [sp, #8]
 800b2e0:	6963      	ldr	r3, [r4, #20]
 800b2e2:	4343      	muls	r3, r0
 800b2e4:	0fdd      	lsrs	r5, r3, #31
 800b2e6:	18ed      	adds	r5, r5, r3
 800b2e8:	9b01      	ldr	r3, [sp, #4]
 800b2ea:	9802      	ldr	r0, [sp, #8]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	181b      	adds	r3, r3, r0
 800b2f0:	106d      	asrs	r5, r5, #1
 800b2f2:	42ab      	cmp	r3, r5
 800b2f4:	d900      	bls.n	800b2f8 <__ssputs_r+0x40>
 800b2f6:	001d      	movs	r5, r3
 800b2f8:	0552      	lsls	r2, r2, #21
 800b2fa:	d529      	bpl.n	800b350 <__ssputs_r+0x98>
 800b2fc:	0029      	movs	r1, r5
 800b2fe:	0038      	movs	r0, r7
 800b300:	f7ff fa6e 	bl	800a7e0 <_malloc_r>
 800b304:	1e06      	subs	r6, r0, #0
 800b306:	d02d      	beq.n	800b364 <__ssputs_r+0xac>
 800b308:	9a02      	ldr	r2, [sp, #8]
 800b30a:	6921      	ldr	r1, [r4, #16]
 800b30c:	f7fd ffe4 	bl	80092d8 <memcpy>
 800b310:	89a2      	ldrh	r2, [r4, #12]
 800b312:	4b19      	ldr	r3, [pc, #100]	; (800b378 <__ssputs_r+0xc0>)
 800b314:	401a      	ands	r2, r3
 800b316:	2380      	movs	r3, #128	; 0x80
 800b318:	4313      	orrs	r3, r2
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	6126      	str	r6, [r4, #16]
 800b320:	18f6      	adds	r6, r6, r3
 800b322:	6026      	str	r6, [r4, #0]
 800b324:	6165      	str	r5, [r4, #20]
 800b326:	9e01      	ldr	r6, [sp, #4]
 800b328:	1aed      	subs	r5, r5, r3
 800b32a:	60a5      	str	r5, [r4, #8]
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	429e      	cmp	r6, r3
 800b330:	d900      	bls.n	800b334 <__ssputs_r+0x7c>
 800b332:	9e01      	ldr	r6, [sp, #4]
 800b334:	0032      	movs	r2, r6
 800b336:	9903      	ldr	r1, [sp, #12]
 800b338:	6820      	ldr	r0, [r4, #0]
 800b33a:	f000 fb7f 	bl	800ba3c <memmove>
 800b33e:	2000      	movs	r0, #0
 800b340:	68a3      	ldr	r3, [r4, #8]
 800b342:	1b9b      	subs	r3, r3, r6
 800b344:	60a3      	str	r3, [r4, #8]
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	199b      	adds	r3, r3, r6
 800b34a:	6023      	str	r3, [r4, #0]
 800b34c:	b005      	add	sp, #20
 800b34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b350:	002a      	movs	r2, r5
 800b352:	0038      	movs	r0, r7
 800b354:	f000 fc07 	bl	800bb66 <_realloc_r>
 800b358:	1e06      	subs	r6, r0, #0
 800b35a:	d1df      	bne.n	800b31c <__ssputs_r+0x64>
 800b35c:	0038      	movs	r0, r7
 800b35e:	6921      	ldr	r1, [r4, #16]
 800b360:	f7fe fe6c 	bl	800a03c <_free_r>
 800b364:	230c      	movs	r3, #12
 800b366:	2001      	movs	r0, #1
 800b368:	603b      	str	r3, [r7, #0]
 800b36a:	89a2      	ldrh	r2, [r4, #12]
 800b36c:	3334      	adds	r3, #52	; 0x34
 800b36e:	4313      	orrs	r3, r2
 800b370:	81a3      	strh	r3, [r4, #12]
 800b372:	4240      	negs	r0, r0
 800b374:	e7ea      	b.n	800b34c <__ssputs_r+0x94>
 800b376:	46c0      	nop			; (mov r8, r8)
 800b378:	fffffb7f 	.word	0xfffffb7f

0800b37c <_svfiprintf_r>:
 800b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37e:	b0a1      	sub	sp, #132	; 0x84
 800b380:	9003      	str	r0, [sp, #12]
 800b382:	001d      	movs	r5, r3
 800b384:	898b      	ldrh	r3, [r1, #12]
 800b386:	000f      	movs	r7, r1
 800b388:	0016      	movs	r6, r2
 800b38a:	061b      	lsls	r3, r3, #24
 800b38c:	d511      	bpl.n	800b3b2 <_svfiprintf_r+0x36>
 800b38e:	690b      	ldr	r3, [r1, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10e      	bne.n	800b3b2 <_svfiprintf_r+0x36>
 800b394:	2140      	movs	r1, #64	; 0x40
 800b396:	f7ff fa23 	bl	800a7e0 <_malloc_r>
 800b39a:	6038      	str	r0, [r7, #0]
 800b39c:	6138      	str	r0, [r7, #16]
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d105      	bne.n	800b3ae <_svfiprintf_r+0x32>
 800b3a2:	230c      	movs	r3, #12
 800b3a4:	9a03      	ldr	r2, [sp, #12]
 800b3a6:	3801      	subs	r0, #1
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	b021      	add	sp, #132	; 0x84
 800b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ae:	2340      	movs	r3, #64	; 0x40
 800b3b0:	617b      	str	r3, [r7, #20]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	ac08      	add	r4, sp, #32
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	3320      	adds	r3, #32
 800b3ba:	7663      	strb	r3, [r4, #25]
 800b3bc:	3310      	adds	r3, #16
 800b3be:	76a3      	strb	r3, [r4, #26]
 800b3c0:	9507      	str	r5, [sp, #28]
 800b3c2:	0035      	movs	r5, r6
 800b3c4:	782b      	ldrb	r3, [r5, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <_svfiprintf_r+0x52>
 800b3ca:	2b25      	cmp	r3, #37	; 0x25
 800b3cc:	d148      	bne.n	800b460 <_svfiprintf_r+0xe4>
 800b3ce:	1bab      	subs	r3, r5, r6
 800b3d0:	9305      	str	r3, [sp, #20]
 800b3d2:	42b5      	cmp	r5, r6
 800b3d4:	d00b      	beq.n	800b3ee <_svfiprintf_r+0x72>
 800b3d6:	0032      	movs	r2, r6
 800b3d8:	0039      	movs	r1, r7
 800b3da:	9803      	ldr	r0, [sp, #12]
 800b3dc:	f7ff ff6c 	bl	800b2b8 <__ssputs_r>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d100      	bne.n	800b3e6 <_svfiprintf_r+0x6a>
 800b3e4:	e0af      	b.n	800b546 <_svfiprintf_r+0x1ca>
 800b3e6:	6963      	ldr	r3, [r4, #20]
 800b3e8:	9a05      	ldr	r2, [sp, #20]
 800b3ea:	189b      	adds	r3, r3, r2
 800b3ec:	6163      	str	r3, [r4, #20]
 800b3ee:	782b      	ldrb	r3, [r5, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d100      	bne.n	800b3f6 <_svfiprintf_r+0x7a>
 800b3f4:	e0a7      	b.n	800b546 <_svfiprintf_r+0x1ca>
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	4252      	negs	r2, r2
 800b3fc:	6062      	str	r2, [r4, #4]
 800b3fe:	a904      	add	r1, sp, #16
 800b400:	3254      	adds	r2, #84	; 0x54
 800b402:	1852      	adds	r2, r2, r1
 800b404:	1c6e      	adds	r6, r5, #1
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	60e3      	str	r3, [r4, #12]
 800b40a:	60a3      	str	r3, [r4, #8]
 800b40c:	7013      	strb	r3, [r2, #0]
 800b40e:	65a3      	str	r3, [r4, #88]	; 0x58
 800b410:	4b55      	ldr	r3, [pc, #340]	; (800b568 <_svfiprintf_r+0x1ec>)
 800b412:	2205      	movs	r2, #5
 800b414:	0018      	movs	r0, r3
 800b416:	7831      	ldrb	r1, [r6, #0]
 800b418:	9305      	str	r3, [sp, #20]
 800b41a:	f7fd ff52 	bl	80092c2 <memchr>
 800b41e:	1c75      	adds	r5, r6, #1
 800b420:	2800      	cmp	r0, #0
 800b422:	d11f      	bne.n	800b464 <_svfiprintf_r+0xe8>
 800b424:	6822      	ldr	r2, [r4, #0]
 800b426:	06d3      	lsls	r3, r2, #27
 800b428:	d504      	bpl.n	800b434 <_svfiprintf_r+0xb8>
 800b42a:	2353      	movs	r3, #83	; 0x53
 800b42c:	a904      	add	r1, sp, #16
 800b42e:	185b      	adds	r3, r3, r1
 800b430:	2120      	movs	r1, #32
 800b432:	7019      	strb	r1, [r3, #0]
 800b434:	0713      	lsls	r3, r2, #28
 800b436:	d504      	bpl.n	800b442 <_svfiprintf_r+0xc6>
 800b438:	2353      	movs	r3, #83	; 0x53
 800b43a:	a904      	add	r1, sp, #16
 800b43c:	185b      	adds	r3, r3, r1
 800b43e:	212b      	movs	r1, #43	; 0x2b
 800b440:	7019      	strb	r1, [r3, #0]
 800b442:	7833      	ldrb	r3, [r6, #0]
 800b444:	2b2a      	cmp	r3, #42	; 0x2a
 800b446:	d016      	beq.n	800b476 <_svfiprintf_r+0xfa>
 800b448:	0035      	movs	r5, r6
 800b44a:	2100      	movs	r1, #0
 800b44c:	200a      	movs	r0, #10
 800b44e:	68e3      	ldr	r3, [r4, #12]
 800b450:	782a      	ldrb	r2, [r5, #0]
 800b452:	1c6e      	adds	r6, r5, #1
 800b454:	3a30      	subs	r2, #48	; 0x30
 800b456:	2a09      	cmp	r2, #9
 800b458:	d94e      	bls.n	800b4f8 <_svfiprintf_r+0x17c>
 800b45a:	2900      	cmp	r1, #0
 800b45c:	d111      	bne.n	800b482 <_svfiprintf_r+0x106>
 800b45e:	e017      	b.n	800b490 <_svfiprintf_r+0x114>
 800b460:	3501      	adds	r5, #1
 800b462:	e7af      	b.n	800b3c4 <_svfiprintf_r+0x48>
 800b464:	9b05      	ldr	r3, [sp, #20]
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	1ac0      	subs	r0, r0, r3
 800b46a:	2301      	movs	r3, #1
 800b46c:	4083      	lsls	r3, r0
 800b46e:	4313      	orrs	r3, r2
 800b470:	002e      	movs	r6, r5
 800b472:	6023      	str	r3, [r4, #0]
 800b474:	e7cc      	b.n	800b410 <_svfiprintf_r+0x94>
 800b476:	9b07      	ldr	r3, [sp, #28]
 800b478:	1d19      	adds	r1, r3, #4
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	9107      	str	r1, [sp, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	db01      	blt.n	800b486 <_svfiprintf_r+0x10a>
 800b482:	930b      	str	r3, [sp, #44]	; 0x2c
 800b484:	e004      	b.n	800b490 <_svfiprintf_r+0x114>
 800b486:	425b      	negs	r3, r3
 800b488:	60e3      	str	r3, [r4, #12]
 800b48a:	2302      	movs	r3, #2
 800b48c:	4313      	orrs	r3, r2
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	782b      	ldrb	r3, [r5, #0]
 800b492:	2b2e      	cmp	r3, #46	; 0x2e
 800b494:	d10a      	bne.n	800b4ac <_svfiprintf_r+0x130>
 800b496:	786b      	ldrb	r3, [r5, #1]
 800b498:	2b2a      	cmp	r3, #42	; 0x2a
 800b49a:	d135      	bne.n	800b508 <_svfiprintf_r+0x18c>
 800b49c:	9b07      	ldr	r3, [sp, #28]
 800b49e:	3502      	adds	r5, #2
 800b4a0:	1d1a      	adds	r2, r3, #4
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	9207      	str	r2, [sp, #28]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	db2b      	blt.n	800b502 <_svfiprintf_r+0x186>
 800b4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ac:	4e2f      	ldr	r6, [pc, #188]	; (800b56c <_svfiprintf_r+0x1f0>)
 800b4ae:	2203      	movs	r2, #3
 800b4b0:	0030      	movs	r0, r6
 800b4b2:	7829      	ldrb	r1, [r5, #0]
 800b4b4:	f7fd ff05 	bl	80092c2 <memchr>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d006      	beq.n	800b4ca <_svfiprintf_r+0x14e>
 800b4bc:	2340      	movs	r3, #64	; 0x40
 800b4be:	1b80      	subs	r0, r0, r6
 800b4c0:	4083      	lsls	r3, r0
 800b4c2:	6822      	ldr	r2, [r4, #0]
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	7829      	ldrb	r1, [r5, #0]
 800b4cc:	2206      	movs	r2, #6
 800b4ce:	4828      	ldr	r0, [pc, #160]	; (800b570 <_svfiprintf_r+0x1f4>)
 800b4d0:	1c6e      	adds	r6, r5, #1
 800b4d2:	7621      	strb	r1, [r4, #24]
 800b4d4:	f7fd fef5 	bl	80092c2 <memchr>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d03c      	beq.n	800b556 <_svfiprintf_r+0x1da>
 800b4dc:	4b25      	ldr	r3, [pc, #148]	; (800b574 <_svfiprintf_r+0x1f8>)
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d125      	bne.n	800b52e <_svfiprintf_r+0x1b2>
 800b4e2:	2207      	movs	r2, #7
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	3307      	adds	r3, #7
 800b4e8:	4393      	bics	r3, r2
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	9307      	str	r3, [sp, #28]
 800b4ee:	6963      	ldr	r3, [r4, #20]
 800b4f0:	9a04      	ldr	r2, [sp, #16]
 800b4f2:	189b      	adds	r3, r3, r2
 800b4f4:	6163      	str	r3, [r4, #20]
 800b4f6:	e764      	b.n	800b3c2 <_svfiprintf_r+0x46>
 800b4f8:	4343      	muls	r3, r0
 800b4fa:	0035      	movs	r5, r6
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	189b      	adds	r3, r3, r2
 800b500:	e7a6      	b.n	800b450 <_svfiprintf_r+0xd4>
 800b502:	2301      	movs	r3, #1
 800b504:	425b      	negs	r3, r3
 800b506:	e7d0      	b.n	800b4aa <_svfiprintf_r+0x12e>
 800b508:	2300      	movs	r3, #0
 800b50a:	200a      	movs	r0, #10
 800b50c:	001a      	movs	r2, r3
 800b50e:	3501      	adds	r5, #1
 800b510:	6063      	str	r3, [r4, #4]
 800b512:	7829      	ldrb	r1, [r5, #0]
 800b514:	1c6e      	adds	r6, r5, #1
 800b516:	3930      	subs	r1, #48	; 0x30
 800b518:	2909      	cmp	r1, #9
 800b51a:	d903      	bls.n	800b524 <_svfiprintf_r+0x1a8>
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0c5      	beq.n	800b4ac <_svfiprintf_r+0x130>
 800b520:	9209      	str	r2, [sp, #36]	; 0x24
 800b522:	e7c3      	b.n	800b4ac <_svfiprintf_r+0x130>
 800b524:	4342      	muls	r2, r0
 800b526:	0035      	movs	r5, r6
 800b528:	2301      	movs	r3, #1
 800b52a:	1852      	adds	r2, r2, r1
 800b52c:	e7f1      	b.n	800b512 <_svfiprintf_r+0x196>
 800b52e:	aa07      	add	r2, sp, #28
 800b530:	9200      	str	r2, [sp, #0]
 800b532:	0021      	movs	r1, r4
 800b534:	003a      	movs	r2, r7
 800b536:	4b10      	ldr	r3, [pc, #64]	; (800b578 <_svfiprintf_r+0x1fc>)
 800b538:	9803      	ldr	r0, [sp, #12]
 800b53a:	f7fc fe75 	bl	8008228 <_printf_float>
 800b53e:	9004      	str	r0, [sp, #16]
 800b540:	9b04      	ldr	r3, [sp, #16]
 800b542:	3301      	adds	r3, #1
 800b544:	d1d3      	bne.n	800b4ee <_svfiprintf_r+0x172>
 800b546:	89bb      	ldrh	r3, [r7, #12]
 800b548:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b54a:	065b      	lsls	r3, r3, #25
 800b54c:	d400      	bmi.n	800b550 <_svfiprintf_r+0x1d4>
 800b54e:	e72c      	b.n	800b3aa <_svfiprintf_r+0x2e>
 800b550:	2001      	movs	r0, #1
 800b552:	4240      	negs	r0, r0
 800b554:	e729      	b.n	800b3aa <_svfiprintf_r+0x2e>
 800b556:	aa07      	add	r2, sp, #28
 800b558:	9200      	str	r2, [sp, #0]
 800b55a:	0021      	movs	r1, r4
 800b55c:	003a      	movs	r2, r7
 800b55e:	4b06      	ldr	r3, [pc, #24]	; (800b578 <_svfiprintf_r+0x1fc>)
 800b560:	9803      	ldr	r0, [sp, #12]
 800b562:	f7fd f927 	bl	80087b4 <_printf_i>
 800b566:	e7ea      	b.n	800b53e <_svfiprintf_r+0x1c2>
 800b568:	0800c14c 	.word	0x0800c14c
 800b56c:	0800c152 	.word	0x0800c152
 800b570:	0800c156 	.word	0x0800c156
 800b574:	08008229 	.word	0x08008229
 800b578:	0800b2b9 	.word	0x0800b2b9

0800b57c <__sfputc_r>:
 800b57c:	6893      	ldr	r3, [r2, #8]
 800b57e:	b510      	push	{r4, lr}
 800b580:	3b01      	subs	r3, #1
 800b582:	6093      	str	r3, [r2, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	da04      	bge.n	800b592 <__sfputc_r+0x16>
 800b588:	6994      	ldr	r4, [r2, #24]
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	db07      	blt.n	800b59e <__sfputc_r+0x22>
 800b58e:	290a      	cmp	r1, #10
 800b590:	d005      	beq.n	800b59e <__sfputc_r+0x22>
 800b592:	6813      	ldr	r3, [r2, #0]
 800b594:	1c58      	adds	r0, r3, #1
 800b596:	6010      	str	r0, [r2, #0]
 800b598:	7019      	strb	r1, [r3, #0]
 800b59a:	0008      	movs	r0, r1
 800b59c:	bd10      	pop	{r4, pc}
 800b59e:	f7fd fd51 	bl	8009044 <__swbuf_r>
 800b5a2:	0001      	movs	r1, r0
 800b5a4:	e7f9      	b.n	800b59a <__sfputc_r+0x1e>

0800b5a6 <__sfputs_r>:
 800b5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a8:	0006      	movs	r6, r0
 800b5aa:	000f      	movs	r7, r1
 800b5ac:	0014      	movs	r4, r2
 800b5ae:	18d5      	adds	r5, r2, r3
 800b5b0:	42ac      	cmp	r4, r5
 800b5b2:	d101      	bne.n	800b5b8 <__sfputs_r+0x12>
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	e007      	b.n	800b5c8 <__sfputs_r+0x22>
 800b5b8:	7821      	ldrb	r1, [r4, #0]
 800b5ba:	003a      	movs	r2, r7
 800b5bc:	0030      	movs	r0, r6
 800b5be:	f7ff ffdd 	bl	800b57c <__sfputc_r>
 800b5c2:	3401      	adds	r4, #1
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	d1f3      	bne.n	800b5b0 <__sfputs_r+0xa>
 800b5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5cc <_vfiprintf_r>:
 800b5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ce:	b0a1      	sub	sp, #132	; 0x84
 800b5d0:	000f      	movs	r7, r1
 800b5d2:	0015      	movs	r5, r2
 800b5d4:	001e      	movs	r6, r3
 800b5d6:	9003      	str	r0, [sp, #12]
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d004      	beq.n	800b5e6 <_vfiprintf_r+0x1a>
 800b5dc:	6a03      	ldr	r3, [r0, #32]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <_vfiprintf_r+0x1a>
 800b5e2:	f7fd fc8f 	bl	8008f04 <__sinit>
 800b5e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5e8:	07db      	lsls	r3, r3, #31
 800b5ea:	d405      	bmi.n	800b5f8 <_vfiprintf_r+0x2c>
 800b5ec:	89bb      	ldrh	r3, [r7, #12]
 800b5ee:	059b      	lsls	r3, r3, #22
 800b5f0:	d402      	bmi.n	800b5f8 <_vfiprintf_r+0x2c>
 800b5f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b5f4:	f7fd fe63 	bl	80092be <__retarget_lock_acquire_recursive>
 800b5f8:	89bb      	ldrh	r3, [r7, #12]
 800b5fa:	071b      	lsls	r3, r3, #28
 800b5fc:	d502      	bpl.n	800b604 <_vfiprintf_r+0x38>
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d113      	bne.n	800b62c <_vfiprintf_r+0x60>
 800b604:	0039      	movs	r1, r7
 800b606:	9803      	ldr	r0, [sp, #12]
 800b608:	f7fd fd5e 	bl	80090c8 <__swsetup_r>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d00d      	beq.n	800b62c <_vfiprintf_r+0x60>
 800b610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b612:	07db      	lsls	r3, r3, #31
 800b614:	d503      	bpl.n	800b61e <_vfiprintf_r+0x52>
 800b616:	2001      	movs	r0, #1
 800b618:	4240      	negs	r0, r0
 800b61a:	b021      	add	sp, #132	; 0x84
 800b61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b61e:	89bb      	ldrh	r3, [r7, #12]
 800b620:	059b      	lsls	r3, r3, #22
 800b622:	d4f8      	bmi.n	800b616 <_vfiprintf_r+0x4a>
 800b624:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b626:	f7fd fe4b 	bl	80092c0 <__retarget_lock_release_recursive>
 800b62a:	e7f4      	b.n	800b616 <_vfiprintf_r+0x4a>
 800b62c:	2300      	movs	r3, #0
 800b62e:	ac08      	add	r4, sp, #32
 800b630:	6163      	str	r3, [r4, #20]
 800b632:	3320      	adds	r3, #32
 800b634:	7663      	strb	r3, [r4, #25]
 800b636:	3310      	adds	r3, #16
 800b638:	76a3      	strb	r3, [r4, #26]
 800b63a:	9607      	str	r6, [sp, #28]
 800b63c:	002e      	movs	r6, r5
 800b63e:	7833      	ldrb	r3, [r6, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <_vfiprintf_r+0x7c>
 800b644:	2b25      	cmp	r3, #37	; 0x25
 800b646:	d148      	bne.n	800b6da <_vfiprintf_r+0x10e>
 800b648:	1b73      	subs	r3, r6, r5
 800b64a:	9305      	str	r3, [sp, #20]
 800b64c:	42ae      	cmp	r6, r5
 800b64e:	d00b      	beq.n	800b668 <_vfiprintf_r+0x9c>
 800b650:	002a      	movs	r2, r5
 800b652:	0039      	movs	r1, r7
 800b654:	9803      	ldr	r0, [sp, #12]
 800b656:	f7ff ffa6 	bl	800b5a6 <__sfputs_r>
 800b65a:	3001      	adds	r0, #1
 800b65c:	d100      	bne.n	800b660 <_vfiprintf_r+0x94>
 800b65e:	e0af      	b.n	800b7c0 <_vfiprintf_r+0x1f4>
 800b660:	6963      	ldr	r3, [r4, #20]
 800b662:	9a05      	ldr	r2, [sp, #20]
 800b664:	189b      	adds	r3, r3, r2
 800b666:	6163      	str	r3, [r4, #20]
 800b668:	7833      	ldrb	r3, [r6, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d100      	bne.n	800b670 <_vfiprintf_r+0xa4>
 800b66e:	e0a7      	b.n	800b7c0 <_vfiprintf_r+0x1f4>
 800b670:	2201      	movs	r2, #1
 800b672:	2300      	movs	r3, #0
 800b674:	4252      	negs	r2, r2
 800b676:	6062      	str	r2, [r4, #4]
 800b678:	a904      	add	r1, sp, #16
 800b67a:	3254      	adds	r2, #84	; 0x54
 800b67c:	1852      	adds	r2, r2, r1
 800b67e:	1c75      	adds	r5, r6, #1
 800b680:	6023      	str	r3, [r4, #0]
 800b682:	60e3      	str	r3, [r4, #12]
 800b684:	60a3      	str	r3, [r4, #8]
 800b686:	7013      	strb	r3, [r2, #0]
 800b688:	65a3      	str	r3, [r4, #88]	; 0x58
 800b68a:	4b59      	ldr	r3, [pc, #356]	; (800b7f0 <_vfiprintf_r+0x224>)
 800b68c:	2205      	movs	r2, #5
 800b68e:	0018      	movs	r0, r3
 800b690:	7829      	ldrb	r1, [r5, #0]
 800b692:	9305      	str	r3, [sp, #20]
 800b694:	f7fd fe15 	bl	80092c2 <memchr>
 800b698:	1c6e      	adds	r6, r5, #1
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d11f      	bne.n	800b6de <_vfiprintf_r+0x112>
 800b69e:	6822      	ldr	r2, [r4, #0]
 800b6a0:	06d3      	lsls	r3, r2, #27
 800b6a2:	d504      	bpl.n	800b6ae <_vfiprintf_r+0xe2>
 800b6a4:	2353      	movs	r3, #83	; 0x53
 800b6a6:	a904      	add	r1, sp, #16
 800b6a8:	185b      	adds	r3, r3, r1
 800b6aa:	2120      	movs	r1, #32
 800b6ac:	7019      	strb	r1, [r3, #0]
 800b6ae:	0713      	lsls	r3, r2, #28
 800b6b0:	d504      	bpl.n	800b6bc <_vfiprintf_r+0xf0>
 800b6b2:	2353      	movs	r3, #83	; 0x53
 800b6b4:	a904      	add	r1, sp, #16
 800b6b6:	185b      	adds	r3, r3, r1
 800b6b8:	212b      	movs	r1, #43	; 0x2b
 800b6ba:	7019      	strb	r1, [r3, #0]
 800b6bc:	782b      	ldrb	r3, [r5, #0]
 800b6be:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c0:	d016      	beq.n	800b6f0 <_vfiprintf_r+0x124>
 800b6c2:	002e      	movs	r6, r5
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	200a      	movs	r0, #10
 800b6c8:	68e3      	ldr	r3, [r4, #12]
 800b6ca:	7832      	ldrb	r2, [r6, #0]
 800b6cc:	1c75      	adds	r5, r6, #1
 800b6ce:	3a30      	subs	r2, #48	; 0x30
 800b6d0:	2a09      	cmp	r2, #9
 800b6d2:	d94e      	bls.n	800b772 <_vfiprintf_r+0x1a6>
 800b6d4:	2900      	cmp	r1, #0
 800b6d6:	d111      	bne.n	800b6fc <_vfiprintf_r+0x130>
 800b6d8:	e017      	b.n	800b70a <_vfiprintf_r+0x13e>
 800b6da:	3601      	adds	r6, #1
 800b6dc:	e7af      	b.n	800b63e <_vfiprintf_r+0x72>
 800b6de:	9b05      	ldr	r3, [sp, #20]
 800b6e0:	6822      	ldr	r2, [r4, #0]
 800b6e2:	1ac0      	subs	r0, r0, r3
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	4083      	lsls	r3, r0
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	0035      	movs	r5, r6
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	e7cc      	b.n	800b68a <_vfiprintf_r+0xbe>
 800b6f0:	9b07      	ldr	r3, [sp, #28]
 800b6f2:	1d19      	adds	r1, r3, #4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	9107      	str	r1, [sp, #28]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	db01      	blt.n	800b700 <_vfiprintf_r+0x134>
 800b6fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6fe:	e004      	b.n	800b70a <_vfiprintf_r+0x13e>
 800b700:	425b      	negs	r3, r3
 800b702:	60e3      	str	r3, [r4, #12]
 800b704:	2302      	movs	r3, #2
 800b706:	4313      	orrs	r3, r2
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	7833      	ldrb	r3, [r6, #0]
 800b70c:	2b2e      	cmp	r3, #46	; 0x2e
 800b70e:	d10a      	bne.n	800b726 <_vfiprintf_r+0x15a>
 800b710:	7873      	ldrb	r3, [r6, #1]
 800b712:	2b2a      	cmp	r3, #42	; 0x2a
 800b714:	d135      	bne.n	800b782 <_vfiprintf_r+0x1b6>
 800b716:	9b07      	ldr	r3, [sp, #28]
 800b718:	3602      	adds	r6, #2
 800b71a:	1d1a      	adds	r2, r3, #4
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	9207      	str	r2, [sp, #28]
 800b720:	2b00      	cmp	r3, #0
 800b722:	db2b      	blt.n	800b77c <_vfiprintf_r+0x1b0>
 800b724:	9309      	str	r3, [sp, #36]	; 0x24
 800b726:	4d33      	ldr	r5, [pc, #204]	; (800b7f4 <_vfiprintf_r+0x228>)
 800b728:	2203      	movs	r2, #3
 800b72a:	0028      	movs	r0, r5
 800b72c:	7831      	ldrb	r1, [r6, #0]
 800b72e:	f7fd fdc8 	bl	80092c2 <memchr>
 800b732:	2800      	cmp	r0, #0
 800b734:	d006      	beq.n	800b744 <_vfiprintf_r+0x178>
 800b736:	2340      	movs	r3, #64	; 0x40
 800b738:	1b40      	subs	r0, r0, r5
 800b73a:	4083      	lsls	r3, r0
 800b73c:	6822      	ldr	r2, [r4, #0]
 800b73e:	3601      	adds	r6, #1
 800b740:	4313      	orrs	r3, r2
 800b742:	6023      	str	r3, [r4, #0]
 800b744:	7831      	ldrb	r1, [r6, #0]
 800b746:	2206      	movs	r2, #6
 800b748:	482b      	ldr	r0, [pc, #172]	; (800b7f8 <_vfiprintf_r+0x22c>)
 800b74a:	1c75      	adds	r5, r6, #1
 800b74c:	7621      	strb	r1, [r4, #24]
 800b74e:	f7fd fdb8 	bl	80092c2 <memchr>
 800b752:	2800      	cmp	r0, #0
 800b754:	d043      	beq.n	800b7de <_vfiprintf_r+0x212>
 800b756:	4b29      	ldr	r3, [pc, #164]	; (800b7fc <_vfiprintf_r+0x230>)
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d125      	bne.n	800b7a8 <_vfiprintf_r+0x1dc>
 800b75c:	2207      	movs	r2, #7
 800b75e:	9b07      	ldr	r3, [sp, #28]
 800b760:	3307      	adds	r3, #7
 800b762:	4393      	bics	r3, r2
 800b764:	3308      	adds	r3, #8
 800b766:	9307      	str	r3, [sp, #28]
 800b768:	6963      	ldr	r3, [r4, #20]
 800b76a:	9a04      	ldr	r2, [sp, #16]
 800b76c:	189b      	adds	r3, r3, r2
 800b76e:	6163      	str	r3, [r4, #20]
 800b770:	e764      	b.n	800b63c <_vfiprintf_r+0x70>
 800b772:	4343      	muls	r3, r0
 800b774:	002e      	movs	r6, r5
 800b776:	2101      	movs	r1, #1
 800b778:	189b      	adds	r3, r3, r2
 800b77a:	e7a6      	b.n	800b6ca <_vfiprintf_r+0xfe>
 800b77c:	2301      	movs	r3, #1
 800b77e:	425b      	negs	r3, r3
 800b780:	e7d0      	b.n	800b724 <_vfiprintf_r+0x158>
 800b782:	2300      	movs	r3, #0
 800b784:	200a      	movs	r0, #10
 800b786:	001a      	movs	r2, r3
 800b788:	3601      	adds	r6, #1
 800b78a:	6063      	str	r3, [r4, #4]
 800b78c:	7831      	ldrb	r1, [r6, #0]
 800b78e:	1c75      	adds	r5, r6, #1
 800b790:	3930      	subs	r1, #48	; 0x30
 800b792:	2909      	cmp	r1, #9
 800b794:	d903      	bls.n	800b79e <_vfiprintf_r+0x1d2>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0c5      	beq.n	800b726 <_vfiprintf_r+0x15a>
 800b79a:	9209      	str	r2, [sp, #36]	; 0x24
 800b79c:	e7c3      	b.n	800b726 <_vfiprintf_r+0x15a>
 800b79e:	4342      	muls	r2, r0
 800b7a0:	002e      	movs	r6, r5
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	1852      	adds	r2, r2, r1
 800b7a6:	e7f1      	b.n	800b78c <_vfiprintf_r+0x1c0>
 800b7a8:	aa07      	add	r2, sp, #28
 800b7aa:	9200      	str	r2, [sp, #0]
 800b7ac:	0021      	movs	r1, r4
 800b7ae:	003a      	movs	r2, r7
 800b7b0:	4b13      	ldr	r3, [pc, #76]	; (800b800 <_vfiprintf_r+0x234>)
 800b7b2:	9803      	ldr	r0, [sp, #12]
 800b7b4:	f7fc fd38 	bl	8008228 <_printf_float>
 800b7b8:	9004      	str	r0, [sp, #16]
 800b7ba:	9b04      	ldr	r3, [sp, #16]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	d1d3      	bne.n	800b768 <_vfiprintf_r+0x19c>
 800b7c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7c2:	07db      	lsls	r3, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_vfiprintf_r+0x206>
 800b7c6:	89bb      	ldrh	r3, [r7, #12]
 800b7c8:	059b      	lsls	r3, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_vfiprintf_r+0x206>
 800b7cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b7ce:	f7fd fd77 	bl	80092c0 <__retarget_lock_release_recursive>
 800b7d2:	89bb      	ldrh	r3, [r7, #12]
 800b7d4:	065b      	lsls	r3, r3, #25
 800b7d6:	d500      	bpl.n	800b7da <_vfiprintf_r+0x20e>
 800b7d8:	e71d      	b.n	800b616 <_vfiprintf_r+0x4a>
 800b7da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b7dc:	e71d      	b.n	800b61a <_vfiprintf_r+0x4e>
 800b7de:	aa07      	add	r2, sp, #28
 800b7e0:	9200      	str	r2, [sp, #0]
 800b7e2:	0021      	movs	r1, r4
 800b7e4:	003a      	movs	r2, r7
 800b7e6:	4b06      	ldr	r3, [pc, #24]	; (800b800 <_vfiprintf_r+0x234>)
 800b7e8:	9803      	ldr	r0, [sp, #12]
 800b7ea:	f7fc ffe3 	bl	80087b4 <_printf_i>
 800b7ee:	e7e3      	b.n	800b7b8 <_vfiprintf_r+0x1ec>
 800b7f0:	0800c14c 	.word	0x0800c14c
 800b7f4:	0800c152 	.word	0x0800c152
 800b7f8:	0800c156 	.word	0x0800c156
 800b7fc:	08008229 	.word	0x08008229
 800b800:	0800b5a7 	.word	0x0800b5a7

0800b804 <__sflush_r>:
 800b804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b806:	898b      	ldrh	r3, [r1, #12]
 800b808:	0005      	movs	r5, r0
 800b80a:	000c      	movs	r4, r1
 800b80c:	071a      	lsls	r2, r3, #28
 800b80e:	d45c      	bmi.n	800b8ca <__sflush_r+0xc6>
 800b810:	684a      	ldr	r2, [r1, #4]
 800b812:	2a00      	cmp	r2, #0
 800b814:	dc04      	bgt.n	800b820 <__sflush_r+0x1c>
 800b816:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b818:	2a00      	cmp	r2, #0
 800b81a:	dc01      	bgt.n	800b820 <__sflush_r+0x1c>
 800b81c:	2000      	movs	r0, #0
 800b81e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b820:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b822:	2f00      	cmp	r7, #0
 800b824:	d0fa      	beq.n	800b81c <__sflush_r+0x18>
 800b826:	2200      	movs	r2, #0
 800b828:	2080      	movs	r0, #128	; 0x80
 800b82a:	682e      	ldr	r6, [r5, #0]
 800b82c:	602a      	str	r2, [r5, #0]
 800b82e:	001a      	movs	r2, r3
 800b830:	0140      	lsls	r0, r0, #5
 800b832:	6a21      	ldr	r1, [r4, #32]
 800b834:	4002      	ands	r2, r0
 800b836:	4203      	tst	r3, r0
 800b838:	d034      	beq.n	800b8a4 <__sflush_r+0xa0>
 800b83a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	075b      	lsls	r3, r3, #29
 800b840:	d506      	bpl.n	800b850 <__sflush_r+0x4c>
 800b842:	6863      	ldr	r3, [r4, #4]
 800b844:	1ac0      	subs	r0, r0, r3
 800b846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <__sflush_r+0x4c>
 800b84c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b84e:	1ac0      	subs	r0, r0, r3
 800b850:	0002      	movs	r2, r0
 800b852:	2300      	movs	r3, #0
 800b854:	0028      	movs	r0, r5
 800b856:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b858:	6a21      	ldr	r1, [r4, #32]
 800b85a:	47b8      	blx	r7
 800b85c:	89a2      	ldrh	r2, [r4, #12]
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d106      	bne.n	800b870 <__sflush_r+0x6c>
 800b862:	6829      	ldr	r1, [r5, #0]
 800b864:	291d      	cmp	r1, #29
 800b866:	d82c      	bhi.n	800b8c2 <__sflush_r+0xbe>
 800b868:	4b2a      	ldr	r3, [pc, #168]	; (800b914 <__sflush_r+0x110>)
 800b86a:	410b      	asrs	r3, r1
 800b86c:	07db      	lsls	r3, r3, #31
 800b86e:	d428      	bmi.n	800b8c2 <__sflush_r+0xbe>
 800b870:	2300      	movs	r3, #0
 800b872:	6063      	str	r3, [r4, #4]
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	04d2      	lsls	r2, r2, #19
 800b87a:	d505      	bpl.n	800b888 <__sflush_r+0x84>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <__sflush_r+0x82>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d100      	bne.n	800b888 <__sflush_r+0x84>
 800b886:	6560      	str	r0, [r4, #84]	; 0x54
 800b888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b88a:	602e      	str	r6, [r5, #0]
 800b88c:	2900      	cmp	r1, #0
 800b88e:	d0c5      	beq.n	800b81c <__sflush_r+0x18>
 800b890:	0023      	movs	r3, r4
 800b892:	3344      	adds	r3, #68	; 0x44
 800b894:	4299      	cmp	r1, r3
 800b896:	d002      	beq.n	800b89e <__sflush_r+0x9a>
 800b898:	0028      	movs	r0, r5
 800b89a:	f7fe fbcf 	bl	800a03c <_free_r>
 800b89e:	2000      	movs	r0, #0
 800b8a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b8a2:	e7bc      	b.n	800b81e <__sflush_r+0x1a>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	0028      	movs	r0, r5
 800b8a8:	47b8      	blx	r7
 800b8aa:	1c43      	adds	r3, r0, #1
 800b8ac:	d1c6      	bne.n	800b83c <__sflush_r+0x38>
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0c3      	beq.n	800b83c <__sflush_r+0x38>
 800b8b4:	2b1d      	cmp	r3, #29
 800b8b6:	d001      	beq.n	800b8bc <__sflush_r+0xb8>
 800b8b8:	2b16      	cmp	r3, #22
 800b8ba:	d101      	bne.n	800b8c0 <__sflush_r+0xbc>
 800b8bc:	602e      	str	r6, [r5, #0]
 800b8be:	e7ad      	b.n	800b81c <__sflush_r+0x18>
 800b8c0:	89a2      	ldrh	r2, [r4, #12]
 800b8c2:	2340      	movs	r3, #64	; 0x40
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	e7a9      	b.n	800b81e <__sflush_r+0x1a>
 800b8ca:	690e      	ldr	r6, [r1, #16]
 800b8cc:	2e00      	cmp	r6, #0
 800b8ce:	d0a5      	beq.n	800b81c <__sflush_r+0x18>
 800b8d0:	680f      	ldr	r7, [r1, #0]
 800b8d2:	600e      	str	r6, [r1, #0]
 800b8d4:	1bba      	subs	r2, r7, r6
 800b8d6:	9201      	str	r2, [sp, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	079b      	lsls	r3, r3, #30
 800b8dc:	d100      	bne.n	800b8e0 <__sflush_r+0xdc>
 800b8de:	694a      	ldr	r2, [r1, #20]
 800b8e0:	60a2      	str	r2, [r4, #8]
 800b8e2:	9b01      	ldr	r3, [sp, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	dd99      	ble.n	800b81c <__sflush_r+0x18>
 800b8e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8ea:	0032      	movs	r2, r6
 800b8ec:	001f      	movs	r7, r3
 800b8ee:	0028      	movs	r0, r5
 800b8f0:	9b01      	ldr	r3, [sp, #4]
 800b8f2:	6a21      	ldr	r1, [r4, #32]
 800b8f4:	47b8      	blx	r7
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	dc06      	bgt.n	800b908 <__sflush_r+0x104>
 800b8fa:	2340      	movs	r3, #64	; 0x40
 800b8fc:	2001      	movs	r0, #1
 800b8fe:	89a2      	ldrh	r2, [r4, #12]
 800b900:	4240      	negs	r0, r0
 800b902:	4313      	orrs	r3, r2
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	e78a      	b.n	800b81e <__sflush_r+0x1a>
 800b908:	9b01      	ldr	r3, [sp, #4]
 800b90a:	1836      	adds	r6, r6, r0
 800b90c:	1a1b      	subs	r3, r3, r0
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	e7e7      	b.n	800b8e2 <__sflush_r+0xde>
 800b912:	46c0      	nop			; (mov r8, r8)
 800b914:	dfbffffe 	.word	0xdfbffffe

0800b918 <_fflush_r>:
 800b918:	690b      	ldr	r3, [r1, #16]
 800b91a:	b570      	push	{r4, r5, r6, lr}
 800b91c:	0005      	movs	r5, r0
 800b91e:	000c      	movs	r4, r1
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <_fflush_r+0x12>
 800b924:	2500      	movs	r5, #0
 800b926:	0028      	movs	r0, r5
 800b928:	bd70      	pop	{r4, r5, r6, pc}
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d004      	beq.n	800b938 <_fflush_r+0x20>
 800b92e:	6a03      	ldr	r3, [r0, #32]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <_fflush_r+0x20>
 800b934:	f7fd fae6 	bl	8008f04 <__sinit>
 800b938:	220c      	movs	r2, #12
 800b93a:	5ea3      	ldrsh	r3, [r4, r2]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0f1      	beq.n	800b924 <_fflush_r+0xc>
 800b940:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b942:	07d2      	lsls	r2, r2, #31
 800b944:	d404      	bmi.n	800b950 <_fflush_r+0x38>
 800b946:	059b      	lsls	r3, r3, #22
 800b948:	d402      	bmi.n	800b950 <_fflush_r+0x38>
 800b94a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b94c:	f7fd fcb7 	bl	80092be <__retarget_lock_acquire_recursive>
 800b950:	0028      	movs	r0, r5
 800b952:	0021      	movs	r1, r4
 800b954:	f7ff ff56 	bl	800b804 <__sflush_r>
 800b958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b95a:	0005      	movs	r5, r0
 800b95c:	07db      	lsls	r3, r3, #31
 800b95e:	d4e2      	bmi.n	800b926 <_fflush_r+0xe>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	059b      	lsls	r3, r3, #22
 800b964:	d4df      	bmi.n	800b926 <_fflush_r+0xe>
 800b966:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b968:	f7fd fcaa 	bl	80092c0 <__retarget_lock_release_recursive>
 800b96c:	e7db      	b.n	800b926 <_fflush_r+0xe>
	...

0800b970 <__swhatbuf_r>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	000e      	movs	r6, r1
 800b974:	001d      	movs	r5, r3
 800b976:	230e      	movs	r3, #14
 800b978:	5ec9      	ldrsh	r1, [r1, r3]
 800b97a:	0014      	movs	r4, r2
 800b97c:	b096      	sub	sp, #88	; 0x58
 800b97e:	2900      	cmp	r1, #0
 800b980:	da0c      	bge.n	800b99c <__swhatbuf_r+0x2c>
 800b982:	89b2      	ldrh	r2, [r6, #12]
 800b984:	2380      	movs	r3, #128	; 0x80
 800b986:	0011      	movs	r1, r2
 800b988:	4019      	ands	r1, r3
 800b98a:	421a      	tst	r2, r3
 800b98c:	d013      	beq.n	800b9b6 <__swhatbuf_r+0x46>
 800b98e:	2100      	movs	r1, #0
 800b990:	3b40      	subs	r3, #64	; 0x40
 800b992:	2000      	movs	r0, #0
 800b994:	6029      	str	r1, [r5, #0]
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	b016      	add	sp, #88	; 0x58
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	466a      	mov	r2, sp
 800b99e:	f000 f861 	bl	800ba64 <_fstat_r>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	dbed      	blt.n	800b982 <__swhatbuf_r+0x12>
 800b9a6:	23f0      	movs	r3, #240	; 0xf0
 800b9a8:	9901      	ldr	r1, [sp, #4]
 800b9aa:	021b      	lsls	r3, r3, #8
 800b9ac:	4019      	ands	r1, r3
 800b9ae:	4b03      	ldr	r3, [pc, #12]	; (800b9bc <__swhatbuf_r+0x4c>)
 800b9b0:	18c9      	adds	r1, r1, r3
 800b9b2:	424b      	negs	r3, r1
 800b9b4:	4159      	adcs	r1, r3
 800b9b6:	2380      	movs	r3, #128	; 0x80
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	e7ea      	b.n	800b992 <__swhatbuf_r+0x22>
 800b9bc:	ffffe000 	.word	0xffffe000

0800b9c0 <__smakebuf_r>:
 800b9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9c2:	2602      	movs	r6, #2
 800b9c4:	898b      	ldrh	r3, [r1, #12]
 800b9c6:	0005      	movs	r5, r0
 800b9c8:	000c      	movs	r4, r1
 800b9ca:	4233      	tst	r3, r6
 800b9cc:	d006      	beq.n	800b9dc <__smakebuf_r+0x1c>
 800b9ce:	0023      	movs	r3, r4
 800b9d0:	3347      	adds	r3, #71	; 0x47
 800b9d2:	6023      	str	r3, [r4, #0]
 800b9d4:	6123      	str	r3, [r4, #16]
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	6163      	str	r3, [r4, #20]
 800b9da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b9dc:	466a      	mov	r2, sp
 800b9de:	ab01      	add	r3, sp, #4
 800b9e0:	f7ff ffc6 	bl	800b970 <__swhatbuf_r>
 800b9e4:	9900      	ldr	r1, [sp, #0]
 800b9e6:	0007      	movs	r7, r0
 800b9e8:	0028      	movs	r0, r5
 800b9ea:	f7fe fef9 	bl	800a7e0 <_malloc_r>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d108      	bne.n	800ba04 <__smakebuf_r+0x44>
 800b9f2:	220c      	movs	r2, #12
 800b9f4:	5ea3      	ldrsh	r3, [r4, r2]
 800b9f6:	059a      	lsls	r2, r3, #22
 800b9f8:	d4ef      	bmi.n	800b9da <__smakebuf_r+0x1a>
 800b9fa:	2203      	movs	r2, #3
 800b9fc:	4393      	bics	r3, r2
 800b9fe:	431e      	orrs	r6, r3
 800ba00:	81a6      	strh	r6, [r4, #12]
 800ba02:	e7e4      	b.n	800b9ce <__smakebuf_r+0xe>
 800ba04:	2380      	movs	r3, #128	; 0x80
 800ba06:	89a2      	ldrh	r2, [r4, #12]
 800ba08:	6020      	str	r0, [r4, #0]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	9b00      	ldr	r3, [sp, #0]
 800ba10:	6120      	str	r0, [r4, #16]
 800ba12:	6163      	str	r3, [r4, #20]
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00c      	beq.n	800ba34 <__smakebuf_r+0x74>
 800ba1a:	0028      	movs	r0, r5
 800ba1c:	230e      	movs	r3, #14
 800ba1e:	5ee1      	ldrsh	r1, [r4, r3]
 800ba20:	f000 f832 	bl	800ba88 <_isatty_r>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d005      	beq.n	800ba34 <__smakebuf_r+0x74>
 800ba28:	2303      	movs	r3, #3
 800ba2a:	89a2      	ldrh	r2, [r4, #12]
 800ba2c:	439a      	bics	r2, r3
 800ba2e:	3b02      	subs	r3, #2
 800ba30:	4313      	orrs	r3, r2
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	433b      	orrs	r3, r7
 800ba38:	81a3      	strh	r3, [r4, #12]
 800ba3a:	e7ce      	b.n	800b9da <__smakebuf_r+0x1a>

0800ba3c <memmove>:
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	4288      	cmp	r0, r1
 800ba40:	d902      	bls.n	800ba48 <memmove+0xc>
 800ba42:	188b      	adds	r3, r1, r2
 800ba44:	4298      	cmp	r0, r3
 800ba46:	d303      	bcc.n	800ba50 <memmove+0x14>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	e007      	b.n	800ba5c <memmove+0x20>
 800ba4c:	5c8b      	ldrb	r3, [r1, r2]
 800ba4e:	5483      	strb	r3, [r0, r2]
 800ba50:	3a01      	subs	r2, #1
 800ba52:	d2fb      	bcs.n	800ba4c <memmove+0x10>
 800ba54:	bd10      	pop	{r4, pc}
 800ba56:	5ccc      	ldrb	r4, [r1, r3]
 800ba58:	54c4      	strb	r4, [r0, r3]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d1fa      	bne.n	800ba56 <memmove+0x1a>
 800ba60:	e7f8      	b.n	800ba54 <memmove+0x18>
	...

0800ba64 <_fstat_r>:
 800ba64:	2300      	movs	r3, #0
 800ba66:	b570      	push	{r4, r5, r6, lr}
 800ba68:	4d06      	ldr	r5, [pc, #24]	; (800ba84 <_fstat_r+0x20>)
 800ba6a:	0004      	movs	r4, r0
 800ba6c:	0008      	movs	r0, r1
 800ba6e:	0011      	movs	r1, r2
 800ba70:	602b      	str	r3, [r5, #0]
 800ba72:	f7f7 faa0 	bl	8002fb6 <_fstat>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	d103      	bne.n	800ba82 <_fstat_r+0x1e>
 800ba7a:	682b      	ldr	r3, [r5, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d000      	beq.n	800ba82 <_fstat_r+0x1e>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	2000089c 	.word	0x2000089c

0800ba88 <_isatty_r>:
 800ba88:	2300      	movs	r3, #0
 800ba8a:	b570      	push	{r4, r5, r6, lr}
 800ba8c:	4d06      	ldr	r5, [pc, #24]	; (800baa8 <_isatty_r+0x20>)
 800ba8e:	0004      	movs	r4, r0
 800ba90:	0008      	movs	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f7 fa9d 	bl	8002fd2 <_isatty>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d103      	bne.n	800baa4 <_isatty_r+0x1c>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d000      	beq.n	800baa4 <_isatty_r+0x1c>
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	bd70      	pop	{r4, r5, r6, pc}
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	2000089c 	.word	0x2000089c

0800baac <_sbrk_r>:
 800baac:	2300      	movs	r3, #0
 800baae:	b570      	push	{r4, r5, r6, lr}
 800bab0:	4d06      	ldr	r5, [pc, #24]	; (800bacc <_sbrk_r+0x20>)
 800bab2:	0004      	movs	r4, r0
 800bab4:	0008      	movs	r0, r1
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	f7f7 faa0 	bl	8002ffc <_sbrk>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d103      	bne.n	800bac8 <_sbrk_r+0x1c>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d000      	beq.n	800bac8 <_sbrk_r+0x1c>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	bd70      	pop	{r4, r5, r6, pc}
 800baca:	46c0      	nop			; (mov r8, r8)
 800bacc:	2000089c 	.word	0x2000089c

0800bad0 <__assert_func>:
 800bad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bad2:	0014      	movs	r4, r2
 800bad4:	001a      	movs	r2, r3
 800bad6:	4b09      	ldr	r3, [pc, #36]	; (800bafc <__assert_func+0x2c>)
 800bad8:	0005      	movs	r5, r0
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	000e      	movs	r6, r1
 800bade:	68d8      	ldr	r0, [r3, #12]
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <__assert_func+0x30>)
 800bae2:	2c00      	cmp	r4, #0
 800bae4:	d101      	bne.n	800baea <__assert_func+0x1a>
 800bae6:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <__assert_func+0x34>)
 800bae8:	001c      	movs	r4, r3
 800baea:	4907      	ldr	r1, [pc, #28]	; (800bb08 <__assert_func+0x38>)
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	9402      	str	r4, [sp, #8]
 800baf0:	002b      	movs	r3, r5
 800baf2:	9600      	str	r6, [sp, #0]
 800baf4:	f000 f866 	bl	800bbc4 <fiprintf>
 800baf8:	f000 f874 	bl	800bbe4 <abort>
 800bafc:	200001d0 	.word	0x200001d0
 800bb00:	0800c15d 	.word	0x0800c15d
 800bb04:	0800c198 	.word	0x0800c198
 800bb08:	0800c16a 	.word	0x0800c16a

0800bb0c <_calloc_r>:
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	0c0b      	lsrs	r3, r1, #16
 800bb10:	0c15      	lsrs	r5, r2, #16
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d11e      	bne.n	800bb54 <_calloc_r+0x48>
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	d10c      	bne.n	800bb34 <_calloc_r+0x28>
 800bb1a:	b289      	uxth	r1, r1
 800bb1c:	b294      	uxth	r4, r2
 800bb1e:	434c      	muls	r4, r1
 800bb20:	0021      	movs	r1, r4
 800bb22:	f7fe fe5d 	bl	800a7e0 <_malloc_r>
 800bb26:	1e05      	subs	r5, r0, #0
 800bb28:	d01b      	beq.n	800bb62 <_calloc_r+0x56>
 800bb2a:	0022      	movs	r2, r4
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	f7fd fb2f 	bl	8009190 <memset>
 800bb32:	e016      	b.n	800bb62 <_calloc_r+0x56>
 800bb34:	1c2b      	adds	r3, r5, #0
 800bb36:	1c0c      	adds	r4, r1, #0
 800bb38:	b289      	uxth	r1, r1
 800bb3a:	b292      	uxth	r2, r2
 800bb3c:	434a      	muls	r2, r1
 800bb3e:	b2a1      	uxth	r1, r4
 800bb40:	b29c      	uxth	r4, r3
 800bb42:	434c      	muls	r4, r1
 800bb44:	0c13      	lsrs	r3, r2, #16
 800bb46:	18e4      	adds	r4, r4, r3
 800bb48:	0c23      	lsrs	r3, r4, #16
 800bb4a:	d107      	bne.n	800bb5c <_calloc_r+0x50>
 800bb4c:	0424      	lsls	r4, r4, #16
 800bb4e:	b292      	uxth	r2, r2
 800bb50:	4314      	orrs	r4, r2
 800bb52:	e7e5      	b.n	800bb20 <_calloc_r+0x14>
 800bb54:	2d00      	cmp	r5, #0
 800bb56:	d101      	bne.n	800bb5c <_calloc_r+0x50>
 800bb58:	1c14      	adds	r4, r2, #0
 800bb5a:	e7ed      	b.n	800bb38 <_calloc_r+0x2c>
 800bb5c:	230c      	movs	r3, #12
 800bb5e:	2500      	movs	r5, #0
 800bb60:	6003      	str	r3, [r0, #0]
 800bb62:	0028      	movs	r0, r5
 800bb64:	bd70      	pop	{r4, r5, r6, pc}

0800bb66 <_realloc_r>:
 800bb66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb68:	0007      	movs	r7, r0
 800bb6a:	000e      	movs	r6, r1
 800bb6c:	0014      	movs	r4, r2
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d105      	bne.n	800bb7e <_realloc_r+0x18>
 800bb72:	0011      	movs	r1, r2
 800bb74:	f7fe fe34 	bl	800a7e0 <_malloc_r>
 800bb78:	0005      	movs	r5, r0
 800bb7a:	0028      	movs	r0, r5
 800bb7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb7e:	2a00      	cmp	r2, #0
 800bb80:	d103      	bne.n	800bb8a <_realloc_r+0x24>
 800bb82:	f7fe fa5b 	bl	800a03c <_free_r>
 800bb86:	0025      	movs	r5, r4
 800bb88:	e7f7      	b.n	800bb7a <_realloc_r+0x14>
 800bb8a:	f000 f832 	bl	800bbf2 <_malloc_usable_size_r>
 800bb8e:	9001      	str	r0, [sp, #4]
 800bb90:	4284      	cmp	r4, r0
 800bb92:	d803      	bhi.n	800bb9c <_realloc_r+0x36>
 800bb94:	0035      	movs	r5, r6
 800bb96:	0843      	lsrs	r3, r0, #1
 800bb98:	42a3      	cmp	r3, r4
 800bb9a:	d3ee      	bcc.n	800bb7a <_realloc_r+0x14>
 800bb9c:	0021      	movs	r1, r4
 800bb9e:	0038      	movs	r0, r7
 800bba0:	f7fe fe1e 	bl	800a7e0 <_malloc_r>
 800bba4:	1e05      	subs	r5, r0, #0
 800bba6:	d0e8      	beq.n	800bb7a <_realloc_r+0x14>
 800bba8:	9b01      	ldr	r3, [sp, #4]
 800bbaa:	0022      	movs	r2, r4
 800bbac:	429c      	cmp	r4, r3
 800bbae:	d900      	bls.n	800bbb2 <_realloc_r+0x4c>
 800bbb0:	001a      	movs	r2, r3
 800bbb2:	0031      	movs	r1, r6
 800bbb4:	0028      	movs	r0, r5
 800bbb6:	f7fd fb8f 	bl	80092d8 <memcpy>
 800bbba:	0031      	movs	r1, r6
 800bbbc:	0038      	movs	r0, r7
 800bbbe:	f7fe fa3d 	bl	800a03c <_free_r>
 800bbc2:	e7da      	b.n	800bb7a <_realloc_r+0x14>

0800bbc4 <fiprintf>:
 800bbc4:	b40e      	push	{r1, r2, r3}
 800bbc6:	b517      	push	{r0, r1, r2, r4, lr}
 800bbc8:	4c05      	ldr	r4, [pc, #20]	; (800bbe0 <fiprintf+0x1c>)
 800bbca:	ab05      	add	r3, sp, #20
 800bbcc:	cb04      	ldmia	r3!, {r2}
 800bbce:	0001      	movs	r1, r0
 800bbd0:	6820      	ldr	r0, [r4, #0]
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	f7ff fcfa 	bl	800b5cc <_vfiprintf_r>
 800bbd8:	bc1e      	pop	{r1, r2, r3, r4}
 800bbda:	bc08      	pop	{r3}
 800bbdc:	b003      	add	sp, #12
 800bbde:	4718      	bx	r3
 800bbe0:	200001d0 	.word	0x200001d0

0800bbe4 <abort>:
 800bbe4:	2006      	movs	r0, #6
 800bbe6:	b510      	push	{r4, lr}
 800bbe8:	f000 f836 	bl	800bc58 <raise>
 800bbec:	2001      	movs	r0, #1
 800bbee:	f7f7 f993 	bl	8002f18 <_exit>

0800bbf2 <_malloc_usable_size_r>:
 800bbf2:	1f0b      	subs	r3, r1, #4
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	1f18      	subs	r0, r3, #4
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	da01      	bge.n	800bc00 <_malloc_usable_size_r+0xe>
 800bbfc:	580b      	ldr	r3, [r1, r0]
 800bbfe:	18c0      	adds	r0, r0, r3
 800bc00:	4770      	bx	lr

0800bc02 <_raise_r>:
 800bc02:	b570      	push	{r4, r5, r6, lr}
 800bc04:	0004      	movs	r4, r0
 800bc06:	000d      	movs	r5, r1
 800bc08:	291f      	cmp	r1, #31
 800bc0a:	d904      	bls.n	800bc16 <_raise_r+0x14>
 800bc0c:	2316      	movs	r3, #22
 800bc0e:	6003      	str	r3, [r0, #0]
 800bc10:	2001      	movs	r0, #1
 800bc12:	4240      	negs	r0, r0
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
 800bc16:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d004      	beq.n	800bc26 <_raise_r+0x24>
 800bc1c:	008a      	lsls	r2, r1, #2
 800bc1e:	189b      	adds	r3, r3, r2
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	2a00      	cmp	r2, #0
 800bc24:	d108      	bne.n	800bc38 <_raise_r+0x36>
 800bc26:	0020      	movs	r0, r4
 800bc28:	f000 f832 	bl	800bc90 <_getpid_r>
 800bc2c:	002a      	movs	r2, r5
 800bc2e:	0001      	movs	r1, r0
 800bc30:	0020      	movs	r0, r4
 800bc32:	f000 f81b 	bl	800bc6c <_kill_r>
 800bc36:	e7ed      	b.n	800bc14 <_raise_r+0x12>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	2a01      	cmp	r2, #1
 800bc3c:	d0ea      	beq.n	800bc14 <_raise_r+0x12>
 800bc3e:	1c51      	adds	r1, r2, #1
 800bc40:	d103      	bne.n	800bc4a <_raise_r+0x48>
 800bc42:	2316      	movs	r3, #22
 800bc44:	3001      	adds	r0, #1
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	e7e4      	b.n	800bc14 <_raise_r+0x12>
 800bc4a:	2400      	movs	r4, #0
 800bc4c:	0028      	movs	r0, r5
 800bc4e:	601c      	str	r4, [r3, #0]
 800bc50:	4790      	blx	r2
 800bc52:	0020      	movs	r0, r4
 800bc54:	e7de      	b.n	800bc14 <_raise_r+0x12>
	...

0800bc58 <raise>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	4b03      	ldr	r3, [pc, #12]	; (800bc68 <raise+0x10>)
 800bc5c:	0001      	movs	r1, r0
 800bc5e:	6818      	ldr	r0, [r3, #0]
 800bc60:	f7ff ffcf 	bl	800bc02 <_raise_r>
 800bc64:	bd10      	pop	{r4, pc}
 800bc66:	46c0      	nop			; (mov r8, r8)
 800bc68:	200001d0 	.word	0x200001d0

0800bc6c <_kill_r>:
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	b570      	push	{r4, r5, r6, lr}
 800bc70:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_kill_r+0x20>)
 800bc72:	0004      	movs	r4, r0
 800bc74:	0008      	movs	r0, r1
 800bc76:	0011      	movs	r1, r2
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	f7f7 f93d 	bl	8002ef8 <_kill>
 800bc7e:	1c43      	adds	r3, r0, #1
 800bc80:	d103      	bne.n	800bc8a <_kill_r+0x1e>
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d000      	beq.n	800bc8a <_kill_r+0x1e>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd70      	pop	{r4, r5, r6, pc}
 800bc8c:	2000089c 	.word	0x2000089c

0800bc90 <_getpid_r>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	f7f7 f92b 	bl	8002eec <_getpid>
 800bc96:	bd10      	pop	{r4, pc}

0800bc98 <_init>:
 800bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9a:	46c0      	nop			; (mov r8, r8)
 800bc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9e:	bc08      	pop	{r3}
 800bca0:	469e      	mov	lr, r3
 800bca2:	4770      	bx	lr

0800bca4 <_fini>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	46c0      	nop			; (mov r8, r8)
 800bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcaa:	bc08      	pop	{r3}
 800bcac:	469e      	mov	lr, r3
 800bcae:	4770      	bx	lr
