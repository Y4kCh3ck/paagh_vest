
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d450  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800d510  0800d510  0001d510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db24  0800db24  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800db24  0800db24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db2c  0800db2c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db2c  0800db2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db30  0800db30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800db34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  200001d8  0800dd08  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  0800dd08  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180ad  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aba  00000000  00000000  000382ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c8  00000000  00000000  0003d210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e17  00000000  00000000  0003e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0a3  00000000  00000000  000562ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000881da  00000000  00000000  00072392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e48  00000000  00000000  000fa56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d4f8 	.word	0x0800d4f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800d4f8 	.word	0x0800d4f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd03 	bl	8001e48 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcf5 	bl	8001e48 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fceb 	bl	8001e48 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7b 	bl	8001d7c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc71 	bl	8001d7c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb3b 	bl	8002bd4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ff94 	bl	8002494 <__aeabi_dsub>
 800056c:	f002 fb32 	bl	8002bd4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fca3 	bl	8001f10 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fb66 	bl	8002ca0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fc9a 	bl	8001f10 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 ff56 	bl	8002494 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fb1f 	bl	8002c40 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fc83 	bl	8001f10 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fb46 	bl	8002ca0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fd20 	bl	800105c <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fc3e 	bl	8002ec4 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fc39 	bl	8002ec4 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 facf 	bl	8002e88 <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 fac3 	bl	8002e88 <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800d5cc 	.word	0x0800d5cc
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800d60c 	.word	0x0800d60c

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f95a 	bl	8002e88 <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f002 f94c 	bl	8002e88 <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_fsub>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	46c6      	mov	lr, r8
 8000c90:	0243      	lsls	r3, r0, #9
 8000c92:	0a5b      	lsrs	r3, r3, #9
 8000c94:	0045      	lsls	r5, r0, #1
 8000c96:	00da      	lsls	r2, r3, #3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0248      	lsls	r0, r1, #9
 8000c9c:	004f      	lsls	r7, r1, #1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	0a42      	lsrs	r2, r0, #9
 8000ca2:	001e      	movs	r6, r3
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	b500      	push	{lr}
 8000ca8:	0e2d      	lsrs	r5, r5, #24
 8000caa:	0e3f      	lsrs	r7, r7, #24
 8000cac:	0fc9      	lsrs	r1, r1, #31
 8000cae:	0980      	lsrs	r0, r0, #6
 8000cb0:	2fff      	cmp	r7, #255	; 0xff
 8000cb2:	d059      	beq.n	8000d68 <__aeabi_fsub+0xdc>
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4051      	eors	r1, r2
 8000cb8:	428c      	cmp	r4, r1
 8000cba:	d039      	beq.n	8000d30 <__aeabi_fsub+0xa4>
 8000cbc:	1bea      	subs	r2, r5, r7
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	dd58      	ble.n	8000d74 <__aeabi_fsub+0xe8>
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d068      	beq.n	8000d98 <__aeabi_fsub+0x10c>
 8000cc6:	2dff      	cmp	r5, #255	; 0xff
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x40>
 8000cca:	e0d1      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	04db      	lsls	r3, r3, #19
 8000cd0:	4318      	orrs	r0, r3
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc00      	bgt.n	8000cd8 <__aeabi_fsub+0x4c>
 8000cd6:	e0e3      	b.n	8000ea0 <__aeabi_fsub+0x214>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4662      	mov	r2, ip
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0x58>
 8000ce2:	e0ac      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	099e      	lsrs	r6, r3, #6
 8000ce8:	0030      	movs	r0, r6
 8000cea:	f002 f8cd 	bl	8002e88 <__clzsi2>
 8000cee:	0033      	movs	r3, r6
 8000cf0:	3805      	subs	r0, #5
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fsub+0x6e>
 8000cf8:	e0c6      	b.n	8000e88 <__aeabi_fsub+0x1fc>
 8000cfa:	4ab2      	ldr	r2, [pc, #712]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000cfc:	1a2d      	subs	r5, r5, r0
 8000cfe:	4013      	ands	r3, r2
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	d004      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d04:	220f      	movs	r2, #15
 8000d06:	401a      	ands	r2, r3
 8000d08:	2a04      	cmp	r2, #4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_fsub+0x88>
 8000d12:	e097      	b.n	8000e44 <__aeabi_fsub+0x1b8>
 8000d14:	1c6a      	adds	r2, r5, #1
 8000d16:	2dfe      	cmp	r5, #254	; 0xfe
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x90>
 8000d1a:	e084      	b.n	8000e26 <__aeabi_fsub+0x19a>
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	0a5e      	lsrs	r6, r3, #9
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	05d0      	lsls	r0, r2, #23
 8000d24:	4330      	orrs	r0, r6
 8000d26:	07e4      	lsls	r4, r4, #31
 8000d28:	4320      	orrs	r0, r4
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	1bea      	subs	r2, r5, r7
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	dd41      	ble.n	8000dba <__aeabi_fsub+0x12e>
 8000d36:	2f00      	cmp	r7, #0
 8000d38:	d06b      	beq.n	8000e12 <__aeabi_fsub+0x186>
 8000d3a:	2dff      	cmp	r5, #255	; 0xff
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0xb4>
 8000d3e:	e097      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	04db      	lsls	r3, r3, #19
 8000d44:	4318      	orrs	r0, r3
 8000d46:	2a1b      	cmp	r2, #27
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_fsub+0xc0>
 8000d4a:	e0cc      	b.n	8000ee6 <__aeabi_fsub+0x25a>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4463      	add	r3, ip
 8000d50:	015a      	lsls	r2, r3, #5
 8000d52:	d574      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000d54:	3501      	adds	r5, #1
 8000d56:	2dff      	cmp	r5, #255	; 0xff
 8000d58:	d065      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	499a      	ldr	r1, [pc, #616]	; (8000fc8 <__aeabi_fsub+0x33c>)
 8000d5e:	401a      	ands	r2, r3
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	400b      	ands	r3, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	e7cb      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d01f      	beq.n	8000dac <__aeabi_fsub+0x120>
 8000d6c:	428c      	cmp	r4, r1
 8000d6e:	d022      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000d70:	002a      	movs	r2, r5
 8000d72:	3aff      	subs	r2, #255	; 0xff
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d035      	beq.n	8000de4 <__aeabi_fsub+0x158>
 8000d78:	1b7a      	subs	r2, r7, r5
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0xf4>
 8000d7e:	e099      	b.n	8000eb4 <__aeabi_fsub+0x228>
 8000d80:	4663      	mov	r3, ip
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0xfc>
 8000d86:	e0dd      	b.n	8000f44 <__aeabi_fsub+0x2b8>
 8000d88:	1e53      	subs	r3, r2, #1
 8000d8a:	2a01      	cmp	r2, #1
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x104>
 8000d8e:	e105      	b.n	8000f9c <__aeabi_fsub+0x310>
 8000d90:	2aff      	cmp	r2, #255	; 0xff
 8000d92:	d06b      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000d94:	001a      	movs	r2, r3
 8000d96:	e094      	b.n	8000ec2 <__aeabi_fsub+0x236>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d073      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000d9c:	1e51      	subs	r1, r2, #1
 8000d9e:	2a01      	cmp	r2, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x118>
 8000da2:	e0df      	b.n	8000f64 <__aeabi_fsub+0x2d8>
 8000da4:	2aff      	cmp	r2, #255	; 0xff
 8000da6:	d063      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000da8:	000a      	movs	r2, r1
 8000daa:	e792      	b.n	8000cd2 <__aeabi_fsub+0x46>
 8000dac:	2201      	movs	r2, #1
 8000dae:	4051      	eors	r1, r2
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000db4:	e782      	b.n	8000cbc <__aeabi_fsub+0x30>
 8000db6:	002a      	movs	r2, r5
 8000db8:	3aff      	subs	r2, #255	; 0xff
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d036      	beq.n	8000e2c <__aeabi_fsub+0x1a0>
 8000dbe:	1b7a      	subs	r2, r7, r5
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x13a>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_fsub+0x290>
 8000dc6:	2fff      	cmp	r7, #255	; 0xff
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x140>
 8000dca:	e0da      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	4661      	mov	r1, ip
 8000dd0:	04db      	lsls	r3, r3, #19
 8000dd2:	4319      	orrs	r1, r3
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2a1b      	cmp	r2, #27
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fsub+0x150>
 8000dda:	e0d4      	b.n	8000f86 <__aeabi_fsub+0x2fa>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	003d      	movs	r5, r7
 8000de0:	181b      	adds	r3, r3, r0
 8000de2:	e7b5      	b.n	8000d50 <__aeabi_fsub+0xc4>
 8000de4:	27fe      	movs	r7, #254	; 0xfe
 8000de6:	1c6a      	adds	r2, r5, #1
 8000de8:	4217      	tst	r7, r2
 8000dea:	d171      	bne.n	8000ed0 <__aeabi_fsub+0x244>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fsub+0x166>
 8000df0:	e09e      	b.n	8000f30 <__aeabi_fsub+0x2a4>
 8000df2:	4663      	mov	r3, ip
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x16e>
 8000df8:	e0d5      	b.n	8000fa6 <__aeabi_fsub+0x31a>
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x176>
 8000e00:	e78f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e02:	1a1b      	subs	r3, r3, r0
 8000e04:	015e      	lsls	r6, r3, #5
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_fsub+0x17e>
 8000e08:	e0d6      	b.n	8000fb8 <__aeabi_fsub+0x32c>
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	1ac3      	subs	r3, r0, r3
 8000e10:	e776      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d036      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000e16:	1e51      	subs	r1, r2, #1
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x192>
 8000e1c:	e09a      	b.n	8000f54 <__aeabi_fsub+0x2c8>
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d026      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e22:	000a      	movs	r2, r1
 8000e24:	e78f      	b.n	8000d46 <__aeabi_fsub+0xba>
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e77a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e2c:	27fe      	movs	r7, #254	; 0xfe
 8000e2e:	1c6a      	adds	r2, r5, #1
 8000e30:	4217      	tst	r7, r2
 8000e32:	d062      	beq.n	8000efa <__aeabi_fsub+0x26e>
 8000e34:	2aff      	cmp	r2, #255	; 0xff
 8000e36:	d0f6      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e38:	0015      	movs	r5, r2
 8000e3a:	4460      	add	r0, ip
 8000e3c:	0843      	lsrs	r3, r0, #1
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x1b8>
 8000e42:	e75f      	b.n	8000d04 <__aeabi_fsub+0x78>
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	2dff      	cmp	r5, #255	; 0xff
 8000e48:	d012      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	0a5e      	lsrs	r6, r3, #9
 8000e4e:	b2ea      	uxtb	r2, r5
 8000e50:	e767      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e52:	4662      	mov	r2, ip
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000e58:	e093      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d008      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	03d2      	lsls	r2, r2, #15
 8000e62:	4213      	tst	r3, r2
 8000e64:	d004      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e66:	4640      	mov	r0, r8
 8000e68:	4210      	tst	r0, r2
 8000e6a:	d101      	bne.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	4643      	mov	r3, r8
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0d8      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e74:	2680      	movs	r6, #128	; 0x80
 8000e76:	03f6      	lsls	r6, r6, #15
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	0276      	lsls	r6, r6, #9
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	0a76      	lsrs	r6, r6, #9
 8000e80:	e74f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e82:	4643      	mov	r3, r8
 8000e84:	0015      	movs	r5, r2
 8000e86:	e7de      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000e88:	2220      	movs	r2, #32
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	1a12      	subs	r2, r2, r0
 8000e90:	0019      	movs	r1, r3
 8000e92:	4093      	lsls	r3, r2
 8000e94:	40c1      	lsrs	r1, r0
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4193      	sbcs	r3, r2
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	e72f      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	40d1      	lsrs	r1, r2
 8000eac:	1e5a      	subs	r2, r3, #1
 8000eae:	4193      	sbcs	r3, r2
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	e712      	b.n	8000cda <__aeabi_fsub+0x4e>
 8000eb4:	2fff      	cmp	r7, #255	; 0xff
 8000eb6:	d0d9      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	4664      	mov	r4, ip
 8000ebc:	04db      	lsls	r3, r3, #19
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	2a1b      	cmp	r2, #27
 8000ec4:	dd52      	ble.n	8000f6c <__aeabi_fsub+0x2e0>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	000c      	movs	r4, r1
 8000eca:	003d      	movs	r5, r7
 8000ecc:	1ac3      	subs	r3, r0, r3
 8000ece:	e706      	b.n	8000cde <__aeabi_fsub+0x52>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	1a1e      	subs	r6, r3, r0
 8000ed4:	0173      	lsls	r3, r6, #5
 8000ed6:	d439      	bmi.n	8000f4c <__aeabi_fsub+0x2c0>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000edc:	e704      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	e71d      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	0001      	movs	r1, r0
 8000eec:	4098      	lsls	r0, r3
 8000eee:	0003      	movs	r3, r0
 8000ef0:	40d1      	lsrs	r1, r2
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	4193      	sbcs	r3, r2
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	e729      	b.n	8000d4e <__aeabi_fsub+0xc2>
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	d1a9      	bne.n	8000e52 <__aeabi_fsub+0x1c6>
 8000efe:	4663      	mov	r3, ip
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d056      	beq.n	8000fb2 <__aeabi_fsub+0x326>
 8000f04:	2200      	movs	r2, #0
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x280>
 8000f0a:	e70a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	4463      	add	r3, ip
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	d594      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f14:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000f16:	3501      	adds	r5, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	e790      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0af      	beq.n	8000e82 <__aeabi_fsub+0x1f6>
 8000f22:	1e53      	subs	r3, r2, #1
 8000f24:	2a01      	cmp	r2, #1
 8000f26:	d015      	beq.n	8000f54 <__aeabi_fsub+0x2c8>
 8000f28:	2aff      	cmp	r2, #255	; 0xff
 8000f2a:	d02a      	beq.n	8000f82 <__aeabi_fsub+0x2f6>
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	e752      	b.n	8000dd6 <__aeabi_fsub+0x14a>
 8000f30:	4662      	mov	r2, ip
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d191      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d198      	bne.n	8000e6c <__aeabi_fsub+0x1e0>
 8000f3a:	2680      	movs	r6, #128	; 0x80
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	03f6      	lsls	r6, r6, #15
 8000f42:	e6ee      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f44:	000c      	movs	r4, r1
 8000f46:	4643      	mov	r3, r8
 8000f48:	0015      	movs	r5, r2
 8000f4a:	e77c      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	000c      	movs	r4, r1
 8000f50:	1ac6      	subs	r6, r0, r3
 8000f52:	e6c9      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000f54:	0003      	movs	r3, r0
 8000f56:	4463      	add	r3, ip
 8000f58:	2501      	movs	r5, #1
 8000f5a:	015a      	lsls	r2, r3, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x2d4>
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f60:	2502      	movs	r5, #2
 8000f62:	e6fa      	b.n	8000d5a <__aeabi_fsub+0xce>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2501      	movs	r5, #1
 8000f68:	1a1b      	subs	r3, r3, r0
 8000f6a:	e6b8      	b.n	8000cde <__aeabi_fsub+0x52>
 8000f6c:	4664      	mov	r4, ip
 8000f6e:	2320      	movs	r3, #32
 8000f70:	40d4      	lsrs	r4, r2
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	4662      	mov	r2, ip
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	4193      	sbcs	r3, r2
 8000f7e:	4323      	orrs	r3, r4
 8000f80:	e7a2      	b.n	8000ec8 <__aeabi_fsub+0x23c>
 8000f82:	4643      	mov	r3, r8
 8000f84:	e774      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000f86:	4661      	mov	r1, ip
 8000f88:	2320      	movs	r3, #32
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	4662      	mov	r2, ip
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	4193      	sbcs	r3, r2
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	e720      	b.n	8000dde <__aeabi_fsub+0x152>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	1ac3      	subs	r3, r0, r3
 8000fa4:	e69b      	b.n	8000cde <__aeabi_fsub+0x52>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d099      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000faa:	000c      	movs	r4, r1
 8000fac:	4646      	mov	r6, r8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	e6b7      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb2:	4646      	mov	r6, r8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	e6b4      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0x332>
 8000fbc:	e73f      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e6ae      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fc4:	fbffffff 	.word	0xfbffffff
 8000fc8:	7dffffff 	.word	0x7dffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e04      	subs	r4, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f001 ff59 	bl	8002e88 <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0001      	movs	r1, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	d02c      	beq.n	800103e <__aeabi_ui2f+0x72>
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	408c      	lsls	r4, r1
 8000fe8:	0264      	lsls	r4, r4, #9
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4320      	orrs	r0, r4
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd0a      	ble.n	8001014 <__aeabi_ui2f+0x48>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0020      	movs	r0, r4
 8001002:	321b      	adds	r2, #27
 8001004:	4090      	lsls	r0, r2
 8001006:	0002      	movs	r2, r0
 8001008:	1e50      	subs	r0, r2, #1
 800100a:	4182      	sbcs	r2, r0
 800100c:	2005      	movs	r0, #5
 800100e:	1a40      	subs	r0, r0, r1
 8001010:	40c4      	lsrs	r4, r0
 8001012:	4314      	orrs	r4, r2
 8001014:	2905      	cmp	r1, #5
 8001016:	dc16      	bgt.n	8001046 <__aeabi_ui2f+0x7a>
 8001018:	0022      	movs	r2, r4
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <__aeabi_ui2f+0x8c>)
 800101c:	4002      	ands	r2, r0
 800101e:	0765      	lsls	r5, r4, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001022:	250f      	movs	r5, #15
 8001024:	402c      	ands	r4, r5
 8001026:	2c04      	cmp	r4, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 800102a:	3204      	adds	r2, #4
 800102c:	0154      	lsls	r4, r2, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_ui2f+0x6a>
 8001030:	239f      	movs	r3, #159	; 0x9f
 8001032:	4002      	ands	r2, r0
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	0192      	lsls	r2, r2, #6
 8001038:	0a54      	lsrs	r4, r2, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e7da      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103e:	0264      	lsls	r4, r4, #9
 8001040:	2096      	movs	r0, #150	; 0x96
 8001042:	0a64      	lsrs	r4, r4, #9
 8001044:	e7d6      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8001046:	1f4a      	subs	r2, r1, #5
 8001048:	4094      	lsls	r4, r2
 800104a:	0022      	movs	r2, r4
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <__aeabi_ui2f+0x8c>)
 800104e:	4002      	ands	r2, r0
 8001050:	0765      	lsls	r5, r4, #29
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001054:	e7e5      	b.n	8001022 <__aeabi_ui2f+0x56>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_dadd>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	464f      	mov	r7, r9
 8001060:	4646      	mov	r6, r8
 8001062:	46d6      	mov	lr, sl
 8001064:	0004      	movs	r4, r0
 8001066:	b5c0      	push	{r6, r7, lr}
 8001068:	001f      	movs	r7, r3
 800106a:	030b      	lsls	r3, r1, #12
 800106c:	0010      	movs	r0, r2
 800106e:	004e      	lsls	r6, r1, #1
 8001070:	0a5b      	lsrs	r3, r3, #9
 8001072:	0fcd      	lsrs	r5, r1, #31
 8001074:	0f61      	lsrs	r1, r4, #29
 8001076:	007a      	lsls	r2, r7, #1
 8001078:	4319      	orrs	r1, r3
 800107a:	00e3      	lsls	r3, r4, #3
 800107c:	033c      	lsls	r4, r7, #12
 800107e:	0fff      	lsrs	r7, r7, #31
 8001080:	46bc      	mov	ip, r7
 8001082:	0a64      	lsrs	r4, r4, #9
 8001084:	0f47      	lsrs	r7, r0, #29
 8001086:	4327      	orrs	r7, r4
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	00c0      	lsls	r0, r0, #3
 800108e:	46b9      	mov	r9, r7
 8001090:	4680      	mov	r8, r0
 8001092:	1ab7      	subs	r7, r6, r2
 8001094:	4565      	cmp	r5, ip
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x3e>
 8001098:	e09b      	b.n	80011d2 <__aeabi_dadd+0x176>
 800109a:	2f00      	cmp	r7, #0
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_dadd+0x44>
 800109e:	e084      	b.n	80011aa <__aeabi_dadd+0x14e>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x4a>
 80010a4:	e0be      	b.n	8001224 <__aeabi_dadd+0x1c8>
 80010a6:	4ac8      	ldr	r2, [pc, #800]	; (80013c8 <__aeabi_dadd+0x36c>)
 80010a8:	4296      	cmp	r6, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x52>
 80010ac:	e124      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	464c      	mov	r4, r9
 80010b2:	0412      	lsls	r2, r2, #16
 80010b4:	4314      	orrs	r4, r2
 80010b6:	46a1      	mov	r9, r4
 80010b8:	2f38      	cmp	r7, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x62>
 80010bc:	e167      	b.n	800138e <__aeabi_dadd+0x332>
 80010be:	2f1f      	cmp	r7, #31
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_dadd+0x68>
 80010c2:	e1d6      	b.n	8001472 <__aeabi_dadd+0x416>
 80010c4:	2220      	movs	r2, #32
 80010c6:	464c      	mov	r4, r9
 80010c8:	1bd2      	subs	r2, r2, r7
 80010ca:	4094      	lsls	r4, r2
 80010cc:	46a2      	mov	sl, r4
 80010ce:	4644      	mov	r4, r8
 80010d0:	40fc      	lsrs	r4, r7
 80010d2:	0020      	movs	r0, r4
 80010d4:	4654      	mov	r4, sl
 80010d6:	4304      	orrs	r4, r0
 80010d8:	4640      	mov	r0, r8
 80010da:	4090      	lsls	r0, r2
 80010dc:	1e42      	subs	r2, r0, #1
 80010de:	4190      	sbcs	r0, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	40fa      	lsrs	r2, r7
 80010e4:	4304      	orrs	r4, r0
 80010e6:	1a89      	subs	r1, r1, r2
 80010e8:	1b1c      	subs	r4, r3, r4
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	4192      	sbcs	r2, r2
 80010ee:	4252      	negs	r2, r2
 80010f0:	1a8b      	subs	r3, r1, r2
 80010f2:	469a      	mov	sl, r3
 80010f4:	4653      	mov	r3, sl
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0xa0>
 80010fa:	e0d4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80010fc:	4653      	mov	r3, sl
 80010fe:	025a      	lsls	r2, r3, #9
 8001100:	0a53      	lsrs	r3, r2, #9
 8001102:	469a      	mov	sl, r3
 8001104:	4653      	mov	r3, sl
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0xb0>
 800110a:	e104      	b.n	8001316 <__aeabi_dadd+0x2ba>
 800110c:	4650      	mov	r0, sl
 800110e:	f001 febb 	bl	8002e88 <__clzsi2>
 8001112:	0003      	movs	r3, r0
 8001114:	3b08      	subs	r3, #8
 8001116:	2220      	movs	r2, #32
 8001118:	0020      	movs	r0, r4
 800111a:	1ad2      	subs	r2, r2, r3
 800111c:	4651      	mov	r1, sl
 800111e:	40d0      	lsrs	r0, r2
 8001120:	4099      	lsls	r1, r3
 8001122:	0002      	movs	r2, r0
 8001124:	409c      	lsls	r4, r3
 8001126:	430a      	orrs	r2, r1
 8001128:	42b3      	cmp	r3, r6
 800112a:	da00      	bge.n	800112e <__aeabi_dadd+0xd2>
 800112c:	e102      	b.n	8001334 <__aeabi_dadd+0x2d8>
 800112e:	1b9b      	subs	r3, r3, r6
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	291f      	cmp	r1, #31
 8001134:	dd00      	ble.n	8001138 <__aeabi_dadd+0xdc>
 8001136:	e0a7      	b.n	8001288 <__aeabi_dadd+0x22c>
 8001138:	2320      	movs	r3, #32
 800113a:	0010      	movs	r0, r2
 800113c:	0026      	movs	r6, r4
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	409c      	lsls	r4, r3
 8001142:	4098      	lsls	r0, r3
 8001144:	40ce      	lsrs	r6, r1
 8001146:	40ca      	lsrs	r2, r1
 8001148:	1e63      	subs	r3, r4, #1
 800114a:	419c      	sbcs	r4, r3
 800114c:	4330      	orrs	r0, r6
 800114e:	4692      	mov	sl, r2
 8001150:	2600      	movs	r6, #0
 8001152:	4304      	orrs	r4, r0
 8001154:	0763      	lsls	r3, r4, #29
 8001156:	d009      	beq.n	800116c <__aeabi_dadd+0x110>
 8001158:	230f      	movs	r3, #15
 800115a:	4023      	ands	r3, r4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <__aeabi_dadd+0x110>
 8001160:	1d23      	adds	r3, r4, #4
 8001162:	42a3      	cmp	r3, r4
 8001164:	41a4      	sbcs	r4, r4
 8001166:	4264      	negs	r4, r4
 8001168:	44a2      	add	sl, r4
 800116a:	001c      	movs	r4, r3
 800116c:	4653      	mov	r3, sl
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_dadd+0x118>
 8001172:	e09b      	b.n	80012ac <__aeabi_dadd+0x250>
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001176:	3601      	adds	r6, #1
 8001178:	429e      	cmp	r6, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x122>
 800117c:	e0b8      	b.n	80012f0 <__aeabi_dadd+0x294>
 800117e:	4653      	mov	r3, sl
 8001180:	4992      	ldr	r1, [pc, #584]	; (80013cc <__aeabi_dadd+0x370>)
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	400b      	ands	r3, r1
 8001186:	0019      	movs	r1, r3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	4323      	orrs	r3, r4
 800118c:	0572      	lsls	r2, r6, #21
 800118e:	024c      	lsls	r4, r1, #9
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d52      	lsrs	r2, r2, #21
 8001194:	0512      	lsls	r2, r2, #20
 8001196:	07ed      	lsls	r5, r5, #31
 8001198:	4322      	orrs	r2, r4
 800119a:	432a      	orrs	r2, r5
 800119c:	0018      	movs	r0, r3
 800119e:	0011      	movs	r1, r2
 80011a0:	bce0      	pop	{r5, r6, r7}
 80011a2:	46ba      	mov	sl, r7
 80011a4:	46b1      	mov	r9, r6
 80011a6:	46a8      	mov	r8, r5
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d048      	beq.n	8001240 <__aeabi_dadd+0x1e4>
 80011ae:	1b97      	subs	r7, r2, r6
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x15a>
 80011b4:	e10e      	b.n	80013d4 <__aeabi_dadd+0x378>
 80011b6:	000c      	movs	r4, r1
 80011b8:	431c      	orrs	r4, r3
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x162>
 80011bc:	e1b7      	b.n	800152e <__aeabi_dadd+0x4d2>
 80011be:	1e7c      	subs	r4, r7, #1
 80011c0:	2f01      	cmp	r7, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x16a>
 80011c4:	e226      	b.n	8001614 <__aeabi_dadd+0x5b8>
 80011c6:	4d80      	ldr	r5, [pc, #512]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011c8:	42af      	cmp	r7, r5
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x172>
 80011cc:	e1d5      	b.n	800157a <__aeabi_dadd+0x51e>
 80011ce:	0027      	movs	r7, r4
 80011d0:	e107      	b.n	80013e2 <__aeabi_dadd+0x386>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dadd+0x17c>
 80011d6:	e0b2      	b.n	800133e <__aeabi_dadd+0x2e2>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d047      	beq.n	800126c <__aeabi_dadd+0x210>
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011de:	4296      	cmp	r6, r2
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x188>
 80011e2:	e089      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	464c      	mov	r4, r9
 80011e8:	0412      	lsls	r2, r2, #16
 80011ea:	4314      	orrs	r4, r2
 80011ec:	46a1      	mov	r9, r4
 80011ee:	2f38      	cmp	r7, #56	; 0x38
 80011f0:	dc6b      	bgt.n	80012ca <__aeabi_dadd+0x26e>
 80011f2:	2f1f      	cmp	r7, #31
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dadd+0x19c>
 80011f6:	e16e      	b.n	80014d6 <__aeabi_dadd+0x47a>
 80011f8:	003a      	movs	r2, r7
 80011fa:	4648      	mov	r0, r9
 80011fc:	3a20      	subs	r2, #32
 80011fe:	40d0      	lsrs	r0, r2
 8001200:	4684      	mov	ip, r0
 8001202:	2f20      	cmp	r7, #32
 8001204:	d007      	beq.n	8001216 <__aeabi_dadd+0x1ba>
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	4648      	mov	r0, r9
 800120a:	1bd2      	subs	r2, r2, r7
 800120c:	4090      	lsls	r0, r2
 800120e:	0002      	movs	r2, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4310      	orrs	r0, r2
 8001214:	4680      	mov	r8, r0
 8001216:	4640      	mov	r0, r8
 8001218:	1e42      	subs	r2, r0, #1
 800121a:	4190      	sbcs	r0, r2
 800121c:	4662      	mov	r2, ip
 800121e:	0004      	movs	r4, r0
 8001220:	4314      	orrs	r4, r2
 8001222:	e057      	b.n	80012d4 <__aeabi_dadd+0x278>
 8001224:	464a      	mov	r2, r9
 8001226:	4302      	orrs	r2, r0
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x1d0>
 800122a:	e103      	b.n	8001434 <__aeabi_dadd+0x3d8>
 800122c:	1e7a      	subs	r2, r7, #1
 800122e:	2f01      	cmp	r7, #1
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x1d8>
 8001232:	e193      	b.n	800155c <__aeabi_dadd+0x500>
 8001234:	4c64      	ldr	r4, [pc, #400]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001236:	42a7      	cmp	r7, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x1e0>
 800123a:	e18a      	b.n	8001552 <__aeabi_dadd+0x4f6>
 800123c:	0017      	movs	r7, r2
 800123e:	e73b      	b.n	80010b8 <__aeabi_dadd+0x5c>
 8001240:	4c63      	ldr	r4, [pc, #396]	; (80013d0 <__aeabi_dadd+0x374>)
 8001242:	1c72      	adds	r2, r6, #1
 8001244:	4222      	tst	r2, r4
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x1ee>
 8001248:	e0e0      	b.n	800140c <__aeabi_dadd+0x3b0>
 800124a:	000a      	movs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1f8>
 8001252:	e174      	b.n	800153e <__aeabi_dadd+0x4e2>
 8001254:	2a00      	cmp	r2, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1fe>
 8001258:	e1d0      	b.n	80015fc <__aeabi_dadd+0x5a0>
 800125a:	464a      	mov	r2, r9
 800125c:	4302      	orrs	r2, r0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x206>
 8001260:	e1e3      	b.n	800162a <__aeabi_dadd+0x5ce>
 8001262:	074a      	lsls	r2, r1, #29
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	08c9      	lsrs	r1, r1, #3
 800126a:	e029      	b.n	80012c0 <__aeabi_dadd+0x264>
 800126c:	464a      	mov	r2, r9
 800126e:	4302      	orrs	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x218>
 8001272:	e17d      	b.n	8001570 <__aeabi_dadd+0x514>
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	2f01      	cmp	r7, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x220>
 800127a:	e0e0      	b.n	800143e <__aeabi_dadd+0x3e2>
 800127c:	4c52      	ldr	r4, [pc, #328]	; (80013c8 <__aeabi_dadd+0x36c>)
 800127e:	42a7      	cmp	r7, r4
 8001280:	d100      	bne.n	8001284 <__aeabi_dadd+0x228>
 8001282:	e166      	b.n	8001552 <__aeabi_dadd+0x4f6>
 8001284:	0017      	movs	r7, r2
 8001286:	e7b2      	b.n	80011ee <__aeabi_dadd+0x192>
 8001288:	0010      	movs	r0, r2
 800128a:	3b1f      	subs	r3, #31
 800128c:	40d8      	lsrs	r0, r3
 800128e:	2920      	cmp	r1, #32
 8001290:	d003      	beq.n	800129a <__aeabi_dadd+0x23e>
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	409a      	lsls	r2, r3
 8001298:	4314      	orrs	r4, r2
 800129a:	1e63      	subs	r3, r4, #1
 800129c:	419c      	sbcs	r4, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	469a      	mov	sl, r3
 80012a4:	4304      	orrs	r4, r0
 80012a6:	0763      	lsls	r3, r4, #29
 80012a8:	d000      	beq.n	80012ac <__aeabi_dadd+0x250>
 80012aa:	e755      	b.n	8001158 <__aeabi_dadd+0xfc>
 80012ac:	4652      	mov	r2, sl
 80012ae:	08e3      	lsrs	r3, r4, #3
 80012b0:	0752      	lsls	r2, r2, #29
 80012b2:	4313      	orrs	r3, r2
 80012b4:	4652      	mov	r2, sl
 80012b6:	0037      	movs	r7, r6
 80012b8:	08d1      	lsrs	r1, r2, #3
 80012ba:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012bc:	4297      	cmp	r7, r2
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x2a4>
 80012c0:	0309      	lsls	r1, r1, #12
 80012c2:	057a      	lsls	r2, r7, #21
 80012c4:	0b0c      	lsrs	r4, r1, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	e764      	b.n	8001194 <__aeabi_dadd+0x138>
 80012ca:	4642      	mov	r2, r8
 80012cc:	464c      	mov	r4, r9
 80012ce:	4314      	orrs	r4, r2
 80012d0:	1e62      	subs	r2, r4, #1
 80012d2:	4194      	sbcs	r4, r2
 80012d4:	18e4      	adds	r4, r4, r3
 80012d6:	429c      	cmp	r4, r3
 80012d8:	4192      	sbcs	r2, r2
 80012da:	4252      	negs	r2, r2
 80012dc:	4692      	mov	sl, r2
 80012de:	448a      	add	sl, r1
 80012e0:	4653      	mov	r3, sl
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	d5df      	bpl.n	80012a6 <__aeabi_dadd+0x24a>
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x294>
 80012ee:	e0b3      	b.n	8001458 <__aeabi_dadd+0x3fc>
 80012f0:	0032      	movs	r2, r6
 80012f2:	2400      	movs	r4, #0
 80012f4:	2300      	movs	r3, #0
 80012f6:	e74d      	b.n	8001194 <__aeabi_dadd+0x138>
 80012f8:	074a      	lsls	r2, r1, #29
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	001a      	movs	r2, r3
 8001302:	430a      	orrs	r2, r1
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x2ac>
 8001306:	e200      	b.n	800170a <__aeabi_dadd+0x6ae>
 8001308:	2480      	movs	r4, #128	; 0x80
 800130a:	0324      	lsls	r4, r4, #12
 800130c:	430c      	orrs	r4, r1
 800130e:	0324      	lsls	r4, r4, #12
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001312:	0b24      	lsrs	r4, r4, #12
 8001314:	e73e      	b.n	8001194 <__aeabi_dadd+0x138>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fdb6 	bl	8002e88 <__clzsi2>
 800131c:	0003      	movs	r3, r0
 800131e:	3318      	adds	r3, #24
 8001320:	2b1f      	cmp	r3, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x2ca>
 8001324:	e6f7      	b.n	8001116 <__aeabi_dadd+0xba>
 8001326:	0022      	movs	r2, r4
 8001328:	3808      	subs	r0, #8
 800132a:	4082      	lsls	r2, r0
 800132c:	2400      	movs	r4, #0
 800132e:	42b3      	cmp	r3, r6
 8001330:	db00      	blt.n	8001334 <__aeabi_dadd+0x2d8>
 8001332:	e6fc      	b.n	800112e <__aeabi_dadd+0xd2>
 8001334:	1af6      	subs	r6, r6, r3
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <__aeabi_dadd+0x370>)
 8001338:	401a      	ands	r2, r3
 800133a:	4692      	mov	sl, r2
 800133c:	e70a      	b.n	8001154 <__aeabi_dadd+0xf8>
 800133e:	2f00      	cmp	r7, #0
 8001340:	d02b      	beq.n	800139a <__aeabi_dadd+0x33e>
 8001342:	1b97      	subs	r7, r2, r6
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x2ee>
 8001348:	e0b8      	b.n	80014bc <__aeabi_dadd+0x460>
 800134a:	4c1f      	ldr	r4, [pc, #124]	; (80013c8 <__aeabi_dadd+0x36c>)
 800134c:	42a2      	cmp	r2, r4
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x2f6>
 8001350:	e11c      	b.n	800158c <__aeabi_dadd+0x530>
 8001352:	2480      	movs	r4, #128	; 0x80
 8001354:	0424      	lsls	r4, r4, #16
 8001356:	4321      	orrs	r1, r4
 8001358:	2f38      	cmp	r7, #56	; 0x38
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0x302>
 800135c:	e11e      	b.n	800159c <__aeabi_dadd+0x540>
 800135e:	2f1f      	cmp	r7, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x308>
 8001362:	e19e      	b.n	80016a2 <__aeabi_dadd+0x646>
 8001364:	2620      	movs	r6, #32
 8001366:	000c      	movs	r4, r1
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	0018      	movs	r0, r3
 800136c:	40b3      	lsls	r3, r6
 800136e:	40b4      	lsls	r4, r6
 8001370:	40f8      	lsrs	r0, r7
 8001372:	1e5e      	subs	r6, r3, #1
 8001374:	41b3      	sbcs	r3, r6
 8001376:	40f9      	lsrs	r1, r7
 8001378:	4304      	orrs	r4, r0
 800137a:	431c      	orrs	r4, r3
 800137c:	4489      	add	r9, r1
 800137e:	4444      	add	r4, r8
 8001380:	4544      	cmp	r4, r8
 8001382:	419b      	sbcs	r3, r3
 8001384:	425b      	negs	r3, r3
 8001386:	444b      	add	r3, r9
 8001388:	469a      	mov	sl, r3
 800138a:	0016      	movs	r6, r2
 800138c:	e7a8      	b.n	80012e0 <__aeabi_dadd+0x284>
 800138e:	4642      	mov	r2, r8
 8001390:	464c      	mov	r4, r9
 8001392:	4314      	orrs	r4, r2
 8001394:	1e62      	subs	r2, r4, #1
 8001396:	4194      	sbcs	r4, r2
 8001398:	e6a6      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800139a:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__aeabi_dadd+0x374>)
 800139c:	1c72      	adds	r2, r6, #1
 800139e:	4222      	tst	r2, r4
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x348>
 80013a2:	e0a8      	b.n	80014f6 <__aeabi_dadd+0x49a>
 80013a4:	000a      	movs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x352>
 80013ac:	e10a      	b.n	80015c4 <__aeabi_dadd+0x568>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x358>
 80013b2:	e15e      	b.n	8001672 <__aeabi_dadd+0x616>
 80013b4:	464a      	mov	r2, r9
 80013b6:	4302      	orrs	r2, r0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x360>
 80013ba:	e161      	b.n	8001680 <__aeabi_dadd+0x624>
 80013bc:	074a      	lsls	r2, r1, #29
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	08c9      	lsrs	r1, r1, #3
 80013c4:	e77c      	b.n	80012c0 <__aeabi_dadd+0x264>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	4ccf      	ldr	r4, [pc, #828]	; (8001714 <__aeabi_dadd+0x6b8>)
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x380>
 80013da:	e0ce      	b.n	800157a <__aeabi_dadd+0x51e>
 80013dc:	2480      	movs	r4, #128	; 0x80
 80013de:	0424      	lsls	r4, r4, #16
 80013e0:	4321      	orrs	r1, r4
 80013e2:	2f38      	cmp	r7, #56	; 0x38
 80013e4:	dc5b      	bgt.n	800149e <__aeabi_dadd+0x442>
 80013e6:	2f1f      	cmp	r7, #31
 80013e8:	dd00      	ble.n	80013ec <__aeabi_dadd+0x390>
 80013ea:	e0dc      	b.n	80015a6 <__aeabi_dadd+0x54a>
 80013ec:	2520      	movs	r5, #32
 80013ee:	000c      	movs	r4, r1
 80013f0:	1bed      	subs	r5, r5, r7
 80013f2:	001e      	movs	r6, r3
 80013f4:	40ab      	lsls	r3, r5
 80013f6:	40ac      	lsls	r4, r5
 80013f8:	40fe      	lsrs	r6, r7
 80013fa:	1e5d      	subs	r5, r3, #1
 80013fc:	41ab      	sbcs	r3, r5
 80013fe:	4334      	orrs	r4, r6
 8001400:	40f9      	lsrs	r1, r7
 8001402:	431c      	orrs	r4, r3
 8001404:	464b      	mov	r3, r9
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4699      	mov	r9, r3
 800140a:	e04c      	b.n	80014a6 <__aeabi_dadd+0x44a>
 800140c:	464a      	mov	r2, r9
 800140e:	1a1c      	subs	r4, r3, r0
 8001410:	1a88      	subs	r0, r1, r2
 8001412:	42a3      	cmp	r3, r4
 8001414:	4192      	sbcs	r2, r2
 8001416:	4252      	negs	r2, r2
 8001418:	4692      	mov	sl, r2
 800141a:	0002      	movs	r2, r0
 800141c:	4650      	mov	r0, sl
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	4692      	mov	sl, r2
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	d478      	bmi.n	8001518 <__aeabi_dadd+0x4bc>
 8001426:	4653      	mov	r3, sl
 8001428:	4323      	orrs	r3, r4
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3d2>
 800142c:	e66a      	b.n	8001104 <__aeabi_dadd+0xa8>
 800142e:	2100      	movs	r1, #0
 8001430:	2500      	movs	r5, #0
 8001432:	e745      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001434:	074a      	lsls	r2, r1, #29
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	4313      	orrs	r3, r2
 800143a:	08c9      	lsrs	r1, r1, #3
 800143c:	e73d      	b.n	80012ba <__aeabi_dadd+0x25e>
 800143e:	181c      	adds	r4, r3, r0
 8001440:	429c      	cmp	r4, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	4449      	add	r1, r9
 8001446:	468a      	mov	sl, r1
 8001448:	425b      	negs	r3, r3
 800144a:	449a      	add	sl, r3
 800144c:	4653      	mov	r3, sl
 800144e:	2601      	movs	r6, #1
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x3fa>
 8001454:	e727      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001456:	2602      	movs	r6, #2
 8001458:	4652      	mov	r2, sl
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <__aeabi_dadd+0x6bc>)
 800145c:	2101      	movs	r1, #1
 800145e:	401a      	ands	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4021      	ands	r1, r4
 8001464:	0862      	lsrs	r2, r4, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	07dc      	lsls	r4, r3, #31
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	469a      	mov	sl, r3
 800146e:	4314      	orrs	r4, r2
 8001470:	e670      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001472:	003a      	movs	r2, r7
 8001474:	464c      	mov	r4, r9
 8001476:	3a20      	subs	r2, #32
 8001478:	40d4      	lsrs	r4, r2
 800147a:	46a4      	mov	ip, r4
 800147c:	2f20      	cmp	r7, #32
 800147e:	d007      	beq.n	8001490 <__aeabi_dadd+0x434>
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	4648      	mov	r0, r9
 8001484:	1bd2      	subs	r2, r2, r7
 8001486:	4090      	lsls	r0, r2
 8001488:	0002      	movs	r2, r0
 800148a:	4640      	mov	r0, r8
 800148c:	4310      	orrs	r0, r2
 800148e:	4680      	mov	r8, r0
 8001490:	4640      	mov	r0, r8
 8001492:	1e42      	subs	r2, r0, #1
 8001494:	4190      	sbcs	r0, r2
 8001496:	4662      	mov	r2, ip
 8001498:	0004      	movs	r4, r0
 800149a:	4314      	orrs	r4, r2
 800149c:	e624      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800149e:	4319      	orrs	r1, r3
 80014a0:	000c      	movs	r4, r1
 80014a2:	1e63      	subs	r3, r4, #1
 80014a4:	419c      	sbcs	r4, r3
 80014a6:	4643      	mov	r3, r8
 80014a8:	1b1c      	subs	r4, r3, r4
 80014aa:	45a0      	cmp	r8, r4
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	4649      	mov	r1, r9
 80014b0:	425b      	negs	r3, r3
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	469a      	mov	sl, r3
 80014b6:	4665      	mov	r5, ip
 80014b8:	0016      	movs	r6, r2
 80014ba:	e61b      	b.n	80010f4 <__aeabi_dadd+0x98>
 80014bc:	000c      	movs	r4, r1
 80014be:	431c      	orrs	r4, r3
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x468>
 80014c2:	e0c7      	b.n	8001654 <__aeabi_dadd+0x5f8>
 80014c4:	1e7c      	subs	r4, r7, #1
 80014c6:	2f01      	cmp	r7, #1
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x470>
 80014ca:	e0f9      	b.n	80016c0 <__aeabi_dadd+0x664>
 80014cc:	4e91      	ldr	r6, [pc, #580]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014ce:	42b7      	cmp	r7, r6
 80014d0:	d05c      	beq.n	800158c <__aeabi_dadd+0x530>
 80014d2:	0027      	movs	r7, r4
 80014d4:	e740      	b.n	8001358 <__aeabi_dadd+0x2fc>
 80014d6:	2220      	movs	r2, #32
 80014d8:	464c      	mov	r4, r9
 80014da:	4640      	mov	r0, r8
 80014dc:	1bd2      	subs	r2, r2, r7
 80014de:	4094      	lsls	r4, r2
 80014e0:	40f8      	lsrs	r0, r7
 80014e2:	4304      	orrs	r4, r0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4090      	lsls	r0, r2
 80014e8:	1e42      	subs	r2, r0, #1
 80014ea:	4190      	sbcs	r0, r2
 80014ec:	464a      	mov	r2, r9
 80014ee:	40fa      	lsrs	r2, r7
 80014f0:	4304      	orrs	r4, r0
 80014f2:	1889      	adds	r1, r1, r2
 80014f4:	e6ee      	b.n	80012d4 <__aeabi_dadd+0x278>
 80014f6:	4c87      	ldr	r4, [pc, #540]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014f8:	42a2      	cmp	r2, r4
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x4a2>
 80014fc:	e6f9      	b.n	80012f2 <__aeabi_dadd+0x296>
 80014fe:	1818      	adds	r0, r3, r0
 8001500:	4298      	cmp	r0, r3
 8001502:	419b      	sbcs	r3, r3
 8001504:	4449      	add	r1, r9
 8001506:	425b      	negs	r3, r3
 8001508:	18cb      	adds	r3, r1, r3
 800150a:	07dc      	lsls	r4, r3, #31
 800150c:	0840      	lsrs	r0, r0, #1
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	469a      	mov	sl, r3
 8001512:	0016      	movs	r6, r2
 8001514:	4304      	orrs	r4, r0
 8001516:	e6c6      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001518:	4642      	mov	r2, r8
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	45a0      	cmp	r8, r4
 800151e:	4180      	sbcs	r0, r0
 8001520:	464b      	mov	r3, r9
 8001522:	4240      	negs	r0, r0
 8001524:	1a59      	subs	r1, r3, r1
 8001526:	1a0b      	subs	r3, r1, r0
 8001528:	469a      	mov	sl, r3
 800152a:	4665      	mov	r5, ip
 800152c:	e5ea      	b.n	8001104 <__aeabi_dadd+0xa8>
 800152e:	464b      	mov	r3, r9
 8001530:	464a      	mov	r2, r9
 8001532:	08c0      	lsrs	r0, r0, #3
 8001534:	075b      	lsls	r3, r3, #29
 8001536:	4665      	mov	r5, ip
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e6bd      	b.n	80012ba <__aeabi_dadd+0x25e>
 800153e:	2a00      	cmp	r2, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x4e8>
 8001542:	e08e      	b.n	8001662 <__aeabi_dadd+0x606>
 8001544:	464b      	mov	r3, r9
 8001546:	4303      	orrs	r3, r0
 8001548:	d117      	bne.n	800157a <__aeabi_dadd+0x51e>
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	2500      	movs	r5, #0
 800154e:	0309      	lsls	r1, r1, #12
 8001550:	e6da      	b.n	8001308 <__aeabi_dadd+0x2ac>
 8001552:	074a      	lsls	r2, r1, #29
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4313      	orrs	r3, r2
 8001558:	08c9      	lsrs	r1, r1, #3
 800155a:	e6d1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800155c:	1a1c      	subs	r4, r3, r0
 800155e:	464a      	mov	r2, r9
 8001560:	42a3      	cmp	r3, r4
 8001562:	419b      	sbcs	r3, r3
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	425b      	negs	r3, r3
 8001568:	1acb      	subs	r3, r1, r3
 800156a:	469a      	mov	sl, r3
 800156c:	2601      	movs	r6, #1
 800156e:	e5c1      	b.n	80010f4 <__aeabi_dadd+0x98>
 8001570:	074a      	lsls	r2, r1, #29
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4313      	orrs	r3, r2
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	e69f      	b.n	80012ba <__aeabi_dadd+0x25e>
 800157a:	4643      	mov	r3, r8
 800157c:	08d8      	lsrs	r0, r3, #3
 800157e:	464b      	mov	r3, r9
 8001580:	464a      	mov	r2, r9
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	4665      	mov	r5, ip
 8001586:	4303      	orrs	r3, r0
 8001588:	08d1      	lsrs	r1, r2, #3
 800158a:	e6b9      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800158c:	4643      	mov	r3, r8
 800158e:	08d8      	lsrs	r0, r3, #3
 8001590:	464b      	mov	r3, r9
 8001592:	464a      	mov	r2, r9
 8001594:	075b      	lsls	r3, r3, #29
 8001596:	4303      	orrs	r3, r0
 8001598:	08d1      	lsrs	r1, r2, #3
 800159a:	e6b1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800159c:	4319      	orrs	r1, r3
 800159e:	000c      	movs	r4, r1
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	e6eb      	b.n	800137e <__aeabi_dadd+0x322>
 80015a6:	003c      	movs	r4, r7
 80015a8:	000d      	movs	r5, r1
 80015aa:	3c20      	subs	r4, #32
 80015ac:	40e5      	lsrs	r5, r4
 80015ae:	2f20      	cmp	r7, #32
 80015b0:	d003      	beq.n	80015ba <__aeabi_dadd+0x55e>
 80015b2:	2440      	movs	r4, #64	; 0x40
 80015b4:	1be4      	subs	r4, r4, r7
 80015b6:	40a1      	lsls	r1, r4
 80015b8:	430b      	orrs	r3, r1
 80015ba:	001c      	movs	r4, r3
 80015bc:	1e63      	subs	r3, r4, #1
 80015be:	419c      	sbcs	r4, r3
 80015c0:	432c      	orrs	r4, r5
 80015c2:	e770      	b.n	80014a6 <__aeabi_dadd+0x44a>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d0e1      	beq.n	800158c <__aeabi_dadd+0x530>
 80015c8:	464a      	mov	r2, r9
 80015ca:	4302      	orrs	r2, r0
 80015cc:	d0c1      	beq.n	8001552 <__aeabi_dadd+0x4f6>
 80015ce:	074a      	lsls	r2, r1, #29
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4211      	tst	r1, r2
 80015dc:	d008      	beq.n	80015f0 <__aeabi_dadd+0x594>
 80015de:	4648      	mov	r0, r9
 80015e0:	08c4      	lsrs	r4, r0, #3
 80015e2:	4214      	tst	r4, r2
 80015e4:	d104      	bne.n	80015f0 <__aeabi_dadd+0x594>
 80015e6:	4643      	mov	r3, r8
 80015e8:	0021      	movs	r1, r4
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	0742      	lsls	r2, r0, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	0f5a      	lsrs	r2, r3, #29
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	0752      	lsls	r2, r2, #29
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	e681      	b.n	8001300 <__aeabi_dadd+0x2a4>
 80015fc:	464b      	mov	r3, r9
 80015fe:	4303      	orrs	r3, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x5a8>
 8001602:	e714      	b.n	800142e <__aeabi_dadd+0x3d2>
 8001604:	464b      	mov	r3, r9
 8001606:	464a      	mov	r2, r9
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	4665      	mov	r5, ip
 800160e:	4303      	orrs	r3, r0
 8001610:	08d1      	lsrs	r1, r2, #3
 8001612:	e655      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001614:	1ac4      	subs	r4, r0, r3
 8001616:	45a0      	cmp	r8, r4
 8001618:	4180      	sbcs	r0, r0
 800161a:	464b      	mov	r3, r9
 800161c:	4240      	negs	r0, r0
 800161e:	1a59      	subs	r1, r3, r1
 8001620:	1a0b      	subs	r3, r1, r0
 8001622:	469a      	mov	sl, r3
 8001624:	4665      	mov	r5, ip
 8001626:	2601      	movs	r6, #1
 8001628:	e564      	b.n	80010f4 <__aeabi_dadd+0x98>
 800162a:	1a1c      	subs	r4, r3, r0
 800162c:	464a      	mov	r2, r9
 800162e:	42a3      	cmp	r3, r4
 8001630:	4180      	sbcs	r0, r0
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	4240      	negs	r0, r0
 8001636:	1a12      	subs	r2, r2, r0
 8001638:	4692      	mov	sl, r2
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	d549      	bpl.n	80016d2 <__aeabi_dadd+0x676>
 800163e:	4642      	mov	r2, r8
 8001640:	1ad4      	subs	r4, r2, r3
 8001642:	45a0      	cmp	r8, r4
 8001644:	4180      	sbcs	r0, r0
 8001646:	464b      	mov	r3, r9
 8001648:	4240      	negs	r0, r0
 800164a:	1a59      	subs	r1, r3, r1
 800164c:	1a0b      	subs	r3, r1, r0
 800164e:	469a      	mov	sl, r3
 8001650:	4665      	mov	r5, ip
 8001652:	e57f      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001654:	464b      	mov	r3, r9
 8001656:	464a      	mov	r2, r9
 8001658:	08c0      	lsrs	r0, r0, #3
 800165a:	075b      	lsls	r3, r3, #29
 800165c:	4303      	orrs	r3, r0
 800165e:	08d1      	lsrs	r1, r2, #3
 8001660:	e62b      	b.n	80012ba <__aeabi_dadd+0x25e>
 8001662:	464a      	mov	r2, r9
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4302      	orrs	r2, r0
 8001668:	d138      	bne.n	80016dc <__aeabi_dadd+0x680>
 800166a:	074a      	lsls	r2, r1, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c9      	lsrs	r1, r1, #3
 8001670:	e646      	b.n	8001300 <__aeabi_dadd+0x2a4>
 8001672:	464b      	mov	r3, r9
 8001674:	464a      	mov	r2, r9
 8001676:	08c0      	lsrs	r0, r0, #3
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	4303      	orrs	r3, r0
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	e61f      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001680:	181c      	adds	r4, r3, r0
 8001682:	429c      	cmp	r4, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	4449      	add	r1, r9
 8001688:	468a      	mov	sl, r1
 800168a:	425b      	negs	r3, r3
 800168c:	449a      	add	sl, r3
 800168e:	4653      	mov	r3, sl
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dadd+0x63a>
 8001694:	e607      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001696:	4652      	mov	r2, sl
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <__aeabi_dadd+0x6bc>)
 800169a:	2601      	movs	r6, #1
 800169c:	401a      	ands	r2, r3
 800169e:	4692      	mov	sl, r2
 80016a0:	e601      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016a2:	003c      	movs	r4, r7
 80016a4:	000e      	movs	r6, r1
 80016a6:	3c20      	subs	r4, #32
 80016a8:	40e6      	lsrs	r6, r4
 80016aa:	2f20      	cmp	r7, #32
 80016ac:	d003      	beq.n	80016b6 <__aeabi_dadd+0x65a>
 80016ae:	2440      	movs	r4, #64	; 0x40
 80016b0:	1be4      	subs	r4, r4, r7
 80016b2:	40a1      	lsls	r1, r4
 80016b4:	430b      	orrs	r3, r1
 80016b6:	001c      	movs	r4, r3
 80016b8:	1e63      	subs	r3, r4, #1
 80016ba:	419c      	sbcs	r4, r3
 80016bc:	4334      	orrs	r4, r6
 80016be:	e65e      	b.n	800137e <__aeabi_dadd+0x322>
 80016c0:	4443      	add	r3, r8
 80016c2:	4283      	cmp	r3, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4449      	add	r1, r9
 80016c8:	468a      	mov	sl, r1
 80016ca:	4240      	negs	r0, r0
 80016cc:	001c      	movs	r4, r3
 80016ce:	4482      	add	sl, r0
 80016d0:	e6bc      	b.n	800144c <__aeabi_dadd+0x3f0>
 80016d2:	4653      	mov	r3, sl
 80016d4:	4323      	orrs	r3, r4
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x67e>
 80016d8:	e6a9      	b.n	800142e <__aeabi_dadd+0x3d2>
 80016da:	e5e4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016dc:	074a      	lsls	r2, r1, #29
 80016de:	4313      	orrs	r3, r2
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	4211      	tst	r1, r2
 80016e8:	d009      	beq.n	80016fe <__aeabi_dadd+0x6a2>
 80016ea:	4648      	mov	r0, r9
 80016ec:	08c4      	lsrs	r4, r0, #3
 80016ee:	4214      	tst	r4, r2
 80016f0:	d105      	bne.n	80016fe <__aeabi_dadd+0x6a2>
 80016f2:	4643      	mov	r3, r8
 80016f4:	4665      	mov	r5, ip
 80016f6:	0021      	movs	r1, r4
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0742      	lsls	r2, r0, #29
 80016fc:	4313      	orrs	r3, r2
 80016fe:	0f5a      	lsrs	r2, r3, #29
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	0752      	lsls	r2, r2, #29
 8001706:	4313      	orrs	r3, r2
 8001708:	e5fa      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800170a:	2300      	movs	r3, #0
 800170c:	4a01      	ldr	r2, [pc, #4]	; (8001714 <__aeabi_dadd+0x6b8>)
 800170e:	001c      	movs	r4, r3
 8001710:	e540      	b.n	8001194 <__aeabi_dadd+0x138>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff
 8001718:	ff7fffff 	.word	0xff7fffff

0800171c <__aeabi_ddiv>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	030c      	lsls	r4, r1, #12
 800172a:	001f      	movs	r7, r3
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	4681      	mov	r9, r0
 8001730:	4692      	mov	sl, r2
 8001732:	0005      	movs	r5, r0
 8001734:	b085      	sub	sp, #20
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d5b      	lsrs	r3, r3, #21
 800173a:	0fce      	lsrs	r6, r1, #31
 800173c:	2b00      	cmp	r3, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x26>
 8001740:	e152      	b.n	80019e8 <__aeabi_ddiv+0x2cc>
 8001742:	4ad2      	ldr	r2, [pc, #840]	; (8001a8c <__aeabi_ddiv+0x370>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0x2e>
 8001748:	e16e      	b.n	8001a28 <__aeabi_ddiv+0x30c>
 800174a:	0f42      	lsrs	r2, r0, #29
 800174c:	00e4      	lsls	r4, r4, #3
 800174e:	4314      	orrs	r4, r2
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	4322      	orrs	r2, r4
 8001756:	4690      	mov	r8, r2
 8001758:	4acd      	ldr	r2, [pc, #820]	; (8001a90 <__aeabi_ddiv+0x374>)
 800175a:	00c5      	lsls	r5, r0, #3
 800175c:	4693      	mov	fp, r2
 800175e:	449b      	add	fp, r3
 8001760:	2300      	movs	r3, #0
 8001762:	4699      	mov	r9, r3
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	033c      	lsls	r4, r7, #12
 8001768:	007b      	lsls	r3, r7, #1
 800176a:	4650      	mov	r0, sl
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	0fff      	lsrs	r7, r7, #31
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x5c>
 8001776:	e11a      	b.n	80019ae <__aeabi_ddiv+0x292>
 8001778:	4ac4      	ldr	r2, [pc, #784]	; (8001a8c <__aeabi_ddiv+0x370>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x64>
 800177e:	e15e      	b.n	8001a3e <__aeabi_ddiv+0x322>
 8001780:	0f42      	lsrs	r2, r0, #29
 8001782:	00e4      	lsls	r4, r4, #3
 8001784:	4322      	orrs	r2, r4
 8001786:	2480      	movs	r4, #128	; 0x80
 8001788:	0424      	lsls	r4, r4, #16
 800178a:	4314      	orrs	r4, r2
 800178c:	4ac0      	ldr	r2, [pc, #768]	; (8001a90 <__aeabi_ddiv+0x374>)
 800178e:	00c1      	lsls	r1, r0, #3
 8001790:	4694      	mov	ip, r2
 8001792:	465a      	mov	r2, fp
 8001794:	4463      	add	r3, ip
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	469b      	mov	fp, r3
 800179a:	2000      	movs	r0, #0
 800179c:	0033      	movs	r3, r6
 800179e:	407b      	eors	r3, r7
 80017a0:	469a      	mov	sl, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d827      	bhi.n	80017f8 <__aeabi_ddiv+0xdc>
 80017a8:	4aba      	ldr	r2, [pc, #744]	; (8001a94 <__aeabi_ddiv+0x378>)
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	58d3      	ldr	r3, [r2, r3]
 80017ae:	469f      	mov	pc, r3
 80017b0:	46b2      	mov	sl, r6
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d016      	beq.n	80017e6 <__aeabi_ddiv+0xca>
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0xa2>
 80017bc:	e287      	b.n	8001cce <__aeabi_ddiv+0x5b2>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d000      	beq.n	80017c4 <__aeabi_ddiv+0xa8>
 80017c2:	e0d5      	b.n	8001970 <__aeabi_ddiv+0x254>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	4313      	orrs	r3, r2
 80017ce:	4652      	mov	r2, sl
 80017d0:	07d2      	lsls	r2, r2, #31
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0028      	movs	r0, r5
 80017d6:	0019      	movs	r1, r3
 80017d8:	b005      	add	sp, #20
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	2200      	movs	r2, #0
 80017e8:	2500      	movs	r5, #0
 80017ea:	4ba8      	ldr	r3, [pc, #672]	; (8001a8c <__aeabi_ddiv+0x370>)
 80017ec:	e7ed      	b.n	80017ca <__aeabi_ddiv+0xae>
 80017ee:	46ba      	mov	sl, r7
 80017f0:	46a0      	mov	r8, r4
 80017f2:	000d      	movs	r5, r1
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	e7dc      	b.n	80017b2 <__aeabi_ddiv+0x96>
 80017f8:	4544      	cmp	r4, r8
 80017fa:	d200      	bcs.n	80017fe <__aeabi_ddiv+0xe2>
 80017fc:	e1c4      	b.n	8001b88 <__aeabi_ddiv+0x46c>
 80017fe:	d100      	bne.n	8001802 <__aeabi_ddiv+0xe6>
 8001800:	e1bf      	b.n	8001b82 <__aeabi_ddiv+0x466>
 8001802:	2301      	movs	r3, #1
 8001804:	425b      	negs	r3, r3
 8001806:	469c      	mov	ip, r3
 8001808:	002e      	movs	r6, r5
 800180a:	4640      	mov	r0, r8
 800180c:	2500      	movs	r5, #0
 800180e:	44e3      	add	fp, ip
 8001810:	0223      	lsls	r3, r4, #8
 8001812:	0e0c      	lsrs	r4, r1, #24
 8001814:	431c      	orrs	r4, r3
 8001816:	0c1b      	lsrs	r3, r3, #16
 8001818:	4699      	mov	r9, r3
 800181a:	0423      	lsls	r3, r4, #16
 800181c:	020a      	lsls	r2, r1, #8
 800181e:	0c1f      	lsrs	r7, r3, #16
 8001820:	4649      	mov	r1, r9
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9701      	str	r7, [sp, #4]
 8001826:	f7fe fd11 	bl	800024c <__aeabi_uidivmod>
 800182a:	0002      	movs	r2, r0
 800182c:	437a      	muls	r2, r7
 800182e:	040b      	lsls	r3, r1, #16
 8001830:	0c31      	lsrs	r1, r6, #16
 8001832:	4680      	mov	r8, r0
 8001834:	4319      	orrs	r1, r3
 8001836:	428a      	cmp	r2, r1
 8001838:	d907      	bls.n	800184a <__aeabi_ddiv+0x12e>
 800183a:	2301      	movs	r3, #1
 800183c:	425b      	negs	r3, r3
 800183e:	469c      	mov	ip, r3
 8001840:	1909      	adds	r1, r1, r4
 8001842:	44e0      	add	r8, ip
 8001844:	428c      	cmp	r4, r1
 8001846:	d800      	bhi.n	800184a <__aeabi_ddiv+0x12e>
 8001848:	e201      	b.n	8001c4e <__aeabi_ddiv+0x532>
 800184a:	1a88      	subs	r0, r1, r2
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fcfd 	bl	800024c <__aeabi_uidivmod>
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	0436      	lsls	r6, r6, #16
 8001856:	4342      	muls	r2, r0
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	0003      	movs	r3, r0
 800185e:	430e      	orrs	r6, r1
 8001860:	42b2      	cmp	r2, r6
 8001862:	d904      	bls.n	800186e <__aeabi_ddiv+0x152>
 8001864:	1936      	adds	r6, r6, r4
 8001866:	3b01      	subs	r3, #1
 8001868:	42b4      	cmp	r4, r6
 800186a:	d800      	bhi.n	800186e <__aeabi_ddiv+0x152>
 800186c:	e1e9      	b.n	8001c42 <__aeabi_ddiv+0x526>
 800186e:	1ab0      	subs	r0, r6, r2
 8001870:	4642      	mov	r2, r8
 8001872:	9e00      	ldr	r6, [sp, #0]
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	0c33      	lsrs	r3, r6, #16
 800187a:	001f      	movs	r7, r3
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4690      	mov	r8, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	0413      	lsls	r3, r2, #16
 8001884:	0432      	lsls	r2, r6, #16
 8001886:	0c16      	lsrs	r6, r2, #16
 8001888:	0032      	movs	r2, r6
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	9603      	str	r6, [sp, #12]
 8001890:	437b      	muls	r3, r7
 8001892:	434e      	muls	r6, r1
 8001894:	4379      	muls	r1, r7
 8001896:	0c17      	lsrs	r7, r2, #16
 8001898:	46bc      	mov	ip, r7
 800189a:	199b      	adds	r3, r3, r6
 800189c:	4463      	add	r3, ip
 800189e:	429e      	cmp	r6, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x18e>
 80018a2:	2680      	movs	r6, #128	; 0x80
 80018a4:	0276      	lsls	r6, r6, #9
 80018a6:	46b4      	mov	ip, r6
 80018a8:	4461      	add	r1, ip
 80018aa:	0c1e      	lsrs	r6, r3, #16
 80018ac:	1871      	adds	r1, r6, r1
 80018ae:	0416      	lsls	r6, r2, #16
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c36      	lsrs	r6, r6, #16
 80018b4:	199e      	adds	r6, r3, r6
 80018b6:	4288      	cmp	r0, r1
 80018b8:	d302      	bcc.n	80018c0 <__aeabi_ddiv+0x1a4>
 80018ba:	d112      	bne.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018bc:	42b5      	cmp	r5, r6
 80018be:	d210      	bcs.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018c0:	4643      	mov	r3, r8
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	469c      	mov	ip, r3
 80018c8:	4465      	add	r5, ip
 80018ca:	001f      	movs	r7, r3
 80018cc:	429d      	cmp	r5, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	425b      	negs	r3, r3
 80018d2:	191b      	adds	r3, r3, r4
 80018d4:	18c0      	adds	r0, r0, r3
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x1c0>
 80018da:	e19e      	b.n	8001c1a <__aeabi_ddiv+0x4fe>
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x1c4>
 80018de:	e199      	b.n	8001c14 <__aeabi_ddiv+0x4f8>
 80018e0:	4690      	mov	r8, r2
 80018e2:	1bae      	subs	r6, r5, r6
 80018e4:	42b5      	cmp	r5, r6
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	1a40      	subs	r0, r0, r1
 80018ea:	426d      	negs	r5, r5
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x1d8>
 80018f2:	e1d2      	b.n	8001c9a <__aeabi_ddiv+0x57e>
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fca9 	bl	800024c <__aeabi_uidivmod>
 80018fa:	9a01      	ldr	r2, [sp, #4]
 80018fc:	040b      	lsls	r3, r1, #16
 80018fe:	4342      	muls	r2, r0
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	0005      	movs	r5, r0
 8001904:	4319      	orrs	r1, r3
 8001906:	428a      	cmp	r2, r1
 8001908:	d900      	bls.n	800190c <__aeabi_ddiv+0x1f0>
 800190a:	e16c      	b.n	8001be6 <__aeabi_ddiv+0x4ca>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	4649      	mov	r1, r9
 8001910:	f7fe fc9c 	bl	800024c <__aeabi_uidivmod>
 8001914:	9a01      	ldr	r2, [sp, #4]
 8001916:	0436      	lsls	r6, r6, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c36      	lsrs	r6, r6, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430e      	orrs	r6, r1
 8001922:	42b2      	cmp	r2, r6
 8001924:	d900      	bls.n	8001928 <__aeabi_ddiv+0x20c>
 8001926:	e153      	b.n	8001bd0 <__aeabi_ddiv+0x4b4>
 8001928:	9803      	ldr	r0, [sp, #12]
 800192a:	1ab6      	subs	r6, r6, r2
 800192c:	0002      	movs	r2, r0
 800192e:	042d      	lsls	r5, r5, #16
 8001930:	431d      	orrs	r5, r3
 8001932:	9f02      	ldr	r7, [sp, #8]
 8001934:	042b      	lsls	r3, r5, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	435a      	muls	r2, r3
 800193a:	437b      	muls	r3, r7
 800193c:	469c      	mov	ip, r3
 800193e:	0c29      	lsrs	r1, r5, #16
 8001940:	4348      	muls	r0, r1
 8001942:	0c13      	lsrs	r3, r2, #16
 8001944:	4484      	add	ip, r0
 8001946:	4463      	add	r3, ip
 8001948:	4379      	muls	r1, r7
 800194a:	4298      	cmp	r0, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_ddiv+0x23a>
 800194e:	2080      	movs	r0, #128	; 0x80
 8001950:	0240      	lsls	r0, r0, #9
 8001952:	4684      	mov	ip, r0
 8001954:	4461      	add	r1, ip
 8001956:	0c18      	lsrs	r0, r3, #16
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	1840      	adds	r0, r0, r1
 8001960:	189b      	adds	r3, r3, r2
 8001962:	4286      	cmp	r6, r0
 8001964:	d200      	bcs.n	8001968 <__aeabi_ddiv+0x24c>
 8001966:	e100      	b.n	8001b6a <__aeabi_ddiv+0x44e>
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x250>
 800196a:	e0fb      	b.n	8001b64 <__aeabi_ddiv+0x448>
 800196c:	2301      	movs	r3, #1
 800196e:	431d      	orrs	r5, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <__aeabi_ddiv+0x37c>)
 8001972:	445b      	add	r3, fp
 8001974:	2b00      	cmp	r3, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_ddiv+0x25e>
 8001978:	e0aa      	b.n	8001ad0 <__aeabi_ddiv+0x3b4>
 800197a:	076a      	lsls	r2, r5, #29
 800197c:	d000      	beq.n	8001980 <__aeabi_ddiv+0x264>
 800197e:	e13d      	b.n	8001bfc <__aeabi_ddiv+0x4e0>
 8001980:	08e9      	lsrs	r1, r5, #3
 8001982:	4642      	mov	r2, r8
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	d506      	bpl.n	8001996 <__aeabi_ddiv+0x27a>
 8001988:	4642      	mov	r2, r8
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <__aeabi_ddiv+0x380>)
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	4690      	mov	r8, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	445b      	add	r3, fp
 8001996:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <__aeabi_ddiv+0x384>)
 8001998:	4293      	cmp	r3, r2
 800199a:	dd00      	ble.n	800199e <__aeabi_ddiv+0x282>
 800199c:	e723      	b.n	80017e6 <__aeabi_ddiv+0xca>
 800199e:	4642      	mov	r2, r8
 80019a0:	055b      	lsls	r3, r3, #21
 80019a2:	0755      	lsls	r5, r2, #29
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	430d      	orrs	r5, r1
 80019a8:	0b12      	lsrs	r2, r2, #12
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	e70d      	b.n	80017ca <__aeabi_ddiv+0xae>
 80019ae:	4651      	mov	r1, sl
 80019b0:	4321      	orrs	r1, r4
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x29a>
 80019b4:	e07c      	b.n	8001ab0 <__aeabi_ddiv+0x394>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x2a0>
 80019ba:	e0fb      	b.n	8001bb4 <__aeabi_ddiv+0x498>
 80019bc:	0020      	movs	r0, r4
 80019be:	f001 fa63 	bl	8002e88 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	3a0b      	subs	r2, #11
 80019c6:	231d      	movs	r3, #29
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	4652      	mov	r2, sl
 80019cc:	0001      	movs	r1, r0
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	4653      	mov	r3, sl
 80019d2:	3908      	subs	r1, #8
 80019d4:	408b      	lsls	r3, r1
 80019d6:	408c      	lsls	r4, r1
 80019d8:	0019      	movs	r1, r3
 80019da:	4314      	orrs	r4, r2
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <__aeabi_ddiv+0x388>)
 80019de:	4458      	add	r0, fp
 80019e0:	469b      	mov	fp, r3
 80019e2:	4483      	add	fp, r0
 80019e4:	2000      	movs	r0, #0
 80019e6:	e6d9      	b.n	800179c <__aeabi_ddiv+0x80>
 80019e8:	0003      	movs	r3, r0
 80019ea:	4323      	orrs	r3, r4
 80019ec:	4698      	mov	r8, r3
 80019ee:	d044      	beq.n	8001a7a <__aeabi_ddiv+0x35e>
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x2da>
 80019f4:	e0cf      	b.n	8001b96 <__aeabi_ddiv+0x47a>
 80019f6:	0020      	movs	r0, r4
 80019f8:	f001 fa46 	bl	8002e88 <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0002      	movs	r2, r0
 8001a00:	390b      	subs	r1, #11
 8001a02:	231d      	movs	r3, #29
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	0010      	movs	r0, r2
 8001a0a:	40d9      	lsrs	r1, r3
 8001a0c:	3808      	subs	r0, #8
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	464d      	mov	r5, r9
 8001a14:	4323      	orrs	r3, r4
 8001a16:	4698      	mov	r8, r3
 8001a18:	4085      	lsls	r5, r0
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_ddiv+0x38c>)
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	469b      	mov	fp, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4699      	mov	r9, r3
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	e69e      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	d11d      	bne.n	8001a6c <__aeabi_ddiv+0x350>
 8001a30:	2208      	movs	r2, #8
 8001a32:	469b      	mov	fp, r3
 8001a34:	2302      	movs	r3, #2
 8001a36:	2500      	movs	r5, #0
 8001a38:	4691      	mov	r9, r2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e693      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a3e:	4651      	mov	r1, sl
 8001a40:	4321      	orrs	r1, r4
 8001a42:	d109      	bne.n	8001a58 <__aeabi_ddiv+0x33c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	464a      	mov	r2, r9
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a4c:	4691      	mov	r9, r2
 8001a4e:	469c      	mov	ip, r3
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	44e3      	add	fp, ip
 8001a56:	e6a1      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	464a      	mov	r2, r9
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a60:	4691      	mov	r9, r2
 8001a62:	469c      	mov	ip, r3
 8001a64:	4651      	mov	r1, sl
 8001a66:	2003      	movs	r0, #3
 8001a68:	44e3      	add	fp, ip
 8001a6a:	e697      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	469b      	mov	fp, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	46a0      	mov	r8, r4
 8001a74:	4691      	mov	r9, r2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	e675      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	469b      	mov	fp, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	2500      	movs	r5, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	e66d      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	000007ff 	.word	0x000007ff
 8001a90:	fffffc01 	.word	0xfffffc01
 8001a94:	0800d64c 	.word	0x0800d64c
 8001a98:	000003ff 	.word	0x000003ff
 8001a9c:	feffffff 	.word	0xfeffffff
 8001aa0:	000007fe 	.word	0x000007fe
 8001aa4:	000003f3 	.word	0x000003f3
 8001aa8:	fffffc0d 	.word	0xfffffc0d
 8001aac:	fffff801 	.word	0xfffff801
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2400      	movs	r4, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	e66e      	b.n	800179c <__aeabi_ddiv+0x80>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001ac8:	0312      	lsls	r2, r2, #12
 8001aca:	e67e      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001acc:	2501      	movs	r5, #1
 8001ace:	426d      	negs	r5, r5
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	2a38      	cmp	r2, #56	; 0x38
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_ddiv+0x3be>
 8001ad8:	e674      	b.n	80017c4 <__aeabi_ddiv+0xa8>
 8001ada:	2a1f      	cmp	r2, #31
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_ddiv+0x3c4>
 8001ade:	e0bd      	b.n	8001c5c <__aeabi_ddiv+0x540>
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	1acb      	subs	r3, r1, r3
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	000b      	movs	r3, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d004      	beq.n	8001afa <__aeabi_ddiv+0x3de>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <__aeabi_ddiv+0x5d0>)
 8001af4:	445a      	add	r2, fp
 8001af6:	4091      	lsls	r1, r2
 8001af8:	430d      	orrs	r5, r1
 8001afa:	0029      	movs	r1, r5
 8001afc:	1e4a      	subs	r2, r1, #1
 8001afe:	4191      	sbcs	r1, r2
 8001b00:	4319      	orrs	r1, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	400d      	ands	r5, r1
 8001b0a:	420b      	tst	r3, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x3f4>
 8001b0e:	e0d0      	b.n	8001cb2 <__aeabi_ddiv+0x596>
 8001b10:	220f      	movs	r2, #15
 8001b12:	2300      	movs	r3, #0
 8001b14:	400a      	ands	r2, r1
 8001b16:	2a04      	cmp	r2, #4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x400>
 8001b1a:	e0c7      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b1c:	1d0a      	adds	r2, r1, #4
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	4189      	sbcs	r1, r1
 8001b22:	4249      	negs	r1, r1
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	0011      	movs	r1, r2
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	d400      	bmi.n	8001b2e <__aeabi_ddiv+0x412>
 8001b2c:	e0be      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2200      	movs	r2, #0
 8001b32:	2500      	movs	r5, #0
 8001b34:	e649      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	4643      	mov	r3, r8
 8001b3a:	0312      	lsls	r2, r2, #12
 8001b3c:	4213      	tst	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <__aeabi_ddiv+0x436>
 8001b40:	4214      	tst	r4, r2
 8001b42:	d106      	bne.n	8001b52 <__aeabi_ddiv+0x436>
 8001b44:	4322      	orrs	r2, r4
 8001b46:	0312      	lsls	r2, r2, #12
 8001b48:	46ba      	mov	sl, r7
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b4e:	0b12      	lsrs	r2, r2, #12
 8001b50:	e63b      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	4643      	mov	r3, r8
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	46b2      	mov	sl, r6
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b60:	0b12      	lsrs	r2, r2, #12
 8001b62:	e632      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0x44e>
 8001b68:	e702      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001b6a:	19a6      	adds	r6, r4, r6
 8001b6c:	1e6a      	subs	r2, r5, #1
 8001b6e:	42a6      	cmp	r6, r4
 8001b70:	d200      	bcs.n	8001b74 <__aeabi_ddiv+0x458>
 8001b72:	e089      	b.n	8001c88 <__aeabi_ddiv+0x56c>
 8001b74:	4286      	cmp	r6, r0
 8001b76:	d200      	bcs.n	8001b7a <__aeabi_ddiv+0x45e>
 8001b78:	e09f      	b.n	8001cba <__aeabi_ddiv+0x59e>
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x462>
 8001b7c:	e0af      	b.n	8001cde <__aeabi_ddiv+0x5c2>
 8001b7e:	0015      	movs	r5, r2
 8001b80:	e6f4      	b.n	800196c <__aeabi_ddiv+0x250>
 8001b82:	42a9      	cmp	r1, r5
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x46c>
 8001b86:	e63c      	b.n	8001802 <__aeabi_ddiv+0xe6>
 8001b88:	4643      	mov	r3, r8
 8001b8a:	07de      	lsls	r6, r3, #31
 8001b8c:	0858      	lsrs	r0, r3, #1
 8001b8e:	086b      	lsrs	r3, r5, #1
 8001b90:	431e      	orrs	r6, r3
 8001b92:	07ed      	lsls	r5, r5, #31
 8001b94:	e63c      	b.n	8001810 <__aeabi_ddiv+0xf4>
 8001b96:	f001 f977 	bl	8002e88 <__clzsi2>
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3115      	adds	r1, #21
 8001ba0:	3220      	adds	r2, #32
 8001ba2:	291c      	cmp	r1, #28
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_ddiv+0x48c>
 8001ba6:	e72c      	b.n	8001a02 <__aeabi_ddiv+0x2e6>
 8001ba8:	464b      	mov	r3, r9
 8001baa:	3808      	subs	r0, #8
 8001bac:	4083      	lsls	r3, r0
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	e732      	b.n	8001a1a <__aeabi_ddiv+0x2fe>
 8001bb4:	f001 f968 	bl	8002e88 <__clzsi2>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	3215      	adds	r2, #21
 8001bbe:	3020      	adds	r0, #32
 8001bc0:	2a1c      	cmp	r2, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x4aa>
 8001bc4:	e6ff      	b.n	80019c6 <__aeabi_ddiv+0x2aa>
 8001bc6:	4654      	mov	r4, sl
 8001bc8:	3b08      	subs	r3, #8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	409c      	lsls	r4, r3
 8001bce:	e705      	b.n	80019dc <__aeabi_ddiv+0x2c0>
 8001bd0:	1936      	adds	r6, r6, r4
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	42b4      	cmp	r4, r6
 8001bd6:	d900      	bls.n	8001bda <__aeabi_ddiv+0x4be>
 8001bd8:	e6a6      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001bda:	42b2      	cmp	r2, r6
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x4c4>
 8001bde:	e6a3      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be0:	1e83      	subs	r3, r0, #2
 8001be2:	1936      	adds	r6, r6, r4
 8001be4:	e6a0      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be6:	1909      	adds	r1, r1, r4
 8001be8:	3d01      	subs	r5, #1
 8001bea:	428c      	cmp	r4, r1
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x4d4>
 8001bee:	e68d      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x4da>
 8001bf4:	e68a      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf6:	1e85      	subs	r5, r0, #2
 8001bf8:	1909      	adds	r1, r1, r4
 8001bfa:	e687      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	402a      	ands	r2, r5
 8001c00:	2a04      	cmp	r2, #4
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x4ea>
 8001c04:	e6bc      	b.n	8001980 <__aeabi_ddiv+0x264>
 8001c06:	1d29      	adds	r1, r5, #4
 8001c08:	42a9      	cmp	r1, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	426d      	negs	r5, r5
 8001c0e:	08c9      	lsrs	r1, r1, #3
 8001c10:	44a8      	add	r8, r5
 8001c12:	e6b6      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001c14:	42af      	cmp	r7, r5
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x4fe>
 8001c18:	e662      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c1a:	4281      	cmp	r1, r0
 8001c1c:	d804      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x506>
 8001c20:	e65e      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c22:	42ae      	cmp	r6, r5
 8001c24:	d800      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c26:	e65b      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	44e0      	add	r8, ip
 8001c32:	469c      	mov	ip, r3
 8001c34:	4465      	add	r5, ip
 8001c36:	429d      	cmp	r5, r3
 8001c38:	419b      	sbcs	r3, r3
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	191b      	adds	r3, r3, r4
 8001c3e:	18c0      	adds	r0, r0, r3
 8001c40:	e64f      	b.n	80018e2 <__aeabi_ddiv+0x1c6>
 8001c42:	42b2      	cmp	r2, r6
 8001c44:	d800      	bhi.n	8001c48 <__aeabi_ddiv+0x52c>
 8001c46:	e612      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	1936      	adds	r6, r6, r4
 8001c4c:	e60f      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d800      	bhi.n	8001c54 <__aeabi_ddiv+0x538>
 8001c52:	e5fa      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c54:	1e83      	subs	r3, r0, #2
 8001c56:	4698      	mov	r8, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	e5f6      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <__aeabi_ddiv+0x5d4>)
 8001c5e:	0028      	movs	r0, r5
 8001c60:	445b      	add	r3, fp
 8001c62:	4641      	mov	r1, r8
 8001c64:	409d      	lsls	r5, r3
 8001c66:	4099      	lsls	r1, r3
 8001c68:	40d0      	lsrs	r0, r2
 8001c6a:	1e6b      	subs	r3, r5, #1
 8001c6c:	419d      	sbcs	r5, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	4301      	orrs	r1, r0
 8001c72:	4329      	orrs	r1, r5
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	074a      	lsls	r2, r1, #29
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x560>
 8001c7a:	e755      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	400a      	ands	r2, r1
 8001c80:	2a04      	cmp	r2, #4
 8001c82:	d000      	beq.n	8001c86 <__aeabi_ddiv+0x56a>
 8001c84:	e74a      	b.n	8001b1c <__aeabi_ddiv+0x400>
 8001c86:	e74f      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	4286      	cmp	r6, r0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_ddiv+0x574>
 8001c8e:	e66d      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c90:	9a00      	ldr	r2, [sp, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x57c>
 8001c96:	e669      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c98:	e66a      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <__aeabi_ddiv+0x5d8>)
 8001c9c:	445b      	add	r3, fp
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_ddiv+0x588>
 8001ca2:	e713      	b.n	8001acc <__aeabi_ddiv+0x3b0>
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	44a8      	add	r8, r5
 8001caa:	e66a      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001cac:	075d      	lsls	r5, r3, #29
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	0b1a      	lsrs	r2, r3, #12
 8001cb2:	08c9      	lsrs	r1, r1, #3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	430d      	orrs	r5, r1
 8001cb8:	e587      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cba:	9900      	ldr	r1, [sp, #0]
 8001cbc:	3d02      	subs	r5, #2
 8001cbe:	004a      	lsls	r2, r1, #1
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	41bf      	sbcs	r7, r7
 8001cc4:	427f      	negs	r7, r7
 8001cc6:	193f      	adds	r7, r7, r4
 8001cc8:	19f6      	adds	r6, r6, r7
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	e7dd      	b.n	8001c8a <__aeabi_ddiv+0x56e>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	0312      	lsls	r2, r2, #12
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001cda:	0b12      	lsrs	r2, r2, #12
 8001cdc:	e575      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cde:	9900      	ldr	r1, [sp, #0]
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d3ea      	bcc.n	8001cba <__aeabi_ddiv+0x59e>
 8001ce4:	0015      	movs	r5, r2
 8001ce6:	e7d3      	b.n	8001c90 <__aeabi_ddiv+0x574>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e
 8001cf4:	000003ff 	.word	0x000003ff

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	464e      	mov	r6, r9
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	46de      	mov	lr, fp
 8001d00:	4657      	mov	r7, sl
 8001d02:	4690      	mov	r8, r2
 8001d04:	b5e0      	push	{r5, r6, r7, lr}
 8001d06:	0017      	movs	r7, r2
 8001d08:	031a      	lsls	r2, r3, #12
 8001d0a:	0b12      	lsrs	r2, r2, #12
 8001d0c:	0005      	movs	r5, r0
 8001d0e:	4684      	mov	ip, r0
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <__eqdf2+0x80>)
 8001d12:	030e      	lsls	r6, r1, #12
 8001d14:	004c      	lsls	r4, r1, #1
 8001d16:	4691      	mov	r9, r2
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	0b36      	lsrs	r6, r6, #12
 8001d20:	0d64      	lsrs	r4, r4, #21
 8001d22:	0fc9      	lsrs	r1, r1, #31
 8001d24:	0d52      	lsrs	r2, r2, #21
 8001d26:	4284      	cmp	r4, r0
 8001d28:	d019      	beq.n	8001d5e <__eqdf2+0x66>
 8001d2a:	4282      	cmp	r2, r0
 8001d2c:	d010      	beq.n	8001d50 <__eqdf2+0x58>
 8001d2e:	2001      	movs	r0, #1
 8001d30:	4294      	cmp	r4, r2
 8001d32:	d10e      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d34:	454e      	cmp	r6, r9
 8001d36:	d10c      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	45c4      	cmp	ip, r8
 8001d3c:	d109      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d3e:	4559      	cmp	r1, fp
 8001d40:	d017      	beq.n	8001d72 <__eqdf2+0x7a>
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	d105      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d46:	0030      	movs	r0, r6
 8001d48:	4328      	orrs	r0, r5
 8001d4a:	1e43      	subs	r3, r0, #1
 8001d4c:	4198      	sbcs	r0, r3
 8001d4e:	e000      	b.n	8001d52 <__eqdf2+0x5a>
 8001d50:	2001      	movs	r0, #1
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	0033      	movs	r3, r6
 8001d60:	2001      	movs	r0, #1
 8001d62:	432b      	orrs	r3, r5
 8001d64:	d1f5      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d1f3      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	433b      	orrs	r3, r7
 8001d6e:	d1f0      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d70:	e7e2      	b.n	8001d38 <__eqdf2+0x40>
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7ed      	b.n	8001d52 <__eqdf2+0x5a>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__gedf2>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4647      	mov	r7, r8
 8001d80:	46ce      	mov	lr, r9
 8001d82:	0004      	movs	r4, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	0016      	movs	r6, r2
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	4d2d      	ldr	r5, [pc, #180]	; (8001e44 <__gedf2+0xc8>)
 8001d8e:	004a      	lsls	r2, r1, #1
 8001d90:	4699      	mov	r9, r3
 8001d92:	b580      	push	{r7, lr}
 8001d94:	0043      	lsls	r3, r0, #1
 8001d96:	030f      	lsls	r7, r1, #12
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	0fc0      	lsrs	r0, r0, #31
 8001da6:	42aa      	cmp	r2, r5
 8001da8:	d021      	beq.n	8001dee <__gedf2+0x72>
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	d013      	beq.n	8001dd6 <__gedf2+0x5a>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d122      	bne.n	8001df8 <__gedf2+0x7c>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <__gedf2+0x42>
 8001db8:	464d      	mov	r5, r9
 8001dba:	432e      	orrs	r6, r5
 8001dbc:	d022      	beq.n	8001e04 <__gedf2+0x88>
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d010      	beq.n	8001de4 <__gedf2+0x68>
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	d022      	beq.n	8001e0c <__gedf2+0x90>
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	3901      	subs	r1, #1
 8001dca:	4008      	ands	r0, r1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	bcc0      	pop	{r6, r7}
 8001dd0:	46b9      	mov	r9, r7
 8001dd2:	46b0      	mov	r8, r6
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	432e      	orrs	r6, r5
 8001dda:	d129      	bne.n	8001e30 <__gedf2+0xb4>
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d1f0      	bne.n	8001dc2 <__gedf2+0x46>
 8001de0:	433c      	orrs	r4, r7
 8001de2:	d1ee      	bne.n	8001dc2 <__gedf2+0x46>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1f2      	bne.n	8001dce <__gedf2+0x52>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7ef      	b.n	8001dce <__gedf2+0x52>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d11d      	bne.n	8001e30 <__gedf2+0xb4>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d0ee      	beq.n	8001dd6 <__gedf2+0x5a>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e2      	bne.n	8001dc2 <__gedf2+0x46>
 8001dfc:	464c      	mov	r4, r9
 8001dfe:	4326      	orrs	r6, r4
 8001e00:	d1df      	bne.n	8001dc2 <__gedf2+0x46>
 8001e02:	e7e0      	b.n	8001dc6 <__gedf2+0x4a>
 8001e04:	2000      	movs	r0, #0
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	d0e1      	beq.n	8001dce <__gedf2+0x52>
 8001e0a:	e7dc      	b.n	8001dc6 <__gedf2+0x4a>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc0a      	bgt.n	8001e26 <__gedf2+0xaa>
 8001e10:	dbe8      	blt.n	8001de4 <__gedf2+0x68>
 8001e12:	454f      	cmp	r7, r9
 8001e14:	d8d7      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e16:	d00e      	beq.n	8001e36 <__gedf2+0xba>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	454f      	cmp	r7, r9
 8001e1c:	d2d7      	bcs.n	8001dce <__gedf2+0x52>
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d0e2      	beq.n	8001de8 <__gedf2+0x6c>
 8001e22:	0008      	movs	r0, r1
 8001e24:	e7d3      	b.n	8001dce <__gedf2+0x52>
 8001e26:	4243      	negs	r3, r0
 8001e28:	4158      	adcs	r0, r3
 8001e2a:	0040      	lsls	r0, r0, #1
 8001e2c:	3801      	subs	r0, #1
 8001e2e:	e7ce      	b.n	8001dce <__gedf2+0x52>
 8001e30:	2002      	movs	r0, #2
 8001e32:	4240      	negs	r0, r0
 8001e34:	e7cb      	b.n	8001dce <__gedf2+0x52>
 8001e36:	45c4      	cmp	ip, r8
 8001e38:	d8c5      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c4      	cmp	ip, r8
 8001e3e:	d2c6      	bcs.n	8001dce <__gedf2+0x52>
 8001e40:	e7ed      	b.n	8001e1e <__gedf2+0xa2>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__ledf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4647      	mov	r7, r8
 8001e4c:	46ce      	mov	lr, r9
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0016      	movs	r6, r2
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	4d2c      	ldr	r5, [pc, #176]	; (8001f0c <__ledf2+0xc4>)
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	0043      	lsls	r3, r0, #1
 8001e62:	030f      	lsls	r7, r1, #12
 8001e64:	46a4      	mov	ip, r4
 8001e66:	46b0      	mov	r8, r6
 8001e68:	0b3f      	lsrs	r7, r7, #12
 8001e6a:	0d52      	lsrs	r2, r2, #21
 8001e6c:	0fc9      	lsrs	r1, r1, #31
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fc0      	lsrs	r0, r0, #31
 8001e72:	42aa      	cmp	r2, r5
 8001e74:	d00d      	beq.n	8001e92 <__ledf2+0x4a>
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d010      	beq.n	8001e9c <__ledf2+0x54>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d127      	bne.n	8001ece <__ledf2+0x86>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <__ledf2+0x60>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10e      	bne.n	8001ea8 <__ledf2+0x60>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d015      	beq.n	8001ebc <__ledf2+0x74>
 8001e90:	e00e      	b.n	8001eb0 <__ledf2+0x68>
 8001e92:	003d      	movs	r5, r7
 8001e94:	4325      	orrs	r5, r4
 8001e96:	d110      	bne.n	8001eba <__ledf2+0x72>
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d118      	bne.n	8001ece <__ledf2+0x86>
 8001e9c:	464d      	mov	r5, r9
 8001e9e:	432e      	orrs	r6, r5
 8001ea0:	d10b      	bne.n	8001eba <__ledf2+0x72>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <__ledf2+0x64>
 8001ea6:	433c      	orrs	r4, r7
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	d00b      	beq.n	8001ec4 <__ledf2+0x7c>
 8001eac:	4281      	cmp	r1, r0
 8001eae:	d014      	beq.n	8001eda <__ledf2+0x92>
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	3901      	subs	r1, #1
 8001eb4:	4008      	ands	r0, r1
 8001eb6:	3801      	subs	r0, #1
 8001eb8:	e000      	b.n	8001ebc <__ledf2+0x74>
 8001eba:	2002      	movs	r0, #2
 8001ebc:	bcc0      	pop	{r6, r7}
 8001ebe:	46b9      	mov	r9, r7
 8001ec0:	46b0      	mov	r8, r6
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1f9      	bne.n	8001ebc <__ledf2+0x74>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	e7f6      	b.n	8001ebc <__ledf2+0x74>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ec      	bne.n	8001eac <__ledf2+0x64>
 8001ed2:	464c      	mov	r4, r9
 8001ed4:	4326      	orrs	r6, r4
 8001ed6:	d1e9      	bne.n	8001eac <__ledf2+0x64>
 8001ed8:	e7ea      	b.n	8001eb0 <__ledf2+0x68>
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dd04      	ble.n	8001ee8 <__ledf2+0xa0>
 8001ede:	4243      	negs	r3, r0
 8001ee0:	4158      	adcs	r0, r3
 8001ee2:	0040      	lsls	r0, r0, #1
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	e7e9      	b.n	8001ebc <__ledf2+0x74>
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbeb      	blt.n	8001ec4 <__ledf2+0x7c>
 8001eec:	454f      	cmp	r7, r9
 8001eee:	d8df      	bhi.n	8001eb0 <__ledf2+0x68>
 8001ef0:	d006      	beq.n	8001f00 <__ledf2+0xb8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	454f      	cmp	r7, r9
 8001ef6:	d2e1      	bcs.n	8001ebc <__ledf2+0x74>
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d0e5      	beq.n	8001ec8 <__ledf2+0x80>
 8001efc:	0008      	movs	r0, r1
 8001efe:	e7dd      	b.n	8001ebc <__ledf2+0x74>
 8001f00:	45c4      	cmp	ip, r8
 8001f02:	d8d5      	bhi.n	8001eb0 <__ledf2+0x68>
 8001f04:	2000      	movs	r0, #0
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d2d8      	bcs.n	8001ebc <__ledf2+0x74>
 8001f0a:	e7f5      	b.n	8001ef8 <__ledf2+0xb0>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__aeabi_dmul>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	001f      	movs	r7, r3
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	0b1b      	lsrs	r3, r3, #12
 8001f22:	469b      	mov	fp, r3
 8001f24:	004d      	lsls	r5, r1, #1
 8001f26:	0fcb      	lsrs	r3, r1, #31
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	b087      	sub	sp, #28
 8001f30:	0d6d      	lsrs	r5, r5, #21
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dmul+0x26>
 8001f34:	e1cd      	b.n	80022d2 <__aeabi_dmul+0x3c2>
 8001f36:	4bce      	ldr	r3, [pc, #824]	; (8002270 <__aeabi_dmul+0x360>)
 8001f38:	429d      	cmp	r5, r3
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2e>
 8001f3c:	e1e9      	b.n	8002312 <__aeabi_dmul+0x402>
 8001f3e:	465a      	mov	r2, fp
 8001f40:	0f43      	lsrs	r3, r0, #29
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0412      	lsls	r2, r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	00c3      	lsls	r3, r0, #3
 8001f4e:	469a      	mov	sl, r3
 8001f50:	4bc8      	ldr	r3, [pc, #800]	; (8002274 <__aeabi_dmul+0x364>)
 8001f52:	4693      	mov	fp, r2
 8001f54:	469c      	mov	ip, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4465      	add	r5, ip
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	033c      	lsls	r4, r7, #12
 8001f60:	007b      	lsls	r3, r7, #1
 8001f62:	4648      	mov	r0, r9
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	0fff      	lsrs	r7, r7, #31
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x60>
 8001f6e:	e189      	b.n	8002284 <__aeabi_dmul+0x374>
 8001f70:	4abf      	ldr	r2, [pc, #764]	; (8002270 <__aeabi_dmul+0x360>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <__aeabi_dmul+0x9a>
 8001f76:	0f42      	lsrs	r2, r0, #29
 8001f78:	00e4      	lsls	r4, r4, #3
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0424      	lsls	r4, r4, #16
 8001f80:	4314      	orrs	r4, r2
 8001f82:	4abc      	ldr	r2, [pc, #752]	; (8002274 <__aeabi_dmul+0x364>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4694      	mov	ip, r2
 8001f88:	4642      	mov	r2, r8
 8001f8a:	4463      	add	r3, ip
 8001f8c:	195b      	adds	r3, r3, r5
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	407a      	eors	r2, r7
 8001f94:	3301      	adds	r3, #1
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2e0a      	cmp	r6, #10
 8001f9e:	dd1c      	ble.n	8001fda <__aeabi_dmul+0xca>
 8001fa0:	003a      	movs	r2, r7
 8001fa2:	2e0b      	cmp	r6, #11
 8001fa4:	d05e      	beq.n	8002064 <__aeabi_dmul+0x154>
 8001fa6:	4647      	mov	r7, r8
 8001fa8:	e056      	b.n	8002058 <__aeabi_dmul+0x148>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4bb0      	ldr	r3, [pc, #704]	; (8002270 <__aeabi_dmul+0x360>)
 8001fae:	4321      	orrs	r1, r4
 8001fb0:	18eb      	adds	r3, r5, r3
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d12a      	bne.n	800200e <__aeabi_dmul+0xfe>
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	2202      	movs	r2, #2
 8001fbc:	0100      	lsls	r0, r0, #4
 8001fbe:	002b      	movs	r3, r5
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	4316      	orrs	r6, r2
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	4463      	add	r3, ip
 8001fc8:	407a      	eors	r2, r7
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2e0a      	cmp	r6, #10
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dmul+0xc4>
 8001fd2:	e231      	b.n	8002438 <__aeabi_dmul+0x528>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	2e02      	cmp	r6, #2
 8001fdc:	dc26      	bgt.n	800202c <__aeabi_dmul+0x11c>
 8001fde:	3e01      	subs	r6, #1
 8001fe0:	2e01      	cmp	r6, #1
 8001fe2:	d852      	bhi.n	800208a <__aeabi_dmul+0x17a>
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d04c      	beq.n	8002082 <__aeabi_dmul+0x172>
 8001fe8:	2901      	cmp	r1, #1
 8001fea:	d000      	beq.n	8001fee <__aeabi_dmul+0xde>
 8001fec:	e118      	b.n	8002220 <__aeabi_dmul+0x310>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	07d2      	lsls	r2, r2, #31
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	0019      	movs	r1, r3
 8002000:	b007      	add	sp, #28
 8002002:	bcf0      	pop	{r4, r5, r6, r7}
 8002004:	46bb      	mov	fp, r7
 8002006:	46b2      	mov	sl, r6
 8002008:	46a9      	mov	r9, r5
 800200a:	46a0      	mov	r8, r4
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	2203      	movs	r2, #3
 8002012:	0109      	lsls	r1, r1, #4
 8002014:	002b      	movs	r3, r5
 8002016:	468c      	mov	ip, r1
 8002018:	4316      	orrs	r6, r2
 800201a:	4642      	mov	r2, r8
 800201c:	4463      	add	r3, ip
 800201e:	407a      	eors	r2, r7
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2e0a      	cmp	r6, #10
 8002026:	dd00      	ble.n	800202a <__aeabi_dmul+0x11a>
 8002028:	e228      	b.n	800247c <__aeabi_dmul+0x56c>
 800202a:	2103      	movs	r1, #3
 800202c:	2501      	movs	r5, #1
 800202e:	40b5      	lsls	r5, r6
 8002030:	46ac      	mov	ip, r5
 8002032:	26a6      	movs	r6, #166	; 0xa6
 8002034:	4663      	mov	r3, ip
 8002036:	00f6      	lsls	r6, r6, #3
 8002038:	4035      	ands	r5, r6
 800203a:	4233      	tst	r3, r6
 800203c:	d10b      	bne.n	8002056 <__aeabi_dmul+0x146>
 800203e:	2690      	movs	r6, #144	; 0x90
 8002040:	00b6      	lsls	r6, r6, #2
 8002042:	4233      	tst	r3, r6
 8002044:	d118      	bne.n	8002078 <__aeabi_dmul+0x168>
 8002046:	3eb9      	subs	r6, #185	; 0xb9
 8002048:	3eff      	subs	r6, #255	; 0xff
 800204a:	421e      	tst	r6, r3
 800204c:	d01d      	beq.n	800208a <__aeabi_dmul+0x17a>
 800204e:	46a3      	mov	fp, r4
 8002050:	4682      	mov	sl, r0
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	e000      	b.n	8002058 <__aeabi_dmul+0x148>
 8002056:	0017      	movs	r7, r2
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	003a      	movs	r2, r7
 800205c:	2902      	cmp	r1, #2
 800205e:	d010      	beq.n	8002082 <__aeabi_dmul+0x172>
 8002060:	465c      	mov	r4, fp
 8002062:	4650      	mov	r0, sl
 8002064:	2903      	cmp	r1, #3
 8002066:	d1bf      	bne.n	8001fe8 <__aeabi_dmul+0xd8>
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	031b      	lsls	r3, r3, #12
 800206c:	431c      	orrs	r4, r3
 800206e:	0324      	lsls	r4, r4, #12
 8002070:	0005      	movs	r5, r0
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <__aeabi_dmul+0x360>)
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	e7bd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002078:	2480      	movs	r4, #128	; 0x80
 800207a:	2200      	movs	r2, #0
 800207c:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <__aeabi_dmul+0x360>)
 800207e:	0324      	lsls	r4, r4, #12
 8002080:	e7b8      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002082:	2400      	movs	r4, #0
 8002084:	2500      	movs	r5, #0
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <__aeabi_dmul+0x360>)
 8002088:	e7b4      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800208a:	4653      	mov	r3, sl
 800208c:	041e      	lsls	r6, r3, #16
 800208e:	0c36      	lsrs	r6, r6, #16
 8002090:	0c1f      	lsrs	r7, r3, #16
 8002092:	0033      	movs	r3, r6
 8002094:	0c01      	lsrs	r1, r0, #16
 8002096:	0400      	lsls	r0, r0, #16
 8002098:	0c00      	lsrs	r0, r0, #16
 800209a:	4343      	muls	r3, r0
 800209c:	4698      	mov	r8, r3
 800209e:	0003      	movs	r3, r0
 80020a0:	437b      	muls	r3, r7
 80020a2:	4699      	mov	r9, r3
 80020a4:	0033      	movs	r3, r6
 80020a6:	434b      	muls	r3, r1
 80020a8:	469c      	mov	ip, r3
 80020aa:	4643      	mov	r3, r8
 80020ac:	000d      	movs	r5, r1
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	469a      	mov	sl, r3
 80020b2:	437d      	muls	r5, r7
 80020b4:	44cc      	add	ip, r9
 80020b6:	44d4      	add	ip, sl
 80020b8:	9500      	str	r5, [sp, #0]
 80020ba:	45e1      	cmp	r9, ip
 80020bc:	d904      	bls.n	80020c8 <__aeabi_dmul+0x1b8>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4699      	mov	r9, r3
 80020c4:	444d      	add	r5, r9
 80020c6:	9500      	str	r5, [sp, #0]
 80020c8:	4663      	mov	r3, ip
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	001d      	movs	r5, r3
 80020ce:	4663      	mov	r3, ip
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	469c      	mov	ip, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	4698      	mov	r8, r3
 80020dc:	4663      	mov	r3, ip
 80020de:	4443      	add	r3, r8
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	0c23      	lsrs	r3, r4, #16
 80020e4:	4698      	mov	r8, r3
 80020e6:	0033      	movs	r3, r6
 80020e8:	0424      	lsls	r4, r4, #16
 80020ea:	0c24      	lsrs	r4, r4, #16
 80020ec:	4363      	muls	r3, r4
 80020ee:	469c      	mov	ip, r3
 80020f0:	0023      	movs	r3, r4
 80020f2:	437b      	muls	r3, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	4643      	mov	r3, r8
 80020f8:	435e      	muls	r6, r3
 80020fa:	435f      	muls	r7, r3
 80020fc:	444e      	add	r6, r9
 80020fe:	4663      	mov	r3, ip
 8002100:	46b2      	mov	sl, r6
 8002102:	0c1e      	lsrs	r6, r3, #16
 8002104:	4456      	add	r6, sl
 8002106:	45b1      	cmp	r9, r6
 8002108:	d903      	bls.n	8002112 <__aeabi_dmul+0x202>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4699      	mov	r9, r3
 8002110:	444f      	add	r7, r9
 8002112:	0c33      	lsrs	r3, r6, #16
 8002114:	4699      	mov	r9, r3
 8002116:	003b      	movs	r3, r7
 8002118:	444b      	add	r3, r9
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	4663      	mov	r3, ip
 800211e:	46ac      	mov	ip, r5
 8002120:	041f      	lsls	r7, r3, #16
 8002122:	0c3f      	lsrs	r7, r7, #16
 8002124:	0436      	lsls	r6, r6, #16
 8002126:	19f6      	adds	r6, r6, r7
 8002128:	44b4      	add	ip, r6
 800212a:	4663      	mov	r3, ip
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	465b      	mov	r3, fp
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	469c      	mov	ip, r3
 8002134:	465b      	mov	r3, fp
 8002136:	041f      	lsls	r7, r3, #16
 8002138:	0c3f      	lsrs	r7, r7, #16
 800213a:	003b      	movs	r3, r7
 800213c:	4343      	muls	r3, r0
 800213e:	4699      	mov	r9, r3
 8002140:	4663      	mov	r3, ip
 8002142:	4343      	muls	r3, r0
 8002144:	469a      	mov	sl, r3
 8002146:	464b      	mov	r3, r9
 8002148:	4660      	mov	r0, ip
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	469b      	mov	fp, r3
 800214e:	4348      	muls	r0, r1
 8002150:	4379      	muls	r1, r7
 8002152:	4451      	add	r1, sl
 8002154:	4459      	add	r1, fp
 8002156:	458a      	cmp	sl, r1
 8002158:	d903      	bls.n	8002162 <__aeabi_dmul+0x252>
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	469a      	mov	sl, r3
 8002160:	4450      	add	r0, sl
 8002162:	0c0b      	lsrs	r3, r1, #16
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	4699      	mov	r9, r3
 800216e:	003b      	movs	r3, r7
 8002170:	4363      	muls	r3, r4
 8002172:	0409      	lsls	r1, r1, #16
 8002174:	4645      	mov	r5, r8
 8002176:	4449      	add	r1, r9
 8002178:	4699      	mov	r9, r3
 800217a:	4663      	mov	r3, ip
 800217c:	435c      	muls	r4, r3
 800217e:	436b      	muls	r3, r5
 8002180:	469c      	mov	ip, r3
 8002182:	464b      	mov	r3, r9
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	4698      	mov	r8, r3
 8002188:	436f      	muls	r7, r5
 800218a:	193f      	adds	r7, r7, r4
 800218c:	4447      	add	r7, r8
 800218e:	4450      	add	r0, sl
 8002190:	42bc      	cmp	r4, r7
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x28c>
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	4698      	mov	r8, r3
 800219a:	44c4      	add	ip, r8
 800219c:	9b04      	ldr	r3, [sp, #16]
 800219e:	9d00      	ldr	r5, [sp, #0]
 80021a0:	4698      	mov	r8, r3
 80021a2:	4445      	add	r5, r8
 80021a4:	42b5      	cmp	r5, r6
 80021a6:	41b6      	sbcs	r6, r6
 80021a8:	4273      	negs	r3, r6
 80021aa:	4698      	mov	r8, r3
 80021ac:	464b      	mov	r3, r9
 80021ae:	041e      	lsls	r6, r3, #16
 80021b0:	9b05      	ldr	r3, [sp, #20]
 80021b2:	043c      	lsls	r4, r7, #16
 80021b4:	4699      	mov	r9, r3
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	19a4      	adds	r4, r4, r6
 80021ba:	444c      	add	r4, r9
 80021bc:	46a1      	mov	r9, r4
 80021be:	4683      	mov	fp, r0
 80021c0:	186e      	adds	r6, r5, r1
 80021c2:	44c1      	add	r9, r8
 80021c4:	428e      	cmp	r6, r1
 80021c6:	4189      	sbcs	r1, r1
 80021c8:	44cb      	add	fp, r9
 80021ca:	465d      	mov	r5, fp
 80021cc:	4249      	negs	r1, r1
 80021ce:	186d      	adds	r5, r5, r1
 80021d0:	429c      	cmp	r4, r3
 80021d2:	41a4      	sbcs	r4, r4
 80021d4:	45c1      	cmp	r9, r8
 80021d6:	419b      	sbcs	r3, r3
 80021d8:	4583      	cmp	fp, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	428d      	cmp	r5, r1
 80021de:	4189      	sbcs	r1, r1
 80021e0:	425b      	negs	r3, r3
 80021e2:	4264      	negs	r4, r4
 80021e4:	431c      	orrs	r4, r3
 80021e6:	4240      	negs	r0, r0
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	4249      	negs	r1, r1
 80021ec:	4301      	orrs	r1, r0
 80021ee:	0270      	lsls	r0, r6, #9
 80021f0:	0c3f      	lsrs	r7, r7, #16
 80021f2:	4318      	orrs	r0, r3
 80021f4:	19e4      	adds	r4, r4, r7
 80021f6:	1e47      	subs	r7, r0, #1
 80021f8:	41b8      	sbcs	r0, r7
 80021fa:	1864      	adds	r4, r4, r1
 80021fc:	4464      	add	r4, ip
 80021fe:	0df6      	lsrs	r6, r6, #23
 8002200:	0261      	lsls	r1, r4, #9
 8002202:	4330      	orrs	r0, r6
 8002204:	0dec      	lsrs	r4, r5, #23
 8002206:	026e      	lsls	r6, r5, #9
 8002208:	430c      	orrs	r4, r1
 800220a:	4330      	orrs	r0, r6
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	d400      	bmi.n	8002212 <__aeabi_dmul+0x302>
 8002210:	e0f1      	b.n	80023f6 <__aeabi_dmul+0x4e6>
 8002212:	2101      	movs	r1, #1
 8002214:	0843      	lsrs	r3, r0, #1
 8002216:	4001      	ands	r1, r0
 8002218:	430b      	orrs	r3, r1
 800221a:	07e0      	lsls	r0, r4, #31
 800221c:	4318      	orrs	r0, r3
 800221e:	0864      	lsrs	r4, r4, #1
 8002220:	4915      	ldr	r1, [pc, #84]	; (8002278 <__aeabi_dmul+0x368>)
 8002222:	9b02      	ldr	r3, [sp, #8]
 8002224:	468c      	mov	ip, r1
 8002226:	4463      	add	r3, ip
 8002228:	2b00      	cmp	r3, #0
 800222a:	dc00      	bgt.n	800222e <__aeabi_dmul+0x31e>
 800222c:	e097      	b.n	800235e <__aeabi_dmul+0x44e>
 800222e:	0741      	lsls	r1, r0, #29
 8002230:	d009      	beq.n	8002246 <__aeabi_dmul+0x336>
 8002232:	210f      	movs	r1, #15
 8002234:	4001      	ands	r1, r0
 8002236:	2904      	cmp	r1, #4
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x336>
 800223a:	1d01      	adds	r1, r0, #4
 800223c:	4281      	cmp	r1, r0
 800223e:	4180      	sbcs	r0, r0
 8002240:	4240      	negs	r0, r0
 8002242:	1824      	adds	r4, r4, r0
 8002244:	0008      	movs	r0, r1
 8002246:	01e1      	lsls	r1, r4, #7
 8002248:	d506      	bpl.n	8002258 <__aeabi_dmul+0x348>
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	468c      	mov	ip, r1
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <__aeabi_dmul+0x36c>)
 8002252:	401c      	ands	r4, r3
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4463      	add	r3, ip
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <__aeabi_dmul+0x370>)
 800225a:	428b      	cmp	r3, r1
 800225c:	dd00      	ble.n	8002260 <__aeabi_dmul+0x350>
 800225e:	e710      	b.n	8002082 <__aeabi_dmul+0x172>
 8002260:	0761      	lsls	r1, r4, #29
 8002262:	08c5      	lsrs	r5, r0, #3
 8002264:	0264      	lsls	r4, r4, #9
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	430d      	orrs	r5, r1
 800226a:	0b24      	lsrs	r4, r4, #12
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	e6c1      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002270:	000007ff 	.word	0x000007ff
 8002274:	fffffc01 	.word	0xfffffc01
 8002278:	000003ff 	.word	0x000003ff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	000007fe 	.word	0x000007fe
 8002284:	464b      	mov	r3, r9
 8002286:	4323      	orrs	r3, r4
 8002288:	d059      	beq.n	800233e <__aeabi_dmul+0x42e>
 800228a:	2c00      	cmp	r4, #0
 800228c:	d100      	bne.n	8002290 <__aeabi_dmul+0x380>
 800228e:	e0a3      	b.n	80023d8 <__aeabi_dmul+0x4c8>
 8002290:	0020      	movs	r0, r4
 8002292:	f000 fdf9 	bl	8002e88 <__clzsi2>
 8002296:	0001      	movs	r1, r0
 8002298:	0003      	movs	r3, r0
 800229a:	390b      	subs	r1, #11
 800229c:	221d      	movs	r2, #29
 800229e:	1a52      	subs	r2, r2, r1
 80022a0:	4649      	mov	r1, r9
 80022a2:	0018      	movs	r0, r3
 80022a4:	40d1      	lsrs	r1, r2
 80022a6:	464a      	mov	r2, r9
 80022a8:	3808      	subs	r0, #8
 80022aa:	4082      	lsls	r2, r0
 80022ac:	4084      	lsls	r4, r0
 80022ae:	0010      	movs	r0, r2
 80022b0:	430c      	orrs	r4, r1
 80022b2:	4a74      	ldr	r2, [pc, #464]	; (8002484 <__aeabi_dmul+0x574>)
 80022b4:	1aeb      	subs	r3, r5, r3
 80022b6:	4694      	mov	ip, r2
 80022b8:	4642      	mov	r2, r8
 80022ba:	4463      	add	r3, ip
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	407a      	eors	r2, r7
 80022c2:	3301      	adds	r3, #1
 80022c4:	2100      	movs	r1, #0
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2e0a      	cmp	r6, #10
 80022cc:	dd00      	ble.n	80022d0 <__aeabi_dmul+0x3c0>
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dmul+0x90>
 80022d0:	e683      	b.n	8001fda <__aeabi_dmul+0xca>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4303      	orrs	r3, r0
 80022d6:	469a      	mov	sl, r3
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dmul+0x420>
 80022da:	465b      	mov	r3, fp
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06d      	beq.n	80023bc <__aeabi_dmul+0x4ac>
 80022e0:	4658      	mov	r0, fp
 80022e2:	f000 fdd1 	bl	8002e88 <__clzsi2>
 80022e6:	0001      	movs	r1, r0
 80022e8:	0003      	movs	r3, r0
 80022ea:	390b      	subs	r1, #11
 80022ec:	221d      	movs	r2, #29
 80022ee:	1a52      	subs	r2, r2, r1
 80022f0:	0021      	movs	r1, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	465d      	mov	r5, fp
 80022f6:	40d1      	lsrs	r1, r2
 80022f8:	3808      	subs	r0, #8
 80022fa:	4085      	lsls	r5, r0
 80022fc:	000a      	movs	r2, r1
 80022fe:	4084      	lsls	r4, r0
 8002300:	432a      	orrs	r2, r5
 8002302:	4693      	mov	fp, r2
 8002304:	46a2      	mov	sl, r4
 8002306:	4d5f      	ldr	r5, [pc, #380]	; (8002484 <__aeabi_dmul+0x574>)
 8002308:	2600      	movs	r6, #0
 800230a:	1aed      	subs	r5, r5, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	e625      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002312:	465b      	mov	r3, fp
 8002314:	4303      	orrs	r3, r0
 8002316:	469a      	mov	sl, r3
 8002318:	d105      	bne.n	8002326 <__aeabi_dmul+0x416>
 800231a:	2300      	movs	r3, #0
 800231c:	469b      	mov	fp, r3
 800231e:	3302      	adds	r3, #2
 8002320:	2608      	movs	r6, #8
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	e61b      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002326:	2303      	movs	r3, #3
 8002328:	4682      	mov	sl, r0
 800232a:	260c      	movs	r6, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	e616      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002330:	2300      	movs	r3, #0
 8002332:	469b      	mov	fp, r3
 8002334:	3301      	adds	r3, #1
 8002336:	2604      	movs	r6, #4
 8002338:	2500      	movs	r5, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	e60f      	b.n	8001f5e <__aeabi_dmul+0x4e>
 800233e:	4642      	mov	r2, r8
 8002340:	3301      	adds	r3, #1
 8002342:	9501      	str	r5, [sp, #4]
 8002344:	431e      	orrs	r6, r3
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	407a      	eors	r2, r7
 800234a:	3301      	adds	r3, #1
 800234c:	2400      	movs	r4, #0
 800234e:	2000      	movs	r0, #0
 8002350:	2101      	movs	r1, #1
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2e0a      	cmp	r6, #10
 8002358:	dd00      	ble.n	800235c <__aeabi_dmul+0x44c>
 800235a:	e621      	b.n	8001fa0 <__aeabi_dmul+0x90>
 800235c:	e63d      	b.n	8001fda <__aeabi_dmul+0xca>
 800235e:	2101      	movs	r1, #1
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	2938      	cmp	r1, #56	; 0x38
 8002364:	dd00      	ble.n	8002368 <__aeabi_dmul+0x458>
 8002366:	e642      	b.n	8001fee <__aeabi_dmul+0xde>
 8002368:	291f      	cmp	r1, #31
 800236a:	dd47      	ble.n	80023fc <__aeabi_dmul+0x4ec>
 800236c:	261f      	movs	r6, #31
 800236e:	0025      	movs	r5, r4
 8002370:	4276      	negs	r6, r6
 8002372:	1af3      	subs	r3, r6, r3
 8002374:	40dd      	lsrs	r5, r3
 8002376:	002b      	movs	r3, r5
 8002378:	2920      	cmp	r1, #32
 800237a:	d005      	beq.n	8002388 <__aeabi_dmul+0x478>
 800237c:	4942      	ldr	r1, [pc, #264]	; (8002488 <__aeabi_dmul+0x578>)
 800237e:	9d02      	ldr	r5, [sp, #8]
 8002380:	468c      	mov	ip, r1
 8002382:	4465      	add	r5, ip
 8002384:	40ac      	lsls	r4, r5
 8002386:	4320      	orrs	r0, r4
 8002388:	1e41      	subs	r1, r0, #1
 800238a:	4188      	sbcs	r0, r1
 800238c:	4318      	orrs	r0, r3
 800238e:	2307      	movs	r3, #7
 8002390:	001d      	movs	r5, r3
 8002392:	2400      	movs	r4, #0
 8002394:	4005      	ands	r5, r0
 8002396:	4203      	tst	r3, r0
 8002398:	d04a      	beq.n	8002430 <__aeabi_dmul+0x520>
 800239a:	230f      	movs	r3, #15
 800239c:	2400      	movs	r4, #0
 800239e:	4003      	ands	r3, r0
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d042      	beq.n	800242a <__aeabi_dmul+0x51a>
 80023a4:	1d03      	adds	r3, r0, #4
 80023a6:	4283      	cmp	r3, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	4240      	negs	r0, r0
 80023ac:	1824      	adds	r4, r4, r0
 80023ae:	0018      	movs	r0, r3
 80023b0:	0223      	lsls	r3, r4, #8
 80023b2:	d53a      	bpl.n	800242a <__aeabi_dmul+0x51a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	2400      	movs	r4, #0
 80023b8:	2500      	movs	r5, #0
 80023ba:	e61b      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 80023bc:	f000 fd64 	bl	8002e88 <__clzsi2>
 80023c0:	0001      	movs	r1, r0
 80023c2:	0003      	movs	r3, r0
 80023c4:	3115      	adds	r1, #21
 80023c6:	3320      	adds	r3, #32
 80023c8:	291c      	cmp	r1, #28
 80023ca:	dd8f      	ble.n	80022ec <__aeabi_dmul+0x3dc>
 80023cc:	3808      	subs	r0, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	4084      	lsls	r4, r0
 80023d2:	4692      	mov	sl, r2
 80023d4:	46a3      	mov	fp, r4
 80023d6:	e796      	b.n	8002306 <__aeabi_dmul+0x3f6>
 80023d8:	f000 fd56 	bl	8002e88 <__clzsi2>
 80023dc:	0001      	movs	r1, r0
 80023de:	0003      	movs	r3, r0
 80023e0:	3115      	adds	r1, #21
 80023e2:	3320      	adds	r3, #32
 80023e4:	291c      	cmp	r1, #28
 80023e6:	dc00      	bgt.n	80023ea <__aeabi_dmul+0x4da>
 80023e8:	e758      	b.n	800229c <__aeabi_dmul+0x38c>
 80023ea:	0002      	movs	r2, r0
 80023ec:	464c      	mov	r4, r9
 80023ee:	3a08      	subs	r2, #8
 80023f0:	2000      	movs	r0, #0
 80023f2:	4094      	lsls	r4, r2
 80023f4:	e75d      	b.n	80022b2 <__aeabi_dmul+0x3a2>
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e711      	b.n	8002220 <__aeabi_dmul+0x310>
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <__aeabi_dmul+0x57c>)
 80023fe:	0026      	movs	r6, r4
 8002400:	469c      	mov	ip, r3
 8002402:	0003      	movs	r3, r0
 8002404:	9d02      	ldr	r5, [sp, #8]
 8002406:	40cb      	lsrs	r3, r1
 8002408:	4465      	add	r5, ip
 800240a:	40ae      	lsls	r6, r5
 800240c:	431e      	orrs	r6, r3
 800240e:	0003      	movs	r3, r0
 8002410:	40ab      	lsls	r3, r5
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	4183      	sbcs	r3, r0
 8002416:	0030      	movs	r0, r6
 8002418:	4318      	orrs	r0, r3
 800241a:	40cc      	lsrs	r4, r1
 800241c:	0743      	lsls	r3, r0, #29
 800241e:	d0c7      	beq.n	80023b0 <__aeabi_dmul+0x4a0>
 8002420:	230f      	movs	r3, #15
 8002422:	4003      	ands	r3, r0
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1bd      	bne.n	80023a4 <__aeabi_dmul+0x494>
 8002428:	e7c2      	b.n	80023b0 <__aeabi_dmul+0x4a0>
 800242a:	0765      	lsls	r5, r4, #29
 800242c:	0264      	lsls	r4, r4, #9
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	08c0      	lsrs	r0, r0, #3
 8002432:	2300      	movs	r3, #0
 8002434:	4305      	orrs	r5, r0
 8002436:	e5dd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002438:	2500      	movs	r5, #0
 800243a:	2302      	movs	r3, #2
 800243c:	2e0f      	cmp	r6, #15
 800243e:	d10c      	bne.n	800245a <__aeabi_dmul+0x54a>
 8002440:	2480      	movs	r4, #128	; 0x80
 8002442:	465b      	mov	r3, fp
 8002444:	0324      	lsls	r4, r4, #12
 8002446:	4223      	tst	r3, r4
 8002448:	d00e      	beq.n	8002468 <__aeabi_dmul+0x558>
 800244a:	4221      	tst	r1, r4
 800244c:	d10c      	bne.n	8002468 <__aeabi_dmul+0x558>
 800244e:	430c      	orrs	r4, r1
 8002450:	0324      	lsls	r4, r4, #12
 8002452:	003a      	movs	r2, r7
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <__aeabi_dmul+0x580>)
 8002456:	0b24      	lsrs	r4, r4, #12
 8002458:	e5cc      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800245a:	2e0b      	cmp	r6, #11
 800245c:	d000      	beq.n	8002460 <__aeabi_dmul+0x550>
 800245e:	e5a2      	b.n	8001fa6 <__aeabi_dmul+0x96>
 8002460:	468b      	mov	fp, r1
 8002462:	46aa      	mov	sl, r5
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e5f7      	b.n	8002058 <__aeabi_dmul+0x148>
 8002468:	2480      	movs	r4, #128	; 0x80
 800246a:	465b      	mov	r3, fp
 800246c:	0324      	lsls	r4, r4, #12
 800246e:	431c      	orrs	r4, r3
 8002470:	0324      	lsls	r4, r4, #12
 8002472:	4642      	mov	r2, r8
 8002474:	4655      	mov	r5, sl
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <__aeabi_dmul+0x580>)
 8002478:	0b24      	lsrs	r4, r4, #12
 800247a:	e5bb      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800247c:	464d      	mov	r5, r9
 800247e:	0021      	movs	r1, r4
 8002480:	2303      	movs	r3, #3
 8002482:	e7db      	b.n	800243c <__aeabi_dmul+0x52c>
 8002484:	fffffc0d 	.word	0xfffffc0d
 8002488:	0000043e 	.word	0x0000043e
 800248c:	0000041e 	.word	0x0000041e
 8002490:	000007ff 	.word	0x000007ff

08002494 <__aeabi_dsub>:
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	4657      	mov	r7, sl
 8002498:	464e      	mov	r6, r9
 800249a:	4645      	mov	r5, r8
 800249c:	46de      	mov	lr, fp
 800249e:	b5e0      	push	{r5, r6, r7, lr}
 80024a0:	000d      	movs	r5, r1
 80024a2:	0004      	movs	r4, r0
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	032b      	lsls	r3, r5, #12
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	0f62      	lsrs	r2, r4, #29
 80024ae:	431a      	orrs	r2, r3
 80024b0:	00e3      	lsls	r3, r4, #3
 80024b2:	030c      	lsls	r4, r1, #12
 80024b4:	0a64      	lsrs	r4, r4, #9
 80024b6:	0f47      	lsrs	r7, r0, #29
 80024b8:	4327      	orrs	r7, r4
 80024ba:	4cd0      	ldr	r4, [pc, #832]	; (80027fc <__aeabi_dsub+0x368>)
 80024bc:	006e      	lsls	r6, r5, #1
 80024be:	4691      	mov	r9, r2
 80024c0:	b083      	sub	sp, #12
 80024c2:	004a      	lsls	r2, r1, #1
 80024c4:	00c0      	lsls	r0, r0, #3
 80024c6:	4698      	mov	r8, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	0d76      	lsrs	r6, r6, #21
 80024cc:	0fed      	lsrs	r5, r5, #31
 80024ce:	0d52      	lsrs	r2, r2, #21
 80024d0:	0fc9      	lsrs	r1, r1, #31
 80024d2:	9001      	str	r0, [sp, #4]
 80024d4:	42a2      	cmp	r2, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x46>
 80024d8:	e0b9      	b.n	800264e <__aeabi_dsub+0x1ba>
 80024da:	2401      	movs	r4, #1
 80024dc:	4061      	eors	r1, r4
 80024de:	468b      	mov	fp, r1
 80024e0:	428d      	cmp	r5, r1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x52>
 80024e4:	e08d      	b.n	8002602 <__aeabi_dsub+0x16e>
 80024e6:	1ab4      	subs	r4, r6, r2
 80024e8:	46a4      	mov	ip, r4
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dsub+0x5c>
 80024ee:	e0b7      	b.n	8002660 <__aeabi_dsub+0x1cc>
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x62>
 80024f4:	e0cb      	b.n	800268e <__aeabi_dsub+0x1fa>
 80024f6:	4ac1      	ldr	r2, [pc, #772]	; (80027fc <__aeabi_dsub+0x368>)
 80024f8:	4296      	cmp	r6, r2
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x6a>
 80024fc:	e186      	b.n	800280c <__aeabi_dsub+0x378>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	4317      	orrs	r7, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a38      	cmp	r2, #56	; 0x38
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x78>
 800250a:	e1a4      	b.n	8002856 <__aeabi_dsub+0x3c2>
 800250c:	2a1f      	cmp	r2, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x7e>
 8002510:	e21d      	b.n	800294e <__aeabi_dsub+0x4ba>
 8002512:	4661      	mov	r1, ip
 8002514:	2220      	movs	r2, #32
 8002516:	003c      	movs	r4, r7
 8002518:	1a52      	subs	r2, r2, r1
 800251a:	0001      	movs	r1, r0
 800251c:	4090      	lsls	r0, r2
 800251e:	4094      	lsls	r4, r2
 8002520:	1e42      	subs	r2, r0, #1
 8002522:	4190      	sbcs	r0, r2
 8002524:	4662      	mov	r2, ip
 8002526:	46a0      	mov	r8, r4
 8002528:	4664      	mov	r4, ip
 800252a:	40d7      	lsrs	r7, r2
 800252c:	464a      	mov	r2, r9
 800252e:	40e1      	lsrs	r1, r4
 8002530:	4644      	mov	r4, r8
 8002532:	1bd2      	subs	r2, r2, r7
 8002534:	4691      	mov	r9, r2
 8002536:	430c      	orrs	r4, r1
 8002538:	4304      	orrs	r4, r0
 800253a:	1b1c      	subs	r4, r3, r4
 800253c:	42a3      	cmp	r3, r4
 800253e:	4192      	sbcs	r2, r2
 8002540:	464b      	mov	r3, r9
 8002542:	4252      	negs	r2, r2
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	469a      	mov	sl, r3
 8002548:	4653      	mov	r3, sl
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0xbc>
 800254e:	e12b      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002550:	4653      	mov	r3, sl
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	0a53      	lsrs	r3, r2, #9
 8002556:	469a      	mov	sl, r3
 8002558:	4653      	mov	r3, sl
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0xcc>
 800255e:	e166      	b.n	800282e <__aeabi_dsub+0x39a>
 8002560:	4650      	mov	r0, sl
 8002562:	f000 fc91 	bl	8002e88 <__clzsi2>
 8002566:	0003      	movs	r3, r0
 8002568:	3b08      	subs	r3, #8
 800256a:	2220      	movs	r2, #32
 800256c:	0020      	movs	r0, r4
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	4651      	mov	r1, sl
 8002572:	40d0      	lsrs	r0, r2
 8002574:	4099      	lsls	r1, r3
 8002576:	0002      	movs	r2, r0
 8002578:	409c      	lsls	r4, r3
 800257a:	430a      	orrs	r2, r1
 800257c:	429e      	cmp	r6, r3
 800257e:	dd00      	ble.n	8002582 <__aeabi_dsub+0xee>
 8002580:	e164      	b.n	800284c <__aeabi_dsub+0x3b8>
 8002582:	1b9b      	subs	r3, r3, r6
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	291f      	cmp	r1, #31
 8002588:	dd00      	ble.n	800258c <__aeabi_dsub+0xf8>
 800258a:	e0fe      	b.n	800278a <__aeabi_dsub+0x2f6>
 800258c:	2320      	movs	r3, #32
 800258e:	0010      	movs	r0, r2
 8002590:	0026      	movs	r6, r4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	409c      	lsls	r4, r3
 8002596:	4098      	lsls	r0, r3
 8002598:	40ce      	lsrs	r6, r1
 800259a:	40ca      	lsrs	r2, r1
 800259c:	1e63      	subs	r3, r4, #1
 800259e:	419c      	sbcs	r4, r3
 80025a0:	4330      	orrs	r0, r6
 80025a2:	4692      	mov	sl, r2
 80025a4:	2600      	movs	r6, #0
 80025a6:	4304      	orrs	r4, r0
 80025a8:	0763      	lsls	r3, r4, #29
 80025aa:	d009      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025ac:	230f      	movs	r3, #15
 80025ae:	4023      	ands	r3, r4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025b4:	1d23      	adds	r3, r4, #4
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	41a4      	sbcs	r4, r4
 80025ba:	4264      	negs	r4, r4
 80025bc:	44a2      	add	sl, r4
 80025be:	001c      	movs	r4, r3
 80025c0:	4653      	mov	r3, sl
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	d400      	bmi.n	80025c8 <__aeabi_dsub+0x134>
 80025c6:	e0f2      	b.n	80027ae <__aeabi_dsub+0x31a>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <__aeabi_dsub+0x368>)
 80025ca:	3601      	adds	r6, #1
 80025cc:	429e      	cmp	r6, r3
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x13e>
 80025d0:	e10f      	b.n	80027f2 <__aeabi_dsub+0x35e>
 80025d2:	4653      	mov	r3, sl
 80025d4:	498a      	ldr	r1, [pc, #552]	; (8002800 <__aeabi_dsub+0x36c>)
 80025d6:	08e4      	lsrs	r4, r4, #3
 80025d8:	400b      	ands	r3, r1
 80025da:	0019      	movs	r1, r3
 80025dc:	075b      	lsls	r3, r3, #29
 80025de:	4323      	orrs	r3, r4
 80025e0:	0572      	lsls	r2, r6, #21
 80025e2:	024c      	lsls	r4, r1, #9
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d52      	lsrs	r2, r2, #21
 80025e8:	0512      	lsls	r2, r2, #20
 80025ea:	4322      	orrs	r2, r4
 80025ec:	07ed      	lsls	r5, r5, #31
 80025ee:	432a      	orrs	r2, r5
 80025f0:	0018      	movs	r0, r3
 80025f2:	0011      	movs	r1, r2
 80025f4:	b003      	add	sp, #12
 80025f6:	bcf0      	pop	{r4, r5, r6, r7}
 80025f8:	46bb      	mov	fp, r7
 80025fa:	46b2      	mov	sl, r6
 80025fc:	46a9      	mov	r9, r5
 80025fe:	46a0      	mov	r8, r4
 8002600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002602:	1ab4      	subs	r4, r6, r2
 8002604:	46a4      	mov	ip, r4
 8002606:	2c00      	cmp	r4, #0
 8002608:	dd59      	ble.n	80026be <__aeabi_dsub+0x22a>
 800260a:	2a00      	cmp	r2, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x17c>
 800260e:	e0b0      	b.n	8002772 <__aeabi_dsub+0x2de>
 8002610:	4556      	cmp	r6, sl
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x182>
 8002614:	e0fa      	b.n	800280c <__aeabi_dsub+0x378>
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0412      	lsls	r2, r2, #16
 800261a:	4317      	orrs	r7, r2
 800261c:	4662      	mov	r2, ip
 800261e:	2a38      	cmp	r2, #56	; 0x38
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x190>
 8002622:	e0d4      	b.n	80027ce <__aeabi_dsub+0x33a>
 8002624:	2a1f      	cmp	r2, #31
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x196>
 8002628:	e1c0      	b.n	80029ac <__aeabi_dsub+0x518>
 800262a:	0039      	movs	r1, r7
 800262c:	3a20      	subs	r2, #32
 800262e:	40d1      	lsrs	r1, r2
 8002630:	4662      	mov	r2, ip
 8002632:	2a20      	cmp	r2, #32
 8002634:	d006      	beq.n	8002644 <__aeabi_dsub+0x1b0>
 8002636:	4664      	mov	r4, ip
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	1b12      	subs	r2, r2, r4
 800263c:	003c      	movs	r4, r7
 800263e:	4094      	lsls	r4, r2
 8002640:	4304      	orrs	r4, r0
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9c01      	ldr	r4, [sp, #4]
 8002646:	1e62      	subs	r2, r4, #1
 8002648:	4194      	sbcs	r4, r2
 800264a:	430c      	orrs	r4, r1
 800264c:	e0c3      	b.n	80027d6 <__aeabi_dsub+0x342>
 800264e:	003c      	movs	r4, r7
 8002650:	4304      	orrs	r4, r0
 8002652:	d02b      	beq.n	80026ac <__aeabi_dsub+0x218>
 8002654:	468b      	mov	fp, r1
 8002656:	428d      	cmp	r5, r1
 8002658:	d02e      	beq.n	80026b8 <__aeabi_dsub+0x224>
 800265a:	4c6a      	ldr	r4, [pc, #424]	; (8002804 <__aeabi_dsub+0x370>)
 800265c:	46a4      	mov	ip, r4
 800265e:	44b4      	add	ip, r6
 8002660:	4664      	mov	r4, ip
 8002662:	2c00      	cmp	r4, #0
 8002664:	d05f      	beq.n	8002726 <__aeabi_dsub+0x292>
 8002666:	1b94      	subs	r4, r2, r6
 8002668:	46a4      	mov	ip, r4
 800266a:	2e00      	cmp	r6, #0
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x1dc>
 800266e:	e120      	b.n	80028b2 <__aeabi_dsub+0x41e>
 8002670:	464c      	mov	r4, r9
 8002672:	431c      	orrs	r4, r3
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x1e4>
 8002676:	e1c7      	b.n	8002a08 <__aeabi_dsub+0x574>
 8002678:	4661      	mov	r1, ip
 800267a:	1e4c      	subs	r4, r1, #1
 800267c:	2901      	cmp	r1, #1
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x1ee>
 8002680:	e223      	b.n	8002aca <__aeabi_dsub+0x636>
 8002682:	4d5e      	ldr	r5, [pc, #376]	; (80027fc <__aeabi_dsub+0x368>)
 8002684:	45ac      	cmp	ip, r5
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x1f6>
 8002688:	e1d8      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 800268a:	46a4      	mov	ip, r4
 800268c:	e11a      	b.n	80028c4 <__aeabi_dsub+0x430>
 800268e:	003a      	movs	r2, r7
 8002690:	4302      	orrs	r2, r0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x202>
 8002694:	e0e4      	b.n	8002860 <__aeabi_dsub+0x3cc>
 8002696:	0022      	movs	r2, r4
 8002698:	3a01      	subs	r2, #1
 800269a:	2c01      	cmp	r4, #1
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x20c>
 800269e:	e1c3      	b.n	8002a28 <__aeabi_dsub+0x594>
 80026a0:	4956      	ldr	r1, [pc, #344]	; (80027fc <__aeabi_dsub+0x368>)
 80026a2:	428c      	cmp	r4, r1
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x214>
 80026a6:	e0b1      	b.n	800280c <__aeabi_dsub+0x378>
 80026a8:	4694      	mov	ip, r2
 80026aa:	e72b      	b.n	8002504 <__aeabi_dsub+0x70>
 80026ac:	2401      	movs	r4, #1
 80026ae:	4061      	eors	r1, r4
 80026b0:	468b      	mov	fp, r1
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x224>
 80026b6:	e716      	b.n	80024e6 <__aeabi_dsub+0x52>
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <__aeabi_dsub+0x370>)
 80026ba:	468c      	mov	ip, r1
 80026bc:	44b4      	add	ip, r6
 80026be:	4664      	mov	r4, ip
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x232>
 80026c4:	e0d3      	b.n	800286e <__aeabi_dsub+0x3da>
 80026c6:	1b91      	subs	r1, r2, r6
 80026c8:	468c      	mov	ip, r1
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x23c>
 80026ce:	e15e      	b.n	800298e <__aeabi_dsub+0x4fa>
 80026d0:	494a      	ldr	r1, [pc, #296]	; (80027fc <__aeabi_dsub+0x368>)
 80026d2:	428a      	cmp	r2, r1
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x244>
 80026d6:	e1be      	b.n	8002a56 <__aeabi_dsub+0x5c2>
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	464c      	mov	r4, r9
 80026dc:	0409      	lsls	r1, r1, #16
 80026de:	430c      	orrs	r4, r1
 80026e0:	46a1      	mov	r9, r4
 80026e2:	4661      	mov	r1, ip
 80026e4:	2938      	cmp	r1, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x256>
 80026e8:	e1ba      	b.n	8002a60 <__aeabi_dsub+0x5cc>
 80026ea:	291f      	cmp	r1, #31
 80026ec:	dd00      	ble.n	80026f0 <__aeabi_dsub+0x25c>
 80026ee:	e227      	b.n	8002b40 <__aeabi_dsub+0x6ac>
 80026f0:	2420      	movs	r4, #32
 80026f2:	1a64      	subs	r4, r4, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	40a1      	lsls	r1, r4
 80026f8:	001e      	movs	r6, r3
 80026fa:	4688      	mov	r8, r1
 80026fc:	4661      	mov	r1, ip
 80026fe:	40a3      	lsls	r3, r4
 8002700:	40ce      	lsrs	r6, r1
 8002702:	4641      	mov	r1, r8
 8002704:	1e5c      	subs	r4, r3, #1
 8002706:	41a3      	sbcs	r3, r4
 8002708:	4331      	orrs	r1, r6
 800270a:	4319      	orrs	r1, r3
 800270c:	000c      	movs	r4, r1
 800270e:	4663      	mov	r3, ip
 8002710:	4649      	mov	r1, r9
 8002712:	40d9      	lsrs	r1, r3
 8002714:	187f      	adds	r7, r7, r1
 8002716:	1824      	adds	r4, r4, r0
 8002718:	4284      	cmp	r4, r0
 800271a:	419b      	sbcs	r3, r3
 800271c:	425b      	negs	r3, r3
 800271e:	469a      	mov	sl, r3
 8002720:	0016      	movs	r6, r2
 8002722:	44ba      	add	sl, r7
 8002724:	e05d      	b.n	80027e2 <__aeabi_dsub+0x34e>
 8002726:	4c38      	ldr	r4, [pc, #224]	; (8002808 <__aeabi_dsub+0x374>)
 8002728:	1c72      	adds	r2, r6, #1
 800272a:	4222      	tst	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x29c>
 800272e:	e0df      	b.n	80028f0 <__aeabi_dsub+0x45c>
 8002730:	464a      	mov	r2, r9
 8002732:	431a      	orrs	r2, r3
 8002734:	2e00      	cmp	r6, #0
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x2a6>
 8002738:	e15c      	b.n	80029f4 <__aeabi_dsub+0x560>
 800273a:	2a00      	cmp	r2, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x2ac>
 800273e:	e1cf      	b.n	8002ae0 <__aeabi_dsub+0x64c>
 8002740:	003a      	movs	r2, r7
 8002742:	4302      	orrs	r2, r0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x2b4>
 8002746:	e17f      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002748:	1a1c      	subs	r4, r3, r0
 800274a:	464a      	mov	r2, r9
 800274c:	42a3      	cmp	r3, r4
 800274e:	4189      	sbcs	r1, r1
 8002750:	1bd2      	subs	r2, r2, r7
 8002752:	4249      	negs	r1, r1
 8002754:	1a52      	subs	r2, r2, r1
 8002756:	4692      	mov	sl, r2
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	d400      	bmi.n	800275e <__aeabi_dsub+0x2ca>
 800275c:	e20a      	b.n	8002b74 <__aeabi_dsub+0x6e0>
 800275e:	1ac4      	subs	r4, r0, r3
 8002760:	42a0      	cmp	r0, r4
 8002762:	4180      	sbcs	r0, r0
 8002764:	464b      	mov	r3, r9
 8002766:	4240      	negs	r0, r0
 8002768:	1aff      	subs	r7, r7, r3
 800276a:	1a3b      	subs	r3, r7, r0
 800276c:	469a      	mov	sl, r3
 800276e:	465d      	mov	r5, fp
 8002770:	e71a      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002772:	003a      	movs	r2, r7
 8002774:	4302      	orrs	r2, r0
 8002776:	d073      	beq.n	8002860 <__aeabi_dsub+0x3cc>
 8002778:	0022      	movs	r2, r4
 800277a:	3a01      	subs	r2, #1
 800277c:	2c01      	cmp	r4, #1
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x2ee>
 8002780:	e0cb      	b.n	800291a <__aeabi_dsub+0x486>
 8002782:	4554      	cmp	r4, sl
 8002784:	d042      	beq.n	800280c <__aeabi_dsub+0x378>
 8002786:	4694      	mov	ip, r2
 8002788:	e748      	b.n	800261c <__aeabi_dsub+0x188>
 800278a:	0010      	movs	r0, r2
 800278c:	3b1f      	subs	r3, #31
 800278e:	40d8      	lsrs	r0, r3
 8002790:	2920      	cmp	r1, #32
 8002792:	d003      	beq.n	800279c <__aeabi_dsub+0x308>
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	409a      	lsls	r2, r3
 800279a:	4314      	orrs	r4, r2
 800279c:	1e63      	subs	r3, r4, #1
 800279e:	419c      	sbcs	r4, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	469a      	mov	sl, r3
 80027a6:	4304      	orrs	r4, r0
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d000      	beq.n	80027ae <__aeabi_dsub+0x31a>
 80027ac:	e6fe      	b.n	80025ac <__aeabi_dsub+0x118>
 80027ae:	4652      	mov	r2, sl
 80027b0:	08e3      	lsrs	r3, r4, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4652      	mov	r2, sl
 80027b8:	46b4      	mov	ip, r6
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <__aeabi_dsub+0x368>)
 80027be:	458c      	cmp	ip, r1
 80027c0:	d02a      	beq.n	8002818 <__aeabi_dsub+0x384>
 80027c2:	0312      	lsls	r2, r2, #12
 80027c4:	0b14      	lsrs	r4, r2, #12
 80027c6:	4662      	mov	r2, ip
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	0d52      	lsrs	r2, r2, #21
 80027cc:	e70c      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027ce:	003c      	movs	r4, r7
 80027d0:	4304      	orrs	r4, r0
 80027d2:	1e62      	subs	r2, r4, #1
 80027d4:	4194      	sbcs	r4, r2
 80027d6:	18e4      	adds	r4, r4, r3
 80027d8:	429c      	cmp	r4, r3
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4252      	negs	r2, r2
 80027de:	444a      	add	r2, r9
 80027e0:	4692      	mov	sl, r2
 80027e2:	4653      	mov	r3, sl
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	d5df      	bpl.n	80027a8 <__aeabi_dsub+0x314>
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__aeabi_dsub+0x368>)
 80027ea:	3601      	adds	r6, #1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x35e>
 80027f0:	e0a0      	b.n	8002934 <__aeabi_dsub+0x4a0>
 80027f2:	0032      	movs	r2, r6
 80027f4:	2400      	movs	r4, #0
 80027f6:	2300      	movs	r3, #0
 80027f8:	e6f6      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	000007ff 	.word	0x000007ff
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	fffff801 	.word	0xfffff801
 8002808:	000007fe 	.word	0x000007fe
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	464a      	mov	r2, r9
 8002810:	0752      	lsls	r2, r2, #29
 8002812:	4313      	orrs	r3, r2
 8002814:	464a      	mov	r2, r9
 8002816:	08d2      	lsrs	r2, r2, #3
 8002818:	0019      	movs	r1, r3
 800281a:	4311      	orrs	r1, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x38c>
 800281e:	e1b5      	b.n	8002b8c <__aeabi_dsub+0x6f8>
 8002820:	2480      	movs	r4, #128	; 0x80
 8002822:	0324      	lsls	r4, r4, #12
 8002824:	4314      	orrs	r4, r2
 8002826:	0324      	lsls	r4, r4, #12
 8002828:	4ad5      	ldr	r2, [pc, #852]	; (8002b80 <__aeabi_dsub+0x6ec>)
 800282a:	0b24      	lsrs	r4, r4, #12
 800282c:	e6dc      	b.n	80025e8 <__aeabi_dsub+0x154>
 800282e:	0020      	movs	r0, r4
 8002830:	f000 fb2a 	bl	8002e88 <__clzsi2>
 8002834:	0003      	movs	r3, r0
 8002836:	3318      	adds	r3, #24
 8002838:	2b1f      	cmp	r3, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dsub+0x3aa>
 800283c:	e695      	b.n	800256a <__aeabi_dsub+0xd6>
 800283e:	0022      	movs	r2, r4
 8002840:	3808      	subs	r0, #8
 8002842:	4082      	lsls	r2, r0
 8002844:	2400      	movs	r4, #0
 8002846:	429e      	cmp	r6, r3
 8002848:	dc00      	bgt.n	800284c <__aeabi_dsub+0x3b8>
 800284a:	e69a      	b.n	8002582 <__aeabi_dsub+0xee>
 800284c:	1af6      	subs	r6, r6, r3
 800284e:	4bcd      	ldr	r3, [pc, #820]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002850:	401a      	ands	r2, r3
 8002852:	4692      	mov	sl, r2
 8002854:	e6a8      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002856:	003c      	movs	r4, r7
 8002858:	4304      	orrs	r4, r0
 800285a:	1e62      	subs	r2, r4, #1
 800285c:	4194      	sbcs	r4, r2
 800285e:	e66c      	b.n	800253a <__aeabi_dsub+0xa6>
 8002860:	464a      	mov	r2, r9
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	0752      	lsls	r2, r2, #29
 8002866:	4313      	orrs	r3, r2
 8002868:	464a      	mov	r2, r9
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	e7a6      	b.n	80027bc <__aeabi_dsub+0x328>
 800286e:	4cc6      	ldr	r4, [pc, #792]	; (8002b88 <__aeabi_dsub+0x6f4>)
 8002870:	1c72      	adds	r2, r6, #1
 8002872:	4222      	tst	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x3e4>
 8002876:	e0ac      	b.n	80029d2 <__aeabi_dsub+0x53e>
 8002878:	464a      	mov	r2, r9
 800287a:	431a      	orrs	r2, r3
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x3ee>
 8002880:	e105      	b.n	8002a8e <__aeabi_dsub+0x5fa>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x3f4>
 8002886:	e156      	b.n	8002b36 <__aeabi_dsub+0x6a2>
 8002888:	003a      	movs	r2, r7
 800288a:	4302      	orrs	r2, r0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x3fc>
 800288e:	e0db      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002890:	181c      	adds	r4, r3, r0
 8002892:	429c      	cmp	r4, r3
 8002894:	419b      	sbcs	r3, r3
 8002896:	444f      	add	r7, r9
 8002898:	46ba      	mov	sl, r7
 800289a:	425b      	negs	r3, r3
 800289c:	449a      	add	sl, r3
 800289e:	4653      	mov	r3, sl
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	d400      	bmi.n	80028a6 <__aeabi_dsub+0x412>
 80028a4:	e780      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028a6:	4652      	mov	r2, sl
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <__aeabi_dsub+0x6f0>)
 80028aa:	2601      	movs	r6, #1
 80028ac:	401a      	ands	r2, r3
 80028ae:	4692      	mov	sl, r2
 80028b0:	e77a      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028b2:	4cb3      	ldr	r4, [pc, #716]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80028b4:	42a2      	cmp	r2, r4
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x426>
 80028b8:	e0c0      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 80028ba:	2480      	movs	r4, #128	; 0x80
 80028bc:	464d      	mov	r5, r9
 80028be:	0424      	lsls	r4, r4, #16
 80028c0:	4325      	orrs	r5, r4
 80028c2:	46a9      	mov	r9, r5
 80028c4:	4664      	mov	r4, ip
 80028c6:	2c38      	cmp	r4, #56	; 0x38
 80028c8:	dc53      	bgt.n	8002972 <__aeabi_dsub+0x4de>
 80028ca:	4661      	mov	r1, ip
 80028cc:	2c1f      	cmp	r4, #31
 80028ce:	dd00      	ble.n	80028d2 <__aeabi_dsub+0x43e>
 80028d0:	e0cd      	b.n	8002a6e <__aeabi_dsub+0x5da>
 80028d2:	2520      	movs	r5, #32
 80028d4:	001e      	movs	r6, r3
 80028d6:	1b2d      	subs	r5, r5, r4
 80028d8:	464c      	mov	r4, r9
 80028da:	40ab      	lsls	r3, r5
 80028dc:	40ac      	lsls	r4, r5
 80028de:	40ce      	lsrs	r6, r1
 80028e0:	1e5d      	subs	r5, r3, #1
 80028e2:	41ab      	sbcs	r3, r5
 80028e4:	4334      	orrs	r4, r6
 80028e6:	4323      	orrs	r3, r4
 80028e8:	464c      	mov	r4, r9
 80028ea:	40cc      	lsrs	r4, r1
 80028ec:	1b3f      	subs	r7, r7, r4
 80028ee:	e045      	b.n	800297c <__aeabi_dsub+0x4e8>
 80028f0:	464a      	mov	r2, r9
 80028f2:	1a1c      	subs	r4, r3, r0
 80028f4:	1bd1      	subs	r1, r2, r7
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	4192      	sbcs	r2, r2
 80028fa:	4252      	negs	r2, r2
 80028fc:	4692      	mov	sl, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	4651      	mov	r1, sl
 8002902:	1a52      	subs	r2, r2, r1
 8002904:	4692      	mov	sl, r2
 8002906:	0212      	lsls	r2, r2, #8
 8002908:	d500      	bpl.n	800290c <__aeabi_dsub+0x478>
 800290a:	e083      	b.n	8002a14 <__aeabi_dsub+0x580>
 800290c:	4653      	mov	r3, sl
 800290e:	4323      	orrs	r3, r4
 8002910:	d000      	beq.n	8002914 <__aeabi_dsub+0x480>
 8002912:	e621      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002914:	2200      	movs	r2, #0
 8002916:	2500      	movs	r5, #0
 8002918:	e753      	b.n	80027c2 <__aeabi_dsub+0x32e>
 800291a:	181c      	adds	r4, r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	419b      	sbcs	r3, r3
 8002920:	444f      	add	r7, r9
 8002922:	46ba      	mov	sl, r7
 8002924:	425b      	negs	r3, r3
 8002926:	449a      	add	sl, r3
 8002928:	4653      	mov	r3, sl
 800292a:	2601      	movs	r6, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dsub+0x49e>
 8002930:	e73a      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002932:	2602      	movs	r6, #2
 8002934:	4652      	mov	r2, sl
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002938:	2101      	movs	r1, #1
 800293a:	401a      	ands	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	4021      	ands	r1, r4
 8002940:	0862      	lsrs	r2, r4, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	07dc      	lsls	r4, r3, #31
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	469a      	mov	sl, r3
 800294a:	4314      	orrs	r4, r2
 800294c:	e62c      	b.n	80025a8 <__aeabi_dsub+0x114>
 800294e:	0039      	movs	r1, r7
 8002950:	3a20      	subs	r2, #32
 8002952:	40d1      	lsrs	r1, r2
 8002954:	4662      	mov	r2, ip
 8002956:	2a20      	cmp	r2, #32
 8002958:	d006      	beq.n	8002968 <__aeabi_dsub+0x4d4>
 800295a:	4664      	mov	r4, ip
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	1b12      	subs	r2, r2, r4
 8002960:	003c      	movs	r4, r7
 8002962:	4094      	lsls	r4, r2
 8002964:	4304      	orrs	r4, r0
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	9c01      	ldr	r4, [sp, #4]
 800296a:	1e62      	subs	r2, r4, #1
 800296c:	4194      	sbcs	r4, r2
 800296e:	430c      	orrs	r4, r1
 8002970:	e5e3      	b.n	800253a <__aeabi_dsub+0xa6>
 8002972:	4649      	mov	r1, r9
 8002974:	4319      	orrs	r1, r3
 8002976:	000b      	movs	r3, r1
 8002978:	1e5c      	subs	r4, r3, #1
 800297a:	41a3      	sbcs	r3, r4
 800297c:	1ac4      	subs	r4, r0, r3
 800297e:	42a0      	cmp	r0, r4
 8002980:	419b      	sbcs	r3, r3
 8002982:	425b      	negs	r3, r3
 8002984:	1afb      	subs	r3, r7, r3
 8002986:	469a      	mov	sl, r3
 8002988:	465d      	mov	r5, fp
 800298a:	0016      	movs	r6, r2
 800298c:	e5dc      	b.n	8002548 <__aeabi_dsub+0xb4>
 800298e:	4649      	mov	r1, r9
 8002990:	4319      	orrs	r1, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x502>
 8002994:	e0ae      	b.n	8002af4 <__aeabi_dsub+0x660>
 8002996:	4661      	mov	r1, ip
 8002998:	4664      	mov	r4, ip
 800299a:	3901      	subs	r1, #1
 800299c:	2c01      	cmp	r4, #1
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x50e>
 80029a0:	e0e0      	b.n	8002b64 <__aeabi_dsub+0x6d0>
 80029a2:	4c77      	ldr	r4, [pc, #476]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029a4:	45a4      	cmp	ip, r4
 80029a6:	d056      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 80029a8:	468c      	mov	ip, r1
 80029aa:	e69a      	b.n	80026e2 <__aeabi_dsub+0x24e>
 80029ac:	4661      	mov	r1, ip
 80029ae:	2220      	movs	r2, #32
 80029b0:	003c      	movs	r4, r7
 80029b2:	1a52      	subs	r2, r2, r1
 80029b4:	4094      	lsls	r4, r2
 80029b6:	0001      	movs	r1, r0
 80029b8:	4090      	lsls	r0, r2
 80029ba:	46a0      	mov	r8, r4
 80029bc:	4664      	mov	r4, ip
 80029be:	1e42      	subs	r2, r0, #1
 80029c0:	4190      	sbcs	r0, r2
 80029c2:	4662      	mov	r2, ip
 80029c4:	40e1      	lsrs	r1, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	40d7      	lsrs	r7, r2
 80029ca:	430c      	orrs	r4, r1
 80029cc:	4304      	orrs	r4, r0
 80029ce:	44b9      	add	r9, r7
 80029d0:	e701      	b.n	80027d6 <__aeabi_dsub+0x342>
 80029d2:	496b      	ldr	r1, [pc, #428]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x546>
 80029d8:	e70c      	b.n	80027f4 <__aeabi_dsub+0x360>
 80029da:	1818      	adds	r0, r3, r0
 80029dc:	4298      	cmp	r0, r3
 80029de:	419b      	sbcs	r3, r3
 80029e0:	444f      	add	r7, r9
 80029e2:	425b      	negs	r3, r3
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	07dc      	lsls	r4, r3, #31
 80029e8:	0840      	lsrs	r0, r0, #1
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	469a      	mov	sl, r3
 80029ee:	0016      	movs	r6, r2
 80029f0:	4304      	orrs	r4, r0
 80029f2:	e6d9      	b.n	80027a8 <__aeabi_dsub+0x314>
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x566>
 80029f8:	e081      	b.n	8002afe <__aeabi_dsub+0x66a>
 80029fa:	003b      	movs	r3, r7
 80029fc:	4303      	orrs	r3, r0
 80029fe:	d11d      	bne.n	8002a3c <__aeabi_dsub+0x5a8>
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2500      	movs	r5, #0
 8002a04:	0312      	lsls	r2, r2, #12
 8002a06:	e70b      	b.n	8002820 <__aeabi_dsub+0x38c>
 8002a08:	08c0      	lsrs	r0, r0, #3
 8002a0a:	077b      	lsls	r3, r7, #29
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	08fa      	lsrs	r2, r7, #3
 8002a12:	e6d3      	b.n	80027bc <__aeabi_dsub+0x328>
 8002a14:	1ac4      	subs	r4, r0, r3
 8002a16:	42a0      	cmp	r0, r4
 8002a18:	4180      	sbcs	r0, r0
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	4240      	negs	r0, r0
 8002a1e:	1aff      	subs	r7, r7, r3
 8002a20:	1a3b      	subs	r3, r7, r0
 8002a22:	469a      	mov	sl, r3
 8002a24:	465d      	mov	r5, fp
 8002a26:	e597      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002a28:	1a1c      	subs	r4, r3, r0
 8002a2a:	464a      	mov	r2, r9
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	419b      	sbcs	r3, r3
 8002a30:	1bd7      	subs	r7, r2, r7
 8002a32:	425b      	negs	r3, r3
 8002a34:	1afb      	subs	r3, r7, r3
 8002a36:	469a      	mov	sl, r3
 8002a38:	2601      	movs	r6, #1
 8002a3a:	e585      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002a3c:	08c0      	lsrs	r0, r0, #3
 8002a3e:	077b      	lsls	r3, r7, #29
 8002a40:	465d      	mov	r5, fp
 8002a42:	4303      	orrs	r3, r0
 8002a44:	08fa      	lsrs	r2, r7, #3
 8002a46:	e6e7      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a48:	464a      	mov	r2, r9
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	0752      	lsls	r2, r2, #29
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	464a      	mov	r2, r9
 8002a52:	08d2      	lsrs	r2, r2, #3
 8002a54:	e6b5      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002a56:	08c0      	lsrs	r0, r0, #3
 8002a58:	077b      	lsls	r3, r7, #29
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	08fa      	lsrs	r2, r7, #3
 8002a5e:	e6db      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a60:	4649      	mov	r1, r9
 8002a62:	4319      	orrs	r1, r3
 8002a64:	000b      	movs	r3, r1
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	418b      	sbcs	r3, r1
 8002a6a:	001c      	movs	r4, r3
 8002a6c:	e653      	b.n	8002716 <__aeabi_dsub+0x282>
 8002a6e:	464d      	mov	r5, r9
 8002a70:	3c20      	subs	r4, #32
 8002a72:	40e5      	lsrs	r5, r4
 8002a74:	2920      	cmp	r1, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x5f0>
 8002a78:	2440      	movs	r4, #64	; 0x40
 8002a7a:	1a64      	subs	r4, r4, r1
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	40a1      	lsls	r1, r4
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4698      	mov	r8, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	1e5c      	subs	r4, r3, #1
 8002a88:	41a3      	sbcs	r3, r4
 8002a8a:	432b      	orrs	r3, r5
 8002a8c:	e776      	b.n	800297c <__aeabi_dsub+0x4e8>
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d0e1      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 8002a92:	003a      	movs	r2, r7
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x608>
 8002a9a:	e6b8      	b.n	800280e <__aeabi_dsub+0x37a>
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	0752      	lsls	r2, r2, #29
 8002aa0:	2480      	movs	r4, #128	; 0x80
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0324      	lsls	r4, r4, #12
 8002aa8:	08d2      	lsrs	r2, r2, #3
 8002aaa:	4222      	tst	r2, r4
 8002aac:	d007      	beq.n	8002abe <__aeabi_dsub+0x62a>
 8002aae:	08fe      	lsrs	r6, r7, #3
 8002ab0:	4226      	tst	r6, r4
 8002ab2:	d104      	bne.n	8002abe <__aeabi_dsub+0x62a>
 8002ab4:	465d      	mov	r5, fp
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	08c3      	lsrs	r3, r0, #3
 8002aba:	077f      	lsls	r7, r7, #29
 8002abc:	433b      	orrs	r3, r7
 8002abe:	0f59      	lsrs	r1, r3, #29
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	e6a6      	b.n	8002818 <__aeabi_dsub+0x384>
 8002aca:	1ac4      	subs	r4, r0, r3
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	1aff      	subs	r7, r7, r3
 8002ad6:	1a3b      	subs	r3, r7, r0
 8002ad8:	469a      	mov	sl, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	2601      	movs	r6, #1
 8002ade:	e533      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x654>
 8002ae6:	e715      	b.n	8002914 <__aeabi_dsub+0x480>
 8002ae8:	08c0      	lsrs	r0, r0, #3
 8002aea:	077b      	lsls	r3, r7, #29
 8002aec:	465d      	mov	r5, fp
 8002aee:	4303      	orrs	r3, r0
 8002af0:	08fa      	lsrs	r2, r7, #3
 8002af2:	e666      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002af4:	08c0      	lsrs	r0, r0, #3
 8002af6:	077b      	lsls	r3, r7, #29
 8002af8:	4303      	orrs	r3, r0
 8002afa:	08fa      	lsrs	r2, r7, #3
 8002afc:	e65e      	b.n	80027bc <__aeabi_dsub+0x328>
 8002afe:	003a      	movs	r2, r7
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	4302      	orrs	r2, r0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x674>
 8002b06:	e682      	b.n	800280e <__aeabi_dsub+0x37a>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	2480      	movs	r4, #128	; 0x80
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	464a      	mov	r2, r9
 8002b12:	0324      	lsls	r4, r4, #12
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	4222      	tst	r2, r4
 8002b18:	d007      	beq.n	8002b2a <__aeabi_dsub+0x696>
 8002b1a:	08fe      	lsrs	r6, r7, #3
 8002b1c:	4226      	tst	r6, r4
 8002b1e:	d104      	bne.n	8002b2a <__aeabi_dsub+0x696>
 8002b20:	465d      	mov	r5, fp
 8002b22:	0032      	movs	r2, r6
 8002b24:	08c3      	lsrs	r3, r0, #3
 8002b26:	077f      	lsls	r7, r7, #29
 8002b28:	433b      	orrs	r3, r7
 8002b2a:	0f59      	lsrs	r1, r3, #29
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	0749      	lsls	r1, r1, #29
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e670      	b.n	8002818 <__aeabi_dsub+0x384>
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	077b      	lsls	r3, r7, #29
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	08fa      	lsrs	r2, r7, #3
 8002b3e:	e640      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002b40:	464c      	mov	r4, r9
 8002b42:	3920      	subs	r1, #32
 8002b44:	40cc      	lsrs	r4, r1
 8002b46:	4661      	mov	r1, ip
 8002b48:	2920      	cmp	r1, #32
 8002b4a:	d006      	beq.n	8002b5a <__aeabi_dsub+0x6c6>
 8002b4c:	4666      	mov	r6, ip
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	1b89      	subs	r1, r1, r6
 8002b52:	464e      	mov	r6, r9
 8002b54:	408e      	lsls	r6, r1
 8002b56:	4333      	orrs	r3, r6
 8002b58:	4698      	mov	r8, r3
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	418b      	sbcs	r3, r1
 8002b60:	431c      	orrs	r4, r3
 8002b62:	e5d8      	b.n	8002716 <__aeabi_dsub+0x282>
 8002b64:	181c      	adds	r4, r3, r0
 8002b66:	4284      	cmp	r4, r0
 8002b68:	4180      	sbcs	r0, r0
 8002b6a:	444f      	add	r7, r9
 8002b6c:	46ba      	mov	sl, r7
 8002b6e:	4240      	negs	r0, r0
 8002b70:	4482      	add	sl, r0
 8002b72:	e6d9      	b.n	8002928 <__aeabi_dsub+0x494>
 8002b74:	4653      	mov	r3, sl
 8002b76:	4323      	orrs	r3, r4
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x6e8>
 8002b7a:	e6cb      	b.n	8002914 <__aeabi_dsub+0x480>
 8002b7c:	e614      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff
 8002b84:	ff7fffff 	.word	0xff7fffff
 8002b88:	000007fe 	.word	0x000007fe
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4a01      	ldr	r2, [pc, #4]	; (8002b94 <__aeabi_dsub+0x700>)
 8002b90:	001c      	movs	r4, r3
 8002b92:	e529      	b.n	80025e8 <__aeabi_dsub+0x154>
 8002b94:	000007ff 	.word	0x000007ff

08002b98 <__aeabi_dcmpun>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	0005      	movs	r5, r0
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002b9e:	031c      	lsls	r4, r3, #12
 8002ba0:	0016      	movs	r6, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	030a      	lsls	r2, r1, #12
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	0b12      	lsrs	r2, r2, #12
 8002baa:	0d49      	lsrs	r1, r1, #21
 8002bac:	0b24      	lsrs	r4, r4, #12
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	4281      	cmp	r1, r0
 8002bb2:	d008      	beq.n	8002bc6 <__aeabi_dcmpun+0x2e>
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	4330      	orrs	r0, r6
 8002bc0:	1e43      	subs	r3, r0, #1
 8002bc2:	4198      	sbcs	r0, r3
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	432a      	orrs	r2, r5
 8002bca:	d1fb      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bcc:	e7f2      	b.n	8002bb4 <__aeabi_dcmpun+0x1c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	000007ff 	.word	0x000007ff

08002bd4 <__aeabi_d2iz>:
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	b530      	push	{r4, r5, lr}
 8002bd8:	4c13      	ldr	r4, [pc, #76]	; (8002c28 <__aeabi_d2iz+0x54>)
 8002bda:	0053      	lsls	r3, r2, #1
 8002bdc:	0309      	lsls	r1, r1, #12
 8002bde:	0005      	movs	r5, r0
 8002be0:	0b09      	lsrs	r1, r1, #12
 8002be2:	2000      	movs	r0, #0
 8002be4:	0d5b      	lsrs	r3, r3, #21
 8002be6:	0fd2      	lsrs	r2, r2, #31
 8002be8:	42a3      	cmp	r3, r4
 8002bea:	dd04      	ble.n	8002bf6 <__aeabi_d2iz+0x22>
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <__aeabi_d2iz+0x58>)
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	dd02      	ble.n	8002bf8 <__aeabi_d2iz+0x24>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <__aeabi_d2iz+0x5c>)
 8002bf4:	18d0      	adds	r0, r2, r3
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	2080      	movs	r0, #128	; 0x80
 8002bfa:	0340      	lsls	r0, r0, #13
 8002bfc:	4301      	orrs	r1, r0
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <__aeabi_d2iz+0x60>)
 8002c00:	1ac0      	subs	r0, r0, r3
 8002c02:	281f      	cmp	r0, #31
 8002c04:	dd08      	ble.n	8002c18 <__aeabi_d2iz+0x44>
 8002c06:	480c      	ldr	r0, [pc, #48]	; (8002c38 <__aeabi_d2iz+0x64>)
 8002c08:	1ac3      	subs	r3, r0, r3
 8002c0a:	40d9      	lsrs	r1, r3
 8002c0c:	000b      	movs	r3, r1
 8002c0e:	4258      	negs	r0, r3
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d1f0      	bne.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c14:	0018      	movs	r0, r3
 8002c16:	e7ee      	b.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c18:	4c08      	ldr	r4, [pc, #32]	; (8002c3c <__aeabi_d2iz+0x68>)
 8002c1a:	40c5      	lsrs	r5, r0
 8002c1c:	46a4      	mov	ip, r4
 8002c1e:	4463      	add	r3, ip
 8002c20:	4099      	lsls	r1, r3
 8002c22:	000b      	movs	r3, r1
 8002c24:	432b      	orrs	r3, r5
 8002c26:	e7f2      	b.n	8002c0e <__aeabi_d2iz+0x3a>
 8002c28:	000003fe 	.word	0x000003fe
 8002c2c:	0000041d 	.word	0x0000041d
 8002c30:	7fffffff 	.word	0x7fffffff
 8002c34:	00000433 	.word	0x00000433
 8002c38:	00000413 	.word	0x00000413
 8002c3c:	fffffbed 	.word	0xfffffbed

08002c40 <__aeabi_i2d>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d016      	beq.n	8002c74 <__aeabi_i2d+0x34>
 8002c46:	17c3      	asrs	r3, r0, #31
 8002c48:	18c5      	adds	r5, r0, r3
 8002c4a:	405d      	eors	r5, r3
 8002c4c:	0fc4      	lsrs	r4, r0, #31
 8002c4e:	0028      	movs	r0, r5
 8002c50:	f000 f91a 	bl	8002e88 <__clzsi2>
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <__aeabi_i2d+0x5c>)
 8002c56:	1a1b      	subs	r3, r3, r0
 8002c58:	280a      	cmp	r0, #10
 8002c5a:	dc16      	bgt.n	8002c8a <__aeabi_i2d+0x4a>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	002e      	movs	r6, r5
 8002c60:	3215      	adds	r2, #21
 8002c62:	4096      	lsls	r6, r2
 8002c64:	220b      	movs	r2, #11
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	40d5      	lsrs	r5, r2
 8002c6a:	055b      	lsls	r3, r3, #21
 8002c6c:	032d      	lsls	r5, r5, #12
 8002c6e:	0b2d      	lsrs	r5, r5, #12
 8002c70:	0d5b      	lsrs	r3, r3, #21
 8002c72:	e003      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c74:	2400      	movs	r4, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	2500      	movs	r5, #0
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	07e4      	lsls	r4, r4, #31
 8002c82:	4323      	orrs	r3, r4
 8002c84:	0030      	movs	r0, r6
 8002c86:	0019      	movs	r1, r3
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	380b      	subs	r0, #11
 8002c8c:	4085      	lsls	r5, r0
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	032d      	lsls	r5, r5, #12
 8002c92:	2600      	movs	r6, #0
 8002c94:	0b2d      	lsrs	r5, r5, #12
 8002c96:	0d5b      	lsrs	r3, r3, #21
 8002c98:	e7f0      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	0000041e 	.word	0x0000041e

08002ca0 <__aeabi_ui2d>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	1e04      	subs	r4, r0, #0
 8002ca4:	d010      	beq.n	8002cc8 <__aeabi_ui2d+0x28>
 8002ca6:	f000 f8ef 	bl	8002e88 <__clzsi2>
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <__aeabi_ui2d+0x48>)
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	280a      	cmp	r0, #10
 8002cb0:	dc11      	bgt.n	8002cd6 <__aeabi_ui2d+0x36>
 8002cb2:	220b      	movs	r2, #11
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	1a12      	subs	r2, r2, r0
 8002cb8:	40d1      	lsrs	r1, r2
 8002cba:	3015      	adds	r0, #21
 8002cbc:	030a      	lsls	r2, r1, #12
 8002cbe:	055b      	lsls	r3, r3, #21
 8002cc0:	4084      	lsls	r4, r0
 8002cc2:	0b12      	lsrs	r2, r2, #12
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	e001      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	0022      	movs	r2, r4
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4082      	lsls	r2, r0
 8002cdc:	055b      	lsls	r3, r3, #21
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	0b12      	lsrs	r2, r2, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	e7f1      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002ce8:	0000041e 	.word	0x0000041e

08002cec <__aeabi_f2d>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0242      	lsls	r2, r0, #9
 8002cf0:	0043      	lsls	r3, r0, #1
 8002cf2:	0fc4      	lsrs	r4, r0, #31
 8002cf4:	20fe      	movs	r0, #254	; 0xfe
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	0a55      	lsrs	r5, r2, #9
 8002cfc:	4208      	tst	r0, r1
 8002cfe:	d00c      	beq.n	8002d1a <__aeabi_f2d+0x2e>
 8002d00:	21e0      	movs	r1, #224	; 0xe0
 8002d02:	0089      	lsls	r1, r1, #2
 8002d04:	468c      	mov	ip, r1
 8002d06:	076d      	lsls	r5, r5, #29
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	4463      	add	r3, ip
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0028      	movs	r0, r5
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <__aeabi_f2d+0x5c>
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	d01b      	beq.n	8002d5a <__aeabi_f2d+0x6e>
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f8b0 	bl	8002e88 <__clzsi2>
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	dc1c      	bgt.n	8002d66 <__aeabi_f2d+0x7a>
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	002a      	movs	r2, r5
 8002d30:	1a1b      	subs	r3, r3, r0
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	0003      	movs	r3, r0
 8002d36:	3315      	adds	r3, #21
 8002d38:	409d      	lsls	r5, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <__aeabi_f2d+0x88>)
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	1a1b      	subs	r3, r3, r0
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	0b12      	lsrs	r2, r2, #12
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	e7e1      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d009      	beq.n	8002d60 <__aeabi_f2d+0x74>
 8002d4c:	0b13      	lsrs	r3, r2, #12
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0312      	lsls	r2, r2, #12
 8002d52:	431a      	orrs	r2, r3
 8002d54:	076d      	lsls	r5, r5, #29
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d58:	e7d8      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e7d5      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d60:	2200      	movs	r2, #0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d64:	e7d2      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d66:	0003      	movs	r3, r0
 8002d68:	002a      	movs	r2, r5
 8002d6a:	3b0b      	subs	r3, #11
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	2500      	movs	r5, #0
 8002d70:	e7e3      	b.n	8002d3a <__aeabi_f2d+0x4e>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00000389 	.word	0x00000389
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_d2f>:
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d80:	004b      	lsls	r3, r1, #1
 8002d82:	030d      	lsls	r5, r1, #12
 8002d84:	0f40      	lsrs	r0, r0, #29
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	0fcc      	lsrs	r4, r1, #31
 8002d8a:	0a6d      	lsrs	r5, r5, #9
 8002d8c:	493a      	ldr	r1, [pc, #232]	; (8002e78 <__aeabi_d2f+0xfc>)
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	1c58      	adds	r0, r3, #1
 8002d92:	00d7      	lsls	r7, r2, #3
 8002d94:	4208      	tst	r0, r1
 8002d96:	d00a      	beq.n	8002dae <__aeabi_d2f+0x32>
 8002d98:	4938      	ldr	r1, [pc, #224]	; (8002e7c <__aeabi_d2f+0x100>)
 8002d9a:	1859      	adds	r1, r3, r1
 8002d9c:	29fe      	cmp	r1, #254	; 0xfe
 8002d9e:	dd16      	ble.n	8002dce <__aeabi_d2f+0x52>
 8002da0:	20ff      	movs	r0, #255	; 0xff
 8002da2:	2200      	movs	r2, #0
 8002da4:	05c0      	lsls	r0, r0, #23
 8002da6:	4310      	orrs	r0, r2
 8002da8:	07e4      	lsls	r4, r4, #31
 8002daa:	4320      	orrs	r0, r4
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <__aeabi_d2f+0x44>
 8002db2:	433d      	orrs	r5, r7
 8002db4:	d026      	beq.n	8002e04 <__aeabi_d2f+0x88>
 8002db6:	2205      	movs	r2, #5
 8002db8:	0192      	lsls	r2, r2, #6
 8002dba:	0a52      	lsrs	r2, r2, #9
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	e7f1      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dc0:	432f      	orrs	r7, r5
 8002dc2:	d0ed      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	03d2      	lsls	r2, r2, #15
 8002dc8:	20ff      	movs	r0, #255	; 0xff
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	e7ea      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	dd1b      	ble.n	8002e0a <__aeabi_d2f+0x8e>
 8002dd2:	0192      	lsls	r2, r2, #6
 8002dd4:	1e50      	subs	r0, r2, #1
 8002dd6:	4182      	sbcs	r2, r0
 8002dd8:	00ed      	lsls	r5, r5, #3
 8002dda:	0f7f      	lsrs	r7, r7, #29
 8002ddc:	432a      	orrs	r2, r5
 8002dde:	433a      	orrs	r2, r7
 8002de0:	0753      	lsls	r3, r2, #29
 8002de2:	d047      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002de4:	230f      	movs	r3, #15
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d000      	beq.n	8002dee <__aeabi_d2f+0x72>
 8002dec:	3204      	adds	r2, #4
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	04db      	lsls	r3, r3, #19
 8002df2:	4013      	ands	r3, r2
 8002df4:	d03e      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002df6:	1c48      	adds	r0, r1, #1
 8002df8:	29fe      	cmp	r1, #254	; 0xfe
 8002dfa:	d0d1      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	0a52      	lsrs	r2, r2, #9
 8002e00:	b2c0      	uxtb	r0, r0
 8002e02:	e7cf      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e04:	2000      	movs	r0, #0
 8002e06:	2200      	movs	r2, #0
 8002e08:	e7cc      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	3217      	adds	r2, #23
 8002e0e:	db2f      	blt.n	8002e70 <__aeabi_d2f+0xf4>
 8002e10:	2680      	movs	r6, #128	; 0x80
 8002e12:	0436      	lsls	r6, r6, #16
 8002e14:	432e      	orrs	r6, r5
 8002e16:	251e      	movs	r5, #30
 8002e18:	1a6d      	subs	r5, r5, r1
 8002e1a:	2d1f      	cmp	r5, #31
 8002e1c:	dd11      	ble.n	8002e42 <__aeabi_d2f+0xc6>
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4252      	negs	r2, r2
 8002e22:	1a52      	subs	r2, r2, r1
 8002e24:	0031      	movs	r1, r6
 8002e26:	40d1      	lsrs	r1, r2
 8002e28:	2d20      	cmp	r5, #32
 8002e2a:	d004      	beq.n	8002e36 <__aeabi_d2f+0xba>
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <__aeabi_d2f+0x104>)
 8002e2e:	4694      	mov	ip, r2
 8002e30:	4463      	add	r3, ip
 8002e32:	409e      	lsls	r6, r3
 8002e34:	4337      	orrs	r7, r6
 8002e36:	003a      	movs	r2, r7
 8002e38:	1e53      	subs	r3, r2, #1
 8002e3a:	419a      	sbcs	r2, r3
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	2100      	movs	r1, #0
 8002e40:	e7ce      	b.n	8002de0 <__aeabi_d2f+0x64>
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <__aeabi_d2f+0x108>)
 8002e44:	0038      	movs	r0, r7
 8002e46:	4694      	mov	ip, r2
 8002e48:	4463      	add	r3, ip
 8002e4a:	4098      	lsls	r0, r3
 8002e4c:	003a      	movs	r2, r7
 8002e4e:	1e41      	subs	r1, r0, #1
 8002e50:	4188      	sbcs	r0, r1
 8002e52:	409e      	lsls	r6, r3
 8002e54:	40ea      	lsrs	r2, r5
 8002e56:	4330      	orrs	r0, r6
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0753      	lsls	r3, r2, #29
 8002e5e:	d1c1      	bne.n	8002de4 <__aeabi_d2f+0x68>
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0013      	movs	r3, r2
 8002e64:	04c9      	lsls	r1, r1, #19
 8002e66:	2001      	movs	r0, #1
 8002e68:	400b      	ands	r3, r1
 8002e6a:	420a      	tst	r2, r1
 8002e6c:	d1c6      	bne.n	8002dfc <__aeabi_d2f+0x80>
 8002e6e:	e7a3      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e70:	2300      	movs	r3, #0
 8002e72:	e7a0      	b.n	8002db6 <__aeabi_d2f+0x3a>
 8002e74:	000b      	movs	r3, r1
 8002e76:	e79f      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e78:	000007fe 	.word	0x000007fe
 8002e7c:	fffffc80 	.word	0xfffffc80
 8002e80:	fffffca2 	.word	0xfffffca2
 8002e84:	fffffc82 	.word	0xfffffc82

08002e88 <__clzsi2>:
 8002e88:	211c      	movs	r1, #28
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0xe>
 8002e92:	0c00      	lsrs	r0, r0, #16
 8002e94:	3910      	subs	r1, #16
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d301      	bcc.n	8002ea0 <__clzsi2+0x18>
 8002e9c:	0a00      	lsrs	r0, r0, #8
 8002e9e:	3908      	subs	r1, #8
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0x22>
 8002ea6:	0900      	lsrs	r0, r0, #4
 8002ea8:	3904      	subs	r1, #4
 8002eaa:	a202      	add	r2, pc, #8	; (adr r2, 8002eb4 <__clzsi2+0x2c>)
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	1840      	adds	r0, r0, r1
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	02020304 	.word	0x02020304
 8002eb8:	01010101 	.word	0x01010101
	...

08002ec4 <__clzdi2>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d103      	bne.n	8002ed2 <__clzdi2+0xe>
 8002eca:	f7ff ffdd 	bl	8002e88 <__clzsi2>
 8002ece:	3020      	adds	r0, #32
 8002ed0:	e002      	b.n	8002ed8 <__clzdi2+0x14>
 8002ed2:	0008      	movs	r0, r1
 8002ed4:	f7ff ffd8 	bl	8002e88 <__clzsi2>
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)

08002edc <AHT20_Master_Transmit>:
 */

#include "AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	1cbb      	adds	r3, r7, #2
 8002ee8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8002eea:	250f      	movs	r5, #15
 8002eec:	197c      	adds	r4, r7, r5
 8002eee:	1cbb      	adds	r3, r7, #2
 8002ef0:	8819      	ldrh	r1, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <AHT20_Master_Transmit+0x38>)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	425b      	negs	r3, r3
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	000b      	movs	r3, r1
 8002efe:	2170      	movs	r1, #112	; 0x70
 8002f00:	f002 fa78 	bl	80053f4 <HAL_I2C_Master_Transmit>
 8002f04:	0003      	movs	r3, r0
 8002f06:	7023      	strb	r3, [r4, #0]

	return status;
 8002f08:	197b      	adds	r3, r7, r5
 8002f0a:	781b      	ldrb	r3, [r3, #0]
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}
 8002f14:	2000029c 	.word	0x2000029c

08002f18 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	000a      	movs	r2, r1
 8002f22:	1cbb      	adds	r3, r7, #2
 8002f24:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 8002f26:	250f      	movs	r5, #15
 8002f28:	197c      	adds	r4, r7, r5
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	8819      	ldrh	r1, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <AHT20_Master_Receive+0x38>)
 8002f32:	2301      	movs	r3, #1
 8002f34:	425b      	negs	r3, r3
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	000b      	movs	r3, r1
 8002f3a:	2171      	movs	r1, #113	; 0x71
 8002f3c:	f002 fb62 	bl	8005604 <HAL_I2C_Master_Receive>
 8002f40:	0003      	movs	r3, r0
 8002f42:	7023      	strb	r3, [r4, #0]

	return status;
 8002f44:	197b      	adds	r3, r7, r5
 8002f46:	781b      	ldrb	r3, [r3, #0]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f50:	2000029c 	.word	0x2000029c

08002f54 <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <AHT20_Init+0x70>)
 8002f5e:	8811      	ldrh	r1, [r2, #0]
 8002f60:	8019      	strh	r1, [r3, #0]
 8002f62:	7892      	ldrb	r2, [r2, #2]
 8002f64:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2103      	movs	r1, #3
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff ffb6 	bl	8002edc <AHT20_Master_Transmit>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d004      	beq.n	8002f7e <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <AHT20_Init+0x74>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f007 fc1e 	bl	800a7b8 <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 8002f7c:	e01d      	b.n	8002fba <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <AHT20_Init+0x78>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f007 fc19 	bl	800a7b8 <puts>
		uint8_t value = 0x00;
 8002f86:	1cfb      	adds	r3, r7, #3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f001 f851 	bl	8004034 <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 8002f92:	1cfb      	adds	r3, r7, #3
 8002f94:	2101      	movs	r1, #1
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ffbe 	bl	8002f18 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <AHT20_Init+0x7c>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f007 fc04 	bl	800a7b8 <puts>
}
 8002fb0:	e003      	b.n	8002fba <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <AHT20_Init+0x80>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f007 fbff 	bl	800a7b8 <puts>
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	0800d56c 	.word	0x0800d56c
 8002fc8:	0800d510 	.word	0x0800d510
 8002fcc:	0800d52c 	.word	0x0800d52c
 8002fd0:	0800d540 	.word	0x0800d540
 8002fd4:	0800d554 	.word	0x0800d554

08002fd8 <AHT20_Read>:

void AHT20_Read(volatile float *Temp, volatile float *Hum)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 8002fe2:	2010      	movs	r0, #16
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	4a35      	ldr	r2, [pc, #212]	; (80030bc <AHT20_Read+0xe4>)
 8002fe8:	8811      	ldrh	r1, [r2, #0]
 8002fea:	8019      	strh	r1, [r3, #0]
 8002fec:	7892      	ldrb	r2, [r2, #2]
 8002fee:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8002ff0:	183b      	adds	r3, r7, r0
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff71 	bl	8002edc <AHT20_Master_Transmit>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d004      	beq.n	8003008 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <AHT20_Read+0xe8>)
 8003000:	0018      	movs	r0, r3
 8003002:	f007 fbd9 	bl	800a7b8 <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 8003006:	e054      	b.n	80030b2 <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8003008:	2050      	movs	r0, #80	; 0x50
 800300a:	f001 f813 	bl	8004034 <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 800300e:	2408      	movs	r4, #8
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2106      	movs	r1, #6
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff ff7f 	bl	8002f18 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 800301a:	193b      	adds	r3, r7, r4
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b25b      	sxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	db46      	blt.n	80030b2 <AHT20_Read+0xda>
			uint32_t data = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8003028:	193b      	adds	r3, r7, r4
 800302a:	78db      	ldrb	r3, [r3, #3]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	b2db      	uxtb	r3, r3
 8003030:	001a      	movs	r2, r3
 8003032:	193b      	adds	r3, r7, r4
 8003034:	789b      	ldrb	r3, [r3, #2]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	18d2      	adds	r2, r2, r3
 800303a:	193b      	adds	r3, r7, r4
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	031b      	lsls	r3, r3, #12
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7fd ffc1 	bl	8000fcc <__aeabi_ui2f>
 800304a:	1c03      	adds	r3, r0, #0
 800304c:	491d      	ldr	r1, [pc, #116]	; (80030c4 <AHT20_Read+0xec>)
 800304e:	1c18      	adds	r0, r3, #0
 8003050:	f7fd fcce 	bl	80009f0 <__aeabi_fmul>
 8003054:	1c03      	adds	r3, r0, #0
 8003056:	2193      	movs	r1, #147	; 0x93
 8003058:	05c9      	lsls	r1, r1, #23
 800305a:	1c18      	adds	r0, r3, #0
 800305c:	f7fd fbae 	bl	80007bc <__aeabi_fdiv>
 8003060:	1c03      	adds	r3, r0, #0
 8003062:	1c1a      	adds	r2, r3, #0
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 8003068:	193b      	adds	r3, r7, r4
 800306a:	78db      	ldrb	r3, [r3, #3]
 800306c:	041a      	lsls	r2, r3, #16
 800306e:	23f0      	movs	r3, #240	; 0xf0
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	401a      	ands	r2, r3
 8003074:	193b      	adds	r3, r7, r4
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	193a      	adds	r2, r7, r4
 800307e:	7952      	ldrb	r2, [r2, #5]
 8003080:	189b      	adds	r3, r3, r2
 8003082:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 8003084:	6978      	ldr	r0, [r7, #20]
 8003086:	f7fd ffa1 	bl	8000fcc <__aeabi_ui2f>
 800308a:	1c03      	adds	r3, r0, #0
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <AHT20_Read+0xf0>)
 800308e:	1c18      	adds	r0, r3, #0
 8003090:	f7fd fcae 	bl	80009f0 <__aeabi_fmul>
 8003094:	1c03      	adds	r3, r0, #0
 8003096:	2193      	movs	r1, #147	; 0x93
 8003098:	05c9      	lsls	r1, r1, #23
 800309a:	1c18      	adds	r0, r3, #0
 800309c:	f7fd fb8e 	bl	80007bc <__aeabi_fdiv>
 80030a0:	1c03      	adds	r3, r0, #0
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <AHT20_Read+0xf4>)
 80030a4:	1c18      	adds	r0, r3, #0
 80030a6:	f7fd fdf1 	bl	8000c8c <__aeabi_fsub>
 80030aa:	1c03      	adds	r3, r0, #0
 80030ac:	1c1a      	adds	r2, r3, #0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b007      	add	sp, #28
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	0800d590 	.word	0x0800d590
 80030c0:	0800d570 	.word	0x0800d570
 80030c4:	42c80000 	.word	0x42c80000
 80030c8:	43480000 	.word	0x43480000
 80030cc:	42480000 	.word	0x42480000

080030d0 <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	2382      	movs	r3, #130	; 0x82
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <NEO6_ReceiveUartChar+0xc0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	d503      	bpl.n	80030f0 <NEO6_ReceiveUartChar+0x20>
 80030e8:	3b01      	subs	r3, #1
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <NEO6_ReceiveUartChar+0xc4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	3301      	adds	r3, #1
 80030f0:	001a      	movs	r2, r3
 80030f2:	200f      	movs	r0, #15
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	2306      	movs	r3, #6
 80030fc:	33ff      	adds	r3, #255	; 0xff
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	183a      	adds	r2, r7, r0
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d038      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b0d      	cmp	r3, #13
 8003110:	d119      	bne.n	8003146 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	2383      	movs	r3, #131	; 0x83
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	3301      	adds	r3, #1
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	2383      	movs	r3, #131	; 0x83
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	1839      	adds	r1, r7, r0
 800312a:	2382      	movs	r3, #130	; 0x82
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	7809      	ldrb	r1, [r1, #0]
 8003130:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003132:	183b      	adds	r3, r7, r0
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	b2d1      	uxtb	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	18d3      	adds	r3, r2, r3
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	711a      	strb	r2, [r3, #4]
 8003144:	e019      	b.n	800317a <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d00f      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	200f      	movs	r0, #15
 800315e:	1839      	adds	r1, r7, r0
 8003160:	2382      	movs	r3, #130	; 0x82
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	7809      	ldrb	r1, [r1, #0]
 8003166:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003168:	183b      	adds	r3, r7, r0
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	b2d1      	uxtb	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	1c0a      	adds	r2, r1, #0
 8003178:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003180:	2201      	movs	r2, #1
 8003182:	0018      	movs	r0, r3
 8003184:	f004 f9d2 	bl	800752c <HAL_UART_Receive_IT>
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b004      	add	sp, #16
 800318e:	bd80      	pop	{r7, pc}
 8003190:	800000ff 	.word	0x800000ff
 8003194:	ffffff00 	.word	0xffffff00
 8003198:	200001f4 	.word	0x200001f4

0800319c <NEO6_Init>:
		NEO6_ParseLine(GpsStateHandler);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	2382      	movs	r3, #130	; 0x82
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	2306      	movs	r3, #6
 80031ba:	33ff      	adds	r3, #255	; 0xff
 80031bc:	2100      	movs	r1, #0
 80031be:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	2383      	movs	r3, #131	; 0x83
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2100      	movs	r1, #0
 80031c8:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	2388      	movs	r3, #136	; 0x88
 80031ce:	33ff      	adds	r3, #255	; 0xff
 80031d0:	2100      	movs	r1, #0
 80031d2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	23c4      	movs	r3, #196	; 0xc4
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2100      	movs	r1, #0
 80031dc:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	238a      	movs	r3, #138	; 0x8a
 80031e2:	33ff      	adds	r3, #255	; 0xff
 80031e4:	2100      	movs	r1, #0
 80031e6:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	23c5      	movs	r3, #197	; 0xc5
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2100      	movs	r1, #0
 80031f0:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	238c      	movs	r3, #140	; 0x8c
 80031f6:	33ff      	adds	r3, #255	; 0xff
 80031f8:	2100      	movs	r1, #0
 80031fa:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	23c6      	movs	r3, #198	; 0xc6
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2100      	movs	r1, #0
 8003204:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	23c8      	movs	r3, #200	; 0xc8
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	18d1      	adds	r1, r2, r3
 800320e:	2200      	movs	r2, #0
 8003210:	2300      	movs	r3, #0
 8003212:	600a      	str	r2, [r1, #0]
 8003214:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	23cc      	movs	r3, #204	; 0xcc
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2130      	movs	r1, #48	; 0x30
 800321e:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	23d0      	movs	r3, #208	; 0xd0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	18d1      	adds	r1, r2, r3
 8003228:	2200      	movs	r2, #0
 800322a:	2300      	movs	r3, #0
 800322c:	600a      	str	r2, [r1, #0]
 800322e:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	23d4      	movs	r3, #212	; 0xd4
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2130      	movs	r1, #48	; 0x30
 8003238:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	23e0      	movs	r3, #224	; 0xe0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	18d1      	adds	r1, r2, r3
 8003242:	2200      	movs	r2, #0
 8003244:	2300      	movs	r3, #0
 8003246:	600a      	str	r2, [r1, #0]
 8003248:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	23dc      	movs	r3, #220	; 0xdc
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	18d1      	adds	r1, r2, r3
 8003252:	2200      	movs	r2, #0
 8003254:	2300      	movs	r3, #0
 8003256:	600a      	str	r2, [r1, #0]
 8003258:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	23e4      	movs	r3, #228	; 0xe4
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2100      	movs	r1, #0
 8003262:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	23ca      	movs	r3, #202	; 0xca
 8003268:	33ff      	adds	r3, #255	; 0xff
 800326a:	2100      	movs	r1, #0
 800326c:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	23e8      	movs	r3, #232	; 0xe8
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	18d1      	adds	r1, r2, r3
 8003276:	2200      	movs	r2, #0
 8003278:	2300      	movs	r3, #0
 800327a:	600a      	str	r2, [r1, #0]
 800327c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	23ec      	movs	r3, #236	; 0xec
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	18d1      	adds	r1, r2, r3
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	600a      	str	r2, [r1, #0]
 800328c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	23f0      	movs	r3, #240	; 0xf0
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	2200      	movs	r2, #0
 8003298:	2300      	movs	r3, #0
 800329a:	600a      	str	r2, [r1, #0]
 800329c:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4904      	ldr	r1, [pc, #16]	; (80032b4 <NEO6_Init+0x118>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f004 f940 	bl	800752c <HAL_UART_Receive_IT>
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200001f4 	.word	0x200001f4

080032b8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032be:	003b      	movs	r3, r7
 80032c0:	0018      	movs	r0, r3
 80032c2:	2308      	movs	r3, #8
 80032c4:	001a      	movs	r2, r3
 80032c6:	2100      	movs	r1, #0
 80032c8:	f007 fb92 	bl	800a9f0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <MX_ADC_Init+0xbc>)
 80032ce:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <MX_ADC_Init+0xc0>)
 80032d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <MX_ADC_Init+0xbc>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80032d8:	4b26      	ldr	r3, [pc, #152]	; (8003374 <MX_ADC_Init+0xbc>)
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <MX_ADC_Init+0xbc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <MX_ADC_Init+0xbc>)
 80032e6:	2207      	movs	r2, #7
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <MX_ADC_Init+0xbc>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <MX_ADC_Init+0xbc>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <MX_ADC_Init+0xbc>)
 80032f8:	2220      	movs	r2, #32
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <MX_ADC_Init+0xbc>)
 8003300:	2221      	movs	r2, #33	; 0x21
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <MX_ADC_Init+0xbc>)
 8003308:	2200      	movs	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <MX_ADC_Init+0xbc>)
 800330e:	22c2      	movs	r2, #194	; 0xc2
 8003310:	32ff      	adds	r2, #255	; 0xff
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <MX_ADC_Init+0xbc>)
 8003316:	222c      	movs	r2, #44	; 0x2c
 8003318:	2101      	movs	r1, #1
 800331a:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <MX_ADC_Init+0xbc>)
 800331e:	2204      	movs	r2, #4
 8003320:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <MX_ADC_Init+0xbc>)
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <MX_ADC_Init+0xbc>)
 800332a:	2200      	movs	r2, #0
 800332c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <MX_ADC_Init+0xbc>)
 8003330:	2200      	movs	r2, #0
 8003332:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <MX_ADC_Init+0xbc>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <MX_ADC_Init+0xbc>)
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fe9d 	bl	800407c <HAL_ADC_Init>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d001      	beq.n	800334a <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8003346:	f000 fae9 	bl	800391c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800334a:	003b      	movs	r3, r7
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003350:	003b      	movs	r3, r7
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0152      	lsls	r2, r2, #5
 8003356:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003358:	003a      	movs	r2, r7
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <MX_ADC_Init+0xbc>)
 800335c:	0011      	movs	r1, r2
 800335e:	0018      	movs	r0, r3
 8003360:	f001 f89a 	bl	8004498 <HAL_ADC_ConfigChannel>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d001      	beq.n	800336c <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8003368:	f000 fad8 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200001f8 	.word	0x200001f8
 8003378:	40012400 	.word	0x40012400

0800337c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	240c      	movs	r4, #12
 8003386:	193b      	adds	r3, r7, r4
 8003388:	0018      	movs	r0, r3
 800338a:	2314      	movs	r3, #20
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f007 fb2e 	bl	800a9f0 <memset>
  if(adcHandle->Instance==ADC1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_ADC_MspInit+0xc8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d14d      	bne.n	800343a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a2:	4b29      	ldr	r3, [pc, #164]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	0089      	lsls	r1, r1, #2
 80033a8:	430a      	orrs	r2, r1
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_ADC_MspInit+0xcc>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	2201      	movs	r2, #1
 80033be:	4013      	ands	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	2203      	movs	r2, #3
 80033ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	193a      	adds	r2, r7, r4
 80033d8:	23a0      	movs	r3, #160	; 0xa0
 80033da:	05db      	lsls	r3, r3, #23
 80033dc:	0011      	movs	r1, r2
 80033de:	0018      	movs	r0, r3
 80033e0:	f001 fdc4 	bl	8004f6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033e6:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <HAL_ADC_MspInit+0xd4>)
 80033e8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80033fc:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_ADC_MspInit+0xd0>)
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <HAL_ADC_MspInit+0xd0>)
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003414:	2220      	movs	r2, #32
 8003416:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_ADC_MspInit+0xd0>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003420:	0018      	movs	r0, r3
 8003422:	f001 fb61 	bl	8004ae8 <HAL_DMA_Init>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d001      	beq.n	800342e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800342a:	f000 fa77 	bl	800391c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a06      	ldr	r2, [pc, #24]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003432:	64da      	str	r2, [r3, #76]	; 0x4c
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_ADC_MspInit+0xd0>)
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b009      	add	sp, #36	; 0x24
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40012400 	.word	0x40012400
 8003448:	40021000 	.word	0x40021000
 800344c:	20000254 	.word	0x20000254
 8003450:	40020008 	.word	0x40020008

08003454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <MX_DMA_Init+0x38>)
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <MX_DMA_Init+0x38>)
 8003460:	2101      	movs	r1, #1
 8003462:	430a      	orrs	r2, r1
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <MX_DMA_Init+0x38>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2101      	movs	r1, #1
 8003476:	2009      	movs	r0, #9
 8003478:	f001 fb04 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800347c:	2009      	movs	r0, #9
 800347e:	f001 fb16 	bl	8004aae <HAL_NVIC_EnableIRQ>

}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b002      	add	sp, #8
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	40021000 	.word	0x40021000

08003490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b08b      	sub	sp, #44	; 0x2c
 8003494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003496:	2414      	movs	r4, #20
 8003498:	193b      	adds	r3, r7, r4
 800349a:	0018      	movs	r0, r3
 800349c:	2314      	movs	r3, #20
 800349e:	001a      	movs	r2, r3
 80034a0:	2100      	movs	r1, #0
 80034a2:	f007 faa5 	bl	800a9f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034ac:	2104      	movs	r1, #4
 80034ae:	430a      	orrs	r2, r1
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	2204      	movs	r2, #4
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	430a      	orrs	r2, r1
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ca:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4b37      	ldr	r3, [pc, #220]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034dc:	2101      	movs	r1, #1
 80034de:	430a      	orrs	r2, r1
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80034e2:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	2201      	movs	r2, #1
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034f4:	2102      	movs	r1, #2
 80034f6:	430a      	orrs	r2, r1
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <MX_GPIO_Init+0x128>)
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	2202      	movs	r2, #2
 8003500:	4013      	ands	r3, r2
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003506:	23a0      	movs	r3, #160	; 0xa0
 8003508:	05db      	lsls	r3, r3, #23
 800350a:	2200      	movs	r2, #0
 800350c:	2120      	movs	r1, #32
 800350e:	0018      	movs	r0, r3
 8003510:	f001 fea2 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF24_CSN_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <MX_GPIO_Init+0x12c>)
 8003516:	2200      	movs	r2, #0
 8003518:	21c0      	movs	r1, #192	; 0xc0
 800351a:	0018      	movs	r0, r3
 800351c:	f001 fe9c 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003520:	193b      	adds	r3, r7, r4
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0192      	lsls	r2, r2, #6
 8003526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003528:	193b      	adds	r3, r7, r4
 800352a:	2284      	movs	r2, #132	; 0x84
 800352c:	0392      	lsls	r2, r2, #14
 800352e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003536:	193b      	adds	r3, r7, r4
 8003538:	4a20      	ldr	r2, [pc, #128]	; (80035bc <MX_GPIO_Init+0x12c>)
 800353a:	0019      	movs	r1, r3
 800353c:	0010      	movs	r0, r2
 800353e:	f001 fd15 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003542:	193b      	adds	r3, r7, r4
 8003544:	2220      	movs	r2, #32
 8003546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	193b      	adds	r3, r7, r4
 800354a:	2201      	movs	r2, #1
 800354c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	193b      	adds	r3, r7, r4
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	193b      	adds	r3, r7, r4
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800355a:	193a      	adds	r2, r7, r4
 800355c:	23a0      	movs	r3, #160	; 0xa0
 800355e:	05db      	lsls	r3, r3, #23
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f001 fd02 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin|NRF24_CE_Pin;
 8003568:	193b      	adds	r3, r7, r4
 800356a:	22c0      	movs	r2, #192	; 0xc0
 800356c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2201      	movs	r2, #1
 8003572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	193b      	adds	r3, r7, r4
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	193b      	adds	r3, r7, r4
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	193b      	adds	r3, r7, r4
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <MX_GPIO_Init+0x12c>)
 8003584:	0019      	movs	r1, r3
 8003586:	0010      	movs	r0, r2
 8003588:	f001 fcf0 	bl	8004f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 800358c:	0021      	movs	r1, r4
 800358e:	187b      	adds	r3, r7, r1
 8003590:	2280      	movs	r2, #128	; 0x80
 8003592:	0052      	lsls	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003596:	187b      	adds	r3, r7, r1
 8003598:	2288      	movs	r2, #136	; 0x88
 800359a:	0352      	lsls	r2, r2, #13
 800359c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <MX_GPIO_Init+0x12c>)
 80035a8:	0019      	movs	r1, r3
 80035aa:	0010      	movs	r0, r2
 80035ac:	f001 fcde 	bl	8004f6c <HAL_GPIO_Init>

}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b00b      	add	sp, #44	; 0x2c
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	50000800 	.word	0x50000800

080035c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <MX_I2C1_Init+0x74>)
 80035c6:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <MX_I2C1_Init+0x78>)
 80035c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <MX_I2C1_Init+0x74>)
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <MX_I2C1_Init+0x7c>)
 80035ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035d0:	4b18      	ldr	r3, [pc, #96]	; (8003634 <MX_I2C1_Init+0x74>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <MX_I2C1_Init+0x74>)
 80035d8:	2201      	movs	r2, #1
 80035da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <MX_I2C1_Init+0x74>)
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035e2:	4b14      	ldr	r3, [pc, #80]	; (8003634 <MX_I2C1_Init+0x74>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <MX_I2C1_Init+0x74>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <MX_I2C1_Init+0x74>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <MX_I2C1_Init+0x74>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <MX_I2C1_Init+0x74>)
 80035fc:	0018      	movs	r0, r3
 80035fe:	f001 fe63 	bl	80052c8 <HAL_I2C_Init>
 8003602:	1e03      	subs	r3, r0, #0
 8003604:	d001      	beq.n	800360a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003606:	f000 f989 	bl	800391c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <MX_I2C1_Init+0x74>)
 800360c:	2100      	movs	r1, #0
 800360e:	0018      	movs	r0, r3
 8003610:	f002 fbb6 	bl	8005d80 <HAL_I2CEx_ConfigAnalogFilter>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003618:	f000 f980 	bl	800391c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <MX_I2C1_Init+0x74>)
 800361e:	2100      	movs	r1, #0
 8003620:	0018      	movs	r0, r3
 8003622:	f002 fbf9 	bl	8005e18 <HAL_I2CEx_ConfigDigitalFilter>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800362a:	f000 f977 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	2000029c 	.word	0x2000029c
 8003638:	40005400 	.word	0x40005400
 800363c:	00707cbb 	.word	0x00707cbb

08003640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	240c      	movs	r4, #12
 800364a:	193b      	adds	r3, r7, r4
 800364c:	0018      	movs	r0, r3
 800364e:	2314      	movs	r3, #20
 8003650:	001a      	movs	r2, r3
 8003652:	2100      	movs	r1, #0
 8003654:	f007 f9cc 	bl	800a9f0 <memset>
  if(i2cHandle->Instance==I2C1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_I2C_MspInit+0x7c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d128      	bne.n	80036b4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_I2C_MspInit+0x80>)
 8003664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <HAL_I2C_MspInit+0x80>)
 8003668:	2102      	movs	r1, #2
 800366a:	430a      	orrs	r2, r1
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_I2C_MspInit+0x80>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	2202      	movs	r2, #2
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800367a:	0021      	movs	r1, r4
 800367c:	187b      	adds	r3, r7, r1
 800367e:	22c0      	movs	r2, #192	; 0xc0
 8003680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003682:	187b      	adds	r3, r7, r1
 8003684:	2212      	movs	r2, #18
 8003686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2203      	movs	r2, #3
 8003692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003694:	187b      	adds	r3, r7, r1
 8003696:	2201      	movs	r2, #1
 8003698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369a:	187b      	adds	r3, r7, r1
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_I2C_MspInit+0x84>)
 800369e:	0019      	movs	r1, r3
 80036a0:	0010      	movs	r0, r2
 80036a2:	f001 fc63 	bl	8004f6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_I2C_MspInit+0x80>)
 80036a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_I2C_MspInit+0x80>)
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	0389      	lsls	r1, r1, #14
 80036b0:	430a      	orrs	r2, r1
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b009      	add	sp, #36	; 0x24
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	40005400 	.word	0x40005400
 80036c0:	40021000 	.word	0x40021000
 80036c4:	50000400 	.word	0x50000400

080036c8 <__io_putchar>:
volatile float Temp = 0.0f;
volatile float Hum = 0.0f;
volatile uint32_t HeartBeatValue;

int __io_putchar(int ch) // to pc
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b0a      	cmp	r3, #10
 80036d4:	d102      	bne.n	80036dc <__io_putchar+0x14>
    __io_putchar('\r');
 80036d6:	200d      	movs	r0, #13
 80036d8:	f7ff fff6 	bl	80036c8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80036dc:	2301      	movs	r3, #1
 80036de:	425b      	negs	r3, r3
 80036e0:	1d39      	adds	r1, r7, #4
 80036e2:	4804      	ldr	r0, [pc, #16]	; (80036f4 <__io_putchar+0x2c>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	f003 fe81 	bl	80073ec <HAL_UART_Transmit>

  return 1;
 80036ea:	2301      	movs	r3, #1
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000608 	.word	0x20000608

080036f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_UART_RxCpltCallback+0x24>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d103      	bne.n	8003712 <HAL_UART_RxCpltCallback+0x1a>
  {
    NEO6_ReceiveUartChar(&GpsState);
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_UART_RxCpltCallback+0x24>)
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff fcdf 	bl	80030d0 <NEO6_ReceiveUartChar>
  }
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	200002f0 	.word	0x200002f0

08003720 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af02      	add	r7, sp, #8
 8003726:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800372c:	429a      	cmp	r2, r3
 800372e:	d121      	bne.n	8003774 <HAL_TIM_PeriodElapsedCallback+0x54>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003730:	23a0      	movs	r3, #160	; 0xa0
 8003732:	05db      	lsls	r3, r3, #23
 8003734:	2120      	movs	r1, #32
 8003736:	0018      	movs	r0, r3
 8003738:	f001 fdab 	bl	8005292 <HAL_GPIO_TogglePin>
    AHT20_Read(&Temp, &Hum); // reads AHT20 measurements every second
 800373c:	4a10      	ldr	r2, [pc, #64]	; (8003780 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003740:	0011      	movs	r1, r2
 8003742:	0018      	movs	r0, r3
 8003744:	f7ff fc48 	bl	8002fd8 <AHT20_Read>
    printf("Temperature = %.1fC\n Hum = %.1f\n", Temp, Hum);
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	1c18      	adds	r0, r3, #0
 800374e:	f7ff facd 	bl	8002cec <__aeabi_f2d>
 8003752:	0004      	movs	r4, r0
 8003754:	000d      	movs	r5, r1
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1c18      	adds	r0, r3, #0
 800375c:	f7ff fac6 	bl	8002cec <__aeabi_f2d>
 8003760:	0002      	movs	r2, r0
 8003762:	000b      	movs	r3, r1
 8003764:	4908      	ldr	r1, [pc, #32]	; (8003788 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003766:	9200      	str	r2, [sp, #0]
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	0022      	movs	r2, r4
 800376c:	002b      	movs	r3, r5
 800376e:	0008      	movs	r0, r1
 8003770:	f006 ffbc 	bl	800a6ec <iprintf>
  }
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bdb0      	pop	{r4, r5, r7, pc}
 800377c:	20000540 	.word	0x20000540
 8003780:	200004dc 	.word	0x200004dc
 8003784:	200004d8 	.word	0x200004d8
 8003788:	0800d594 	.word	0x0800d594

0800378c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003792:	f000 fbdf 	bl	8003f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003796:	f000 f843 	bl	8003820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800379a:	f7ff fe79 	bl	8003490 <MX_GPIO_Init>
  MX_DMA_Init();
 800379e:	f7ff fe59 	bl	8003454 <MX_DMA_Init>
  MX_I2C1_Init();
 80037a2:	f7ff ff0d 	bl	80035c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80037a6:	f000 facd 	bl	8003d44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80037aa:	f000 fafb 	bl	8003da4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80037ae:	f000 f8bb 	bl	8003928 <MX_SPI1_Init>
  MX_TIM6_Init();
 80037b2:	f000 fa69 	bl	8003c88 <MX_TIM6_Init>
  MX_ADC_Init();
 80037b6:	f7ff fd7f 	bl	80032b8 <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  AHT20_Init();
 80037ba:	f7ff fbcb 	bl	8002f54 <AHT20_Init>
  NEO6_Init(&GpsState, &huart1);
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <main+0x7c>)
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <main+0x80>)
 80037c2:	0011      	movs	r1, r2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7ff fce9 	bl	800319c <NEO6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80037ca:	4b11      	ldr	r3, [pc, #68]	; (8003810 <main+0x84>)
 80037cc:	0018      	movs	r0, r3
 80037ce:	f003 fbb9 	bl	8006f44 <HAL_TIM_Base_Start_IT>

  uint32_t Timer = HAL_GetTick();
 80037d2:	f000 fc25 	bl	8004020 <HAL_GetTick>
 80037d6:	0003      	movs	r3, r0
 80037d8:	607b      	str	r3, [r7, #4]
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <main+0x88>)
 80037dc:	2100      	movs	r1, #0
 80037de:	0018      	movs	r0, r3
 80037e0:	f001 f806 	bl	80047f0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&HeartBeatValue, 2);
 80037e4:	490c      	ldr	r1, [pc, #48]	; (8003818 <main+0x8c>)
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <main+0x88>)
 80037e8:	2202      	movs	r2, #2
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 fdba 	bl	8004364 <HAL_ADC_Start_DMA>

  while (1)
  {
	  printf("Heart Beat =  %d\n", HeartBeatValue);
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <main+0x8c>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <main+0x90>)
 80037f6:	0011      	movs	r1, r2
 80037f8:	0018      	movs	r0, r3
 80037fa:	f006 ff77 	bl	800a6ec <iprintf>
	  HAL_Delay(100);
 80037fe:	2064      	movs	r0, #100	; 0x64
 8003800:	f000 fc18 	bl	8004034 <HAL_Delay>
	  printf("Heart Beat =  %d\n", HeartBeatValue);
 8003804:	e7f4      	b.n	80037f0 <main+0x64>
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	20000580 	.word	0x20000580
 800380c:	200002f0 	.word	0x200002f0
 8003810:	20000540 	.word	0x20000540
 8003814:	200001f8 	.word	0x200001f8
 8003818:	200004e0 	.word	0x200004e0
 800381c:	0800d5b8 	.word	0x0800d5b8

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b09d      	sub	sp, #116	; 0x74
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	2438      	movs	r4, #56	; 0x38
 8003828:	193b      	adds	r3, r7, r4
 800382a:	0018      	movs	r0, r3
 800382c:	2338      	movs	r3, #56	; 0x38
 800382e:	001a      	movs	r2, r3
 8003830:	2100      	movs	r1, #0
 8003832:	f007 f8dd 	bl	800a9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003836:	2324      	movs	r3, #36	; 0x24
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	0018      	movs	r0, r3
 800383c:	2314      	movs	r3, #20
 800383e:	001a      	movs	r2, r3
 8003840:	2100      	movs	r1, #0
 8003842:	f007 f8d5 	bl	800a9f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003846:	003b      	movs	r3, r7
 8003848:	0018      	movs	r0, r3
 800384a:	2324      	movs	r3, #36	; 0x24
 800384c:	001a      	movs	r2, r3
 800384e:	2100      	movs	r1, #0
 8003850:	f007 f8ce 	bl	800a9f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <SystemClock_Config+0xf4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <SystemClock_Config+0xf8>)
 800385a:	401a      	ands	r2, r3
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <SystemClock_Config+0xf4>)
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	0109      	lsls	r1, r1, #4
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003866:	193b      	adds	r3, r7, r4
 8003868:	2203      	movs	r2, #3
 800386a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800386c:	193b      	adds	r3, r7, r4
 800386e:	22a0      	movs	r2, #160	; 0xa0
 8003870:	02d2      	lsls	r2, r2, #11
 8003872:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003874:	0021      	movs	r1, r4
 8003876:	187b      	adds	r3, r7, r1
 8003878:	2201      	movs	r2, #1
 800387a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800387c:	187b      	adds	r3, r7, r1
 800387e:	2210      	movs	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003882:	187b      	adds	r3, r7, r1
 8003884:	2202      	movs	r2, #2
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003888:	187b      	adds	r3, r7, r1
 800388a:	2280      	movs	r2, #128	; 0x80
 800388c:	0252      	lsls	r2, r2, #9
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8003890:	187b      	adds	r3, r7, r1
 8003892:	22c0      	movs	r2, #192	; 0xc0
 8003894:	0312      	lsls	r2, r2, #12
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003898:	187b      	adds	r3, r7, r1
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	03d2      	lsls	r2, r2, #15
 800389e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	0018      	movs	r0, r3
 80038a4:	f002 fb04 	bl	8005eb0 <HAL_RCC_OscConfig>
 80038a8:	1e03      	subs	r3, r0, #0
 80038aa:	d001      	beq.n	80038b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80038ac:	f000 f836 	bl	800391c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038b0:	2124      	movs	r1, #36	; 0x24
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	220f      	movs	r2, #15
 80038b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2203      	movs	r2, #3
 80038bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	2101      	movs	r1, #1
 80038d4:	0018      	movs	r0, r3
 80038d6:	f002 feaf 	bl	8006638 <HAL_RCC_ClockConfig>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038de:	f000 f81d 	bl	800391c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80038e2:	003b      	movs	r3, r7
 80038e4:	220b      	movs	r2, #11
 80038e6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038e8:	003b      	movs	r3, r7
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038ee:	003b      	movs	r3, r7
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80038f4:	003b      	movs	r3, r7
 80038f6:	2200      	movs	r2, #0
 80038f8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038fa:	003b      	movs	r3, r7
 80038fc:	0018      	movs	r0, r3
 80038fe:	f003 f8bf 	bl	8006a80 <HAL_RCCEx_PeriphCLKConfig>
 8003902:	1e03      	subs	r3, r0, #0
 8003904:	d001      	beq.n	800390a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003906:	f000 f809 	bl	800391c <Error_Handler>
  }
}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b01d      	add	sp, #116	; 0x74
 8003910:	bd90      	pop	{r4, r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	40007000 	.word	0x40007000
 8003918:	ffffe7ff 	.word	0xffffe7ff

0800391c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003920:	b672      	cpsid	i
}
 8003922:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003924:	e7fe      	b.n	8003924 <Error_Handler+0x8>
	...

08003928 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <MX_SPI1_Init+0x64>)
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <MX_SPI1_Init+0x68>)
 8003930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <MX_SPI1_Init+0x64>)
 8003934:	2282      	movs	r2, #130	; 0x82
 8003936:	0052      	lsls	r2, r2, #1
 8003938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <MX_SPI1_Init+0x64>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <MX_SPI1_Init+0x64>)
 8003942:	2200      	movs	r2, #0
 8003944:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <MX_SPI1_Init+0x64>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <MX_SPI1_Init+0x64>)
 800394e:	2200      	movs	r2, #0
 8003950:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <MX_SPI1_Init+0x64>)
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <MX_SPI1_Init+0x64>)
 800395a:	2218      	movs	r2, #24
 800395c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <MX_SPI1_Init+0x64>)
 8003960:	2200      	movs	r2, #0
 8003962:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <MX_SPI1_Init+0x64>)
 8003966:	2200      	movs	r2, #0
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <MX_SPI1_Init+0x64>)
 800396c:	2200      	movs	r2, #0
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <MX_SPI1_Init+0x64>)
 8003972:	2207      	movs	r2, #7
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <MX_SPI1_Init+0x64>)
 8003978:	0018      	movs	r0, r3
 800397a:	f003 fa0f 	bl	8006d9c <HAL_SPI_Init>
 800397e:	1e03      	subs	r3, r0, #0
 8003980:	d001      	beq.n	8003986 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8003982:	f7ff ffcb 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	200004e4 	.word	0x200004e4
 8003990:	40013000 	.word	0x40013000

08003994 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b08b      	sub	sp, #44	; 0x2c
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	2414      	movs	r4, #20
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	0018      	movs	r0, r3
 80039a2:	2314      	movs	r3, #20
 80039a4:	001a      	movs	r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	f007 f822 	bl	800a9f0 <memset>
  if(spiHandle->Instance==SPI1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_SPI_MspInit+0xc0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d14a      	bne.n	8003a4c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ba:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	0149      	lsls	r1, r1, #5
 80039c0:	430a      	orrs	r2, r1
 80039c2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c4:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039ca:	2101      	movs	r1, #1
 80039cc:	430a      	orrs	r2, r1
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80039d0:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	2201      	movs	r2, #1
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039e2:	2102      	movs	r1, #2
 80039e4:	430a      	orrs	r2, r1
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <HAL_SPI_MspInit+0xc4>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	2202      	movs	r2, #2
 80039ee:	4013      	ands	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80039f4:	193b      	adds	r3, r7, r4
 80039f6:	22d0      	movs	r2, #208	; 0xd0
 80039f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	193b      	adds	r3, r7, r4
 80039fc:	2202      	movs	r2, #2
 80039fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	193b      	adds	r3, r7, r4
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	2203      	movs	r2, #3
 8003a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a12:	193a      	adds	r2, r7, r4
 8003a14:	23a0      	movs	r3, #160	; 0xa0
 8003a16:	05db      	lsls	r3, r3, #23
 8003a18:	0011      	movs	r1, r2
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f001 faa6 	bl	8004f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a20:	0021      	movs	r1, r4
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	2208      	movs	r2, #8
 8003a26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	187b      	adds	r3, r7, r1
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a34:	187b      	adds	r3, r7, r1
 8003a36:	2203      	movs	r2, #3
 8003a38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <HAL_SPI_MspInit+0xc8>)
 8003a44:	0019      	movs	r1, r3
 8003a46:	0010      	movs	r0, r2
 8003a48:	f001 fa90 	bl	8004f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b00b      	add	sp, #44	; 0x2c
 8003a52:	bd90      	pop	{r4, r7, pc}
 8003a54:	40013000 	.word	0x40013000
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	50000400 	.word	0x50000400

08003a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_MspInit+0x24>)
 8003a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_MspInit+0x24>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <HAL_MspInit+0x24>)
 8003a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_MspInit+0x24>)
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	0549      	lsls	r1, r1, #21
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000

08003a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a8c:	e7fe      	b.n	8003a8c <NMI_Handler+0x4>

08003a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <HardFault_Handler+0x4>

08003a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aac:	f000 faa6 	bl	8003ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <DMA1_Channel1_IRQHandler+0x14>)
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f001 f977 	bl	8004db2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	20000254 	.word	0x20000254

08003ad0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <TIM6_DAC_IRQHandler+0x14>)
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f003 fa80 	bl	8006fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	20000540 	.word	0x20000540

08003ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <USART1_IRQHandler+0x14>)
 8003aee:	0018      	movs	r0, r3
 8003af0:	f003 fd7a 	bl	80075e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	20000580 	.word	0x20000580

08003b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  return 1;
 8003b04:	2301      	movs	r3, #1
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_kill>:

int _kill(int pid, int sig)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b16:	f006 ffd7 	bl	800aac8 <__errno>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	2216      	movs	r2, #22
 8003b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b20:	2301      	movs	r3, #1
 8003b22:	425b      	negs	r3, r3
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_exit>:

void _exit (int status)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b34:	2301      	movs	r3, #1
 8003b36:	425a      	negs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff ffe5 	bl	8003b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b42:	e7fe      	b.n	8003b42 <_exit+0x16>

08003b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e00a      	b.n	8003b6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b56:	e000      	b.n	8003b5a <_read+0x16>
 8003b58:	bf00      	nop
 8003b5a:	0001      	movs	r1, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	60ba      	str	r2, [r7, #8]
 8003b62:	b2ca      	uxtb	r2, r1
 8003b64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	dbf0      	blt.n	8003b56 <_read+0x12>
  }

  return len;
 8003b74:	687b      	ldr	r3, [r7, #4]
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b006      	add	sp, #24
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e009      	b.n	8003ba4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	60ba      	str	r2, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff fd95 	bl	80036c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	dbf1      	blt.n	8003b90 <_write+0x12>
  }
  return len;
 8003bac:	687b      	ldr	r3, [r7, #4]
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b006      	add	sp, #24
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_close>:

int _close(int file)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	425b      	negs	r3, r3
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	0192      	lsls	r2, r2, #6
 8003bda:	605a      	str	r2, [r3, #4]
  return 0;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_isatty>:

int _isatty(int file)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b004      	add	sp, #16
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <_sbrk+0x5c>)
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <_sbrk+0x60>)
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <_sbrk+0x64>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <_sbrk+0x64>)
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <_sbrk+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <_sbrk+0x64>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d207      	bcs.n	8003c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c40:	f006 ff42 	bl	800aac8 <__errno>
 8003c44:	0003      	movs	r3, r0
 8003c46:	220c      	movs	r2, #12
 8003c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	425b      	negs	r3, r3
 8003c4e:	e009      	b.n	8003c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <_sbrk+0x64>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <_sbrk+0x64>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	18d2      	adds	r2, r2, r3
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <_sbrk+0x64>)
 8003c60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c62:	68fb      	ldr	r3, [r7, #12]
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20002000 	.word	0x20002000
 8003c70:	00000400 	.word	0x00000400
 8003c74:	2000053c 	.word	0x2000053c
 8003c78:	200007e0 	.word	0x200007e0

08003c7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c8e:	003b      	movs	r3, r7
 8003c90:	0018      	movs	r0, r3
 8003c92:	2308      	movs	r3, #8
 8003c94:	001a      	movs	r2, r3
 8003c96:	2100      	movs	r1, #0
 8003c98:	f006 feaa 	bl	800a9f0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <MX_TIM6_Init+0x6c>)
 8003c9e:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <MX_TIM6_Init+0x70>)
 8003ca0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_TIM6_Init+0x6c>)
 8003ca4:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <MX_TIM6_Init+0x74>)
 8003ca6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <MX_TIM6_Init+0x6c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <MX_TIM6_Init+0x6c>)
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <MX_TIM6_Init+0x78>)
 8003cb2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_TIM6_Init+0x6c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <MX_TIM6_Init+0x6c>)
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f003 f901 	bl	8006ec4 <HAL_TIM_Base_Init>
 8003cc2:	1e03      	subs	r3, r0, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003cc6:	f7ff fe29 	bl	800391c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cca:	003b      	movs	r3, r7
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd0:	003b      	movs	r3, r7
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003cd6:	003a      	movs	r2, r7
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <MX_TIM6_Init+0x6c>)
 8003cda:	0011      	movs	r1, r2
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f003 fad9 	bl	8007294 <HAL_TIMEx_MasterConfigSynchronization>
 8003ce2:	1e03      	subs	r3, r0, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003ce6:	f7ff fe19 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b002      	add	sp, #8
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	20000540 	.word	0x20000540
 8003cf8:	40001000 	.word	0x40001000
 8003cfc:	00000c7f 	.word	0x00000c7f
 8003d00:	0000270f 	.word	0x0000270f

08003d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <HAL_TIM_Base_MspInit+0x38>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10d      	bne.n	8003d32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_TIM_Base_MspInit+0x3c>)
 8003d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_TIM_Base_MspInit+0x3c>)
 8003d1c:	2110      	movs	r1, #16
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2103      	movs	r1, #3
 8003d26:	2011      	movs	r0, #17
 8003d28:	f000 feac 	bl	8004a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d2c:	2011      	movs	r0, #17
 8003d2e:	f000 febe 	bl	8004aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b002      	add	sp, #8
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	40001000 	.word	0x40001000
 8003d40:	40021000 	.word	0x40021000

08003d44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <MX_USART1_UART_Init+0x5c>)
 8003d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d50:	2296      	movs	r2, #150	; 0x96
 8003d52:	0192      	lsls	r2, r2, #6
 8003d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d6a:	220c      	movs	r2, #12
 8003d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <MX_USART1_UART_Init+0x58>)
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f003 fadb 	bl	8007344 <HAL_UART_Init>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003d92:	f7ff fdc3 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000580 	.word	0x20000580
 8003da0:	40013800 	.word	0x40013800

08003da4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <MX_USART2_UART_Init+0x5c>)
 8003dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003db0:	2296      	movs	r2, #150	; 0x96
 8003db2:	0192      	lsls	r2, r2, #6
 8003db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003dca:	220c      	movs	r2, #12
 8003dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <MX_USART2_UART_Init+0x58>)
 8003de8:	0018      	movs	r0, r3
 8003dea:	f003 faab 	bl	8007344 <HAL_UART_Init>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d001      	beq.n	8003df6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003df2:	f7ff fd93 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000608 	.word	0x20000608
 8003e00:	40004400 	.word	0x40004400

08003e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b08b      	sub	sp, #44	; 0x2c
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	2414      	movs	r4, #20
 8003e0e:	193b      	adds	r3, r7, r4
 8003e10:	0018      	movs	r0, r3
 8003e12:	2314      	movs	r3, #20
 8003e14:	001a      	movs	r2, r3
 8003e16:	2100      	movs	r1, #0
 8003e18:	f006 fdea 	bl	800a9f0 <memset>
  if(uartHandle->Instance==USART1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a34      	ldr	r2, [pc, #208]	; (8003ef4 <HAL_UART_MspInit+0xf0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d133      	bne.n	8003e8e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2a:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	01c9      	lsls	r1, r1, #7
 8003e30:	430a      	orrs	r2, r1
 8003e32:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e34:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	2201      	movs	r2, #1
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e4c:	193b      	adds	r3, r7, r4
 8003e4e:	22c0      	movs	r2, #192	; 0xc0
 8003e50:	00d2      	lsls	r2, r2, #3
 8003e52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	0021      	movs	r1, r4
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	2202      	movs	r2, #2
 8003e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2203      	movs	r2, #3
 8003e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6e:	187a      	adds	r2, r7, r1
 8003e70:	23a0      	movs	r3, #160	; 0xa0
 8003e72:	05db      	lsls	r3, r3, #23
 8003e74:	0011      	movs	r1, r2
 8003e76:	0018      	movs	r0, r3
 8003e78:	f001 f878 	bl	8004f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2100      	movs	r1, #0
 8003e80:	201b      	movs	r0, #27
 8003e82:	f000 fdff 	bl	8004a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e86:	201b      	movs	r0, #27
 8003e88:	f000 fe11 	bl	8004aae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e8c:	e02e      	b.n	8003eec <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <HAL_UART_MspInit+0xf8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d129      	bne.n	8003eec <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	0289      	lsls	r1, r1, #10
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003eac:	2101      	movs	r1, #1
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_UART_MspInit+0xf4>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ebe:	2114      	movs	r1, #20
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	220c      	movs	r2, #12
 8003ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	2202      	movs	r2, #2
 8003eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2204      	movs	r2, #4
 8003edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ede:	187a      	adds	r2, r7, r1
 8003ee0:	23a0      	movs	r3, #160	; 0xa0
 8003ee2:	05db      	lsls	r3, r3, #23
 8003ee4:	0011      	movs	r1, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f001 f840 	bl	8004f6c <HAL_GPIO_Init>
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b00b      	add	sp, #44	; 0x2c
 8003ef2:	bd90      	pop	{r4, r7, pc}
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40004400 	.word	0x40004400

08003f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003f00:	480d      	ldr	r0, [pc, #52]	; (8003f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f04:	f7ff feba 	bl	8003c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f08:	480c      	ldr	r0, [pc, #48]	; (8003f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003f0a:	490d      	ldr	r1, [pc, #52]	; (8003f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <LoopForever+0xe>)
  movs r3, #0
 8003f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f10:	e002      	b.n	8003f18 <LoopCopyDataInit>

08003f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f16:	3304      	adds	r3, #4

08003f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f1c:	d3f9      	bcc.n	8003f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f20:	4c0a      	ldr	r4, [pc, #40]	; (8003f4c <LoopForever+0x16>)
  movs r3, #0
 8003f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f24:	e001      	b.n	8003f2a <LoopFillZerobss>

08003f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f28:	3204      	adds	r2, #4

08003f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f2c:	d3fb      	bcc.n	8003f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f2e:	f006 fdd1 	bl	800aad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f32:	f7ff fc2b 	bl	800378c <main>

08003f36 <LoopForever>:

LoopForever:
    b LoopForever
 8003f36:	e7fe      	b.n	8003f36 <LoopForever>
  ldr   r0, =_estack
 8003f38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003f44:	0800db34 	.word	0x0800db34
  ldr r2, =_sbss
 8003f48:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003f4c:	200007e0 	.word	0x200007e0

08003f50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f50:	e7fe      	b.n	8003f50 <ADC1_COMP_IRQHandler>
	...

08003f54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_Init+0x3c>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_Init+0x3c>)
 8003f66:	2140      	movs	r1, #64	; 0x40
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f000 f811 	bl	8003f94 <HAL_InitTick>
 8003f72:	1e03      	subs	r3, r0, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003f76:	1dfb      	adds	r3, r7, #7
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e001      	b.n	8003f82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f7e:	f7ff fd6f 	bl	8003a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b002      	add	sp, #8
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40022000 	.word	0x40022000

08003f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <HAL_InitTick+0x5c>)
 8003f9e:	681c      	ldr	r4, [r3, #0]
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_InitTick+0x60>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	23fa      	movs	r3, #250	; 0xfa
 8003fa8:	0098      	lsls	r0, r3, #2
 8003faa:	f7fc f8c9 	bl	8000140 <__udivsi3>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f7fc f8c4 	bl	8000140 <__udivsi3>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f000 fd87 	bl	8004ace <HAL_SYSTICK_Config>
 8003fc0:	1e03      	subs	r3, r0, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e00f      	b.n	8003fe8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d80b      	bhi.n	8003fe6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	425b      	negs	r3, r3
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 fd54 	bl	8004a84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_InitTick+0x64>)
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b003      	add	sp, #12
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	20000000 	.word	0x20000000
 8003ff4:	20000008 	.word	0x20000008
 8003ff8:	20000004 	.word	0x20000004

08003ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_IncTick+0x1c>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	001a      	movs	r2, r3
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_IncTick+0x20>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	18d2      	adds	r2, r2, r3
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_IncTick+0x20>)
 800400e:	601a      	str	r2, [r3, #0]
}
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	20000008 	.word	0x20000008
 800401c:	20000690 	.word	0x20000690

08004020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  return uwTick;
 8004024:	4b02      	ldr	r3, [pc, #8]	; (8004030 <HAL_GetTick+0x10>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	20000690 	.word	0x20000690

08004034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff fff0 	bl	8004020 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3301      	adds	r3, #1
 800404c:	d005      	beq.n	800405a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_Delay+0x44>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	001a      	movs	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	189b      	adds	r3, r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	f7ff ffe0 	bl	8004020 <HAL_GetTick>
 8004060:	0002      	movs	r2, r0
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	d8f7      	bhi.n	800405c <HAL_Delay+0x28>
  {
  }
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	20000008 	.word	0x20000008

0800407c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e159      	b.n	8004342 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2250      	movs	r2, #80	; 0x50
 80040a0:	2100      	movs	r1, #0
 80040a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f7ff f968 	bl	800337c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	2210      	movs	r2, #16
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d005      	beq.n	80040c4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2204      	movs	r2, #4
 80040c0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80040c2:	d00b      	beq.n	80040dc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	2210      	movs	r2, #16
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2250      	movs	r2, #80	; 0x50
 80040d4:	2100      	movs	r1, #0
 80040d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e132      	b.n	8004342 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	4a9a      	ldr	r2, [pc, #616]	; (800434c <HAL_ADC_Init+0x2d0>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	2202      	movs	r2, #2
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2203      	movs	r2, #3
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d108      	bne.n	800410c <HAL_ADC_Init+0x90>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2201      	movs	r2, #1
 8004102:	4013      	ands	r3, r2
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_ADC_Init+0x90>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_ADC_Init+0x92>
 800410c:	2300      	movs	r3, #0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d149      	bne.n	80041a6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	23c0      	movs	r3, #192	; 0xc0
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	429a      	cmp	r2, r3
 800411c:	d00b      	beq.n	8004136 <HAL_ADC_Init+0xba>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	05db      	lsls	r3, r3, #23
 8004126:	429a      	cmp	r2, r3
 8004128:	d005      	beq.n	8004136 <HAL_ADC_Init+0xba>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	429a      	cmp	r2, r3
 8004134:	d111      	bne.n	800415a <HAL_ADC_Init+0xde>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0092      	lsls	r2, r2, #2
 8004142:	0892      	lsrs	r2, r2, #2
 8004144:	611a      	str	r2, [r3, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6919      	ldr	r1, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	611a      	str	r2, [r3, #16]
 8004158:	e014      	b.n	8004184 <HAL_ADC_Init+0x108>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	0892      	lsrs	r2, r2, #2
 8004168:	611a      	str	r2, [r3, #16]
 800416a:	4b79      	ldr	r3, [pc, #484]	; (8004350 <HAL_ADC_Init+0x2d4>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b78      	ldr	r3, [pc, #480]	; (8004350 <HAL_ADC_Init+0x2d4>)
 8004170:	4978      	ldr	r1, [pc, #480]	; (8004354 <HAL_ADC_Init+0x2d8>)
 8004172:	400a      	ands	r2, r1
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	4b76      	ldr	r3, [pc, #472]	; (8004350 <HAL_ADC_Init+0x2d4>)
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	4b74      	ldr	r3, [pc, #464]	; (8004350 <HAL_ADC_Init+0x2d4>)
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2118      	movs	r1, #24
 8004190:	438a      	bics	r2, r1
 8004192:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68d9      	ldr	r1, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80041a6:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <HAL_ADC_Init+0x2d4>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b69      	ldr	r3, [pc, #420]	; (8004350 <HAL_ADC_Init+0x2d4>)
 80041ac:	496a      	ldr	r1, [pc, #424]	; (8004358 <HAL_ADC_Init+0x2dc>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80041b2:	4b67      	ldr	r3, [pc, #412]	; (8004350 <HAL_ADC_Init+0x2d4>)
 80041b4:	6819      	ldr	r1, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	065a      	lsls	r2, r3, #25
 80041bc:	4b64      	ldr	r3, [pc, #400]	; (8004350 <HAL_ADC_Init+0x2d4>)
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	055b      	lsls	r3, r3, #21
 80041cc:	4013      	ands	r3, r2
 80041ce:	d108      	bne.n	80041e2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	0549      	lsls	r1, r1, #21
 80041de:	430a      	orrs	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	495b      	ldr	r1, [pc, #364]	; (800435c <HAL_ADC_Init+0x2e0>)
 80041ee:	400a      	ands	r2, r1
 80041f0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68d9      	ldr	r1, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d101      	bne.n	8004208 <HAL_ADC_Init+0x18c>
 8004204:	2304      	movs	r3, #4
 8004206:	e000      	b.n	800420a <HAL_ADC_Init+0x18e>
 8004208:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800420a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2020      	movs	r0, #32
 8004210:	5c1b      	ldrb	r3, [r3, r0]
 8004212:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004214:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	202c      	movs	r0, #44	; 0x2c
 800421a:	5c1b      	ldrb	r3, [r3, r0]
 800421c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800421e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004224:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800422c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004234:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004242:	23c2      	movs	r3, #194	; 0xc2
 8004244:	33ff      	adds	r3, #255	; 0xff
 8004246:	429a      	cmp	r2, r3
 8004248:	d00b      	beq.n	8004262 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68d9      	ldr	r1, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2221      	movs	r2, #33	; 0x21
 8004266:	5c9b      	ldrb	r3, [r3, r2]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d11a      	bne.n	80042a2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	5c9b      	ldrb	r3, [r3, r2]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	0249      	lsls	r1, r1, #9
 8004284:	430a      	orrs	r2, r1
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	e00b      	b.n	80042a2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	2220      	movs	r2, #32
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	2201      	movs	r2, #1
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d11f      	bne.n	80042ea <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	492a      	ldr	r1, [pc, #168]	; (8004360 <HAL_ADC_Init+0x2e4>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6919      	ldr	r1, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80042c8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80042ce:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2101      	movs	r1, #1
 80042e4:	430a      	orrs	r2, r1
 80042e6:	611a      	str	r2, [r3, #16]
 80042e8:	e00e      	b.n	8004308 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2101      	movs	r1, #1
 8004304:	438a      	bics	r2, r1
 8004306:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2107      	movs	r1, #7
 8004314:	438a      	bics	r2, r1
 8004316:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6959      	ldr	r1, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	2203      	movs	r2, #3
 8004336:	4393      	bics	r3, r2
 8004338:	2201      	movs	r2, #1
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b002      	add	sp, #8
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	fffffefd 	.word	0xfffffefd
 8004350:	40012708 	.word	0x40012708
 8004354:	ffc3ffff 	.word	0xffc3ffff
 8004358:	fdffffff 	.word	0xfdffffff
 800435c:	fffe0219 	.word	0xfffe0219
 8004360:	fffffc03 	.word	0xfffffc03

08004364 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004370:	2317      	movs	r3, #23
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2204      	movs	r2, #4
 8004380:	4013      	ands	r3, r2
 8004382:	d15e      	bne.n	8004442 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2250      	movs	r2, #80	; 0x50
 8004388:	5c9b      	ldrb	r3, [r3, r2]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_ADC_Start_DMA+0x2e>
 800438e:	2302      	movs	r3, #2
 8004390:	e05e      	b.n	8004450 <HAL_ADC_Start_DMA+0xec>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2250      	movs	r2, #80	; 0x50
 8004396:	2101      	movs	r1, #1
 8004398:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	430a      	orrs	r2, r1
 80043a8:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d007      	beq.n	80043c2 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80043b2:	2317      	movs	r3, #23
 80043b4:	18fc      	adds	r4, r7, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 f90d 	bl	80045d8 <ADC_Enable>
 80043be:	0003      	movs	r3, r0
 80043c0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043c2:	2317      	movs	r3, #23
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d13e      	bne.n	800444a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_ADC_Start_DMA+0xf4>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	2280      	movs	r2, #128	; 0x80
 80043d6:	0052      	lsls	r2, r2, #1
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2250      	movs	r2, #80	; 0x50
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	4a1a      	ldr	r2, [pc, #104]	; (800445c <HAL_ADC_Start_DMA+0xf8>)
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_ADC_Start_DMA+0xfc>)
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_ADC_Start_DMA+0x100>)
 8004402:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	221c      	movs	r2, #28
 800440a:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2110      	movs	r1, #16
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3340      	adds	r3, #64	; 0x40
 8004426:	0019      	movs	r1, r3
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f000 fbd4 	bl	8004bd8 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2104      	movs	r1, #4
 800443c:	430a      	orrs	r2, r1
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e003      	b.n	800444a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004442:	2317      	movs	r3, #23
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	2202      	movs	r2, #2
 8004448:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800444a:	2317      	movs	r3, #23
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	781b      	ldrb	r3, [r3, #0]
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b007      	add	sp, #28
 8004456:	bd90      	pop	{r4, r7, pc}
 8004458:	fffff0fe 	.word	0xfffff0fe
 800445c:	080046a9 	.word	0x080046a9
 8004460:	0800475d 	.word	0x0800475d
 8004464:	0800477b 	.word	0x0800477b

08004468 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b002      	add	sp, #8
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2250      	movs	r2, #80	; 0x50
 80044a6:	5c9b      	ldrb	r3, [r3, r2]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x18>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e085      	b.n	80045bc <HAL_ADC_ConfigChannel+0x124>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2250      	movs	r2, #80	; 0x50
 80044b4:	2101      	movs	r1, #1
 80044b6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2204      	movs	r2, #4
 80044c0:	4013      	ands	r3, r2
 80044c2:	d00b      	beq.n	80044dc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	2220      	movs	r2, #32
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2250      	movs	r2, #80	; 0x50
 80044d4:	2100      	movs	r1, #0
 80044d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e06f      	b.n	80045bc <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a38      	ldr	r2, [pc, #224]	; (80045c4 <HAL_ADC_ConfigChannel+0x12c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d035      	beq.n	8004552 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	035b      	lsls	r3, r3, #13
 80044f2:	0b5a      	lsrs	r2, r3, #13
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	02db      	lsls	r3, r3, #11
 8004504:	4013      	ands	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004508:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b2e      	ldr	r3, [pc, #184]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	0409      	lsls	r1, r1, #16
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004516:	200a      	movs	r0, #10
 8004518:	f000 f94a 	bl	80047b0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	029b      	lsls	r3, r3, #10
 8004524:	4013      	ands	r3, r2
 8004526:	d006      	beq.n	8004536 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	03c9      	lsls	r1, r1, #15
 8004532:	430a      	orrs	r2, r1
 8004534:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	4013      	ands	r3, r2
 8004540:	d037      	beq.n	80045b2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8004542:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	0449      	lsls	r1, r1, #17
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e02f      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	035b      	lsls	r3, r3, #13
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	43d9      	mvns	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	400a      	ands	r2, r1
 8004568:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	02db      	lsls	r3, r3, #11
 8004572:	4013      	ands	r3, r2
 8004574:	d005      	beq.n	8004582 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 800457c:	4913      	ldr	r1, [pc, #76]	; (80045cc <HAL_ADC_ConfigChannel+0x134>)
 800457e:	400a      	ands	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	029b      	lsls	r3, r3, #10
 800458a:	4013      	ands	r3, r2
 800458c:	d005      	beq.n	800459a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800458e:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 8004594:	490e      	ldr	r1, [pc, #56]	; (80045d0 <HAL_ADC_ConfigChannel+0x138>)
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	025b      	lsls	r3, r3, #9
 80045a2:	4013      	ands	r3, r2
 80045a4:	d005      	beq.n	80045b2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <HAL_ADC_ConfigChannel+0x130>)
 80045ac:	4909      	ldr	r1, [pc, #36]	; (80045d4 <HAL_ADC_ConfigChannel+0x13c>)
 80045ae:	400a      	ands	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2250      	movs	r2, #80	; 0x50
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	00001001 	.word	0x00001001
 80045c8:	40012708 	.word	0x40012708
 80045cc:	ff7fffff 	.word	0xff7fffff
 80045d0:	ffbfffff 	.word	0xffbfffff
 80045d4:	feffffff 	.word	0xfeffffff

080045d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2203      	movs	r2, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d108      	bne.n	8004604 <ADC_Enable+0x2c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <ADC_Enable+0x2c>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <ADC_Enable+0x2e>
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d146      	bne.n	8004698 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <ADC_Enable+0xcc>)
 8004612:	4013      	ands	r3, r2
 8004614:	d00d      	beq.n	8004632 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	2210      	movs	r2, #16
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	2201      	movs	r2, #1
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e033      	b.n	800469a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004642:	2001      	movs	r0, #1
 8004644:	f000 f8b4 	bl	80047b0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004648:	f7ff fcea 	bl	8004020 <HAL_GetTick>
 800464c:	0003      	movs	r3, r0
 800464e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004650:	e01b      	b.n	800468a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004652:	f7ff fce5 	bl	8004020 <HAL_GetTick>
 8004656:	0002      	movs	r2, r0
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b0a      	cmp	r3, #10
 800465e:	d914      	bls.n	800468a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2201      	movs	r2, #1
 8004668:	4013      	ands	r3, r2
 800466a:	2b01      	cmp	r3, #1
 800466c:	d00d      	beq.n	800468a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	2210      	movs	r2, #16
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	2201      	movs	r2, #1
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e007      	b.n	800469a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2201      	movs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	2b01      	cmp	r3, #1
 8004696:	d1dc      	bne.n	8004652 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b004      	add	sp, #16
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	80000017 	.word	0x80000017

080046a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	2250      	movs	r2, #80	; 0x50
 80046bc:	4013      	ands	r3, r2
 80046be:	d141      	bne.n	8004744 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	23c0      	movs	r3, #192	; 0xc0
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	4013      	ands	r3, r2
 80046da:	d12e      	bne.n	800473a <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d129      	bne.n	800473a <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2208      	movs	r2, #8
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d122      	bne.n	800473a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2204      	movs	r2, #4
 80046fc:	4013      	ands	r3, r2
 80046fe:	d110      	bne.n	8004722 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	210c      	movs	r1, #12
 800470c:	438a      	bics	r2, r1
 800470e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	4a10      	ldr	r2, [pc, #64]	; (8004758 <ADC_DMAConvCplt+0xb0>)
 8004716:	4013      	ands	r3, r2
 8004718:	2201      	movs	r2, #1
 800471a:	431a      	orrs	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
 8004720:	e00b      	b.n	800473a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	2220      	movs	r2, #32
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	2201      	movs	r2, #1
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	0018      	movs	r0, r3
 800473e:	f7ff fe93 	bl	8004468 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004742:	e005      	b.n	8004750 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	0010      	movs	r0, r2
 800474e:	4798      	blx	r3
}
 8004750:	46c0      	nop			; (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	b004      	add	sp, #16
 8004756:	bd80      	pop	{r7, pc}
 8004758:	fffffefe 	.word	0xfffffefe

0800475c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff fe83 	bl	8004478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	46bd      	mov	sp, r7
 8004776:	b004      	add	sp, #16
 8004778:	bd80      	pop	{r7, pc}

0800477a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	2240      	movs	r2, #64	; 0x40
 800478e:	431a      	orrs	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004798:	2204      	movs	r2, #4
 800479a:	431a      	orrs	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f7ff fe70 	bl	8004488 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047a8:	46c0      	nop			; (mov r8, r8)
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b004      	add	sp, #16
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <ADC_DelayMicroSecond+0x38>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	490b      	ldr	r1, [pc, #44]	; (80047ec <ADC_DelayMicroSecond+0x3c>)
 80047be:	0018      	movs	r0, r3
 80047c0:	f7fb fcbe 	bl	8000140 <__udivsi3>
 80047c4:	0003      	movs	r3, r0
 80047c6:	001a      	movs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4353      	muls	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80047ce:	e002      	b.n	80047d6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f9      	bne.n	80047d0 <ADC_DelayMicroSecond+0x20>
  }
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b004      	add	sp, #16
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	20000000 	.word	0x20000000
 80047ec:	000f4240 	.word	0x000f4240

080047f0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fa:	2317      	movs	r3, #23
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2250      	movs	r2, #80	; 0x50
 800480e:	5c9b      	ldrb	r3, [r3, r2]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_ADCEx_Calibration_Start+0x28>
 8004814:	2302      	movs	r3, #2
 8004816:	e083      	b.n	8004920 <HAL_ADCEx_Calibration_Start+0x130>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2250      	movs	r2, #80	; 0x50
 800481c:	2101      	movs	r1, #1
 800481e:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2203      	movs	r2, #3
 8004828:	4013      	ands	r3, r2
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <HAL_ADCEx_Calibration_Start+0x50>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	4013      	ands	r3, r2
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_ADCEx_Calibration_Start+0x50>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_ADCEx_Calibration_Start+0x52>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d15b      	bne.n	80048fe <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	4a37      	ldr	r2, [pc, #220]	; (8004928 <HAL_ADCEx_Calibration_Start+0x138>)
 800484c:	4013      	ands	r3, r2
 800484e:	2202      	movs	r2, #2
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2203      	movs	r2, #3
 800485e:	4013      	ands	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2103      	movs	r1, #3
 800486e:	438a      	bics	r2, r1
 8004870:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	0609      	lsls	r1, r1, #24
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004884:	f7ff fbcc 	bl	8004020 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800488c:	e01d      	b.n	80048ca <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800488e:	f7ff fbc7 	bl	8004020 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b0a      	cmp	r3, #10
 800489a:	d916      	bls.n	80048ca <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	0fdb      	lsrs	r3, r3, #31
 80048a4:	07da      	lsls	r2, r3, #31
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d10d      	bne.n	80048ca <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	2212      	movs	r2, #18
 80048b4:	4393      	bics	r3, r2
 80048b6:	2210      	movs	r2, #16
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2250      	movs	r2, #80	; 0x50
 80048c2:	2100      	movs	r1, #0
 80048c4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e02a      	b.n	8004920 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	0fdb      	lsrs	r3, r3, #31
 80048d2:	07da      	lsls	r2, r3, #31
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	429a      	cmp	r2, r3
 80048da:	d0d8      	beq.n	800488e <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68d9      	ldr	r1, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	2203      	movs	r2, #3
 80048f2:	4393      	bics	r3, r2
 80048f4:	2201      	movs	r2, #1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54
 80048fc:	e009      	b.n	8004912 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	2220      	movs	r2, #32
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800490a:	2317      	movs	r3, #23
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2250      	movs	r2, #80	; 0x50
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800491a:	2317      	movs	r3, #23
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	781b      	ldrb	r3, [r3, #0]
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b006      	add	sp, #24
 8004926:	bd80      	pop	{r7, pc}
 8004928:	fffffefd 	.word	0xfffffefd

0800492c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	0002      	movs	r2, r0
 8004934:	1dfb      	adds	r3, r7, #7
 8004936:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b7f      	cmp	r3, #127	; 0x7f
 800493e:	d809      	bhi.n	8004954 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004940:	1dfb      	adds	r3, r7, #7
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	001a      	movs	r2, r3
 8004946:	231f      	movs	r3, #31
 8004948:	401a      	ands	r2, r3
 800494a:	4b04      	ldr	r3, [pc, #16]	; (800495c <__NVIC_EnableIRQ+0x30>)
 800494c:	2101      	movs	r1, #1
 800494e:	4091      	lsls	r1, r2
 8004950:	000a      	movs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]
  }
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b002      	add	sp, #8
 800495a:	bd80      	pop	{r7, pc}
 800495c:	e000e100 	.word	0xe000e100

08004960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	0002      	movs	r2, r0
 8004968:	6039      	str	r1, [r7, #0]
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800496e:	1dfb      	adds	r3, r7, #7
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b7f      	cmp	r3, #127	; 0x7f
 8004974:	d828      	bhi.n	80049c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004976:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <__NVIC_SetPriority+0xd4>)
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b25b      	sxtb	r3, r3
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	33c0      	adds	r3, #192	; 0xc0
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	589b      	ldr	r3, [r3, r2]
 8004986:	1dfa      	adds	r2, r7, #7
 8004988:	7812      	ldrb	r2, [r2, #0]
 800498a:	0011      	movs	r1, r2
 800498c:	2203      	movs	r2, #3
 800498e:	400a      	ands	r2, r1
 8004990:	00d2      	lsls	r2, r2, #3
 8004992:	21ff      	movs	r1, #255	; 0xff
 8004994:	4091      	lsls	r1, r2
 8004996:	000a      	movs	r2, r1
 8004998:	43d2      	mvns	r2, r2
 800499a:	401a      	ands	r2, r3
 800499c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	019b      	lsls	r3, r3, #6
 80049a2:	22ff      	movs	r2, #255	; 0xff
 80049a4:	401a      	ands	r2, r3
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	0018      	movs	r0, r3
 80049ac:	2303      	movs	r3, #3
 80049ae:	4003      	ands	r3, r0
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049b4:	481f      	ldr	r0, [pc, #124]	; (8004a34 <__NVIC_SetPriority+0xd4>)
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	b25b      	sxtb	r3, r3
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	430a      	orrs	r2, r1
 80049c0:	33c0      	adds	r3, #192	; 0xc0
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80049c6:	e031      	b.n	8004a2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <__NVIC_SetPriority+0xd8>)
 80049ca:	1dfb      	adds	r3, r7, #7
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	0019      	movs	r1, r3
 80049d0:	230f      	movs	r3, #15
 80049d2:	400b      	ands	r3, r1
 80049d4:	3b08      	subs	r3, #8
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	3306      	adds	r3, #6
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	18d3      	adds	r3, r2, r3
 80049de:	3304      	adds	r3, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	1dfa      	adds	r2, r7, #7
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	0011      	movs	r1, r2
 80049e8:	2203      	movs	r2, #3
 80049ea:	400a      	ands	r2, r1
 80049ec:	00d2      	lsls	r2, r2, #3
 80049ee:	21ff      	movs	r1, #255	; 0xff
 80049f0:	4091      	lsls	r1, r2
 80049f2:	000a      	movs	r2, r1
 80049f4:	43d2      	mvns	r2, r2
 80049f6:	401a      	ands	r2, r3
 80049f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	401a      	ands	r2, r3
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	0018      	movs	r0, r3
 8004a08:	2303      	movs	r3, #3
 8004a0a:	4003      	ands	r3, r0
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a10:	4809      	ldr	r0, [pc, #36]	; (8004a38 <__NVIC_SetPriority+0xd8>)
 8004a12:	1dfb      	adds	r3, r7, #7
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	001c      	movs	r4, r3
 8004a18:	230f      	movs	r3, #15
 8004a1a:	4023      	ands	r3, r4
 8004a1c:	3b08      	subs	r3, #8
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	430a      	orrs	r2, r1
 8004a22:	3306      	adds	r3, #6
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	18c3      	adds	r3, r0, r3
 8004a28:	3304      	adds	r3, #4
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b003      	add	sp, #12
 8004a32:	bd90      	pop	{r4, r7, pc}
 8004a34:	e000e100 	.word	0xe000e100
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	045b      	lsls	r3, r3, #17
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d301      	bcc.n	8004a54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a50:	2301      	movs	r3, #1
 8004a52:	e010      	b.n	8004a76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <SysTick_Config+0x44>)
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	425b      	negs	r3, r3
 8004a60:	2103      	movs	r1, #3
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7ff ff7c 	bl	8004960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <SysTick_Config+0x44>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <SysTick_Config+0x44>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	e000e010 	.word	0xe000e010

08004a84 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	210f      	movs	r1, #15
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	1c02      	adds	r2, r0, #0
 8004a94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b25b      	sxtb	r3, r3
 8004a9e:	0011      	movs	r1, r2
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff ff5d 	bl	8004960 <__NVIC_SetPriority>
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff ff33 	bl	800492c <__NVIC_EnableIRQ>
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b002      	add	sp, #8
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff ffaf 	bl	8004a3c <SysTick_Config>
 8004ade:	0003      	movs	r3, r0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e061      	b.n	8004bbe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a32      	ldr	r2, [pc, #200]	; (8004bc8 <HAL_DMA_Init+0xe0>)
 8004b00:	4694      	mov	ip, r2
 8004b02:	4463      	add	r3, ip
 8004b04:	2114      	movs	r1, #20
 8004b06:	0018      	movs	r0, r3
 8004b08:	f7fb fb1a 	bl	8000140 <__udivsi3>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	009a      	lsls	r2, r3, #2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a2d      	ldr	r2, [pc, #180]	; (8004bcc <HAL_DMA_Init+0xe4>)
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2225      	movs	r2, #37	; 0x25
 8004b1e:	2102      	movs	r1, #2
 8004b20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <HAL_DMA_Init+0xe8>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	01db      	lsls	r3, r3, #7
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d018      	beq.n	8004ba6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <HAL_DMA_Init+0xec>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	211c      	movs	r1, #28
 8004b7e:	400b      	ands	r3, r1
 8004b80:	210f      	movs	r1, #15
 8004b82:	4099      	lsls	r1, r3
 8004b84:	000b      	movs	r3, r1
 8004b86:	43d9      	mvns	r1, r3
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_DMA_Init+0xec>)
 8004b8a:	400a      	ands	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_DMA_Init+0xec>)
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	201c      	movs	r0, #28
 8004b9c:	4003      	ands	r3, r0
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <HAL_DMA_Init+0xec>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2225      	movs	r2, #37	; 0x25
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2224      	movs	r2, #36	; 0x24
 8004bb8:	2100      	movs	r1, #0
 8004bba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b004      	add	sp, #16
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	bffdfff8 	.word	0xbffdfff8
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	ffff800f 	.word	0xffff800f
 8004bd4:	400200a8 	.word	0x400200a8

08004bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2317      	movs	r3, #23
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2224      	movs	r2, #36	; 0x24
 8004bf2:	5c9b      	ldrb	r3, [r3, r2]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_DMA_Start_IT+0x24>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e04f      	b.n	8004c9c <HAL_DMA_Start_IT+0xc4>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	2101      	movs	r1, #1
 8004c02:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2225      	movs	r2, #37	; 0x25
 8004c08:	5c9b      	ldrb	r3, [r3, r2]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d13a      	bne.n	8004c86 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2225      	movs	r2, #37	; 0x25
 8004c14:	2102      	movs	r1, #2
 8004c16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	438a      	bics	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f96a 	bl	8004f0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	210e      	movs	r1, #14
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e00f      	b.n	8004c74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2104      	movs	r1, #4
 8004c60:	438a      	bics	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	210a      	movs	r1, #10
 8004c70:	430a      	orrs	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2101      	movs	r1, #1
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e007      	b.n	8004c96 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2224      	movs	r2, #36	; 0x24
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c8e:	2317      	movs	r3, #23
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	2202      	movs	r2, #2
 8004c94:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004c96:	2317      	movs	r3, #23
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	781b      	ldrb	r3, [r3, #0]
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b006      	add	sp, #24
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	230f      	movs	r3, #15
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2225      	movs	r2, #37	; 0x25
 8004cb8:	5c9b      	ldrb	r3, [r3, r2]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d008      	beq.n	8004cd2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2224      	movs	r2, #36	; 0x24
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e024      	b.n	8004d1c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	210e      	movs	r1, #14
 8004cde:	438a      	bics	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	438a      	bics	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	221c      	movs	r2, #28
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4091      	lsls	r1, r2
 8004d02:	000a      	movs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2225      	movs	r2, #37	; 0x25
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

    return status;
 8004d16:	230f      	movs	r3, #15
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b004      	add	sp, #16
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	210f      	movs	r1, #15
 8004d2e:	187b      	adds	r3, r7, r1
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2225      	movs	r2, #37	; 0x25
 8004d38:	5c9b      	ldrb	r3, [r3, r2]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d006      	beq.n	8004d4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2204      	movs	r2, #4
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d46:	187b      	adds	r3, r7, r1
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e02a      	b.n	8004da4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	210e      	movs	r1, #14
 8004d5a:	438a      	bics	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2101      	movs	r1, #1
 8004d6a:	438a      	bics	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	221c      	movs	r2, #28
 8004d74:	401a      	ands	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	4091      	lsls	r1, r2
 8004d7e:	000a      	movs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2225      	movs	r2, #37	; 0x25
 8004d86:	2101      	movs	r1, #1
 8004d88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2224      	movs	r2, #36	; 0x24
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	0010      	movs	r0, r2
 8004da2:	4798      	blx	r3
    }
  }
  return status;
 8004da4:	230f      	movs	r3, #15
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	781b      	ldrb	r3, [r3, #0]
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b004      	add	sp, #16
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	221c      	movs	r2, #28
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	0013      	movs	r3, r2
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d026      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x7a>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2204      	movs	r2, #4
 8004de2:	4013      	ands	r3, r2
 8004de4:	d022      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2220      	movs	r2, #32
 8004dee:	4013      	ands	r3, r2
 8004df0:	d107      	bne.n	8004e02 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	438a      	bics	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	221c      	movs	r2, #28
 8004e08:	401a      	ands	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2104      	movs	r1, #4
 8004e10:	4091      	lsls	r1, r2
 8004e12:	000a      	movs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d100      	bne.n	8004e20 <HAL_DMA_IRQHandler+0x6e>
 8004e1e:	e071      	b.n	8004f04 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	0010      	movs	r0, r2
 8004e28:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004e2a:	e06b      	b.n	8004f04 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	221c      	movs	r2, #28
 8004e32:	4013      	ands	r3, r2
 8004e34:	2202      	movs	r2, #2
 8004e36:	409a      	lsls	r2, r3
 8004e38:	0013      	movs	r3, r2
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d02d      	beq.n	8004e9c <HAL_DMA_IRQHandler+0xea>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2202      	movs	r2, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	d029      	beq.n	8004e9c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	4013      	ands	r3, r2
 8004e52:	d10b      	bne.n	8004e6c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	210a      	movs	r1, #10
 8004e60:	438a      	bics	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2225      	movs	r2, #37	; 0x25
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	221c      	movs	r2, #28
 8004e72:	401a      	ands	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2102      	movs	r1, #2
 8004e7a:	4091      	lsls	r1, r2
 8004e7c:	000a      	movs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	; 0x24
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d039      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	0010      	movs	r0, r2
 8004e98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e9a:	e033      	b.n	8004f04 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	221c      	movs	r2, #28
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	0013      	movs	r3, r2
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4013      	ands	r3, r2
 8004eae:	d02a      	beq.n	8004f06 <HAL_DMA_IRQHandler+0x154>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d026      	beq.n	8004f06 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	210e      	movs	r1, #14
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	221c      	movs	r2, #28
 8004ece:	401a      	ands	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	4091      	lsls	r1, r2
 8004ed8:	000a      	movs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2225      	movs	r2, #37	; 0x25
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2224      	movs	r2, #36	; 0x24
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	0010      	movs	r0, r2
 8004f02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46c0      	nop			; (mov r8, r8)
}
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b004      	add	sp, #16
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	221c      	movs	r2, #28
 8004f22:	401a      	ands	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4091      	lsls	r1, r2
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d108      	bne.n	8004f52 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f50:	e007      	b.n	8004f62 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	60da      	str	r2, [r3, #12]
}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b004      	add	sp, #16
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f82:	e14f      	b.n	8005224 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4091      	lsls	r1, r2
 8004f8e:	000a      	movs	r2, r1
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d100      	bne.n	8004f9c <HAL_GPIO_Init+0x30>
 8004f9a:	e140      	b.n	800521e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d005      	beq.n	8004fb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2203      	movs	r2, #3
 8004fae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d130      	bne.n	8005016 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	2203      	movs	r2, #3
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	0013      	movs	r3, r2
 8004fc4:	43da      	mvns	r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	0013      	movs	r3, r2
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fea:	2201      	movs	r2, #1
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	0013      	movs	r3, r2
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	2201      	movs	r2, #1
 8005002:	401a      	ands	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	409a      	lsls	r2, r3
 8005008:	0013      	movs	r3, r2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2203      	movs	r2, #3
 800501c:	4013      	ands	r3, r2
 800501e:	2b03      	cmp	r3, #3
 8005020:	d017      	beq.n	8005052 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	2203      	movs	r2, #3
 800502e:	409a      	lsls	r2, r3
 8005030:	0013      	movs	r3, r2
 8005032:	43da      	mvns	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4013      	ands	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	0013      	movs	r3, r2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2203      	movs	r2, #3
 8005058:	4013      	ands	r3, r2
 800505a:	2b02      	cmp	r3, #2
 800505c:	d123      	bne.n	80050a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	08da      	lsrs	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3208      	adds	r2, #8
 8005066:	0092      	lsls	r2, r2, #2
 8005068:	58d3      	ldr	r3, [r2, r3]
 800506a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2207      	movs	r2, #7
 8005070:	4013      	ands	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	220f      	movs	r2, #15
 8005076:	409a      	lsls	r2, r3
 8005078:	0013      	movs	r3, r2
 800507a:	43da      	mvns	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4013      	ands	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2107      	movs	r1, #7
 800508a:	400b      	ands	r3, r1
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	409a      	lsls	r2, r3
 8005090:	0013      	movs	r3, r2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	08da      	lsrs	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3208      	adds	r2, #8
 80050a0:	0092      	lsls	r2, r2, #2
 80050a2:	6939      	ldr	r1, [r7, #16]
 80050a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	2203      	movs	r2, #3
 80050b2:	409a      	lsls	r2, r3
 80050b4:	0013      	movs	r3, r2
 80050b6:	43da      	mvns	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4013      	ands	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2203      	movs	r2, #3
 80050c4:	401a      	ands	r2, r3
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	0013      	movs	r3, r2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	23c0      	movs	r3, #192	; 0xc0
 80050e0:	029b      	lsls	r3, r3, #10
 80050e2:	4013      	ands	r3, r2
 80050e4:	d100      	bne.n	80050e8 <HAL_GPIO_Init+0x17c>
 80050e6:	e09a      	b.n	800521e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e8:	4b54      	ldr	r3, [pc, #336]	; (800523c <HAL_GPIO_Init+0x2d0>)
 80050ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ec:	4b53      	ldr	r3, [pc, #332]	; (800523c <HAL_GPIO_Init+0x2d0>)
 80050ee:	2101      	movs	r1, #1
 80050f0:	430a      	orrs	r2, r1
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80050f4:	4a52      	ldr	r2, [pc, #328]	; (8005240 <HAL_GPIO_Init+0x2d4>)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	089b      	lsrs	r3, r3, #2
 80050fa:	3302      	adds	r3, #2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	589b      	ldr	r3, [r3, r2]
 8005100:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2203      	movs	r2, #3
 8005106:	4013      	ands	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	220f      	movs	r2, #15
 800510c:	409a      	lsls	r2, r3
 800510e:	0013      	movs	r3, r2
 8005110:	43da      	mvns	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4013      	ands	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	23a0      	movs	r3, #160	; 0xa0
 800511c:	05db      	lsls	r3, r3, #23
 800511e:	429a      	cmp	r2, r3
 8005120:	d019      	beq.n	8005156 <HAL_GPIO_Init+0x1ea>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a47      	ldr	r2, [pc, #284]	; (8005244 <HAL_GPIO_Init+0x2d8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_GPIO_Init+0x1e6>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a46      	ldr	r2, [pc, #280]	; (8005248 <HAL_GPIO_Init+0x2dc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00d      	beq.n	800514e <HAL_GPIO_Init+0x1e2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a45      	ldr	r2, [pc, #276]	; (800524c <HAL_GPIO_Init+0x2e0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d007      	beq.n	800514a <HAL_GPIO_Init+0x1de>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a44      	ldr	r2, [pc, #272]	; (8005250 <HAL_GPIO_Init+0x2e4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <HAL_GPIO_Init+0x1da>
 8005142:	2305      	movs	r3, #5
 8005144:	e008      	b.n	8005158 <HAL_GPIO_Init+0x1ec>
 8005146:	2306      	movs	r3, #6
 8005148:	e006      	b.n	8005158 <HAL_GPIO_Init+0x1ec>
 800514a:	2303      	movs	r3, #3
 800514c:	e004      	b.n	8005158 <HAL_GPIO_Init+0x1ec>
 800514e:	2302      	movs	r3, #2
 8005150:	e002      	b.n	8005158 <HAL_GPIO_Init+0x1ec>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_GPIO_Init+0x1ec>
 8005156:	2300      	movs	r3, #0
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	2103      	movs	r1, #3
 800515c:	400a      	ands	r2, r1
 800515e:	0092      	lsls	r2, r2, #2
 8005160:	4093      	lsls	r3, r2
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005168:	4935      	ldr	r1, [pc, #212]	; (8005240 <HAL_GPIO_Init+0x2d4>)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	089b      	lsrs	r3, r3, #2
 800516e:	3302      	adds	r3, #2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005176:	4b37      	ldr	r3, [pc, #220]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	43da      	mvns	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	035b      	lsls	r3, r3, #13
 800518e:	4013      	ands	r3, r2
 8005190:	d003      	beq.n	800519a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800519a:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80051a0:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	43da      	mvns	r2, r3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	039b      	lsls	r3, r3, #14
 80051b8:	4013      	ands	r3, r2
 80051ba:	d003      	beq.n	80051c4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	43da      	mvns	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	4013      	ands	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	029b      	lsls	r3, r3, #10
 80051e2:	4013      	ands	r3, r2
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051f4:	4b17      	ldr	r3, [pc, #92]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	43da      	mvns	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	025b      	lsls	r3, r3, #9
 800520c:	4013      	ands	r3, r2
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <HAL_GPIO_Init+0x2e8>)
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	3301      	adds	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	40da      	lsrs	r2, r3
 800522c:	1e13      	subs	r3, r2, #0
 800522e:	d000      	beq.n	8005232 <HAL_GPIO_Init+0x2c6>
 8005230:	e6a8      	b.n	8004f84 <HAL_GPIO_Init+0x18>
  }
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b006      	add	sp, #24
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	40010000 	.word	0x40010000
 8005244:	50000400 	.word	0x50000400
 8005248:	50000800 	.word	0x50000800
 800524c:	50000c00 	.word	0x50000c00
 8005250:	50001c00 	.word	0x50001c00
 8005254:	40010400 	.word	0x40010400

08005258 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	0008      	movs	r0, r1
 8005262:	0011      	movs	r1, r2
 8005264:	1cbb      	adds	r3, r7, #2
 8005266:	1c02      	adds	r2, r0, #0
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	1c7b      	adds	r3, r7, #1
 800526c:	1c0a      	adds	r2, r1, #0
 800526e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005270:	1c7b      	adds	r3, r7, #1
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005278:	1cbb      	adds	r3, r7, #2
 800527a:	881a      	ldrh	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005280:	e003      	b.n	800528a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005282:	1cbb      	adds	r3, r7, #2
 8005284:	881a      	ldrh	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b002      	add	sp, #8
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	000a      	movs	r2, r1
 800529c:	1cbb      	adds	r3, r7, #2
 800529e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052a6:	1cbb      	adds	r3, r7, #2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4013      	ands	r3, r2
 80052ae:	041a      	lsls	r2, r3, #16
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	1cb9      	adds	r1, r7, #2
 80052b6:	8809      	ldrh	r1, [r1, #0]
 80052b8:	400b      	ands	r3, r1
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b004      	add	sp, #16
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e082      	b.n	80053e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2241      	movs	r2, #65	; 0x41
 80052de:	5c9b      	ldrb	r3, [r3, r2]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2240      	movs	r2, #64	; 0x40
 80052ea:	2100      	movs	r1, #0
 80052ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f7fe f9a5 	bl	8003640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2241      	movs	r2, #65	; 0x41
 80052fa:	2124      	movs	r1, #36	; 0x24
 80052fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2101      	movs	r1, #1
 800530a:	438a      	bics	r2, r1
 800530c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4934      	ldr	r1, [pc, #208]	; (80053e8 <HAL_I2C_Init+0x120>)
 8005318:	400a      	ands	r2, r1
 800531a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4931      	ldr	r1, [pc, #196]	; (80053ec <HAL_I2C_Init+0x124>)
 8005328:	400a      	ands	r2, r1
 800532a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d108      	bne.n	8005346 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2180      	movs	r1, #128	; 0x80
 800533e:	0209      	lsls	r1, r1, #8
 8005340:	430a      	orrs	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
 8005344:	e007      	b.n	8005356 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2184      	movs	r1, #132	; 0x84
 8005350:	0209      	lsls	r1, r1, #8
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d104      	bne.n	8005368 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	0112      	lsls	r2, r2, #4
 8005366:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	491f      	ldr	r1, [pc, #124]	; (80053f0 <HAL_I2C_Init+0x128>)
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	491a      	ldr	r1, [pc, #104]	; (80053ec <HAL_I2C_Init+0x124>)
 8005384:	400a      	ands	r2, r1
 8005386:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	431a      	orrs	r2, r3
 8005392:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69d9      	ldr	r1, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1a      	ldr	r2, [r3, #32]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2101      	movs	r1, #1
 80053be:	430a      	orrs	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2241      	movs	r2, #65	; 0x41
 80053cc:	2120      	movs	r1, #32
 80053ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2242      	movs	r2, #66	; 0x42
 80053da:	2100      	movs	r1, #0
 80053dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	0018      	movs	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	b002      	add	sp, #8
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	f0ffffff 	.word	0xf0ffffff
 80053ec:	ffff7fff 	.word	0xffff7fff
 80053f0:	02008000 	.word	0x02008000

080053f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b089      	sub	sp, #36	; 0x24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	0008      	movs	r0, r1
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	0019      	movs	r1, r3
 8005402:	230a      	movs	r3, #10
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	1c02      	adds	r2, r0, #0
 8005408:	801a      	strh	r2, [r3, #0]
 800540a:	2308      	movs	r3, #8
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	1c0a      	adds	r2, r1, #0
 8005410:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2241      	movs	r2, #65	; 0x41
 8005416:	5c9b      	ldrb	r3, [r3, r2]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b20      	cmp	r3, #32
 800541c:	d000      	beq.n	8005420 <HAL_I2C_Master_Transmit+0x2c>
 800541e:	e0e7      	b.n	80055f0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2240      	movs	r2, #64	; 0x40
 8005424:	5c9b      	ldrb	r3, [r3, r2]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_I2C_Master_Transmit+0x3a>
 800542a:	2302      	movs	r3, #2
 800542c:	e0e1      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1fe>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2240      	movs	r2, #64	; 0x40
 8005432:	2101      	movs	r1, #1
 8005434:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005436:	f7fe fdf3 	bl	8004020 <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	0219      	lsls	r1, r3, #8
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2319      	movs	r3, #25
 800544a:	2201      	movs	r2, #1
 800544c:	f000 fa04 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005450:	1e03      	subs	r3, r0, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0cc      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2241      	movs	r2, #65	; 0x41
 800545c:	2121      	movs	r1, #33	; 0x21
 800545e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2242      	movs	r2, #66	; 0x42
 8005464:	2110      	movs	r1, #16
 8005466:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2208      	movs	r2, #8
 8005478:	18ba      	adds	r2, r7, r2
 800547a:	8812      	ldrh	r2, [r2, #0]
 800547c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2bff      	cmp	r3, #255	; 0xff
 800548c:	d911      	bls.n	80054b2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	22ff      	movs	r2, #255	; 0xff
 8005492:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	b2da      	uxtb	r2, r3
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	045c      	lsls	r4, r3, #17
 800549e:	230a      	movs	r3, #10
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	8819      	ldrh	r1, [r3, #0]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	4b55      	ldr	r3, [pc, #340]	; (80055fc <HAL_I2C_Master_Transmit+0x208>)
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	0023      	movs	r3, r4
 80054ac:	f000 fc2e 	bl	8005d0c <I2C_TransferConfig>
 80054b0:	e075      	b.n	800559e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	049c      	lsls	r4, r3, #18
 80054c6:	230a      	movs	r3, #10
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	8819      	ldrh	r1, [r3, #0]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	4b4b      	ldr	r3, [pc, #300]	; (80055fc <HAL_I2C_Master_Transmit+0x208>)
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	0023      	movs	r3, r4
 80054d4:	f000 fc1a 	bl	8005d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80054d8:	e061      	b.n	800559e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 fa07 	bl	80058f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	d001      	beq.n	80054ee <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e081      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	781a      	ldrb	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d03a      	beq.n	800559e <HAL_I2C_Master_Transmit+0x1aa>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d136      	bne.n	800559e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	0013      	movs	r3, r2
 800553a:	2200      	movs	r2, #0
 800553c:	2180      	movs	r1, #128	; 0x80
 800553e:	f000 f98b 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005542:	1e03      	subs	r3, r0, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e053      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	2bff      	cmp	r3, #255	; 0xff
 8005552:	d911      	bls.n	8005578 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	22ff      	movs	r2, #255	; 0xff
 8005558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555e:	b2da      	uxtb	r2, r3
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	045c      	lsls	r4, r3, #17
 8005564:	230a      	movs	r3, #10
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	8819      	ldrh	r1, [r3, #0]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	2300      	movs	r3, #0
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	0023      	movs	r3, r4
 8005572:	f000 fbcb 	bl	8005d0c <I2C_TransferConfig>
 8005576:	e012      	b.n	800559e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	b2da      	uxtb	r2, r3
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	049c      	lsls	r4, r3, #18
 800558c:	230a      	movs	r3, #10
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	8819      	ldrh	r1, [r3, #0]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	2300      	movs	r3, #0
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	0023      	movs	r3, r4
 800559a:	f000 fbb7 	bl	8005d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d198      	bne.n	80054da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 f9e6 	bl	8005980 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d001      	beq.n	80055bc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e01a      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2220      	movs	r2, #32
 80055c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	490c      	ldr	r1, [pc, #48]	; (8005600 <HAL_I2C_Master_Transmit+0x20c>)
 80055d0:	400a      	ands	r2, r1
 80055d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2241      	movs	r2, #65	; 0x41
 80055d8:	2120      	movs	r1, #32
 80055da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2242      	movs	r2, #66	; 0x42
 80055e0:	2100      	movs	r1, #0
 80055e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2240      	movs	r2, #64	; 0x40
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b007      	add	sp, #28
 80055f8:	bd90      	pop	{r4, r7, pc}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	80002000 	.word	0x80002000
 8005600:	fe00e800 	.word	0xfe00e800

08005604 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b089      	sub	sp, #36	; 0x24
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	0008      	movs	r0, r1
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	0019      	movs	r1, r3
 8005612:	230a      	movs	r3, #10
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	1c02      	adds	r2, r0, #0
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	2308      	movs	r3, #8
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	1c0a      	adds	r2, r1, #0
 8005620:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2241      	movs	r2, #65	; 0x41
 8005626:	5c9b      	ldrb	r3, [r3, r2]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	d000      	beq.n	8005630 <HAL_I2C_Master_Receive+0x2c>
 800562e:	e0e8      	b.n	8005802 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2240      	movs	r2, #64	; 0x40
 8005634:	5c9b      	ldrb	r3, [r3, r2]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_I2C_Master_Receive+0x3a>
 800563a:	2302      	movs	r3, #2
 800563c:	e0e2      	b.n	8005804 <HAL_I2C_Master_Receive+0x200>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2240      	movs	r2, #64	; 0x40
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005646:	f7fe fceb 	bl	8004020 <HAL_GetTick>
 800564a:	0003      	movs	r3, r0
 800564c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	0219      	lsls	r1, r3, #8
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2319      	movs	r3, #25
 800565a:	2201      	movs	r2, #1
 800565c:	f000 f8fc 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005660:	1e03      	subs	r3, r0, #0
 8005662:	d001      	beq.n	8005668 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0cd      	b.n	8005804 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2241      	movs	r2, #65	; 0x41
 800566c:	2122      	movs	r1, #34	; 0x22
 800566e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2242      	movs	r2, #66	; 0x42
 8005674:	2110      	movs	r1, #16
 8005676:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2208      	movs	r2, #8
 8005688:	18ba      	adds	r2, r7, r2
 800568a:	8812      	ldrh	r2, [r2, #0]
 800568c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2bff      	cmp	r3, #255	; 0xff
 800569c:	d911      	bls.n	80056c2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	045c      	lsls	r4, r3, #17
 80056ae:	230a      	movs	r3, #10
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	8819      	ldrh	r1, [r3, #0]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	4b55      	ldr	r3, [pc, #340]	; (800580c <HAL_I2C_Master_Receive+0x208>)
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	0023      	movs	r3, r4
 80056bc:	f000 fb26 	bl	8005d0c <I2C_TransferConfig>
 80056c0:	e076      	b.n	80057b0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	049c      	lsls	r4, r3, #18
 80056d6:	230a      	movs	r3, #10
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	8819      	ldrh	r1, [r3, #0]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	4b4b      	ldr	r3, [pc, #300]	; (800580c <HAL_I2C_Master_Receive+0x208>)
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	0023      	movs	r3, r4
 80056e4:	f000 fb12 	bl	8005d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80056e8:	e062      	b.n	80057b0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	0018      	movs	r0, r3
 80056f2:	f000 f989 	bl	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056f6:	1e03      	subs	r3, r0, #0
 80056f8:	d001      	beq.n	80056fe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e082      	b.n	8005804 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d03a      	beq.n	80057b0 <HAL_I2C_Master_Receive+0x1ac>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d136      	bne.n	80057b0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	0013      	movs	r3, r2
 800574c:	2200      	movs	r2, #0
 800574e:	2180      	movs	r1, #128	; 0x80
 8005750:	f000 f882 	bl	8005858 <I2C_WaitOnFlagUntilTimeout>
 8005754:	1e03      	subs	r3, r0, #0
 8005756:	d001      	beq.n	800575c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e053      	b.n	8005804 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2bff      	cmp	r3, #255	; 0xff
 8005764:	d911      	bls.n	800578a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	22ff      	movs	r2, #255	; 0xff
 800576a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005770:	b2da      	uxtb	r2, r3
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	045c      	lsls	r4, r3, #17
 8005776:	230a      	movs	r3, #10
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	8819      	ldrh	r1, [r3, #0]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	2300      	movs	r3, #0
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	0023      	movs	r3, r4
 8005784:	f000 fac2 	bl	8005d0c <I2C_TransferConfig>
 8005788:	e012      	b.n	80057b0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	b2da      	uxtb	r2, r3
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	049c      	lsls	r4, r3, #18
 800579e:	230a      	movs	r3, #10
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	8819      	ldrh	r1, [r3, #0]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	2300      	movs	r3, #0
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	0023      	movs	r3, r4
 80057ac:	f000 faae 	bl	8005d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d197      	bne.n	80056ea <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 f8dd 	bl	8005980 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057c6:	1e03      	subs	r3, r0, #0
 80057c8:	d001      	beq.n	80057ce <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e01a      	b.n	8005804 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2220      	movs	r2, #32
 80057d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	490b      	ldr	r1, [pc, #44]	; (8005810 <HAL_I2C_Master_Receive+0x20c>)
 80057e2:	400a      	ands	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2241      	movs	r2, #65	; 0x41
 80057ea:	2120      	movs	r1, #32
 80057ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2242      	movs	r2, #66	; 0x42
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2240      	movs	r2, #64	; 0x40
 80057fa:	2100      	movs	r1, #0
 80057fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e000      	b.n	8005804 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
  }
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b007      	add	sp, #28
 800580a:	bd90      	pop	{r4, r7, pc}
 800580c:	80002400 	.word	0x80002400
 8005810:	fe00e800 	.word	0xfe00e800

08005814 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2202      	movs	r2, #2
 8005824:	4013      	ands	r3, r2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d103      	bne.n	8005832 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2201      	movs	r2, #1
 800583a:	4013      	ands	r3, r2
 800583c:	2b01      	cmp	r3, #1
 800583e:	d007      	beq.n	8005850 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2101      	movs	r1, #1
 800584c:	430a      	orrs	r2, r1
 800584e:	619a      	str	r2, [r3, #24]
  }
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b002      	add	sp, #8
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	1dfb      	adds	r3, r7, #7
 8005866:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005868:	e030      	b.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	d02d      	beq.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005870:	f7fe fbd6 	bl	8004020 <HAL_GetTick>
 8005874:	0002      	movs	r2, r0
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d302      	bcc.n	8005886 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d122      	bne.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	425a      	negs	r2, r3
 8005896:	4153      	adcs	r3, r2
 8005898:	b2db      	uxtb	r3, r3
 800589a:	001a      	movs	r2, r3
 800589c:	1dfb      	adds	r3, r7, #7
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d113      	bne.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a8:	2220      	movs	r2, #32
 80058aa:	431a      	orrs	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2241      	movs	r2, #65	; 0x41
 80058b4:	2120      	movs	r1, #32
 80058b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2242      	movs	r2, #66	; 0x42
 80058bc:	2100      	movs	r1, #0
 80058be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2240      	movs	r2, #64	; 0x40
 80058c4:	2100      	movs	r1, #0
 80058c6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e00f      	b.n	80058ec <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	425a      	negs	r2, r3
 80058dc:	4153      	adcs	r3, r2
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	001a      	movs	r2, r3
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d0bf      	beq.n	800586a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b004      	add	sp, #16
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005900:	e032      	b.n	8005968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f8ff 	bl	8005b0c <I2C_IsErrorOccurred>
 800590e:	1e03      	subs	r3, r0, #0
 8005910:	d001      	beq.n	8005916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e030      	b.n	8005978 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	3301      	adds	r3, #1
 800591a:	d025      	beq.n	8005968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591c:	f7fe fb80 	bl	8004020 <HAL_GetTick>
 8005920:	0002      	movs	r2, r0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11a      	bne.n	8005968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2202      	movs	r2, #2
 800593a:	4013      	ands	r3, r2
 800593c:	2b02      	cmp	r3, #2
 800593e:	d013      	beq.n	8005968 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	2220      	movs	r2, #32
 8005946:	431a      	orrs	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2241      	movs	r2, #65	; 0x41
 8005950:	2120      	movs	r1, #32
 8005952:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2242      	movs	r2, #66	; 0x42
 8005958:	2100      	movs	r1, #0
 800595a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	2100      	movs	r1, #0
 8005962:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e007      	b.n	8005978 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2202      	movs	r2, #2
 8005970:	4013      	ands	r3, r2
 8005972:	2b02      	cmp	r3, #2
 8005974:	d1c5      	bne.n	8005902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b004      	add	sp, #16
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800598c:	e02f      	b.n	80059ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	0018      	movs	r0, r3
 8005996:	f000 f8b9 	bl	8005b0c <I2C_IsErrorOccurred>
 800599a:	1e03      	subs	r3, r0, #0
 800599c:	d001      	beq.n	80059a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e02d      	b.n	80059fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a2:	f7fe fb3d 	bl	8004020 <HAL_GetTick>
 80059a6:	0002      	movs	r2, r0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d302      	bcc.n	80059b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11a      	bne.n	80059ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2220      	movs	r2, #32
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d013      	beq.n	80059ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	2220      	movs	r2, #32
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2241      	movs	r2, #65	; 0x41
 80059d6:	2120      	movs	r1, #32
 80059d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2242      	movs	r2, #66	; 0x42
 80059de:	2100      	movs	r1, #0
 80059e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2240      	movs	r2, #64	; 0x40
 80059e6:	2100      	movs	r1, #0
 80059e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e007      	b.n	80059fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2220      	movs	r2, #32
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d1c8      	bne.n	800598e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	0018      	movs	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b004      	add	sp, #16
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a14:	e06b      	b.n	8005aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 f875 	bl	8005b0c <I2C_IsErrorOccurred>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d001      	beq.n	8005a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e069      	b.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2220      	movs	r2, #32
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d138      	bne.n	8005aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d105      	bne.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e055      	b.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d107      	bne.n	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2210      	movs	r2, #16
 8005a66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
 8005a6e:	e002      	b.n	8005a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	491f      	ldr	r1, [pc, #124]	; (8005b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005a8a:	400a      	ands	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2241      	movs	r2, #65	; 0x41
 8005a92:	2120      	movs	r1, #32
 8005a94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2242      	movs	r2, #66	; 0x42
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2240      	movs	r2, #64	; 0x40
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e029      	b.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fe fab9 	bl	8004020 <HAL_GetTick>
 8005aae:	0002      	movs	r2, r0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d116      	bne.n	8005aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d00f      	beq.n	8005aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2241      	movs	r2, #65	; 0x41
 8005ade:	2120      	movs	r1, #32
 8005ae0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2240      	movs	r2, #64	; 0x40
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e007      	b.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2204      	movs	r2, #4
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d18c      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	fe00e800 	.word	0xfe00e800

08005b0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b08b      	sub	sp, #44	; 0x2c
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b18:	2327      	movs	r3, #39	; 0x27
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2210      	movs	r2, #16
 8005b34:	4013      	ands	r3, r2
 8005b36:	d100      	bne.n	8005b3a <I2C_IsErrorOccurred+0x2e>
 8005b38:	e082      	b.n	8005c40 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2210      	movs	r2, #16
 8005b40:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b42:	e060      	b.n	8005c06 <I2C_IsErrorOccurred+0xfa>
 8005b44:	2427      	movs	r4, #39	; 0x27
 8005b46:	193b      	adds	r3, r7, r4
 8005b48:	193a      	adds	r2, r7, r4
 8005b4a:	7812      	ldrb	r2, [r2, #0]
 8005b4c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3301      	adds	r3, #1
 8005b52:	d058      	beq.n	8005c06 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b54:	f7fe fa64 	bl	8004020 <HAL_GetTick>
 8005b58:	0002      	movs	r2, r0
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d306      	bcc.n	8005b72 <I2C_IsErrorOccurred+0x66>
 8005b64:	193b      	adds	r3, r7, r4
 8005b66:	193a      	adds	r2, r7, r4
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d149      	bne.n	8005c06 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	01db      	lsls	r3, r3, #7
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b80:	2013      	movs	r0, #19
 8005b82:	183b      	adds	r3, r7, r0
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	2142      	movs	r1, #66	; 0x42
 8005b88:	5c52      	ldrb	r2, [r2, r1]
 8005b8a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	401a      	ands	r2, r3
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d126      	bne.n	8005bee <I2C_IsErrorOccurred+0xe2>
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	01db      	lsls	r3, r3, #7
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d021      	beq.n	8005bee <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005baa:	183b      	adds	r3, r7, r0
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d01d      	beq.n	8005bee <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2180      	movs	r1, #128	; 0x80
 8005bbe:	01c9      	lsls	r1, r1, #7
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005bc4:	f7fe fa2c 	bl	8004020 <HAL_GetTick>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bcc:	e00f      	b.n	8005bee <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bce:	f7fe fa27 	bl	8004020 <HAL_GetTick>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b19      	cmp	r3, #25
 8005bda:	d908      	bls.n	8005bee <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	2220      	movs	r2, #32
 8005be0:	4313      	orrs	r3, r2
 8005be2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005be4:	2327      	movs	r3, #39	; 0x27
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	2201      	movs	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]

              break;
 8005bec:	e00b      	b.n	8005c06 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	2127      	movs	r1, #39	; 0x27
 8005bfa:	187a      	adds	r2, r7, r1
 8005bfc:	1879      	adds	r1, r7, r1
 8005bfe:	7809      	ldrb	r1, [r1, #0]
 8005c00:	7011      	strb	r1, [r2, #0]
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d1e3      	bne.n	8005bce <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d004      	beq.n	8005c1e <I2C_IsErrorOccurred+0x112>
 8005c14:	2327      	movs	r3, #39	; 0x27
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d092      	beq.n	8005b44 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c1e:	2327      	movs	r3, #39	; 0x27
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	2204      	movs	r2, #4
 8005c34:	4313      	orrs	r3, r2
 8005c36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c38:	2327      	movs	r3, #39	; 0x27
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d00c      	beq.n	8005c6c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	2201      	movs	r2, #1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	0052      	lsls	r2, r2, #1
 8005c62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c64:	2327      	movs	r3, #39	; 0x27
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4013      	ands	r3, r2
 8005c74:	d00c      	beq.n	8005c90 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2208      	movs	r2, #8
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2280      	movs	r2, #128	; 0x80
 8005c84:	00d2      	lsls	r2, r2, #3
 8005c86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c88:	2327      	movs	r3, #39	; 0x27
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4013      	ands	r3, r2
 8005c98:	d00c      	beq.n	8005cb4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2280      	movs	r2, #128	; 0x80
 8005ca8:	0092      	lsls	r2, r2, #2
 8005caa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cac:	2327      	movs	r3, #39	; 0x27
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005cb4:	2327      	movs	r3, #39	; 0x27
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01d      	beq.n	8005cfa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f7ff fda7 	bl	8005814 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	490d      	ldr	r1, [pc, #52]	; (8005d08 <I2C_IsErrorOccurred+0x1fc>)
 8005cd2:	400a      	ands	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2241      	movs	r2, #65	; 0x41
 8005ce6:	2120      	movs	r1, #32
 8005ce8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2242      	movs	r2, #66	; 0x42
 8005cee:	2100      	movs	r1, #0
 8005cf0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2240      	movs	r2, #64	; 0x40
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005cfa:	2327      	movs	r3, #39	; 0x27
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b00b      	add	sp, #44	; 0x2c
 8005d06:	bd90      	pop	{r4, r7, pc}
 8005d08:	fe00e800 	.word	0xfe00e800

08005d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	0008      	movs	r0, r1
 8005d16:	0011      	movs	r1, r2
 8005d18:	607b      	str	r3, [r7, #4]
 8005d1a:	240a      	movs	r4, #10
 8005d1c:	193b      	adds	r3, r7, r4
 8005d1e:	1c02      	adds	r2, r0, #0
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	2009      	movs	r0, #9
 8005d24:	183b      	adds	r3, r7, r0
 8005d26:	1c0a      	adds	r2, r1, #0
 8005d28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d2a:	193b      	adds	r3, r7, r4
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	059b      	lsls	r3, r3, #22
 8005d30:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	0419      	lsls	r1, r3, #16
 8005d38:	23ff      	movs	r3, #255	; 0xff
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d3e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	4313      	orrs	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d56:	0d51      	lsrs	r1, r2, #21
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	00d2      	lsls	r2, r2, #3
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	4907      	ldr	r1, [pc, #28]	; (8005d7c <I2C_TransferConfig+0x70>)
 8005d60:	430a      	orrs	r2, r1
 8005d62:	43d2      	mvns	r2, r2
 8005d64:	401a      	ands	r2, r3
 8005d66:	0011      	movs	r1, r2
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b007      	add	sp, #28
 8005d78:	bd90      	pop	{r4, r7, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	03ff63ff 	.word	0x03ff63ff

08005d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2241      	movs	r2, #65	; 0x41
 8005d8e:	5c9b      	ldrb	r3, [r3, r2]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d138      	bne.n	8005e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2240      	movs	r2, #64	; 0x40
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e032      	b.n	8005e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2240      	movs	r2, #64	; 0x40
 8005da8:	2101      	movs	r1, #1
 8005daa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2241      	movs	r2, #65	; 0x41
 8005db0:	2124      	movs	r1, #36	; 0x24
 8005db2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	438a      	bics	r2, r1
 8005dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4911      	ldr	r1, [pc, #68]	; (8005e14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6819      	ldr	r1, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2101      	movs	r1, #1
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2241      	movs	r2, #65	; 0x41
 8005df8:	2120      	movs	r1, #32
 8005dfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2240      	movs	r2, #64	; 0x40
 8005e00:	2100      	movs	r1, #0
 8005e02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b002      	add	sp, #8
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	ffffefff 	.word	0xffffefff

08005e18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2241      	movs	r2, #65	; 0x41
 8005e26:	5c9b      	ldrb	r3, [r3, r2]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d139      	bne.n	8005ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2240      	movs	r2, #64	; 0x40
 8005e32:	5c9b      	ldrb	r3, [r3, r2]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e033      	b.n	8005ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2240      	movs	r2, #64	; 0x40
 8005e40:	2101      	movs	r1, #1
 8005e42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2241      	movs	r2, #65	; 0x41
 8005e48:	2124      	movs	r1, #36	; 0x24
 8005e4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2101      	movs	r1, #1
 8005e58:	438a      	bics	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a11      	ldr	r2, [pc, #68]	; (8005eac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2241      	movs	r2, #65	; 0x41
 8005e92:	2120      	movs	r1, #32
 8005e94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2240      	movs	r2, #64	; 0x40
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b004      	add	sp, #16
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	fffff0ff 	.word	0xfffff0ff

08005eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb0:	b5b0      	push	{r4, r5, r7, lr}
 8005eb2:	b08a      	sub	sp, #40	; 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f000 fbaf 	bl	8006622 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ec4:	4bcf      	ldr	r3, [pc, #828]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	220c      	movs	r2, #12
 8005eca:	4013      	ands	r3, r2
 8005ecc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ece:	4bcd      	ldr	r3, [pc, #820]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	025b      	lsls	r3, r3, #9
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x36>
 8005ee4:	e07e      	b.n	8005fe4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d007      	beq.n	8005efc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b0c      	cmp	r3, #12
 8005ef0:	d112      	bne.n	8005f18 <HAL_RCC_OscConfig+0x68>
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	025b      	lsls	r3, r3, #9
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d10d      	bne.n	8005f18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005efc:	4bc1      	ldr	r3, [pc, #772]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	4013      	ands	r3, r2
 8005f06:	d100      	bne.n	8005f0a <HAL_RCC_OscConfig+0x5a>
 8005f08:	e06b      	b.n	8005fe2 <HAL_RCC_OscConfig+0x132>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d167      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f000 fb85 	bl	8006622 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	025b      	lsls	r3, r3, #9
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d107      	bne.n	8005f34 <HAL_RCC_OscConfig+0x84>
 8005f24:	4bb7      	ldr	r3, [pc, #732]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4bb6      	ldr	r3, [pc, #728]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	0249      	lsls	r1, r1, #9
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	e027      	b.n	8005f84 <HAL_RCC_OscConfig+0xd4>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	23a0      	movs	r3, #160	; 0xa0
 8005f3a:	02db      	lsls	r3, r3, #11
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d10e      	bne.n	8005f5e <HAL_RCC_OscConfig+0xae>
 8005f40:	4bb0      	ldr	r3, [pc, #704]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	4baf      	ldr	r3, [pc, #700]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	02c9      	lsls	r1, r1, #11
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	4bad      	ldr	r3, [pc, #692]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4bac      	ldr	r3, [pc, #688]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	0249      	lsls	r1, r1, #9
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e012      	b.n	8005f84 <HAL_RCC_OscConfig+0xd4>
 8005f5e:	4ba9      	ldr	r3, [pc, #676]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4ba8      	ldr	r3, [pc, #672]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f64:	49a8      	ldr	r1, [pc, #672]	; (8006208 <HAL_RCC_OscConfig+0x358>)
 8005f66:	400a      	ands	r2, r1
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	4ba6      	ldr	r3, [pc, #664]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	025b      	lsls	r3, r3, #9
 8005f72:	4013      	ands	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4ba2      	ldr	r3, [pc, #648]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4ba1      	ldr	r3, [pc, #644]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005f7e:	49a3      	ldr	r1, [pc, #652]	; (800620c <HAL_RCC_OscConfig+0x35c>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fe f848 	bl	8004020 <HAL_GetTick>
 8005f90:	0003      	movs	r3, r0
 8005f92:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f94:	e009      	b.n	8005faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f96:	f7fe f843 	bl	8004020 <HAL_GetTick>
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b64      	cmp	r3, #100	; 0x64
 8005fa2:	d902      	bls.n	8005faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	f000 fb3c 	bl	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005faa:	4b96      	ldr	r3, [pc, #600]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	029b      	lsls	r3, r3, #10
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d0ef      	beq.n	8005f96 <HAL_RCC_OscConfig+0xe6>
 8005fb6:	e015      	b.n	8005fe4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb8:	f7fe f832 	bl	8004020 <HAL_GetTick>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc2:	f7fe f82d 	bl	8004020 <HAL_GetTick>
 8005fc6:	0002      	movs	r2, r0
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b64      	cmp	r3, #100	; 0x64
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e326      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fd4:	4b8b      	ldr	r3, [pc, #556]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	029b      	lsls	r3, r3, #10
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d1f0      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x112>
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	4013      	ands	r3, r2
 8005fec:	d100      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x140>
 8005fee:	e08b      	b.n	8006108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d005      	beq.n	8006008 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d13e      	bne.n	8006080 <HAL_RCC_OscConfig+0x1d0>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d13b      	bne.n	8006080 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006008:	4b7e      	ldr	r3, [pc, #504]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2204      	movs	r2, #4
 800600e:	4013      	ands	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_RCC_OscConfig+0x16c>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e302      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601c:	4b79      	ldr	r3, [pc, #484]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a7b      	ldr	r2, [pc, #492]	; (8006210 <HAL_RCC_OscConfig+0x360>)
 8006022:	4013      	ands	r3, r2
 8006024:	0019      	movs	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	021a      	lsls	r2, r3, #8
 800602c:	4b75      	ldr	r3, [pc, #468]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006032:	4b74      	ldr	r3, [pc, #464]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2209      	movs	r2, #9
 8006038:	4393      	bics	r3, r2
 800603a:	0019      	movs	r1, r3
 800603c:	4b71      	ldr	r3, [pc, #452]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	430a      	orrs	r2, r1
 8006042:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006044:	f000 fc40 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8006048:	0001      	movs	r1, r0
 800604a:	4b6e      	ldr	r3, [pc, #440]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	220f      	movs	r2, #15
 8006052:	4013      	ands	r3, r2
 8006054:	4a6f      	ldr	r2, [pc, #444]	; (8006214 <HAL_RCC_OscConfig+0x364>)
 8006056:	5cd3      	ldrb	r3, [r2, r3]
 8006058:	000a      	movs	r2, r1
 800605a:	40da      	lsrs	r2, r3
 800605c:	4b6e      	ldr	r3, [pc, #440]	; (8006218 <HAL_RCC_OscConfig+0x368>)
 800605e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006060:	4b6e      	ldr	r3, [pc, #440]	; (800621c <HAL_RCC_OscConfig+0x36c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2513      	movs	r5, #19
 8006066:	197c      	adds	r4, r7, r5
 8006068:	0018      	movs	r0, r3
 800606a:	f7fd ff93 	bl	8003f94 <HAL_InitTick>
 800606e:	0003      	movs	r3, r0
 8006070:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006072:	197b      	adds	r3, r7, r5
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d046      	beq.n	8006108 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800607a:	197b      	adds	r3, r7, r5
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	e2d0      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d027      	beq.n	80060d6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006086:	4b5f      	ldr	r3, [pc, #380]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2209      	movs	r2, #9
 800608c:	4393      	bics	r3, r2
 800608e:	0019      	movs	r1, r3
 8006090:	4b5c      	ldr	r3, [pc, #368]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	430a      	orrs	r2, r1
 8006096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006098:	f7fd ffc2 	bl	8004020 <HAL_GetTick>
 800609c:	0003      	movs	r3, r0
 800609e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060a2:	f7fd ffbd 	bl	8004020 <HAL_GetTick>
 80060a6:	0002      	movs	r2, r0
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e2b6      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b4:	4b53      	ldr	r3, [pc, #332]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2204      	movs	r2, #4
 80060ba:	4013      	ands	r3, r2
 80060bc:	d0f1      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060be:	4b51      	ldr	r3, [pc, #324]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4a53      	ldr	r2, [pc, #332]	; (8006210 <HAL_RCC_OscConfig+0x360>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	0019      	movs	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	4b4d      	ldr	r3, [pc, #308]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	e018      	b.n	8006108 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060d6:	4b4b      	ldr	r3, [pc, #300]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b4a      	ldr	r3, [pc, #296]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80060dc:	2101      	movs	r1, #1
 80060de:	438a      	bics	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e2:	f7fd ff9d 	bl	8004020 <HAL_GetTick>
 80060e6:	0003      	movs	r3, r0
 80060e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ec:	f7fd ff98 	bl	8004020 <HAL_GetTick>
 80060f0:	0002      	movs	r2, r0
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e291      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060fe:	4b41      	ldr	r3, [pc, #260]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2204      	movs	r2, #4
 8006104:	4013      	ands	r3, r2
 8006106:	d1f1      	bne.n	80060ec <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2210      	movs	r2, #16
 800610e:	4013      	ands	r3, r2
 8006110:	d100      	bne.n	8006114 <HAL_RCC_OscConfig+0x264>
 8006112:	e0a1      	b.n	8006258 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d140      	bne.n	800619c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800611a:	4b3a      	ldr	r3, [pc, #232]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4013      	ands	r3, r2
 8006124:	d005      	beq.n	8006132 <HAL_RCC_OscConfig+0x282>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e277      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006132:	4b34      	ldr	r3, [pc, #208]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	4a3a      	ldr	r2, [pc, #232]	; (8006220 <HAL_RCC_OscConfig+0x370>)
 8006138:	4013      	ands	r3, r2
 800613a:	0019      	movs	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006140:	4b30      	ldr	r3, [pc, #192]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006146:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	0a19      	lsrs	r1, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	061a      	lsls	r2, r3, #24
 8006154:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	0b5b      	lsrs	r3, r3, #13
 8006160:	3301      	adds	r3, #1
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	0212      	lsls	r2, r2, #8
 8006166:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006168:	4b26      	ldr	r3, [pc, #152]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	091b      	lsrs	r3, r3, #4
 800616e:	210f      	movs	r1, #15
 8006170:	400b      	ands	r3, r1
 8006172:	4928      	ldr	r1, [pc, #160]	; (8006214 <HAL_RCC_OscConfig+0x364>)
 8006174:	5ccb      	ldrb	r3, [r1, r3]
 8006176:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <HAL_RCC_OscConfig+0x368>)
 800617a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800617c:	4b27      	ldr	r3, [pc, #156]	; (800621c <HAL_RCC_OscConfig+0x36c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2513      	movs	r5, #19
 8006182:	197c      	adds	r4, r7, r5
 8006184:	0018      	movs	r0, r3
 8006186:	f7fd ff05 	bl	8003f94 <HAL_InitTick>
 800618a:	0003      	movs	r3, r0
 800618c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800618e:	197b      	adds	r3, r7, r5
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d060      	beq.n	8006258 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8006196:	197b      	adds	r3, r7, r5
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	e242      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d03f      	beq.n	8006224 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b16      	ldr	r3, [pc, #88]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80061aa:	2180      	movs	r1, #128	; 0x80
 80061ac:	0049      	lsls	r1, r1, #1
 80061ae:	430a      	orrs	r2, r1
 80061b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b2:	f7fd ff35 	bl	8004020 <HAL_GetTick>
 80061b6:	0003      	movs	r3, r0
 80061b8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061bc:	f7fd ff30 	bl	8004020 <HAL_GetTick>
 80061c0:	0002      	movs	r2, r0
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e229      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80061ce:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4013      	ands	r3, r2
 80061d8:	d0f0      	beq.n	80061bc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	4a10      	ldr	r2, [pc, #64]	; (8006220 <HAL_RCC_OscConfig+0x370>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	0019      	movs	r1, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	0a19      	lsrs	r1, r3, #8
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	061a      	lsls	r2, r3, #24
 80061fc:	4b01      	ldr	r3, [pc, #4]	; (8006204 <HAL_RCC_OscConfig+0x354>)
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
 8006202:	e029      	b.n	8006258 <HAL_RCC_OscConfig+0x3a8>
 8006204:	40021000 	.word	0x40021000
 8006208:	fffeffff 	.word	0xfffeffff
 800620c:	fffbffff 	.word	0xfffbffff
 8006210:	ffffe0ff 	.word	0xffffe0ff
 8006214:	0800d68c 	.word	0x0800d68c
 8006218:	20000000 	.word	0x20000000
 800621c:	20000004 	.word	0x20000004
 8006220:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006224:	4bbd      	ldr	r3, [pc, #756]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4bbc      	ldr	r3, [pc, #752]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800622a:	49bd      	ldr	r1, [pc, #756]	; (8006520 <HAL_RCC_OscConfig+0x670>)
 800622c:	400a      	ands	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fd fef6 	bl	8004020 <HAL_GetTick>
 8006234:	0003      	movs	r3, r0
 8006236:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800623a:	f7fd fef1 	bl	8004020 <HAL_GetTick>
 800623e:	0002      	movs	r2, r0
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e1ea      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800624c:	4bb3      	ldr	r3, [pc, #716]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4013      	ands	r3, r2
 8006256:	d1f0      	bne.n	800623a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2208      	movs	r2, #8
 800625e:	4013      	ands	r3, r2
 8006260:	d036      	beq.n	80062d0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d019      	beq.n	800629e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800626a:	4bac      	ldr	r3, [pc, #688]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800626c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800626e:	4bab      	ldr	r3, [pc, #684]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006270:	2101      	movs	r1, #1
 8006272:	430a      	orrs	r2, r1
 8006274:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006276:	f7fd fed3 	bl	8004020 <HAL_GetTick>
 800627a:	0003      	movs	r3, r0
 800627c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006280:	f7fd fece 	bl	8004020 <HAL_GetTick>
 8006284:	0002      	movs	r2, r0
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e1c7      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006292:	4ba2      	ldr	r3, [pc, #648]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006296:	2202      	movs	r2, #2
 8006298:	4013      	ands	r3, r2
 800629a:	d0f1      	beq.n	8006280 <HAL_RCC_OscConfig+0x3d0>
 800629c:	e018      	b.n	80062d0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800629e:	4b9f      	ldr	r3, [pc, #636]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80062a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062a2:	4b9e      	ldr	r3, [pc, #632]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80062a4:	2101      	movs	r1, #1
 80062a6:	438a      	bics	r2, r1
 80062a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062aa:	f7fd feb9 	bl	8004020 <HAL_GetTick>
 80062ae:	0003      	movs	r3, r0
 80062b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b4:	f7fd feb4 	bl	8004020 <HAL_GetTick>
 80062b8:	0002      	movs	r2, r0
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e1ad      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062c6:	4b95      	ldr	r3, [pc, #596]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80062c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ca:	2202      	movs	r2, #2
 80062cc:	4013      	ands	r3, r2
 80062ce:	d1f1      	bne.n	80062b4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2204      	movs	r2, #4
 80062d6:	4013      	ands	r3, r2
 80062d8:	d100      	bne.n	80062dc <HAL_RCC_OscConfig+0x42c>
 80062da:	e0ae      	b.n	800643a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062dc:	2027      	movs	r0, #39	; 0x27
 80062de:	183b      	adds	r3, r7, r0
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e4:	4b8d      	ldr	r3, [pc, #564]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80062e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	055b      	lsls	r3, r3, #21
 80062ec:	4013      	ands	r3, r2
 80062ee:	d109      	bne.n	8006304 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f0:	4b8a      	ldr	r3, [pc, #552]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80062f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f4:	4b89      	ldr	r3, [pc, #548]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80062f6:	2180      	movs	r1, #128	; 0x80
 80062f8:	0549      	lsls	r1, r1, #21
 80062fa:	430a      	orrs	r2, r1
 80062fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80062fe:	183b      	adds	r3, r7, r0
 8006300:	2201      	movs	r2, #1
 8006302:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006304:	4b87      	ldr	r3, [pc, #540]	; (8006524 <HAL_RCC_OscConfig+0x674>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4013      	ands	r3, r2
 800630e:	d11a      	bne.n	8006346 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006310:	4b84      	ldr	r3, [pc, #528]	; (8006524 <HAL_RCC_OscConfig+0x674>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4b83      	ldr	r3, [pc, #524]	; (8006524 <HAL_RCC_OscConfig+0x674>)
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	0049      	lsls	r1, r1, #1
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800631e:	f7fd fe7f 	bl	8004020 <HAL_GetTick>
 8006322:	0003      	movs	r3, r0
 8006324:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006328:	f7fd fe7a 	bl	8004020 <HAL_GetTick>
 800632c:	0002      	movs	r2, r0
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	; 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e173      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800633a:	4b7a      	ldr	r3, [pc, #488]	; (8006524 <HAL_RCC_OscConfig+0x674>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4013      	ands	r3, r2
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	429a      	cmp	r2, r3
 8006350:	d107      	bne.n	8006362 <HAL_RCC_OscConfig+0x4b2>
 8006352:	4b72      	ldr	r3, [pc, #456]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006356:	4b71      	ldr	r3, [pc, #452]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	0049      	lsls	r1, r1, #1
 800635c:	430a      	orrs	r2, r1
 800635e:	651a      	str	r2, [r3, #80]	; 0x50
 8006360:	e031      	b.n	80063c6 <HAL_RCC_OscConfig+0x516>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10c      	bne.n	8006384 <HAL_RCC_OscConfig+0x4d4>
 800636a:	4b6c      	ldr	r3, [pc, #432]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800636c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800636e:	4b6b      	ldr	r3, [pc, #428]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006370:	496b      	ldr	r1, [pc, #428]	; (8006520 <HAL_RCC_OscConfig+0x670>)
 8006372:	400a      	ands	r2, r1
 8006374:	651a      	str	r2, [r3, #80]	; 0x50
 8006376:	4b69      	ldr	r3, [pc, #420]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800637a:	4b68      	ldr	r3, [pc, #416]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800637c:	496a      	ldr	r1, [pc, #424]	; (8006528 <HAL_RCC_OscConfig+0x678>)
 800637e:	400a      	ands	r2, r1
 8006380:	651a      	str	r2, [r3, #80]	; 0x50
 8006382:	e020      	b.n	80063c6 <HAL_RCC_OscConfig+0x516>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	23a0      	movs	r3, #160	; 0xa0
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	429a      	cmp	r2, r3
 800638e:	d10e      	bne.n	80063ae <HAL_RCC_OscConfig+0x4fe>
 8006390:	4b62      	ldr	r3, [pc, #392]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006394:	4b61      	ldr	r3, [pc, #388]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	00c9      	lsls	r1, r1, #3
 800639a:	430a      	orrs	r2, r1
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
 800639e:	4b5f      	ldr	r3, [pc, #380]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80063a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063a2:	4b5e      	ldr	r3, [pc, #376]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80063a4:	2180      	movs	r1, #128	; 0x80
 80063a6:	0049      	lsls	r1, r1, #1
 80063a8:	430a      	orrs	r2, r1
 80063aa:	651a      	str	r2, [r3, #80]	; 0x50
 80063ac:	e00b      	b.n	80063c6 <HAL_RCC_OscConfig+0x516>
 80063ae:	4b5b      	ldr	r3, [pc, #364]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80063b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b2:	4b5a      	ldr	r3, [pc, #360]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80063b4:	495a      	ldr	r1, [pc, #360]	; (8006520 <HAL_RCC_OscConfig+0x670>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50
 80063ba:	4b58      	ldr	r3, [pc, #352]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80063bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063be:	4b57      	ldr	r3, [pc, #348]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80063c0:	4959      	ldr	r1, [pc, #356]	; (8006528 <HAL_RCC_OscConfig+0x678>)
 80063c2:	400a      	ands	r2, r1
 80063c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d015      	beq.n	80063fa <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ce:	f7fd fe27 	bl	8004020 <HAL_GetTick>
 80063d2:	0003      	movs	r3, r0
 80063d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063d6:	e009      	b.n	80063ec <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d8:	f7fd fe22 	bl	8004020 <HAL_GetTick>
 80063dc:	0002      	movs	r2, r0
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	4a52      	ldr	r2, [pc, #328]	; (800652c <HAL_RCC_OscConfig+0x67c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e11a      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ec:	4b4b      	ldr	r3, [pc, #300]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80063ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063f0:	2380      	movs	r3, #128	; 0x80
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4013      	ands	r3, r2
 80063f6:	d0ef      	beq.n	80063d8 <HAL_RCC_OscConfig+0x528>
 80063f8:	e014      	b.n	8006424 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063fa:	f7fd fe11 	bl	8004020 <HAL_GetTick>
 80063fe:	0003      	movs	r3, r0
 8006400:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006402:	e009      	b.n	8006418 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006404:	f7fd fe0c 	bl	8004020 <HAL_GetTick>
 8006408:	0002      	movs	r2, r0
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	4a47      	ldr	r2, [pc, #284]	; (800652c <HAL_RCC_OscConfig+0x67c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e104      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006418:	4b40      	ldr	r3, [pc, #256]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800641a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4013      	ands	r3, r2
 8006422:	d1ef      	bne.n	8006404 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006424:	2327      	movs	r3, #39	; 0x27
 8006426:	18fb      	adds	r3, r7, r3
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800642e:	4b3b      	ldr	r3, [pc, #236]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006432:	4b3a      	ldr	r3, [pc, #232]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006434:	493e      	ldr	r1, [pc, #248]	; (8006530 <HAL_RCC_OscConfig+0x680>)
 8006436:	400a      	ands	r2, r1
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2220      	movs	r2, #32
 8006440:	4013      	ands	r3, r2
 8006442:	d049      	beq.n	80064d8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d026      	beq.n	800649a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800644c:	4b33      	ldr	r3, [pc, #204]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	4b32      	ldr	r3, [pc, #200]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006452:	2101      	movs	r1, #1
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	4b30      	ldr	r3, [pc, #192]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800645a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645c:	4b2f      	ldr	r3, [pc, #188]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800645e:	2101      	movs	r1, #1
 8006460:	430a      	orrs	r2, r1
 8006462:	635a      	str	r2, [r3, #52]	; 0x34
 8006464:	4b33      	ldr	r3, [pc, #204]	; (8006534 <HAL_RCC_OscConfig+0x684>)
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	4b32      	ldr	r3, [pc, #200]	; (8006534 <HAL_RCC_OscConfig+0x684>)
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	0189      	lsls	r1, r1, #6
 800646e:	430a      	orrs	r2, r1
 8006470:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006472:	f7fd fdd5 	bl	8004020 <HAL_GetTick>
 8006476:	0003      	movs	r3, r0
 8006478:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800647c:	f7fd fdd0 	bl	8004020 <HAL_GetTick>
 8006480:	0002      	movs	r2, r0
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e0c9      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800648e:	4b23      	ldr	r3, [pc, #140]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2202      	movs	r2, #2
 8006494:	4013      	ands	r3, r2
 8006496:	d0f1      	beq.n	800647c <HAL_RCC_OscConfig+0x5cc>
 8006498:	e01e      	b.n	80064d8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	4b1f      	ldr	r3, [pc, #124]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80064a0:	2101      	movs	r1, #1
 80064a2:	438a      	bics	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	4b23      	ldr	r3, [pc, #140]	; (8006534 <HAL_RCC_OscConfig+0x684>)
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	4b22      	ldr	r3, [pc, #136]	; (8006534 <HAL_RCC_OscConfig+0x684>)
 80064ac:	4922      	ldr	r1, [pc, #136]	; (8006538 <HAL_RCC_OscConfig+0x688>)
 80064ae:	400a      	ands	r2, r1
 80064b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b2:	f7fd fdb5 	bl	8004020 <HAL_GetTick>
 80064b6:	0003      	movs	r3, r0
 80064b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064bc:	f7fd fdb0 	bl	8004020 <HAL_GetTick>
 80064c0:	0002      	movs	r2, r0
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e0a9      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064ce:	4b13      	ldr	r3, [pc, #76]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2202      	movs	r2, #2
 80064d4:	4013      	ands	r3, r2
 80064d6:	d1f1      	bne.n	80064bc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d100      	bne.n	80064e2 <HAL_RCC_OscConfig+0x632>
 80064e0:	e09e      	b.n	8006620 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d100      	bne.n	80064ea <HAL_RCC_OscConfig+0x63a>
 80064e8:	e077      	b.n	80065da <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d158      	bne.n	80065a4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <HAL_RCC_OscConfig+0x66c>)
 80064f8:	4910      	ldr	r1, [pc, #64]	; (800653c <HAL_RCC_OscConfig+0x68c>)
 80064fa:	400a      	ands	r2, r1
 80064fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fe:	f7fd fd8f 	bl	8004020 <HAL_GetTick>
 8006502:	0003      	movs	r3, r0
 8006504:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006506:	e01b      	b.n	8006540 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006508:	f7fd fd8a 	bl	8004020 <HAL_GetTick>
 800650c:	0002      	movs	r2, r0
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d914      	bls.n	8006540 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e083      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	40021000 	.word	0x40021000
 8006520:	fffffeff 	.word	0xfffffeff
 8006524:	40007000 	.word	0x40007000
 8006528:	fffffbff 	.word	0xfffffbff
 800652c:	00001388 	.word	0x00001388
 8006530:	efffffff 	.word	0xefffffff
 8006534:	40010000 	.word	0x40010000
 8006538:	ffffdfff 	.word	0xffffdfff
 800653c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006540:	4b3a      	ldr	r3, [pc, #232]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	049b      	lsls	r3, r3, #18
 8006548:	4013      	ands	r3, r2
 800654a:	d1dd      	bne.n	8006508 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800654c:	4b37      	ldr	r3, [pc, #220]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4a37      	ldr	r2, [pc, #220]	; (8006630 <HAL_RCC_OscConfig+0x780>)
 8006552:	4013      	ands	r3, r2
 8006554:	0019      	movs	r1, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	431a      	orrs	r2, r3
 8006566:	4b31      	ldr	r3, [pc, #196]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 8006568:	430a      	orrs	r2, r1
 800656a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800656c:	4b2f      	ldr	r3, [pc, #188]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b2e      	ldr	r3, [pc, #184]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	0449      	lsls	r1, r1, #17
 8006576:	430a      	orrs	r2, r1
 8006578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657a:	f7fd fd51 	bl	8004020 <HAL_GetTick>
 800657e:	0003      	movs	r3, r0
 8006580:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006584:	f7fd fd4c 	bl	8004020 <HAL_GetTick>
 8006588:	0002      	movs	r2, r0
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e045      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006596:	4b25      	ldr	r3, [pc, #148]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	2380      	movs	r3, #128	; 0x80
 800659c:	049b      	lsls	r3, r3, #18
 800659e:	4013      	ands	r3, r2
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x6d4>
 80065a2:	e03d      	b.n	8006620 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a4:	4b21      	ldr	r3, [pc, #132]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b20      	ldr	r3, [pc, #128]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 80065aa:	4922      	ldr	r1, [pc, #136]	; (8006634 <HAL_RCC_OscConfig+0x784>)
 80065ac:	400a      	ands	r2, r1
 80065ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b0:	f7fd fd36 	bl	8004020 <HAL_GetTick>
 80065b4:	0003      	movs	r3, r0
 80065b6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ba:	f7fd fd31 	bl	8004020 <HAL_GetTick>
 80065be:	0002      	movs	r2, r0
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e02a      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	2380      	movs	r3, #128	; 0x80
 80065d2:	049b      	lsls	r3, r3, #18
 80065d4:	4013      	ands	r3, r2
 80065d6:	d1f0      	bne.n	80065ba <HAL_RCC_OscConfig+0x70a>
 80065d8:	e022      	b.n	8006620 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e01d      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <HAL_RCC_OscConfig+0x77c>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	025b      	lsls	r3, r3, #9
 80065f2:	401a      	ands	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d10f      	bne.n	800661c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	23f0      	movs	r3, #240	; 0xf0
 8006600:	039b      	lsls	r3, r3, #14
 8006602:	401a      	ands	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d107      	bne.n	800661c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	23c0      	movs	r3, #192	; 0xc0
 8006610:	041b      	lsls	r3, r3, #16
 8006612:	401a      	ands	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	0018      	movs	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	b00a      	add	sp, #40	; 0x28
 8006628:	bdb0      	pop	{r4, r5, r7, pc}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	40021000 	.word	0x40021000
 8006630:	ff02ffff 	.word	0xff02ffff
 8006634:	feffffff 	.word	0xfeffffff

08006638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006638:	b5b0      	push	{r4, r5, r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e128      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800664c:	4b96      	ldr	r3, [pc, #600]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2201      	movs	r2, #1
 8006652:	4013      	ands	r3, r2
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d91e      	bls.n	8006698 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b93      	ldr	r3, [pc, #588]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2201      	movs	r2, #1
 8006660:	4393      	bics	r3, r2
 8006662:	0019      	movs	r1, r3
 8006664:	4b90      	ldr	r3, [pc, #576]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800666c:	f7fd fcd8 	bl	8004020 <HAL_GetTick>
 8006670:	0003      	movs	r3, r0
 8006672:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006674:	e009      	b.n	800668a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006676:	f7fd fcd3 	bl	8004020 <HAL_GetTick>
 800667a:	0002      	movs	r2, r0
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	4a8a      	ldr	r2, [pc, #552]	; (80068ac <HAL_RCC_ClockConfig+0x274>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e109      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800668a:	4b87      	ldr	r3, [pc, #540]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2201      	movs	r2, #1
 8006690:	4013      	ands	r3, r2
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d1ee      	bne.n	8006676 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2202      	movs	r2, #2
 800669e:	4013      	ands	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066a2:	4b83      	ldr	r3, [pc, #524]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	22f0      	movs	r2, #240	; 0xf0
 80066a8:	4393      	bics	r3, r2
 80066aa:	0019      	movs	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	4b7f      	ldr	r3, [pc, #508]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 80066b2:	430a      	orrs	r2, r1
 80066b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2201      	movs	r2, #1
 80066bc:	4013      	ands	r3, r2
 80066be:	d100      	bne.n	80066c2 <HAL_RCC_ClockConfig+0x8a>
 80066c0:	e089      	b.n	80067d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d107      	bne.n	80066da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066ca:	4b79      	ldr	r3, [pc, #484]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	029b      	lsls	r3, r3, #10
 80066d2:	4013      	ands	r3, r2
 80066d4:	d120      	bne.n	8006718 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e0e1      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d107      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066e2:	4b73      	ldr	r3, [pc, #460]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	049b      	lsls	r3, r3, #18
 80066ea:	4013      	ands	r3, r2
 80066ec:	d114      	bne.n	8006718 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e0d5      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d106      	bne.n	8006708 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066fa:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2204      	movs	r2, #4
 8006700:	4013      	ands	r3, r2
 8006702:	d109      	bne.n	8006718 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0ca      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006708:	4b69      	ldr	r3, [pc, #420]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4013      	ands	r3, r2
 8006712:	d101      	bne.n	8006718 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0c2      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006718:	4b65      	ldr	r3, [pc, #404]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2203      	movs	r2, #3
 800671e:	4393      	bics	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	4b62      	ldr	r3, [pc, #392]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 8006728:	430a      	orrs	r2, r1
 800672a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800672c:	f7fd fc78 	bl	8004020 <HAL_GetTick>
 8006730:	0003      	movs	r3, r0
 8006732:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d111      	bne.n	8006760 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800673c:	e009      	b.n	8006752 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800673e:	f7fd fc6f 	bl	8004020 <HAL_GetTick>
 8006742:	0002      	movs	r2, r0
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_RCC_ClockConfig+0x274>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0a5      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006752:	4b57      	ldr	r3, [pc, #348]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	220c      	movs	r2, #12
 8006758:	4013      	ands	r3, r2
 800675a:	2b08      	cmp	r3, #8
 800675c:	d1ef      	bne.n	800673e <HAL_RCC_ClockConfig+0x106>
 800675e:	e03a      	b.n	80067d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d111      	bne.n	800678c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006768:	e009      	b.n	800677e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800676a:	f7fd fc59 	bl	8004020 <HAL_GetTick>
 800676e:	0002      	movs	r2, r0
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	4a4d      	ldr	r2, [pc, #308]	; (80068ac <HAL_RCC_ClockConfig+0x274>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e08f      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800677e:	4b4c      	ldr	r3, [pc, #304]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	220c      	movs	r2, #12
 8006784:	4013      	ands	r3, r2
 8006786:	2b0c      	cmp	r3, #12
 8006788:	d1ef      	bne.n	800676a <HAL_RCC_ClockConfig+0x132>
 800678a:	e024      	b.n	80067d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d11b      	bne.n	80067cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006794:	e009      	b.n	80067aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006796:	f7fd fc43 	bl	8004020 <HAL_GetTick>
 800679a:	0002      	movs	r2, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	4a42      	ldr	r2, [pc, #264]	; (80068ac <HAL_RCC_ClockConfig+0x274>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e079      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80067aa:	4b41      	ldr	r3, [pc, #260]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	220c      	movs	r2, #12
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d1ef      	bne.n	8006796 <HAL_RCC_ClockConfig+0x15e>
 80067b6:	e00e      	b.n	80067d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fd fc32 	bl	8004020 <HAL_GetTick>
 80067bc:	0002      	movs	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a3a      	ldr	r2, [pc, #232]	; (80068ac <HAL_RCC_ClockConfig+0x274>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e068      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80067cc:	4b38      	ldr	r3, [pc, #224]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	220c      	movs	r2, #12
 80067d2:	4013      	ands	r3, r2
 80067d4:	d1f0      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d6:	4b34      	ldr	r3, [pc, #208]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	4013      	ands	r3, r2
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d21e      	bcs.n	8006822 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e4:	4b30      	ldr	r3, [pc, #192]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2201      	movs	r2, #1
 80067ea:	4393      	bics	r3, r2
 80067ec:	0019      	movs	r1, r3
 80067ee:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067f6:	f7fd fc13 	bl	8004020 <HAL_GetTick>
 80067fa:	0003      	movs	r3, r0
 80067fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	e009      	b.n	8006814 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006800:	f7fd fc0e 	bl	8004020 <HAL_GetTick>
 8006804:	0002      	movs	r2, r0
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	4a28      	ldr	r2, [pc, #160]	; (80068ac <HAL_RCC_ClockConfig+0x274>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e044      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006814:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <HAL_RCC_ClockConfig+0x270>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	4013      	ands	r3, r2
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d1ee      	bne.n	8006800 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2204      	movs	r2, #4
 8006828:	4013      	ands	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800682c:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <HAL_RCC_ClockConfig+0x27c>)
 8006832:	4013      	ands	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 800683c:	430a      	orrs	r2, r1
 800683e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2208      	movs	r2, #8
 8006846:	4013      	ands	r3, r2
 8006848:	d00a      	beq.n	8006860 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800684a:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	4a1a      	ldr	r2, [pc, #104]	; (80068b8 <HAL_RCC_ClockConfig+0x280>)
 8006850:	4013      	ands	r3, r2
 8006852:	0019      	movs	r1, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	00da      	lsls	r2, r3, #3
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 800685c:	430a      	orrs	r2, r1
 800685e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006860:	f000 f832 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8006864:	0001      	movs	r1, r0
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <HAL_RCC_ClockConfig+0x278>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	220f      	movs	r2, #15
 800686e:	4013      	ands	r3, r2
 8006870:	4a12      	ldr	r2, [pc, #72]	; (80068bc <HAL_RCC_ClockConfig+0x284>)
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	000a      	movs	r2, r1
 8006876:	40da      	lsrs	r2, r3
 8006878:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <HAL_RCC_ClockConfig+0x288>)
 800687a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800687c:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <HAL_RCC_ClockConfig+0x28c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	250b      	movs	r5, #11
 8006882:	197c      	adds	r4, r7, r5
 8006884:	0018      	movs	r0, r3
 8006886:	f7fd fb85 	bl	8003f94 <HAL_InitTick>
 800688a:	0003      	movs	r3, r0
 800688c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800688e:	197b      	adds	r3, r7, r5
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006896:	197b      	adds	r3, r7, r5
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	e000      	b.n	800689e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b004      	add	sp, #16
 80068a4:	bdb0      	pop	{r4, r5, r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	40022000 	.word	0x40022000
 80068ac:	00001388 	.word	0x00001388
 80068b0:	40021000 	.word	0x40021000
 80068b4:	fffff8ff 	.word	0xfffff8ff
 80068b8:	ffffc7ff 	.word	0xffffc7ff
 80068bc:	0800d68c 	.word	0x0800d68c
 80068c0:	20000000 	.word	0x20000000
 80068c4:	20000004 	.word	0x20000004

080068c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c8:	b5b0      	push	{r4, r5, r7, lr}
 80068ca:	b08e      	sub	sp, #56	; 0x38
 80068cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80068ce:	4b4c      	ldr	r3, [pc, #304]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x138>)
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d6:	230c      	movs	r3, #12
 80068d8:	4013      	ands	r3, r2
 80068da:	2b0c      	cmp	r3, #12
 80068dc:	d014      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0x40>
 80068de:	d900      	bls.n	80068e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80068e0:	e07b      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x112>
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d002      	beq.n	80068ec <HAL_RCC_GetSysClockFreq+0x24>
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d00b      	beq.n	8006902 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ea:	e076      	b.n	80069da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80068ec:	4b44      	ldr	r3, [pc, #272]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x138>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2210      	movs	r2, #16
 80068f2:	4013      	ands	r3, r2
 80068f4:	d002      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80068f6:	4b43      	ldr	r3, [pc, #268]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x13c>)
 80068f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80068fa:	e07c      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80068fc:	4b42      	ldr	r3, [pc, #264]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x140>)
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006900:	e079      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006902:	4b42      	ldr	r3, [pc, #264]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x144>)
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006906:	e076      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	0c9a      	lsrs	r2, r3, #18
 800690c:	230f      	movs	r3, #15
 800690e:	401a      	ands	r2, r3
 8006910:	4b3f      	ldr	r3, [pc, #252]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x148>)
 8006912:	5c9b      	ldrb	r3, [r3, r2]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	0d9a      	lsrs	r2, r3, #22
 800691a:	2303      	movs	r3, #3
 800691c:	4013      	ands	r3, r2
 800691e:	3301      	adds	r3, #1
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006922:	4b37      	ldr	r3, [pc, #220]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x138>)
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	2380      	movs	r3, #128	; 0x80
 8006928:	025b      	lsls	r3, r3, #9
 800692a:	4013      	ands	r3, r2
 800692c:	d01a      	beq.n	8006964 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	4a35      	ldr	r2, [pc, #212]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x144>)
 8006938:	2300      	movs	r3, #0
 800693a:	69b8      	ldr	r0, [r7, #24]
 800693c:	69f9      	ldr	r1, [r7, #28]
 800693e:	f7f9 fdd3 	bl	80004e8 <__aeabi_lmul>
 8006942:	0002      	movs	r2, r0
 8006944:	000b      	movs	r3, r1
 8006946:	0010      	movs	r0, r2
 8006948:	0019      	movs	r1, r3
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f7f9 fda7 	bl	80004a8 <__aeabi_uldivmod>
 800695a:	0002      	movs	r2, r0
 800695c:	000b      	movs	r3, r1
 800695e:	0013      	movs	r3, r2
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
 8006962:	e037      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006964:	4b26      	ldr	r3, [pc, #152]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x138>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2210      	movs	r2, #16
 800696a:	4013      	ands	r3, r2
 800696c:	d01a      	beq.n	80069a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006978:	2300      	movs	r3, #0
 800697a:	68b8      	ldr	r0, [r7, #8]
 800697c:	68f9      	ldr	r1, [r7, #12]
 800697e:	f7f9 fdb3 	bl	80004e8 <__aeabi_lmul>
 8006982:	0002      	movs	r2, r0
 8006984:	000b      	movs	r3, r1
 8006986:	0010      	movs	r0, r2
 8006988:	0019      	movs	r1, r3
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	603b      	str	r3, [r7, #0]
 800698e:	2300      	movs	r3, #0
 8006990:	607b      	str	r3, [r7, #4]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f7f9 fd87 	bl	80004a8 <__aeabi_uldivmod>
 800699a:	0002      	movs	r2, r0
 800699c:	000b      	movs	r3, r1
 800699e:	0013      	movs	r3, r2
 80069a0:	637b      	str	r3, [r7, #52]	; 0x34
 80069a2:	e017      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	0018      	movs	r0, r3
 80069a8:	2300      	movs	r3, #0
 80069aa:	0019      	movs	r1, r3
 80069ac:	4a16      	ldr	r2, [pc, #88]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x140>)
 80069ae:	2300      	movs	r3, #0
 80069b0:	f7f9 fd9a 	bl	80004e8 <__aeabi_lmul>
 80069b4:	0002      	movs	r2, r0
 80069b6:	000b      	movs	r3, r1
 80069b8:	0010      	movs	r0, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	001c      	movs	r4, r3
 80069c0:	2300      	movs	r3, #0
 80069c2:	001d      	movs	r5, r3
 80069c4:	0022      	movs	r2, r4
 80069c6:	002b      	movs	r3, r5
 80069c8:	f7f9 fd6e 	bl	80004a8 <__aeabi_uldivmod>
 80069cc:	0002      	movs	r2, r0
 80069ce:	000b      	movs	r3, r1
 80069d0:	0013      	movs	r3, r2
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80069d8:	e00d      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80069da:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x138>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	0b5b      	lsrs	r3, r3, #13
 80069e0:	2207      	movs	r2, #7
 80069e2:	4013      	ands	r3, r2
 80069e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	3301      	adds	r3, #1
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	0212      	lsls	r2, r2, #8
 80069ee:	409a      	lsls	r2, r3
 80069f0:	0013      	movs	r3, r2
 80069f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80069f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b00e      	add	sp, #56	; 0x38
 80069fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006a00:	40021000 	.word	0x40021000
 8006a04:	003d0900 	.word	0x003d0900
 8006a08:	00f42400 	.word	0x00f42400
 8006a0c:	007a1200 	.word	0x007a1200
 8006a10:	0800d6a4 	.word	0x0800d6a4

08006a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
}
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	20000000 	.word	0x20000000

08006a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a2c:	f7ff fff2 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a30:	0001      	movs	r1, r0
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	2207      	movs	r2, #7
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a3e:	5cd3      	ldrb	r3, [r2, r3]
 8006a40:	40d9      	lsrs	r1, r3
 8006a42:	000b      	movs	r3, r1
}
 8006a44:	0018      	movs	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	0800d69c 	.word	0x0800d69c

08006a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a58:	f7ff ffdc 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a5c:	0001      	movs	r1, r0
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	0adb      	lsrs	r3, r3, #11
 8006a64:	2207      	movs	r2, #7
 8006a66:	4013      	ands	r3, r2
 8006a68:	4a04      	ldr	r2, [pc, #16]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a6a:	5cd3      	ldrb	r3, [r2, r3]
 8006a6c:	40d9      	lsrs	r1, r3
 8006a6e:	000b      	movs	r3, r1
}
 8006a70:	0018      	movs	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	0800d69c 	.word	0x0800d69c

08006a80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006a88:	2317      	movs	r3, #23
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2220      	movs	r2, #32
 8006a96:	4013      	ands	r3, r2
 8006a98:	d106      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d100      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006aa6:	e104      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aa8:	4bb1      	ldr	r3, [pc, #708]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aac:	2380      	movs	r3, #128	; 0x80
 8006aae:	055b      	lsls	r3, r3, #21
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d10a      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ab4:	4bae      	ldr	r3, [pc, #696]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab8:	4bad      	ldr	r3, [pc, #692]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006aba:	2180      	movs	r1, #128	; 0x80
 8006abc:	0549      	lsls	r1, r1, #21
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006ac2:	2317      	movs	r3, #23
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aca:	4baa      	ldr	r3, [pc, #680]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	2380      	movs	r3, #128	; 0x80
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d11a      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad6:	4ba7      	ldr	r3, [pc, #668]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4ba6      	ldr	r3, [pc, #664]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006adc:	2180      	movs	r1, #128	; 0x80
 8006ade:	0049      	lsls	r1, r1, #1
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae4:	f7fd fa9c 	bl	8004020 <HAL_GetTick>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aec:	e008      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aee:	f7fd fa97 	bl	8004020 <HAL_GetTick>
 8006af2:	0002      	movs	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b64      	cmp	r3, #100	; 0x64
 8006afa:	d901      	bls.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e133      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b00:	4b9c      	ldr	r3, [pc, #624]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006b0c:	4b98      	ldr	r3, [pc, #608]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	23c0      	movs	r3, #192	; 0xc0
 8006b12:	039b      	lsls	r3, r3, #14
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	23c0      	movs	r3, #192	; 0xc0
 8006b1e:	039b      	lsls	r3, r3, #14
 8006b20:	4013      	ands	r3, r2
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d107      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	23c0      	movs	r3, #192	; 0xc0
 8006b2e:	039b      	lsls	r3, r3, #14
 8006b30:	4013      	ands	r3, r2
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d013      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	23c0      	movs	r3, #192	; 0xc0
 8006b3e:	029b      	lsls	r3, r3, #10
 8006b40:	401a      	ands	r2, r3
 8006b42:	23c0      	movs	r3, #192	; 0xc0
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d10a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b4a:	4b89      	ldr	r3, [pc, #548]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	2380      	movs	r3, #128	; 0x80
 8006b50:	029b      	lsls	r3, r3, #10
 8006b52:	401a      	ands	r2, r3
 8006b54:	2380      	movs	r3, #128	; 0x80
 8006b56:	029b      	lsls	r3, r3, #10
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e103      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006b60:	4b83      	ldr	r3, [pc, #524]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b64:	23c0      	movs	r3, #192	; 0xc0
 8006b66:	029b      	lsls	r3, r3, #10
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d049      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	23c0      	movs	r3, #192	; 0xc0
 8006b78:	029b      	lsls	r3, r3, #10
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d004      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2220      	movs	r2, #32
 8006b88:	4013      	ands	r3, r2
 8006b8a:	d10d      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	23c0      	movs	r3, #192	; 0xc0
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	4013      	ands	r3, r2
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d034      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d02e      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006ba8:	4b71      	ldr	r3, [pc, #452]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bac:	4a72      	ldr	r2, [pc, #456]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bb2:	4b6f      	ldr	r3, [pc, #444]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bb6:	4b6e      	ldr	r3, [pc, #440]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	0309      	lsls	r1, r1, #12
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bc0:	4b6b      	ldr	r3, [pc, #428]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bc4:	4b6a      	ldr	r3, [pc, #424]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bc6:	496d      	ldr	r1, [pc, #436]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006bc8:	400a      	ands	r2, r1
 8006bca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006bcc:	4b68      	ldr	r3, [pc, #416]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	2380      	movs	r3, #128	; 0x80
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d014      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fd fa20 	bl	8004020 <HAL_GetTick>
 8006be0:	0003      	movs	r3, r0
 8006be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006be4:	e009      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be6:	f7fd fa1b 	bl	8004020 <HAL_GetTick>
 8006bea:	0002      	movs	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	4a63      	ldr	r2, [pc, #396]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e0b6      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bfa:	4b5d      	ldr	r3, [pc, #372]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bfe:	2380      	movs	r3, #128	; 0x80
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4013      	ands	r3, r2
 8006c04:	d0ef      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	2380      	movs	r3, #128	; 0x80
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d01f      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	23c0      	movs	r3, #192	; 0xc0
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	23c0      	movs	r3, #192	; 0xc0
 8006c1e:	029b      	lsls	r3, r3, #10
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d10c      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006c24:	4b52      	ldr	r3, [pc, #328]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a56      	ldr	r2, [pc, #344]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	0019      	movs	r1, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	23c0      	movs	r3, #192	; 0xc0
 8006c34:	039b      	lsls	r3, r3, #14
 8006c36:	401a      	ands	r2, r3
 8006c38:	4b4d      	ldr	r3, [pc, #308]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	4b4c      	ldr	r3, [pc, #304]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	23c0      	movs	r3, #192	; 0xc0
 8006c48:	029b      	lsls	r3, r3, #10
 8006c4a:	401a      	ands	r2, r3
 8006c4c:	4b48      	ldr	r3, [pc, #288]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2220      	movs	r2, #32
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d01f      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	23c0      	movs	r3, #192	; 0xc0
 8006c62:	029b      	lsls	r3, r3, #10
 8006c64:	401a      	ands	r2, r3
 8006c66:	23c0      	movs	r3, #192	; 0xc0
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d10c      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006c6e:	4b40      	ldr	r3, [pc, #256]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a44      	ldr	r2, [pc, #272]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	0019      	movs	r1, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	23c0      	movs	r3, #192	; 0xc0
 8006c7e:	039b      	lsls	r3, r3, #14
 8006c80:	401a      	ands	r2, r3
 8006c82:	4b3b      	ldr	r3, [pc, #236]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c84:	430a      	orrs	r2, r1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	4b39      	ldr	r3, [pc, #228]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c8a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	23c0      	movs	r3, #192	; 0xc0
 8006c92:	029b      	lsls	r3, r3, #10
 8006c94:	401a      	ands	r2, r3
 8006c96:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c9c:	2317      	movs	r3, #23
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d105      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006caa:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cac:	4936      	ldr	r1, [pc, #216]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006cae:	400a      	ands	r2, r1
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4013      	ands	r3, r2
 8006cba:	d009      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cbc:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	4393      	bics	r3, r2
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cda:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	220c      	movs	r2, #12
 8006ce0:	4393      	bics	r3, r2
 8006ce2:	0019      	movs	r1, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	4b21      	ldr	r3, [pc, #132]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cea:	430a      	orrs	r2, r1
 8006cec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfc:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	0019      	movs	r1, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695a      	ldr	r2, [r3, #20]
 8006d06:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2208      	movs	r2, #8
 8006d12:	4013      	ands	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d16:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	0019      	movs	r1, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699a      	ldr	r2, [r3, #24]
 8006d24:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d26:	430a      	orrs	r2, r1
 8006d28:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2240      	movs	r2, #64	; 0x40
 8006d30:	4013      	ands	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d34:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d38:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	0019      	movs	r1, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d44:	430a      	orrs	r2, r1
 8006d46:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2280      	movs	r2, #128	; 0x80
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	4a10      	ldr	r2, [pc, #64]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	0019      	movs	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d62:	430a      	orrs	r2, r1
 8006d64:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	0018      	movs	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b006      	add	sp, #24
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40021000 	.word	0x40021000
 8006d74:	40007000 	.word	0x40007000
 8006d78:	fffcffff 	.word	0xfffcffff
 8006d7c:	fff7ffff 	.word	0xfff7ffff
 8006d80:	00001388 	.word	0x00001388
 8006d84:	ffcfffff 	.word	0xffcfffff
 8006d88:	efffffff 	.word	0xefffffff
 8006d8c:	fffff3ff 	.word	0xfffff3ff
 8006d90:	ffffcfff 	.word	0xffffcfff
 8006d94:	fbffffff 	.word	0xfbffffff
 8006d98:	fff3ffff 	.word	0xfff3ffff

08006d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e083      	b.n	8006eb6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	2382      	movs	r3, #130	; 0x82
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d009      	beq.n	8006dd6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	61da      	str	r2, [r3, #28]
 8006dc8:	e005      	b.n	8006dd6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2251      	movs	r2, #81	; 0x51
 8006de0:	5c9b      	ldrb	r3, [r3, r2]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d107      	bne.n	8006df8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2250      	movs	r2, #80	; 0x50
 8006dec:	2100      	movs	r1, #0
 8006dee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7fc fdce 	bl	8003994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2251      	movs	r2, #81	; 0x51
 8006dfc:	2102      	movs	r1, #2
 8006dfe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2140      	movs	r1, #64	; 0x40
 8006e0c:	438a      	bics	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	2382      	movs	r3, #130	; 0x82
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	401a      	ands	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6899      	ldr	r1, [r3, #8]
 8006e1e:	2384      	movs	r3, #132	; 0x84
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	400b      	ands	r3, r1
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68d9      	ldr	r1, [r3, #12]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	400b      	ands	r3, r1
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2102      	movs	r1, #2
 8006e38:	400b      	ands	r3, r1
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	2101      	movs	r1, #1
 8006e42:	400b      	ands	r3, r1
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6999      	ldr	r1, [r3, #24]
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	400b      	ands	r3, r1
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	2138      	movs	r1, #56	; 0x38
 8006e58:	400b      	ands	r3, r1
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	2180      	movs	r1, #128	; 0x80
 8006e62:	400b      	ands	r3, r1
 8006e64:	431a      	orrs	r2, r3
 8006e66:	0011      	movs	r1, r2
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	019b      	lsls	r3, r3, #6
 8006e70:	401a      	ands	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	2204      	movs	r2, #4
 8006e82:	4013      	ands	r3, r2
 8006e84:	0019      	movs	r1, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	401a      	ands	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4907      	ldr	r1, [pc, #28]	; (8006ec0 <HAL_SPI_Init+0x124>)
 8006ea2:	400a      	ands	r2, r1
 8006ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2251      	movs	r2, #81	; 0x51
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b002      	add	sp, #8
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	fffff7ff 	.word	0xfffff7ff

08006ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e032      	b.n	8006f3c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2239      	movs	r2, #57	; 0x39
 8006eda:	5c9b      	ldrb	r3, [r3, r2]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d107      	bne.n	8006ef2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2238      	movs	r2, #56	; 0x38
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	0018      	movs	r0, r3
 8006eee:	f7fc ff09 	bl	8003d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2239      	movs	r2, #57	; 0x39
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	0019      	movs	r1, r3
 8006f04:	0010      	movs	r0, r2
 8006f06:	f000 f971 	bl	80071ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	223e      	movs	r2, #62	; 0x3e
 8006f0e:	2101      	movs	r1, #1
 8006f10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	223a      	movs	r2, #58	; 0x3a
 8006f16:	2101      	movs	r1, #1
 8006f18:	5499      	strb	r1, [r3, r2]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	223b      	movs	r2, #59	; 0x3b
 8006f1e:	2101      	movs	r1, #1
 8006f20:	5499      	strb	r1, [r3, r2]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	223c      	movs	r2, #60	; 0x3c
 8006f26:	2101      	movs	r1, #1
 8006f28:	5499      	strb	r1, [r3, r2]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	223d      	movs	r2, #61	; 0x3d
 8006f2e:	2101      	movs	r1, #1
 8006f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2239      	movs	r2, #57	; 0x39
 8006f36:	2101      	movs	r1, #1
 8006f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b002      	add	sp, #8
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2239      	movs	r2, #57	; 0x39
 8006f50:	5c9b      	ldrb	r3, [r3, r2]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d001      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e036      	b.n	8006fca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2239      	movs	r2, #57	; 0x39
 8006f60:	2102      	movs	r1, #2
 8006f62:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2101      	movs	r1, #1
 8006f70:	430a      	orrs	r2, r1
 8006f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	05db      	lsls	r3, r3, #23
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d009      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x50>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a13      	ldr	r2, [pc, #76]	; (8006fd4 <HAL_TIM_Base_Start_IT+0x90>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x50>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <HAL_TIM_Base_Start_IT+0x94>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d111      	bne.n	8006fb8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2207      	movs	r2, #7
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b06      	cmp	r3, #6
 8006fa4:	d010      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb6:	e007      	b.n	8006fc8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	0018      	movs	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b004      	add	sp, #16
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	40010800 	.word	0x40010800
 8006fd8:	40011400 	.word	0x40011400

08006fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2202      	movs	r2, #2
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d124      	bne.n	800703c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d11d      	bne.n	800703c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2203      	movs	r2, #3
 8007006:	4252      	negs	r2, r2
 8007008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	2203      	movs	r2, #3
 8007018:	4013      	ands	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	0018      	movs	r0, r3
 8007020:	f000 f8cc 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 8007024:	e007      	b.n	8007036 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	0018      	movs	r0, r3
 800702a:	f000 f8bf 	bl	80071ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	0018      	movs	r0, r3
 8007032:	f000 f8cb 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2204      	movs	r2, #4
 8007044:	4013      	ands	r3, r2
 8007046:	2b04      	cmp	r3, #4
 8007048:	d125      	bne.n	8007096 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2204      	movs	r2, #4
 8007052:	4013      	ands	r3, r2
 8007054:	2b04      	cmp	r3, #4
 8007056:	d11e      	bne.n	8007096 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2205      	movs	r2, #5
 800705e:	4252      	negs	r2, r2
 8007060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699a      	ldr	r2, [r3, #24]
 800706e:	23c0      	movs	r3, #192	; 0xc0
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4013      	ands	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	0018      	movs	r0, r3
 800707a:	f000 f89f 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 800707e:	e007      	b.n	8007090 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	0018      	movs	r0, r3
 8007084:	f000 f892 	bl	80071ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	0018      	movs	r0, r3
 800708c:	f000 f89e 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2208      	movs	r2, #8
 800709e:	4013      	ands	r3, r2
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d124      	bne.n	80070ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	2208      	movs	r2, #8
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b08      	cmp	r3, #8
 80070b0:	d11d      	bne.n	80070ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2209      	movs	r2, #9
 80070b8:	4252      	negs	r2, r2
 80070ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2204      	movs	r2, #4
 80070c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	2203      	movs	r2, #3
 80070ca:	4013      	ands	r3, r2
 80070cc:	d004      	beq.n	80070d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	0018      	movs	r0, r3
 80070d2:	f000 f873 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 80070d6:	e007      	b.n	80070e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	0018      	movs	r0, r3
 80070dc:	f000 f866 	bl	80071ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	0018      	movs	r0, r3
 80070e4:	f000 f872 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2210      	movs	r2, #16
 80070f6:	4013      	ands	r3, r2
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d125      	bne.n	8007148 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2210      	movs	r2, #16
 8007104:	4013      	ands	r3, r2
 8007106:	2b10      	cmp	r3, #16
 8007108:	d11e      	bne.n	8007148 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2211      	movs	r2, #17
 8007110:	4252      	negs	r2, r2
 8007112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2208      	movs	r2, #8
 8007118:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69da      	ldr	r2, [r3, #28]
 8007120:	23c0      	movs	r3, #192	; 0xc0
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4013      	ands	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	0018      	movs	r0, r3
 800712c:	f000 f846 	bl	80071bc <HAL_TIM_IC_CaptureCallback>
 8007130:	e007      	b.n	8007142 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 f839 	bl	80071ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	0018      	movs	r0, r3
 800713e:	f000 f845 	bl	80071cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2201      	movs	r2, #1
 8007150:	4013      	ands	r3, r2
 8007152:	2b01      	cmp	r3, #1
 8007154:	d10f      	bne.n	8007176 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	4013      	ands	r3, r2
 8007160:	2b01      	cmp	r3, #1
 8007162:	d108      	bne.n	8007176 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2202      	movs	r2, #2
 800716a:	4252      	negs	r2, r2
 800716c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0018      	movs	r0, r3
 8007172:	f7fc fad5 	bl	8003720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2240      	movs	r2, #64	; 0x40
 800717e:	4013      	ands	r3, r2
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d10f      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	2240      	movs	r2, #64	; 0x40
 800718c:	4013      	ands	r3, r2
 800718e:	2b40      	cmp	r3, #64	; 0x40
 8007190:	d108      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2241      	movs	r2, #65	; 0x41
 8007198:	4252      	negs	r2, r2
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	0018      	movs	r0, r3
 80071a0:	f000 f81c 	bl	80071dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a4:	46c0      	nop			; (mov r8, r8)
 80071a6:	46bd      	mov	sp, r7
 80071a8:	b002      	add	sp, #8
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071b4:	46c0      	nop			; (mov r8, r8)
 80071b6:	46bd      	mov	sp, r7
 80071b8:	b002      	add	sp, #8
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c4:	46c0      	nop			; (mov r8, r8)
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b002      	add	sp, #8
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b002      	add	sp, #8
 80071ea:	bd80      	pop	{r7, pc}

080071ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	2380      	movs	r3, #128	; 0x80
 8007200:	05db      	lsls	r3, r3, #23
 8007202:	429a      	cmp	r2, r3
 8007204:	d007      	beq.n	8007216 <TIM_Base_SetConfig+0x2a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1f      	ldr	r2, [pc, #124]	; (8007288 <TIM_Base_SetConfig+0x9c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d003      	beq.n	8007216 <TIM_Base_SetConfig+0x2a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1e      	ldr	r2, [pc, #120]	; (800728c <TIM_Base_SetConfig+0xa0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d108      	bne.n	8007228 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2270      	movs	r2, #112	; 0x70
 800721a:	4393      	bics	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	2380      	movs	r3, #128	; 0x80
 800722c:	05db      	lsls	r3, r3, #23
 800722e:	429a      	cmp	r2, r3
 8007230:	d007      	beq.n	8007242 <TIM_Base_SetConfig+0x56>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a14      	ldr	r2, [pc, #80]	; (8007288 <TIM_Base_SetConfig+0x9c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_Base_SetConfig+0x56>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a13      	ldr	r2, [pc, #76]	; (800728c <TIM_Base_SetConfig+0xa0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d108      	bne.n	8007254 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a12      	ldr	r2, [pc, #72]	; (8007290 <TIM_Base_SetConfig+0xa4>)
 8007246:	4013      	ands	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2280      	movs	r2, #128	; 0x80
 8007258:	4393      	bics	r3, r2
 800725a:	001a      	movs	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	615a      	str	r2, [r3, #20]
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	b004      	add	sp, #16
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40010800 	.word	0x40010800
 800728c:	40011400 	.word	0x40011400
 8007290:	fffffcff 	.word	0xfffffcff

08007294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2238      	movs	r2, #56	; 0x38
 80072a2:	5c9b      	ldrb	r3, [r3, r2]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e042      	b.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2238      	movs	r2, #56	; 0x38
 80072b0:	2101      	movs	r1, #1
 80072b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2239      	movs	r2, #57	; 0x39
 80072b8:	2102      	movs	r1, #2
 80072ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2270      	movs	r2, #112	; 0x70
 80072d0:	4393      	bics	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4313      	orrs	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	2380      	movs	r3, #128	; 0x80
 80072ec:	05db      	lsls	r3, r3, #23
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d009      	beq.n	8007306 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a11      	ldr	r2, [pc, #68]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0f      	ldr	r2, [pc, #60]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d10c      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2280      	movs	r2, #128	; 0x80
 800730a:	4393      	bics	r3, r2
 800730c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	4313      	orrs	r3, r2
 8007316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2239      	movs	r2, #57	; 0x39
 8007324:	2101      	movs	r1, #1
 8007326:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2238      	movs	r2, #56	; 0x38
 800732c:	2100      	movs	r1, #0
 800732e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	0018      	movs	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	b004      	add	sp, #16
 8007338:	bd80      	pop	{r7, pc}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	40010800 	.word	0x40010800
 8007340:	40011400 	.word	0x40011400

08007344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e044      	b.n	80073e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d107      	bne.n	800736e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2278      	movs	r2, #120	; 0x78
 8007362:	2100      	movs	r1, #0
 8007364:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0018      	movs	r0, r3
 800736a:	f7fc fd4b 	bl	8003e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2224      	movs	r2, #36	; 0x24
 8007372:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2101      	movs	r1, #1
 8007380:	438a      	bics	r2, r1
 8007382:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	0018      	movs	r0, r3
 8007388:	f000 fc2c 	bl	8007be4 <UART_SetConfig>
 800738c:	0003      	movs	r3, r0
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e024      	b.n	80073e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f000 fea3 	bl	80080ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	490d      	ldr	r1, [pc, #52]	; (80073e8 <HAL_UART_Init+0xa4>)
 80073b2:	400a      	ands	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	212a      	movs	r1, #42	; 0x2a
 80073c2:	438a      	bics	r2, r1
 80073c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2101      	movs	r1, #1
 80073d2:	430a      	orrs	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 ff3b 	bl	8008254 <UART_CheckIdleState>
 80073de:	0003      	movs	r3, r0
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b002      	add	sp, #8
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	ffffb7ff 	.word	0xffffb7ff

080073ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	1dbb      	adds	r3, r7, #6
 80073fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007400:	2b20      	cmp	r3, #32
 8007402:	d000      	beq.n	8007406 <HAL_UART_Transmit+0x1a>
 8007404:	e08c      	b.n	8007520 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_UART_Transmit+0x28>
 800740c:	1dbb      	adds	r3, r7, #6
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e084      	b.n	8007522 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	015b      	lsls	r3, r3, #5
 8007420:	429a      	cmp	r2, r3
 8007422:	d109      	bne.n	8007438 <HAL_UART_Transmit+0x4c>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2201      	movs	r2, #1
 8007430:	4013      	ands	r3, r2
 8007432:	d001      	beq.n	8007438 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e074      	b.n	8007522 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2284      	movs	r2, #132	; 0x84
 800743c:	2100      	movs	r1, #0
 800743e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2221      	movs	r2, #33	; 0x21
 8007444:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007446:	f7fc fdeb 	bl	8004020 <HAL_GetTick>
 800744a:	0003      	movs	r3, r0
 800744c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1dba      	adds	r2, r7, #6
 8007452:	2150      	movs	r1, #80	; 0x50
 8007454:	8812      	ldrh	r2, [r2, #0]
 8007456:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	1dba      	adds	r2, r7, #6
 800745c:	2152      	movs	r1, #82	; 0x52
 800745e:	8812      	ldrh	r2, [r2, #0]
 8007460:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	2380      	movs	r3, #128	; 0x80
 8007468:	015b      	lsls	r3, r3, #5
 800746a:	429a      	cmp	r2, r3
 800746c:	d108      	bne.n	8007480 <HAL_UART_Transmit+0x94>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	e003      	b.n	8007488 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007488:	e02f      	b.n	80074ea <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	0013      	movs	r3, r2
 8007494:	2200      	movs	r2, #0
 8007496:	2180      	movs	r1, #128	; 0x80
 8007498:	f000 ff84 	bl	80083a4 <UART_WaitOnFlagUntilTimeout>
 800749c:	1e03      	subs	r3, r0, #0
 800749e:	d004      	beq.n	80074aa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e03b      	b.n	8007522 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10b      	bne.n	80074c8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	001a      	movs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	05d2      	lsls	r2, r2, #23
 80074bc:	0dd2      	lsrs	r2, r2, #23
 80074be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	3302      	adds	r3, #2
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e007      	b.n	80074d8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3301      	adds	r3, #1
 80074d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2252      	movs	r2, #82	; 0x52
 80074dc:	5a9b      	ldrh	r3, [r3, r2]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b299      	uxth	r1, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2252      	movs	r2, #82	; 0x52
 80074e8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2252      	movs	r2, #82	; 0x52
 80074ee:	5a9b      	ldrh	r3, [r3, r2]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1c9      	bne.n	800748a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	0013      	movs	r3, r2
 8007500:	2200      	movs	r2, #0
 8007502:	2140      	movs	r1, #64	; 0x40
 8007504:	f000 ff4e 	bl	80083a4 <UART_WaitOnFlagUntilTimeout>
 8007508:	1e03      	subs	r3, r0, #0
 800750a:	d004      	beq.n	8007516 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e005      	b.n	8007522 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2220      	movs	r2, #32
 800751a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	e000      	b.n	8007522 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007520:	2302      	movs	r3, #2
  }
}
 8007522:	0018      	movs	r0, r3
 8007524:	46bd      	mov	sp, r7
 8007526:	b008      	add	sp, #32
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	1dbb      	adds	r3, r7, #6
 8007538:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2280      	movs	r2, #128	; 0x80
 800753e:	589b      	ldr	r3, [r3, r2]
 8007540:	2b20      	cmp	r3, #32
 8007542:	d14a      	bne.n	80075da <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_UART_Receive_IT+0x26>
 800754a:	1dbb      	adds	r3, r7, #6
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e042      	b.n	80075dc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	2380      	movs	r3, #128	; 0x80
 800755c:	015b      	lsls	r3, r3, #5
 800755e:	429a      	cmp	r2, r3
 8007560:	d109      	bne.n	8007576 <HAL_UART_Receive_IT+0x4a>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d105      	bne.n	8007576 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2201      	movs	r2, #1
 800756e:	4013      	ands	r3, r2
 8007570:	d001      	beq.n	8007576 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e032      	b.n	80075dc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_UART_Receive_IT+0xb8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d020      	beq.n	80075c8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	4013      	ands	r3, r2
 8007592:	d019      	beq.n	80075c8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007594:	f3ef 8310 	mrs	r3, PRIMASK
 8007598:	613b      	str	r3, [r7, #16]
  return(result);
 800759a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	2301      	movs	r3, #1
 80075a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f383 8810 	msr	PRIMASK, r3
}
 80075a8:	46c0      	nop			; (mov r8, r8)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2180      	movs	r1, #128	; 0x80
 80075b6:	04c9      	lsls	r1, r1, #19
 80075b8:	430a      	orrs	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f383 8810 	msr	PRIMASK, r3
}
 80075c6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075c8:	1dbb      	adds	r3, r7, #6
 80075ca:	881a      	ldrh	r2, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 ff51 	bl	8008478 <UART_Start_Receive_IT>
 80075d6:	0003      	movs	r3, r0
 80075d8:	e000      	b.n	80075dc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80075da:	2302      	movs	r3, #2
  }
}
 80075dc:	0018      	movs	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	b008      	add	sp, #32
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	40004800 	.word	0x40004800

080075e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075e8:	b590      	push	{r4, r7, lr}
 80075ea:	b0ab      	sub	sp, #172	; 0xac
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	22a4      	movs	r2, #164	; 0xa4
 80075f8:	18b9      	adds	r1, r7, r2
 80075fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	20a0      	movs	r0, #160	; 0xa0
 8007604:	1839      	adds	r1, r7, r0
 8007606:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	219c      	movs	r1, #156	; 0x9c
 8007610:	1879      	adds	r1, r7, r1
 8007612:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007614:	0011      	movs	r1, r2
 8007616:	18bb      	adds	r3, r7, r2
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a99      	ldr	r2, [pc, #612]	; (8007880 <HAL_UART_IRQHandler+0x298>)
 800761c:	4013      	ands	r3, r2
 800761e:	2298      	movs	r2, #152	; 0x98
 8007620:	18bc      	adds	r4, r7, r2
 8007622:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007624:	18bb      	adds	r3, r7, r2
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d114      	bne.n	8007656 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800762c:	187b      	adds	r3, r7, r1
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2220      	movs	r2, #32
 8007632:	4013      	ands	r3, r2
 8007634:	d00f      	beq.n	8007656 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007636:	183b      	adds	r3, r7, r0
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2220      	movs	r2, #32
 800763c:	4013      	ands	r3, r2
 800763e:	d00a      	beq.n	8007656 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007644:	2b00      	cmp	r3, #0
 8007646:	d100      	bne.n	800764a <HAL_UART_IRQHandler+0x62>
 8007648:	e2a0      	b.n	8007b8c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	0010      	movs	r0, r2
 8007652:	4798      	blx	r3
      }
      return;
 8007654:	e29a      	b.n	8007b8c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007656:	2398      	movs	r3, #152	; 0x98
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d100      	bne.n	8007662 <HAL_UART_IRQHandler+0x7a>
 8007660:	e114      	b.n	800788c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007662:	239c      	movs	r3, #156	; 0x9c
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	4013      	ands	r3, r2
 800766c:	d106      	bne.n	800767c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800766e:	23a0      	movs	r3, #160	; 0xa0
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a83      	ldr	r2, [pc, #524]	; (8007884 <HAL_UART_IRQHandler+0x29c>)
 8007676:	4013      	ands	r3, r2
 8007678:	d100      	bne.n	800767c <HAL_UART_IRQHandler+0x94>
 800767a:	e107      	b.n	800788c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800767c:	23a4      	movs	r3, #164	; 0xa4
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2201      	movs	r2, #1
 8007684:	4013      	ands	r3, r2
 8007686:	d012      	beq.n	80076ae <HAL_UART_IRQHandler+0xc6>
 8007688:	23a0      	movs	r3, #160	; 0xa0
 800768a:	18fb      	adds	r3, r7, r3
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	2380      	movs	r3, #128	; 0x80
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	4013      	ands	r3, r2
 8007694:	d00b      	beq.n	80076ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2201      	movs	r2, #1
 800769c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2284      	movs	r2, #132	; 0x84
 80076a2:	589b      	ldr	r3, [r3, r2]
 80076a4:	2201      	movs	r2, #1
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2184      	movs	r1, #132	; 0x84
 80076ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076ae:	23a4      	movs	r3, #164	; 0xa4
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2202      	movs	r2, #2
 80076b6:	4013      	ands	r3, r2
 80076b8:	d011      	beq.n	80076de <HAL_UART_IRQHandler+0xf6>
 80076ba:	239c      	movs	r3, #156	; 0x9c
 80076bc:	18fb      	adds	r3, r7, r3
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2201      	movs	r2, #1
 80076c2:	4013      	ands	r3, r2
 80076c4:	d00b      	beq.n	80076de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2202      	movs	r2, #2
 80076cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2284      	movs	r2, #132	; 0x84
 80076d2:	589b      	ldr	r3, [r3, r2]
 80076d4:	2204      	movs	r2, #4
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2184      	movs	r1, #132	; 0x84
 80076dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076de:	23a4      	movs	r3, #164	; 0xa4
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2204      	movs	r2, #4
 80076e6:	4013      	ands	r3, r2
 80076e8:	d011      	beq.n	800770e <HAL_UART_IRQHandler+0x126>
 80076ea:	239c      	movs	r3, #156	; 0x9c
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2201      	movs	r2, #1
 80076f2:	4013      	ands	r3, r2
 80076f4:	d00b      	beq.n	800770e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2204      	movs	r2, #4
 80076fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2284      	movs	r2, #132	; 0x84
 8007702:	589b      	ldr	r3, [r3, r2]
 8007704:	2202      	movs	r2, #2
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2184      	movs	r1, #132	; 0x84
 800770c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800770e:	23a4      	movs	r3, #164	; 0xa4
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2208      	movs	r2, #8
 8007716:	4013      	ands	r3, r2
 8007718:	d017      	beq.n	800774a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800771a:	23a0      	movs	r3, #160	; 0xa0
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2220      	movs	r2, #32
 8007722:	4013      	ands	r3, r2
 8007724:	d105      	bne.n	8007732 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007726:	239c      	movs	r3, #156	; 0x9c
 8007728:	18fb      	adds	r3, r7, r3
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2201      	movs	r2, #1
 800772e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007730:	d00b      	beq.n	800774a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2208      	movs	r2, #8
 8007738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2284      	movs	r2, #132	; 0x84
 800773e:	589b      	ldr	r3, [r3, r2]
 8007740:	2208      	movs	r2, #8
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2184      	movs	r1, #132	; 0x84
 8007748:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800774a:	23a4      	movs	r3, #164	; 0xa4
 800774c:	18fb      	adds	r3, r7, r3
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	4013      	ands	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_UART_IRQHandler+0x198>
 8007758:	23a0      	movs	r3, #160	; 0xa0
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	2380      	movs	r3, #128	; 0x80
 8007760:	04db      	lsls	r3, r3, #19
 8007762:	4013      	ands	r3, r2
 8007764:	d00c      	beq.n	8007780 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2280      	movs	r2, #128	; 0x80
 800776c:	0112      	lsls	r2, r2, #4
 800776e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2284      	movs	r2, #132	; 0x84
 8007774:	589b      	ldr	r3, [r3, r2]
 8007776:	2220      	movs	r2, #32
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2184      	movs	r1, #132	; 0x84
 800777e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2284      	movs	r2, #132	; 0x84
 8007784:	589b      	ldr	r3, [r3, r2]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d100      	bne.n	800778c <HAL_UART_IRQHandler+0x1a4>
 800778a:	e201      	b.n	8007b90 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800778c:	23a4      	movs	r3, #164	; 0xa4
 800778e:	18fb      	adds	r3, r7, r3
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2220      	movs	r2, #32
 8007794:	4013      	ands	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007798:	23a0      	movs	r3, #160	; 0xa0
 800779a:	18fb      	adds	r3, r7, r3
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2220      	movs	r2, #32
 80077a0:	4013      	ands	r3, r2
 80077a2:	d008      	beq.n	80077b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	0010      	movs	r0, r2
 80077b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2284      	movs	r2, #132	; 0x84
 80077ba:	589b      	ldr	r3, [r3, r2]
 80077bc:	2194      	movs	r1, #148	; 0x94
 80077be:	187a      	adds	r2, r7, r1
 80077c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2240      	movs	r2, #64	; 0x40
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	d004      	beq.n	80077da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077d0:	187b      	adds	r3, r7, r1
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2228      	movs	r2, #40	; 0x28
 80077d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077d8:	d047      	beq.n	800786a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f000 ff15 	bl	800860c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2240      	movs	r2, #64	; 0x40
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d137      	bne.n	8007860 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f0:	f3ef 8310 	mrs	r3, PRIMASK
 80077f4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80077f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f8:	2090      	movs	r0, #144	; 0x90
 80077fa:	183a      	adds	r2, r7, r0
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	2301      	movs	r3, #1
 8007800:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007804:	f383 8810 	msr	PRIMASK, r3
}
 8007808:	46c0      	nop			; (mov r8, r8)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2140      	movs	r1, #64	; 0x40
 8007816:	438a      	bics	r2, r1
 8007818:	609a      	str	r2, [r3, #8]
 800781a:	183b      	adds	r3, r7, r0
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007822:	f383 8810 	msr	PRIMASK, r3
}
 8007826:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800782c:	2b00      	cmp	r3, #0
 800782e:	d012      	beq.n	8007856 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007834:	4a14      	ldr	r2, [pc, #80]	; (8007888 <HAL_UART_IRQHandler+0x2a0>)
 8007836:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783c:	0018      	movs	r0, r3
 800783e:	f7fd fa71 	bl	8004d24 <HAL_DMA_Abort_IT>
 8007842:	1e03      	subs	r3, r0, #0
 8007844:	d01a      	beq.n	800787c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007850:	0018      	movs	r0, r3
 8007852:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	e012      	b.n	800787c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0018      	movs	r0, r3
 800785a:	f000 f9af 	bl	8007bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785e:	e00d      	b.n	800787c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	0018      	movs	r0, r3
 8007864:	f000 f9aa 	bl	8007bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007868:	e008      	b.n	800787c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	0018      	movs	r0, r3
 800786e:	f000 f9a5 	bl	8007bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2284      	movs	r2, #132	; 0x84
 8007876:	2100      	movs	r1, #0
 8007878:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800787a:	e189      	b.n	8007b90 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800787c:	46c0      	nop			; (mov r8, r8)
    return;
 800787e:	e187      	b.n	8007b90 <HAL_UART_IRQHandler+0x5a8>
 8007880:	0000080f 	.word	0x0000080f
 8007884:	04000120 	.word	0x04000120
 8007888:	080086d5 	.word	0x080086d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007890:	2b01      	cmp	r3, #1
 8007892:	d000      	beq.n	8007896 <HAL_UART_IRQHandler+0x2ae>
 8007894:	e13b      	b.n	8007b0e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007896:	23a4      	movs	r3, #164	; 0xa4
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2210      	movs	r2, #16
 800789e:	4013      	ands	r3, r2
 80078a0:	d100      	bne.n	80078a4 <HAL_UART_IRQHandler+0x2bc>
 80078a2:	e134      	b.n	8007b0e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078a4:	23a0      	movs	r3, #160	; 0xa0
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2210      	movs	r2, #16
 80078ac:	4013      	ands	r3, r2
 80078ae:	d100      	bne.n	80078b2 <HAL_UART_IRQHandler+0x2ca>
 80078b0:	e12d      	b.n	8007b0e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2210      	movs	r2, #16
 80078b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2240      	movs	r2, #64	; 0x40
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	d000      	beq.n	80078ca <HAL_UART_IRQHandler+0x2e2>
 80078c8:	e0a1      	b.n	8007a0e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	217e      	movs	r1, #126	; 0x7e
 80078d4:	187b      	adds	r3, r7, r1
 80078d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80078d8:	187b      	adds	r3, r7, r1
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d100      	bne.n	80078e2 <HAL_UART_IRQHandler+0x2fa>
 80078e0:	e158      	b.n	8007b94 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2258      	movs	r2, #88	; 0x58
 80078e6:	5a9b      	ldrh	r3, [r3, r2]
 80078e8:	187a      	adds	r2, r7, r1
 80078ea:	8812      	ldrh	r2, [r2, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d300      	bcc.n	80078f2 <HAL_UART_IRQHandler+0x30a>
 80078f0:	e150      	b.n	8007b94 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	187a      	adds	r2, r7, r1
 80078f6:	215a      	movs	r1, #90	; 0x5a
 80078f8:	8812      	ldrh	r2, [r2, #0]
 80078fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2220      	movs	r2, #32
 8007906:	4013      	ands	r3, r2
 8007908:	d16f      	bne.n	80079ea <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790a:	f3ef 8310 	mrs	r3, PRIMASK
 800790e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007912:	67bb      	str	r3, [r7, #120]	; 0x78
 8007914:	2301      	movs	r3, #1
 8007916:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791a:	f383 8810 	msr	PRIMASK, r3
}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	499e      	ldr	r1, [pc, #632]	; (8007ba4 <HAL_UART_IRQHandler+0x5bc>)
 800792c:	400a      	ands	r2, r1
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007932:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	f383 8810 	msr	PRIMASK, r3
}
 800793a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800793c:	f3ef 8310 	mrs	r3, PRIMASK
 8007940:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007944:	677b      	str	r3, [r7, #116]	; 0x74
 8007946:	2301      	movs	r3, #1
 8007948:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794c:	f383 8810 	msr	PRIMASK, r3
}
 8007950:	46c0      	nop			; (mov r8, r8)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2101      	movs	r1, #1
 800795e:	438a      	bics	r2, r1
 8007960:	609a      	str	r2, [r3, #8]
 8007962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007964:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007968:	f383 8810 	msr	PRIMASK, r3
}
 800796c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800796e:	f3ef 8310 	mrs	r3, PRIMASK
 8007972:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007974:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007976:	673b      	str	r3, [r7, #112]	; 0x70
 8007978:	2301      	movs	r3, #1
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800797c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797e:	f383 8810 	msr	PRIMASK, r3
}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689a      	ldr	r2, [r3, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2140      	movs	r1, #64	; 0x40
 8007990:	438a      	bics	r2, r1
 8007992:	609a      	str	r2, [r3, #8]
 8007994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007996:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800799a:	f383 8810 	msr	PRIMASK, r3
}
 800799e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2280      	movs	r2, #128	; 0x80
 80079a4:	2120      	movs	r1, #32
 80079a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ae:	f3ef 8310 	mrs	r3, PRIMASK
 80079b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80079b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079b8:	2301      	movs	r3, #1
 80079ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079be:	f383 8810 	msr	PRIMASK, r3
}
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2110      	movs	r1, #16
 80079d0:	438a      	bics	r2, r1
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079da:	f383 8810 	msr	PRIMASK, r3
}
 80079de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7fd f95d 	bl	8004ca4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2258      	movs	r2, #88	; 0x58
 80079f4:	5a9a      	ldrh	r2, [r3, r2]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	215a      	movs	r1, #90	; 0x5a
 80079fa:	5a5b      	ldrh	r3, [r3, r1]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0011      	movs	r1, r2
 8007a06:	0018      	movs	r0, r3
 8007a08:	f000 f8e0 	bl	8007bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a0c:	e0c2      	b.n	8007b94 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2258      	movs	r2, #88	; 0x58
 8007a12:	5a99      	ldrh	r1, [r3, r2]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	225a      	movs	r2, #90	; 0x5a
 8007a18:	5a9b      	ldrh	r3, [r3, r2]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	208e      	movs	r0, #142	; 0x8e
 8007a1e:	183b      	adds	r3, r7, r0
 8007a20:	1a8a      	subs	r2, r1, r2
 8007a22:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	225a      	movs	r2, #90	; 0x5a
 8007a28:	5a9b      	ldrh	r3, [r3, r2]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d100      	bne.n	8007a32 <HAL_UART_IRQHandler+0x44a>
 8007a30:	e0b2      	b.n	8007b98 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8007a32:	183b      	adds	r3, r7, r0
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d100      	bne.n	8007a3c <HAL_UART_IRQHandler+0x454>
 8007a3a:	e0ad      	b.n	8007b98 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a42:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a44:	2488      	movs	r4, #136	; 0x88
 8007a46:	193a      	adds	r2, r7, r4
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f383 8810 	msr	PRIMASK, r3
}
 8007a54:	46c0      	nop			; (mov r8, r8)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4951      	ldr	r1, [pc, #324]	; (8007ba8 <HAL_UART_IRQHandler+0x5c0>)
 8007a62:	400a      	ands	r2, r1
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	193b      	adds	r3, r7, r4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f383 8810 	msr	PRIMASK, r3
}
 8007a72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a74:	f3ef 8310 	mrs	r3, PRIMASK
 8007a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a7a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7c:	2484      	movs	r4, #132	; 0x84
 8007a7e:	193a      	adds	r2, r7, r4
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	2301      	movs	r3, #1
 8007a84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f383 8810 	msr	PRIMASK, r3
}
 8007a8c:	46c0      	nop			; (mov r8, r8)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2101      	movs	r1, #1
 8007a9a:	438a      	bics	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]
 8007a9e:	193b      	adds	r3, r7, r4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	f383 8810 	msr	PRIMASK, r3
}
 8007aaa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2280      	movs	r2, #128	; 0x80
 8007ab0:	2120      	movs	r1, #32
 8007ab2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac8:	2480      	movs	r4, #128	; 0x80
 8007aca:	193a      	adds	r2, r7, r4
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	f383 8810 	msr	PRIMASK, r3
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2110      	movs	r1, #16
 8007ae6:	438a      	bics	r2, r1
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	193b      	adds	r3, r7, r4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	f383 8810 	msr	PRIMASK, r3
}
 8007af6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007afe:	183b      	adds	r3, r7, r0
 8007b00:	881a      	ldrh	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	0011      	movs	r1, r2
 8007b06:	0018      	movs	r0, r3
 8007b08:	f000 f860 	bl	8007bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b0c:	e044      	b.n	8007b98 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b0e:	23a4      	movs	r3, #164	; 0xa4
 8007b10:	18fb      	adds	r3, r7, r3
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	035b      	lsls	r3, r3, #13
 8007b18:	4013      	ands	r3, r2
 8007b1a:	d010      	beq.n	8007b3e <HAL_UART_IRQHandler+0x556>
 8007b1c:	239c      	movs	r3, #156	; 0x9c
 8007b1e:	18fb      	adds	r3, r7, r3
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	2380      	movs	r3, #128	; 0x80
 8007b24:	03db      	lsls	r3, r3, #15
 8007b26:	4013      	ands	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2280      	movs	r2, #128	; 0x80
 8007b30:	0352      	lsls	r2, r2, #13
 8007b32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	0018      	movs	r0, r3
 8007b38:	f000 ffd2 	bl	8008ae0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b3c:	e02f      	b.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b3e:	23a4      	movs	r3, #164	; 0xa4
 8007b40:	18fb      	adds	r3, r7, r3
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2280      	movs	r2, #128	; 0x80
 8007b46:	4013      	ands	r3, r2
 8007b48:	d00f      	beq.n	8007b6a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b4a:	23a0      	movs	r3, #160	; 0xa0
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2280      	movs	r2, #128	; 0x80
 8007b52:	4013      	ands	r3, r2
 8007b54:	d009      	beq.n	8007b6a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01e      	beq.n	8007b9c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	0010      	movs	r0, r2
 8007b66:	4798      	blx	r3
    }
    return;
 8007b68:	e018      	b.n	8007b9c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b6a:	23a4      	movs	r3, #164	; 0xa4
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2240      	movs	r2, #64	; 0x40
 8007b72:	4013      	ands	r3, r2
 8007b74:	d013      	beq.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
 8007b76:	23a0      	movs	r3, #160	; 0xa0
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2240      	movs	r2, #64	; 0x40
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d00d      	beq.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	0018      	movs	r0, r3
 8007b86:	f000 fdbc 	bl	8008702 <UART_EndTransmit_IT>
    return;
 8007b8a:	e008      	b.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	e006      	b.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
    return;
 8007b90:	46c0      	nop			; (mov r8, r8)
 8007b92:	e004      	b.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	e002      	b.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007b98:	46c0      	nop			; (mov r8, r8)
 8007b9a:	e000      	b.n	8007b9e <HAL_UART_IRQHandler+0x5b6>
    return;
 8007b9c:	46c0      	nop			; (mov r8, r8)
  }

}
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b02b      	add	sp, #172	; 0xac
 8007ba2:	bd90      	pop	{r4, r7, pc}
 8007ba4:	fffffeff 	.word	0xfffffeff
 8007ba8:	fffffedf 	.word	0xfffffedf

08007bac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bb4:	46c0      	nop			; (mov r8, r8)
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b002      	add	sp, #8
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007bc4:	46c0      	nop			; (mov r8, r8)
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b002      	add	sp, #8
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	000a      	movs	r2, r1
 8007bd6:	1cbb      	adds	r3, r7, #2
 8007bd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b002      	add	sp, #8
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007be4:	b5b0      	push	{r4, r5, r7, lr}
 8007be6:	b08e      	sub	sp, #56	; 0x38
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bec:	231a      	movs	r3, #26
 8007bee:	2218      	movs	r2, #24
 8007bf0:	189b      	adds	r3, r3, r2
 8007bf2:	19db      	adds	r3, r3, r7
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4ac6      	ldr	r2, [pc, #792]	; (8007f30 <UART_SetConfig+0x34c>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	0019      	movs	r1, r3
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c22:	430a      	orrs	r2, r1
 8007c24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4ac1      	ldr	r2, [pc, #772]	; (8007f34 <UART_SetConfig+0x350>)
 8007c2e:	4013      	ands	r3, r2
 8007c30:	0019      	movs	r1, r3
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4abb      	ldr	r2, [pc, #748]	; (8007f38 <UART_SetConfig+0x354>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d004      	beq.n	8007c58 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c54:	4313      	orrs	r3, r2
 8007c56:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	4ab7      	ldr	r2, [pc, #732]	; (8007f3c <UART_SetConfig+0x358>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	0019      	movs	r1, r3
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4ab3      	ldr	r2, [pc, #716]	; (8007f40 <UART_SetConfig+0x35c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d131      	bne.n	8007cdc <UART_SetConfig+0xf8>
 8007c78:	4bb2      	ldr	r3, [pc, #712]	; (8007f44 <UART_SetConfig+0x360>)
 8007c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	4013      	ands	r3, r2
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d01d      	beq.n	8007cc0 <UART_SetConfig+0xdc>
 8007c84:	d823      	bhi.n	8007cce <UART_SetConfig+0xea>
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d00c      	beq.n	8007ca4 <UART_SetConfig+0xc0>
 8007c8a:	d820      	bhi.n	8007cce <UART_SetConfig+0xea>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <UART_SetConfig+0xb2>
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d00e      	beq.n	8007cb2 <UART_SetConfig+0xce>
 8007c94:	e01b      	b.n	8007cce <UART_SetConfig+0xea>
 8007c96:	231b      	movs	r3, #27
 8007c98:	2218      	movs	r2, #24
 8007c9a:	189b      	adds	r3, r3, r2
 8007c9c:	19db      	adds	r3, r3, r7
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e09c      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007ca4:	231b      	movs	r3, #27
 8007ca6:	2218      	movs	r2, #24
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	19db      	adds	r3, r3, r7
 8007cac:	2202      	movs	r2, #2
 8007cae:	701a      	strb	r2, [r3, #0]
 8007cb0:	e095      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007cb2:	231b      	movs	r3, #27
 8007cb4:	2218      	movs	r2, #24
 8007cb6:	189b      	adds	r3, r3, r2
 8007cb8:	19db      	adds	r3, r3, r7
 8007cba:	2204      	movs	r2, #4
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e08e      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007cc0:	231b      	movs	r3, #27
 8007cc2:	2218      	movs	r2, #24
 8007cc4:	189b      	adds	r3, r3, r2
 8007cc6:	19db      	adds	r3, r3, r7
 8007cc8:	2208      	movs	r2, #8
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e087      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007cce:	231b      	movs	r3, #27
 8007cd0:	2218      	movs	r2, #24
 8007cd2:	189b      	adds	r3, r3, r2
 8007cd4:	19db      	adds	r3, r3, r7
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e080      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a99      	ldr	r2, [pc, #612]	; (8007f48 <UART_SetConfig+0x364>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d131      	bne.n	8007d4a <UART_SetConfig+0x166>
 8007ce6:	4b97      	ldr	r3, [pc, #604]	; (8007f44 <UART_SetConfig+0x360>)
 8007ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cea:	220c      	movs	r2, #12
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b0c      	cmp	r3, #12
 8007cf0:	d01d      	beq.n	8007d2e <UART_SetConfig+0x14a>
 8007cf2:	d823      	bhi.n	8007d3c <UART_SetConfig+0x158>
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d00c      	beq.n	8007d12 <UART_SetConfig+0x12e>
 8007cf8:	d820      	bhi.n	8007d3c <UART_SetConfig+0x158>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <UART_SetConfig+0x120>
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d00e      	beq.n	8007d20 <UART_SetConfig+0x13c>
 8007d02:	e01b      	b.n	8007d3c <UART_SetConfig+0x158>
 8007d04:	231b      	movs	r3, #27
 8007d06:	2218      	movs	r2, #24
 8007d08:	189b      	adds	r3, r3, r2
 8007d0a:	19db      	adds	r3, r3, r7
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	e065      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007d12:	231b      	movs	r3, #27
 8007d14:	2218      	movs	r2, #24
 8007d16:	189b      	adds	r3, r3, r2
 8007d18:	19db      	adds	r3, r3, r7
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	e05e      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007d20:	231b      	movs	r3, #27
 8007d22:	2218      	movs	r2, #24
 8007d24:	189b      	adds	r3, r3, r2
 8007d26:	19db      	adds	r3, r3, r7
 8007d28:	2204      	movs	r2, #4
 8007d2a:	701a      	strb	r2, [r3, #0]
 8007d2c:	e057      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007d2e:	231b      	movs	r3, #27
 8007d30:	2218      	movs	r2, #24
 8007d32:	189b      	adds	r3, r3, r2
 8007d34:	19db      	adds	r3, r3, r7
 8007d36:	2208      	movs	r2, #8
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e050      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007d3c:	231b      	movs	r3, #27
 8007d3e:	2218      	movs	r2, #24
 8007d40:	189b      	adds	r3, r3, r2
 8007d42:	19db      	adds	r3, r3, r7
 8007d44:	2210      	movs	r2, #16
 8007d46:	701a      	strb	r2, [r3, #0]
 8007d48:	e049      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a7a      	ldr	r2, [pc, #488]	; (8007f38 <UART_SetConfig+0x354>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d13e      	bne.n	8007dd2 <UART_SetConfig+0x1ee>
 8007d54:	4b7b      	ldr	r3, [pc, #492]	; (8007f44 <UART_SetConfig+0x360>)
 8007d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d58:	23c0      	movs	r3, #192	; 0xc0
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	22c0      	movs	r2, #192	; 0xc0
 8007d60:	0112      	lsls	r2, r2, #4
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d027      	beq.n	8007db6 <UART_SetConfig+0x1d2>
 8007d66:	22c0      	movs	r2, #192	; 0xc0
 8007d68:	0112      	lsls	r2, r2, #4
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d82a      	bhi.n	8007dc4 <UART_SetConfig+0x1e0>
 8007d6e:	2280      	movs	r2, #128	; 0x80
 8007d70:	0112      	lsls	r2, r2, #4
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d011      	beq.n	8007d9a <UART_SetConfig+0x1b6>
 8007d76:	2280      	movs	r2, #128	; 0x80
 8007d78:	0112      	lsls	r2, r2, #4
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d822      	bhi.n	8007dc4 <UART_SetConfig+0x1e0>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d004      	beq.n	8007d8c <UART_SetConfig+0x1a8>
 8007d82:	2280      	movs	r2, #128	; 0x80
 8007d84:	00d2      	lsls	r2, r2, #3
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00e      	beq.n	8007da8 <UART_SetConfig+0x1c4>
 8007d8a:	e01b      	b.n	8007dc4 <UART_SetConfig+0x1e0>
 8007d8c:	231b      	movs	r3, #27
 8007d8e:	2218      	movs	r2, #24
 8007d90:	189b      	adds	r3, r3, r2
 8007d92:	19db      	adds	r3, r3, r7
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e021      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007d9a:	231b      	movs	r3, #27
 8007d9c:	2218      	movs	r2, #24
 8007d9e:	189b      	adds	r3, r3, r2
 8007da0:	19db      	adds	r3, r3, r7
 8007da2:	2202      	movs	r2, #2
 8007da4:	701a      	strb	r2, [r3, #0]
 8007da6:	e01a      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007da8:	231b      	movs	r3, #27
 8007daa:	2218      	movs	r2, #24
 8007dac:	189b      	adds	r3, r3, r2
 8007dae:	19db      	adds	r3, r3, r7
 8007db0:	2204      	movs	r2, #4
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e013      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007db6:	231b      	movs	r3, #27
 8007db8:	2218      	movs	r2, #24
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	19db      	adds	r3, r3, r7
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e00c      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007dc4:	231b      	movs	r3, #27
 8007dc6:	2218      	movs	r2, #24
 8007dc8:	189b      	adds	r3, r3, r2
 8007dca:	19db      	adds	r3, r3, r7
 8007dcc:	2210      	movs	r2, #16
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	e005      	b.n	8007dde <UART_SetConfig+0x1fa>
 8007dd2:	231b      	movs	r3, #27
 8007dd4:	2218      	movs	r2, #24
 8007dd6:	189b      	adds	r3, r3, r2
 8007dd8:	19db      	adds	r3, r3, r7
 8007dda:	2210      	movs	r2, #16
 8007ddc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a55      	ldr	r2, [pc, #340]	; (8007f38 <UART_SetConfig+0x354>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d000      	beq.n	8007dea <UART_SetConfig+0x206>
 8007de8:	e084      	b.n	8007ef4 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dea:	231b      	movs	r3, #27
 8007dec:	2218      	movs	r2, #24
 8007dee:	189b      	adds	r3, r3, r2
 8007df0:	19db      	adds	r3, r3, r7
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d01d      	beq.n	8007e34 <UART_SetConfig+0x250>
 8007df8:	dc20      	bgt.n	8007e3c <UART_SetConfig+0x258>
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d015      	beq.n	8007e2a <UART_SetConfig+0x246>
 8007dfe:	dc1d      	bgt.n	8007e3c <UART_SetConfig+0x258>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <UART_SetConfig+0x226>
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d005      	beq.n	8007e14 <UART_SetConfig+0x230>
 8007e08:	e018      	b.n	8007e3c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e0a:	f7fe fe0d 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8007e0e:	0003      	movs	r3, r0
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e12:	e01c      	b.n	8007e4e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e14:	4b4b      	ldr	r3, [pc, #300]	; (8007f44 <UART_SetConfig+0x360>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2210      	movs	r2, #16
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d002      	beq.n	8007e24 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007e1e:	4b4b      	ldr	r3, [pc, #300]	; (8007f4c <UART_SetConfig+0x368>)
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e22:	e014      	b.n	8007e4e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8007e24:	4b4a      	ldr	r3, [pc, #296]	; (8007f50 <UART_SetConfig+0x36c>)
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e28:	e011      	b.n	8007e4e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2a:	f7fe fd4d 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e32:	e00c      	b.n	8007e4e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e3a:	e008      	b.n	8007e4e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e40:	231a      	movs	r3, #26
 8007e42:	2218      	movs	r2, #24
 8007e44:	189b      	adds	r3, r3, r2
 8007e46:	19db      	adds	r3, r3, r7
 8007e48:	2201      	movs	r2, #1
 8007e4a:	701a      	strb	r2, [r3, #0]
        break;
 8007e4c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d100      	bne.n	8007e56 <UART_SetConfig+0x272>
 8007e54:	e132      	b.n	80080bc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	0013      	movs	r3, r2
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d305      	bcc.n	8007e72 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d906      	bls.n	8007e80 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8007e72:	231a      	movs	r3, #26
 8007e74:	2218      	movs	r2, #24
 8007e76:	189b      	adds	r3, r3, r2
 8007e78:	19db      	adds	r3, r3, r7
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e11d      	b.n	80080bc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	6939      	ldr	r1, [r7, #16]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	000b      	movs	r3, r1
 8007e8e:	0e1b      	lsrs	r3, r3, #24
 8007e90:	0010      	movs	r0, r2
 8007e92:	0205      	lsls	r5, r0, #8
 8007e94:	431d      	orrs	r5, r3
 8007e96:	000b      	movs	r3, r1
 8007e98:	021c      	lsls	r4, r3, #8
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	68b8      	ldr	r0, [r7, #8]
 8007ea8:	68f9      	ldr	r1, [r7, #12]
 8007eaa:	1900      	adds	r0, r0, r4
 8007eac:	4169      	adcs	r1, r5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	607b      	str	r3, [r7, #4]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f7f8 faf4 	bl	80004a8 <__aeabi_uldivmod>
 8007ec0:	0002      	movs	r2, r0
 8007ec2:	000b      	movs	r3, r1
 8007ec4:	0013      	movs	r3, r2
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eca:	23c0      	movs	r3, #192	; 0xc0
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d309      	bcc.n	8007ee6 <UART_SetConfig+0x302>
 8007ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed4:	2380      	movs	r3, #128	; 0x80
 8007ed6:	035b      	lsls	r3, r3, #13
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d204      	bcs.n	8007ee6 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee2:	60da      	str	r2, [r3, #12]
 8007ee4:	e0ea      	b.n	80080bc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8007ee6:	231a      	movs	r3, #26
 8007ee8:	2218      	movs	r2, #24
 8007eea:	189b      	adds	r3, r3, r2
 8007eec:	19db      	adds	r3, r3, r7
 8007eee:	2201      	movs	r2, #1
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	e0e3      	b.n	80080bc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d000      	beq.n	8007f02 <UART_SetConfig+0x31e>
 8007f00:	e085      	b.n	800800e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8007f02:	231b      	movs	r3, #27
 8007f04:	2218      	movs	r2, #24
 8007f06:	189b      	adds	r3, r3, r2
 8007f08:	19db      	adds	r3, r3, r7
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d837      	bhi.n	8007f80 <UART_SetConfig+0x39c>
 8007f10:	009a      	lsls	r2, r3, #2
 8007f12:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <UART_SetConfig+0x370>)
 8007f14:	18d3      	adds	r3, r2, r3
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f1a:	f7fe fd85 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8007f1e:	0003      	movs	r3, r0
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f22:	e036      	b.n	8007f92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f24:	f7fe fd96 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 8007f28:	0003      	movs	r3, r0
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f2c:	e031      	b.n	8007f92 <UART_SetConfig+0x3ae>
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	efff69f3 	.word	0xefff69f3
 8007f34:	ffffcfff 	.word	0xffffcfff
 8007f38:	40004800 	.word	0x40004800
 8007f3c:	fffff4ff 	.word	0xfffff4ff
 8007f40:	40013800 	.word	0x40013800
 8007f44:	40021000 	.word	0x40021000
 8007f48:	40004400 	.word	0x40004400
 8007f4c:	003d0900 	.word	0x003d0900
 8007f50:	00f42400 	.word	0x00f42400
 8007f54:	0800d6b0 	.word	0x0800d6b0
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f58:	4b60      	ldr	r3, [pc, #384]	; (80080dc <UART_SetConfig+0x4f8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2210      	movs	r2, #16
 8007f5e:	4013      	ands	r3, r2
 8007f60:	d002      	beq.n	8007f68 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007f62:	4b5f      	ldr	r3, [pc, #380]	; (80080e0 <UART_SetConfig+0x4fc>)
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f66:	e014      	b.n	8007f92 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8007f68:	4b5e      	ldr	r3, [pc, #376]	; (80080e4 <UART_SetConfig+0x500>)
 8007f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f6c:	e011      	b.n	8007f92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f6e:	f7fe fcab 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8007f72:	0003      	movs	r3, r0
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f76:	e00c      	b.n	8007f92 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f78:	2380      	movs	r3, #128	; 0x80
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f7e:	e008      	b.n	8007f92 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007f84:	231a      	movs	r3, #26
 8007f86:	2218      	movs	r2, #24
 8007f88:	189b      	adds	r3, r3, r2
 8007f8a:	19db      	adds	r3, r3, r7
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
        break;
 8007f90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d100      	bne.n	8007f9a <UART_SetConfig+0x3b6>
 8007f98:	e090      	b.n	80080bc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	005a      	lsls	r2, r3, #1
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	18d2      	adds	r2, r2, r3
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	0019      	movs	r1, r3
 8007fac:	0010      	movs	r0, r2
 8007fae:	f7f8 f8c7 	bl	8000140 <__udivsi3>
 8007fb2:	0003      	movs	r3, r0
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	2b0f      	cmp	r3, #15
 8007fba:	d921      	bls.n	8008000 <UART_SetConfig+0x41c>
 8007fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fbe:	2380      	movs	r3, #128	; 0x80
 8007fc0:	025b      	lsls	r3, r3, #9
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d21c      	bcs.n	8008000 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	200e      	movs	r0, #14
 8007fcc:	2418      	movs	r4, #24
 8007fce:	1903      	adds	r3, r0, r4
 8007fd0:	19db      	adds	r3, r3, r7
 8007fd2:	210f      	movs	r1, #15
 8007fd4:	438a      	bics	r2, r1
 8007fd6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2207      	movs	r2, #7
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	b299      	uxth	r1, r3
 8007fe4:	1903      	adds	r3, r0, r4
 8007fe6:	19db      	adds	r3, r3, r7
 8007fe8:	1902      	adds	r2, r0, r4
 8007fea:	19d2      	adds	r2, r2, r7
 8007fec:	8812      	ldrh	r2, [r2, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	1902      	adds	r2, r0, r4
 8007ff8:	19d2      	adds	r2, r2, r7
 8007ffa:	8812      	ldrh	r2, [r2, #0]
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	e05d      	b.n	80080bc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8008000:	231a      	movs	r3, #26
 8008002:	2218      	movs	r2, #24
 8008004:	189b      	adds	r3, r3, r2
 8008006:	19db      	adds	r3, r3, r7
 8008008:	2201      	movs	r2, #1
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e056      	b.n	80080bc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800800e:	231b      	movs	r3, #27
 8008010:	2218      	movs	r2, #24
 8008012:	189b      	adds	r3, r3, r2
 8008014:	19db      	adds	r3, r3, r7
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b08      	cmp	r3, #8
 800801a:	d822      	bhi.n	8008062 <UART_SetConfig+0x47e>
 800801c:	009a      	lsls	r2, r3, #2
 800801e:	4b32      	ldr	r3, [pc, #200]	; (80080e8 <UART_SetConfig+0x504>)
 8008020:	18d3      	adds	r3, r2, r3
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008026:	f7fe fcff 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 800802a:	0003      	movs	r3, r0
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800802e:	e021      	b.n	8008074 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008030:	f7fe fd10 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 8008034:	0003      	movs	r3, r0
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008038:	e01c      	b.n	8008074 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800803a:	4b28      	ldr	r3, [pc, #160]	; (80080dc <UART_SetConfig+0x4f8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2210      	movs	r2, #16
 8008040:	4013      	ands	r3, r2
 8008042:	d002      	beq.n	800804a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008044:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <UART_SetConfig+0x4fc>)
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008048:	e014      	b.n	8008074 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800804a:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <UART_SetConfig+0x500>)
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800804e:	e011      	b.n	8008074 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008050:	f7fe fc3a 	bl	80068c8 <HAL_RCC_GetSysClockFreq>
 8008054:	0003      	movs	r3, r0
 8008056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008058:	e00c      	b.n	8008074 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805a:	2380      	movs	r3, #128	; 0x80
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008060:	e008      	b.n	8008074 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008066:	231a      	movs	r3, #26
 8008068:	2218      	movs	r2, #24
 800806a:	189b      	adds	r3, r3, r2
 800806c:	19db      	adds	r3, r3, r7
 800806e:	2201      	movs	r2, #1
 8008070:	701a      	strb	r2, [r3, #0]
        break;
 8008072:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d020      	beq.n	80080bc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	085a      	lsrs	r2, r3, #1
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	18d2      	adds	r2, r2, r3
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	0019      	movs	r1, r3
 800808a:	0010      	movs	r0, r2
 800808c:	f7f8 f858 	bl	8000140 <__udivsi3>
 8008090:	0003      	movs	r3, r0
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	2b0f      	cmp	r3, #15
 8008098:	d90a      	bls.n	80080b0 <UART_SetConfig+0x4cc>
 800809a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	025b      	lsls	r3, r3, #9
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d205      	bcs.n	80080b0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60da      	str	r2, [r3, #12]
 80080ae:	e005      	b.n	80080bc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80080b0:	231a      	movs	r3, #26
 80080b2:	2218      	movs	r2, #24
 80080b4:	189b      	adds	r3, r3, r2
 80080b6:	19db      	adds	r3, r3, r7
 80080b8:	2201      	movs	r2, #1
 80080ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2200      	movs	r2, #0
 80080c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2200      	movs	r2, #0
 80080c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080c8:	231a      	movs	r3, #26
 80080ca:	2218      	movs	r2, #24
 80080cc:	189b      	adds	r3, r3, r2
 80080ce:	19db      	adds	r3, r3, r7
 80080d0:	781b      	ldrb	r3, [r3, #0]
}
 80080d2:	0018      	movs	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	b00e      	add	sp, #56	; 0x38
 80080d8:	bdb0      	pop	{r4, r5, r7, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	40021000 	.word	0x40021000
 80080e0:	003d0900 	.word	0x003d0900
 80080e4:	00f42400 	.word	0x00f42400
 80080e8:	0800d6d4 	.word	0x0800d6d4

080080ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2201      	movs	r2, #1
 80080fa:	4013      	ands	r3, r2
 80080fc:	d00b      	beq.n	8008116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	4a4a      	ldr	r2, [pc, #296]	; (8008230 <UART_AdvFeatureConfig+0x144>)
 8008106:	4013      	ands	r3, r2
 8008108:	0019      	movs	r1, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2202      	movs	r2, #2
 800811c:	4013      	ands	r3, r2
 800811e:	d00b      	beq.n	8008138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4a43      	ldr	r2, [pc, #268]	; (8008234 <UART_AdvFeatureConfig+0x148>)
 8008128:	4013      	ands	r3, r2
 800812a:	0019      	movs	r1, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	2204      	movs	r2, #4
 800813e:	4013      	ands	r3, r2
 8008140:	d00b      	beq.n	800815a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a3b      	ldr	r2, [pc, #236]	; (8008238 <UART_AdvFeatureConfig+0x14c>)
 800814a:	4013      	ands	r3, r2
 800814c:	0019      	movs	r1, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2208      	movs	r2, #8
 8008160:	4013      	ands	r3, r2
 8008162:	d00b      	beq.n	800817c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	4a34      	ldr	r2, [pc, #208]	; (800823c <UART_AdvFeatureConfig+0x150>)
 800816c:	4013      	ands	r3, r2
 800816e:	0019      	movs	r1, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2210      	movs	r2, #16
 8008182:	4013      	ands	r3, r2
 8008184:	d00b      	beq.n	800819e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4a2c      	ldr	r2, [pc, #176]	; (8008240 <UART_AdvFeatureConfig+0x154>)
 800818e:	4013      	ands	r3, r2
 8008190:	0019      	movs	r1, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	2220      	movs	r2, #32
 80081a4:	4013      	ands	r3, r2
 80081a6:	d00b      	beq.n	80081c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	4a25      	ldr	r2, [pc, #148]	; (8008244 <UART_AdvFeatureConfig+0x158>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	0019      	movs	r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2240      	movs	r2, #64	; 0x40
 80081c6:	4013      	ands	r3, r2
 80081c8:	d01d      	beq.n	8008206 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a1d      	ldr	r2, [pc, #116]	; (8008248 <UART_AdvFeatureConfig+0x15c>)
 80081d2:	4013      	ands	r3, r2
 80081d4:	0019      	movs	r1, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e6:	2380      	movs	r3, #128	; 0x80
 80081e8:	035b      	lsls	r3, r3, #13
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d10b      	bne.n	8008206 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	4a15      	ldr	r2, [pc, #84]	; (800824c <UART_AdvFeatureConfig+0x160>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	0019      	movs	r1, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	4013      	ands	r3, r2
 800820e:	d00b      	beq.n	8008228 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	4a0e      	ldr	r2, [pc, #56]	; (8008250 <UART_AdvFeatureConfig+0x164>)
 8008218:	4013      	ands	r3, r2
 800821a:	0019      	movs	r1, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	605a      	str	r2, [r3, #4]
  }
}
 8008228:	46c0      	nop			; (mov r8, r8)
 800822a:	46bd      	mov	sp, r7
 800822c:	b002      	add	sp, #8
 800822e:	bd80      	pop	{r7, pc}
 8008230:	fffdffff 	.word	0xfffdffff
 8008234:	fffeffff 	.word	0xfffeffff
 8008238:	fffbffff 	.word	0xfffbffff
 800823c:	ffff7fff 	.word	0xffff7fff
 8008240:	ffffefff 	.word	0xffffefff
 8008244:	ffffdfff 	.word	0xffffdfff
 8008248:	ffefffff 	.word	0xffefffff
 800824c:	ff9fffff 	.word	0xff9fffff
 8008250:	fff7ffff 	.word	0xfff7ffff

08008254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b092      	sub	sp, #72	; 0x48
 8008258:	af02      	add	r7, sp, #8
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2284      	movs	r2, #132	; 0x84
 8008260:	2100      	movs	r1, #0
 8008262:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008264:	f7fb fedc 	bl	8004020 <HAL_GetTick>
 8008268:	0003      	movs	r3, r0
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2208      	movs	r2, #8
 8008274:	4013      	ands	r3, r2
 8008276:	2b08      	cmp	r3, #8
 8008278:	d12c      	bne.n	80082d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800827a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827c:	2280      	movs	r2, #128	; 0x80
 800827e:	0391      	lsls	r1, r2, #14
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4a46      	ldr	r2, [pc, #280]	; (800839c <UART_CheckIdleState+0x148>)
 8008284:	9200      	str	r2, [sp, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	f000 f88c 	bl	80083a4 <UART_WaitOnFlagUntilTimeout>
 800828c:	1e03      	subs	r3, r0, #0
 800828e:	d021      	beq.n	80082d4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008290:	f3ef 8310 	mrs	r3, PRIMASK
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008298:	63bb      	str	r3, [r7, #56]	; 0x38
 800829a:	2301      	movs	r3, #1
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	f383 8810 	msr	PRIMASK, r3
}
 80082a4:	46c0      	nop			; (mov r8, r8)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2180      	movs	r1, #128	; 0x80
 80082b2:	438a      	bics	r2, r1
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	f383 8810 	msr	PRIMASK, r3
}
 80082c0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2220      	movs	r2, #32
 80082c6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2278      	movs	r2, #120	; 0x78
 80082cc:	2100      	movs	r1, #0
 80082ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e05f      	b.n	8008394 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2204      	movs	r2, #4
 80082dc:	4013      	ands	r3, r2
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d146      	bne.n	8008370 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e4:	2280      	movs	r2, #128	; 0x80
 80082e6:	03d1      	lsls	r1, r2, #15
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	4a2c      	ldr	r2, [pc, #176]	; (800839c <UART_CheckIdleState+0x148>)
 80082ec:	9200      	str	r2, [sp, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f000 f858 	bl	80083a4 <UART_WaitOnFlagUntilTimeout>
 80082f4:	1e03      	subs	r3, r0, #0
 80082f6:	d03b      	beq.n	8008370 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f8:	f3ef 8310 	mrs	r3, PRIMASK
 80082fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80082fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
 8008302:	2301      	movs	r3, #1
 8008304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f383 8810 	msr	PRIMASK, r3
}
 800830c:	46c0      	nop			; (mov r8, r8)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4921      	ldr	r1, [pc, #132]	; (80083a0 <UART_CheckIdleState+0x14c>)
 800831a:	400a      	ands	r2, r1
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f383 8810 	msr	PRIMASK, r3
}
 8008328:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800832a:	f3ef 8310 	mrs	r3, PRIMASK
 800832e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008330:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	633b      	str	r3, [r7, #48]	; 0x30
 8008334:	2301      	movs	r3, #1
 8008336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f383 8810 	msr	PRIMASK, r3
}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2101      	movs	r1, #1
 800834c:	438a      	bics	r2, r1
 800834e:	609a      	str	r2, [r3, #8]
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	f383 8810 	msr	PRIMASK, r3
}
 800835a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2280      	movs	r2, #128	; 0x80
 8008360:	2120      	movs	r1, #32
 8008362:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2278      	movs	r2, #120	; 0x78
 8008368:	2100      	movs	r1, #0
 800836a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e011      	b.n	8008394 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2280      	movs	r2, #128	; 0x80
 800837a:	2120      	movs	r1, #32
 800837c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2278      	movs	r2, #120	; 0x78
 800838e:	2100      	movs	r1, #0
 8008390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	0018      	movs	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	b010      	add	sp, #64	; 0x40
 800839a:	bd80      	pop	{r7, pc}
 800839c:	01ffffff 	.word	0x01ffffff
 80083a0:	fffffedf 	.word	0xfffffedf

080083a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	1dfb      	adds	r3, r7, #7
 80083b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083b4:	e04b      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	3301      	adds	r3, #1
 80083ba:	d048      	beq.n	800844e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083bc:	f7fb fe30 	bl	8004020 <HAL_GetTick>
 80083c0:	0002      	movs	r2, r0
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d302      	bcc.n	80083d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e04b      	b.n	800846e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2204      	movs	r2, #4
 80083de:	4013      	ands	r3, r2
 80083e0:	d035      	beq.n	800844e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	2208      	movs	r2, #8
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d111      	bne.n	8008414 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2208      	movs	r2, #8
 80083f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	0018      	movs	r0, r3
 80083fc:	f000 f906 	bl	800860c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2284      	movs	r2, #132	; 0x84
 8008404:	2108      	movs	r1, #8
 8008406:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2278      	movs	r2, #120	; 0x78
 800840c:	2100      	movs	r1, #0
 800840e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e02c      	b.n	800846e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	69da      	ldr	r2, [r3, #28]
 800841a:	2380      	movs	r3, #128	; 0x80
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	401a      	ands	r2, r3
 8008420:	2380      	movs	r3, #128	; 0x80
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	429a      	cmp	r2, r3
 8008426:	d112      	bne.n	800844e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2280      	movs	r2, #128	; 0x80
 800842e:	0112      	lsls	r2, r2, #4
 8008430:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	0018      	movs	r0, r3
 8008436:	f000 f8e9 	bl	800860c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2284      	movs	r2, #132	; 0x84
 800843e:	2120      	movs	r1, #32
 8008440:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2278      	movs	r2, #120	; 0x78
 8008446:	2100      	movs	r1, #0
 8008448:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e00f      	b.n	800846e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	4013      	ands	r3, r2
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	425a      	negs	r2, r3
 800845e:	4153      	adcs	r3, r2
 8008460:	b2db      	uxtb	r3, r3
 8008462:	001a      	movs	r2, r3
 8008464:	1dfb      	adds	r3, r7, #7
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d0a4      	beq.n	80083b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	0018      	movs	r0, r3
 8008470:	46bd      	mov	sp, r7
 8008472:	b004      	add	sp, #16
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b090      	sub	sp, #64	; 0x40
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	1dbb      	adds	r3, r7, #6
 8008484:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	1dba      	adds	r2, r7, #6
 8008490:	2158      	movs	r1, #88	; 0x58
 8008492:	8812      	ldrh	r2, [r2, #0]
 8008494:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	1dba      	adds	r2, r7, #6
 800849a:	215a      	movs	r1, #90	; 0x5a
 800849c:	8812      	ldrh	r2, [r2, #0]
 800849e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	2380      	movs	r3, #128	; 0x80
 80084ac:	015b      	lsls	r3, r3, #5
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d10d      	bne.n	80084ce <UART_Start_Receive_IT+0x56>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <UART_Start_Receive_IT+0x4c>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	225c      	movs	r2, #92	; 0x5c
 80084be:	4950      	ldr	r1, [pc, #320]	; (8008600 <UART_Start_Receive_IT+0x188>)
 80084c0:	5299      	strh	r1, [r3, r2]
 80084c2:	e02e      	b.n	8008522 <UART_Start_Receive_IT+0xaa>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	225c      	movs	r2, #92	; 0x5c
 80084c8:	21ff      	movs	r1, #255	; 0xff
 80084ca:	5299      	strh	r1, [r3, r2]
 80084cc:	e029      	b.n	8008522 <UART_Start_Receive_IT+0xaa>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10d      	bne.n	80084f2 <UART_Start_Receive_IT+0x7a>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d104      	bne.n	80084e8 <UART_Start_Receive_IT+0x70>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	225c      	movs	r2, #92	; 0x5c
 80084e2:	21ff      	movs	r1, #255	; 0xff
 80084e4:	5299      	strh	r1, [r3, r2]
 80084e6:	e01c      	b.n	8008522 <UART_Start_Receive_IT+0xaa>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	225c      	movs	r2, #92	; 0x5c
 80084ec:	217f      	movs	r1, #127	; 0x7f
 80084ee:	5299      	strh	r1, [r3, r2]
 80084f0:	e017      	b.n	8008522 <UART_Start_Receive_IT+0xaa>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	2380      	movs	r3, #128	; 0x80
 80084f8:	055b      	lsls	r3, r3, #21
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d10d      	bne.n	800851a <UART_Start_Receive_IT+0xa2>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <UART_Start_Receive_IT+0x98>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	225c      	movs	r2, #92	; 0x5c
 800850a:	217f      	movs	r1, #127	; 0x7f
 800850c:	5299      	strh	r1, [r3, r2]
 800850e:	e008      	b.n	8008522 <UART_Start_Receive_IT+0xaa>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	225c      	movs	r2, #92	; 0x5c
 8008514:	213f      	movs	r1, #63	; 0x3f
 8008516:	5299      	strh	r1, [r3, r2]
 8008518:	e003      	b.n	8008522 <UART_Start_Receive_IT+0xaa>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	225c      	movs	r2, #92	; 0x5c
 800851e:	2100      	movs	r1, #0
 8008520:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2284      	movs	r2, #132	; 0x84
 8008526:	2100      	movs	r1, #0
 8008528:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2280      	movs	r2, #128	; 0x80
 800852e:	2122      	movs	r1, #34	; 0x22
 8008530:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008532:	f3ef 8310 	mrs	r3, PRIMASK
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853c:	2301      	movs	r3, #1
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	f383 8810 	msr	PRIMASK, r3
}
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2101      	movs	r1, #1
 8008554:	430a      	orrs	r2, r1
 8008556:	609a      	str	r2, [r3, #8]
 8008558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	f383 8810 	msr	PRIMASK, r3
}
 8008562:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	2380      	movs	r3, #128	; 0x80
 800856a:	015b      	lsls	r3, r3, #5
 800856c:	429a      	cmp	r2, r3
 800856e:	d107      	bne.n	8008580 <UART_Start_Receive_IT+0x108>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4a22      	ldr	r2, [pc, #136]	; (8008604 <UART_Start_Receive_IT+0x18c>)
 800857c:	669a      	str	r2, [r3, #104]	; 0x68
 800857e:	e002      	b.n	8008586 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a21      	ldr	r2, [pc, #132]	; (8008608 <UART_Start_Receive_IT+0x190>)
 8008584:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d019      	beq.n	80085c2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800858e:	f3ef 8310 	mrs	r3, PRIMASK
 8008592:	61fb      	str	r3, [r7, #28]
  return(result);
 8008594:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008596:	637b      	str	r3, [r7, #52]	; 0x34
 8008598:	2301      	movs	r3, #1
 800859a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	f383 8810 	msr	PRIMASK, r3
}
 80085a2:	46c0      	nop			; (mov r8, r8)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2190      	movs	r1, #144	; 0x90
 80085b0:	0049      	lsls	r1, r1, #1
 80085b2:	430a      	orrs	r2, r1
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	f383 8810 	msr	PRIMASK, r3
}
 80085c0:	e018      	b.n	80085f4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c2:	f3ef 8310 	mrs	r3, PRIMASK
 80085c6:	613b      	str	r3, [r7, #16]
  return(result);
 80085c8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80085ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80085cc:	2301      	movs	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f383 8810 	msr	PRIMASK, r3
}
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2120      	movs	r1, #32
 80085e4:	430a      	orrs	r2, r1
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	f383 8810 	msr	PRIMASK, r3
}
 80085f2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	0018      	movs	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	b010      	add	sp, #64	; 0x40
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	000001ff 	.word	0x000001ff
 8008604:	0800891d 	.word	0x0800891d
 8008608:	08008759 	.word	0x08008759

0800860c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	; 0x38
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008614:	f3ef 8310 	mrs	r3, PRIMASK
 8008618:	617b      	str	r3, [r7, #20]
  return(result);
 800861a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
 800861e:	2301      	movs	r3, #1
 8008620:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f383 8810 	msr	PRIMASK, r3
}
 8008628:	46c0      	nop			; (mov r8, r8)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4926      	ldr	r1, [pc, #152]	; (80086d0 <UART_EndRxTransfer+0xc4>)
 8008636:	400a      	ands	r2, r1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	f383 8810 	msr	PRIMASK, r3
}
 8008644:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008646:	f3ef 8310 	mrs	r3, PRIMASK
 800864a:	623b      	str	r3, [r7, #32]
  return(result);
 800864c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864e:	633b      	str	r3, [r7, #48]	; 0x30
 8008650:	2301      	movs	r3, #1
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	f383 8810 	msr	PRIMASK, r3
}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2101      	movs	r1, #1
 8008668:	438a      	bics	r2, r1
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	f383 8810 	msr	PRIMASK, r3
}
 8008676:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867c:	2b01      	cmp	r3, #1
 800867e:	d118      	bne.n	80086b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008680:	f3ef 8310 	mrs	r3, PRIMASK
 8008684:	60bb      	str	r3, [r7, #8]
  return(result);
 8008686:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800868a:	2301      	movs	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f383 8810 	msr	PRIMASK, r3
}
 8008694:	46c0      	nop			; (mov r8, r8)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2110      	movs	r1, #16
 80086a2:	438a      	bics	r2, r1
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f383 8810 	msr	PRIMASK, r3
}
 80086b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2280      	movs	r2, #128	; 0x80
 80086b6:	2120      	movs	r1, #32
 80086b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	46bd      	mov	sp, r7
 80086ca:	b00e      	add	sp, #56	; 0x38
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	46c0      	nop			; (mov r8, r8)
 80086d0:	fffffedf 	.word	0xfffffedf

080086d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	225a      	movs	r2, #90	; 0x5a
 80086e6:	2100      	movs	r1, #0
 80086e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2252      	movs	r2, #82	; 0x52
 80086ee:	2100      	movs	r1, #0
 80086f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7ff fa61 	bl	8007bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b004      	add	sp, #16
 8008700:	bd80      	pop	{r7, pc}

08008702 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b086      	sub	sp, #24
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800870a:	f3ef 8310 	mrs	r3, PRIMASK
 800870e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008710:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	2301      	movs	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2140      	movs	r1, #64	; 0x40
 800872c:	438a      	bics	r2, r1
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f383 8810 	msr	PRIMASK, r3
}
 800873a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	0018      	movs	r0, r3
 800874c:	f7ff fa2e 	bl	8007bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008750:	46c0      	nop			; (mov r8, r8)
 8008752:	46bd      	mov	sp, r7
 8008754:	b006      	add	sp, #24
 8008756:	bd80      	pop	{r7, pc}

08008758 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b094      	sub	sp, #80	; 0x50
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008760:	204e      	movs	r0, #78	; 0x4e
 8008762:	183b      	adds	r3, r7, r0
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	215c      	movs	r1, #92	; 0x5c
 8008768:	5a52      	ldrh	r2, [r2, r1]
 800876a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2280      	movs	r2, #128	; 0x80
 8008770:	589b      	ldr	r3, [r3, r2]
 8008772:	2b22      	cmp	r3, #34	; 0x22
 8008774:	d000      	beq.n	8008778 <UART_RxISR_8BIT+0x20>
 8008776:	e0bf      	b.n	80088f8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800877e:	214c      	movs	r1, #76	; 0x4c
 8008780:	187b      	adds	r3, r7, r1
 8008782:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008784:	187b      	adds	r3, r7, r1
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	183b      	adds	r3, r7, r0
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	b2d9      	uxtb	r1, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008794:	400a      	ands	r2, r1
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	225a      	movs	r2, #90	; 0x5a
 80087a8:	5a9b      	ldrh	r3, [r3, r2]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b299      	uxth	r1, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	225a      	movs	r2, #90	; 0x5a
 80087b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	225a      	movs	r2, #90	; 0x5a
 80087ba:	5a9b      	ldrh	r3, [r3, r2]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d000      	beq.n	80087c4 <UART_RxISR_8BIT+0x6c>
 80087c2:	e0a1      	b.n	8008908 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c4:	f3ef 8310 	mrs	r3, PRIMASK
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ce:	2301      	movs	r3, #1
 80087d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f383 8810 	msr	PRIMASK, r3
}
 80087d8:	46c0      	nop			; (mov r8, r8)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	494a      	ldr	r1, [pc, #296]	; (8008910 <UART_RxISR_8BIT+0x1b8>)
 80087e6:	400a      	ands	r2, r1
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	f383 8810 	msr	PRIMASK, r3
}
 80087f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f6:	f3ef 8310 	mrs	r3, PRIMASK
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008800:	2301      	movs	r3, #1
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	f383 8810 	msr	PRIMASK, r3
}
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2101      	movs	r1, #1
 8008818:	438a      	bics	r2, r1
 800881a:	609a      	str	r2, [r3, #8]
 800881c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800881e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	f383 8810 	msr	PRIMASK, r3
}
 8008826:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2280      	movs	r2, #128	; 0x80
 800882c:	2120      	movs	r1, #32
 800882e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a34      	ldr	r2, [pc, #208]	; (8008914 <UART_RxISR_8BIT+0x1bc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d01f      	beq.n	8008886 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	4013      	ands	r3, r2
 8008852:	d018      	beq.n	8008886 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008854:	f3ef 8310 	mrs	r3, PRIMASK
 8008858:	61bb      	str	r3, [r7, #24]
  return(result);
 800885a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800885c:	643b      	str	r3, [r7, #64]	; 0x40
 800885e:	2301      	movs	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	f383 8810 	msr	PRIMASK, r3
}
 8008868:	46c0      	nop			; (mov r8, r8)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4928      	ldr	r1, [pc, #160]	; (8008918 <UART_RxISR_8BIT+0x1c0>)
 8008876:	400a      	ands	r2, r1
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	f383 8810 	msr	PRIMASK, r3
}
 8008884:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800888a:	2b01      	cmp	r3, #1
 800888c:	d12f      	bne.n	80088ee <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008894:	f3ef 8310 	mrs	r3, PRIMASK
 8008898:	60fb      	str	r3, [r7, #12]
  return(result);
 800889a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800889e:	2301      	movs	r3, #1
 80088a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f383 8810 	msr	PRIMASK, r3
}
 80088a8:	46c0      	nop			; (mov r8, r8)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2110      	movs	r1, #16
 80088b6:	438a      	bics	r2, r1
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f383 8810 	msr	PRIMASK, r3
}
 80088c4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2210      	movs	r2, #16
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b10      	cmp	r3, #16
 80088d2:	d103      	bne.n	80088dc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2210      	movs	r2, #16
 80088da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2258      	movs	r2, #88	; 0x58
 80088e0:	5a9a      	ldrh	r2, [r3, r2]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	0011      	movs	r1, r2
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7ff f970 	bl	8007bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ec:	e00c      	b.n	8008908 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	0018      	movs	r0, r3
 80088f2:	f7fa ff01 	bl	80036f8 <HAL_UART_RxCpltCallback>
}
 80088f6:	e007      	b.n	8008908 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2108      	movs	r1, #8
 8008904:	430a      	orrs	r2, r1
 8008906:	619a      	str	r2, [r3, #24]
}
 8008908:	46c0      	nop			; (mov r8, r8)
 800890a:	46bd      	mov	sp, r7
 800890c:	b014      	add	sp, #80	; 0x50
 800890e:	bd80      	pop	{r7, pc}
 8008910:	fffffedf 	.word	0xfffffedf
 8008914:	40004800 	.word	0x40004800
 8008918:	fbffffff 	.word	0xfbffffff

0800891c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b094      	sub	sp, #80	; 0x50
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008924:	204e      	movs	r0, #78	; 0x4e
 8008926:	183b      	adds	r3, r7, r0
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	215c      	movs	r1, #92	; 0x5c
 800892c:	5a52      	ldrh	r2, [r2, r1]
 800892e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2280      	movs	r2, #128	; 0x80
 8008934:	589b      	ldr	r3, [r3, r2]
 8008936:	2b22      	cmp	r3, #34	; 0x22
 8008938:	d000      	beq.n	800893c <UART_RxISR_16BIT+0x20>
 800893a:	e0bf      	b.n	8008abc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008942:	214c      	movs	r1, #76	; 0x4c
 8008944:	187b      	adds	r3, r7, r1
 8008946:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800894e:	187b      	adds	r3, r7, r1
 8008950:	183a      	adds	r2, r7, r0
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	8812      	ldrh	r2, [r2, #0]
 8008956:	4013      	ands	r3, r2
 8008958:	b29a      	uxth	r2, r3
 800895a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008962:	1c9a      	adds	r2, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	225a      	movs	r2, #90	; 0x5a
 800896c:	5a9b      	ldrh	r3, [r3, r2]
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b299      	uxth	r1, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	225a      	movs	r2, #90	; 0x5a
 8008978:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	225a      	movs	r2, #90	; 0x5a
 800897e:	5a9b      	ldrh	r3, [r3, r2]
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d000      	beq.n	8008988 <UART_RxISR_16BIT+0x6c>
 8008986:	e0a1      	b.n	8008acc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008988:	f3ef 8310 	mrs	r3, PRIMASK
 800898c:	623b      	str	r3, [r7, #32]
  return(result);
 800898e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008990:	647b      	str	r3, [r7, #68]	; 0x44
 8008992:	2301      	movs	r3, #1
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	f383 8810 	msr	PRIMASK, r3
}
 800899c:	46c0      	nop			; (mov r8, r8)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	494a      	ldr	r1, [pc, #296]	; (8008ad4 <UART_RxISR_16BIT+0x1b8>)
 80089aa:	400a      	ands	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	f383 8810 	msr	PRIMASK, r3
}
 80089b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ba:	f3ef 8310 	mrs	r3, PRIMASK
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c2:	643b      	str	r3, [r7, #64]	; 0x40
 80089c4:	2301      	movs	r3, #1
 80089c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	f383 8810 	msr	PRIMASK, r3
}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2101      	movs	r1, #1
 80089dc:	438a      	bics	r2, r1
 80089de:	609a      	str	r2, [r3, #8]
 80089e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e6:	f383 8810 	msr	PRIMASK, r3
}
 80089ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2280      	movs	r2, #128	; 0x80
 80089f0:	2120      	movs	r1, #32
 80089f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a34      	ldr	r2, [pc, #208]	; (8008ad8 <UART_RxISR_16BIT+0x1bc>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d01f      	beq.n	8008a4a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	2380      	movs	r3, #128	; 0x80
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	4013      	ands	r3, r2
 8008a16:	d018      	beq.n	8008a4a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a18:	f3ef 8310 	mrs	r3, PRIMASK
 8008a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8008a1e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a22:	2301      	movs	r3, #1
 8008a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	f383 8810 	msr	PRIMASK, r3
}
 8008a2c:	46c0      	nop			; (mov r8, r8)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4928      	ldr	r1, [pc, #160]	; (8008adc <UART_RxISR_16BIT+0x1c0>)
 8008a3a:	400a      	ands	r2, r1
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f383 8810 	msr	PRIMASK, r3
}
 8008a48:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d12f      	bne.n	8008ab2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a58:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a5e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a60:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a62:	2301      	movs	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f383 8810 	msr	PRIMASK, r3
}
 8008a6c:	46c0      	nop			; (mov r8, r8)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2110      	movs	r1, #16
 8008a7a:	438a      	bics	r2, r1
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f383 8810 	msr	PRIMASK, r3
}
 8008a88:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	2210      	movs	r2, #16
 8008a92:	4013      	ands	r3, r2
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d103      	bne.n	8008aa0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2210      	movs	r2, #16
 8008a9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2258      	movs	r2, #88	; 0x58
 8008aa4:	5a9a      	ldrh	r2, [r3, r2]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	0011      	movs	r1, r2
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f7ff f88e 	bl	8007bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ab0:	e00c      	b.n	8008acc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7fa fe1f 	bl	80036f8 <HAL_UART_RxCpltCallback>
}
 8008aba:	e007      	b.n	8008acc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2108      	movs	r1, #8
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	619a      	str	r2, [r3, #24]
}
 8008acc:	46c0      	nop			; (mov r8, r8)
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b014      	add	sp, #80	; 0x50
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	fffffedf 	.word	0xfffffedf
 8008ad8:	40004800 	.word	0x40004800
 8008adc:	fbffffff 	.word	0xfbffffff

08008ae0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ae8:	46c0      	nop			; (mov r8, r8)
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b002      	add	sp, #8
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <sulp>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	0016      	movs	r6, r2
 8008af4:	000d      	movs	r5, r1
 8008af6:	f003 fecd 	bl	800c894 <__ulp>
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d00d      	beq.n	8008b1a <sulp+0x2a>
 8008afe:	236b      	movs	r3, #107	; 0x6b
 8008b00:	006a      	lsls	r2, r5, #1
 8008b02:	0d52      	lsrs	r2, r2, #21
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dd07      	ble.n	8008b1a <sulp+0x2a>
 8008b0a:	2400      	movs	r4, #0
 8008b0c:	4a03      	ldr	r2, [pc, #12]	; (8008b1c <sulp+0x2c>)
 8008b0e:	051b      	lsls	r3, r3, #20
 8008b10:	189d      	adds	r5, r3, r2
 8008b12:	002b      	movs	r3, r5
 8008b14:	0022      	movs	r2, r4
 8008b16:	f7f9 f9fb 	bl	8001f10 <__aeabi_dmul>
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	3ff00000 	.word	0x3ff00000

08008b20 <_strtod_l>:
 8008b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b22:	b0a1      	sub	sp, #132	; 0x84
 8008b24:	9219      	str	r2, [sp, #100]	; 0x64
 8008b26:	2200      	movs	r2, #0
 8008b28:	2600      	movs	r6, #0
 8008b2a:	2700      	movs	r7, #0
 8008b2c:	9004      	str	r0, [sp, #16]
 8008b2e:	9107      	str	r1, [sp, #28]
 8008b30:	921c      	str	r2, [sp, #112]	; 0x70
 8008b32:	911b      	str	r1, [sp, #108]	; 0x6c
 8008b34:	780a      	ldrb	r2, [r1, #0]
 8008b36:	2a2b      	cmp	r2, #43	; 0x2b
 8008b38:	d055      	beq.n	8008be6 <_strtod_l+0xc6>
 8008b3a:	d841      	bhi.n	8008bc0 <_strtod_l+0xa0>
 8008b3c:	2a0d      	cmp	r2, #13
 8008b3e:	d83b      	bhi.n	8008bb8 <_strtod_l+0x98>
 8008b40:	2a08      	cmp	r2, #8
 8008b42:	d83b      	bhi.n	8008bbc <_strtod_l+0x9c>
 8008b44:	2a00      	cmp	r2, #0
 8008b46:	d044      	beq.n	8008bd2 <_strtod_l+0xb2>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008b50:	9109      	str	r1, [sp, #36]	; 0x24
 8008b52:	782a      	ldrb	r2, [r5, #0]
 8008b54:	2a30      	cmp	r2, #48	; 0x30
 8008b56:	d000      	beq.n	8008b5a <_strtod_l+0x3a>
 8008b58:	e085      	b.n	8008c66 <_strtod_l+0x146>
 8008b5a:	786a      	ldrb	r2, [r5, #1]
 8008b5c:	3120      	adds	r1, #32
 8008b5e:	438a      	bics	r2, r1
 8008b60:	2a58      	cmp	r2, #88	; 0x58
 8008b62:	d000      	beq.n	8008b66 <_strtod_l+0x46>
 8008b64:	e075      	b.n	8008c52 <_strtod_l+0x132>
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b6a:	4a97      	ldr	r2, [pc, #604]	; (8008dc8 <_strtod_l+0x2a8>)
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	ab1c      	add	r3, sp, #112	; 0x70
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	9804      	ldr	r0, [sp, #16]
 8008b74:	ab1d      	add	r3, sp, #116	; 0x74
 8008b76:	a91b      	add	r1, sp, #108	; 0x6c
 8008b78:	f002 ff44 	bl	800ba04 <__gethex>
 8008b7c:	230f      	movs	r3, #15
 8008b7e:	0002      	movs	r2, r0
 8008b80:	401a      	ands	r2, r3
 8008b82:	0004      	movs	r4, r0
 8008b84:	9205      	str	r2, [sp, #20]
 8008b86:	4218      	tst	r0, r3
 8008b88:	d005      	beq.n	8008b96 <_strtod_l+0x76>
 8008b8a:	2a06      	cmp	r2, #6
 8008b8c:	d12d      	bne.n	8008bea <_strtod_l+0xca>
 8008b8e:	1c6b      	adds	r3, r5, #1
 8008b90:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b92:	2300      	movs	r3, #0
 8008b94:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <_strtod_l+0x82>
 8008b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01b      	beq.n	8008be0 <_strtod_l+0xc0>
 8008ba8:	2380      	movs	r3, #128	; 0x80
 8008baa:	0032      	movs	r2, r6
 8008bac:	061b      	lsls	r3, r3, #24
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	0010      	movs	r0, r2
 8008bb2:	0019      	movs	r1, r3
 8008bb4:	b021      	add	sp, #132	; 0x84
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	2a20      	cmp	r2, #32
 8008bba:	d1c5      	bne.n	8008b48 <_strtod_l+0x28>
 8008bbc:	3101      	adds	r1, #1
 8008bbe:	e7b8      	b.n	8008b32 <_strtod_l+0x12>
 8008bc0:	2a2d      	cmp	r2, #45	; 0x2d
 8008bc2:	d1c1      	bne.n	8008b48 <_strtod_l+0x28>
 8008bc4:	3a2c      	subs	r2, #44	; 0x2c
 8008bc6:	920f      	str	r2, [sp, #60]	; 0x3c
 8008bc8:	1c4a      	adds	r2, r1, #1
 8008bca:	921b      	str	r2, [sp, #108]	; 0x6c
 8008bcc:	784a      	ldrb	r2, [r1, #1]
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	d1bc      	bne.n	8008b4c <_strtod_l+0x2c>
 8008bd2:	9b07      	ldr	r3, [sp, #28]
 8008bd4:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1dd      	bne.n	8008b9c <_strtod_l+0x7c>
 8008be0:	0032      	movs	r2, r6
 8008be2:	003b      	movs	r3, r7
 8008be4:	e7e4      	b.n	8008bb0 <_strtod_l+0x90>
 8008be6:	2200      	movs	r2, #0
 8008be8:	e7ed      	b.n	8008bc6 <_strtod_l+0xa6>
 8008bea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	d007      	beq.n	8008c00 <_strtod_l+0xe0>
 8008bf0:	2135      	movs	r1, #53	; 0x35
 8008bf2:	a81e      	add	r0, sp, #120	; 0x78
 8008bf4:	f003 ff3f 	bl	800ca76 <__copybits>
 8008bf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bfa:	9804      	ldr	r0, [sp, #16]
 8008bfc:	f003 fb08 	bl	800c210 <_Bfree>
 8008c00:	9805      	ldr	r0, [sp, #20]
 8008c02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c04:	3801      	subs	r0, #1
 8008c06:	2804      	cmp	r0, #4
 8008c08:	d806      	bhi.n	8008c18 <_strtod_l+0xf8>
 8008c0a:	f7f7 fa85 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008c0e:	0312      	.short	0x0312
 8008c10:	1e1c      	.short	0x1e1c
 8008c12:	12          	.byte	0x12
 8008c13:	00          	.byte	0x00
 8008c14:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008c16:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008c18:	05e4      	lsls	r4, r4, #23
 8008c1a:	d502      	bpl.n	8008c22 <_strtod_l+0x102>
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	061b      	lsls	r3, r3, #24
 8008c20:	431f      	orrs	r7, r3
 8008c22:	4b6a      	ldr	r3, [pc, #424]	; (8008dcc <_strtod_l+0x2ac>)
 8008c24:	423b      	tst	r3, r7
 8008c26:	d1b6      	bne.n	8008b96 <_strtod_l+0x76>
 8008c28:	f001 ff4e 	bl	800aac8 <__errno>
 8008c2c:	2322      	movs	r3, #34	; 0x22
 8008c2e:	6003      	str	r3, [r0, #0]
 8008c30:	e7b1      	b.n	8008b96 <_strtod_l+0x76>
 8008c32:	4967      	ldr	r1, [pc, #412]	; (8008dd0 <_strtod_l+0x2b0>)
 8008c34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008c36:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008c38:	400a      	ands	r2, r1
 8008c3a:	4966      	ldr	r1, [pc, #408]	; (8008dd4 <_strtod_l+0x2b4>)
 8008c3c:	185b      	adds	r3, r3, r1
 8008c3e:	051b      	lsls	r3, r3, #20
 8008c40:	431a      	orrs	r2, r3
 8008c42:	0017      	movs	r7, r2
 8008c44:	e7e8      	b.n	8008c18 <_strtod_l+0xf8>
 8008c46:	4f61      	ldr	r7, [pc, #388]	; (8008dcc <_strtod_l+0x2ac>)
 8008c48:	e7e6      	b.n	8008c18 <_strtod_l+0xf8>
 8008c4a:	2601      	movs	r6, #1
 8008c4c:	4f62      	ldr	r7, [pc, #392]	; (8008dd8 <_strtod_l+0x2b8>)
 8008c4e:	4276      	negs	r6, r6
 8008c50:	e7e2      	b.n	8008c18 <_strtod_l+0xf8>
 8008c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	921b      	str	r2, [sp, #108]	; 0x6c
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b30      	cmp	r3, #48	; 0x30
 8008c5c:	d0f9      	beq.n	8008c52 <_strtod_l+0x132>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d099      	beq.n	8008b96 <_strtod_l+0x76>
 8008c62:	2301      	movs	r3, #1
 8008c64:	9309      	str	r3, [sp, #36]	; 0x24
 8008c66:	2500      	movs	r5, #0
 8008c68:	220a      	movs	r2, #10
 8008c6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c6c:	950d      	str	r5, [sp, #52]	; 0x34
 8008c6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008c70:	9508      	str	r5, [sp, #32]
 8008c72:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008c74:	7804      	ldrb	r4, [r0, #0]
 8008c76:	0023      	movs	r3, r4
 8008c78:	3b30      	subs	r3, #48	; 0x30
 8008c7a:	b2d9      	uxtb	r1, r3
 8008c7c:	2909      	cmp	r1, #9
 8008c7e:	d927      	bls.n	8008cd0 <_strtod_l+0x1b0>
 8008c80:	2201      	movs	r2, #1
 8008c82:	4956      	ldr	r1, [pc, #344]	; (8008ddc <_strtod_l+0x2bc>)
 8008c84:	f001 febc 	bl	800aa00 <strncmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d031      	beq.n	8008cf0 <_strtod_l+0x1d0>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	0023      	movs	r3, r4
 8008c90:	4684      	mov	ip, r0
 8008c92:	9a08      	ldr	r2, [sp, #32]
 8008c94:	900c      	str	r0, [sp, #48]	; 0x30
 8008c96:	9205      	str	r2, [sp, #20]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	0019      	movs	r1, r3
 8008c9c:	4391      	bics	r1, r2
 8008c9e:	000a      	movs	r2, r1
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	9106      	str	r1, [sp, #24]
 8008ca4:	2a45      	cmp	r2, #69	; 0x45
 8008ca6:	d000      	beq.n	8008caa <_strtod_l+0x18a>
 8008ca8:	e0c2      	b.n	8008e30 <_strtod_l+0x310>
 8008caa:	9b05      	ldr	r3, [sp, #20]
 8008cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cae:	4303      	orrs	r3, r0
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	428b      	cmp	r3, r1
 8008cb4:	d08d      	beq.n	8008bd2 <_strtod_l+0xb2>
 8008cb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cb8:	9307      	str	r3, [sp, #28]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cbe:	9b07      	ldr	r3, [sp, #28]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	2b2b      	cmp	r3, #43	; 0x2b
 8008cc4:	d071      	beq.n	8008daa <_strtod_l+0x28a>
 8008cc6:	000c      	movs	r4, r1
 8008cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8008cca:	d174      	bne.n	8008db6 <_strtod_l+0x296>
 8008ccc:	2401      	movs	r4, #1
 8008cce:	e06d      	b.n	8008dac <_strtod_l+0x28c>
 8008cd0:	9908      	ldr	r1, [sp, #32]
 8008cd2:	2908      	cmp	r1, #8
 8008cd4:	dc09      	bgt.n	8008cea <_strtod_l+0x1ca>
 8008cd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cd8:	4351      	muls	r1, r2
 8008cda:	185b      	adds	r3, r3, r1
 8008cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8008cde:	9b08      	ldr	r3, [sp, #32]
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	9308      	str	r3, [sp, #32]
 8008ce6:	901b      	str	r0, [sp, #108]	; 0x6c
 8008ce8:	e7c3      	b.n	8008c72 <_strtod_l+0x152>
 8008cea:	4355      	muls	r5, r2
 8008cec:	195d      	adds	r5, r3, r5
 8008cee:	e7f6      	b.n	8008cde <_strtod_l+0x1be>
 8008cf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	921b      	str	r2, [sp, #108]	; 0x6c
 8008cf6:	9a08      	ldr	r2, [sp, #32]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	d03a      	beq.n	8008d74 <_strtod_l+0x254>
 8008cfe:	900c      	str	r0, [sp, #48]	; 0x30
 8008d00:	9205      	str	r2, [sp, #20]
 8008d02:	001a      	movs	r2, r3
 8008d04:	3a30      	subs	r2, #48	; 0x30
 8008d06:	2a09      	cmp	r2, #9
 8008d08:	d912      	bls.n	8008d30 <_strtod_l+0x210>
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4694      	mov	ip, r2
 8008d0e:	e7c3      	b.n	8008c98 <_strtod_l+0x178>
 8008d10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d12:	3001      	adds	r0, #1
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	2b30      	cmp	r3, #48	; 0x30
 8008d1c:	d0f8      	beq.n	8008d10 <_strtod_l+0x1f0>
 8008d1e:	001a      	movs	r2, r3
 8008d20:	3a31      	subs	r2, #49	; 0x31
 8008d22:	2a08      	cmp	r2, #8
 8008d24:	d83c      	bhi.n	8008da0 <_strtod_l+0x280>
 8008d26:	900c      	str	r0, [sp, #48]	; 0x30
 8008d28:	2000      	movs	r0, #0
 8008d2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d2c:	9005      	str	r0, [sp, #20]
 8008d2e:	9210      	str	r2, [sp, #64]	; 0x40
 8008d30:	001a      	movs	r2, r3
 8008d32:	1c41      	adds	r1, r0, #1
 8008d34:	3a30      	subs	r2, #48	; 0x30
 8008d36:	2b30      	cmp	r3, #48	; 0x30
 8008d38:	d016      	beq.n	8008d68 <_strtod_l+0x248>
 8008d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d3c:	185b      	adds	r3, r3, r1
 8008d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008d40:	9b05      	ldr	r3, [sp, #20]
 8008d42:	210a      	movs	r1, #10
 8008d44:	469c      	mov	ip, r3
 8008d46:	4484      	add	ip, r0
 8008d48:	4563      	cmp	r3, ip
 8008d4a:	d115      	bne.n	8008d78 <_strtod_l+0x258>
 8008d4c:	9905      	ldr	r1, [sp, #20]
 8008d4e:	9b05      	ldr	r3, [sp, #20]
 8008d50:	3101      	adds	r1, #1
 8008d52:	1809      	adds	r1, r1, r0
 8008d54:	181b      	adds	r3, r3, r0
 8008d56:	9105      	str	r1, [sp, #20]
 8008d58:	2b08      	cmp	r3, #8
 8008d5a:	dc19      	bgt.n	8008d90 <_strtod_l+0x270>
 8008d5c:	230a      	movs	r3, #10
 8008d5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d60:	434b      	muls	r3, r1
 8008d62:	2100      	movs	r1, #0
 8008d64:	18d3      	adds	r3, r2, r3
 8008d66:	930d      	str	r3, [sp, #52]	; 0x34
 8008d68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d6a:	0008      	movs	r0, r1
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	e7c6      	b.n	8008d02 <_strtod_l+0x1e2>
 8008d74:	9808      	ldr	r0, [sp, #32]
 8008d76:	e7d0      	b.n	8008d1a <_strtod_l+0x1fa>
 8008d78:	1c5c      	adds	r4, r3, #1
 8008d7a:	2b08      	cmp	r3, #8
 8008d7c:	dc04      	bgt.n	8008d88 <_strtod_l+0x268>
 8008d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d80:	434b      	muls	r3, r1
 8008d82:	930d      	str	r3, [sp, #52]	; 0x34
 8008d84:	0023      	movs	r3, r4
 8008d86:	e7df      	b.n	8008d48 <_strtod_l+0x228>
 8008d88:	2c10      	cmp	r4, #16
 8008d8a:	dcfb      	bgt.n	8008d84 <_strtod_l+0x264>
 8008d8c:	434d      	muls	r5, r1
 8008d8e:	e7f9      	b.n	8008d84 <_strtod_l+0x264>
 8008d90:	9b05      	ldr	r3, [sp, #20]
 8008d92:	2100      	movs	r1, #0
 8008d94:	2b10      	cmp	r3, #16
 8008d96:	dce7      	bgt.n	8008d68 <_strtod_l+0x248>
 8008d98:	230a      	movs	r3, #10
 8008d9a:	435d      	muls	r5, r3
 8008d9c:	1955      	adds	r5, r2, r5
 8008d9e:	e7e3      	b.n	8008d68 <_strtod_l+0x248>
 8008da0:	2200      	movs	r2, #0
 8008da2:	920c      	str	r2, [sp, #48]	; 0x30
 8008da4:	9205      	str	r2, [sp, #20]
 8008da6:	3201      	adds	r2, #1
 8008da8:	e7b0      	b.n	8008d0c <_strtod_l+0x1ec>
 8008daa:	2400      	movs	r4, #0
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	3302      	adds	r3, #2
 8008db0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008db2:	9b07      	ldr	r3, [sp, #28]
 8008db4:	789b      	ldrb	r3, [r3, #2]
 8008db6:	001a      	movs	r2, r3
 8008db8:	3a30      	subs	r2, #48	; 0x30
 8008dba:	2a09      	cmp	r2, #9
 8008dbc:	d914      	bls.n	8008de8 <_strtod_l+0x2c8>
 8008dbe:	9a07      	ldr	r2, [sp, #28]
 8008dc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	e033      	b.n	8008e2e <_strtod_l+0x30e>
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	0800d6fc 	.word	0x0800d6fc
 8008dcc:	7ff00000 	.word	0x7ff00000
 8008dd0:	ffefffff 	.word	0xffefffff
 8008dd4:	00000433 	.word	0x00000433
 8008dd8:	7fffffff 	.word	0x7fffffff
 8008ddc:	0800d6f8 	.word	0x0800d6f8
 8008de0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	921b      	str	r2, [sp, #108]	; 0x6c
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b30      	cmp	r3, #48	; 0x30
 8008dea:	d0f9      	beq.n	8008de0 <_strtod_l+0x2c0>
 8008dec:	2200      	movs	r2, #0
 8008dee:	9206      	str	r2, [sp, #24]
 8008df0:	001a      	movs	r2, r3
 8008df2:	3a31      	subs	r2, #49	; 0x31
 8008df4:	2a08      	cmp	r2, #8
 8008df6:	d81b      	bhi.n	8008e30 <_strtod_l+0x310>
 8008df8:	3b30      	subs	r3, #48	; 0x30
 8008dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8008dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dfe:	9306      	str	r3, [sp, #24]
 8008e00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e02:	1c59      	adds	r1, r3, #1
 8008e04:	911b      	str	r1, [sp, #108]	; 0x6c
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	001a      	movs	r2, r3
 8008e0a:	3a30      	subs	r2, #48	; 0x30
 8008e0c:	2a09      	cmp	r2, #9
 8008e0e:	d93a      	bls.n	8008e86 <_strtod_l+0x366>
 8008e10:	9a06      	ldr	r2, [sp, #24]
 8008e12:	1a8a      	subs	r2, r1, r2
 8008e14:	49b2      	ldr	r1, [pc, #712]	; (80090e0 <_strtod_l+0x5c0>)
 8008e16:	9106      	str	r1, [sp, #24]
 8008e18:	2a08      	cmp	r2, #8
 8008e1a:	dc04      	bgt.n	8008e26 <_strtod_l+0x306>
 8008e1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e1e:	9206      	str	r2, [sp, #24]
 8008e20:	428a      	cmp	r2, r1
 8008e22:	dd00      	ble.n	8008e26 <_strtod_l+0x306>
 8008e24:	9106      	str	r1, [sp, #24]
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	d002      	beq.n	8008e30 <_strtod_l+0x310>
 8008e2a:	9a06      	ldr	r2, [sp, #24]
 8008e2c:	4252      	negs	r2, r2
 8008e2e:	9206      	str	r2, [sp, #24]
 8008e30:	9a05      	ldr	r2, [sp, #20]
 8008e32:	2a00      	cmp	r2, #0
 8008e34:	d14d      	bne.n	8008ed2 <_strtod_l+0x3b2>
 8008e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e38:	4310      	orrs	r0, r2
 8008e3a:	d000      	beq.n	8008e3e <_strtod_l+0x31e>
 8008e3c:	e6ab      	b.n	8008b96 <_strtod_l+0x76>
 8008e3e:	4662      	mov	r2, ip
 8008e40:	2a00      	cmp	r2, #0
 8008e42:	d000      	beq.n	8008e46 <_strtod_l+0x326>
 8008e44:	e6c5      	b.n	8008bd2 <_strtod_l+0xb2>
 8008e46:	2b69      	cmp	r3, #105	; 0x69
 8008e48:	d027      	beq.n	8008e9a <_strtod_l+0x37a>
 8008e4a:	dc23      	bgt.n	8008e94 <_strtod_l+0x374>
 8008e4c:	2b49      	cmp	r3, #73	; 0x49
 8008e4e:	d024      	beq.n	8008e9a <_strtod_l+0x37a>
 8008e50:	2b4e      	cmp	r3, #78	; 0x4e
 8008e52:	d000      	beq.n	8008e56 <_strtod_l+0x336>
 8008e54:	e6bd      	b.n	8008bd2 <_strtod_l+0xb2>
 8008e56:	49a3      	ldr	r1, [pc, #652]	; (80090e4 <_strtod_l+0x5c4>)
 8008e58:	a81b      	add	r0, sp, #108	; 0x6c
 8008e5a:	f003 f809 	bl	800be70 <__match>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d100      	bne.n	8008e64 <_strtod_l+0x344>
 8008e62:	e6b6      	b.n	8008bd2 <_strtod_l+0xb2>
 8008e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b28      	cmp	r3, #40	; 0x28
 8008e6a:	d12c      	bne.n	8008ec6 <_strtod_l+0x3a6>
 8008e6c:	499e      	ldr	r1, [pc, #632]	; (80090e8 <_strtod_l+0x5c8>)
 8008e6e:	aa1e      	add	r2, sp, #120	; 0x78
 8008e70:	a81b      	add	r0, sp, #108	; 0x6c
 8008e72:	f003 f811 	bl	800be98 <__hexnan>
 8008e76:	2805      	cmp	r0, #5
 8008e78:	d125      	bne.n	8008ec6 <_strtod_l+0x3a6>
 8008e7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e7c:	4a9b      	ldr	r2, [pc, #620]	; (80090ec <_strtod_l+0x5cc>)
 8008e7e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008e80:	431a      	orrs	r2, r3
 8008e82:	0017      	movs	r7, r2
 8008e84:	e687      	b.n	8008b96 <_strtod_l+0x76>
 8008e86:	220a      	movs	r2, #10
 8008e88:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e8a:	434a      	muls	r2, r1
 8008e8c:	18d2      	adds	r2, r2, r3
 8008e8e:	3a30      	subs	r2, #48	; 0x30
 8008e90:	920e      	str	r2, [sp, #56]	; 0x38
 8008e92:	e7b5      	b.n	8008e00 <_strtod_l+0x2e0>
 8008e94:	2b6e      	cmp	r3, #110	; 0x6e
 8008e96:	d0de      	beq.n	8008e56 <_strtod_l+0x336>
 8008e98:	e69b      	b.n	8008bd2 <_strtod_l+0xb2>
 8008e9a:	4995      	ldr	r1, [pc, #596]	; (80090f0 <_strtod_l+0x5d0>)
 8008e9c:	a81b      	add	r0, sp, #108	; 0x6c
 8008e9e:	f002 ffe7 	bl	800be70 <__match>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d100      	bne.n	8008ea8 <_strtod_l+0x388>
 8008ea6:	e694      	b.n	8008bd2 <_strtod_l+0xb2>
 8008ea8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eaa:	4992      	ldr	r1, [pc, #584]	; (80090f4 <_strtod_l+0x5d4>)
 8008eac:	3b01      	subs	r3, #1
 8008eae:	a81b      	add	r0, sp, #108	; 0x6c
 8008eb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008eb2:	f002 ffdd 	bl	800be70 <__match>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d102      	bne.n	8008ec0 <_strtod_l+0x3a0>
 8008eba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ec0:	2600      	movs	r6, #0
 8008ec2:	4f8a      	ldr	r7, [pc, #552]	; (80090ec <_strtod_l+0x5cc>)
 8008ec4:	e667      	b.n	8008b96 <_strtod_l+0x76>
 8008ec6:	488c      	ldr	r0, [pc, #560]	; (80090f8 <_strtod_l+0x5d8>)
 8008ec8:	f001 fe40 	bl	800ab4c <nan>
 8008ecc:	0006      	movs	r6, r0
 8008ece:	000f      	movs	r7, r1
 8008ed0:	e661      	b.n	8008b96 <_strtod_l+0x76>
 8008ed2:	9b06      	ldr	r3, [sp, #24]
 8008ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eda:	9b08      	ldr	r3, [sp, #32]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <_strtod_l+0x3c4>
 8008ee0:	9b05      	ldr	r3, [sp, #20]
 8008ee2:	9308      	str	r3, [sp, #32]
 8008ee4:	9c05      	ldr	r4, [sp, #20]
 8008ee6:	2c10      	cmp	r4, #16
 8008ee8:	dd00      	ble.n	8008eec <_strtod_l+0x3cc>
 8008eea:	2410      	movs	r4, #16
 8008eec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008eee:	f7f9 fed7 	bl	8002ca0 <__aeabi_ui2d>
 8008ef2:	9b05      	ldr	r3, [sp, #20]
 8008ef4:	0006      	movs	r6, r0
 8008ef6:	000f      	movs	r7, r1
 8008ef8:	2b09      	cmp	r3, #9
 8008efa:	dd15      	ble.n	8008f28 <_strtod_l+0x408>
 8008efc:	0022      	movs	r2, r4
 8008efe:	4b7f      	ldr	r3, [pc, #508]	; (80090fc <_strtod_l+0x5dc>)
 8008f00:	3a09      	subs	r2, #9
 8008f02:	00d2      	lsls	r2, r2, #3
 8008f04:	189b      	adds	r3, r3, r2
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f7f9 f801 	bl	8001f10 <__aeabi_dmul>
 8008f0e:	0006      	movs	r6, r0
 8008f10:	0028      	movs	r0, r5
 8008f12:	000f      	movs	r7, r1
 8008f14:	f7f9 fec4 	bl	8002ca0 <__aeabi_ui2d>
 8008f18:	0002      	movs	r2, r0
 8008f1a:	000b      	movs	r3, r1
 8008f1c:	0030      	movs	r0, r6
 8008f1e:	0039      	movs	r1, r7
 8008f20:	f7f8 f89c 	bl	800105c <__aeabi_dadd>
 8008f24:	0006      	movs	r6, r0
 8008f26:	000f      	movs	r7, r1
 8008f28:	9b05      	ldr	r3, [sp, #20]
 8008f2a:	2b0f      	cmp	r3, #15
 8008f2c:	dc39      	bgt.n	8008fa2 <_strtod_l+0x482>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d100      	bne.n	8008f36 <_strtod_l+0x416>
 8008f34:	e62f      	b.n	8008b96 <_strtod_l+0x76>
 8008f36:	dd24      	ble.n	8008f82 <_strtod_l+0x462>
 8008f38:	2b16      	cmp	r3, #22
 8008f3a:	dc09      	bgt.n	8008f50 <_strtod_l+0x430>
 8008f3c:	496f      	ldr	r1, [pc, #444]	; (80090fc <_strtod_l+0x5dc>)
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	18c9      	adds	r1, r1, r3
 8008f42:	0032      	movs	r2, r6
 8008f44:	6808      	ldr	r0, [r1, #0]
 8008f46:	6849      	ldr	r1, [r1, #4]
 8008f48:	003b      	movs	r3, r7
 8008f4a:	f7f8 ffe1 	bl	8001f10 <__aeabi_dmul>
 8008f4e:	e7bd      	b.n	8008ecc <_strtod_l+0x3ac>
 8008f50:	2325      	movs	r3, #37	; 0x25
 8008f52:	9a05      	ldr	r2, [sp, #20]
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	db22      	blt.n	8008fa2 <_strtod_l+0x482>
 8008f5c:	240f      	movs	r4, #15
 8008f5e:	9b05      	ldr	r3, [sp, #20]
 8008f60:	4d66      	ldr	r5, [pc, #408]	; (80090fc <_strtod_l+0x5dc>)
 8008f62:	1ae4      	subs	r4, r4, r3
 8008f64:	00e1      	lsls	r1, r4, #3
 8008f66:	1869      	adds	r1, r5, r1
 8008f68:	0032      	movs	r2, r6
 8008f6a:	6808      	ldr	r0, [r1, #0]
 8008f6c:	6849      	ldr	r1, [r1, #4]
 8008f6e:	003b      	movs	r3, r7
 8008f70:	f7f8 ffce 	bl	8001f10 <__aeabi_dmul>
 8008f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f76:	1b1c      	subs	r4, r3, r4
 8008f78:	00e4      	lsls	r4, r4, #3
 8008f7a:	192d      	adds	r5, r5, r4
 8008f7c:	682a      	ldr	r2, [r5, #0]
 8008f7e:	686b      	ldr	r3, [r5, #4]
 8008f80:	e7e3      	b.n	8008f4a <_strtod_l+0x42a>
 8008f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f84:	3316      	adds	r3, #22
 8008f86:	db0c      	blt.n	8008fa2 <_strtod_l+0x482>
 8008f88:	9906      	ldr	r1, [sp, #24]
 8008f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f8c:	4b5b      	ldr	r3, [pc, #364]	; (80090fc <_strtod_l+0x5dc>)
 8008f8e:	1a52      	subs	r2, r2, r1
 8008f90:	00d2      	lsls	r2, r2, #3
 8008f92:	189b      	adds	r3, r3, r2
 8008f94:	0030      	movs	r0, r6
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	0039      	movs	r1, r7
 8008f9c:	f7f8 fbbe 	bl	800171c <__aeabi_ddiv>
 8008fa0:	e794      	b.n	8008ecc <_strtod_l+0x3ac>
 8008fa2:	9b05      	ldr	r3, [sp, #20]
 8008fa4:	1b1c      	subs	r4, r3, r4
 8008fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa8:	18e4      	adds	r4, r4, r3
 8008faa:	2c00      	cmp	r4, #0
 8008fac:	dd72      	ble.n	8009094 <_strtod_l+0x574>
 8008fae:	220f      	movs	r2, #15
 8008fb0:	0023      	movs	r3, r4
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	4214      	tst	r4, r2
 8008fb6:	d00a      	beq.n	8008fce <_strtod_l+0x4ae>
 8008fb8:	4950      	ldr	r1, [pc, #320]	; (80090fc <_strtod_l+0x5dc>)
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	18c9      	adds	r1, r1, r3
 8008fbe:	0032      	movs	r2, r6
 8008fc0:	6808      	ldr	r0, [r1, #0]
 8008fc2:	6849      	ldr	r1, [r1, #4]
 8008fc4:	003b      	movs	r3, r7
 8008fc6:	f7f8 ffa3 	bl	8001f10 <__aeabi_dmul>
 8008fca:	0006      	movs	r6, r0
 8008fcc:	000f      	movs	r7, r1
 8008fce:	230f      	movs	r3, #15
 8008fd0:	439c      	bics	r4, r3
 8008fd2:	d04a      	beq.n	800906a <_strtod_l+0x54a>
 8008fd4:	3326      	adds	r3, #38	; 0x26
 8008fd6:	33ff      	adds	r3, #255	; 0xff
 8008fd8:	429c      	cmp	r4, r3
 8008fda:	dd22      	ble.n	8009022 <_strtod_l+0x502>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9305      	str	r3, [sp, #20]
 8008fe0:	9306      	str	r3, [sp, #24]
 8008fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	2322      	movs	r3, #34	; 0x22
 8008fe8:	2600      	movs	r6, #0
 8008fea:	9a04      	ldr	r2, [sp, #16]
 8008fec:	4f3f      	ldr	r7, [pc, #252]	; (80090ec <_strtod_l+0x5cc>)
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff2:	42b3      	cmp	r3, r6
 8008ff4:	d100      	bne.n	8008ff8 <_strtod_l+0x4d8>
 8008ff6:	e5ce      	b.n	8008b96 <_strtod_l+0x76>
 8008ff8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ffa:	9804      	ldr	r0, [sp, #16]
 8008ffc:	f003 f908 	bl	800c210 <_Bfree>
 8009000:	9908      	ldr	r1, [sp, #32]
 8009002:	9804      	ldr	r0, [sp, #16]
 8009004:	f003 f904 	bl	800c210 <_Bfree>
 8009008:	9906      	ldr	r1, [sp, #24]
 800900a:	9804      	ldr	r0, [sp, #16]
 800900c:	f003 f900 	bl	800c210 <_Bfree>
 8009010:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009012:	9804      	ldr	r0, [sp, #16]
 8009014:	f003 f8fc 	bl	800c210 <_Bfree>
 8009018:	9905      	ldr	r1, [sp, #20]
 800901a:	9804      	ldr	r0, [sp, #16]
 800901c:	f003 f8f8 	bl	800c210 <_Bfree>
 8009020:	e5b9      	b.n	8008b96 <_strtod_l+0x76>
 8009022:	2300      	movs	r3, #0
 8009024:	0030      	movs	r0, r6
 8009026:	0039      	movs	r1, r7
 8009028:	4d35      	ldr	r5, [pc, #212]	; (8009100 <_strtod_l+0x5e0>)
 800902a:	1124      	asrs	r4, r4, #4
 800902c:	9307      	str	r3, [sp, #28]
 800902e:	2c01      	cmp	r4, #1
 8009030:	dc1e      	bgt.n	8009070 <_strtod_l+0x550>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <_strtod_l+0x51a>
 8009036:	0006      	movs	r6, r0
 8009038:	000f      	movs	r7, r1
 800903a:	4b32      	ldr	r3, [pc, #200]	; (8009104 <_strtod_l+0x5e4>)
 800903c:	9a07      	ldr	r2, [sp, #28]
 800903e:	18ff      	adds	r7, r7, r3
 8009040:	4b2f      	ldr	r3, [pc, #188]	; (8009100 <_strtod_l+0x5e0>)
 8009042:	00d2      	lsls	r2, r2, #3
 8009044:	189d      	adds	r5, r3, r2
 8009046:	6828      	ldr	r0, [r5, #0]
 8009048:	6869      	ldr	r1, [r5, #4]
 800904a:	0032      	movs	r2, r6
 800904c:	003b      	movs	r3, r7
 800904e:	f7f8 ff5f 	bl	8001f10 <__aeabi_dmul>
 8009052:	4b26      	ldr	r3, [pc, #152]	; (80090ec <_strtod_l+0x5cc>)
 8009054:	4a2c      	ldr	r2, [pc, #176]	; (8009108 <_strtod_l+0x5e8>)
 8009056:	0006      	movs	r6, r0
 8009058:	400b      	ands	r3, r1
 800905a:	4293      	cmp	r3, r2
 800905c:	d8be      	bhi.n	8008fdc <_strtod_l+0x4bc>
 800905e:	4a2b      	ldr	r2, [pc, #172]	; (800910c <_strtod_l+0x5ec>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d913      	bls.n	800908c <_strtod_l+0x56c>
 8009064:	2601      	movs	r6, #1
 8009066:	4f2a      	ldr	r7, [pc, #168]	; (8009110 <_strtod_l+0x5f0>)
 8009068:	4276      	negs	r6, r6
 800906a:	2300      	movs	r3, #0
 800906c:	9307      	str	r3, [sp, #28]
 800906e:	e088      	b.n	8009182 <_strtod_l+0x662>
 8009070:	2201      	movs	r2, #1
 8009072:	4214      	tst	r4, r2
 8009074:	d004      	beq.n	8009080 <_strtod_l+0x560>
 8009076:	682a      	ldr	r2, [r5, #0]
 8009078:	686b      	ldr	r3, [r5, #4]
 800907a:	f7f8 ff49 	bl	8001f10 <__aeabi_dmul>
 800907e:	2301      	movs	r3, #1
 8009080:	9a07      	ldr	r2, [sp, #28]
 8009082:	1064      	asrs	r4, r4, #1
 8009084:	3201      	adds	r2, #1
 8009086:	9207      	str	r2, [sp, #28]
 8009088:	3508      	adds	r5, #8
 800908a:	e7d0      	b.n	800902e <_strtod_l+0x50e>
 800908c:	23d4      	movs	r3, #212	; 0xd4
 800908e:	049b      	lsls	r3, r3, #18
 8009090:	18cf      	adds	r7, r1, r3
 8009092:	e7ea      	b.n	800906a <_strtod_l+0x54a>
 8009094:	2c00      	cmp	r4, #0
 8009096:	d0e8      	beq.n	800906a <_strtod_l+0x54a>
 8009098:	4264      	negs	r4, r4
 800909a:	230f      	movs	r3, #15
 800909c:	0022      	movs	r2, r4
 800909e:	401a      	ands	r2, r3
 80090a0:	421c      	tst	r4, r3
 80090a2:	d00a      	beq.n	80090ba <_strtod_l+0x59a>
 80090a4:	4b15      	ldr	r3, [pc, #84]	; (80090fc <_strtod_l+0x5dc>)
 80090a6:	00d2      	lsls	r2, r2, #3
 80090a8:	189b      	adds	r3, r3, r2
 80090aa:	0030      	movs	r0, r6
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	0039      	movs	r1, r7
 80090b2:	f7f8 fb33 	bl	800171c <__aeabi_ddiv>
 80090b6:	0006      	movs	r6, r0
 80090b8:	000f      	movs	r7, r1
 80090ba:	1124      	asrs	r4, r4, #4
 80090bc:	d0d5      	beq.n	800906a <_strtod_l+0x54a>
 80090be:	2c1f      	cmp	r4, #31
 80090c0:	dd28      	ble.n	8009114 <_strtod_l+0x5f4>
 80090c2:	2300      	movs	r3, #0
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	9306      	str	r3, [sp, #24]
 80090c8:	930d      	str	r3, [sp, #52]	; 0x34
 80090ca:	9308      	str	r3, [sp, #32]
 80090cc:	2322      	movs	r3, #34	; 0x22
 80090ce:	9a04      	ldr	r2, [sp, #16]
 80090d0:	2600      	movs	r6, #0
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d6:	2700      	movs	r7, #0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d18d      	bne.n	8008ff8 <_strtod_l+0x4d8>
 80090dc:	e55b      	b.n	8008b96 <_strtod_l+0x76>
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	00004e1f 	.word	0x00004e1f
 80090e4:	0800d85e 	.word	0x0800d85e
 80090e8:	0800d710 	.word	0x0800d710
 80090ec:	7ff00000 	.word	0x7ff00000
 80090f0:	0800d856 	.word	0x0800d856
 80090f4:	0800d895 	.word	0x0800d895
 80090f8:	0800db20 	.word	0x0800db20
 80090fc:	0800da00 	.word	0x0800da00
 8009100:	0800d9d8 	.word	0x0800d9d8
 8009104:	fcb00000 	.word	0xfcb00000
 8009108:	7ca00000 	.word	0x7ca00000
 800910c:	7c900000 	.word	0x7c900000
 8009110:	7fefffff 	.word	0x7fefffff
 8009114:	2310      	movs	r3, #16
 8009116:	0022      	movs	r2, r4
 8009118:	401a      	ands	r2, r3
 800911a:	9207      	str	r2, [sp, #28]
 800911c:	421c      	tst	r4, r3
 800911e:	d001      	beq.n	8009124 <_strtod_l+0x604>
 8009120:	335a      	adds	r3, #90	; 0x5a
 8009122:	9307      	str	r3, [sp, #28]
 8009124:	0030      	movs	r0, r6
 8009126:	0039      	movs	r1, r7
 8009128:	2300      	movs	r3, #0
 800912a:	4dc4      	ldr	r5, [pc, #784]	; (800943c <_strtod_l+0x91c>)
 800912c:	2201      	movs	r2, #1
 800912e:	4214      	tst	r4, r2
 8009130:	d004      	beq.n	800913c <_strtod_l+0x61c>
 8009132:	682a      	ldr	r2, [r5, #0]
 8009134:	686b      	ldr	r3, [r5, #4]
 8009136:	f7f8 feeb 	bl	8001f10 <__aeabi_dmul>
 800913a:	2301      	movs	r3, #1
 800913c:	1064      	asrs	r4, r4, #1
 800913e:	3508      	adds	r5, #8
 8009140:	2c00      	cmp	r4, #0
 8009142:	d1f3      	bne.n	800912c <_strtod_l+0x60c>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <_strtod_l+0x62c>
 8009148:	0006      	movs	r6, r0
 800914a:	000f      	movs	r7, r1
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00f      	beq.n	8009172 <_strtod_l+0x652>
 8009152:	236b      	movs	r3, #107	; 0x6b
 8009154:	007a      	lsls	r2, r7, #1
 8009156:	0d52      	lsrs	r2, r2, #21
 8009158:	0039      	movs	r1, r7
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	2b00      	cmp	r3, #0
 800915e:	dd08      	ble.n	8009172 <_strtod_l+0x652>
 8009160:	2b1f      	cmp	r3, #31
 8009162:	dc00      	bgt.n	8009166 <_strtod_l+0x646>
 8009164:	e121      	b.n	80093aa <_strtod_l+0x88a>
 8009166:	2600      	movs	r6, #0
 8009168:	2b34      	cmp	r3, #52	; 0x34
 800916a:	dc00      	bgt.n	800916e <_strtod_l+0x64e>
 800916c:	e116      	b.n	800939c <_strtod_l+0x87c>
 800916e:	27dc      	movs	r7, #220	; 0xdc
 8009170:	04bf      	lsls	r7, r7, #18
 8009172:	2200      	movs	r2, #0
 8009174:	2300      	movs	r3, #0
 8009176:	0030      	movs	r0, r6
 8009178:	0039      	movs	r1, r7
 800917a:	f7f7 f967 	bl	800044c <__aeabi_dcmpeq>
 800917e:	2800      	cmp	r0, #0
 8009180:	d19f      	bne.n	80090c2 <_strtod_l+0x5a2>
 8009182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009184:	9a08      	ldr	r2, [sp, #32]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	9910      	ldr	r1, [sp, #64]	; 0x40
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	9804      	ldr	r0, [sp, #16]
 800918e:	f003 f8a7 	bl	800c2e0 <__s2b>
 8009192:	900d      	str	r0, [sp, #52]	; 0x34
 8009194:	2800      	cmp	r0, #0
 8009196:	d100      	bne.n	800919a <_strtod_l+0x67a>
 8009198:	e720      	b.n	8008fdc <_strtod_l+0x4bc>
 800919a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919c:	9906      	ldr	r1, [sp, #24]
 800919e:	17da      	asrs	r2, r3, #31
 80091a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a2:	1a5b      	subs	r3, r3, r1
 80091a4:	401a      	ands	r2, r3
 80091a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a8:	9215      	str	r2, [sp, #84]	; 0x54
 80091aa:	43db      	mvns	r3, r3
 80091ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ae:	17db      	asrs	r3, r3, #31
 80091b0:	401a      	ands	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	9218      	str	r2, [sp, #96]	; 0x60
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	9306      	str	r3, [sp, #24]
 80091ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091bc:	9804      	ldr	r0, [sp, #16]
 80091be:	6859      	ldr	r1, [r3, #4]
 80091c0:	f002 ffe2 	bl	800c188 <_Balloc>
 80091c4:	9008      	str	r0, [sp, #32]
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d100      	bne.n	80091cc <_strtod_l+0x6ac>
 80091ca:	e70c      	b.n	8008fe6 <_strtod_l+0x4c6>
 80091cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091ce:	300c      	adds	r0, #12
 80091d0:	0019      	movs	r1, r3
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	310c      	adds	r1, #12
 80091d6:	3202      	adds	r2, #2
 80091d8:	0092      	lsls	r2, r2, #2
 80091da:	f001 fcad 	bl	800ab38 <memcpy>
 80091de:	ab1e      	add	r3, sp, #120	; 0x78
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	ab1d      	add	r3, sp, #116	; 0x74
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	0032      	movs	r2, r6
 80091e8:	003b      	movs	r3, r7
 80091ea:	9804      	ldr	r0, [sp, #16]
 80091ec:	9610      	str	r6, [sp, #64]	; 0x40
 80091ee:	9711      	str	r7, [sp, #68]	; 0x44
 80091f0:	f003 fbb8 	bl	800c964 <__d2b>
 80091f4:	901c      	str	r0, [sp, #112]	; 0x70
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d100      	bne.n	80091fc <_strtod_l+0x6dc>
 80091fa:	e6f4      	b.n	8008fe6 <_strtod_l+0x4c6>
 80091fc:	2101      	movs	r1, #1
 80091fe:	9804      	ldr	r0, [sp, #16]
 8009200:	f003 f902 	bl	800c408 <__i2b>
 8009204:	9006      	str	r0, [sp, #24]
 8009206:	2800      	cmp	r0, #0
 8009208:	d100      	bne.n	800920c <_strtod_l+0x6ec>
 800920a:	e6ec      	b.n	8008fe6 <_strtod_l+0x4c6>
 800920c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800920e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009210:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009212:	1ad4      	subs	r4, r2, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	db01      	blt.n	800921c <_strtod_l+0x6fc>
 8009218:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800921a:	195d      	adds	r5, r3, r5
 800921c:	9907      	ldr	r1, [sp, #28]
 800921e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009220:	1a5b      	subs	r3, r3, r1
 8009222:	2136      	movs	r1, #54	; 0x36
 8009224:	189b      	adds	r3, r3, r2
 8009226:	1a8a      	subs	r2, r1, r2
 8009228:	4985      	ldr	r1, [pc, #532]	; (8009440 <_strtod_l+0x920>)
 800922a:	2001      	movs	r0, #1
 800922c:	468c      	mov	ip, r1
 800922e:	2100      	movs	r1, #0
 8009230:	3b01      	subs	r3, #1
 8009232:	9114      	str	r1, [sp, #80]	; 0x50
 8009234:	9012      	str	r0, [sp, #72]	; 0x48
 8009236:	4563      	cmp	r3, ip
 8009238:	da07      	bge.n	800924a <_strtod_l+0x72a>
 800923a:	4661      	mov	r1, ip
 800923c:	1ac9      	subs	r1, r1, r3
 800923e:	1a52      	subs	r2, r2, r1
 8009240:	291f      	cmp	r1, #31
 8009242:	dd00      	ble.n	8009246 <_strtod_l+0x726>
 8009244:	e0b6      	b.n	80093b4 <_strtod_l+0x894>
 8009246:	4088      	lsls	r0, r1
 8009248:	9012      	str	r0, [sp, #72]	; 0x48
 800924a:	18ab      	adds	r3, r5, r2
 800924c:	930c      	str	r3, [sp, #48]	; 0x30
 800924e:	18a4      	adds	r4, r4, r2
 8009250:	9b07      	ldr	r3, [sp, #28]
 8009252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009254:	191c      	adds	r4, r3, r4
 8009256:	002b      	movs	r3, r5
 8009258:	4295      	cmp	r5, r2
 800925a:	dd00      	ble.n	800925e <_strtod_l+0x73e>
 800925c:	0013      	movs	r3, r2
 800925e:	42a3      	cmp	r3, r4
 8009260:	dd00      	ble.n	8009264 <_strtod_l+0x744>
 8009262:	0023      	movs	r3, r4
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd04      	ble.n	8009272 <_strtod_l+0x752>
 8009268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800926a:	1ae4      	subs	r4, r4, r3
 800926c:	1ad2      	subs	r2, r2, r3
 800926e:	920c      	str	r2, [sp, #48]	; 0x30
 8009270:	1aed      	subs	r5, r5, r3
 8009272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd17      	ble.n	80092a8 <_strtod_l+0x788>
 8009278:	001a      	movs	r2, r3
 800927a:	9906      	ldr	r1, [sp, #24]
 800927c:	9804      	ldr	r0, [sp, #16]
 800927e:	f003 f98b 	bl	800c598 <__pow5mult>
 8009282:	9006      	str	r0, [sp, #24]
 8009284:	2800      	cmp	r0, #0
 8009286:	d100      	bne.n	800928a <_strtod_l+0x76a>
 8009288:	e6ad      	b.n	8008fe6 <_strtod_l+0x4c6>
 800928a:	0001      	movs	r1, r0
 800928c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800928e:	9804      	ldr	r0, [sp, #16]
 8009290:	f003 f8d2 	bl	800c438 <__multiply>
 8009294:	900e      	str	r0, [sp, #56]	; 0x38
 8009296:	2800      	cmp	r0, #0
 8009298:	d100      	bne.n	800929c <_strtod_l+0x77c>
 800929a:	e6a4      	b.n	8008fe6 <_strtod_l+0x4c6>
 800929c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800929e:	9804      	ldr	r0, [sp, #16]
 80092a0:	f002 ffb6 	bl	800c210 <_Bfree>
 80092a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092a6:	931c      	str	r3, [sp, #112]	; 0x70
 80092a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd00      	ble.n	80092b0 <_strtod_l+0x790>
 80092ae:	e087      	b.n	80093c0 <_strtod_l+0x8a0>
 80092b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dd08      	ble.n	80092c8 <_strtod_l+0x7a8>
 80092b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092b8:	9908      	ldr	r1, [sp, #32]
 80092ba:	9804      	ldr	r0, [sp, #16]
 80092bc:	f003 f96c 	bl	800c598 <__pow5mult>
 80092c0:	9008      	str	r0, [sp, #32]
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d100      	bne.n	80092c8 <_strtod_l+0x7a8>
 80092c6:	e68e      	b.n	8008fe6 <_strtod_l+0x4c6>
 80092c8:	2c00      	cmp	r4, #0
 80092ca:	dd08      	ble.n	80092de <_strtod_l+0x7be>
 80092cc:	0022      	movs	r2, r4
 80092ce:	9908      	ldr	r1, [sp, #32]
 80092d0:	9804      	ldr	r0, [sp, #16]
 80092d2:	f003 f9bd 	bl	800c650 <__lshift>
 80092d6:	9008      	str	r0, [sp, #32]
 80092d8:	2800      	cmp	r0, #0
 80092da:	d100      	bne.n	80092de <_strtod_l+0x7be>
 80092dc:	e683      	b.n	8008fe6 <_strtod_l+0x4c6>
 80092de:	2d00      	cmp	r5, #0
 80092e0:	dd08      	ble.n	80092f4 <_strtod_l+0x7d4>
 80092e2:	002a      	movs	r2, r5
 80092e4:	9906      	ldr	r1, [sp, #24]
 80092e6:	9804      	ldr	r0, [sp, #16]
 80092e8:	f003 f9b2 	bl	800c650 <__lshift>
 80092ec:	9006      	str	r0, [sp, #24]
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d100      	bne.n	80092f4 <_strtod_l+0x7d4>
 80092f2:	e678      	b.n	8008fe6 <_strtod_l+0x4c6>
 80092f4:	9a08      	ldr	r2, [sp, #32]
 80092f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80092f8:	9804      	ldr	r0, [sp, #16]
 80092fa:	f003 fa33 	bl	800c764 <__mdiff>
 80092fe:	9005      	str	r0, [sp, #20]
 8009300:	2800      	cmp	r0, #0
 8009302:	d100      	bne.n	8009306 <_strtod_l+0x7e6>
 8009304:	e66f      	b.n	8008fe6 <_strtod_l+0x4c6>
 8009306:	2200      	movs	r2, #0
 8009308:	68c3      	ldr	r3, [r0, #12]
 800930a:	9906      	ldr	r1, [sp, #24]
 800930c:	60c2      	str	r2, [r0, #12]
 800930e:	930c      	str	r3, [sp, #48]	; 0x30
 8009310:	f003 fa0c 	bl	800c72c <__mcmp>
 8009314:	2800      	cmp	r0, #0
 8009316:	da5d      	bge.n	80093d4 <_strtod_l+0x8b4>
 8009318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800931a:	4333      	orrs	r3, r6
 800931c:	d000      	beq.n	8009320 <_strtod_l+0x800>
 800931e:	e088      	b.n	8009432 <_strtod_l+0x912>
 8009320:	033b      	lsls	r3, r7, #12
 8009322:	d000      	beq.n	8009326 <_strtod_l+0x806>
 8009324:	e085      	b.n	8009432 <_strtod_l+0x912>
 8009326:	22d6      	movs	r2, #214	; 0xd6
 8009328:	4b46      	ldr	r3, [pc, #280]	; (8009444 <_strtod_l+0x924>)
 800932a:	04d2      	lsls	r2, r2, #19
 800932c:	403b      	ands	r3, r7
 800932e:	4293      	cmp	r3, r2
 8009330:	d97f      	bls.n	8009432 <_strtod_l+0x912>
 8009332:	9b05      	ldr	r3, [sp, #20]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d103      	bne.n	8009342 <_strtod_l+0x822>
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b01      	cmp	r3, #1
 8009340:	dd77      	ble.n	8009432 <_strtod_l+0x912>
 8009342:	9905      	ldr	r1, [sp, #20]
 8009344:	2201      	movs	r2, #1
 8009346:	9804      	ldr	r0, [sp, #16]
 8009348:	f003 f982 	bl	800c650 <__lshift>
 800934c:	9906      	ldr	r1, [sp, #24]
 800934e:	9005      	str	r0, [sp, #20]
 8009350:	f003 f9ec 	bl	800c72c <__mcmp>
 8009354:	2800      	cmp	r0, #0
 8009356:	dd6c      	ble.n	8009432 <_strtod_l+0x912>
 8009358:	9907      	ldr	r1, [sp, #28]
 800935a:	003b      	movs	r3, r7
 800935c:	4a39      	ldr	r2, [pc, #228]	; (8009444 <_strtod_l+0x924>)
 800935e:	2900      	cmp	r1, #0
 8009360:	d100      	bne.n	8009364 <_strtod_l+0x844>
 8009362:	e094      	b.n	800948e <_strtod_l+0x96e>
 8009364:	0011      	movs	r1, r2
 8009366:	20d6      	movs	r0, #214	; 0xd6
 8009368:	4039      	ands	r1, r7
 800936a:	04c0      	lsls	r0, r0, #19
 800936c:	4281      	cmp	r1, r0
 800936e:	dd00      	ble.n	8009372 <_strtod_l+0x852>
 8009370:	e08d      	b.n	800948e <_strtod_l+0x96e>
 8009372:	23dc      	movs	r3, #220	; 0xdc
 8009374:	049b      	lsls	r3, r3, #18
 8009376:	4299      	cmp	r1, r3
 8009378:	dc00      	bgt.n	800937c <_strtod_l+0x85c>
 800937a:	e6a7      	b.n	80090cc <_strtod_l+0x5ac>
 800937c:	0030      	movs	r0, r6
 800937e:	0039      	movs	r1, r7
 8009380:	4b31      	ldr	r3, [pc, #196]	; (8009448 <_strtod_l+0x928>)
 8009382:	2200      	movs	r2, #0
 8009384:	f7f8 fdc4 	bl	8001f10 <__aeabi_dmul>
 8009388:	4b2e      	ldr	r3, [pc, #184]	; (8009444 <_strtod_l+0x924>)
 800938a:	0006      	movs	r6, r0
 800938c:	000f      	movs	r7, r1
 800938e:	420b      	tst	r3, r1
 8009390:	d000      	beq.n	8009394 <_strtod_l+0x874>
 8009392:	e631      	b.n	8008ff8 <_strtod_l+0x4d8>
 8009394:	2322      	movs	r3, #34	; 0x22
 8009396:	9a04      	ldr	r2, [sp, #16]
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	e62d      	b.n	8008ff8 <_strtod_l+0x4d8>
 800939c:	234b      	movs	r3, #75	; 0x4b
 800939e:	1a9a      	subs	r2, r3, r2
 80093a0:	3b4c      	subs	r3, #76	; 0x4c
 80093a2:	4093      	lsls	r3, r2
 80093a4:	4019      	ands	r1, r3
 80093a6:	000f      	movs	r7, r1
 80093a8:	e6e3      	b.n	8009172 <_strtod_l+0x652>
 80093aa:	2201      	movs	r2, #1
 80093ac:	4252      	negs	r2, r2
 80093ae:	409a      	lsls	r2, r3
 80093b0:	4016      	ands	r6, r2
 80093b2:	e6de      	b.n	8009172 <_strtod_l+0x652>
 80093b4:	4925      	ldr	r1, [pc, #148]	; (800944c <_strtod_l+0x92c>)
 80093b6:	1acb      	subs	r3, r1, r3
 80093b8:	0001      	movs	r1, r0
 80093ba:	4099      	lsls	r1, r3
 80093bc:	9114      	str	r1, [sp, #80]	; 0x50
 80093be:	e743      	b.n	8009248 <_strtod_l+0x728>
 80093c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093c4:	9804      	ldr	r0, [sp, #16]
 80093c6:	f003 f943 	bl	800c650 <__lshift>
 80093ca:	901c      	str	r0, [sp, #112]	; 0x70
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d000      	beq.n	80093d2 <_strtod_l+0x8b2>
 80093d0:	e76e      	b.n	80092b0 <_strtod_l+0x790>
 80093d2:	e608      	b.n	8008fe6 <_strtod_l+0x4c6>
 80093d4:	970e      	str	r7, [sp, #56]	; 0x38
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d177      	bne.n	80094ca <_strtod_l+0x9aa>
 80093da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093dc:	033b      	lsls	r3, r7, #12
 80093de:	0b1b      	lsrs	r3, r3, #12
 80093e0:	2a00      	cmp	r2, #0
 80093e2:	d039      	beq.n	8009458 <_strtod_l+0x938>
 80093e4:	4a1a      	ldr	r2, [pc, #104]	; (8009450 <_strtod_l+0x930>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d139      	bne.n	800945e <_strtod_l+0x93e>
 80093ea:	2101      	movs	r1, #1
 80093ec:	9b07      	ldr	r3, [sp, #28]
 80093ee:	4249      	negs	r1, r1
 80093f0:	0032      	movs	r2, r6
 80093f2:	0008      	movs	r0, r1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <_strtod_l+0x8f0>
 80093f8:	24d4      	movs	r4, #212	; 0xd4
 80093fa:	4b12      	ldr	r3, [pc, #72]	; (8009444 <_strtod_l+0x924>)
 80093fc:	0008      	movs	r0, r1
 80093fe:	403b      	ands	r3, r7
 8009400:	04e4      	lsls	r4, r4, #19
 8009402:	42a3      	cmp	r3, r4
 8009404:	d804      	bhi.n	8009410 <_strtod_l+0x8f0>
 8009406:	306c      	adds	r0, #108	; 0x6c
 8009408:	0d1b      	lsrs	r3, r3, #20
 800940a:	1ac3      	subs	r3, r0, r3
 800940c:	4099      	lsls	r1, r3
 800940e:	0008      	movs	r0, r1
 8009410:	4282      	cmp	r2, r0
 8009412:	d124      	bne.n	800945e <_strtod_l+0x93e>
 8009414:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <_strtod_l+0x934>)
 8009416:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009418:	4299      	cmp	r1, r3
 800941a:	d102      	bne.n	8009422 <_strtod_l+0x902>
 800941c:	3201      	adds	r2, #1
 800941e:	d100      	bne.n	8009422 <_strtod_l+0x902>
 8009420:	e5e1      	b.n	8008fe6 <_strtod_l+0x4c6>
 8009422:	4b08      	ldr	r3, [pc, #32]	; (8009444 <_strtod_l+0x924>)
 8009424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009426:	2600      	movs	r6, #0
 8009428:	401a      	ands	r2, r3
 800942a:	0013      	movs	r3, r2
 800942c:	2280      	movs	r2, #128	; 0x80
 800942e:	0352      	lsls	r2, r2, #13
 8009430:	189f      	adds	r7, r3, r2
 8009432:	9b07      	ldr	r3, [sp, #28]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1a1      	bne.n	800937c <_strtod_l+0x85c>
 8009438:	e5de      	b.n	8008ff8 <_strtod_l+0x4d8>
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	0800d728 	.word	0x0800d728
 8009440:	fffffc02 	.word	0xfffffc02
 8009444:	7ff00000 	.word	0x7ff00000
 8009448:	39500000 	.word	0x39500000
 800944c:	fffffbe2 	.word	0xfffffbe2
 8009450:	000fffff 	.word	0x000fffff
 8009454:	7fefffff 	.word	0x7fefffff
 8009458:	4333      	orrs	r3, r6
 800945a:	d100      	bne.n	800945e <_strtod_l+0x93e>
 800945c:	e77c      	b.n	8009358 <_strtod_l+0x838>
 800945e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01d      	beq.n	80094a0 <_strtod_l+0x980>
 8009464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009466:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009468:	4213      	tst	r3, r2
 800946a:	d0e2      	beq.n	8009432 <_strtod_l+0x912>
 800946c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800946e:	0030      	movs	r0, r6
 8009470:	0039      	movs	r1, r7
 8009472:	9a07      	ldr	r2, [sp, #28]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d017      	beq.n	80094a8 <_strtod_l+0x988>
 8009478:	f7ff fb3a 	bl	8008af0 <sulp>
 800947c:	0002      	movs	r2, r0
 800947e:	000b      	movs	r3, r1
 8009480:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009482:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009484:	f7f7 fdea 	bl	800105c <__aeabi_dadd>
 8009488:	0006      	movs	r6, r0
 800948a:	000f      	movs	r7, r1
 800948c:	e7d1      	b.n	8009432 <_strtod_l+0x912>
 800948e:	2601      	movs	r6, #1
 8009490:	4013      	ands	r3, r2
 8009492:	4a98      	ldr	r2, [pc, #608]	; (80096f4 <_strtod_l+0xbd4>)
 8009494:	4276      	negs	r6, r6
 8009496:	189b      	adds	r3, r3, r2
 8009498:	4a97      	ldr	r2, [pc, #604]	; (80096f8 <_strtod_l+0xbd8>)
 800949a:	431a      	orrs	r2, r3
 800949c:	0017      	movs	r7, r2
 800949e:	e7c8      	b.n	8009432 <_strtod_l+0x912>
 80094a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094a2:	4233      	tst	r3, r6
 80094a4:	d0c5      	beq.n	8009432 <_strtod_l+0x912>
 80094a6:	e7e1      	b.n	800946c <_strtod_l+0x94c>
 80094a8:	f7ff fb22 	bl	8008af0 <sulp>
 80094ac:	0002      	movs	r2, r0
 80094ae:	000b      	movs	r3, r1
 80094b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094b4:	f7f8 ffee 	bl	8002494 <__aeabi_dsub>
 80094b8:	2200      	movs	r2, #0
 80094ba:	2300      	movs	r3, #0
 80094bc:	0006      	movs	r6, r0
 80094be:	000f      	movs	r7, r1
 80094c0:	f7f6 ffc4 	bl	800044c <__aeabi_dcmpeq>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d0b4      	beq.n	8009432 <_strtod_l+0x912>
 80094c8:	e600      	b.n	80090cc <_strtod_l+0x5ac>
 80094ca:	9906      	ldr	r1, [sp, #24]
 80094cc:	9805      	ldr	r0, [sp, #20]
 80094ce:	f003 faa9 	bl	800ca24 <__ratio>
 80094d2:	2380      	movs	r3, #128	; 0x80
 80094d4:	2200      	movs	r2, #0
 80094d6:	05db      	lsls	r3, r3, #23
 80094d8:	0004      	movs	r4, r0
 80094da:	000d      	movs	r5, r1
 80094dc:	f7f6 ffc6 	bl	800046c <__aeabi_dcmple>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d06d      	beq.n	80095c0 <_strtod_l+0xaa0>
 80094e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d000      	beq.n	80094ec <_strtod_l+0x9cc>
 80094ea:	e07e      	b.n	80095ea <_strtod_l+0xaca>
 80094ec:	2e00      	cmp	r6, #0
 80094ee:	d158      	bne.n	80095a2 <_strtod_l+0xa82>
 80094f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094f2:	031b      	lsls	r3, r3, #12
 80094f4:	d000      	beq.n	80094f8 <_strtod_l+0x9d8>
 80094f6:	e07f      	b.n	80095f8 <_strtod_l+0xad8>
 80094f8:	2200      	movs	r2, #0
 80094fa:	0020      	movs	r0, r4
 80094fc:	0029      	movs	r1, r5
 80094fe:	4b7f      	ldr	r3, [pc, #508]	; (80096fc <_strtod_l+0xbdc>)
 8009500:	f7f6 ffaa 	bl	8000458 <__aeabi_dcmplt>
 8009504:	2800      	cmp	r0, #0
 8009506:	d158      	bne.n	80095ba <_strtod_l+0xa9a>
 8009508:	0020      	movs	r0, r4
 800950a:	0029      	movs	r1, r5
 800950c:	2200      	movs	r2, #0
 800950e:	4b7c      	ldr	r3, [pc, #496]	; (8009700 <_strtod_l+0xbe0>)
 8009510:	f7f8 fcfe 	bl	8001f10 <__aeabi_dmul>
 8009514:	0004      	movs	r4, r0
 8009516:	000d      	movs	r5, r1
 8009518:	2380      	movs	r3, #128	; 0x80
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	940a      	str	r4, [sp, #40]	; 0x28
 800951e:	18eb      	adds	r3, r5, r3
 8009520:	930b      	str	r3, [sp, #44]	; 0x2c
 8009522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009526:	9212      	str	r2, [sp, #72]	; 0x48
 8009528:	9313      	str	r3, [sp, #76]	; 0x4c
 800952a:	4a76      	ldr	r2, [pc, #472]	; (8009704 <_strtod_l+0xbe4>)
 800952c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800952e:	4013      	ands	r3, r2
 8009530:	9314      	str	r3, [sp, #80]	; 0x50
 8009532:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009534:	4b74      	ldr	r3, [pc, #464]	; (8009708 <_strtod_l+0xbe8>)
 8009536:	429a      	cmp	r2, r3
 8009538:	d000      	beq.n	800953c <_strtod_l+0xa1c>
 800953a:	e091      	b.n	8009660 <_strtod_l+0xb40>
 800953c:	4a73      	ldr	r2, [pc, #460]	; (800970c <_strtod_l+0xbec>)
 800953e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009540:	4694      	mov	ip, r2
 8009542:	4463      	add	r3, ip
 8009544:	001f      	movs	r7, r3
 8009546:	0030      	movs	r0, r6
 8009548:	0019      	movs	r1, r3
 800954a:	f003 f9a3 	bl	800c894 <__ulp>
 800954e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009552:	f7f8 fcdd 	bl	8001f10 <__aeabi_dmul>
 8009556:	0032      	movs	r2, r6
 8009558:	003b      	movs	r3, r7
 800955a:	f7f7 fd7f 	bl	800105c <__aeabi_dadd>
 800955e:	4a69      	ldr	r2, [pc, #420]	; (8009704 <_strtod_l+0xbe4>)
 8009560:	4b6b      	ldr	r3, [pc, #428]	; (8009710 <_strtod_l+0xbf0>)
 8009562:	0006      	movs	r6, r0
 8009564:	400a      	ands	r2, r1
 8009566:	429a      	cmp	r2, r3
 8009568:	d949      	bls.n	80095fe <_strtod_l+0xade>
 800956a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800956c:	4b69      	ldr	r3, [pc, #420]	; (8009714 <_strtod_l+0xbf4>)
 800956e:	429a      	cmp	r2, r3
 8009570:	d103      	bne.n	800957a <_strtod_l+0xa5a>
 8009572:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009574:	3301      	adds	r3, #1
 8009576:	d100      	bne.n	800957a <_strtod_l+0xa5a>
 8009578:	e535      	b.n	8008fe6 <_strtod_l+0x4c6>
 800957a:	2601      	movs	r6, #1
 800957c:	4f65      	ldr	r7, [pc, #404]	; (8009714 <_strtod_l+0xbf4>)
 800957e:	4276      	negs	r6, r6
 8009580:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009582:	9804      	ldr	r0, [sp, #16]
 8009584:	f002 fe44 	bl	800c210 <_Bfree>
 8009588:	9908      	ldr	r1, [sp, #32]
 800958a:	9804      	ldr	r0, [sp, #16]
 800958c:	f002 fe40 	bl	800c210 <_Bfree>
 8009590:	9906      	ldr	r1, [sp, #24]
 8009592:	9804      	ldr	r0, [sp, #16]
 8009594:	f002 fe3c 	bl	800c210 <_Bfree>
 8009598:	9905      	ldr	r1, [sp, #20]
 800959a:	9804      	ldr	r0, [sp, #16]
 800959c:	f002 fe38 	bl	800c210 <_Bfree>
 80095a0:	e60b      	b.n	80091ba <_strtod_l+0x69a>
 80095a2:	2e01      	cmp	r6, #1
 80095a4:	d103      	bne.n	80095ae <_strtod_l+0xa8e>
 80095a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d100      	bne.n	80095ae <_strtod_l+0xa8e>
 80095ac:	e58e      	b.n	80090cc <_strtod_l+0x5ac>
 80095ae:	2300      	movs	r3, #0
 80095b0:	4c59      	ldr	r4, [pc, #356]	; (8009718 <_strtod_l+0xbf8>)
 80095b2:	930a      	str	r3, [sp, #40]	; 0x28
 80095b4:	940b      	str	r4, [sp, #44]	; 0x2c
 80095b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80095b8:	e01c      	b.n	80095f4 <_strtod_l+0xad4>
 80095ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80095bc:	4d50      	ldr	r5, [pc, #320]	; (8009700 <_strtod_l+0xbe0>)
 80095be:	e7ab      	b.n	8009518 <_strtod_l+0x9f8>
 80095c0:	2200      	movs	r2, #0
 80095c2:	0020      	movs	r0, r4
 80095c4:	0029      	movs	r1, r5
 80095c6:	4b4e      	ldr	r3, [pc, #312]	; (8009700 <_strtod_l+0xbe0>)
 80095c8:	f7f8 fca2 	bl	8001f10 <__aeabi_dmul>
 80095cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095ce:	0004      	movs	r4, r0
 80095d0:	000b      	movs	r3, r1
 80095d2:	000d      	movs	r5, r1
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	d104      	bne.n	80095e2 <_strtod_l+0xac2>
 80095d8:	2280      	movs	r2, #128	; 0x80
 80095da:	0612      	lsls	r2, r2, #24
 80095dc:	900a      	str	r0, [sp, #40]	; 0x28
 80095de:	188b      	adds	r3, r1, r2
 80095e0:	e79e      	b.n	8009520 <_strtod_l+0xa00>
 80095e2:	0002      	movs	r2, r0
 80095e4:	920a      	str	r2, [sp, #40]	; 0x28
 80095e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e8:	e79b      	b.n	8009522 <_strtod_l+0xa02>
 80095ea:	2300      	movs	r3, #0
 80095ec:	4c43      	ldr	r4, [pc, #268]	; (80096fc <_strtod_l+0xbdc>)
 80095ee:	930a      	str	r3, [sp, #40]	; 0x28
 80095f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80095f2:	2400      	movs	r4, #0
 80095f4:	4d41      	ldr	r5, [pc, #260]	; (80096fc <_strtod_l+0xbdc>)
 80095f6:	e794      	b.n	8009522 <_strtod_l+0xa02>
 80095f8:	2300      	movs	r3, #0
 80095fa:	4c47      	ldr	r4, [pc, #284]	; (8009718 <_strtod_l+0xbf8>)
 80095fc:	e7f7      	b.n	80095ee <_strtod_l+0xace>
 80095fe:	23d4      	movs	r3, #212	; 0xd4
 8009600:	049b      	lsls	r3, r3, #18
 8009602:	18cf      	adds	r7, r1, r3
 8009604:	9b07      	ldr	r3, [sp, #28]
 8009606:	970e      	str	r7, [sp, #56]	; 0x38
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1b9      	bne.n	8009580 <_strtod_l+0xa60>
 800960c:	4b3d      	ldr	r3, [pc, #244]	; (8009704 <_strtod_l+0xbe4>)
 800960e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009610:	403b      	ands	r3, r7
 8009612:	429a      	cmp	r2, r3
 8009614:	d1b4      	bne.n	8009580 <_strtod_l+0xa60>
 8009616:	0020      	movs	r0, r4
 8009618:	0029      	movs	r1, r5
 800961a:	f7f6 ffb1 	bl	8000580 <__aeabi_d2lz>
 800961e:	f7f6 ffeb 	bl	80005f8 <__aeabi_l2d>
 8009622:	0002      	movs	r2, r0
 8009624:	000b      	movs	r3, r1
 8009626:	0020      	movs	r0, r4
 8009628:	0029      	movs	r1, r5
 800962a:	f7f8 ff33 	bl	8002494 <__aeabi_dsub>
 800962e:	033b      	lsls	r3, r7, #12
 8009630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009632:	0b1b      	lsrs	r3, r3, #12
 8009634:	4333      	orrs	r3, r6
 8009636:	4313      	orrs	r3, r2
 8009638:	0004      	movs	r4, r0
 800963a:	000d      	movs	r5, r1
 800963c:	4a37      	ldr	r2, [pc, #220]	; (800971c <_strtod_l+0xbfc>)
 800963e:	2b00      	cmp	r3, #0
 8009640:	d054      	beq.n	80096ec <_strtod_l+0xbcc>
 8009642:	4b37      	ldr	r3, [pc, #220]	; (8009720 <_strtod_l+0xc00>)
 8009644:	f7f6 ff08 	bl	8000458 <__aeabi_dcmplt>
 8009648:	2800      	cmp	r0, #0
 800964a:	d000      	beq.n	800964e <_strtod_l+0xb2e>
 800964c:	e4d4      	b.n	8008ff8 <_strtod_l+0x4d8>
 800964e:	0020      	movs	r0, r4
 8009650:	0029      	movs	r1, r5
 8009652:	4a34      	ldr	r2, [pc, #208]	; (8009724 <_strtod_l+0xc04>)
 8009654:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <_strtod_l+0xbe0>)
 8009656:	f7f6 ff13 	bl	8000480 <__aeabi_dcmpgt>
 800965a:	2800      	cmp	r0, #0
 800965c:	d090      	beq.n	8009580 <_strtod_l+0xa60>
 800965e:	e4cb      	b.n	8008ff8 <_strtod_l+0x4d8>
 8009660:	9b07      	ldr	r3, [sp, #28]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d02b      	beq.n	80096be <_strtod_l+0xb9e>
 8009666:	23d4      	movs	r3, #212	; 0xd4
 8009668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800966a:	04db      	lsls	r3, r3, #19
 800966c:	429a      	cmp	r2, r3
 800966e:	d826      	bhi.n	80096be <_strtod_l+0xb9e>
 8009670:	0020      	movs	r0, r4
 8009672:	0029      	movs	r1, r5
 8009674:	4a2c      	ldr	r2, [pc, #176]	; (8009728 <_strtod_l+0xc08>)
 8009676:	4b2d      	ldr	r3, [pc, #180]	; (800972c <_strtod_l+0xc0c>)
 8009678:	f7f6 fef8 	bl	800046c <__aeabi_dcmple>
 800967c:	2800      	cmp	r0, #0
 800967e:	d017      	beq.n	80096b0 <_strtod_l+0xb90>
 8009680:	0020      	movs	r0, r4
 8009682:	0029      	movs	r1, r5
 8009684:	f7f6 ff5e 	bl	8000544 <__aeabi_d2uiz>
 8009688:	2800      	cmp	r0, #0
 800968a:	d100      	bne.n	800968e <_strtod_l+0xb6e>
 800968c:	3001      	adds	r0, #1
 800968e:	f7f9 fb07 	bl	8002ca0 <__aeabi_ui2d>
 8009692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009694:	0004      	movs	r4, r0
 8009696:	000b      	movs	r3, r1
 8009698:	000d      	movs	r5, r1
 800969a:	2a00      	cmp	r2, #0
 800969c:	d122      	bne.n	80096e4 <_strtod_l+0xbc4>
 800969e:	2280      	movs	r2, #128	; 0x80
 80096a0:	0612      	lsls	r2, r2, #24
 80096a2:	188b      	adds	r3, r1, r2
 80096a4:	9016      	str	r0, [sp, #88]	; 0x58
 80096a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80096a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096ac:	9212      	str	r2, [sp, #72]	; 0x48
 80096ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80096b0:	22d6      	movs	r2, #214	; 0xd6
 80096b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096b4:	04d2      	lsls	r2, r2, #19
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80096be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80096c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80096c2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80096c4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80096c6:	f003 f8e5 	bl	800c894 <__ulp>
 80096ca:	0002      	movs	r2, r0
 80096cc:	000b      	movs	r3, r1
 80096ce:	0030      	movs	r0, r6
 80096d0:	0039      	movs	r1, r7
 80096d2:	f7f8 fc1d 	bl	8001f10 <__aeabi_dmul>
 80096d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096da:	f7f7 fcbf 	bl	800105c <__aeabi_dadd>
 80096de:	0006      	movs	r6, r0
 80096e0:	000f      	movs	r7, r1
 80096e2:	e78f      	b.n	8009604 <_strtod_l+0xae4>
 80096e4:	0002      	movs	r2, r0
 80096e6:	9216      	str	r2, [sp, #88]	; 0x58
 80096e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80096ea:	e7dd      	b.n	80096a8 <_strtod_l+0xb88>
 80096ec:	4b10      	ldr	r3, [pc, #64]	; (8009730 <_strtod_l+0xc10>)
 80096ee:	f7f6 feb3 	bl	8000458 <__aeabi_dcmplt>
 80096f2:	e7b2      	b.n	800965a <_strtod_l+0xb3a>
 80096f4:	fff00000 	.word	0xfff00000
 80096f8:	000fffff 	.word	0x000fffff
 80096fc:	3ff00000 	.word	0x3ff00000
 8009700:	3fe00000 	.word	0x3fe00000
 8009704:	7ff00000 	.word	0x7ff00000
 8009708:	7fe00000 	.word	0x7fe00000
 800970c:	fcb00000 	.word	0xfcb00000
 8009710:	7c9fffff 	.word	0x7c9fffff
 8009714:	7fefffff 	.word	0x7fefffff
 8009718:	bff00000 	.word	0xbff00000
 800971c:	94a03595 	.word	0x94a03595
 8009720:	3fdfffff 	.word	0x3fdfffff
 8009724:	35afe535 	.word	0x35afe535
 8009728:	ffc00000 	.word	0xffc00000
 800972c:	41dfffff 	.word	0x41dfffff
 8009730:	3fcfffff 	.word	0x3fcfffff

08009734 <_strtod_r>:
 8009734:	b510      	push	{r4, lr}
 8009736:	4b02      	ldr	r3, [pc, #8]	; (8009740 <_strtod_r+0xc>)
 8009738:	f7ff f9f2 	bl	8008b20 <_strtod_l>
 800973c:	bd10      	pop	{r4, pc}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	20000018 	.word	0x20000018

08009744 <_strtol_l.constprop.0>:
 8009744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009746:	b087      	sub	sp, #28
 8009748:	001e      	movs	r6, r3
 800974a:	9005      	str	r0, [sp, #20]
 800974c:	9101      	str	r1, [sp, #4]
 800974e:	9202      	str	r2, [sp, #8]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d048      	beq.n	80097e6 <_strtol_l.constprop.0+0xa2>
 8009754:	000b      	movs	r3, r1
 8009756:	2e24      	cmp	r6, #36	; 0x24
 8009758:	d845      	bhi.n	80097e6 <_strtol_l.constprop.0+0xa2>
 800975a:	4a3b      	ldr	r2, [pc, #236]	; (8009848 <_strtol_l.constprop.0+0x104>)
 800975c:	2108      	movs	r1, #8
 800975e:	4694      	mov	ip, r2
 8009760:	001a      	movs	r2, r3
 8009762:	4660      	mov	r0, ip
 8009764:	7814      	ldrb	r4, [r2, #0]
 8009766:	3301      	adds	r3, #1
 8009768:	5d00      	ldrb	r0, [r0, r4]
 800976a:	001d      	movs	r5, r3
 800976c:	0007      	movs	r7, r0
 800976e:	400f      	ands	r7, r1
 8009770:	4208      	tst	r0, r1
 8009772:	d1f5      	bne.n	8009760 <_strtol_l.constprop.0+0x1c>
 8009774:	2c2d      	cmp	r4, #45	; 0x2d
 8009776:	d13d      	bne.n	80097f4 <_strtol_l.constprop.0+0xb0>
 8009778:	2701      	movs	r7, #1
 800977a:	781c      	ldrb	r4, [r3, #0]
 800977c:	1c95      	adds	r5, r2, #2
 800977e:	2e00      	cmp	r6, #0
 8009780:	d05e      	beq.n	8009840 <_strtol_l.constprop.0+0xfc>
 8009782:	2e10      	cmp	r6, #16
 8009784:	d109      	bne.n	800979a <_strtol_l.constprop.0+0x56>
 8009786:	2c30      	cmp	r4, #48	; 0x30
 8009788:	d107      	bne.n	800979a <_strtol_l.constprop.0+0x56>
 800978a:	2220      	movs	r2, #32
 800978c:	782b      	ldrb	r3, [r5, #0]
 800978e:	4393      	bics	r3, r2
 8009790:	2b58      	cmp	r3, #88	; 0x58
 8009792:	d150      	bne.n	8009836 <_strtol_l.constprop.0+0xf2>
 8009794:	2610      	movs	r6, #16
 8009796:	786c      	ldrb	r4, [r5, #1]
 8009798:	3502      	adds	r5, #2
 800979a:	4b2c      	ldr	r3, [pc, #176]	; (800984c <_strtol_l.constprop.0+0x108>)
 800979c:	0031      	movs	r1, r6
 800979e:	18fb      	adds	r3, r7, r3
 80097a0:	0018      	movs	r0, r3
 80097a2:	9303      	str	r3, [sp, #12]
 80097a4:	f7f6 fd52 	bl	800024c <__aeabi_uidivmod>
 80097a8:	2200      	movs	r2, #0
 80097aa:	9104      	str	r1, [sp, #16]
 80097ac:	2101      	movs	r1, #1
 80097ae:	4684      	mov	ip, r0
 80097b0:	0010      	movs	r0, r2
 80097b2:	4249      	negs	r1, r1
 80097b4:	0023      	movs	r3, r4
 80097b6:	3b30      	subs	r3, #48	; 0x30
 80097b8:	2b09      	cmp	r3, #9
 80097ba:	d903      	bls.n	80097c4 <_strtol_l.constprop.0+0x80>
 80097bc:	3b11      	subs	r3, #17
 80097be:	2b19      	cmp	r3, #25
 80097c0:	d81d      	bhi.n	80097fe <_strtol_l.constprop.0+0xba>
 80097c2:	330a      	adds	r3, #10
 80097c4:	429e      	cmp	r6, r3
 80097c6:	dd1e      	ble.n	8009806 <_strtol_l.constprop.0+0xc2>
 80097c8:	1c54      	adds	r4, r2, #1
 80097ca:	d009      	beq.n	80097e0 <_strtol_l.constprop.0+0x9c>
 80097cc:	000a      	movs	r2, r1
 80097ce:	4584      	cmp	ip, r0
 80097d0:	d306      	bcc.n	80097e0 <_strtol_l.constprop.0+0x9c>
 80097d2:	d102      	bne.n	80097da <_strtol_l.constprop.0+0x96>
 80097d4:	9c04      	ldr	r4, [sp, #16]
 80097d6:	429c      	cmp	r4, r3
 80097d8:	db02      	blt.n	80097e0 <_strtol_l.constprop.0+0x9c>
 80097da:	2201      	movs	r2, #1
 80097dc:	4370      	muls	r0, r6
 80097de:	1818      	adds	r0, r3, r0
 80097e0:	782c      	ldrb	r4, [r5, #0]
 80097e2:	3501      	adds	r5, #1
 80097e4:	e7e6      	b.n	80097b4 <_strtol_l.constprop.0+0x70>
 80097e6:	f001 f96f 	bl	800aac8 <__errno>
 80097ea:	2316      	movs	r3, #22
 80097ec:	6003      	str	r3, [r0, #0]
 80097ee:	2000      	movs	r0, #0
 80097f0:	b007      	add	sp, #28
 80097f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097f4:	2c2b      	cmp	r4, #43	; 0x2b
 80097f6:	d1c2      	bne.n	800977e <_strtol_l.constprop.0+0x3a>
 80097f8:	781c      	ldrb	r4, [r3, #0]
 80097fa:	1c95      	adds	r5, r2, #2
 80097fc:	e7bf      	b.n	800977e <_strtol_l.constprop.0+0x3a>
 80097fe:	0023      	movs	r3, r4
 8009800:	3b61      	subs	r3, #97	; 0x61
 8009802:	2b19      	cmp	r3, #25
 8009804:	d9dd      	bls.n	80097c2 <_strtol_l.constprop.0+0x7e>
 8009806:	1c53      	adds	r3, r2, #1
 8009808:	d109      	bne.n	800981e <_strtol_l.constprop.0+0xda>
 800980a:	2322      	movs	r3, #34	; 0x22
 800980c:	9a05      	ldr	r2, [sp, #20]
 800980e:	9803      	ldr	r0, [sp, #12]
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	9b02      	ldr	r3, [sp, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0eb      	beq.n	80097f0 <_strtol_l.constprop.0+0xac>
 8009818:	1e6b      	subs	r3, r5, #1
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	e007      	b.n	800982e <_strtol_l.constprop.0+0xea>
 800981e:	2f00      	cmp	r7, #0
 8009820:	d000      	beq.n	8009824 <_strtol_l.constprop.0+0xe0>
 8009822:	4240      	negs	r0, r0
 8009824:	9b02      	ldr	r3, [sp, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0e2      	beq.n	80097f0 <_strtol_l.constprop.0+0xac>
 800982a:	2a00      	cmp	r2, #0
 800982c:	d1f4      	bne.n	8009818 <_strtol_l.constprop.0+0xd4>
 800982e:	9b02      	ldr	r3, [sp, #8]
 8009830:	9a01      	ldr	r2, [sp, #4]
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e7dc      	b.n	80097f0 <_strtol_l.constprop.0+0xac>
 8009836:	2430      	movs	r4, #48	; 0x30
 8009838:	2e00      	cmp	r6, #0
 800983a:	d1ae      	bne.n	800979a <_strtol_l.constprop.0+0x56>
 800983c:	3608      	adds	r6, #8
 800983e:	e7ac      	b.n	800979a <_strtol_l.constprop.0+0x56>
 8009840:	2c30      	cmp	r4, #48	; 0x30
 8009842:	d0a2      	beq.n	800978a <_strtol_l.constprop.0+0x46>
 8009844:	260a      	movs	r6, #10
 8009846:	e7a8      	b.n	800979a <_strtol_l.constprop.0+0x56>
 8009848:	0800d751 	.word	0x0800d751
 800984c:	7fffffff 	.word	0x7fffffff

08009850 <_strtol_r>:
 8009850:	b510      	push	{r4, lr}
 8009852:	f7ff ff77 	bl	8009744 <_strtol_l.constprop.0>
 8009856:	bd10      	pop	{r4, pc}

08009858 <__cvt>:
 8009858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800985a:	001e      	movs	r6, r3
 800985c:	2300      	movs	r3, #0
 800985e:	0014      	movs	r4, r2
 8009860:	b08b      	sub	sp, #44	; 0x2c
 8009862:	429e      	cmp	r6, r3
 8009864:	da04      	bge.n	8009870 <__cvt+0x18>
 8009866:	2180      	movs	r1, #128	; 0x80
 8009868:	0609      	lsls	r1, r1, #24
 800986a:	1873      	adds	r3, r6, r1
 800986c:	001e      	movs	r6, r3
 800986e:	232d      	movs	r3, #45	; 0x2d
 8009870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009872:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009874:	7013      	strb	r3, [r2, #0]
 8009876:	2320      	movs	r3, #32
 8009878:	2203      	movs	r2, #3
 800987a:	439f      	bics	r7, r3
 800987c:	2f46      	cmp	r7, #70	; 0x46
 800987e:	d007      	beq.n	8009890 <__cvt+0x38>
 8009880:	003b      	movs	r3, r7
 8009882:	3b45      	subs	r3, #69	; 0x45
 8009884:	4259      	negs	r1, r3
 8009886:	414b      	adcs	r3, r1
 8009888:	9910      	ldr	r1, [sp, #64]	; 0x40
 800988a:	3a01      	subs	r2, #1
 800988c:	18cb      	adds	r3, r1, r3
 800988e:	9310      	str	r3, [sp, #64]	; 0x40
 8009890:	ab09      	add	r3, sp, #36	; 0x24
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	ab08      	add	r3, sp, #32
 8009896:	9303      	str	r3, [sp, #12]
 8009898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800989a:	9200      	str	r2, [sp, #0]
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a0:	0022      	movs	r2, r4
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	0033      	movs	r3, r6
 80098a6:	f001 f9eb 	bl	800ac80 <_dtoa_r>
 80098aa:	0005      	movs	r5, r0
 80098ac:	2f47      	cmp	r7, #71	; 0x47
 80098ae:	d102      	bne.n	80098b6 <__cvt+0x5e>
 80098b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d528      	bpl.n	8009908 <__cvt+0xb0>
 80098b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098b8:	18eb      	adds	r3, r5, r3
 80098ba:	9307      	str	r3, [sp, #28]
 80098bc:	2f46      	cmp	r7, #70	; 0x46
 80098be:	d114      	bne.n	80098ea <__cvt+0x92>
 80098c0:	782b      	ldrb	r3, [r5, #0]
 80098c2:	2b30      	cmp	r3, #48	; 0x30
 80098c4:	d10c      	bne.n	80098e0 <__cvt+0x88>
 80098c6:	2200      	movs	r2, #0
 80098c8:	2300      	movs	r3, #0
 80098ca:	0020      	movs	r0, r4
 80098cc:	0031      	movs	r1, r6
 80098ce:	f7f6 fdbd 	bl	800044c <__aeabi_dcmpeq>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d104      	bne.n	80098e0 <__cvt+0x88>
 80098d6:	2301      	movs	r3, #1
 80098d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098da:	1a9b      	subs	r3, r3, r2
 80098dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098e2:	9a07      	ldr	r2, [sp, #28]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	18d3      	adds	r3, r2, r3
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	2200      	movs	r2, #0
 80098ec:	2300      	movs	r3, #0
 80098ee:	0020      	movs	r0, r4
 80098f0:	0031      	movs	r1, r6
 80098f2:	f7f6 fdab 	bl	800044c <__aeabi_dcmpeq>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d001      	beq.n	80098fe <__cvt+0xa6>
 80098fa:	9b07      	ldr	r3, [sp, #28]
 80098fc:	9309      	str	r3, [sp, #36]	; 0x24
 80098fe:	2230      	movs	r2, #48	; 0x30
 8009900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009902:	9907      	ldr	r1, [sp, #28]
 8009904:	428b      	cmp	r3, r1
 8009906:	d306      	bcc.n	8009916 <__cvt+0xbe>
 8009908:	0028      	movs	r0, r5
 800990a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800990e:	1b5b      	subs	r3, r3, r5
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	b00b      	add	sp, #44	; 0x2c
 8009914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009916:	1c59      	adds	r1, r3, #1
 8009918:	9109      	str	r1, [sp, #36]	; 0x24
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	e7f0      	b.n	8009900 <__cvt+0xa8>

0800991e <__exponent>:
 800991e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009920:	1c83      	adds	r3, r0, #2
 8009922:	b087      	sub	sp, #28
 8009924:	9303      	str	r3, [sp, #12]
 8009926:	0005      	movs	r5, r0
 8009928:	000c      	movs	r4, r1
 800992a:	232b      	movs	r3, #43	; 0x2b
 800992c:	7002      	strb	r2, [r0, #0]
 800992e:	2900      	cmp	r1, #0
 8009930:	da01      	bge.n	8009936 <__exponent+0x18>
 8009932:	424c      	negs	r4, r1
 8009934:	3302      	adds	r3, #2
 8009936:	706b      	strb	r3, [r5, #1]
 8009938:	2c09      	cmp	r4, #9
 800993a:	dd2f      	ble.n	800999c <__exponent+0x7e>
 800993c:	270a      	movs	r7, #10
 800993e:	ab04      	add	r3, sp, #16
 8009940:	1dde      	adds	r6, r3, #7
 8009942:	0020      	movs	r0, r4
 8009944:	0039      	movs	r1, r7
 8009946:	9601      	str	r6, [sp, #4]
 8009948:	f7f6 fd6a 	bl	8000420 <__aeabi_idivmod>
 800994c:	3e01      	subs	r6, #1
 800994e:	3130      	adds	r1, #48	; 0x30
 8009950:	0020      	movs	r0, r4
 8009952:	7031      	strb	r1, [r6, #0]
 8009954:	0039      	movs	r1, r7
 8009956:	9402      	str	r4, [sp, #8]
 8009958:	f7f6 fc7c 	bl	8000254 <__divsi3>
 800995c:	9b02      	ldr	r3, [sp, #8]
 800995e:	0004      	movs	r4, r0
 8009960:	2b63      	cmp	r3, #99	; 0x63
 8009962:	dcee      	bgt.n	8009942 <__exponent+0x24>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	3430      	adds	r4, #48	; 0x30
 8009968:	1e9a      	subs	r2, r3, #2
 800996a:	0013      	movs	r3, r2
 800996c:	9903      	ldr	r1, [sp, #12]
 800996e:	7014      	strb	r4, [r2, #0]
 8009970:	a804      	add	r0, sp, #16
 8009972:	3007      	adds	r0, #7
 8009974:	4298      	cmp	r0, r3
 8009976:	d80c      	bhi.n	8009992 <__exponent+0x74>
 8009978:	2300      	movs	r3, #0
 800997a:	4282      	cmp	r2, r0
 800997c:	d804      	bhi.n	8009988 <__exponent+0x6a>
 800997e:	aa04      	add	r2, sp, #16
 8009980:	3309      	adds	r3, #9
 8009982:	189b      	adds	r3, r3, r2
 8009984:	9a01      	ldr	r2, [sp, #4]
 8009986:	1a9b      	subs	r3, r3, r2
 8009988:	9a03      	ldr	r2, [sp, #12]
 800998a:	18d3      	adds	r3, r2, r3
 800998c:	1b58      	subs	r0, r3, r5
 800998e:	b007      	add	sp, #28
 8009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009992:	7818      	ldrb	r0, [r3, #0]
 8009994:	3301      	adds	r3, #1
 8009996:	7008      	strb	r0, [r1, #0]
 8009998:	3101      	adds	r1, #1
 800999a:	e7e9      	b.n	8009970 <__exponent+0x52>
 800999c:	2330      	movs	r3, #48	; 0x30
 800999e:	3430      	adds	r4, #48	; 0x30
 80099a0:	70ab      	strb	r3, [r5, #2]
 80099a2:	70ec      	strb	r4, [r5, #3]
 80099a4:	1d2b      	adds	r3, r5, #4
 80099a6:	e7f1      	b.n	800998c <__exponent+0x6e>

080099a8 <_printf_float>:
 80099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099aa:	b095      	sub	sp, #84	; 0x54
 80099ac:	000c      	movs	r4, r1
 80099ae:	9208      	str	r2, [sp, #32]
 80099b0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80099b2:	9309      	str	r3, [sp, #36]	; 0x24
 80099b4:	0007      	movs	r7, r0
 80099b6:	f001 f835 	bl	800aa24 <_localeconv_r>
 80099ba:	6803      	ldr	r3, [r0, #0]
 80099bc:	0018      	movs	r0, r3
 80099be:	930c      	str	r3, [sp, #48]	; 0x30
 80099c0:	f7f6 fba2 	bl	8000108 <strlen>
 80099c4:	2300      	movs	r3, #0
 80099c6:	9312      	str	r3, [sp, #72]	; 0x48
 80099c8:	7e23      	ldrb	r3, [r4, #24]
 80099ca:	2207      	movs	r2, #7
 80099cc:	930a      	str	r3, [sp, #40]	; 0x28
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	900d      	str	r0, [sp, #52]	; 0x34
 80099d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80099d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	05c9      	lsls	r1, r1, #23
 80099da:	d547      	bpl.n	8009a6c <_printf_float+0xc4>
 80099dc:	189b      	adds	r3, r3, r2
 80099de:	4393      	bics	r3, r2
 80099e0:	001a      	movs	r2, r3
 80099e2:	3208      	adds	r2, #8
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	681e      	ldr	r6, [r3, #0]
 80099e8:	685d      	ldr	r5, [r3, #4]
 80099ea:	0032      	movs	r2, r6
 80099ec:	002b      	movs	r3, r5
 80099ee:	64a2      	str	r2, [r4, #72]	; 0x48
 80099f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099f2:	2201      	movs	r2, #1
 80099f4:	006b      	lsls	r3, r5, #1
 80099f6:	085b      	lsrs	r3, r3, #1
 80099f8:	930e      	str	r3, [sp, #56]	; 0x38
 80099fa:	0030      	movs	r0, r6
 80099fc:	4bab      	ldr	r3, [pc, #684]	; (8009cac <_printf_float+0x304>)
 80099fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a00:	4252      	negs	r2, r2
 8009a02:	f7f9 f8c9 	bl	8002b98 <__aeabi_dcmpun>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d132      	bne.n	8009a70 <_printf_float+0xc8>
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	0030      	movs	r0, r6
 8009a0e:	4ba7      	ldr	r3, [pc, #668]	; (8009cac <_printf_float+0x304>)
 8009a10:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a12:	4252      	negs	r2, r2
 8009a14:	f7f6 fd2a 	bl	800046c <__aeabi_dcmple>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d129      	bne.n	8009a70 <_printf_float+0xc8>
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2300      	movs	r3, #0
 8009a20:	0030      	movs	r0, r6
 8009a22:	0029      	movs	r1, r5
 8009a24:	f7f6 fd18 	bl	8000458 <__aeabi_dcmplt>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d003      	beq.n	8009a34 <_printf_float+0x8c>
 8009a2c:	0023      	movs	r3, r4
 8009a2e:	222d      	movs	r2, #45	; 0x2d
 8009a30:	3343      	adds	r3, #67	; 0x43
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a36:	4d9e      	ldr	r5, [pc, #632]	; (8009cb0 <_printf_float+0x308>)
 8009a38:	2b47      	cmp	r3, #71	; 0x47
 8009a3a:	d900      	bls.n	8009a3e <_printf_float+0x96>
 8009a3c:	4d9d      	ldr	r5, [pc, #628]	; (8009cb4 <_printf_float+0x30c>)
 8009a3e:	2303      	movs	r3, #3
 8009a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a42:	6123      	str	r3, [r4, #16]
 8009a44:	3301      	adds	r3, #1
 8009a46:	439a      	bics	r2, r3
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6022      	str	r2, [r4, #0]
 8009a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	0021      	movs	r1, r4
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	0038      	movs	r0, r7
 8009a56:	9b08      	ldr	r3, [sp, #32]
 8009a58:	aa13      	add	r2, sp, #76	; 0x4c
 8009a5a:	f000 f9fb 	bl	8009e54 <_printf_common>
 8009a5e:	3001      	adds	r0, #1
 8009a60:	d000      	beq.n	8009a64 <_printf_float+0xbc>
 8009a62:	e0a3      	b.n	8009bac <_printf_float+0x204>
 8009a64:	2001      	movs	r0, #1
 8009a66:	4240      	negs	r0, r0
 8009a68:	b015      	add	sp, #84	; 0x54
 8009a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6c:	3307      	adds	r3, #7
 8009a6e:	e7b6      	b.n	80099de <_printf_float+0x36>
 8009a70:	0032      	movs	r2, r6
 8009a72:	002b      	movs	r3, r5
 8009a74:	0030      	movs	r0, r6
 8009a76:	0029      	movs	r1, r5
 8009a78:	f7f9 f88e 	bl	8002b98 <__aeabi_dcmpun>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d00b      	beq.n	8009a98 <_printf_float+0xf0>
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	da03      	bge.n	8009a8c <_printf_float+0xe4>
 8009a84:	0023      	movs	r3, r4
 8009a86:	222d      	movs	r2, #45	; 0x2d
 8009a88:	3343      	adds	r3, #67	; 0x43
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a8e:	4d8a      	ldr	r5, [pc, #552]	; (8009cb8 <_printf_float+0x310>)
 8009a90:	2b47      	cmp	r3, #71	; 0x47
 8009a92:	d9d4      	bls.n	8009a3e <_printf_float+0x96>
 8009a94:	4d89      	ldr	r5, [pc, #548]	; (8009cbc <_printf_float+0x314>)
 8009a96:	e7d2      	b.n	8009a3e <_printf_float+0x96>
 8009a98:	2220      	movs	r2, #32
 8009a9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a9c:	6863      	ldr	r3, [r4, #4]
 8009a9e:	4391      	bics	r1, r2
 8009aa0:	910e      	str	r1, [sp, #56]	; 0x38
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	d14a      	bne.n	8009b3c <_printf_float+0x194>
 8009aa6:	3307      	adds	r3, #7
 8009aa8:	6063      	str	r3, [r4, #4]
 8009aaa:	2380      	movs	r3, #128	; 0x80
 8009aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009aae:	00db      	lsls	r3, r3, #3
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	9206      	str	r2, [sp, #24]
 8009ab6:	aa12      	add	r2, sp, #72	; 0x48
 8009ab8:	9205      	str	r2, [sp, #20]
 8009aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	9204      	str	r2, [sp, #16]
 8009ac0:	aa11      	add	r2, sp, #68	; 0x44
 8009ac2:	9203      	str	r2, [sp, #12]
 8009ac4:	2223      	movs	r2, #35	; 0x23
 8009ac6:	a908      	add	r1, sp, #32
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	6863      	ldr	r3, [r4, #4]
 8009acc:	1852      	adds	r2, r2, r1
 8009ace:	9202      	str	r2, [sp, #8]
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	0032      	movs	r2, r6
 8009ad4:	002b      	movs	r3, r5
 8009ad6:	0038      	movs	r0, r7
 8009ad8:	f7ff febe 	bl	8009858 <__cvt>
 8009adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ade:	0005      	movs	r5, r0
 8009ae0:	2b47      	cmp	r3, #71	; 0x47
 8009ae2:	d109      	bne.n	8009af8 <_printf_float+0x150>
 8009ae4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ae6:	1cda      	adds	r2, r3, #3
 8009ae8:	db02      	blt.n	8009af0 <_printf_float+0x148>
 8009aea:	6862      	ldr	r2, [r4, #4]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	dd49      	ble.n	8009b84 <_printf_float+0x1dc>
 8009af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af2:	3b02      	subs	r3, #2
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	930a      	str	r3, [sp, #40]	; 0x28
 8009af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009afc:	2b65      	cmp	r3, #101	; 0x65
 8009afe:	d824      	bhi.n	8009b4a <_printf_float+0x1a2>
 8009b00:	0020      	movs	r0, r4
 8009b02:	001a      	movs	r2, r3
 8009b04:	3901      	subs	r1, #1
 8009b06:	3050      	adds	r0, #80	; 0x50
 8009b08:	9111      	str	r1, [sp, #68]	; 0x44
 8009b0a:	f7ff ff08 	bl	800991e <__exponent>
 8009b0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b10:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b12:	1813      	adds	r3, r2, r0
 8009b14:	6123      	str	r3, [r4, #16]
 8009b16:	2a01      	cmp	r2, #1
 8009b18:	dc02      	bgt.n	8009b20 <_printf_float+0x178>
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	07d2      	lsls	r2, r2, #31
 8009b1e:	d501      	bpl.n	8009b24 <_printf_float+0x17c>
 8009b20:	3301      	adds	r3, #1
 8009b22:	6123      	str	r3, [r4, #16]
 8009b24:	2323      	movs	r3, #35	; 0x23
 8009b26:	aa08      	add	r2, sp, #32
 8009b28:	189b      	adds	r3, r3, r2
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d100      	bne.n	8009b32 <_printf_float+0x18a>
 8009b30:	e78d      	b.n	8009a4e <_printf_float+0xa6>
 8009b32:	0023      	movs	r3, r4
 8009b34:	222d      	movs	r2, #45	; 0x2d
 8009b36:	3343      	adds	r3, #67	; 0x43
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e788      	b.n	8009a4e <_printf_float+0xa6>
 8009b3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b3e:	2a47      	cmp	r2, #71	; 0x47
 8009b40:	d1b3      	bne.n	8009aaa <_printf_float+0x102>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1b1      	bne.n	8009aaa <_printf_float+0x102>
 8009b46:	3301      	adds	r3, #1
 8009b48:	e7ae      	b.n	8009aa8 <_printf_float+0x100>
 8009b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4c:	2b66      	cmp	r3, #102	; 0x66
 8009b4e:	d11b      	bne.n	8009b88 <_printf_float+0x1e0>
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	2900      	cmp	r1, #0
 8009b54:	dd09      	ble.n	8009b6a <_printf_float+0x1c2>
 8009b56:	6121      	str	r1, [r4, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <_printf_float+0x1ba>
 8009b5c:	6822      	ldr	r2, [r4, #0]
 8009b5e:	07d2      	lsls	r2, r2, #31
 8009b60:	d50b      	bpl.n	8009b7a <_printf_float+0x1d2>
 8009b62:	3301      	adds	r3, #1
 8009b64:	185b      	adds	r3, r3, r1
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	e007      	b.n	8009b7a <_printf_float+0x1d2>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <_printf_float+0x1ce>
 8009b6e:	2201      	movs	r2, #1
 8009b70:	6821      	ldr	r1, [r4, #0]
 8009b72:	4211      	tst	r1, r2
 8009b74:	d000      	beq.n	8009b78 <_printf_float+0x1d0>
 8009b76:	1c9a      	adds	r2, r3, #2
 8009b78:	6122      	str	r2, [r4, #16]
 8009b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b7e:	2300      	movs	r3, #0
 8009b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b82:	e7cf      	b.n	8009b24 <_printf_float+0x17c>
 8009b84:	2367      	movs	r3, #103	; 0x67
 8009b86:	930a      	str	r3, [sp, #40]	; 0x28
 8009b88:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b8c:	4299      	cmp	r1, r3
 8009b8e:	db06      	blt.n	8009b9e <_printf_float+0x1f6>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	6121      	str	r1, [r4, #16]
 8009b94:	07db      	lsls	r3, r3, #31
 8009b96:	d5f0      	bpl.n	8009b7a <_printf_float+0x1d2>
 8009b98:	3101      	adds	r1, #1
 8009b9a:	6121      	str	r1, [r4, #16]
 8009b9c:	e7ed      	b.n	8009b7a <_printf_float+0x1d2>
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	dc01      	bgt.n	8009ba8 <_printf_float+0x200>
 8009ba4:	1892      	adds	r2, r2, r2
 8009ba6:	1a52      	subs	r2, r2, r1
 8009ba8:	189b      	adds	r3, r3, r2
 8009baa:	e7dc      	b.n	8009b66 <_printf_float+0x1be>
 8009bac:	6822      	ldr	r2, [r4, #0]
 8009bae:	0553      	lsls	r3, r2, #21
 8009bb0:	d408      	bmi.n	8009bc4 <_printf_float+0x21c>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	002a      	movs	r2, r5
 8009bb6:	0038      	movs	r0, r7
 8009bb8:	9908      	ldr	r1, [sp, #32]
 8009bba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bbc:	47a8      	blx	r5
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d12a      	bne.n	8009c18 <_printf_float+0x270>
 8009bc2:	e74f      	b.n	8009a64 <_printf_float+0xbc>
 8009bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc6:	2b65      	cmp	r3, #101	; 0x65
 8009bc8:	d800      	bhi.n	8009bcc <_printf_float+0x224>
 8009bca:	e0ec      	b.n	8009da6 <_printf_float+0x3fe>
 8009bcc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009bce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f7f6 fc3a 	bl	800044c <__aeabi_dcmpeq>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d034      	beq.n	8009c46 <_printf_float+0x29e>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	0038      	movs	r0, r7
 8009be0:	4a37      	ldr	r2, [pc, #220]	; (8009cc0 <_printf_float+0x318>)
 8009be2:	9908      	ldr	r1, [sp, #32]
 8009be4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009be6:	47a8      	blx	r5
 8009be8:	3001      	adds	r0, #1
 8009bea:	d100      	bne.n	8009bee <_printf_float+0x246>
 8009bec:	e73a      	b.n	8009a64 <_printf_float+0xbc>
 8009bee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	db02      	blt.n	8009bfc <_printf_float+0x254>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	07db      	lsls	r3, r3, #31
 8009bfa:	d50d      	bpl.n	8009c18 <_printf_float+0x270>
 8009bfc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009bfe:	0038      	movs	r0, r7
 8009c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c04:	9908      	ldr	r1, [sp, #32]
 8009c06:	47a8      	blx	r5
 8009c08:	2500      	movs	r5, #0
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d100      	bne.n	8009c10 <_printf_float+0x268>
 8009c0e:	e729      	b.n	8009a64 <_printf_float+0xbc>
 8009c10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c12:	3b01      	subs	r3, #1
 8009c14:	42ab      	cmp	r3, r5
 8009c16:	dc0a      	bgt.n	8009c2e <_printf_float+0x286>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	079b      	lsls	r3, r3, #30
 8009c1c:	d500      	bpl.n	8009c20 <_printf_float+0x278>
 8009c1e:	e116      	b.n	8009e4e <_printf_float+0x4a6>
 8009c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c22:	68e0      	ldr	r0, [r4, #12]
 8009c24:	4298      	cmp	r0, r3
 8009c26:	db00      	blt.n	8009c2a <_printf_float+0x282>
 8009c28:	e71e      	b.n	8009a68 <_printf_float+0xc0>
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	e71c      	b.n	8009a68 <_printf_float+0xc0>
 8009c2e:	0022      	movs	r2, r4
 8009c30:	2301      	movs	r3, #1
 8009c32:	0038      	movs	r0, r7
 8009c34:	9908      	ldr	r1, [sp, #32]
 8009c36:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c38:	321a      	adds	r2, #26
 8009c3a:	47b0      	blx	r6
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d100      	bne.n	8009c42 <_printf_float+0x29a>
 8009c40:	e710      	b.n	8009a64 <_printf_float+0xbc>
 8009c42:	3501      	adds	r5, #1
 8009c44:	e7e4      	b.n	8009c10 <_printf_float+0x268>
 8009c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	dc3b      	bgt.n	8009cc4 <_printf_float+0x31c>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	0038      	movs	r0, r7
 8009c50:	4a1b      	ldr	r2, [pc, #108]	; (8009cc0 <_printf_float+0x318>)
 8009c52:	9908      	ldr	r1, [sp, #32]
 8009c54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c56:	47b0      	blx	r6
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d100      	bne.n	8009c5e <_printf_float+0x2b6>
 8009c5c:	e702      	b.n	8009a64 <_printf_float+0xbc>
 8009c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c62:	4313      	orrs	r3, r2
 8009c64:	d102      	bne.n	8009c6c <_printf_float+0x2c4>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	07db      	lsls	r3, r3, #31
 8009c6a:	d5d5      	bpl.n	8009c18 <_printf_float+0x270>
 8009c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c6e:	0038      	movs	r0, r7
 8009c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c72:	9908      	ldr	r1, [sp, #32]
 8009c74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c76:	47b0      	blx	r6
 8009c78:	2300      	movs	r3, #0
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	d100      	bne.n	8009c80 <_printf_float+0x2d8>
 8009c7e:	e6f1      	b.n	8009a64 <_printf_float+0xbc>
 8009c80:	930a      	str	r3, [sp, #40]	; 0x28
 8009c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c86:	425b      	negs	r3, r3
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	dc01      	bgt.n	8009c90 <_printf_float+0x2e8>
 8009c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c8e:	e791      	b.n	8009bb4 <_printf_float+0x20c>
 8009c90:	0022      	movs	r2, r4
 8009c92:	2301      	movs	r3, #1
 8009c94:	0038      	movs	r0, r7
 8009c96:	9908      	ldr	r1, [sp, #32]
 8009c98:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c9a:	321a      	adds	r2, #26
 8009c9c:	47b0      	blx	r6
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d100      	bne.n	8009ca4 <_printf_float+0x2fc>
 8009ca2:	e6df      	b.n	8009a64 <_printf_float+0xbc>
 8009ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	e7ea      	b.n	8009c80 <_printf_float+0x2d8>
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	7fefffff 	.word	0x7fefffff
 8009cb0:	0800d851 	.word	0x0800d851
 8009cb4:	0800d855 	.word	0x0800d855
 8009cb8:	0800d859 	.word	0x0800d859
 8009cbc:	0800d85d 	.word	0x0800d85d
 8009cc0:	0800d861 	.word	0x0800d861
 8009cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	dd00      	ble.n	8009cd0 <_printf_float+0x328>
 8009cce:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dc3d      	bgt.n	8009d52 <_printf_float+0x3aa>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8009cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cdc:	43db      	mvns	r3, r3
 8009cde:	17db      	asrs	r3, r3, #31
 8009ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cea:	4013      	ands	r3, r2
 8009cec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	dc36      	bgt.n	8009d64 <_printf_float+0x3bc>
 8009cf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009cf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	db40      	blt.n	8009d80 <_printf_float+0x3d8>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	07db      	lsls	r3, r3, #31
 8009d02:	d43d      	bmi.n	8009d80 <_printf_float+0x3d8>
 8009d04:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009d06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0a:	1af3      	subs	r3, r6, r3
 8009d0c:	1ab6      	subs	r6, r6, r2
 8009d0e:	429e      	cmp	r6, r3
 8009d10:	dd00      	ble.n	8009d14 <_printf_float+0x36c>
 8009d12:	001e      	movs	r6, r3
 8009d14:	2e00      	cmp	r6, #0
 8009d16:	dc3c      	bgt.n	8009d92 <_printf_float+0x3ea>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d1c:	43f3      	mvns	r3, r6
 8009d1e:	17db      	asrs	r3, r3, #31
 8009d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d2a:	4032      	ands	r2, r6
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d30:	4293      	cmp	r3, r2
 8009d32:	dc00      	bgt.n	8009d36 <_printf_float+0x38e>
 8009d34:	e770      	b.n	8009c18 <_printf_float+0x270>
 8009d36:	0022      	movs	r2, r4
 8009d38:	2301      	movs	r3, #1
 8009d3a:	0038      	movs	r0, r7
 8009d3c:	9908      	ldr	r1, [sp, #32]
 8009d3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d40:	321a      	adds	r2, #26
 8009d42:	47a8      	blx	r5
 8009d44:	3001      	adds	r0, #1
 8009d46:	d100      	bne.n	8009d4a <_printf_float+0x3a2>
 8009d48:	e68c      	b.n	8009a64 <_printf_float+0xbc>
 8009d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d50:	e7e7      	b.n	8009d22 <_printf_float+0x37a>
 8009d52:	002a      	movs	r2, r5
 8009d54:	0038      	movs	r0, r7
 8009d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d58:	9908      	ldr	r1, [sp, #32]
 8009d5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d5c:	47b0      	blx	r6
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d1b9      	bne.n	8009cd6 <_printf_float+0x32e>
 8009d62:	e67f      	b.n	8009a64 <_printf_float+0xbc>
 8009d64:	0022      	movs	r2, r4
 8009d66:	2301      	movs	r3, #1
 8009d68:	0038      	movs	r0, r7
 8009d6a:	9908      	ldr	r1, [sp, #32]
 8009d6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d6e:	321a      	adds	r2, #26
 8009d70:	47b0      	blx	r6
 8009d72:	3001      	adds	r0, #1
 8009d74:	d100      	bne.n	8009d78 <_printf_float+0x3d0>
 8009d76:	e675      	b.n	8009a64 <_printf_float+0xbc>
 8009d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d7e:	e7b0      	b.n	8009ce2 <_printf_float+0x33a>
 8009d80:	0038      	movs	r0, r7
 8009d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d86:	9908      	ldr	r1, [sp, #32]
 8009d88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d8a:	47b0      	blx	r6
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d1b9      	bne.n	8009d04 <_printf_float+0x35c>
 8009d90:	e668      	b.n	8009a64 <_printf_float+0xbc>
 8009d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d94:	0038      	movs	r0, r7
 8009d96:	18ea      	adds	r2, r5, r3
 8009d98:	9908      	ldr	r1, [sp, #32]
 8009d9a:	0033      	movs	r3, r6
 8009d9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d9e:	47a8      	blx	r5
 8009da0:	3001      	adds	r0, #1
 8009da2:	d1b9      	bne.n	8009d18 <_printf_float+0x370>
 8009da4:	e65e      	b.n	8009a64 <_printf_float+0xbc>
 8009da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	dc02      	bgt.n	8009db2 <_printf_float+0x40a>
 8009dac:	2301      	movs	r3, #1
 8009dae:	421a      	tst	r2, r3
 8009db0:	d03a      	beq.n	8009e28 <_printf_float+0x480>
 8009db2:	2301      	movs	r3, #1
 8009db4:	002a      	movs	r2, r5
 8009db6:	0038      	movs	r0, r7
 8009db8:	9908      	ldr	r1, [sp, #32]
 8009dba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009dbc:	47b0      	blx	r6
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d100      	bne.n	8009dc4 <_printf_float+0x41c>
 8009dc2:	e64f      	b.n	8009a64 <_printf_float+0xbc>
 8009dc4:	0038      	movs	r0, r7
 8009dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dca:	9908      	ldr	r1, [sp, #32]
 8009dcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009dce:	47b0      	blx	r6
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d100      	bne.n	8009dd6 <_printf_float+0x42e>
 8009dd4:	e646      	b.n	8009a64 <_printf_float+0xbc>
 8009dd6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009dd8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ddc:	2200      	movs	r2, #0
 8009dde:	001e      	movs	r6, r3
 8009de0:	2300      	movs	r3, #0
 8009de2:	f7f6 fb33 	bl	800044c <__aeabi_dcmpeq>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d11c      	bne.n	8009e24 <_printf_float+0x47c>
 8009dea:	0033      	movs	r3, r6
 8009dec:	1c6a      	adds	r2, r5, #1
 8009dee:	3b01      	subs	r3, #1
 8009df0:	0038      	movs	r0, r7
 8009df2:	9908      	ldr	r1, [sp, #32]
 8009df4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009df6:	47a8      	blx	r5
 8009df8:	3001      	adds	r0, #1
 8009dfa:	d10f      	bne.n	8009e1c <_printf_float+0x474>
 8009dfc:	e632      	b.n	8009a64 <_printf_float+0xbc>
 8009dfe:	0022      	movs	r2, r4
 8009e00:	2301      	movs	r3, #1
 8009e02:	0038      	movs	r0, r7
 8009e04:	9908      	ldr	r1, [sp, #32]
 8009e06:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e08:	321a      	adds	r2, #26
 8009e0a:	47b0      	blx	r6
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d100      	bne.n	8009e12 <_printf_float+0x46a>
 8009e10:	e628      	b.n	8009a64 <_printf_float+0xbc>
 8009e12:	3501      	adds	r5, #1
 8009e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e16:	3b01      	subs	r3, #1
 8009e18:	42ab      	cmp	r3, r5
 8009e1a:	dcf0      	bgt.n	8009dfe <_printf_float+0x456>
 8009e1c:	0022      	movs	r2, r4
 8009e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e20:	3250      	adds	r2, #80	; 0x50
 8009e22:	e6c8      	b.n	8009bb6 <_printf_float+0x20e>
 8009e24:	2500      	movs	r5, #0
 8009e26:	e7f5      	b.n	8009e14 <_printf_float+0x46c>
 8009e28:	002a      	movs	r2, r5
 8009e2a:	e7e1      	b.n	8009df0 <_printf_float+0x448>
 8009e2c:	0022      	movs	r2, r4
 8009e2e:	2301      	movs	r3, #1
 8009e30:	0038      	movs	r0, r7
 8009e32:	9908      	ldr	r1, [sp, #32]
 8009e34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e36:	3219      	adds	r2, #25
 8009e38:	47b0      	blx	r6
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d100      	bne.n	8009e40 <_printf_float+0x498>
 8009e3e:	e611      	b.n	8009a64 <_printf_float+0xbc>
 8009e40:	3501      	adds	r5, #1
 8009e42:	68e3      	ldr	r3, [r4, #12]
 8009e44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e46:	1a9b      	subs	r3, r3, r2
 8009e48:	42ab      	cmp	r3, r5
 8009e4a:	dcef      	bgt.n	8009e2c <_printf_float+0x484>
 8009e4c:	e6e8      	b.n	8009c20 <_printf_float+0x278>
 8009e4e:	2500      	movs	r5, #0
 8009e50:	e7f7      	b.n	8009e42 <_printf_float+0x49a>
 8009e52:	46c0      	nop			; (mov r8, r8)

08009e54 <_printf_common>:
 8009e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e56:	0016      	movs	r6, r2
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	688a      	ldr	r2, [r1, #8]
 8009e5c:	690b      	ldr	r3, [r1, #16]
 8009e5e:	000c      	movs	r4, r1
 8009e60:	9000      	str	r0, [sp, #0]
 8009e62:	4293      	cmp	r3, r2
 8009e64:	da00      	bge.n	8009e68 <_printf_common+0x14>
 8009e66:	0013      	movs	r3, r2
 8009e68:	0022      	movs	r2, r4
 8009e6a:	6033      	str	r3, [r6, #0]
 8009e6c:	3243      	adds	r2, #67	; 0x43
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	d001      	beq.n	8009e78 <_printf_common+0x24>
 8009e74:	3301      	adds	r3, #1
 8009e76:	6033      	str	r3, [r6, #0]
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	069b      	lsls	r3, r3, #26
 8009e7c:	d502      	bpl.n	8009e84 <_printf_common+0x30>
 8009e7e:	6833      	ldr	r3, [r6, #0]
 8009e80:	3302      	adds	r3, #2
 8009e82:	6033      	str	r3, [r6, #0]
 8009e84:	6822      	ldr	r2, [r4, #0]
 8009e86:	2306      	movs	r3, #6
 8009e88:	0015      	movs	r5, r2
 8009e8a:	401d      	ands	r5, r3
 8009e8c:	421a      	tst	r2, r3
 8009e8e:	d027      	beq.n	8009ee0 <_printf_common+0x8c>
 8009e90:	0023      	movs	r3, r4
 8009e92:	3343      	adds	r3, #67	; 0x43
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	1e5a      	subs	r2, r3, #1
 8009e98:	4193      	sbcs	r3, r2
 8009e9a:	6822      	ldr	r2, [r4, #0]
 8009e9c:	0692      	lsls	r2, r2, #26
 8009e9e:	d430      	bmi.n	8009f02 <_printf_common+0xae>
 8009ea0:	0022      	movs	r2, r4
 8009ea2:	9901      	ldr	r1, [sp, #4]
 8009ea4:	9800      	ldr	r0, [sp, #0]
 8009ea6:	9d08      	ldr	r5, [sp, #32]
 8009ea8:	3243      	adds	r2, #67	; 0x43
 8009eaa:	47a8      	blx	r5
 8009eac:	3001      	adds	r0, #1
 8009eae:	d025      	beq.n	8009efc <_printf_common+0xa8>
 8009eb0:	2206      	movs	r2, #6
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	2500      	movs	r5, #0
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d105      	bne.n	8009ec8 <_printf_common+0x74>
 8009ebc:	6833      	ldr	r3, [r6, #0]
 8009ebe:	68e5      	ldr	r5, [r4, #12]
 8009ec0:	1aed      	subs	r5, r5, r3
 8009ec2:	43eb      	mvns	r3, r5
 8009ec4:	17db      	asrs	r3, r3, #31
 8009ec6:	401d      	ands	r5, r3
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	6922      	ldr	r2, [r4, #16]
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	dd01      	ble.n	8009ed4 <_printf_common+0x80>
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	18ed      	adds	r5, r5, r3
 8009ed4:	2600      	movs	r6, #0
 8009ed6:	42b5      	cmp	r5, r6
 8009ed8:	d120      	bne.n	8009f1c <_printf_common+0xc8>
 8009eda:	2000      	movs	r0, #0
 8009edc:	e010      	b.n	8009f00 <_printf_common+0xac>
 8009ede:	3501      	adds	r5, #1
 8009ee0:	68e3      	ldr	r3, [r4, #12]
 8009ee2:	6832      	ldr	r2, [r6, #0]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	42ab      	cmp	r3, r5
 8009ee8:	ddd2      	ble.n	8009e90 <_printf_common+0x3c>
 8009eea:	0022      	movs	r2, r4
 8009eec:	2301      	movs	r3, #1
 8009eee:	9901      	ldr	r1, [sp, #4]
 8009ef0:	9800      	ldr	r0, [sp, #0]
 8009ef2:	9f08      	ldr	r7, [sp, #32]
 8009ef4:	3219      	adds	r2, #25
 8009ef6:	47b8      	blx	r7
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d1f0      	bne.n	8009ede <_printf_common+0x8a>
 8009efc:	2001      	movs	r0, #1
 8009efe:	4240      	negs	r0, r0
 8009f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f02:	2030      	movs	r0, #48	; 0x30
 8009f04:	18e1      	adds	r1, r4, r3
 8009f06:	3143      	adds	r1, #67	; 0x43
 8009f08:	7008      	strb	r0, [r1, #0]
 8009f0a:	0021      	movs	r1, r4
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	3145      	adds	r1, #69	; 0x45
 8009f10:	7809      	ldrb	r1, [r1, #0]
 8009f12:	18a2      	adds	r2, r4, r2
 8009f14:	3243      	adds	r2, #67	; 0x43
 8009f16:	3302      	adds	r3, #2
 8009f18:	7011      	strb	r1, [r2, #0]
 8009f1a:	e7c1      	b.n	8009ea0 <_printf_common+0x4c>
 8009f1c:	0022      	movs	r2, r4
 8009f1e:	2301      	movs	r3, #1
 8009f20:	9901      	ldr	r1, [sp, #4]
 8009f22:	9800      	ldr	r0, [sp, #0]
 8009f24:	9f08      	ldr	r7, [sp, #32]
 8009f26:	321a      	adds	r2, #26
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d0e6      	beq.n	8009efc <_printf_common+0xa8>
 8009f2e:	3601      	adds	r6, #1
 8009f30:	e7d1      	b.n	8009ed6 <_printf_common+0x82>
	...

08009f34 <_printf_i>:
 8009f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f36:	b08b      	sub	sp, #44	; 0x2c
 8009f38:	9206      	str	r2, [sp, #24]
 8009f3a:	000a      	movs	r2, r1
 8009f3c:	3243      	adds	r2, #67	; 0x43
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	9005      	str	r0, [sp, #20]
 8009f42:	9204      	str	r2, [sp, #16]
 8009f44:	7e0a      	ldrb	r2, [r1, #24]
 8009f46:	000c      	movs	r4, r1
 8009f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f4a:	2a78      	cmp	r2, #120	; 0x78
 8009f4c:	d809      	bhi.n	8009f62 <_printf_i+0x2e>
 8009f4e:	2a62      	cmp	r2, #98	; 0x62
 8009f50:	d80b      	bhi.n	8009f6a <_printf_i+0x36>
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	d100      	bne.n	8009f58 <_printf_i+0x24>
 8009f56:	e0be      	b.n	800a0d6 <_printf_i+0x1a2>
 8009f58:	497c      	ldr	r1, [pc, #496]	; (800a14c <_printf_i+0x218>)
 8009f5a:	9103      	str	r1, [sp, #12]
 8009f5c:	2a58      	cmp	r2, #88	; 0x58
 8009f5e:	d100      	bne.n	8009f62 <_printf_i+0x2e>
 8009f60:	e093      	b.n	800a08a <_printf_i+0x156>
 8009f62:	0026      	movs	r6, r4
 8009f64:	3642      	adds	r6, #66	; 0x42
 8009f66:	7032      	strb	r2, [r6, #0]
 8009f68:	e022      	b.n	8009fb0 <_printf_i+0x7c>
 8009f6a:	0010      	movs	r0, r2
 8009f6c:	3863      	subs	r0, #99	; 0x63
 8009f6e:	2815      	cmp	r0, #21
 8009f70:	d8f7      	bhi.n	8009f62 <_printf_i+0x2e>
 8009f72:	f7f6 f8db 	bl	800012c <__gnu_thumb1_case_shi>
 8009f76:	0016      	.short	0x0016
 8009f78:	fff6001f 	.word	0xfff6001f
 8009f7c:	fff6fff6 	.word	0xfff6fff6
 8009f80:	001ffff6 	.word	0x001ffff6
 8009f84:	fff6fff6 	.word	0xfff6fff6
 8009f88:	fff6fff6 	.word	0xfff6fff6
 8009f8c:	003600a3 	.word	0x003600a3
 8009f90:	fff60083 	.word	0xfff60083
 8009f94:	00b4fff6 	.word	0x00b4fff6
 8009f98:	0036fff6 	.word	0x0036fff6
 8009f9c:	fff6fff6 	.word	0xfff6fff6
 8009fa0:	0087      	.short	0x0087
 8009fa2:	0026      	movs	r6, r4
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	3642      	adds	r6, #66	; 0x42
 8009fa8:	1d11      	adds	r1, r2, #4
 8009faa:	6019      	str	r1, [r3, #0]
 8009fac:	6813      	ldr	r3, [r2, #0]
 8009fae:	7033      	strb	r3, [r6, #0]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e0a2      	b.n	800a0fa <_printf_i+0x1c6>
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	6809      	ldr	r1, [r1, #0]
 8009fb8:	1d02      	adds	r2, r0, #4
 8009fba:	060d      	lsls	r5, r1, #24
 8009fbc:	d50b      	bpl.n	8009fd6 <_printf_i+0xa2>
 8009fbe:	6805      	ldr	r5, [r0, #0]
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	da03      	bge.n	8009fce <_printf_i+0x9a>
 8009fc6:	232d      	movs	r3, #45	; 0x2d
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	426d      	negs	r5, r5
 8009fcc:	7013      	strb	r3, [r2, #0]
 8009fce:	4b5f      	ldr	r3, [pc, #380]	; (800a14c <_printf_i+0x218>)
 8009fd0:	270a      	movs	r7, #10
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	e01b      	b.n	800a00e <_printf_i+0xda>
 8009fd6:	6805      	ldr	r5, [r0, #0]
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	0649      	lsls	r1, r1, #25
 8009fdc:	d5f1      	bpl.n	8009fc2 <_printf_i+0x8e>
 8009fde:	b22d      	sxth	r5, r5
 8009fe0:	e7ef      	b.n	8009fc2 <_printf_i+0x8e>
 8009fe2:	680d      	ldr	r5, [r1, #0]
 8009fe4:	6819      	ldr	r1, [r3, #0]
 8009fe6:	1d08      	adds	r0, r1, #4
 8009fe8:	6018      	str	r0, [r3, #0]
 8009fea:	062e      	lsls	r6, r5, #24
 8009fec:	d501      	bpl.n	8009ff2 <_printf_i+0xbe>
 8009fee:	680d      	ldr	r5, [r1, #0]
 8009ff0:	e003      	b.n	8009ffa <_printf_i+0xc6>
 8009ff2:	066d      	lsls	r5, r5, #25
 8009ff4:	d5fb      	bpl.n	8009fee <_printf_i+0xba>
 8009ff6:	680d      	ldr	r5, [r1, #0]
 8009ff8:	b2ad      	uxth	r5, r5
 8009ffa:	4b54      	ldr	r3, [pc, #336]	; (800a14c <_printf_i+0x218>)
 8009ffc:	2708      	movs	r7, #8
 8009ffe:	9303      	str	r3, [sp, #12]
 800a000:	2a6f      	cmp	r2, #111	; 0x6f
 800a002:	d000      	beq.n	800a006 <_printf_i+0xd2>
 800a004:	3702      	adds	r7, #2
 800a006:	0023      	movs	r3, r4
 800a008:	2200      	movs	r2, #0
 800a00a:	3343      	adds	r3, #67	; 0x43
 800a00c:	701a      	strb	r2, [r3, #0]
 800a00e:	6863      	ldr	r3, [r4, #4]
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	db03      	blt.n	800a01e <_printf_i+0xea>
 800a016:	2104      	movs	r1, #4
 800a018:	6822      	ldr	r2, [r4, #0]
 800a01a:	438a      	bics	r2, r1
 800a01c:	6022      	str	r2, [r4, #0]
 800a01e:	2d00      	cmp	r5, #0
 800a020:	d102      	bne.n	800a028 <_printf_i+0xf4>
 800a022:	9e04      	ldr	r6, [sp, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00c      	beq.n	800a042 <_printf_i+0x10e>
 800a028:	9e04      	ldr	r6, [sp, #16]
 800a02a:	0028      	movs	r0, r5
 800a02c:	0039      	movs	r1, r7
 800a02e:	f7f6 f90d 	bl	800024c <__aeabi_uidivmod>
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	3e01      	subs	r6, #1
 800a036:	5c5b      	ldrb	r3, [r3, r1]
 800a038:	7033      	strb	r3, [r6, #0]
 800a03a:	002b      	movs	r3, r5
 800a03c:	0005      	movs	r5, r0
 800a03e:	429f      	cmp	r7, r3
 800a040:	d9f3      	bls.n	800a02a <_printf_i+0xf6>
 800a042:	2f08      	cmp	r7, #8
 800a044:	d109      	bne.n	800a05a <_printf_i+0x126>
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	07db      	lsls	r3, r3, #31
 800a04a:	d506      	bpl.n	800a05a <_printf_i+0x126>
 800a04c:	6862      	ldr	r2, [r4, #4]
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	dc02      	bgt.n	800a05a <_printf_i+0x126>
 800a054:	2330      	movs	r3, #48	; 0x30
 800a056:	3e01      	subs	r6, #1
 800a058:	7033      	strb	r3, [r6, #0]
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	1b9b      	subs	r3, r3, r6
 800a05e:	6123      	str	r3, [r4, #16]
 800a060:	9b07      	ldr	r3, [sp, #28]
 800a062:	0021      	movs	r1, r4
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	9805      	ldr	r0, [sp, #20]
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	aa09      	add	r2, sp, #36	; 0x24
 800a06c:	f7ff fef2 	bl	8009e54 <_printf_common>
 800a070:	3001      	adds	r0, #1
 800a072:	d147      	bne.n	800a104 <_printf_i+0x1d0>
 800a074:	2001      	movs	r0, #1
 800a076:	4240      	negs	r0, r0
 800a078:	b00b      	add	sp, #44	; 0x2c
 800a07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a07c:	2220      	movs	r2, #32
 800a07e:	6809      	ldr	r1, [r1, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	6022      	str	r2, [r4, #0]
 800a084:	2278      	movs	r2, #120	; 0x78
 800a086:	4932      	ldr	r1, [pc, #200]	; (800a150 <_printf_i+0x21c>)
 800a088:	9103      	str	r1, [sp, #12]
 800a08a:	0021      	movs	r1, r4
 800a08c:	3145      	adds	r1, #69	; 0x45
 800a08e:	700a      	strb	r2, [r1, #0]
 800a090:	6819      	ldr	r1, [r3, #0]
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	c920      	ldmia	r1!, {r5}
 800a096:	0610      	lsls	r0, r2, #24
 800a098:	d402      	bmi.n	800a0a0 <_printf_i+0x16c>
 800a09a:	0650      	lsls	r0, r2, #25
 800a09c:	d500      	bpl.n	800a0a0 <_printf_i+0x16c>
 800a09e:	b2ad      	uxth	r5, r5
 800a0a0:	6019      	str	r1, [r3, #0]
 800a0a2:	07d3      	lsls	r3, r2, #31
 800a0a4:	d502      	bpl.n	800a0ac <_printf_i+0x178>
 800a0a6:	2320      	movs	r3, #32
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	2710      	movs	r7, #16
 800a0ae:	2d00      	cmp	r5, #0
 800a0b0:	d1a9      	bne.n	800a006 <_printf_i+0xd2>
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	4393      	bics	r3, r2
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	e7a4      	b.n	800a006 <_printf_i+0xd2>
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	680d      	ldr	r5, [r1, #0]
 800a0c0:	1d10      	adds	r0, r2, #4
 800a0c2:	6949      	ldr	r1, [r1, #20]
 800a0c4:	6018      	str	r0, [r3, #0]
 800a0c6:	6813      	ldr	r3, [r2, #0]
 800a0c8:	062e      	lsls	r6, r5, #24
 800a0ca:	d501      	bpl.n	800a0d0 <_printf_i+0x19c>
 800a0cc:	6019      	str	r1, [r3, #0]
 800a0ce:	e002      	b.n	800a0d6 <_printf_i+0x1a2>
 800a0d0:	066d      	lsls	r5, r5, #25
 800a0d2:	d5fb      	bpl.n	800a0cc <_printf_i+0x198>
 800a0d4:	8019      	strh	r1, [r3, #0]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	9e04      	ldr	r6, [sp, #16]
 800a0da:	6123      	str	r3, [r4, #16]
 800a0dc:	e7c0      	b.n	800a060 <_printf_i+0x12c>
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	1d11      	adds	r1, r2, #4
 800a0e2:	6019      	str	r1, [r3, #0]
 800a0e4:	6816      	ldr	r6, [r2, #0]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	0030      	movs	r0, r6
 800a0ea:	6862      	ldr	r2, [r4, #4]
 800a0ec:	f000 fd19 	bl	800ab22 <memchr>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d001      	beq.n	800a0f8 <_printf_i+0x1c4>
 800a0f4:	1b80      	subs	r0, r0, r6
 800a0f6:	6060      	str	r0, [r4, #4]
 800a0f8:	6863      	ldr	r3, [r4, #4]
 800a0fa:	6123      	str	r3, [r4, #16]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9a04      	ldr	r2, [sp, #16]
 800a100:	7013      	strb	r3, [r2, #0]
 800a102:	e7ad      	b.n	800a060 <_printf_i+0x12c>
 800a104:	0032      	movs	r2, r6
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	9906      	ldr	r1, [sp, #24]
 800a10a:	9805      	ldr	r0, [sp, #20]
 800a10c:	9d07      	ldr	r5, [sp, #28]
 800a10e:	47a8      	blx	r5
 800a110:	3001      	adds	r0, #1
 800a112:	d0af      	beq.n	800a074 <_printf_i+0x140>
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	079b      	lsls	r3, r3, #30
 800a118:	d415      	bmi.n	800a146 <_printf_i+0x212>
 800a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11c:	68e0      	ldr	r0, [r4, #12]
 800a11e:	4298      	cmp	r0, r3
 800a120:	daaa      	bge.n	800a078 <_printf_i+0x144>
 800a122:	0018      	movs	r0, r3
 800a124:	e7a8      	b.n	800a078 <_printf_i+0x144>
 800a126:	0022      	movs	r2, r4
 800a128:	2301      	movs	r3, #1
 800a12a:	9906      	ldr	r1, [sp, #24]
 800a12c:	9805      	ldr	r0, [sp, #20]
 800a12e:	9e07      	ldr	r6, [sp, #28]
 800a130:	3219      	adds	r2, #25
 800a132:	47b0      	blx	r6
 800a134:	3001      	adds	r0, #1
 800a136:	d09d      	beq.n	800a074 <_printf_i+0x140>
 800a138:	3501      	adds	r5, #1
 800a13a:	68e3      	ldr	r3, [r4, #12]
 800a13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	42ab      	cmp	r3, r5
 800a142:	dcf0      	bgt.n	800a126 <_printf_i+0x1f2>
 800a144:	e7e9      	b.n	800a11a <_printf_i+0x1e6>
 800a146:	2500      	movs	r5, #0
 800a148:	e7f7      	b.n	800a13a <_printf_i+0x206>
 800a14a:	46c0      	nop			; (mov r8, r8)
 800a14c:	0800d863 	.word	0x0800d863
 800a150:	0800d874 	.word	0x0800d874

0800a154 <_scanf_float>:
 800a154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a156:	b08b      	sub	sp, #44	; 0x2c
 800a158:	0016      	movs	r6, r2
 800a15a:	9002      	str	r0, [sp, #8]
 800a15c:	22ae      	movs	r2, #174	; 0xae
 800a15e:	2000      	movs	r0, #0
 800a160:	9307      	str	r3, [sp, #28]
 800a162:	688b      	ldr	r3, [r1, #8]
 800a164:	000f      	movs	r7, r1
 800a166:	1e59      	subs	r1, r3, #1
 800a168:	0052      	lsls	r2, r2, #1
 800a16a:	9006      	str	r0, [sp, #24]
 800a16c:	4291      	cmp	r1, r2
 800a16e:	d905      	bls.n	800a17c <_scanf_float+0x28>
 800a170:	3b5e      	subs	r3, #94	; 0x5e
 800a172:	3bff      	subs	r3, #255	; 0xff
 800a174:	9306      	str	r3, [sp, #24]
 800a176:	235e      	movs	r3, #94	; 0x5e
 800a178:	33ff      	adds	r3, #255	; 0xff
 800a17a:	60bb      	str	r3, [r7, #8]
 800a17c:	23f0      	movs	r3, #240	; 0xf0
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	4313      	orrs	r3, r2
 800a184:	603b      	str	r3, [r7, #0]
 800a186:	003b      	movs	r3, r7
 800a188:	2400      	movs	r4, #0
 800a18a:	331c      	adds	r3, #28
 800a18c:	001d      	movs	r5, r3
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	9403      	str	r4, [sp, #12]
 800a192:	9409      	str	r4, [sp, #36]	; 0x24
 800a194:	9408      	str	r4, [sp, #32]
 800a196:	9401      	str	r4, [sp, #4]
 800a198:	9405      	str	r4, [sp, #20]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d00a      	beq.n	800a1b6 <_scanf_float+0x62>
 800a1a0:	6833      	ldr	r3, [r6, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b4e      	cmp	r3, #78	; 0x4e
 800a1a6:	d844      	bhi.n	800a232 <_scanf_float+0xde>
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	2b40      	cmp	r3, #64	; 0x40
 800a1ac:	d82c      	bhi.n	800a208 <_scanf_float+0xb4>
 800a1ae:	382b      	subs	r0, #43	; 0x2b
 800a1b0:	b2c1      	uxtb	r1, r0
 800a1b2:	290e      	cmp	r1, #14
 800a1b4:	d92a      	bls.n	800a20c <_scanf_float+0xb8>
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <_scanf_float+0x70>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	4aa3      	ldr	r2, [pc, #652]	; (800a44c <_scanf_float+0x2f8>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d900      	bls.n	800a1ce <_scanf_float+0x7a>
 800a1cc:	e0f9      	b.n	800a3c2 <_scanf_float+0x26e>
 800a1ce:	24be      	movs	r4, #190	; 0xbe
 800a1d0:	0064      	lsls	r4, r4, #1
 800a1d2:	9b04      	ldr	r3, [sp, #16]
 800a1d4:	429d      	cmp	r5, r3
 800a1d6:	d900      	bls.n	800a1da <_scanf_float+0x86>
 800a1d8:	e0e9      	b.n	800a3ae <_scanf_float+0x25a>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	9303      	str	r3, [sp, #12]
 800a1de:	e183      	b.n	800a4e8 <_scanf_float+0x394>
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	3861      	subs	r0, #97	; 0x61
 800a1e4:	280d      	cmp	r0, #13
 800a1e6:	d8e6      	bhi.n	800a1b6 <_scanf_float+0x62>
 800a1e8:	f7f5 ffa0 	bl	800012c <__gnu_thumb1_case_shi>
 800a1ec:	ffe50083 	.word	0xffe50083
 800a1f0:	ffe5ffe5 	.word	0xffe5ffe5
 800a1f4:	00a200b6 	.word	0x00a200b6
 800a1f8:	ffe5ffe5 	.word	0xffe5ffe5
 800a1fc:	ffe50089 	.word	0xffe50089
 800a200:	ffe5ffe5 	.word	0xffe5ffe5
 800a204:	0065ffe5 	.word	0x0065ffe5
 800a208:	3841      	subs	r0, #65	; 0x41
 800a20a:	e7eb      	b.n	800a1e4 <_scanf_float+0x90>
 800a20c:	280e      	cmp	r0, #14
 800a20e:	d8d2      	bhi.n	800a1b6 <_scanf_float+0x62>
 800a210:	f7f5 ff8c 	bl	800012c <__gnu_thumb1_case_shi>
 800a214:	ffd1004b 	.word	0xffd1004b
 800a218:	0098004b 	.word	0x0098004b
 800a21c:	0020ffd1 	.word	0x0020ffd1
 800a220:	00400040 	.word	0x00400040
 800a224:	00400040 	.word	0x00400040
 800a228:	00400040 	.word	0x00400040
 800a22c:	00400040 	.word	0x00400040
 800a230:	0040      	.short	0x0040
 800a232:	2b6e      	cmp	r3, #110	; 0x6e
 800a234:	d809      	bhi.n	800a24a <_scanf_float+0xf6>
 800a236:	2b60      	cmp	r3, #96	; 0x60
 800a238:	d8d2      	bhi.n	800a1e0 <_scanf_float+0x8c>
 800a23a:	2b54      	cmp	r3, #84	; 0x54
 800a23c:	d07d      	beq.n	800a33a <_scanf_float+0x1e6>
 800a23e:	2b59      	cmp	r3, #89	; 0x59
 800a240:	d1b9      	bne.n	800a1b6 <_scanf_float+0x62>
 800a242:	2c07      	cmp	r4, #7
 800a244:	d1b7      	bne.n	800a1b6 <_scanf_float+0x62>
 800a246:	2408      	movs	r4, #8
 800a248:	e02c      	b.n	800a2a4 <_scanf_float+0x150>
 800a24a:	2b74      	cmp	r3, #116	; 0x74
 800a24c:	d075      	beq.n	800a33a <_scanf_float+0x1e6>
 800a24e:	2b79      	cmp	r3, #121	; 0x79
 800a250:	d0f7      	beq.n	800a242 <_scanf_float+0xee>
 800a252:	e7b0      	b.n	800a1b6 <_scanf_float+0x62>
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	05c8      	lsls	r0, r1, #23
 800a258:	d51c      	bpl.n	800a294 <_scanf_float+0x140>
 800a25a:	2380      	movs	r3, #128	; 0x80
 800a25c:	4399      	bics	r1, r3
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	9b06      	ldr	r3, [sp, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <_scanf_float+0x120>
 800a26c:	3b01      	subs	r3, #1
 800a26e:	3201      	adds	r2, #1
 800a270:	9306      	str	r3, [sp, #24]
 800a272:	60ba      	str	r2, [r7, #8]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	3b01      	subs	r3, #1
 800a278:	60bb      	str	r3, [r7, #8]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	3301      	adds	r3, #1
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	6873      	ldr	r3, [r6, #4]
 800a282:	3b01      	subs	r3, #1
 800a284:	6073      	str	r3, [r6, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	dc00      	bgt.n	800a28c <_scanf_float+0x138>
 800a28a:	e086      	b.n	800a39a <_scanf_float+0x246>
 800a28c:	6833      	ldr	r3, [r6, #0]
 800a28e:	3301      	adds	r3, #1
 800a290:	6033      	str	r3, [r6, #0]
 800a292:	e782      	b.n	800a19a <_scanf_float+0x46>
 800a294:	9a03      	ldr	r2, [sp, #12]
 800a296:	1912      	adds	r2, r2, r4
 800a298:	2a00      	cmp	r2, #0
 800a29a:	d18c      	bne.n	800a1b6 <_scanf_float+0x62>
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	496c      	ldr	r1, [pc, #432]	; (800a450 <_scanf_float+0x2fc>)
 800a2a0:	400a      	ands	r2, r1
 800a2a2:	603a      	str	r2, [r7, #0]
 800a2a4:	702b      	strb	r3, [r5, #0]
 800a2a6:	3501      	adds	r5, #1
 800a2a8:	e7e4      	b.n	800a274 <_scanf_float+0x120>
 800a2aa:	2180      	movs	r1, #128	; 0x80
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	420a      	tst	r2, r1
 800a2b0:	d081      	beq.n	800a1b6 <_scanf_float+0x62>
 800a2b2:	438a      	bics	r2, r1
 800a2b4:	e7f5      	b.n	800a2a2 <_scanf_float+0x14e>
 800a2b6:	9a03      	ldr	r2, [sp, #12]
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	d10f      	bne.n	800a2dc <_scanf_float+0x188>
 800a2bc:	9a01      	ldr	r2, [sp, #4]
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	d10f      	bne.n	800a2e2 <_scanf_float+0x18e>
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	21e0      	movs	r1, #224	; 0xe0
 800a2c6:	0010      	movs	r0, r2
 800a2c8:	00c9      	lsls	r1, r1, #3
 800a2ca:	4008      	ands	r0, r1
 800a2cc:	4288      	cmp	r0, r1
 800a2ce:	d108      	bne.n	800a2e2 <_scanf_float+0x18e>
 800a2d0:	4960      	ldr	r1, [pc, #384]	; (800a454 <_scanf_float+0x300>)
 800a2d2:	400a      	ands	r2, r1
 800a2d4:	603a      	str	r2, [r7, #0]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	9203      	str	r2, [sp, #12]
 800a2da:	e7e3      	b.n	800a2a4 <_scanf_float+0x150>
 800a2dc:	9a03      	ldr	r2, [sp, #12]
 800a2de:	2a02      	cmp	r2, #2
 800a2e0:	d059      	beq.n	800a396 <_scanf_float+0x242>
 800a2e2:	2c01      	cmp	r4, #1
 800a2e4:	d002      	beq.n	800a2ec <_scanf_float+0x198>
 800a2e6:	2c04      	cmp	r4, #4
 800a2e8:	d000      	beq.n	800a2ec <_scanf_float+0x198>
 800a2ea:	e764      	b.n	800a1b6 <_scanf_float+0x62>
 800a2ec:	3401      	adds	r4, #1
 800a2ee:	b2e4      	uxtb	r4, r4
 800a2f0:	e7d8      	b.n	800a2a4 <_scanf_float+0x150>
 800a2f2:	9a03      	ldr	r2, [sp, #12]
 800a2f4:	2a01      	cmp	r2, #1
 800a2f6:	d000      	beq.n	800a2fa <_scanf_float+0x1a6>
 800a2f8:	e75d      	b.n	800a1b6 <_scanf_float+0x62>
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	e7ec      	b.n	800a2d8 <_scanf_float+0x184>
 800a2fe:	2c00      	cmp	r4, #0
 800a300:	d110      	bne.n	800a324 <_scanf_float+0x1d0>
 800a302:	9a01      	ldr	r2, [sp, #4]
 800a304:	2a00      	cmp	r2, #0
 800a306:	d000      	beq.n	800a30a <_scanf_float+0x1b6>
 800a308:	e758      	b.n	800a1bc <_scanf_float+0x68>
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	21e0      	movs	r1, #224	; 0xe0
 800a30e:	0010      	movs	r0, r2
 800a310:	00c9      	lsls	r1, r1, #3
 800a312:	4008      	ands	r0, r1
 800a314:	4288      	cmp	r0, r1
 800a316:	d000      	beq.n	800a31a <_scanf_float+0x1c6>
 800a318:	e754      	b.n	800a1c4 <_scanf_float+0x70>
 800a31a:	494e      	ldr	r1, [pc, #312]	; (800a454 <_scanf_float+0x300>)
 800a31c:	3401      	adds	r4, #1
 800a31e:	400a      	ands	r2, r1
 800a320:	603a      	str	r2, [r7, #0]
 800a322:	e7bf      	b.n	800a2a4 <_scanf_float+0x150>
 800a324:	21fd      	movs	r1, #253	; 0xfd
 800a326:	1ee2      	subs	r2, r4, #3
 800a328:	420a      	tst	r2, r1
 800a32a:	d000      	beq.n	800a32e <_scanf_float+0x1da>
 800a32c:	e743      	b.n	800a1b6 <_scanf_float+0x62>
 800a32e:	e7dd      	b.n	800a2ec <_scanf_float+0x198>
 800a330:	2c02      	cmp	r4, #2
 800a332:	d000      	beq.n	800a336 <_scanf_float+0x1e2>
 800a334:	e73f      	b.n	800a1b6 <_scanf_float+0x62>
 800a336:	2403      	movs	r4, #3
 800a338:	e7b4      	b.n	800a2a4 <_scanf_float+0x150>
 800a33a:	2c06      	cmp	r4, #6
 800a33c:	d000      	beq.n	800a340 <_scanf_float+0x1ec>
 800a33e:	e73a      	b.n	800a1b6 <_scanf_float+0x62>
 800a340:	2407      	movs	r4, #7
 800a342:	e7af      	b.n	800a2a4 <_scanf_float+0x150>
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	0591      	lsls	r1, r2, #22
 800a348:	d400      	bmi.n	800a34c <_scanf_float+0x1f8>
 800a34a:	e734      	b.n	800a1b6 <_scanf_float+0x62>
 800a34c:	4942      	ldr	r1, [pc, #264]	; (800a458 <_scanf_float+0x304>)
 800a34e:	400a      	ands	r2, r1
 800a350:	603a      	str	r2, [r7, #0]
 800a352:	9a01      	ldr	r2, [sp, #4]
 800a354:	9205      	str	r2, [sp, #20]
 800a356:	e7a5      	b.n	800a2a4 <_scanf_float+0x150>
 800a358:	21a0      	movs	r1, #160	; 0xa0
 800a35a:	2080      	movs	r0, #128	; 0x80
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	00c9      	lsls	r1, r1, #3
 800a360:	4011      	ands	r1, r2
 800a362:	00c0      	lsls	r0, r0, #3
 800a364:	4281      	cmp	r1, r0
 800a366:	d006      	beq.n	800a376 <_scanf_float+0x222>
 800a368:	4202      	tst	r2, r0
 800a36a:	d100      	bne.n	800a36e <_scanf_float+0x21a>
 800a36c:	e723      	b.n	800a1b6 <_scanf_float+0x62>
 800a36e:	9901      	ldr	r1, [sp, #4]
 800a370:	2900      	cmp	r1, #0
 800a372:	d100      	bne.n	800a376 <_scanf_float+0x222>
 800a374:	e726      	b.n	800a1c4 <_scanf_float+0x70>
 800a376:	0591      	lsls	r1, r2, #22
 800a378:	d404      	bmi.n	800a384 <_scanf_float+0x230>
 800a37a:	9901      	ldr	r1, [sp, #4]
 800a37c:	9805      	ldr	r0, [sp, #20]
 800a37e:	9509      	str	r5, [sp, #36]	; 0x24
 800a380:	1a09      	subs	r1, r1, r0
 800a382:	9108      	str	r1, [sp, #32]
 800a384:	4933      	ldr	r1, [pc, #204]	; (800a454 <_scanf_float+0x300>)
 800a386:	400a      	ands	r2, r1
 800a388:	21c0      	movs	r1, #192	; 0xc0
 800a38a:	0049      	lsls	r1, r1, #1
 800a38c:	430a      	orrs	r2, r1
 800a38e:	603a      	str	r2, [r7, #0]
 800a390:	2200      	movs	r2, #0
 800a392:	9201      	str	r2, [sp, #4]
 800a394:	e786      	b.n	800a2a4 <_scanf_float+0x150>
 800a396:	2203      	movs	r2, #3
 800a398:	e79e      	b.n	800a2d8 <_scanf_float+0x184>
 800a39a:	23c0      	movs	r3, #192	; 0xc0
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	0031      	movs	r1, r6
 800a3a0:	58fb      	ldr	r3, [r7, r3]
 800a3a2:	9802      	ldr	r0, [sp, #8]
 800a3a4:	4798      	blx	r3
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d100      	bne.n	800a3ac <_scanf_float+0x258>
 800a3aa:	e6f6      	b.n	800a19a <_scanf_float+0x46>
 800a3ac:	e703      	b.n	800a1b6 <_scanf_float+0x62>
 800a3ae:	3d01      	subs	r5, #1
 800a3b0:	593b      	ldr	r3, [r7, r4]
 800a3b2:	0032      	movs	r2, r6
 800a3b4:	7829      	ldrb	r1, [r5, #0]
 800a3b6:	9802      	ldr	r0, [sp, #8]
 800a3b8:	4798      	blx	r3
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	613b      	str	r3, [r7, #16]
 800a3c0:	e707      	b.n	800a1d2 <_scanf_float+0x7e>
 800a3c2:	1e63      	subs	r3, r4, #1
 800a3c4:	2b06      	cmp	r3, #6
 800a3c6:	d80e      	bhi.n	800a3e6 <_scanf_float+0x292>
 800a3c8:	9503      	str	r5, [sp, #12]
 800a3ca:	2c02      	cmp	r4, #2
 800a3cc:	d920      	bls.n	800a410 <_scanf_float+0x2bc>
 800a3ce:	1b63      	subs	r3, r4, r5
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	9306      	str	r3, [sp, #24]
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	9a06      	ldr	r2, [sp, #24]
 800a3d8:	189b      	adds	r3, r3, r2
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d827      	bhi.n	800a430 <_scanf_float+0x2dc>
 800a3e0:	3c03      	subs	r4, #3
 800a3e2:	b2e4      	uxtb	r4, r4
 800a3e4:	1b2d      	subs	r5, r5, r4
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	05da      	lsls	r2, r3, #23
 800a3ea:	d552      	bpl.n	800a492 <_scanf_float+0x33e>
 800a3ec:	055b      	lsls	r3, r3, #21
 800a3ee:	d535      	bpl.n	800a45c <_scanf_float+0x308>
 800a3f0:	24be      	movs	r4, #190	; 0xbe
 800a3f2:	0064      	lsls	r4, r4, #1
 800a3f4:	9b04      	ldr	r3, [sp, #16]
 800a3f6:	429d      	cmp	r5, r3
 800a3f8:	d800      	bhi.n	800a3fc <_scanf_float+0x2a8>
 800a3fa:	e6ee      	b.n	800a1da <_scanf_float+0x86>
 800a3fc:	3d01      	subs	r5, #1
 800a3fe:	593b      	ldr	r3, [r7, r4]
 800a400:	0032      	movs	r2, r6
 800a402:	7829      	ldrb	r1, [r5, #0]
 800a404:	9802      	ldr	r0, [sp, #8]
 800a406:	4798      	blx	r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	613b      	str	r3, [r7, #16]
 800a40e:	e7f1      	b.n	800a3f4 <_scanf_float+0x2a0>
 800a410:	24be      	movs	r4, #190	; 0xbe
 800a412:	0064      	lsls	r4, r4, #1
 800a414:	9b04      	ldr	r3, [sp, #16]
 800a416:	429d      	cmp	r5, r3
 800a418:	d800      	bhi.n	800a41c <_scanf_float+0x2c8>
 800a41a:	e6de      	b.n	800a1da <_scanf_float+0x86>
 800a41c:	3d01      	subs	r5, #1
 800a41e:	593b      	ldr	r3, [r7, r4]
 800a420:	0032      	movs	r2, r6
 800a422:	7829      	ldrb	r1, [r5, #0]
 800a424:	9802      	ldr	r0, [sp, #8]
 800a426:	4798      	blx	r3
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	e7f1      	b.n	800a414 <_scanf_float+0x2c0>
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	0032      	movs	r2, r6
 800a434:	3b01      	subs	r3, #1
 800a436:	7819      	ldrb	r1, [r3, #0]
 800a438:	9303      	str	r3, [sp, #12]
 800a43a:	23be      	movs	r3, #190	; 0xbe
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	58fb      	ldr	r3, [r7, r3]
 800a440:	9802      	ldr	r0, [sp, #8]
 800a442:	4798      	blx	r3
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	3b01      	subs	r3, #1
 800a448:	613b      	str	r3, [r7, #16]
 800a44a:	e7c3      	b.n	800a3d4 <_scanf_float+0x280>
 800a44c:	fffffeff 	.word	0xfffffeff
 800a450:	fffffe7f 	.word	0xfffffe7f
 800a454:	fffff87f 	.word	0xfffff87f
 800a458:	fffffd7f 	.word	0xfffffd7f
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	1e6c      	subs	r4, r5, #1
 800a460:	7821      	ldrb	r1, [r4, #0]
 800a462:	3b01      	subs	r3, #1
 800a464:	613b      	str	r3, [r7, #16]
 800a466:	2965      	cmp	r1, #101	; 0x65
 800a468:	d00c      	beq.n	800a484 <_scanf_float+0x330>
 800a46a:	2945      	cmp	r1, #69	; 0x45
 800a46c:	d00a      	beq.n	800a484 <_scanf_float+0x330>
 800a46e:	23be      	movs	r3, #190	; 0xbe
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	58fb      	ldr	r3, [r7, r3]
 800a474:	0032      	movs	r2, r6
 800a476:	9802      	ldr	r0, [sp, #8]
 800a478:	4798      	blx	r3
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	1eac      	subs	r4, r5, #2
 800a47e:	3b01      	subs	r3, #1
 800a480:	7821      	ldrb	r1, [r4, #0]
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	23be      	movs	r3, #190	; 0xbe
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	0032      	movs	r2, r6
 800a48a:	58fb      	ldr	r3, [r7, r3]
 800a48c:	9802      	ldr	r0, [sp, #8]
 800a48e:	4798      	blx	r3
 800a490:	0025      	movs	r5, r4
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	2310      	movs	r3, #16
 800a496:	0011      	movs	r1, r2
 800a498:	4019      	ands	r1, r3
 800a49a:	9103      	str	r1, [sp, #12]
 800a49c:	421a      	tst	r2, r3
 800a49e:	d15b      	bne.n	800a558 <_scanf_float+0x404>
 800a4a0:	22c0      	movs	r2, #192	; 0xc0
 800a4a2:	7029      	strb	r1, [r5, #0]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	00d2      	lsls	r2, r2, #3
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2280      	movs	r2, #128	; 0x80
 800a4ac:	00d2      	lsls	r2, r2, #3
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d11d      	bne.n	800a4ee <_scanf_float+0x39a>
 800a4b2:	9b05      	ldr	r3, [sp, #20]
 800a4b4:	9a01      	ldr	r2, [sp, #4]
 800a4b6:	9901      	ldr	r1, [sp, #4]
 800a4b8:	1a9a      	subs	r2, r3, r2
 800a4ba:	428b      	cmp	r3, r1
 800a4bc:	d124      	bne.n	800a508 <_scanf_float+0x3b4>
 800a4be:	2200      	movs	r2, #0
 800a4c0:	9904      	ldr	r1, [sp, #16]
 800a4c2:	9802      	ldr	r0, [sp, #8]
 800a4c4:	f7ff f936 	bl	8009734 <_strtod_r>
 800a4c8:	9b07      	ldr	r3, [sp, #28]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	0004      	movs	r4, r0
 800a4ce:	000d      	movs	r5, r1
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	0791      	lsls	r1, r2, #30
 800a4d4:	d525      	bpl.n	800a522 <_scanf_float+0x3ce>
 800a4d6:	9907      	ldr	r1, [sp, #28]
 800a4d8:	1d1a      	adds	r2, r3, #4
 800a4da:	600a      	str	r2, [r1, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	601c      	str	r4, [r3, #0]
 800a4e0:	605d      	str	r5, [r3, #4]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	9803      	ldr	r0, [sp, #12]
 800a4ea:	b00b      	add	sp, #44	; 0x2c
 800a4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0e4      	beq.n	800a4be <_scanf_float+0x36a>
 800a4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f6:	9a03      	ldr	r2, [sp, #12]
 800a4f8:	1c59      	adds	r1, r3, #1
 800a4fa:	9802      	ldr	r0, [sp, #8]
 800a4fc:	230a      	movs	r3, #10
 800a4fe:	f7ff f9a7 	bl	8009850 <_strtol_r>
 800a502:	9b08      	ldr	r3, [sp, #32]
 800a504:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a506:	1ac2      	subs	r2, r0, r3
 800a508:	003b      	movs	r3, r7
 800a50a:	3370      	adds	r3, #112	; 0x70
 800a50c:	33ff      	adds	r3, #255	; 0xff
 800a50e:	429d      	cmp	r5, r3
 800a510:	d302      	bcc.n	800a518 <_scanf_float+0x3c4>
 800a512:	003d      	movs	r5, r7
 800a514:	356f      	adds	r5, #111	; 0x6f
 800a516:	35ff      	adds	r5, #255	; 0xff
 800a518:	0028      	movs	r0, r5
 800a51a:	4910      	ldr	r1, [pc, #64]	; (800a55c <_scanf_float+0x408>)
 800a51c:	f000 f956 	bl	800a7cc <siprintf>
 800a520:	e7cd      	b.n	800a4be <_scanf_float+0x36a>
 800a522:	1d19      	adds	r1, r3, #4
 800a524:	0752      	lsls	r2, r2, #29
 800a526:	d502      	bpl.n	800a52e <_scanf_float+0x3da>
 800a528:	9a07      	ldr	r2, [sp, #28]
 800a52a:	6011      	str	r1, [r2, #0]
 800a52c:	e7d6      	b.n	800a4dc <_scanf_float+0x388>
 800a52e:	9a07      	ldr	r2, [sp, #28]
 800a530:	0020      	movs	r0, r4
 800a532:	6011      	str	r1, [r2, #0]
 800a534:	681e      	ldr	r6, [r3, #0]
 800a536:	0022      	movs	r2, r4
 800a538:	002b      	movs	r3, r5
 800a53a:	0029      	movs	r1, r5
 800a53c:	f7f8 fb2c 	bl	8002b98 <__aeabi_dcmpun>
 800a540:	2800      	cmp	r0, #0
 800a542:	d004      	beq.n	800a54e <_scanf_float+0x3fa>
 800a544:	4806      	ldr	r0, [pc, #24]	; (800a560 <_scanf_float+0x40c>)
 800a546:	f000 fb07 	bl	800ab58 <nanf>
 800a54a:	6030      	str	r0, [r6, #0]
 800a54c:	e7c9      	b.n	800a4e2 <_scanf_float+0x38e>
 800a54e:	0020      	movs	r0, r4
 800a550:	0029      	movs	r1, r5
 800a552:	f7f8 fc13 	bl	8002d7c <__aeabi_d2f>
 800a556:	e7f8      	b.n	800a54a <_scanf_float+0x3f6>
 800a558:	2300      	movs	r3, #0
 800a55a:	e63f      	b.n	800a1dc <_scanf_float+0x88>
 800a55c:	0800d885 	.word	0x0800d885
 800a560:	0800db20 	.word	0x0800db20

0800a564 <std>:
 800a564:	2300      	movs	r3, #0
 800a566:	b510      	push	{r4, lr}
 800a568:	0004      	movs	r4, r0
 800a56a:	6003      	str	r3, [r0, #0]
 800a56c:	6043      	str	r3, [r0, #4]
 800a56e:	6083      	str	r3, [r0, #8]
 800a570:	8181      	strh	r1, [r0, #12]
 800a572:	6643      	str	r3, [r0, #100]	; 0x64
 800a574:	81c2      	strh	r2, [r0, #14]
 800a576:	6103      	str	r3, [r0, #16]
 800a578:	6143      	str	r3, [r0, #20]
 800a57a:	6183      	str	r3, [r0, #24]
 800a57c:	0019      	movs	r1, r3
 800a57e:	2208      	movs	r2, #8
 800a580:	305c      	adds	r0, #92	; 0x5c
 800a582:	f000 fa35 	bl	800a9f0 <memset>
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <std+0x50>)
 800a588:	6224      	str	r4, [r4, #32]
 800a58a:	6263      	str	r3, [r4, #36]	; 0x24
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <std+0x54>)
 800a58e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <std+0x58>)
 800a592:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a594:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <std+0x5c>)
 800a596:	6323      	str	r3, [r4, #48]	; 0x30
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <std+0x60>)
 800a59a:	429c      	cmp	r4, r3
 800a59c:	d005      	beq.n	800a5aa <std+0x46>
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <std+0x64>)
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d002      	beq.n	800a5aa <std+0x46>
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <std+0x68>)
 800a5a6:	429c      	cmp	r4, r3
 800a5a8:	d103      	bne.n	800a5b2 <std+0x4e>
 800a5aa:	0020      	movs	r0, r4
 800a5ac:	3058      	adds	r0, #88	; 0x58
 800a5ae:	f000 fab5 	bl	800ab1c <__retarget_lock_init_recursive>
 800a5b2:	bd10      	pop	{r4, pc}
 800a5b4:	0800a80d 	.word	0x0800a80d
 800a5b8:	0800a835 	.word	0x0800a835
 800a5bc:	0800a86d 	.word	0x0800a86d
 800a5c0:	0800a899 	.word	0x0800a899
 800a5c4:	20000694 	.word	0x20000694
 800a5c8:	200006fc 	.word	0x200006fc
 800a5cc:	20000764 	.word	0x20000764

0800a5d0 <stdio_exit_handler>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	4a03      	ldr	r2, [pc, #12]	; (800a5e0 <stdio_exit_handler+0x10>)
 800a5d4:	4903      	ldr	r1, [pc, #12]	; (800a5e4 <stdio_exit_handler+0x14>)
 800a5d6:	4804      	ldr	r0, [pc, #16]	; (800a5e8 <stdio_exit_handler+0x18>)
 800a5d8:	f000 f86c 	bl	800a6b4 <_fwalk_sglue>
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	2000000c 	.word	0x2000000c
 800a5e4:	0800d179 	.word	0x0800d179
 800a5e8:	20000184 	.word	0x20000184

0800a5ec <cleanup_stdio>:
 800a5ec:	6841      	ldr	r1, [r0, #4]
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <cleanup_stdio+0x30>)
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	0004      	movs	r4, r0
 800a5f4:	4299      	cmp	r1, r3
 800a5f6:	d001      	beq.n	800a5fc <cleanup_stdio+0x10>
 800a5f8:	f002 fdbe 	bl	800d178 <_fflush_r>
 800a5fc:	68a1      	ldr	r1, [r4, #8]
 800a5fe:	4b08      	ldr	r3, [pc, #32]	; (800a620 <cleanup_stdio+0x34>)
 800a600:	4299      	cmp	r1, r3
 800a602:	d002      	beq.n	800a60a <cleanup_stdio+0x1e>
 800a604:	0020      	movs	r0, r4
 800a606:	f002 fdb7 	bl	800d178 <_fflush_r>
 800a60a:	68e1      	ldr	r1, [r4, #12]
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <cleanup_stdio+0x38>)
 800a60e:	4299      	cmp	r1, r3
 800a610:	d002      	beq.n	800a618 <cleanup_stdio+0x2c>
 800a612:	0020      	movs	r0, r4
 800a614:	f002 fdb0 	bl	800d178 <_fflush_r>
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	20000694 	.word	0x20000694
 800a620:	200006fc 	.word	0x200006fc
 800a624:	20000764 	.word	0x20000764

0800a628 <global_stdio_init.part.0>:
 800a628:	b510      	push	{r4, lr}
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <global_stdio_init.part.0+0x28>)
 800a62c:	4a09      	ldr	r2, [pc, #36]	; (800a654 <global_stdio_init.part.0+0x2c>)
 800a62e:	2104      	movs	r1, #4
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	4809      	ldr	r0, [pc, #36]	; (800a658 <global_stdio_init.part.0+0x30>)
 800a634:	2200      	movs	r2, #0
 800a636:	f7ff ff95 	bl	800a564 <std>
 800a63a:	2201      	movs	r2, #1
 800a63c:	2109      	movs	r1, #9
 800a63e:	4807      	ldr	r0, [pc, #28]	; (800a65c <global_stdio_init.part.0+0x34>)
 800a640:	f7ff ff90 	bl	800a564 <std>
 800a644:	2202      	movs	r2, #2
 800a646:	2112      	movs	r1, #18
 800a648:	4805      	ldr	r0, [pc, #20]	; (800a660 <global_stdio_init.part.0+0x38>)
 800a64a:	f7ff ff8b 	bl	800a564 <std>
 800a64e:	bd10      	pop	{r4, pc}
 800a650:	200007cc 	.word	0x200007cc
 800a654:	0800a5d1 	.word	0x0800a5d1
 800a658:	20000694 	.word	0x20000694
 800a65c:	200006fc 	.word	0x200006fc
 800a660:	20000764 	.word	0x20000764

0800a664 <__sfp_lock_acquire>:
 800a664:	b510      	push	{r4, lr}
 800a666:	4802      	ldr	r0, [pc, #8]	; (800a670 <__sfp_lock_acquire+0xc>)
 800a668:	f000 fa59 	bl	800ab1e <__retarget_lock_acquire_recursive>
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	46c0      	nop			; (mov r8, r8)
 800a670:	200007d5 	.word	0x200007d5

0800a674 <__sfp_lock_release>:
 800a674:	b510      	push	{r4, lr}
 800a676:	4802      	ldr	r0, [pc, #8]	; (800a680 <__sfp_lock_release+0xc>)
 800a678:	f000 fa52 	bl	800ab20 <__retarget_lock_release_recursive>
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	200007d5 	.word	0x200007d5

0800a684 <__sinit>:
 800a684:	b510      	push	{r4, lr}
 800a686:	0004      	movs	r4, r0
 800a688:	f7ff ffec 	bl	800a664 <__sfp_lock_acquire>
 800a68c:	6a23      	ldr	r3, [r4, #32]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <__sinit+0x14>
 800a692:	f7ff ffef 	bl	800a674 <__sfp_lock_release>
 800a696:	bd10      	pop	{r4, pc}
 800a698:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <__sinit+0x28>)
 800a69a:	6223      	str	r3, [r4, #32]
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <__sinit+0x2c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1f6      	bne.n	800a692 <__sinit+0xe>
 800a6a4:	f7ff ffc0 	bl	800a628 <global_stdio_init.part.0>
 800a6a8:	e7f3      	b.n	800a692 <__sinit+0xe>
 800a6aa:	46c0      	nop			; (mov r8, r8)
 800a6ac:	0800a5ed 	.word	0x0800a5ed
 800a6b0:	200007cc 	.word	0x200007cc

0800a6b4 <_fwalk_sglue>:
 800a6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b6:	0014      	movs	r4, r2
 800a6b8:	2600      	movs	r6, #0
 800a6ba:	9000      	str	r0, [sp, #0]
 800a6bc:	9101      	str	r1, [sp, #4]
 800a6be:	68a5      	ldr	r5, [r4, #8]
 800a6c0:	6867      	ldr	r7, [r4, #4]
 800a6c2:	3f01      	subs	r7, #1
 800a6c4:	d504      	bpl.n	800a6d0 <_fwalk_sglue+0x1c>
 800a6c6:	6824      	ldr	r4, [r4, #0]
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	d1f8      	bne.n	800a6be <_fwalk_sglue+0xa>
 800a6cc:	0030      	movs	r0, r6
 800a6ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6d0:	89ab      	ldrh	r3, [r5, #12]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d908      	bls.n	800a6e8 <_fwalk_sglue+0x34>
 800a6d6:	220e      	movs	r2, #14
 800a6d8:	5eab      	ldrsh	r3, [r5, r2]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	d004      	beq.n	800a6e8 <_fwalk_sglue+0x34>
 800a6de:	0029      	movs	r1, r5
 800a6e0:	9800      	ldr	r0, [sp, #0]
 800a6e2:	9b01      	ldr	r3, [sp, #4]
 800a6e4:	4798      	blx	r3
 800a6e6:	4306      	orrs	r6, r0
 800a6e8:	3568      	adds	r5, #104	; 0x68
 800a6ea:	e7ea      	b.n	800a6c2 <_fwalk_sglue+0xe>

0800a6ec <iprintf>:
 800a6ec:	b40f      	push	{r0, r1, r2, r3}
 800a6ee:	b507      	push	{r0, r1, r2, lr}
 800a6f0:	4905      	ldr	r1, [pc, #20]	; (800a708 <iprintf+0x1c>)
 800a6f2:	ab04      	add	r3, sp, #16
 800a6f4:	6808      	ldr	r0, [r1, #0]
 800a6f6:	cb04      	ldmia	r3!, {r2}
 800a6f8:	6881      	ldr	r1, [r0, #8]
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	f002 fb96 	bl	800ce2c <_vfiprintf_r>
 800a700:	b003      	add	sp, #12
 800a702:	bc08      	pop	{r3}
 800a704:	b004      	add	sp, #16
 800a706:	4718      	bx	r3
 800a708:	200001d0 	.word	0x200001d0

0800a70c <_puts_r>:
 800a70c:	6a03      	ldr	r3, [r0, #32]
 800a70e:	b570      	push	{r4, r5, r6, lr}
 800a710:	0005      	movs	r5, r0
 800a712:	000e      	movs	r6, r1
 800a714:	6884      	ldr	r4, [r0, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <_puts_r+0x12>
 800a71a:	f7ff ffb3 	bl	800a684 <__sinit>
 800a71e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a720:	07db      	lsls	r3, r3, #31
 800a722:	d405      	bmi.n	800a730 <_puts_r+0x24>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	059b      	lsls	r3, r3, #22
 800a728:	d402      	bmi.n	800a730 <_puts_r+0x24>
 800a72a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a72c:	f000 f9f7 	bl	800ab1e <__retarget_lock_acquire_recursive>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	071b      	lsls	r3, r3, #28
 800a734:	d502      	bpl.n	800a73c <_puts_r+0x30>
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d11f      	bne.n	800a77c <_puts_r+0x70>
 800a73c:	0021      	movs	r1, r4
 800a73e:	0028      	movs	r0, r5
 800a740:	f000 f8f2 	bl	800a928 <__swsetup_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	d019      	beq.n	800a77c <_puts_r+0x70>
 800a748:	2501      	movs	r5, #1
 800a74a:	426d      	negs	r5, r5
 800a74c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a74e:	07db      	lsls	r3, r3, #31
 800a750:	d405      	bmi.n	800a75e <_puts_r+0x52>
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	059b      	lsls	r3, r3, #22
 800a756:	d402      	bmi.n	800a75e <_puts_r+0x52>
 800a758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75a:	f000 f9e1 	bl	800ab20 <__retarget_lock_release_recursive>
 800a75e:	0028      	movs	r0, r5
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	3601      	adds	r6, #1
 800a764:	60a3      	str	r3, [r4, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	da04      	bge.n	800a774 <_puts_r+0x68>
 800a76a:	69a2      	ldr	r2, [r4, #24]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	dc16      	bgt.n	800a79e <_puts_r+0x92>
 800a770:	290a      	cmp	r1, #10
 800a772:	d014      	beq.n	800a79e <_puts_r+0x92>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	6022      	str	r2, [r4, #0]
 800a77a:	7019      	strb	r1, [r3, #0]
 800a77c:	68a3      	ldr	r3, [r4, #8]
 800a77e:	7831      	ldrb	r1, [r6, #0]
 800a780:	3b01      	subs	r3, #1
 800a782:	2900      	cmp	r1, #0
 800a784:	d1ed      	bne.n	800a762 <_puts_r+0x56>
 800a786:	60a3      	str	r3, [r4, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	da0f      	bge.n	800a7ac <_puts_r+0xa0>
 800a78c:	0028      	movs	r0, r5
 800a78e:	0022      	movs	r2, r4
 800a790:	310a      	adds	r1, #10
 800a792:	f000 f887 	bl	800a8a4 <__swbuf_r>
 800a796:	250a      	movs	r5, #10
 800a798:	3001      	adds	r0, #1
 800a79a:	d1d7      	bne.n	800a74c <_puts_r+0x40>
 800a79c:	e7d4      	b.n	800a748 <_puts_r+0x3c>
 800a79e:	0022      	movs	r2, r4
 800a7a0:	0028      	movs	r0, r5
 800a7a2:	f000 f87f 	bl	800a8a4 <__swbuf_r>
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d1e8      	bne.n	800a77c <_puts_r+0x70>
 800a7aa:	e7cd      	b.n	800a748 <_puts_r+0x3c>
 800a7ac:	250a      	movs	r5, #10
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	701d      	strb	r5, [r3, #0]
 800a7b6:	e7c9      	b.n	800a74c <_puts_r+0x40>

0800a7b8 <puts>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	4b03      	ldr	r3, [pc, #12]	; (800a7c8 <puts+0x10>)
 800a7bc:	0001      	movs	r1, r0
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	f7ff ffa4 	bl	800a70c <_puts_r>
 800a7c4:	bd10      	pop	{r4, pc}
 800a7c6:	46c0      	nop			; (mov r8, r8)
 800a7c8:	200001d0 	.word	0x200001d0

0800a7cc <siprintf>:
 800a7cc:	b40e      	push	{r1, r2, r3}
 800a7ce:	b500      	push	{lr}
 800a7d0:	490b      	ldr	r1, [pc, #44]	; (800a800 <siprintf+0x34>)
 800a7d2:	b09c      	sub	sp, #112	; 0x70
 800a7d4:	ab1d      	add	r3, sp, #116	; 0x74
 800a7d6:	9002      	str	r0, [sp, #8]
 800a7d8:	9006      	str	r0, [sp, #24]
 800a7da:	9107      	str	r1, [sp, #28]
 800a7dc:	9104      	str	r1, [sp, #16]
 800a7de:	4809      	ldr	r0, [pc, #36]	; (800a804 <siprintf+0x38>)
 800a7e0:	4909      	ldr	r1, [pc, #36]	; (800a808 <siprintf+0x3c>)
 800a7e2:	cb04      	ldmia	r3!, {r2}
 800a7e4:	9105      	str	r1, [sp, #20]
 800a7e6:	6800      	ldr	r0, [r0, #0]
 800a7e8:	a902      	add	r1, sp, #8
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	f002 f9f6 	bl	800cbdc <_svfiprintf_r>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	b01c      	add	sp, #112	; 0x70
 800a7f8:	bc08      	pop	{r3}
 800a7fa:	b003      	add	sp, #12
 800a7fc:	4718      	bx	r3
 800a7fe:	46c0      	nop			; (mov r8, r8)
 800a800:	7fffffff 	.word	0x7fffffff
 800a804:	200001d0 	.word	0x200001d0
 800a808:	ffff0208 	.word	0xffff0208

0800a80c <__sread>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	000c      	movs	r4, r1
 800a810:	250e      	movs	r5, #14
 800a812:	5f49      	ldrsh	r1, [r1, r5]
 800a814:	f000 f930 	bl	800aa78 <_read_r>
 800a818:	2800      	cmp	r0, #0
 800a81a:	db03      	blt.n	800a824 <__sread+0x18>
 800a81c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a81e:	181b      	adds	r3, r3, r0
 800a820:	6563      	str	r3, [r4, #84]	; 0x54
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	4a02      	ldr	r2, [pc, #8]	; (800a830 <__sread+0x24>)
 800a828:	4013      	ands	r3, r2
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	e7f9      	b.n	800a822 <__sread+0x16>
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	ffffefff 	.word	0xffffefff

0800a834 <__swrite>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	001f      	movs	r7, r3
 800a838:	898b      	ldrh	r3, [r1, #12]
 800a83a:	0005      	movs	r5, r0
 800a83c:	000c      	movs	r4, r1
 800a83e:	0016      	movs	r6, r2
 800a840:	05db      	lsls	r3, r3, #23
 800a842:	d505      	bpl.n	800a850 <__swrite+0x1c>
 800a844:	230e      	movs	r3, #14
 800a846:	5ec9      	ldrsh	r1, [r1, r3]
 800a848:	2200      	movs	r2, #0
 800a84a:	2302      	movs	r3, #2
 800a84c:	f000 f900 	bl	800aa50 <_lseek_r>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	4a05      	ldr	r2, [pc, #20]	; (800a868 <__swrite+0x34>)
 800a854:	0028      	movs	r0, r5
 800a856:	4013      	ands	r3, r2
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	0032      	movs	r2, r6
 800a85c:	230e      	movs	r3, #14
 800a85e:	5ee1      	ldrsh	r1, [r4, r3]
 800a860:	003b      	movs	r3, r7
 800a862:	f000 f91d 	bl	800aaa0 <_write_r>
 800a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a868:	ffffefff 	.word	0xffffefff

0800a86c <__sseek>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	000c      	movs	r4, r1
 800a870:	250e      	movs	r5, #14
 800a872:	5f49      	ldrsh	r1, [r1, r5]
 800a874:	f000 f8ec 	bl	800aa50 <_lseek_r>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	1c42      	adds	r2, r0, #1
 800a87c:	d103      	bne.n	800a886 <__sseek+0x1a>
 800a87e:	4a05      	ldr	r2, [pc, #20]	; (800a894 <__sseek+0x28>)
 800a880:	4013      	ands	r3, r2
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	bd70      	pop	{r4, r5, r6, pc}
 800a886:	2280      	movs	r2, #128	; 0x80
 800a888:	0152      	lsls	r2, r2, #5
 800a88a:	4313      	orrs	r3, r2
 800a88c:	81a3      	strh	r3, [r4, #12]
 800a88e:	6560      	str	r0, [r4, #84]	; 0x54
 800a890:	e7f8      	b.n	800a884 <__sseek+0x18>
 800a892:	46c0      	nop			; (mov r8, r8)
 800a894:	ffffefff 	.word	0xffffefff

0800a898 <__sclose>:
 800a898:	b510      	push	{r4, lr}
 800a89a:	230e      	movs	r3, #14
 800a89c:	5ec9      	ldrsh	r1, [r1, r3]
 800a89e:	f000 f8c5 	bl	800aa2c <_close_r>
 800a8a2:	bd10      	pop	{r4, pc}

0800a8a4 <__swbuf_r>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	0006      	movs	r6, r0
 800a8a8:	000d      	movs	r5, r1
 800a8aa:	0014      	movs	r4, r2
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d004      	beq.n	800a8ba <__swbuf_r+0x16>
 800a8b0:	6a03      	ldr	r3, [r0, #32]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <__swbuf_r+0x16>
 800a8b6:	f7ff fee5 	bl	800a684 <__sinit>
 800a8ba:	69a3      	ldr	r3, [r4, #24]
 800a8bc:	60a3      	str	r3, [r4, #8]
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	071b      	lsls	r3, r3, #28
 800a8c2:	d528      	bpl.n	800a916 <__swbuf_r+0x72>
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d025      	beq.n	800a916 <__swbuf_r+0x72>
 800a8ca:	6923      	ldr	r3, [r4, #16]
 800a8cc:	6820      	ldr	r0, [r4, #0]
 800a8ce:	b2ef      	uxtb	r7, r5
 800a8d0:	1ac0      	subs	r0, r0, r3
 800a8d2:	6963      	ldr	r3, [r4, #20]
 800a8d4:	b2ed      	uxtb	r5, r5
 800a8d6:	4283      	cmp	r3, r0
 800a8d8:	dc05      	bgt.n	800a8e6 <__swbuf_r+0x42>
 800a8da:	0021      	movs	r1, r4
 800a8dc:	0030      	movs	r0, r6
 800a8de:	f002 fc4b 	bl	800d178 <_fflush_r>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d11d      	bne.n	800a922 <__swbuf_r+0x7e>
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	60a3      	str	r3, [r4, #8]
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	6022      	str	r2, [r4, #0]
 800a8f4:	701f      	strb	r7, [r3, #0]
 800a8f6:	6963      	ldr	r3, [r4, #20]
 800a8f8:	4283      	cmp	r3, r0
 800a8fa:	d004      	beq.n	800a906 <__swbuf_r+0x62>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	07db      	lsls	r3, r3, #31
 800a900:	d507      	bpl.n	800a912 <__swbuf_r+0x6e>
 800a902:	2d0a      	cmp	r5, #10
 800a904:	d105      	bne.n	800a912 <__swbuf_r+0x6e>
 800a906:	0021      	movs	r1, r4
 800a908:	0030      	movs	r0, r6
 800a90a:	f002 fc35 	bl	800d178 <_fflush_r>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d107      	bne.n	800a922 <__swbuf_r+0x7e>
 800a912:	0028      	movs	r0, r5
 800a914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a916:	0021      	movs	r1, r4
 800a918:	0030      	movs	r0, r6
 800a91a:	f000 f805 	bl	800a928 <__swsetup_r>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d0d3      	beq.n	800a8ca <__swbuf_r+0x26>
 800a922:	2501      	movs	r5, #1
 800a924:	426d      	negs	r5, r5
 800a926:	e7f4      	b.n	800a912 <__swbuf_r+0x6e>

0800a928 <__swsetup_r>:
 800a928:	4b30      	ldr	r3, [pc, #192]	; (800a9ec <__swsetup_r+0xc4>)
 800a92a:	b570      	push	{r4, r5, r6, lr}
 800a92c:	0005      	movs	r5, r0
 800a92e:	6818      	ldr	r0, [r3, #0]
 800a930:	000c      	movs	r4, r1
 800a932:	2800      	cmp	r0, #0
 800a934:	d004      	beq.n	800a940 <__swsetup_r+0x18>
 800a936:	6a03      	ldr	r3, [r0, #32]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <__swsetup_r+0x18>
 800a93c:	f7ff fea2 	bl	800a684 <__sinit>
 800a940:	230c      	movs	r3, #12
 800a942:	5ee2      	ldrsh	r2, [r4, r3]
 800a944:	b293      	uxth	r3, r2
 800a946:	0711      	lsls	r1, r2, #28
 800a948:	d423      	bmi.n	800a992 <__swsetup_r+0x6a>
 800a94a:	06d9      	lsls	r1, r3, #27
 800a94c:	d407      	bmi.n	800a95e <__swsetup_r+0x36>
 800a94e:	2309      	movs	r3, #9
 800a950:	2001      	movs	r0, #1
 800a952:	602b      	str	r3, [r5, #0]
 800a954:	3337      	adds	r3, #55	; 0x37
 800a956:	4313      	orrs	r3, r2
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	4240      	negs	r0, r0
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	075b      	lsls	r3, r3, #29
 800a960:	d513      	bpl.n	800a98a <__swsetup_r+0x62>
 800a962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a964:	2900      	cmp	r1, #0
 800a966:	d008      	beq.n	800a97a <__swsetup_r+0x52>
 800a968:	0023      	movs	r3, r4
 800a96a:	3344      	adds	r3, #68	; 0x44
 800a96c:	4299      	cmp	r1, r3
 800a96e:	d002      	beq.n	800a976 <__swsetup_r+0x4e>
 800a970:	0028      	movs	r0, r5
 800a972:	f000 ff93 	bl	800b89c <_free_r>
 800a976:	2300      	movs	r3, #0
 800a978:	6363      	str	r3, [r4, #52]	; 0x34
 800a97a:	2224      	movs	r2, #36	; 0x24
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	4393      	bics	r3, r2
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	2300      	movs	r3, #0
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	2308      	movs	r3, #8
 800a98c:	89a2      	ldrh	r2, [r4, #12]
 800a98e:	4313      	orrs	r3, r2
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <__swsetup_r+0x88>
 800a998:	21a0      	movs	r1, #160	; 0xa0
 800a99a:	2280      	movs	r2, #128	; 0x80
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	0089      	lsls	r1, r1, #2
 800a9a0:	0092      	lsls	r2, r2, #2
 800a9a2:	400b      	ands	r3, r1
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d003      	beq.n	800a9b0 <__swsetup_r+0x88>
 800a9a8:	0021      	movs	r1, r4
 800a9aa:	0028      	movs	r0, r5
 800a9ac:	f002 fc38 	bl	800d220 <__smakebuf_r>
 800a9b0:	220c      	movs	r2, #12
 800a9b2:	5ea3      	ldrsh	r3, [r4, r2]
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	b299      	uxth	r1, r3
 800a9ba:	4002      	ands	r2, r0
 800a9bc:	4203      	tst	r3, r0
 800a9be:	d00f      	beq.n	800a9e0 <__swsetup_r+0xb8>
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	60a2      	str	r2, [r4, #8]
 800a9c4:	6962      	ldr	r2, [r4, #20]
 800a9c6:	4252      	negs	r2, r2
 800a9c8:	61a2      	str	r2, [r4, #24]
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	4282      	cmp	r2, r0
 800a9d0:	d1c4      	bne.n	800a95c <__swsetup_r+0x34>
 800a9d2:	0609      	lsls	r1, r1, #24
 800a9d4:	d5c2      	bpl.n	800a95c <__swsetup_r+0x34>
 800a9d6:	2240      	movs	r2, #64	; 0x40
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	3801      	subs	r0, #1
 800a9de:	e7bd      	b.n	800a95c <__swsetup_r+0x34>
 800a9e0:	0788      	lsls	r0, r1, #30
 800a9e2:	d400      	bmi.n	800a9e6 <__swsetup_r+0xbe>
 800a9e4:	6962      	ldr	r2, [r4, #20]
 800a9e6:	60a2      	str	r2, [r4, #8]
 800a9e8:	e7ef      	b.n	800a9ca <__swsetup_r+0xa2>
 800a9ea:	46c0      	nop			; (mov r8, r8)
 800a9ec:	200001d0 	.word	0x200001d0

0800a9f0 <memset>:
 800a9f0:	0003      	movs	r3, r0
 800a9f2:	1882      	adds	r2, r0, r2
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d100      	bne.n	800a9fa <memset+0xa>
 800a9f8:	4770      	bx	lr
 800a9fa:	7019      	strb	r1, [r3, #0]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	e7f9      	b.n	800a9f4 <memset+0x4>

0800aa00 <strncmp>:
 800aa00:	b530      	push	{r4, r5, lr}
 800aa02:	0005      	movs	r5, r0
 800aa04:	1e10      	subs	r0, r2, #0
 800aa06:	d00b      	beq.n	800aa20 <strncmp+0x20>
 800aa08:	2400      	movs	r4, #0
 800aa0a:	3a01      	subs	r2, #1
 800aa0c:	5d2b      	ldrb	r3, [r5, r4]
 800aa0e:	5d08      	ldrb	r0, [r1, r4]
 800aa10:	4283      	cmp	r3, r0
 800aa12:	d104      	bne.n	800aa1e <strncmp+0x1e>
 800aa14:	42a2      	cmp	r2, r4
 800aa16:	d002      	beq.n	800aa1e <strncmp+0x1e>
 800aa18:	3401      	adds	r4, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1f6      	bne.n	800aa0c <strncmp+0xc>
 800aa1e:	1a18      	subs	r0, r3, r0
 800aa20:	bd30      	pop	{r4, r5, pc}
	...

0800aa24 <_localeconv_r>:
 800aa24:	4800      	ldr	r0, [pc, #0]	; (800aa28 <_localeconv_r+0x4>)
 800aa26:	4770      	bx	lr
 800aa28:	20000108 	.word	0x20000108

0800aa2c <_close_r>:
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	b570      	push	{r4, r5, r6, lr}
 800aa30:	4d06      	ldr	r5, [pc, #24]	; (800aa4c <_close_r+0x20>)
 800aa32:	0004      	movs	r4, r0
 800aa34:	0008      	movs	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7f9 f8bd 	bl	8003bb6 <_close>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d103      	bne.n	800aa48 <_close_r+0x1c>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d000      	beq.n	800aa48 <_close_r+0x1c>
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	bd70      	pop	{r4, r5, r6, pc}
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	200007d0 	.word	0x200007d0

0800aa50 <_lseek_r>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	0004      	movs	r4, r0
 800aa54:	0008      	movs	r0, r1
 800aa56:	0011      	movs	r1, r2
 800aa58:	001a      	movs	r2, r3
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4d05      	ldr	r5, [pc, #20]	; (800aa74 <_lseek_r+0x24>)
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	f7f9 f8ca 	bl	8003bf8 <_lseek>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d103      	bne.n	800aa70 <_lseek_r+0x20>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d000      	beq.n	800aa70 <_lseek_r+0x20>
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	bd70      	pop	{r4, r5, r6, pc}
 800aa72:	46c0      	nop			; (mov r8, r8)
 800aa74:	200007d0 	.word	0x200007d0

0800aa78 <_read_r>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	0004      	movs	r4, r0
 800aa7c:	0008      	movs	r0, r1
 800aa7e:	0011      	movs	r1, r2
 800aa80:	001a      	movs	r2, r3
 800aa82:	2300      	movs	r3, #0
 800aa84:	4d05      	ldr	r5, [pc, #20]	; (800aa9c <_read_r+0x24>)
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	f7f9 f85c 	bl	8003b44 <_read>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d103      	bne.n	800aa98 <_read_r+0x20>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d000      	beq.n	800aa98 <_read_r+0x20>
 800aa96:	6023      	str	r3, [r4, #0]
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	200007d0 	.word	0x200007d0

0800aaa0 <_write_r>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	0004      	movs	r4, r0
 800aaa4:	0008      	movs	r0, r1
 800aaa6:	0011      	movs	r1, r2
 800aaa8:	001a      	movs	r2, r3
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4d05      	ldr	r5, [pc, #20]	; (800aac4 <_write_r+0x24>)
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	f7f9 f865 	bl	8003b7e <_write>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d103      	bne.n	800aac0 <_write_r+0x20>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d000      	beq.n	800aac0 <_write_r+0x20>
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	200007d0 	.word	0x200007d0

0800aac8 <__errno>:
 800aac8:	4b01      	ldr	r3, [pc, #4]	; (800aad0 <__errno+0x8>)
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	4770      	bx	lr
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	200001d0 	.word	0x200001d0

0800aad4 <__libc_init_array>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	2600      	movs	r6, #0
 800aad8:	4c0c      	ldr	r4, [pc, #48]	; (800ab0c <__libc_init_array+0x38>)
 800aada:	4d0d      	ldr	r5, [pc, #52]	; (800ab10 <__libc_init_array+0x3c>)
 800aadc:	1b64      	subs	r4, r4, r5
 800aade:	10a4      	asrs	r4, r4, #2
 800aae0:	42a6      	cmp	r6, r4
 800aae2:	d109      	bne.n	800aaf8 <__libc_init_array+0x24>
 800aae4:	2600      	movs	r6, #0
 800aae6:	f002 fd07 	bl	800d4f8 <_init>
 800aaea:	4c0a      	ldr	r4, [pc, #40]	; (800ab14 <__libc_init_array+0x40>)
 800aaec:	4d0a      	ldr	r5, [pc, #40]	; (800ab18 <__libc_init_array+0x44>)
 800aaee:	1b64      	subs	r4, r4, r5
 800aaf0:	10a4      	asrs	r4, r4, #2
 800aaf2:	42a6      	cmp	r6, r4
 800aaf4:	d105      	bne.n	800ab02 <__libc_init_array+0x2e>
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	00b3      	lsls	r3, r6, #2
 800aafa:	58eb      	ldr	r3, [r5, r3]
 800aafc:	4798      	blx	r3
 800aafe:	3601      	adds	r6, #1
 800ab00:	e7ee      	b.n	800aae0 <__libc_init_array+0xc>
 800ab02:	00b3      	lsls	r3, r6, #2
 800ab04:	58eb      	ldr	r3, [r5, r3]
 800ab06:	4798      	blx	r3
 800ab08:	3601      	adds	r6, #1
 800ab0a:	e7f2      	b.n	800aaf2 <__libc_init_array+0x1e>
 800ab0c:	0800db2c 	.word	0x0800db2c
 800ab10:	0800db2c 	.word	0x0800db2c
 800ab14:	0800db30 	.word	0x0800db30
 800ab18:	0800db2c 	.word	0x0800db2c

0800ab1c <__retarget_lock_init_recursive>:
 800ab1c:	4770      	bx	lr

0800ab1e <__retarget_lock_acquire_recursive>:
 800ab1e:	4770      	bx	lr

0800ab20 <__retarget_lock_release_recursive>:
 800ab20:	4770      	bx	lr

0800ab22 <memchr>:
 800ab22:	b2c9      	uxtb	r1, r1
 800ab24:	1882      	adds	r2, r0, r2
 800ab26:	4290      	cmp	r0, r2
 800ab28:	d101      	bne.n	800ab2e <memchr+0xc>
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	4770      	bx	lr
 800ab2e:	7803      	ldrb	r3, [r0, #0]
 800ab30:	428b      	cmp	r3, r1
 800ab32:	d0fb      	beq.n	800ab2c <memchr+0xa>
 800ab34:	3001      	adds	r0, #1
 800ab36:	e7f6      	b.n	800ab26 <memchr+0x4>

0800ab38 <memcpy>:
 800ab38:	2300      	movs	r3, #0
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d100      	bne.n	800ab42 <memcpy+0xa>
 800ab40:	bd10      	pop	{r4, pc}
 800ab42:	5ccc      	ldrb	r4, [r1, r3]
 800ab44:	54c4      	strb	r4, [r0, r3]
 800ab46:	3301      	adds	r3, #1
 800ab48:	e7f8      	b.n	800ab3c <memcpy+0x4>
	...

0800ab4c <nan>:
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	4901      	ldr	r1, [pc, #4]	; (800ab54 <nan+0x8>)
 800ab50:	4770      	bx	lr
 800ab52:	46c0      	nop			; (mov r8, r8)
 800ab54:	7ff80000 	.word	0x7ff80000

0800ab58 <nanf>:
 800ab58:	4800      	ldr	r0, [pc, #0]	; (800ab5c <nanf+0x4>)
 800ab5a:	4770      	bx	lr
 800ab5c:	7fc00000 	.word	0x7fc00000

0800ab60 <quorem>:
 800ab60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab62:	6902      	ldr	r2, [r0, #16]
 800ab64:	690b      	ldr	r3, [r1, #16]
 800ab66:	b089      	sub	sp, #36	; 0x24
 800ab68:	0007      	movs	r7, r0
 800ab6a:	9104      	str	r1, [sp, #16]
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	db69      	blt.n	800ac46 <quorem+0xe6>
 800ab72:	3b01      	subs	r3, #1
 800ab74:	009c      	lsls	r4, r3, #2
 800ab76:	9301      	str	r3, [sp, #4]
 800ab78:	000b      	movs	r3, r1
 800ab7a:	3314      	adds	r3, #20
 800ab7c:	9306      	str	r3, [sp, #24]
 800ab7e:	191b      	adds	r3, r3, r4
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	003b      	movs	r3, r7
 800ab84:	3314      	adds	r3, #20
 800ab86:	9303      	str	r3, [sp, #12]
 800ab88:	191c      	adds	r4, r3, r4
 800ab8a:	9b05      	ldr	r3, [sp, #20]
 800ab8c:	6826      	ldr	r6, [r4, #0]
 800ab8e:	681d      	ldr	r5, [r3, #0]
 800ab90:	0030      	movs	r0, r6
 800ab92:	3501      	adds	r5, #1
 800ab94:	0029      	movs	r1, r5
 800ab96:	f7f5 fad3 	bl	8000140 <__udivsi3>
 800ab9a:	9002      	str	r0, [sp, #8]
 800ab9c:	42ae      	cmp	r6, r5
 800ab9e:	d329      	bcc.n	800abf4 <quorem+0x94>
 800aba0:	9b06      	ldr	r3, [sp, #24]
 800aba2:	2600      	movs	r6, #0
 800aba4:	469c      	mov	ip, r3
 800aba6:	9d03      	ldr	r5, [sp, #12]
 800aba8:	9606      	str	r6, [sp, #24]
 800abaa:	4662      	mov	r2, ip
 800abac:	ca08      	ldmia	r2!, {r3}
 800abae:	6828      	ldr	r0, [r5, #0]
 800abb0:	4694      	mov	ip, r2
 800abb2:	9a02      	ldr	r2, [sp, #8]
 800abb4:	b299      	uxth	r1, r3
 800abb6:	4351      	muls	r1, r2
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	4353      	muls	r3, r2
 800abbc:	1989      	adds	r1, r1, r6
 800abbe:	0c0a      	lsrs	r2, r1, #16
 800abc0:	189b      	adds	r3, r3, r2
 800abc2:	9307      	str	r3, [sp, #28]
 800abc4:	0c1e      	lsrs	r6, r3, #16
 800abc6:	9b06      	ldr	r3, [sp, #24]
 800abc8:	b282      	uxth	r2, r0
 800abca:	18d2      	adds	r2, r2, r3
 800abcc:	466b      	mov	r3, sp
 800abce:	b289      	uxth	r1, r1
 800abd0:	8b9b      	ldrh	r3, [r3, #28]
 800abd2:	1a52      	subs	r2, r2, r1
 800abd4:	0c01      	lsrs	r1, r0, #16
 800abd6:	1ac9      	subs	r1, r1, r3
 800abd8:	1413      	asrs	r3, r2, #16
 800abda:	18cb      	adds	r3, r1, r3
 800abdc:	1419      	asrs	r1, r3, #16
 800abde:	b292      	uxth	r2, r2
 800abe0:	041b      	lsls	r3, r3, #16
 800abe2:	4313      	orrs	r3, r2
 800abe4:	c508      	stmia	r5!, {r3}
 800abe6:	9b05      	ldr	r3, [sp, #20]
 800abe8:	9106      	str	r1, [sp, #24]
 800abea:	4563      	cmp	r3, ip
 800abec:	d2dd      	bcs.n	800abaa <quorem+0x4a>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d030      	beq.n	800ac56 <quorem+0xf6>
 800abf4:	0038      	movs	r0, r7
 800abf6:	9904      	ldr	r1, [sp, #16]
 800abf8:	f001 fd98 	bl	800c72c <__mcmp>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	db21      	blt.n	800ac44 <quorem+0xe4>
 800ac00:	0038      	movs	r0, r7
 800ac02:	2600      	movs	r6, #0
 800ac04:	9b02      	ldr	r3, [sp, #8]
 800ac06:	9c04      	ldr	r4, [sp, #16]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	9302      	str	r3, [sp, #8]
 800ac0c:	3014      	adds	r0, #20
 800ac0e:	3414      	adds	r4, #20
 800ac10:	6803      	ldr	r3, [r0, #0]
 800ac12:	cc02      	ldmia	r4!, {r1}
 800ac14:	b29d      	uxth	r5, r3
 800ac16:	19ad      	adds	r5, r5, r6
 800ac18:	b28a      	uxth	r2, r1
 800ac1a:	1aaa      	subs	r2, r5, r2
 800ac1c:	0c09      	lsrs	r1, r1, #16
 800ac1e:	0c1b      	lsrs	r3, r3, #16
 800ac20:	1a5b      	subs	r3, r3, r1
 800ac22:	1411      	asrs	r1, r2, #16
 800ac24:	185b      	adds	r3, r3, r1
 800ac26:	141e      	asrs	r6, r3, #16
 800ac28:	b292      	uxth	r2, r2
 800ac2a:	041b      	lsls	r3, r3, #16
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	c008      	stmia	r0!, {r3}
 800ac30:	9b05      	ldr	r3, [sp, #20]
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	d2ec      	bcs.n	800ac10 <quorem+0xb0>
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	9a03      	ldr	r2, [sp, #12]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	18d3      	adds	r3, r2, r3
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	2a00      	cmp	r2, #0
 800ac42:	d015      	beq.n	800ac70 <quorem+0x110>
 800ac44:	9802      	ldr	r0, [sp, #8]
 800ac46:	b009      	add	sp, #36	; 0x24
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d106      	bne.n	800ac5e <quorem+0xfe>
 800ac50:	9b01      	ldr	r3, [sp, #4]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	3c04      	subs	r4, #4
 800ac5a:	42a3      	cmp	r3, r4
 800ac5c:	d3f5      	bcc.n	800ac4a <quorem+0xea>
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	613b      	str	r3, [r7, #16]
 800ac62:	e7c7      	b.n	800abf4 <quorem+0x94>
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	d106      	bne.n	800ac78 <quorem+0x118>
 800ac6a:	9a01      	ldr	r2, [sp, #4]
 800ac6c:	3a01      	subs	r2, #1
 800ac6e:	9201      	str	r2, [sp, #4]
 800ac70:	9a03      	ldr	r2, [sp, #12]
 800ac72:	3b04      	subs	r3, #4
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3f5      	bcc.n	800ac64 <quorem+0x104>
 800ac78:	9b01      	ldr	r3, [sp, #4]
 800ac7a:	613b      	str	r3, [r7, #16]
 800ac7c:	e7e2      	b.n	800ac44 <quorem+0xe4>
	...

0800ac80 <_dtoa_r>:
 800ac80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac82:	0014      	movs	r4, r2
 800ac84:	001d      	movs	r5, r3
 800ac86:	69c6      	ldr	r6, [r0, #28]
 800ac88:	b09d      	sub	sp, #116	; 0x74
 800ac8a:	9408      	str	r4, [sp, #32]
 800ac8c:	9509      	str	r5, [sp, #36]	; 0x24
 800ac8e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800ac90:	9004      	str	r0, [sp, #16]
 800ac92:	2e00      	cmp	r6, #0
 800ac94:	d10f      	bne.n	800acb6 <_dtoa_r+0x36>
 800ac96:	2010      	movs	r0, #16
 800ac98:	f001 f9a6 	bl	800bfe8 <malloc>
 800ac9c:	9b04      	ldr	r3, [sp, #16]
 800ac9e:	1e02      	subs	r2, r0, #0
 800aca0:	61d8      	str	r0, [r3, #28]
 800aca2:	d104      	bne.n	800acae <_dtoa_r+0x2e>
 800aca4:	21ef      	movs	r1, #239	; 0xef
 800aca6:	4bc6      	ldr	r3, [pc, #792]	; (800afc0 <_dtoa_r+0x340>)
 800aca8:	48c6      	ldr	r0, [pc, #792]	; (800afc4 <_dtoa_r+0x344>)
 800acaa:	f002 fb41 	bl	800d330 <__assert_func>
 800acae:	6046      	str	r6, [r0, #4]
 800acb0:	6086      	str	r6, [r0, #8]
 800acb2:	6006      	str	r6, [r0, #0]
 800acb4:	60c6      	str	r6, [r0, #12]
 800acb6:	9b04      	ldr	r3, [sp, #16]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	6819      	ldr	r1, [r3, #0]
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d00b      	beq.n	800acd8 <_dtoa_r+0x58>
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	2301      	movs	r3, #1
 800acc4:	4093      	lsls	r3, r2
 800acc6:	604a      	str	r2, [r1, #4]
 800acc8:	608b      	str	r3, [r1, #8]
 800acca:	9804      	ldr	r0, [sp, #16]
 800accc:	f001 faa0 	bl	800c210 <_Bfree>
 800acd0:	2200      	movs	r2, #0
 800acd2:	9b04      	ldr	r3, [sp, #16]
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	2d00      	cmp	r5, #0
 800acda:	da1e      	bge.n	800ad1a <_dtoa_r+0x9a>
 800acdc:	2301      	movs	r3, #1
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	006b      	lsls	r3, r5, #1
 800ace2:	085b      	lsrs	r3, r3, #1
 800ace4:	9309      	str	r3, [sp, #36]	; 0x24
 800ace6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ace8:	4bb7      	ldr	r3, [pc, #732]	; (800afc8 <_dtoa_r+0x348>)
 800acea:	4ab7      	ldr	r2, [pc, #732]	; (800afc8 <_dtoa_r+0x348>)
 800acec:	403b      	ands	r3, r7
 800acee:	4293      	cmp	r3, r2
 800acf0:	d116      	bne.n	800ad20 <_dtoa_r+0xa0>
 800acf2:	4bb6      	ldr	r3, [pc, #728]	; (800afcc <_dtoa_r+0x34c>)
 800acf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	033b      	lsls	r3, r7, #12
 800acfa:	0b1b      	lsrs	r3, r3, #12
 800acfc:	4323      	orrs	r3, r4
 800acfe:	d101      	bne.n	800ad04 <_dtoa_r+0x84>
 800ad00:	f000 fdb5 	bl	800b86e <_dtoa_r+0xbee>
 800ad04:	4bb2      	ldr	r3, [pc, #712]	; (800afd0 <_dtoa_r+0x350>)
 800ad06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad08:	9306      	str	r3, [sp, #24]
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	d002      	beq.n	800ad14 <_dtoa_r+0x94>
 800ad0e:	4bb1      	ldr	r3, [pc, #708]	; (800afd4 <_dtoa_r+0x354>)
 800ad10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	9806      	ldr	r0, [sp, #24]
 800ad16:	b01d      	add	sp, #116	; 0x74
 800ad18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	603b      	str	r3, [r7, #0]
 800ad1e:	e7e2      	b.n	800ace6 <_dtoa_r+0x66>
 800ad20:	9a08      	ldr	r2, [sp, #32]
 800ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad24:	9210      	str	r2, [sp, #64]	; 0x40
 800ad26:	9311      	str	r3, [sp, #68]	; 0x44
 800ad28:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f7f5 fb8c 	bl	800044c <__aeabi_dcmpeq>
 800ad34:	1e06      	subs	r6, r0, #0
 800ad36:	d009      	beq.n	800ad4c <_dtoa_r+0xcc>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	4ba6      	ldr	r3, [pc, #664]	; (800afd8 <_dtoa_r+0x358>)
 800ad40:	9306      	str	r3, [sp, #24]
 800ad42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d0e5      	beq.n	800ad14 <_dtoa_r+0x94>
 800ad48:	4ba4      	ldr	r3, [pc, #656]	; (800afdc <_dtoa_r+0x35c>)
 800ad4a:	e7e1      	b.n	800ad10 <_dtoa_r+0x90>
 800ad4c:	ab1a      	add	r3, sp, #104	; 0x68
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	ab1b      	add	r3, sp, #108	; 0x6c
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	9804      	ldr	r0, [sp, #16]
 800ad56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad5a:	f001 fe03 	bl	800c964 <__d2b>
 800ad5e:	007a      	lsls	r2, r7, #1
 800ad60:	9005      	str	r0, [sp, #20]
 800ad62:	0d52      	lsrs	r2, r2, #21
 800ad64:	d100      	bne.n	800ad68 <_dtoa_r+0xe8>
 800ad66:	e07b      	b.n	800ae60 <_dtoa_r+0x1e0>
 800ad68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad6a:	9617      	str	r6, [sp, #92]	; 0x5c
 800ad6c:	0319      	lsls	r1, r3, #12
 800ad6e:	4b9c      	ldr	r3, [pc, #624]	; (800afe0 <_dtoa_r+0x360>)
 800ad70:	0b09      	lsrs	r1, r1, #12
 800ad72:	430b      	orrs	r3, r1
 800ad74:	499b      	ldr	r1, [pc, #620]	; (800afe4 <_dtoa_r+0x364>)
 800ad76:	1857      	adds	r7, r2, r1
 800ad78:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad7c:	0019      	movs	r1, r3
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4b99      	ldr	r3, [pc, #612]	; (800afe8 <_dtoa_r+0x368>)
 800ad82:	f7f7 fb87 	bl	8002494 <__aeabi_dsub>
 800ad86:	4a99      	ldr	r2, [pc, #612]	; (800afec <_dtoa_r+0x36c>)
 800ad88:	4b99      	ldr	r3, [pc, #612]	; (800aff0 <_dtoa_r+0x370>)
 800ad8a:	f7f7 f8c1 	bl	8001f10 <__aeabi_dmul>
 800ad8e:	4a99      	ldr	r2, [pc, #612]	; (800aff4 <_dtoa_r+0x374>)
 800ad90:	4b99      	ldr	r3, [pc, #612]	; (800aff8 <_dtoa_r+0x378>)
 800ad92:	f7f6 f963 	bl	800105c <__aeabi_dadd>
 800ad96:	0004      	movs	r4, r0
 800ad98:	0038      	movs	r0, r7
 800ad9a:	000d      	movs	r5, r1
 800ad9c:	f7f7 ff50 	bl	8002c40 <__aeabi_i2d>
 800ada0:	4a96      	ldr	r2, [pc, #600]	; (800affc <_dtoa_r+0x37c>)
 800ada2:	4b97      	ldr	r3, [pc, #604]	; (800b000 <_dtoa_r+0x380>)
 800ada4:	f7f7 f8b4 	bl	8001f10 <__aeabi_dmul>
 800ada8:	0002      	movs	r2, r0
 800adaa:	000b      	movs	r3, r1
 800adac:	0020      	movs	r0, r4
 800adae:	0029      	movs	r1, r5
 800adb0:	f7f6 f954 	bl	800105c <__aeabi_dadd>
 800adb4:	0004      	movs	r4, r0
 800adb6:	000d      	movs	r5, r1
 800adb8:	f7f7 ff0c 	bl	8002bd4 <__aeabi_d2iz>
 800adbc:	2200      	movs	r2, #0
 800adbe:	9003      	str	r0, [sp, #12]
 800adc0:	2300      	movs	r3, #0
 800adc2:	0020      	movs	r0, r4
 800adc4:	0029      	movs	r1, r5
 800adc6:	f7f5 fb47 	bl	8000458 <__aeabi_dcmplt>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d00b      	beq.n	800ade6 <_dtoa_r+0x166>
 800adce:	9803      	ldr	r0, [sp, #12]
 800add0:	f7f7 ff36 	bl	8002c40 <__aeabi_i2d>
 800add4:	002b      	movs	r3, r5
 800add6:	0022      	movs	r2, r4
 800add8:	f7f5 fb38 	bl	800044c <__aeabi_dcmpeq>
 800addc:	4243      	negs	r3, r0
 800adde:	4158      	adcs	r0, r3
 800ade0:	9b03      	ldr	r3, [sp, #12]
 800ade2:	1a1b      	subs	r3, r3, r0
 800ade4:	9303      	str	r3, [sp, #12]
 800ade6:	2301      	movs	r3, #1
 800ade8:	9316      	str	r3, [sp, #88]	; 0x58
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	2b16      	cmp	r3, #22
 800adee:	d810      	bhi.n	800ae12 <_dtoa_r+0x192>
 800adf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adf2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800adf4:	9a03      	ldr	r2, [sp, #12]
 800adf6:	4b83      	ldr	r3, [pc, #524]	; (800b004 <_dtoa_r+0x384>)
 800adf8:	00d2      	lsls	r2, r2, #3
 800adfa:	189b      	adds	r3, r3, r2
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f7f5 fb2a 	bl	8000458 <__aeabi_dcmplt>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d047      	beq.n	800ae98 <_dtoa_r+0x218>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	9303      	str	r3, [sp, #12]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9316      	str	r3, [sp, #88]	; 0x58
 800ae12:	2200      	movs	r2, #0
 800ae14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ae16:	920a      	str	r2, [sp, #40]	; 0x28
 800ae18:	1bdb      	subs	r3, r3, r7
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	d53e      	bpl.n	800ae9c <_dtoa_r+0x21c>
 800ae1e:	2201      	movs	r2, #1
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	930a      	str	r3, [sp, #40]	; 0x28
 800ae24:	2300      	movs	r3, #0
 800ae26:	930c      	str	r3, [sp, #48]	; 0x30
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	db38      	blt.n	800aea0 <_dtoa_r+0x220>
 800ae2e:	9a03      	ldr	r2, [sp, #12]
 800ae30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae32:	4694      	mov	ip, r2
 800ae34:	4463      	add	r3, ip
 800ae36:	930c      	str	r3, [sp, #48]	; 0x30
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae3c:	930d      	str	r3, [sp, #52]	; 0x34
 800ae3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae40:	2401      	movs	r4, #1
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d867      	bhi.n	800af16 <_dtoa_r+0x296>
 800ae46:	2b05      	cmp	r3, #5
 800ae48:	dd02      	ble.n	800ae50 <_dtoa_r+0x1d0>
 800ae4a:	2400      	movs	r4, #0
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	9322      	str	r3, [sp, #136]	; 0x88
 800ae50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae52:	1e98      	subs	r0, r3, #2
 800ae54:	2803      	cmp	r0, #3
 800ae56:	d867      	bhi.n	800af28 <_dtoa_r+0x2a8>
 800ae58:	f7f5 f95e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ae5c:	5b383a2b 	.word	0x5b383a2b
 800ae60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae62:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ae64:	18f6      	adds	r6, r6, r3
 800ae66:	4b68      	ldr	r3, [pc, #416]	; (800b008 <_dtoa_r+0x388>)
 800ae68:	18f2      	adds	r2, r6, r3
 800ae6a:	2a20      	cmp	r2, #32
 800ae6c:	dd0f      	ble.n	800ae8e <_dtoa_r+0x20e>
 800ae6e:	2340      	movs	r3, #64	; 0x40
 800ae70:	1a9b      	subs	r3, r3, r2
 800ae72:	409f      	lsls	r7, r3
 800ae74:	4b65      	ldr	r3, [pc, #404]	; (800b00c <_dtoa_r+0x38c>)
 800ae76:	0038      	movs	r0, r7
 800ae78:	18f3      	adds	r3, r6, r3
 800ae7a:	40dc      	lsrs	r4, r3
 800ae7c:	4320      	orrs	r0, r4
 800ae7e:	f7f7 ff0f 	bl	8002ca0 <__aeabi_ui2d>
 800ae82:	2201      	movs	r2, #1
 800ae84:	4b62      	ldr	r3, [pc, #392]	; (800b010 <_dtoa_r+0x390>)
 800ae86:	1e77      	subs	r7, r6, #1
 800ae88:	18cb      	adds	r3, r1, r3
 800ae8a:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae8c:	e776      	b.n	800ad7c <_dtoa_r+0xfc>
 800ae8e:	2320      	movs	r3, #32
 800ae90:	0020      	movs	r0, r4
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	4098      	lsls	r0, r3
 800ae96:	e7f2      	b.n	800ae7e <_dtoa_r+0x1fe>
 800ae98:	9016      	str	r0, [sp, #88]	; 0x58
 800ae9a:	e7ba      	b.n	800ae12 <_dtoa_r+0x192>
 800ae9c:	920c      	str	r2, [sp, #48]	; 0x30
 800ae9e:	e7c3      	b.n	800ae28 <_dtoa_r+0x1a8>
 800aea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea2:	9a03      	ldr	r2, [sp, #12]
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	930a      	str	r3, [sp, #40]	; 0x28
 800aea8:	4253      	negs	r3, r2
 800aeaa:	930d      	str	r3, [sp, #52]	; 0x34
 800aeac:	2300      	movs	r3, #0
 800aeae:	9313      	str	r3, [sp, #76]	; 0x4c
 800aeb0:	e7c5      	b.n	800ae3e <_dtoa_r+0x1be>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aeb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeba:	9307      	str	r3, [sp, #28]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	dc13      	bgt.n	800aee8 <_dtoa_r+0x268>
 800aec0:	2301      	movs	r3, #1
 800aec2:	001a      	movs	r2, r3
 800aec4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aec6:	9307      	str	r3, [sp, #28]
 800aec8:	9223      	str	r2, [sp, #140]	; 0x8c
 800aeca:	e00d      	b.n	800aee8 <_dtoa_r+0x268>
 800aecc:	2301      	movs	r3, #1
 800aece:	e7f1      	b.n	800aeb4 <_dtoa_r+0x234>
 800aed0:	2300      	movs	r3, #0
 800aed2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800aed4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aed6:	4694      	mov	ip, r2
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	4463      	add	r3, ip
 800aedc:	930b      	str	r3, [sp, #44]	; 0x2c
 800aede:	3301      	adds	r3, #1
 800aee0:	9307      	str	r3, [sp, #28]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dc00      	bgt.n	800aee8 <_dtoa_r+0x268>
 800aee6:	2301      	movs	r3, #1
 800aee8:	9a04      	ldr	r2, [sp, #16]
 800aeea:	2100      	movs	r1, #0
 800aeec:	69d0      	ldr	r0, [r2, #28]
 800aeee:	2204      	movs	r2, #4
 800aef0:	0015      	movs	r5, r2
 800aef2:	3514      	adds	r5, #20
 800aef4:	429d      	cmp	r5, r3
 800aef6:	d91b      	bls.n	800af30 <_dtoa_r+0x2b0>
 800aef8:	6041      	str	r1, [r0, #4]
 800aefa:	9804      	ldr	r0, [sp, #16]
 800aefc:	f001 f944 	bl	800c188 <_Balloc>
 800af00:	9006      	str	r0, [sp, #24]
 800af02:	2800      	cmp	r0, #0
 800af04:	d117      	bne.n	800af36 <_dtoa_r+0x2b6>
 800af06:	21b0      	movs	r1, #176	; 0xb0
 800af08:	4b42      	ldr	r3, [pc, #264]	; (800b014 <_dtoa_r+0x394>)
 800af0a:	482e      	ldr	r0, [pc, #184]	; (800afc4 <_dtoa_r+0x344>)
 800af0c:	9a06      	ldr	r2, [sp, #24]
 800af0e:	31ff      	adds	r1, #255	; 0xff
 800af10:	e6cb      	b.n	800acaa <_dtoa_r+0x2a>
 800af12:	2301      	movs	r3, #1
 800af14:	e7dd      	b.n	800aed2 <_dtoa_r+0x252>
 800af16:	2300      	movs	r3, #0
 800af18:	940f      	str	r4, [sp, #60]	; 0x3c
 800af1a:	9322      	str	r3, [sp, #136]	; 0x88
 800af1c:	3b01      	subs	r3, #1
 800af1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af20:	9307      	str	r3, [sp, #28]
 800af22:	2200      	movs	r2, #0
 800af24:	3313      	adds	r3, #19
 800af26:	e7cf      	b.n	800aec8 <_dtoa_r+0x248>
 800af28:	2301      	movs	r3, #1
 800af2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800af2c:	3b02      	subs	r3, #2
 800af2e:	e7f6      	b.n	800af1e <_dtoa_r+0x29e>
 800af30:	3101      	adds	r1, #1
 800af32:	0052      	lsls	r2, r2, #1
 800af34:	e7dc      	b.n	800aef0 <_dtoa_r+0x270>
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	9a06      	ldr	r2, [sp, #24]
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	9b07      	ldr	r3, [sp, #28]
 800af40:	2b0e      	cmp	r3, #14
 800af42:	d900      	bls.n	800af46 <_dtoa_r+0x2c6>
 800af44:	e0e5      	b.n	800b112 <_dtoa_r+0x492>
 800af46:	2c00      	cmp	r4, #0
 800af48:	d100      	bne.n	800af4c <_dtoa_r+0x2cc>
 800af4a:	e0e2      	b.n	800b112 <_dtoa_r+0x492>
 800af4c:	9b03      	ldr	r3, [sp, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	dd64      	ble.n	800b01c <_dtoa_r+0x39c>
 800af52:	210f      	movs	r1, #15
 800af54:	9a03      	ldr	r2, [sp, #12]
 800af56:	4b2b      	ldr	r3, [pc, #172]	; (800b004 <_dtoa_r+0x384>)
 800af58:	400a      	ands	r2, r1
 800af5a:	00d2      	lsls	r2, r2, #3
 800af5c:	189b      	adds	r3, r3, r2
 800af5e:	681e      	ldr	r6, [r3, #0]
 800af60:	685f      	ldr	r7, [r3, #4]
 800af62:	9b03      	ldr	r3, [sp, #12]
 800af64:	2402      	movs	r4, #2
 800af66:	111d      	asrs	r5, r3, #4
 800af68:	05db      	lsls	r3, r3, #23
 800af6a:	d50a      	bpl.n	800af82 <_dtoa_r+0x302>
 800af6c:	4b2a      	ldr	r3, [pc, #168]	; (800b018 <_dtoa_r+0x398>)
 800af6e:	400d      	ands	r5, r1
 800af70:	6a1a      	ldr	r2, [r3, #32]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af76:	9911      	ldr	r1, [sp, #68]	; 0x44
 800af78:	f7f6 fbd0 	bl	800171c <__aeabi_ddiv>
 800af7c:	9008      	str	r0, [sp, #32]
 800af7e:	9109      	str	r1, [sp, #36]	; 0x24
 800af80:	3401      	adds	r4, #1
 800af82:	4b25      	ldr	r3, [pc, #148]	; (800b018 <_dtoa_r+0x398>)
 800af84:	930e      	str	r3, [sp, #56]	; 0x38
 800af86:	2d00      	cmp	r5, #0
 800af88:	d108      	bne.n	800af9c <_dtoa_r+0x31c>
 800af8a:	9808      	ldr	r0, [sp, #32]
 800af8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af8e:	0032      	movs	r2, r6
 800af90:	003b      	movs	r3, r7
 800af92:	f7f6 fbc3 	bl	800171c <__aeabi_ddiv>
 800af96:	9008      	str	r0, [sp, #32]
 800af98:	9109      	str	r1, [sp, #36]	; 0x24
 800af9a:	e05a      	b.n	800b052 <_dtoa_r+0x3d2>
 800af9c:	2301      	movs	r3, #1
 800af9e:	421d      	tst	r5, r3
 800afa0:	d009      	beq.n	800afb6 <_dtoa_r+0x336>
 800afa2:	18e4      	adds	r4, r4, r3
 800afa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa6:	0030      	movs	r0, r6
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	0039      	movs	r1, r7
 800afae:	f7f6 ffaf 	bl	8001f10 <__aeabi_dmul>
 800afb2:	0006      	movs	r6, r0
 800afb4:	000f      	movs	r7, r1
 800afb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afb8:	106d      	asrs	r5, r5, #1
 800afba:	3308      	adds	r3, #8
 800afbc:	e7e2      	b.n	800af84 <_dtoa_r+0x304>
 800afbe:	46c0      	nop			; (mov r8, r8)
 800afc0:	0800d89f 	.word	0x0800d89f
 800afc4:	0800d8b6 	.word	0x0800d8b6
 800afc8:	7ff00000 	.word	0x7ff00000
 800afcc:	0000270f 	.word	0x0000270f
 800afd0:	0800d89b 	.word	0x0800d89b
 800afd4:	0800d89e 	.word	0x0800d89e
 800afd8:	0800d861 	.word	0x0800d861
 800afdc:	0800d862 	.word	0x0800d862
 800afe0:	3ff00000 	.word	0x3ff00000
 800afe4:	fffffc01 	.word	0xfffffc01
 800afe8:	3ff80000 	.word	0x3ff80000
 800afec:	636f4361 	.word	0x636f4361
 800aff0:	3fd287a7 	.word	0x3fd287a7
 800aff4:	8b60c8b3 	.word	0x8b60c8b3
 800aff8:	3fc68a28 	.word	0x3fc68a28
 800affc:	509f79fb 	.word	0x509f79fb
 800b000:	3fd34413 	.word	0x3fd34413
 800b004:	0800da00 	.word	0x0800da00
 800b008:	00000432 	.word	0x00000432
 800b00c:	00000412 	.word	0x00000412
 800b010:	fe100000 	.word	0xfe100000
 800b014:	0800d90e 	.word	0x0800d90e
 800b018:	0800d9d8 	.word	0x0800d9d8
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	2402      	movs	r4, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d016      	beq.n	800b052 <_dtoa_r+0x3d2>
 800b024:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b026:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b028:	220f      	movs	r2, #15
 800b02a:	425d      	negs	r5, r3
 800b02c:	402a      	ands	r2, r5
 800b02e:	4bdd      	ldr	r3, [pc, #884]	; (800b3a4 <_dtoa_r+0x724>)
 800b030:	00d2      	lsls	r2, r2, #3
 800b032:	189b      	adds	r3, r3, r2
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f7f6 ff6a 	bl	8001f10 <__aeabi_dmul>
 800b03c:	2701      	movs	r7, #1
 800b03e:	2300      	movs	r3, #0
 800b040:	9008      	str	r0, [sp, #32]
 800b042:	9109      	str	r1, [sp, #36]	; 0x24
 800b044:	4ed8      	ldr	r6, [pc, #864]	; (800b3a8 <_dtoa_r+0x728>)
 800b046:	112d      	asrs	r5, r5, #4
 800b048:	2d00      	cmp	r5, #0
 800b04a:	d000      	beq.n	800b04e <_dtoa_r+0x3ce>
 800b04c:	e091      	b.n	800b172 <_dtoa_r+0x4f2>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1a1      	bne.n	800af96 <_dtoa_r+0x316>
 800b052:	9e08      	ldr	r6, [sp, #32]
 800b054:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b056:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d100      	bne.n	800b05e <_dtoa_r+0x3de>
 800b05c:	e094      	b.n	800b188 <_dtoa_r+0x508>
 800b05e:	2200      	movs	r2, #0
 800b060:	0030      	movs	r0, r6
 800b062:	0039      	movs	r1, r7
 800b064:	4bd1      	ldr	r3, [pc, #836]	; (800b3ac <_dtoa_r+0x72c>)
 800b066:	f7f5 f9f7 	bl	8000458 <__aeabi_dcmplt>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d100      	bne.n	800b070 <_dtoa_r+0x3f0>
 800b06e:	e08b      	b.n	800b188 <_dtoa_r+0x508>
 800b070:	9b07      	ldr	r3, [sp, #28]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d100      	bne.n	800b078 <_dtoa_r+0x3f8>
 800b076:	e087      	b.n	800b188 <_dtoa_r+0x508>
 800b078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	dd45      	ble.n	800b10a <_dtoa_r+0x48a>
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	3b01      	subs	r3, #1
 800b084:	930e      	str	r3, [sp, #56]	; 0x38
 800b086:	0030      	movs	r0, r6
 800b088:	4bc9      	ldr	r3, [pc, #804]	; (800b3b0 <_dtoa_r+0x730>)
 800b08a:	0039      	movs	r1, r7
 800b08c:	f7f6 ff40 	bl	8001f10 <__aeabi_dmul>
 800b090:	9008      	str	r0, [sp, #32]
 800b092:	9109      	str	r1, [sp, #36]	; 0x24
 800b094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b096:	3401      	adds	r4, #1
 800b098:	0020      	movs	r0, r4
 800b09a:	9e08      	ldr	r6, [sp, #32]
 800b09c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b09e:	9312      	str	r3, [sp, #72]	; 0x48
 800b0a0:	f7f7 fdce 	bl	8002c40 <__aeabi_i2d>
 800b0a4:	0032      	movs	r2, r6
 800b0a6:	003b      	movs	r3, r7
 800b0a8:	f7f6 ff32 	bl	8001f10 <__aeabi_dmul>
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4bc1      	ldr	r3, [pc, #772]	; (800b3b4 <_dtoa_r+0x734>)
 800b0b0:	f7f5 ffd4 	bl	800105c <__aeabi_dadd>
 800b0b4:	4ac0      	ldr	r2, [pc, #768]	; (800b3b8 <_dtoa_r+0x738>)
 800b0b6:	9014      	str	r0, [sp, #80]	; 0x50
 800b0b8:	9115      	str	r1, [sp, #84]	; 0x54
 800b0ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b0be:	4694      	mov	ip, r2
 800b0c0:	9308      	str	r3, [sp, #32]
 800b0c2:	9409      	str	r4, [sp, #36]	; 0x24
 800b0c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0c6:	4463      	add	r3, ip
 800b0c8:	9318      	str	r3, [sp, #96]	; 0x60
 800b0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b0cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d15e      	bne.n	800b190 <_dtoa_r+0x510>
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	4bb9      	ldr	r3, [pc, #740]	; (800b3bc <_dtoa_r+0x73c>)
 800b0d6:	0030      	movs	r0, r6
 800b0d8:	0039      	movs	r1, r7
 800b0da:	f7f7 f9db 	bl	8002494 <__aeabi_dsub>
 800b0de:	9a08      	ldr	r2, [sp, #32]
 800b0e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b0e2:	0004      	movs	r4, r0
 800b0e4:	000d      	movs	r5, r1
 800b0e6:	f7f5 f9cb 	bl	8000480 <__aeabi_dcmpgt>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d000      	beq.n	800b0f0 <_dtoa_r+0x470>
 800b0ee:	e2b3      	b.n	800b658 <_dtoa_r+0x9d8>
 800b0f0:	48b3      	ldr	r0, [pc, #716]	; (800b3c0 <_dtoa_r+0x740>)
 800b0f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0f4:	4684      	mov	ip, r0
 800b0f6:	4461      	add	r1, ip
 800b0f8:	000b      	movs	r3, r1
 800b0fa:	0020      	movs	r0, r4
 800b0fc:	0029      	movs	r1, r5
 800b0fe:	9a08      	ldr	r2, [sp, #32]
 800b100:	f7f5 f9aa 	bl	8000458 <__aeabi_dcmplt>
 800b104:	2800      	cmp	r0, #0
 800b106:	d000      	beq.n	800b10a <_dtoa_r+0x48a>
 800b108:	e2a3      	b.n	800b652 <_dtoa_r+0x9d2>
 800b10a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b10c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b10e:	9308      	str	r3, [sp, #32]
 800b110:	9409      	str	r4, [sp, #36]	; 0x24
 800b112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b114:	2b00      	cmp	r3, #0
 800b116:	da00      	bge.n	800b11a <_dtoa_r+0x49a>
 800b118:	e179      	b.n	800b40e <_dtoa_r+0x78e>
 800b11a:	9a03      	ldr	r2, [sp, #12]
 800b11c:	2a0e      	cmp	r2, #14
 800b11e:	dd00      	ble.n	800b122 <_dtoa_r+0x4a2>
 800b120:	e175      	b.n	800b40e <_dtoa_r+0x78e>
 800b122:	4ba0      	ldr	r3, [pc, #640]	; (800b3a4 <_dtoa_r+0x724>)
 800b124:	00d2      	lsls	r2, r2, #3
 800b126:	189b      	adds	r3, r3, r2
 800b128:	681e      	ldr	r6, [r3, #0]
 800b12a:	685f      	ldr	r7, [r3, #4]
 800b12c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	db00      	blt.n	800b134 <_dtoa_r+0x4b4>
 800b132:	e0e5      	b.n	800b300 <_dtoa_r+0x680>
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dd00      	ble.n	800b13c <_dtoa_r+0x4bc>
 800b13a:	e0e1      	b.n	800b300 <_dtoa_r+0x680>
 800b13c:	d000      	beq.n	800b140 <_dtoa_r+0x4c0>
 800b13e:	e288      	b.n	800b652 <_dtoa_r+0x9d2>
 800b140:	2200      	movs	r2, #0
 800b142:	0030      	movs	r0, r6
 800b144:	0039      	movs	r1, r7
 800b146:	4b9d      	ldr	r3, [pc, #628]	; (800b3bc <_dtoa_r+0x73c>)
 800b148:	f7f6 fee2 	bl	8001f10 <__aeabi_dmul>
 800b14c:	9a08      	ldr	r2, [sp, #32]
 800b14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b150:	f7f5 f9a0 	bl	8000494 <__aeabi_dcmpge>
 800b154:	9e07      	ldr	r6, [sp, #28]
 800b156:	0037      	movs	r7, r6
 800b158:	2800      	cmp	r0, #0
 800b15a:	d000      	beq.n	800b15e <_dtoa_r+0x4de>
 800b15c:	e25f      	b.n	800b61e <_dtoa_r+0x99e>
 800b15e:	9b06      	ldr	r3, [sp, #24]
 800b160:	9a06      	ldr	r2, [sp, #24]
 800b162:	3301      	adds	r3, #1
 800b164:	9308      	str	r3, [sp, #32]
 800b166:	2331      	movs	r3, #49	; 0x31
 800b168:	7013      	strb	r3, [r2, #0]
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	3301      	adds	r3, #1
 800b16e:	9303      	str	r3, [sp, #12]
 800b170:	e25a      	b.n	800b628 <_dtoa_r+0x9a8>
 800b172:	423d      	tst	r5, r7
 800b174:	d005      	beq.n	800b182 <_dtoa_r+0x502>
 800b176:	6832      	ldr	r2, [r6, #0]
 800b178:	6873      	ldr	r3, [r6, #4]
 800b17a:	f7f6 fec9 	bl	8001f10 <__aeabi_dmul>
 800b17e:	003b      	movs	r3, r7
 800b180:	3401      	adds	r4, #1
 800b182:	106d      	asrs	r5, r5, #1
 800b184:	3608      	adds	r6, #8
 800b186:	e75f      	b.n	800b048 <_dtoa_r+0x3c8>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	930e      	str	r3, [sp, #56]	; 0x38
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	e783      	b.n	800b098 <_dtoa_r+0x418>
 800b190:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b192:	4b84      	ldr	r3, [pc, #528]	; (800b3a4 <_dtoa_r+0x724>)
 800b194:	3a01      	subs	r2, #1
 800b196:	00d2      	lsls	r2, r2, #3
 800b198:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b19a:	189b      	adds	r3, r3, r2
 800b19c:	9c08      	ldr	r4, [sp, #32]
 800b19e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	2900      	cmp	r1, #0
 800b1a6:	d051      	beq.n	800b24c <_dtoa_r+0x5cc>
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	4986      	ldr	r1, [pc, #536]	; (800b3c4 <_dtoa_r+0x744>)
 800b1ac:	f7f6 fab6 	bl	800171c <__aeabi_ddiv>
 800b1b0:	0022      	movs	r2, r4
 800b1b2:	002b      	movs	r3, r5
 800b1b4:	f7f7 f96e 	bl	8002494 <__aeabi_dsub>
 800b1b8:	9a06      	ldr	r2, [sp, #24]
 800b1ba:	0004      	movs	r4, r0
 800b1bc:	4694      	mov	ip, r2
 800b1be:	000d      	movs	r5, r1
 800b1c0:	9b06      	ldr	r3, [sp, #24]
 800b1c2:	9314      	str	r3, [sp, #80]	; 0x50
 800b1c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1c6:	4463      	add	r3, ip
 800b1c8:	9318      	str	r3, [sp, #96]	; 0x60
 800b1ca:	0039      	movs	r1, r7
 800b1cc:	0030      	movs	r0, r6
 800b1ce:	f7f7 fd01 	bl	8002bd4 <__aeabi_d2iz>
 800b1d2:	9012      	str	r0, [sp, #72]	; 0x48
 800b1d4:	f7f7 fd34 	bl	8002c40 <__aeabi_i2d>
 800b1d8:	0002      	movs	r2, r0
 800b1da:	000b      	movs	r3, r1
 800b1dc:	0030      	movs	r0, r6
 800b1de:	0039      	movs	r1, r7
 800b1e0:	f7f7 f958 	bl	8002494 <__aeabi_dsub>
 800b1e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	9308      	str	r3, [sp, #32]
 800b1ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1ee:	0006      	movs	r6, r0
 800b1f0:	3330      	adds	r3, #48	; 0x30
 800b1f2:	7013      	strb	r3, [r2, #0]
 800b1f4:	0022      	movs	r2, r4
 800b1f6:	002b      	movs	r3, r5
 800b1f8:	000f      	movs	r7, r1
 800b1fa:	f7f5 f92d 	bl	8000458 <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d174      	bne.n	800b2ec <_dtoa_r+0x66c>
 800b202:	0032      	movs	r2, r6
 800b204:	003b      	movs	r3, r7
 800b206:	2000      	movs	r0, #0
 800b208:	4968      	ldr	r1, [pc, #416]	; (800b3ac <_dtoa_r+0x72c>)
 800b20a:	f7f7 f943 	bl	8002494 <__aeabi_dsub>
 800b20e:	0022      	movs	r2, r4
 800b210:	002b      	movs	r3, r5
 800b212:	f7f5 f921 	bl	8000458 <__aeabi_dcmplt>
 800b216:	2800      	cmp	r0, #0
 800b218:	d000      	beq.n	800b21c <_dtoa_r+0x59c>
 800b21a:	e0d7      	b.n	800b3cc <_dtoa_r+0x74c>
 800b21c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b21e:	9a08      	ldr	r2, [sp, #32]
 800b220:	4293      	cmp	r3, r2
 800b222:	d100      	bne.n	800b226 <_dtoa_r+0x5a6>
 800b224:	e771      	b.n	800b10a <_dtoa_r+0x48a>
 800b226:	2200      	movs	r2, #0
 800b228:	0020      	movs	r0, r4
 800b22a:	0029      	movs	r1, r5
 800b22c:	4b60      	ldr	r3, [pc, #384]	; (800b3b0 <_dtoa_r+0x730>)
 800b22e:	f7f6 fe6f 	bl	8001f10 <__aeabi_dmul>
 800b232:	4b5f      	ldr	r3, [pc, #380]	; (800b3b0 <_dtoa_r+0x730>)
 800b234:	0004      	movs	r4, r0
 800b236:	000d      	movs	r5, r1
 800b238:	0030      	movs	r0, r6
 800b23a:	0039      	movs	r1, r7
 800b23c:	2200      	movs	r2, #0
 800b23e:	f7f6 fe67 	bl	8001f10 <__aeabi_dmul>
 800b242:	9b08      	ldr	r3, [sp, #32]
 800b244:	0006      	movs	r6, r0
 800b246:	000f      	movs	r7, r1
 800b248:	9314      	str	r3, [sp, #80]	; 0x50
 800b24a:	e7be      	b.n	800b1ca <_dtoa_r+0x54a>
 800b24c:	0020      	movs	r0, r4
 800b24e:	0029      	movs	r1, r5
 800b250:	f7f6 fe5e 	bl	8001f10 <__aeabi_dmul>
 800b254:	9a06      	ldr	r2, [sp, #24]
 800b256:	9b06      	ldr	r3, [sp, #24]
 800b258:	4694      	mov	ip, r2
 800b25a:	9308      	str	r3, [sp, #32]
 800b25c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b25e:	9014      	str	r0, [sp, #80]	; 0x50
 800b260:	9115      	str	r1, [sp, #84]	; 0x54
 800b262:	4463      	add	r3, ip
 800b264:	9319      	str	r3, [sp, #100]	; 0x64
 800b266:	0030      	movs	r0, r6
 800b268:	0039      	movs	r1, r7
 800b26a:	f7f7 fcb3 	bl	8002bd4 <__aeabi_d2iz>
 800b26e:	9018      	str	r0, [sp, #96]	; 0x60
 800b270:	f7f7 fce6 	bl	8002c40 <__aeabi_i2d>
 800b274:	0002      	movs	r2, r0
 800b276:	000b      	movs	r3, r1
 800b278:	0030      	movs	r0, r6
 800b27a:	0039      	movs	r1, r7
 800b27c:	f7f7 f90a 	bl	8002494 <__aeabi_dsub>
 800b280:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b282:	9b08      	ldr	r3, [sp, #32]
 800b284:	3630      	adds	r6, #48	; 0x30
 800b286:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b288:	701e      	strb	r6, [r3, #0]
 800b28a:	3301      	adds	r3, #1
 800b28c:	0004      	movs	r4, r0
 800b28e:	000d      	movs	r5, r1
 800b290:	9308      	str	r3, [sp, #32]
 800b292:	4293      	cmp	r3, r2
 800b294:	d12d      	bne.n	800b2f2 <_dtoa_r+0x672>
 800b296:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b298:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b29a:	9a06      	ldr	r2, [sp, #24]
 800b29c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b29e:	4694      	mov	ip, r2
 800b2a0:	4463      	add	r3, ip
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	9308      	str	r3, [sp, #32]
 800b2a6:	4b47      	ldr	r3, [pc, #284]	; (800b3c4 <_dtoa_r+0x744>)
 800b2a8:	f7f5 fed8 	bl	800105c <__aeabi_dadd>
 800b2ac:	0002      	movs	r2, r0
 800b2ae:	000b      	movs	r3, r1
 800b2b0:	0020      	movs	r0, r4
 800b2b2:	0029      	movs	r1, r5
 800b2b4:	f7f5 f8e4 	bl	8000480 <__aeabi_dcmpgt>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d000      	beq.n	800b2be <_dtoa_r+0x63e>
 800b2bc:	e086      	b.n	800b3cc <_dtoa_r+0x74c>
 800b2be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	493f      	ldr	r1, [pc, #252]	; (800b3c4 <_dtoa_r+0x744>)
 800b2c6:	f7f7 f8e5 	bl	8002494 <__aeabi_dsub>
 800b2ca:	0002      	movs	r2, r0
 800b2cc:	000b      	movs	r3, r1
 800b2ce:	0020      	movs	r0, r4
 800b2d0:	0029      	movs	r1, r5
 800b2d2:	f7f5 f8c1 	bl	8000458 <__aeabi_dcmplt>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d100      	bne.n	800b2dc <_dtoa_r+0x65c>
 800b2da:	e716      	b.n	800b10a <_dtoa_r+0x48a>
 800b2dc:	9b08      	ldr	r3, [sp, #32]
 800b2de:	001a      	movs	r2, r3
 800b2e0:	3a01      	subs	r2, #1
 800b2e2:	9208      	str	r2, [sp, #32]
 800b2e4:	7812      	ldrb	r2, [r2, #0]
 800b2e6:	2a30      	cmp	r2, #48	; 0x30
 800b2e8:	d0f8      	beq.n	800b2dc <_dtoa_r+0x65c>
 800b2ea:	9308      	str	r3, [sp, #32]
 800b2ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ee:	9303      	str	r3, [sp, #12]
 800b2f0:	e046      	b.n	800b380 <_dtoa_r+0x700>
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4b2e      	ldr	r3, [pc, #184]	; (800b3b0 <_dtoa_r+0x730>)
 800b2f6:	f7f6 fe0b 	bl	8001f10 <__aeabi_dmul>
 800b2fa:	0006      	movs	r6, r0
 800b2fc:	000f      	movs	r7, r1
 800b2fe:	e7b2      	b.n	800b266 <_dtoa_r+0x5e6>
 800b300:	9b06      	ldr	r3, [sp, #24]
 800b302:	9a06      	ldr	r2, [sp, #24]
 800b304:	930a      	str	r3, [sp, #40]	; 0x28
 800b306:	9b07      	ldr	r3, [sp, #28]
 800b308:	9c08      	ldr	r4, [sp, #32]
 800b30a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b30c:	3b01      	subs	r3, #1
 800b30e:	189b      	adds	r3, r3, r2
 800b310:	930b      	str	r3, [sp, #44]	; 0x2c
 800b312:	0032      	movs	r2, r6
 800b314:	003b      	movs	r3, r7
 800b316:	0020      	movs	r0, r4
 800b318:	0029      	movs	r1, r5
 800b31a:	f7f6 f9ff 	bl	800171c <__aeabi_ddiv>
 800b31e:	f7f7 fc59 	bl	8002bd4 <__aeabi_d2iz>
 800b322:	9007      	str	r0, [sp, #28]
 800b324:	f7f7 fc8c 	bl	8002c40 <__aeabi_i2d>
 800b328:	0032      	movs	r2, r6
 800b32a:	003b      	movs	r3, r7
 800b32c:	f7f6 fdf0 	bl	8001f10 <__aeabi_dmul>
 800b330:	0002      	movs	r2, r0
 800b332:	000b      	movs	r3, r1
 800b334:	0020      	movs	r0, r4
 800b336:	0029      	movs	r1, r5
 800b338:	f7f7 f8ac 	bl	8002494 <__aeabi_dsub>
 800b33c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33e:	001a      	movs	r2, r3
 800b340:	3201      	adds	r2, #1
 800b342:	920a      	str	r2, [sp, #40]	; 0x28
 800b344:	9208      	str	r2, [sp, #32]
 800b346:	9a07      	ldr	r2, [sp, #28]
 800b348:	3230      	adds	r2, #48	; 0x30
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b34e:	429a      	cmp	r2, r3
 800b350:	d14f      	bne.n	800b3f2 <_dtoa_r+0x772>
 800b352:	0002      	movs	r2, r0
 800b354:	000b      	movs	r3, r1
 800b356:	f7f5 fe81 	bl	800105c <__aeabi_dadd>
 800b35a:	0032      	movs	r2, r6
 800b35c:	003b      	movs	r3, r7
 800b35e:	0004      	movs	r4, r0
 800b360:	000d      	movs	r5, r1
 800b362:	f7f5 f88d 	bl	8000480 <__aeabi_dcmpgt>
 800b366:	2800      	cmp	r0, #0
 800b368:	d12e      	bne.n	800b3c8 <_dtoa_r+0x748>
 800b36a:	0032      	movs	r2, r6
 800b36c:	003b      	movs	r3, r7
 800b36e:	0020      	movs	r0, r4
 800b370:	0029      	movs	r1, r5
 800b372:	f7f5 f86b 	bl	800044c <__aeabi_dcmpeq>
 800b376:	2800      	cmp	r0, #0
 800b378:	d002      	beq.n	800b380 <_dtoa_r+0x700>
 800b37a:	9b07      	ldr	r3, [sp, #28]
 800b37c:	07de      	lsls	r6, r3, #31
 800b37e:	d423      	bmi.n	800b3c8 <_dtoa_r+0x748>
 800b380:	9905      	ldr	r1, [sp, #20]
 800b382:	9804      	ldr	r0, [sp, #16]
 800b384:	f000 ff44 	bl	800c210 <_Bfree>
 800b388:	2300      	movs	r3, #0
 800b38a:	9a08      	ldr	r2, [sp, #32]
 800b38c:	7013      	strb	r3, [r2, #0]
 800b38e:	9b03      	ldr	r3, [sp, #12]
 800b390:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b392:	3301      	adds	r3, #1
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d100      	bne.n	800b39e <_dtoa_r+0x71e>
 800b39c:	e4ba      	b.n	800ad14 <_dtoa_r+0x94>
 800b39e:	9a08      	ldr	r2, [sp, #32]
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	e4b7      	b.n	800ad14 <_dtoa_r+0x94>
 800b3a4:	0800da00 	.word	0x0800da00
 800b3a8:	0800d9d8 	.word	0x0800d9d8
 800b3ac:	3ff00000 	.word	0x3ff00000
 800b3b0:	40240000 	.word	0x40240000
 800b3b4:	401c0000 	.word	0x401c0000
 800b3b8:	fcc00000 	.word	0xfcc00000
 800b3bc:	40140000 	.word	0x40140000
 800b3c0:	7cc00000 	.word	0x7cc00000
 800b3c4:	3fe00000 	.word	0x3fe00000
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	930e      	str	r3, [sp, #56]	; 0x38
 800b3cc:	9b08      	ldr	r3, [sp, #32]
 800b3ce:	9308      	str	r3, [sp, #32]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	781a      	ldrb	r2, [r3, #0]
 800b3d4:	2a39      	cmp	r2, #57	; 0x39
 800b3d6:	d108      	bne.n	800b3ea <_dtoa_r+0x76a>
 800b3d8:	9a06      	ldr	r2, [sp, #24]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d1f7      	bne.n	800b3ce <_dtoa_r+0x74e>
 800b3de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3e0:	9906      	ldr	r1, [sp, #24]
 800b3e2:	3201      	adds	r2, #1
 800b3e4:	920e      	str	r2, [sp, #56]	; 0x38
 800b3e6:	2230      	movs	r2, #48	; 0x30
 800b3e8:	700a      	strb	r2, [r1, #0]
 800b3ea:	781a      	ldrb	r2, [r3, #0]
 800b3ec:	3201      	adds	r2, #1
 800b3ee:	701a      	strb	r2, [r3, #0]
 800b3f0:	e77c      	b.n	800b2ec <_dtoa_r+0x66c>
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	4ba9      	ldr	r3, [pc, #676]	; (800b69c <_dtoa_r+0xa1c>)
 800b3f6:	f7f6 fd8b 	bl	8001f10 <__aeabi_dmul>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	0004      	movs	r4, r0
 800b400:	000d      	movs	r5, r1
 800b402:	f7f5 f823 	bl	800044c <__aeabi_dcmpeq>
 800b406:	2800      	cmp	r0, #0
 800b408:	d100      	bne.n	800b40c <_dtoa_r+0x78c>
 800b40a:	e782      	b.n	800b312 <_dtoa_r+0x692>
 800b40c:	e7b8      	b.n	800b380 <_dtoa_r+0x700>
 800b40e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b410:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b412:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b414:	2f00      	cmp	r7, #0
 800b416:	d012      	beq.n	800b43e <_dtoa_r+0x7be>
 800b418:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b41a:	2a01      	cmp	r2, #1
 800b41c:	dc6e      	bgt.n	800b4fc <_dtoa_r+0x87c>
 800b41e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b420:	2a00      	cmp	r2, #0
 800b422:	d065      	beq.n	800b4f0 <_dtoa_r+0x870>
 800b424:	4a9e      	ldr	r2, [pc, #632]	; (800b6a0 <_dtoa_r+0xa20>)
 800b426:	189b      	adds	r3, r3, r2
 800b428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42a:	2101      	movs	r1, #1
 800b42c:	18d2      	adds	r2, r2, r3
 800b42e:	920a      	str	r2, [sp, #40]	; 0x28
 800b430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b432:	9804      	ldr	r0, [sp, #16]
 800b434:	18d3      	adds	r3, r2, r3
 800b436:	930c      	str	r3, [sp, #48]	; 0x30
 800b438:	f000 ffe6 	bl	800c408 <__i2b>
 800b43c:	0007      	movs	r7, r0
 800b43e:	2c00      	cmp	r4, #0
 800b440:	d00e      	beq.n	800b460 <_dtoa_r+0x7e0>
 800b442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b444:	2b00      	cmp	r3, #0
 800b446:	dd0b      	ble.n	800b460 <_dtoa_r+0x7e0>
 800b448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b44a:	0023      	movs	r3, r4
 800b44c:	4294      	cmp	r4, r2
 800b44e:	dd00      	ble.n	800b452 <_dtoa_r+0x7d2>
 800b450:	0013      	movs	r3, r2
 800b452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b454:	1ae4      	subs	r4, r4, r3
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	920a      	str	r2, [sp, #40]	; 0x28
 800b45a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	930c      	str	r3, [sp, #48]	; 0x30
 800b460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b462:	2b00      	cmp	r3, #0
 800b464:	d01e      	beq.n	800b4a4 <_dtoa_r+0x824>
 800b466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d05c      	beq.n	800b526 <_dtoa_r+0x8a6>
 800b46c:	2d00      	cmp	r5, #0
 800b46e:	dd10      	ble.n	800b492 <_dtoa_r+0x812>
 800b470:	0039      	movs	r1, r7
 800b472:	002a      	movs	r2, r5
 800b474:	9804      	ldr	r0, [sp, #16]
 800b476:	f001 f88f 	bl	800c598 <__pow5mult>
 800b47a:	9a05      	ldr	r2, [sp, #20]
 800b47c:	0001      	movs	r1, r0
 800b47e:	0007      	movs	r7, r0
 800b480:	9804      	ldr	r0, [sp, #16]
 800b482:	f000 ffd9 	bl	800c438 <__multiply>
 800b486:	0006      	movs	r6, r0
 800b488:	9905      	ldr	r1, [sp, #20]
 800b48a:	9804      	ldr	r0, [sp, #16]
 800b48c:	f000 fec0 	bl	800c210 <_Bfree>
 800b490:	9605      	str	r6, [sp, #20]
 800b492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b494:	1b5a      	subs	r2, r3, r5
 800b496:	42ab      	cmp	r3, r5
 800b498:	d004      	beq.n	800b4a4 <_dtoa_r+0x824>
 800b49a:	9905      	ldr	r1, [sp, #20]
 800b49c:	9804      	ldr	r0, [sp, #16]
 800b49e:	f001 f87b 	bl	800c598 <__pow5mult>
 800b4a2:	9005      	str	r0, [sp, #20]
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	9804      	ldr	r0, [sp, #16]
 800b4a8:	f000 ffae 	bl	800c408 <__i2b>
 800b4ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4ae:	0006      	movs	r6, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dd3a      	ble.n	800b52a <_dtoa_r+0x8aa>
 800b4b4:	001a      	movs	r2, r3
 800b4b6:	0001      	movs	r1, r0
 800b4b8:	9804      	ldr	r0, [sp, #16]
 800b4ba:	f001 f86d 	bl	800c598 <__pow5mult>
 800b4be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4c0:	0006      	movs	r6, r0
 800b4c2:	2500      	movs	r5, #0
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	dc38      	bgt.n	800b53a <_dtoa_r+0x8ba>
 800b4c8:	2500      	movs	r5, #0
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	42ab      	cmp	r3, r5
 800b4ce:	d130      	bne.n	800b532 <_dtoa_r+0x8b2>
 800b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d2:	031b      	lsls	r3, r3, #12
 800b4d4:	42ab      	cmp	r3, r5
 800b4d6:	d12c      	bne.n	800b532 <_dtoa_r+0x8b2>
 800b4d8:	4b72      	ldr	r3, [pc, #456]	; (800b6a4 <_dtoa_r+0xa24>)
 800b4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4dc:	4213      	tst	r3, r2
 800b4de:	d028      	beq.n	800b532 <_dtoa_r+0x8b2>
 800b4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e2:	3501      	adds	r5, #1
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	930c      	str	r3, [sp, #48]	; 0x30
 800b4ee:	e020      	b.n	800b532 <_dtoa_r+0x8b2>
 800b4f0:	2336      	movs	r3, #54	; 0x36
 800b4f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b4f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b4f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	e795      	b.n	800b428 <_dtoa_r+0x7a8>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	1e5d      	subs	r5, r3, #1
 800b500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b502:	42ab      	cmp	r3, r5
 800b504:	db07      	blt.n	800b516 <_dtoa_r+0x896>
 800b506:	1b5d      	subs	r5, r3, r5
 800b508:	9b07      	ldr	r3, [sp, #28]
 800b50a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	da8b      	bge.n	800b428 <_dtoa_r+0x7a8>
 800b510:	1ae4      	subs	r4, r4, r3
 800b512:	2300      	movs	r3, #0
 800b514:	e788      	b.n	800b428 <_dtoa_r+0x7a8>
 800b516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b51a:	1aeb      	subs	r3, r5, r3
 800b51c:	18d3      	adds	r3, r2, r3
 800b51e:	950d      	str	r5, [sp, #52]	; 0x34
 800b520:	9313      	str	r3, [sp, #76]	; 0x4c
 800b522:	2500      	movs	r5, #0
 800b524:	e7f0      	b.n	800b508 <_dtoa_r+0x888>
 800b526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b528:	e7b7      	b.n	800b49a <_dtoa_r+0x81a>
 800b52a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b52c:	2500      	movs	r5, #0
 800b52e:	2b01      	cmp	r3, #1
 800b530:	ddca      	ble.n	800b4c8 <_dtoa_r+0x848>
 800b532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b534:	2001      	movs	r0, #1
 800b536:	2b00      	cmp	r3, #0
 800b538:	d008      	beq.n	800b54c <_dtoa_r+0x8cc>
 800b53a:	6933      	ldr	r3, [r6, #16]
 800b53c:	3303      	adds	r3, #3
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	18f3      	adds	r3, r6, r3
 800b542:	6858      	ldr	r0, [r3, #4]
 800b544:	f000 ff18 	bl	800c378 <__hi0bits>
 800b548:	2320      	movs	r3, #32
 800b54a:	1a18      	subs	r0, r3, r0
 800b54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b54e:	1818      	adds	r0, r3, r0
 800b550:	0002      	movs	r2, r0
 800b552:	231f      	movs	r3, #31
 800b554:	401a      	ands	r2, r3
 800b556:	4218      	tst	r0, r3
 800b558:	d047      	beq.n	800b5ea <_dtoa_r+0x96a>
 800b55a:	3301      	adds	r3, #1
 800b55c:	1a9b      	subs	r3, r3, r2
 800b55e:	2b04      	cmp	r3, #4
 800b560:	dd3f      	ble.n	800b5e2 <_dtoa_r+0x962>
 800b562:	231c      	movs	r3, #28
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b568:	18e4      	adds	r4, r4, r3
 800b56a:	18d2      	adds	r2, r2, r3
 800b56c:	920a      	str	r2, [sp, #40]	; 0x28
 800b56e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b570:	18d3      	adds	r3, r2, r3
 800b572:	930c      	str	r3, [sp, #48]	; 0x30
 800b574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	dd05      	ble.n	800b586 <_dtoa_r+0x906>
 800b57a:	001a      	movs	r2, r3
 800b57c:	9905      	ldr	r1, [sp, #20]
 800b57e:	9804      	ldr	r0, [sp, #16]
 800b580:	f001 f866 	bl	800c650 <__lshift>
 800b584:	9005      	str	r0, [sp, #20]
 800b586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dd05      	ble.n	800b598 <_dtoa_r+0x918>
 800b58c:	0031      	movs	r1, r6
 800b58e:	001a      	movs	r2, r3
 800b590:	9804      	ldr	r0, [sp, #16]
 800b592:	f001 f85d 	bl	800c650 <__lshift>
 800b596:	0006      	movs	r6, r0
 800b598:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d027      	beq.n	800b5ee <_dtoa_r+0x96e>
 800b59e:	0031      	movs	r1, r6
 800b5a0:	9805      	ldr	r0, [sp, #20]
 800b5a2:	f001 f8c3 	bl	800c72c <__mcmp>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	da21      	bge.n	800b5ee <_dtoa_r+0x96e>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	220a      	movs	r2, #10
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	9303      	str	r3, [sp, #12]
 800b5b2:	9905      	ldr	r1, [sp, #20]
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	9804      	ldr	r0, [sp, #16]
 800b5b8:	f000 fe4e 	bl	800c258 <__multadd>
 800b5bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5be:	9005      	str	r0, [sp, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d100      	bne.n	800b5c6 <_dtoa_r+0x946>
 800b5c4:	e15d      	b.n	800b882 <_dtoa_r+0xc02>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	0039      	movs	r1, r7
 800b5ca:	220a      	movs	r2, #10
 800b5cc:	9804      	ldr	r0, [sp, #16]
 800b5ce:	f000 fe43 	bl	800c258 <__multadd>
 800b5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d4:	0007      	movs	r7, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dc49      	bgt.n	800b66e <_dtoa_r+0x9ee>
 800b5da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	dc0e      	bgt.n	800b5fe <_dtoa_r+0x97e>
 800b5e0:	e045      	b.n	800b66e <_dtoa_r+0x9ee>
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	d0c6      	beq.n	800b574 <_dtoa_r+0x8f4>
 800b5e6:	331c      	adds	r3, #28
 800b5e8:	e7bd      	b.n	800b566 <_dtoa_r+0x8e6>
 800b5ea:	0013      	movs	r3, r2
 800b5ec:	e7fb      	b.n	800b5e6 <_dtoa_r+0x966>
 800b5ee:	9b07      	ldr	r3, [sp, #28]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dc36      	bgt.n	800b662 <_dtoa_r+0x9e2>
 800b5f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	dd33      	ble.n	800b662 <_dtoa_r+0x9e2>
 800b5fa:	9b07      	ldr	r3, [sp, #28]
 800b5fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10c      	bne.n	800b61e <_dtoa_r+0x99e>
 800b604:	0031      	movs	r1, r6
 800b606:	2205      	movs	r2, #5
 800b608:	9804      	ldr	r0, [sp, #16]
 800b60a:	f000 fe25 	bl	800c258 <__multadd>
 800b60e:	0006      	movs	r6, r0
 800b610:	0001      	movs	r1, r0
 800b612:	9805      	ldr	r0, [sp, #20]
 800b614:	f001 f88a 	bl	800c72c <__mcmp>
 800b618:	2800      	cmp	r0, #0
 800b61a:	dd00      	ble.n	800b61e <_dtoa_r+0x99e>
 800b61c:	e59f      	b.n	800b15e <_dtoa_r+0x4de>
 800b61e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b620:	43db      	mvns	r3, r3
 800b622:	9303      	str	r3, [sp, #12]
 800b624:	9b06      	ldr	r3, [sp, #24]
 800b626:	9308      	str	r3, [sp, #32]
 800b628:	2500      	movs	r5, #0
 800b62a:	0031      	movs	r1, r6
 800b62c:	9804      	ldr	r0, [sp, #16]
 800b62e:	f000 fdef 	bl	800c210 <_Bfree>
 800b632:	2f00      	cmp	r7, #0
 800b634:	d100      	bne.n	800b638 <_dtoa_r+0x9b8>
 800b636:	e6a3      	b.n	800b380 <_dtoa_r+0x700>
 800b638:	2d00      	cmp	r5, #0
 800b63a:	d005      	beq.n	800b648 <_dtoa_r+0x9c8>
 800b63c:	42bd      	cmp	r5, r7
 800b63e:	d003      	beq.n	800b648 <_dtoa_r+0x9c8>
 800b640:	0029      	movs	r1, r5
 800b642:	9804      	ldr	r0, [sp, #16]
 800b644:	f000 fde4 	bl	800c210 <_Bfree>
 800b648:	0039      	movs	r1, r7
 800b64a:	9804      	ldr	r0, [sp, #16]
 800b64c:	f000 fde0 	bl	800c210 <_Bfree>
 800b650:	e696      	b.n	800b380 <_dtoa_r+0x700>
 800b652:	2600      	movs	r6, #0
 800b654:	0037      	movs	r7, r6
 800b656:	e7e2      	b.n	800b61e <_dtoa_r+0x99e>
 800b658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b65a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b65c:	9303      	str	r3, [sp, #12]
 800b65e:	0037      	movs	r7, r6
 800b660:	e57d      	b.n	800b15e <_dtoa_r+0x4de>
 800b662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d100      	bne.n	800b66a <_dtoa_r+0x9ea>
 800b668:	e0c3      	b.n	800b7f2 <_dtoa_r+0xb72>
 800b66a:	9b07      	ldr	r3, [sp, #28]
 800b66c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b66e:	2c00      	cmp	r4, #0
 800b670:	dd05      	ble.n	800b67e <_dtoa_r+0x9fe>
 800b672:	0039      	movs	r1, r7
 800b674:	0022      	movs	r2, r4
 800b676:	9804      	ldr	r0, [sp, #16]
 800b678:	f000 ffea 	bl	800c650 <__lshift>
 800b67c:	0007      	movs	r7, r0
 800b67e:	0038      	movs	r0, r7
 800b680:	2d00      	cmp	r5, #0
 800b682:	d024      	beq.n	800b6ce <_dtoa_r+0xa4e>
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	9804      	ldr	r0, [sp, #16]
 800b688:	f000 fd7e 	bl	800c188 <_Balloc>
 800b68c:	1e04      	subs	r4, r0, #0
 800b68e:	d111      	bne.n	800b6b4 <_dtoa_r+0xa34>
 800b690:	0022      	movs	r2, r4
 800b692:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <_dtoa_r+0xa28>)
 800b694:	4805      	ldr	r0, [pc, #20]	; (800b6ac <_dtoa_r+0xa2c>)
 800b696:	4906      	ldr	r1, [pc, #24]	; (800b6b0 <_dtoa_r+0xa30>)
 800b698:	f7ff fb07 	bl	800acaa <_dtoa_r+0x2a>
 800b69c:	40240000 	.word	0x40240000
 800b6a0:	00000433 	.word	0x00000433
 800b6a4:	7ff00000 	.word	0x7ff00000
 800b6a8:	0800d90e 	.word	0x0800d90e
 800b6ac:	0800d8b6 	.word	0x0800d8b6
 800b6b0:	000002ef 	.word	0x000002ef
 800b6b4:	0039      	movs	r1, r7
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	310c      	adds	r1, #12
 800b6ba:	3202      	adds	r2, #2
 800b6bc:	0092      	lsls	r2, r2, #2
 800b6be:	300c      	adds	r0, #12
 800b6c0:	f7ff fa3a 	bl	800ab38 <memcpy>
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	0021      	movs	r1, r4
 800b6c8:	9804      	ldr	r0, [sp, #16]
 800b6ca:	f000 ffc1 	bl	800c650 <__lshift>
 800b6ce:	9b06      	ldr	r3, [sp, #24]
 800b6d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6d2:	9307      	str	r3, [sp, #28]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	189b      	adds	r3, r3, r2
 800b6d8:	2201      	movs	r2, #1
 800b6da:	003d      	movs	r5, r7
 800b6dc:	0007      	movs	r7, r0
 800b6de:	930e      	str	r3, [sp, #56]	; 0x38
 800b6e0:	9b08      	ldr	r3, [sp, #32]
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	930d      	str	r3, [sp, #52]	; 0x34
 800b6e6:	0031      	movs	r1, r6
 800b6e8:	9805      	ldr	r0, [sp, #20]
 800b6ea:	f7ff fa39 	bl	800ab60 <quorem>
 800b6ee:	0029      	movs	r1, r5
 800b6f0:	0004      	movs	r4, r0
 800b6f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b6f4:	9805      	ldr	r0, [sp, #20]
 800b6f6:	f001 f819 	bl	800c72c <__mcmp>
 800b6fa:	003a      	movs	r2, r7
 800b6fc:	900c      	str	r0, [sp, #48]	; 0x30
 800b6fe:	0031      	movs	r1, r6
 800b700:	9804      	ldr	r0, [sp, #16]
 800b702:	f001 f82f 	bl	800c764 <__mdiff>
 800b706:	2201      	movs	r2, #1
 800b708:	68c3      	ldr	r3, [r0, #12]
 800b70a:	3430      	adds	r4, #48	; 0x30
 800b70c:	9008      	str	r0, [sp, #32]
 800b70e:	920a      	str	r2, [sp, #40]	; 0x28
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <_dtoa_r+0xa9e>
 800b714:	0001      	movs	r1, r0
 800b716:	9805      	ldr	r0, [sp, #20]
 800b718:	f001 f808 	bl	800c72c <__mcmp>
 800b71c:	900a      	str	r0, [sp, #40]	; 0x28
 800b71e:	9908      	ldr	r1, [sp, #32]
 800b720:	9804      	ldr	r0, [sp, #16]
 800b722:	f000 fd75 	bl	800c210 <_Bfree>
 800b726:	9b07      	ldr	r3, [sp, #28]
 800b728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b72a:	3301      	adds	r3, #1
 800b72c:	9308      	str	r3, [sp, #32]
 800b72e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b730:	4313      	orrs	r3, r2
 800b732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b734:	4313      	orrs	r3, r2
 800b736:	d109      	bne.n	800b74c <_dtoa_r+0xacc>
 800b738:	2c39      	cmp	r4, #57	; 0x39
 800b73a:	d022      	beq.n	800b782 <_dtoa_r+0xb02>
 800b73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b73e:	2b00      	cmp	r3, #0
 800b740:	dd01      	ble.n	800b746 <_dtoa_r+0xac6>
 800b742:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b744:	3431      	adds	r4, #49	; 0x31
 800b746:	9b07      	ldr	r3, [sp, #28]
 800b748:	701c      	strb	r4, [r3, #0]
 800b74a:	e76e      	b.n	800b62a <_dtoa_r+0x9aa>
 800b74c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b74e:	2b00      	cmp	r3, #0
 800b750:	db04      	blt.n	800b75c <_dtoa_r+0xadc>
 800b752:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b754:	4313      	orrs	r3, r2
 800b756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b758:	4313      	orrs	r3, r2
 800b75a:	d11e      	bne.n	800b79a <_dtoa_r+0xb1a>
 800b75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b75e:	2b00      	cmp	r3, #0
 800b760:	ddf1      	ble.n	800b746 <_dtoa_r+0xac6>
 800b762:	9905      	ldr	r1, [sp, #20]
 800b764:	2201      	movs	r2, #1
 800b766:	9804      	ldr	r0, [sp, #16]
 800b768:	f000 ff72 	bl	800c650 <__lshift>
 800b76c:	0031      	movs	r1, r6
 800b76e:	9005      	str	r0, [sp, #20]
 800b770:	f000 ffdc 	bl	800c72c <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	dc02      	bgt.n	800b77e <_dtoa_r+0xafe>
 800b778:	d1e5      	bne.n	800b746 <_dtoa_r+0xac6>
 800b77a:	07e3      	lsls	r3, r4, #31
 800b77c:	d5e3      	bpl.n	800b746 <_dtoa_r+0xac6>
 800b77e:	2c39      	cmp	r4, #57	; 0x39
 800b780:	d1df      	bne.n	800b742 <_dtoa_r+0xac2>
 800b782:	2339      	movs	r3, #57	; 0x39
 800b784:	9a07      	ldr	r2, [sp, #28]
 800b786:	7013      	strb	r3, [r2, #0]
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	9308      	str	r3, [sp, #32]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	781a      	ldrb	r2, [r3, #0]
 800b790:	2a39      	cmp	r2, #57	; 0x39
 800b792:	d063      	beq.n	800b85c <_dtoa_r+0xbdc>
 800b794:	3201      	adds	r2, #1
 800b796:	701a      	strb	r2, [r3, #0]
 800b798:	e747      	b.n	800b62a <_dtoa_r+0x9aa>
 800b79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dd03      	ble.n	800b7a8 <_dtoa_r+0xb28>
 800b7a0:	2c39      	cmp	r4, #57	; 0x39
 800b7a2:	d0ee      	beq.n	800b782 <_dtoa_r+0xb02>
 800b7a4:	3401      	adds	r4, #1
 800b7a6:	e7ce      	b.n	800b746 <_dtoa_r+0xac6>
 800b7a8:	9b07      	ldr	r3, [sp, #28]
 800b7aa:	9a07      	ldr	r2, [sp, #28]
 800b7ac:	701c      	strb	r4, [r3, #0]
 800b7ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d03e      	beq.n	800b832 <_dtoa_r+0xbb2>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	220a      	movs	r2, #10
 800b7b8:	9905      	ldr	r1, [sp, #20]
 800b7ba:	9804      	ldr	r0, [sp, #16]
 800b7bc:	f000 fd4c 	bl	800c258 <__multadd>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	9005      	str	r0, [sp, #20]
 800b7c4:	220a      	movs	r2, #10
 800b7c6:	0029      	movs	r1, r5
 800b7c8:	9804      	ldr	r0, [sp, #16]
 800b7ca:	42bd      	cmp	r5, r7
 800b7cc:	d106      	bne.n	800b7dc <_dtoa_r+0xb5c>
 800b7ce:	f000 fd43 	bl	800c258 <__multadd>
 800b7d2:	0005      	movs	r5, r0
 800b7d4:	0007      	movs	r7, r0
 800b7d6:	9b08      	ldr	r3, [sp, #32]
 800b7d8:	9307      	str	r3, [sp, #28]
 800b7da:	e784      	b.n	800b6e6 <_dtoa_r+0xa66>
 800b7dc:	f000 fd3c 	bl	800c258 <__multadd>
 800b7e0:	0039      	movs	r1, r7
 800b7e2:	0005      	movs	r5, r0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	220a      	movs	r2, #10
 800b7e8:	9804      	ldr	r0, [sp, #16]
 800b7ea:	f000 fd35 	bl	800c258 <__multadd>
 800b7ee:	0007      	movs	r7, r0
 800b7f0:	e7f1      	b.n	800b7d6 <_dtoa_r+0xb56>
 800b7f2:	9b07      	ldr	r3, [sp, #28]
 800b7f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7f6:	2500      	movs	r5, #0
 800b7f8:	0031      	movs	r1, r6
 800b7fa:	9805      	ldr	r0, [sp, #20]
 800b7fc:	f7ff f9b0 	bl	800ab60 <quorem>
 800b800:	9b06      	ldr	r3, [sp, #24]
 800b802:	3030      	adds	r0, #48	; 0x30
 800b804:	5558      	strb	r0, [r3, r5]
 800b806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b808:	3501      	adds	r5, #1
 800b80a:	0004      	movs	r4, r0
 800b80c:	42ab      	cmp	r3, r5
 800b80e:	dd07      	ble.n	800b820 <_dtoa_r+0xba0>
 800b810:	2300      	movs	r3, #0
 800b812:	220a      	movs	r2, #10
 800b814:	9905      	ldr	r1, [sp, #20]
 800b816:	9804      	ldr	r0, [sp, #16]
 800b818:	f000 fd1e 	bl	800c258 <__multadd>
 800b81c:	9005      	str	r0, [sp, #20]
 800b81e:	e7eb      	b.n	800b7f8 <_dtoa_r+0xb78>
 800b820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b822:	2301      	movs	r3, #1
 800b824:	2a00      	cmp	r2, #0
 800b826:	dd00      	ble.n	800b82a <_dtoa_r+0xbaa>
 800b828:	0013      	movs	r3, r2
 800b82a:	2500      	movs	r5, #0
 800b82c:	9a06      	ldr	r2, [sp, #24]
 800b82e:	18d3      	adds	r3, r2, r3
 800b830:	9308      	str	r3, [sp, #32]
 800b832:	9905      	ldr	r1, [sp, #20]
 800b834:	2201      	movs	r2, #1
 800b836:	9804      	ldr	r0, [sp, #16]
 800b838:	f000 ff0a 	bl	800c650 <__lshift>
 800b83c:	0031      	movs	r1, r6
 800b83e:	9005      	str	r0, [sp, #20]
 800b840:	f000 ff74 	bl	800c72c <__mcmp>
 800b844:	2800      	cmp	r0, #0
 800b846:	dc9f      	bgt.n	800b788 <_dtoa_r+0xb08>
 800b848:	d101      	bne.n	800b84e <_dtoa_r+0xbce>
 800b84a:	07e4      	lsls	r4, r4, #31
 800b84c:	d49c      	bmi.n	800b788 <_dtoa_r+0xb08>
 800b84e:	9b08      	ldr	r3, [sp, #32]
 800b850:	9308      	str	r3, [sp, #32]
 800b852:	3b01      	subs	r3, #1
 800b854:	781a      	ldrb	r2, [r3, #0]
 800b856:	2a30      	cmp	r2, #48	; 0x30
 800b858:	d0fa      	beq.n	800b850 <_dtoa_r+0xbd0>
 800b85a:	e6e6      	b.n	800b62a <_dtoa_r+0x9aa>
 800b85c:	9a06      	ldr	r2, [sp, #24]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d193      	bne.n	800b78a <_dtoa_r+0xb0a>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	3301      	adds	r3, #1
 800b866:	9303      	str	r3, [sp, #12]
 800b868:	2331      	movs	r3, #49	; 0x31
 800b86a:	7013      	strb	r3, [r2, #0]
 800b86c:	e6dd      	b.n	800b62a <_dtoa_r+0x9aa>
 800b86e:	4b09      	ldr	r3, [pc, #36]	; (800b894 <_dtoa_r+0xc14>)
 800b870:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b872:	9306      	str	r3, [sp, #24]
 800b874:	4b08      	ldr	r3, [pc, #32]	; (800b898 <_dtoa_r+0xc18>)
 800b876:	2a00      	cmp	r2, #0
 800b878:	d001      	beq.n	800b87e <_dtoa_r+0xbfe>
 800b87a:	f7ff fa49 	bl	800ad10 <_dtoa_r+0x90>
 800b87e:	f7ff fa49 	bl	800ad14 <_dtoa_r+0x94>
 800b882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b884:	2b00      	cmp	r3, #0
 800b886:	dcb6      	bgt.n	800b7f6 <_dtoa_r+0xb76>
 800b888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	dd00      	ble.n	800b890 <_dtoa_r+0xc10>
 800b88e:	e6b6      	b.n	800b5fe <_dtoa_r+0x97e>
 800b890:	e7b1      	b.n	800b7f6 <_dtoa_r+0xb76>
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	0800d892 	.word	0x0800d892
 800b898:	0800d89a 	.word	0x0800d89a

0800b89c <_free_r>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	0005      	movs	r5, r0
 800b8a0:	2900      	cmp	r1, #0
 800b8a2:	d010      	beq.n	800b8c6 <_free_r+0x2a>
 800b8a4:	1f0c      	subs	r4, r1, #4
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	da00      	bge.n	800b8ae <_free_r+0x12>
 800b8ac:	18e4      	adds	r4, r4, r3
 800b8ae:	0028      	movs	r0, r5
 800b8b0:	f000 fc5a 	bl	800c168 <__malloc_lock>
 800b8b4:	4a1d      	ldr	r2, [pc, #116]	; (800b92c <_free_r+0x90>)
 800b8b6:	6813      	ldr	r3, [r2, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d105      	bne.n	800b8c8 <_free_r+0x2c>
 800b8bc:	6063      	str	r3, [r4, #4]
 800b8be:	6014      	str	r4, [r2, #0]
 800b8c0:	0028      	movs	r0, r5
 800b8c2:	f000 fc59 	bl	800c178 <__malloc_unlock>
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	d908      	bls.n	800b8de <_free_r+0x42>
 800b8cc:	6820      	ldr	r0, [r4, #0]
 800b8ce:	1821      	adds	r1, r4, r0
 800b8d0:	428b      	cmp	r3, r1
 800b8d2:	d1f3      	bne.n	800b8bc <_free_r+0x20>
 800b8d4:	6819      	ldr	r1, [r3, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	1809      	adds	r1, r1, r0
 800b8da:	6021      	str	r1, [r4, #0]
 800b8dc:	e7ee      	b.n	800b8bc <_free_r+0x20>
 800b8de:	001a      	movs	r2, r3
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <_free_r+0x4e>
 800b8e6:	42a3      	cmp	r3, r4
 800b8e8:	d9f9      	bls.n	800b8de <_free_r+0x42>
 800b8ea:	6811      	ldr	r1, [r2, #0]
 800b8ec:	1850      	adds	r0, r2, r1
 800b8ee:	42a0      	cmp	r0, r4
 800b8f0:	d10b      	bne.n	800b90a <_free_r+0x6e>
 800b8f2:	6820      	ldr	r0, [r4, #0]
 800b8f4:	1809      	adds	r1, r1, r0
 800b8f6:	1850      	adds	r0, r2, r1
 800b8f8:	6011      	str	r1, [r2, #0]
 800b8fa:	4283      	cmp	r3, r0
 800b8fc:	d1e0      	bne.n	800b8c0 <_free_r+0x24>
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	1841      	adds	r1, r0, r1
 800b904:	6011      	str	r1, [r2, #0]
 800b906:	6053      	str	r3, [r2, #4]
 800b908:	e7da      	b.n	800b8c0 <_free_r+0x24>
 800b90a:	42a0      	cmp	r0, r4
 800b90c:	d902      	bls.n	800b914 <_free_r+0x78>
 800b90e:	230c      	movs	r3, #12
 800b910:	602b      	str	r3, [r5, #0]
 800b912:	e7d5      	b.n	800b8c0 <_free_r+0x24>
 800b914:	6820      	ldr	r0, [r4, #0]
 800b916:	1821      	adds	r1, r4, r0
 800b918:	428b      	cmp	r3, r1
 800b91a:	d103      	bne.n	800b924 <_free_r+0x88>
 800b91c:	6819      	ldr	r1, [r3, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	1809      	adds	r1, r1, r0
 800b922:	6021      	str	r1, [r4, #0]
 800b924:	6063      	str	r3, [r4, #4]
 800b926:	6054      	str	r4, [r2, #4]
 800b928:	e7ca      	b.n	800b8c0 <_free_r+0x24>
 800b92a:	46c0      	nop			; (mov r8, r8)
 800b92c:	200007d8 	.word	0x200007d8

0800b930 <rshift>:
 800b930:	0002      	movs	r2, r0
 800b932:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b934:	6904      	ldr	r4, [r0, #16]
 800b936:	114b      	asrs	r3, r1, #5
 800b938:	b085      	sub	sp, #20
 800b93a:	3214      	adds	r2, #20
 800b93c:	9302      	str	r3, [sp, #8]
 800b93e:	114d      	asrs	r5, r1, #5
 800b940:	0013      	movs	r3, r2
 800b942:	42ac      	cmp	r4, r5
 800b944:	dd32      	ble.n	800b9ac <rshift+0x7c>
 800b946:	261f      	movs	r6, #31
 800b948:	000f      	movs	r7, r1
 800b94a:	114b      	asrs	r3, r1, #5
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	00a5      	lsls	r5, r4, #2
 800b950:	18d3      	adds	r3, r2, r3
 800b952:	4037      	ands	r7, r6
 800b954:	1955      	adds	r5, r2, r5
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	9701      	str	r7, [sp, #4]
 800b95a:	4231      	tst	r1, r6
 800b95c:	d10d      	bne.n	800b97a <rshift+0x4a>
 800b95e:	0016      	movs	r6, r2
 800b960:	0019      	movs	r1, r3
 800b962:	428d      	cmp	r5, r1
 800b964:	d836      	bhi.n	800b9d4 <rshift+0xa4>
 800b966:	9900      	ldr	r1, [sp, #0]
 800b968:	2300      	movs	r3, #0
 800b96a:	3903      	subs	r1, #3
 800b96c:	428d      	cmp	r5, r1
 800b96e:	d302      	bcc.n	800b976 <rshift+0x46>
 800b970:	9b02      	ldr	r3, [sp, #8]
 800b972:	1ae4      	subs	r4, r4, r3
 800b974:	00a3      	lsls	r3, r4, #2
 800b976:	18d3      	adds	r3, r2, r3
 800b978:	e018      	b.n	800b9ac <rshift+0x7c>
 800b97a:	2120      	movs	r1, #32
 800b97c:	9e01      	ldr	r6, [sp, #4]
 800b97e:	9f01      	ldr	r7, [sp, #4]
 800b980:	1b89      	subs	r1, r1, r6
 800b982:	9e00      	ldr	r6, [sp, #0]
 800b984:	9103      	str	r1, [sp, #12]
 800b986:	ce02      	ldmia	r6!, {r1}
 800b988:	4694      	mov	ip, r2
 800b98a:	40f9      	lsrs	r1, r7
 800b98c:	42b5      	cmp	r5, r6
 800b98e:	d816      	bhi.n	800b9be <rshift+0x8e>
 800b990:	9e00      	ldr	r6, [sp, #0]
 800b992:	2300      	movs	r3, #0
 800b994:	3601      	adds	r6, #1
 800b996:	42b5      	cmp	r5, r6
 800b998:	d303      	bcc.n	800b9a2 <rshift+0x72>
 800b99a:	9b02      	ldr	r3, [sp, #8]
 800b99c:	1ae3      	subs	r3, r4, r3
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	3b04      	subs	r3, #4
 800b9a2:	18d3      	adds	r3, r2, r3
 800b9a4:	6019      	str	r1, [r3, #0]
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	d000      	beq.n	800b9ac <rshift+0x7c>
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	1a99      	subs	r1, r3, r2
 800b9ae:	1089      	asrs	r1, r1, #2
 800b9b0:	6101      	str	r1, [r0, #16]
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d101      	bne.n	800b9ba <rshift+0x8a>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	6143      	str	r3, [r0, #20]
 800b9ba:	b005      	add	sp, #20
 800b9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9be:	6837      	ldr	r7, [r6, #0]
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	409f      	lsls	r7, r3
 800b9c4:	430f      	orrs	r7, r1
 800b9c6:	4661      	mov	r1, ip
 800b9c8:	c180      	stmia	r1!, {r7}
 800b9ca:	468c      	mov	ip, r1
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	ce02      	ldmia	r6!, {r1}
 800b9d0:	40d9      	lsrs	r1, r3
 800b9d2:	e7db      	b.n	800b98c <rshift+0x5c>
 800b9d4:	c980      	ldmia	r1!, {r7}
 800b9d6:	c680      	stmia	r6!, {r7}
 800b9d8:	e7c3      	b.n	800b962 <rshift+0x32>

0800b9da <__hexdig_fun>:
 800b9da:	0002      	movs	r2, r0
 800b9dc:	3a30      	subs	r2, #48	; 0x30
 800b9de:	0003      	movs	r3, r0
 800b9e0:	2a09      	cmp	r2, #9
 800b9e2:	d802      	bhi.n	800b9ea <__hexdig_fun+0x10>
 800b9e4:	3b20      	subs	r3, #32
 800b9e6:	b2d8      	uxtb	r0, r3
 800b9e8:	4770      	bx	lr
 800b9ea:	0002      	movs	r2, r0
 800b9ec:	3a61      	subs	r2, #97	; 0x61
 800b9ee:	2a05      	cmp	r2, #5
 800b9f0:	d801      	bhi.n	800b9f6 <__hexdig_fun+0x1c>
 800b9f2:	3b47      	subs	r3, #71	; 0x47
 800b9f4:	e7f7      	b.n	800b9e6 <__hexdig_fun+0xc>
 800b9f6:	001a      	movs	r2, r3
 800b9f8:	3a41      	subs	r2, #65	; 0x41
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	2a05      	cmp	r2, #5
 800b9fe:	d8f3      	bhi.n	800b9e8 <__hexdig_fun+0xe>
 800ba00:	3b27      	subs	r3, #39	; 0x27
 800ba02:	e7f0      	b.n	800b9e6 <__hexdig_fun+0xc>

0800ba04 <__gethex>:
 800ba04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba06:	b089      	sub	sp, #36	; 0x24
 800ba08:	9307      	str	r3, [sp, #28]
 800ba0a:	2302      	movs	r3, #2
 800ba0c:	9201      	str	r2, [sp, #4]
 800ba0e:	680a      	ldr	r2, [r1, #0]
 800ba10:	425b      	negs	r3, r3
 800ba12:	9003      	str	r0, [sp, #12]
 800ba14:	9106      	str	r1, [sp, #24]
 800ba16:	1c96      	adds	r6, r2, #2
 800ba18:	1a9b      	subs	r3, r3, r2
 800ba1a:	199a      	adds	r2, r3, r6
 800ba1c:	9600      	str	r6, [sp, #0]
 800ba1e:	9205      	str	r2, [sp, #20]
 800ba20:	9a00      	ldr	r2, [sp, #0]
 800ba22:	3601      	adds	r6, #1
 800ba24:	7810      	ldrb	r0, [r2, #0]
 800ba26:	2830      	cmp	r0, #48	; 0x30
 800ba28:	d0f7      	beq.n	800ba1a <__gethex+0x16>
 800ba2a:	f7ff ffd6 	bl	800b9da <__hexdig_fun>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	001d      	movs	r5, r3
 800ba32:	9302      	str	r3, [sp, #8]
 800ba34:	4298      	cmp	r0, r3
 800ba36:	d11d      	bne.n	800ba74 <__gethex+0x70>
 800ba38:	2201      	movs	r2, #1
 800ba3a:	49a6      	ldr	r1, [pc, #664]	; (800bcd4 <__gethex+0x2d0>)
 800ba3c:	9800      	ldr	r0, [sp, #0]
 800ba3e:	f7fe ffdf 	bl	800aa00 <strncmp>
 800ba42:	0007      	movs	r7, r0
 800ba44:	42a8      	cmp	r0, r5
 800ba46:	d169      	bne.n	800bb1c <__gethex+0x118>
 800ba48:	9b00      	ldr	r3, [sp, #0]
 800ba4a:	0034      	movs	r4, r6
 800ba4c:	7858      	ldrb	r0, [r3, #1]
 800ba4e:	f7ff ffc4 	bl	800b9da <__hexdig_fun>
 800ba52:	2301      	movs	r3, #1
 800ba54:	9302      	str	r3, [sp, #8]
 800ba56:	42a8      	cmp	r0, r5
 800ba58:	d02f      	beq.n	800baba <__gethex+0xb6>
 800ba5a:	9600      	str	r6, [sp, #0]
 800ba5c:	9b00      	ldr	r3, [sp, #0]
 800ba5e:	7818      	ldrb	r0, [r3, #0]
 800ba60:	2830      	cmp	r0, #48	; 0x30
 800ba62:	d009      	beq.n	800ba78 <__gethex+0x74>
 800ba64:	f7ff ffb9 	bl	800b9da <__hexdig_fun>
 800ba68:	4242      	negs	r2, r0
 800ba6a:	4142      	adcs	r2, r0
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	0035      	movs	r5, r6
 800ba70:	9202      	str	r2, [sp, #8]
 800ba72:	9305      	str	r3, [sp, #20]
 800ba74:	9c00      	ldr	r4, [sp, #0]
 800ba76:	e004      	b.n	800ba82 <__gethex+0x7e>
 800ba78:	9b00      	ldr	r3, [sp, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	e7ed      	b.n	800ba5c <__gethex+0x58>
 800ba80:	3401      	adds	r4, #1
 800ba82:	7820      	ldrb	r0, [r4, #0]
 800ba84:	f7ff ffa9 	bl	800b9da <__hexdig_fun>
 800ba88:	1e07      	subs	r7, r0, #0
 800ba8a:	d1f9      	bne.n	800ba80 <__gethex+0x7c>
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	0020      	movs	r0, r4
 800ba90:	4990      	ldr	r1, [pc, #576]	; (800bcd4 <__gethex+0x2d0>)
 800ba92:	f7fe ffb5 	bl	800aa00 <strncmp>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d10d      	bne.n	800bab6 <__gethex+0xb2>
 800ba9a:	2d00      	cmp	r5, #0
 800ba9c:	d106      	bne.n	800baac <__gethex+0xa8>
 800ba9e:	3401      	adds	r4, #1
 800baa0:	0025      	movs	r5, r4
 800baa2:	7820      	ldrb	r0, [r4, #0]
 800baa4:	f7ff ff99 	bl	800b9da <__hexdig_fun>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d102      	bne.n	800bab2 <__gethex+0xae>
 800baac:	1b2d      	subs	r5, r5, r4
 800baae:	00af      	lsls	r7, r5, #2
 800bab0:	e003      	b.n	800baba <__gethex+0xb6>
 800bab2:	3401      	adds	r4, #1
 800bab4:	e7f5      	b.n	800baa2 <__gethex+0x9e>
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	d1f8      	bne.n	800baac <__gethex+0xa8>
 800baba:	2220      	movs	r2, #32
 800babc:	7823      	ldrb	r3, [r4, #0]
 800babe:	0026      	movs	r6, r4
 800bac0:	4393      	bics	r3, r2
 800bac2:	2b50      	cmp	r3, #80	; 0x50
 800bac4:	d11d      	bne.n	800bb02 <__gethex+0xfe>
 800bac6:	7863      	ldrb	r3, [r4, #1]
 800bac8:	2b2b      	cmp	r3, #43	; 0x2b
 800baca:	d02c      	beq.n	800bb26 <__gethex+0x122>
 800bacc:	2b2d      	cmp	r3, #45	; 0x2d
 800bace:	d02e      	beq.n	800bb2e <__gethex+0x12a>
 800bad0:	2300      	movs	r3, #0
 800bad2:	1c66      	adds	r6, r4, #1
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	7830      	ldrb	r0, [r6, #0]
 800bad8:	f7ff ff7f 	bl	800b9da <__hexdig_fun>
 800badc:	1e43      	subs	r3, r0, #1
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b18      	cmp	r3, #24
 800bae2:	d82b      	bhi.n	800bb3c <__gethex+0x138>
 800bae4:	3810      	subs	r0, #16
 800bae6:	0005      	movs	r5, r0
 800bae8:	7870      	ldrb	r0, [r6, #1]
 800baea:	f7ff ff76 	bl	800b9da <__hexdig_fun>
 800baee:	1e43      	subs	r3, r0, #1
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	3601      	adds	r6, #1
 800baf4:	2b18      	cmp	r3, #24
 800baf6:	d91c      	bls.n	800bb32 <__gethex+0x12e>
 800baf8:	9b04      	ldr	r3, [sp, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d000      	beq.n	800bb00 <__gethex+0xfc>
 800bafe:	426d      	negs	r5, r5
 800bb00:	197f      	adds	r7, r7, r5
 800bb02:	9b06      	ldr	r3, [sp, #24]
 800bb04:	601e      	str	r6, [r3, #0]
 800bb06:	9b02      	ldr	r3, [sp, #8]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d019      	beq.n	800bb40 <__gethex+0x13c>
 800bb0c:	2600      	movs	r6, #0
 800bb0e:	9b05      	ldr	r3, [sp, #20]
 800bb10:	42b3      	cmp	r3, r6
 800bb12:	d100      	bne.n	800bb16 <__gethex+0x112>
 800bb14:	3606      	adds	r6, #6
 800bb16:	0030      	movs	r0, r6
 800bb18:	b009      	add	sp, #36	; 0x24
 800bb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	2700      	movs	r7, #0
 800bb20:	9c00      	ldr	r4, [sp, #0]
 800bb22:	9302      	str	r3, [sp, #8]
 800bb24:	e7c9      	b.n	800baba <__gethex+0xb6>
 800bb26:	2300      	movs	r3, #0
 800bb28:	9304      	str	r3, [sp, #16]
 800bb2a:	1ca6      	adds	r6, r4, #2
 800bb2c:	e7d3      	b.n	800bad6 <__gethex+0xd2>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e7fa      	b.n	800bb28 <__gethex+0x124>
 800bb32:	230a      	movs	r3, #10
 800bb34:	435d      	muls	r5, r3
 800bb36:	182d      	adds	r5, r5, r0
 800bb38:	3d10      	subs	r5, #16
 800bb3a:	e7d5      	b.n	800bae8 <__gethex+0xe4>
 800bb3c:	0026      	movs	r6, r4
 800bb3e:	e7e0      	b.n	800bb02 <__gethex+0xfe>
 800bb40:	9b00      	ldr	r3, [sp, #0]
 800bb42:	9902      	ldr	r1, [sp, #8]
 800bb44:	1ae3      	subs	r3, r4, r3
 800bb46:	3b01      	subs	r3, #1
 800bb48:	2b07      	cmp	r3, #7
 800bb4a:	dc0a      	bgt.n	800bb62 <__gethex+0x15e>
 800bb4c:	9803      	ldr	r0, [sp, #12]
 800bb4e:	f000 fb1b 	bl	800c188 <_Balloc>
 800bb52:	1e05      	subs	r5, r0, #0
 800bb54:	d108      	bne.n	800bb68 <__gethex+0x164>
 800bb56:	002a      	movs	r2, r5
 800bb58:	21e4      	movs	r1, #228	; 0xe4
 800bb5a:	4b5f      	ldr	r3, [pc, #380]	; (800bcd8 <__gethex+0x2d4>)
 800bb5c:	485f      	ldr	r0, [pc, #380]	; (800bcdc <__gethex+0x2d8>)
 800bb5e:	f001 fbe7 	bl	800d330 <__assert_func>
 800bb62:	3101      	adds	r1, #1
 800bb64:	105b      	asrs	r3, r3, #1
 800bb66:	e7ef      	b.n	800bb48 <__gethex+0x144>
 800bb68:	0003      	movs	r3, r0
 800bb6a:	3314      	adds	r3, #20
 800bb6c:	9302      	str	r3, [sp, #8]
 800bb6e:	9305      	str	r3, [sp, #20]
 800bb70:	2300      	movs	r3, #0
 800bb72:	001e      	movs	r6, r3
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	d33f      	bcc.n	800bbfc <__gethex+0x1f8>
 800bb7c:	9c05      	ldr	r4, [sp, #20]
 800bb7e:	9b02      	ldr	r3, [sp, #8]
 800bb80:	c440      	stmia	r4!, {r6}
 800bb82:	1ae4      	subs	r4, r4, r3
 800bb84:	10a4      	asrs	r4, r4, #2
 800bb86:	0030      	movs	r0, r6
 800bb88:	612c      	str	r4, [r5, #16]
 800bb8a:	f000 fbf5 	bl	800c378 <__hi0bits>
 800bb8e:	9b01      	ldr	r3, [sp, #4]
 800bb90:	0164      	lsls	r4, r4, #5
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	1a26      	subs	r6, r4, r0
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	429e      	cmp	r6, r3
 800bb9a:	dd51      	ble.n	800bc40 <__gethex+0x23c>
 800bb9c:	1af6      	subs	r6, r6, r3
 800bb9e:	0031      	movs	r1, r6
 800bba0:	0028      	movs	r0, r5
 800bba2:	f000 ff89 	bl	800cab8 <__any_on>
 800bba6:	1e04      	subs	r4, r0, #0
 800bba8:	d016      	beq.n	800bbd8 <__gethex+0x1d4>
 800bbaa:	2401      	movs	r4, #1
 800bbac:	231f      	movs	r3, #31
 800bbae:	0020      	movs	r0, r4
 800bbb0:	1e72      	subs	r2, r6, #1
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	4098      	lsls	r0, r3
 800bbb6:	0003      	movs	r3, r0
 800bbb8:	1151      	asrs	r1, r2, #5
 800bbba:	9802      	ldr	r0, [sp, #8]
 800bbbc:	0089      	lsls	r1, r1, #2
 800bbbe:	5809      	ldr	r1, [r1, r0]
 800bbc0:	4219      	tst	r1, r3
 800bbc2:	d009      	beq.n	800bbd8 <__gethex+0x1d4>
 800bbc4:	42a2      	cmp	r2, r4
 800bbc6:	dd06      	ble.n	800bbd6 <__gethex+0x1d2>
 800bbc8:	0028      	movs	r0, r5
 800bbca:	1eb1      	subs	r1, r6, #2
 800bbcc:	f000 ff74 	bl	800cab8 <__any_on>
 800bbd0:	3402      	adds	r4, #2
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d100      	bne.n	800bbd8 <__gethex+0x1d4>
 800bbd6:	2402      	movs	r4, #2
 800bbd8:	0031      	movs	r1, r6
 800bbda:	0028      	movs	r0, r5
 800bbdc:	f7ff fea8 	bl	800b930 <rshift>
 800bbe0:	19bf      	adds	r7, r7, r6
 800bbe2:	9b01      	ldr	r3, [sp, #4]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	42bb      	cmp	r3, r7
 800bbe8:	da3a      	bge.n	800bc60 <__gethex+0x25c>
 800bbea:	0029      	movs	r1, r5
 800bbec:	9803      	ldr	r0, [sp, #12]
 800bbee:	f000 fb0f 	bl	800c210 <_Bfree>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbf6:	26a3      	movs	r6, #163	; 0xa3
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	e78c      	b.n	800bb16 <__gethex+0x112>
 800bbfc:	3c01      	subs	r4, #1
 800bbfe:	7823      	ldrb	r3, [r4, #0]
 800bc00:	2b2e      	cmp	r3, #46	; 0x2e
 800bc02:	d012      	beq.n	800bc2a <__gethex+0x226>
 800bc04:	9b04      	ldr	r3, [sp, #16]
 800bc06:	2b20      	cmp	r3, #32
 800bc08:	d104      	bne.n	800bc14 <__gethex+0x210>
 800bc0a:	9b05      	ldr	r3, [sp, #20]
 800bc0c:	c340      	stmia	r3!, {r6}
 800bc0e:	2600      	movs	r6, #0
 800bc10:	9305      	str	r3, [sp, #20]
 800bc12:	9604      	str	r6, [sp, #16]
 800bc14:	7820      	ldrb	r0, [r4, #0]
 800bc16:	f7ff fee0 	bl	800b9da <__hexdig_fun>
 800bc1a:	230f      	movs	r3, #15
 800bc1c:	4018      	ands	r0, r3
 800bc1e:	9b04      	ldr	r3, [sp, #16]
 800bc20:	4098      	lsls	r0, r3
 800bc22:	3304      	adds	r3, #4
 800bc24:	4306      	orrs	r6, r0
 800bc26:	9304      	str	r3, [sp, #16]
 800bc28:	e7a5      	b.n	800bb76 <__gethex+0x172>
 800bc2a:	9b00      	ldr	r3, [sp, #0]
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d8e9      	bhi.n	800bc04 <__gethex+0x200>
 800bc30:	2201      	movs	r2, #1
 800bc32:	0020      	movs	r0, r4
 800bc34:	4927      	ldr	r1, [pc, #156]	; (800bcd4 <__gethex+0x2d0>)
 800bc36:	f7fe fee3 	bl	800aa00 <strncmp>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d1e2      	bne.n	800bc04 <__gethex+0x200>
 800bc3e:	e79a      	b.n	800bb76 <__gethex+0x172>
 800bc40:	9b00      	ldr	r3, [sp, #0]
 800bc42:	2400      	movs	r4, #0
 800bc44:	429e      	cmp	r6, r3
 800bc46:	dacc      	bge.n	800bbe2 <__gethex+0x1de>
 800bc48:	1b9e      	subs	r6, r3, r6
 800bc4a:	0029      	movs	r1, r5
 800bc4c:	0032      	movs	r2, r6
 800bc4e:	9803      	ldr	r0, [sp, #12]
 800bc50:	f000 fcfe 	bl	800c650 <__lshift>
 800bc54:	0003      	movs	r3, r0
 800bc56:	3314      	adds	r3, #20
 800bc58:	0005      	movs	r5, r0
 800bc5a:	1bbf      	subs	r7, r7, r6
 800bc5c:	9302      	str	r3, [sp, #8]
 800bc5e:	e7c0      	b.n	800bbe2 <__gethex+0x1de>
 800bc60:	9b01      	ldr	r3, [sp, #4]
 800bc62:	685e      	ldr	r6, [r3, #4]
 800bc64:	42be      	cmp	r6, r7
 800bc66:	dd70      	ble.n	800bd4a <__gethex+0x346>
 800bc68:	9b00      	ldr	r3, [sp, #0]
 800bc6a:	1bf6      	subs	r6, r6, r7
 800bc6c:	42b3      	cmp	r3, r6
 800bc6e:	dc37      	bgt.n	800bce0 <__gethex+0x2dc>
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d024      	beq.n	800bcc2 <__gethex+0x2be>
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d026      	beq.n	800bcca <__gethex+0x2c6>
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d117      	bne.n	800bcb0 <__gethex+0x2ac>
 800bc80:	9b00      	ldr	r3, [sp, #0]
 800bc82:	42b3      	cmp	r3, r6
 800bc84:	d114      	bne.n	800bcb0 <__gethex+0x2ac>
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d10b      	bne.n	800bca2 <__gethex+0x29e>
 800bc8a:	9b01      	ldr	r3, [sp, #4]
 800bc8c:	9a07      	ldr	r2, [sp, #28]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	2662      	movs	r6, #98	; 0x62
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	2301      	movs	r3, #1
 800bc96:	9a02      	ldr	r2, [sp, #8]
 800bc98:	612b      	str	r3, [r5, #16]
 800bc9a:	6013      	str	r3, [r2, #0]
 800bc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc9e:	601d      	str	r5, [r3, #0]
 800bca0:	e739      	b.n	800bb16 <__gethex+0x112>
 800bca2:	9900      	ldr	r1, [sp, #0]
 800bca4:	0028      	movs	r0, r5
 800bca6:	3901      	subs	r1, #1
 800bca8:	f000 ff06 	bl	800cab8 <__any_on>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d1ec      	bne.n	800bc8a <__gethex+0x286>
 800bcb0:	0029      	movs	r1, r5
 800bcb2:	9803      	ldr	r0, [sp, #12]
 800bcb4:	f000 faac 	bl	800c210 <_Bfree>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcbc:	2650      	movs	r6, #80	; 0x50
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	e729      	b.n	800bb16 <__gethex+0x112>
 800bcc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1f3      	bne.n	800bcb0 <__gethex+0x2ac>
 800bcc8:	e7df      	b.n	800bc8a <__gethex+0x286>
 800bcca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1dc      	bne.n	800bc8a <__gethex+0x286>
 800bcd0:	e7ee      	b.n	800bcb0 <__gethex+0x2ac>
 800bcd2:	46c0      	nop			; (mov r8, r8)
 800bcd4:	0800d6f8 	.word	0x0800d6f8
 800bcd8:	0800d90e 	.word	0x0800d90e
 800bcdc:	0800d91f 	.word	0x0800d91f
 800bce0:	1e77      	subs	r7, r6, #1
 800bce2:	2c00      	cmp	r4, #0
 800bce4:	d12f      	bne.n	800bd46 <__gethex+0x342>
 800bce6:	2f00      	cmp	r7, #0
 800bce8:	d004      	beq.n	800bcf4 <__gethex+0x2f0>
 800bcea:	0039      	movs	r1, r7
 800bcec:	0028      	movs	r0, r5
 800bcee:	f000 fee3 	bl	800cab8 <__any_on>
 800bcf2:	0004      	movs	r4, r0
 800bcf4:	231f      	movs	r3, #31
 800bcf6:	117a      	asrs	r2, r7, #5
 800bcf8:	401f      	ands	r7, r3
 800bcfa:	3b1e      	subs	r3, #30
 800bcfc:	40bb      	lsls	r3, r7
 800bcfe:	9902      	ldr	r1, [sp, #8]
 800bd00:	0092      	lsls	r2, r2, #2
 800bd02:	5852      	ldr	r2, [r2, r1]
 800bd04:	421a      	tst	r2, r3
 800bd06:	d001      	beq.n	800bd0c <__gethex+0x308>
 800bd08:	2302      	movs	r3, #2
 800bd0a:	431c      	orrs	r4, r3
 800bd0c:	9b00      	ldr	r3, [sp, #0]
 800bd0e:	0031      	movs	r1, r6
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	2602      	movs	r6, #2
 800bd14:	0028      	movs	r0, r5
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	f7ff fe0a 	bl	800b930 <rshift>
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	685f      	ldr	r7, [r3, #4]
 800bd20:	2c00      	cmp	r4, #0
 800bd22:	d041      	beq.n	800bda8 <__gethex+0x3a4>
 800bd24:	9b01      	ldr	r3, [sp, #4]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d010      	beq.n	800bd4e <__gethex+0x34a>
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d012      	beq.n	800bd56 <__gethex+0x352>
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d106      	bne.n	800bd42 <__gethex+0x33e>
 800bd34:	07a2      	lsls	r2, r4, #30
 800bd36:	d504      	bpl.n	800bd42 <__gethex+0x33e>
 800bd38:	9a02      	ldr	r2, [sp, #8]
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	4314      	orrs	r4, r2
 800bd3e:	421c      	tst	r4, r3
 800bd40:	d10c      	bne.n	800bd5c <__gethex+0x358>
 800bd42:	2310      	movs	r3, #16
 800bd44:	e02f      	b.n	800bda6 <__gethex+0x3a2>
 800bd46:	2401      	movs	r4, #1
 800bd48:	e7d4      	b.n	800bcf4 <__gethex+0x2f0>
 800bd4a:	2601      	movs	r6, #1
 800bd4c:	e7e8      	b.n	800bd20 <__gethex+0x31c>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd52:	1a9b      	subs	r3, r3, r2
 800bd54:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d0f2      	beq.n	800bd42 <__gethex+0x33e>
 800bd5c:	692b      	ldr	r3, [r5, #16]
 800bd5e:	2000      	movs	r0, #0
 800bd60:	9302      	str	r3, [sp, #8]
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	9304      	str	r3, [sp, #16]
 800bd66:	002b      	movs	r3, r5
 800bd68:	9a04      	ldr	r2, [sp, #16]
 800bd6a:	3314      	adds	r3, #20
 800bd6c:	1899      	adds	r1, r3, r2
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	1c54      	adds	r4, r2, #1
 800bd72:	d01e      	beq.n	800bdb2 <__gethex+0x3ae>
 800bd74:	3201      	adds	r2, #1
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	002b      	movs	r3, r5
 800bd7a:	3314      	adds	r3, #20
 800bd7c:	2e02      	cmp	r6, #2
 800bd7e:	d141      	bne.n	800be04 <__gethex+0x400>
 800bd80:	9a01      	ldr	r2, [sp, #4]
 800bd82:	9900      	ldr	r1, [sp, #0]
 800bd84:	6812      	ldr	r2, [r2, #0]
 800bd86:	3a01      	subs	r2, #1
 800bd88:	428a      	cmp	r2, r1
 800bd8a:	d10b      	bne.n	800bda4 <__gethex+0x3a0>
 800bd8c:	221f      	movs	r2, #31
 800bd8e:	9800      	ldr	r0, [sp, #0]
 800bd90:	1149      	asrs	r1, r1, #5
 800bd92:	4002      	ands	r2, r0
 800bd94:	2001      	movs	r0, #1
 800bd96:	0004      	movs	r4, r0
 800bd98:	4094      	lsls	r4, r2
 800bd9a:	0089      	lsls	r1, r1, #2
 800bd9c:	58cb      	ldr	r3, [r1, r3]
 800bd9e:	4223      	tst	r3, r4
 800bda0:	d000      	beq.n	800bda4 <__gethex+0x3a0>
 800bda2:	2601      	movs	r6, #1
 800bda4:	2320      	movs	r3, #32
 800bda6:	431e      	orrs	r6, r3
 800bda8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdaa:	601d      	str	r5, [r3, #0]
 800bdac:	9b07      	ldr	r3, [sp, #28]
 800bdae:	601f      	str	r7, [r3, #0]
 800bdb0:	e6b1      	b.n	800bb16 <__gethex+0x112>
 800bdb2:	c301      	stmia	r3!, {r0}
 800bdb4:	4299      	cmp	r1, r3
 800bdb6:	d8da      	bhi.n	800bd6e <__gethex+0x36a>
 800bdb8:	68ab      	ldr	r3, [r5, #8]
 800bdba:	9a02      	ldr	r2, [sp, #8]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	db18      	blt.n	800bdf2 <__gethex+0x3ee>
 800bdc0:	6869      	ldr	r1, [r5, #4]
 800bdc2:	9803      	ldr	r0, [sp, #12]
 800bdc4:	3101      	adds	r1, #1
 800bdc6:	f000 f9df 	bl	800c188 <_Balloc>
 800bdca:	1e04      	subs	r4, r0, #0
 800bdcc:	d104      	bne.n	800bdd8 <__gethex+0x3d4>
 800bdce:	0022      	movs	r2, r4
 800bdd0:	2184      	movs	r1, #132	; 0x84
 800bdd2:	4b1c      	ldr	r3, [pc, #112]	; (800be44 <__gethex+0x440>)
 800bdd4:	481c      	ldr	r0, [pc, #112]	; (800be48 <__gethex+0x444>)
 800bdd6:	e6c2      	b.n	800bb5e <__gethex+0x15a>
 800bdd8:	0029      	movs	r1, r5
 800bdda:	692a      	ldr	r2, [r5, #16]
 800bddc:	310c      	adds	r1, #12
 800bdde:	3202      	adds	r2, #2
 800bde0:	0092      	lsls	r2, r2, #2
 800bde2:	300c      	adds	r0, #12
 800bde4:	f7fe fea8 	bl	800ab38 <memcpy>
 800bde8:	0029      	movs	r1, r5
 800bdea:	9803      	ldr	r0, [sp, #12]
 800bdec:	f000 fa10 	bl	800c210 <_Bfree>
 800bdf0:	0025      	movs	r5, r4
 800bdf2:	692b      	ldr	r3, [r5, #16]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	612a      	str	r2, [r5, #16]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	18eb      	adds	r3, r5, r3
 800be00:	605a      	str	r2, [r3, #4]
 800be02:	e7b9      	b.n	800bd78 <__gethex+0x374>
 800be04:	692a      	ldr	r2, [r5, #16]
 800be06:	9902      	ldr	r1, [sp, #8]
 800be08:	428a      	cmp	r2, r1
 800be0a:	dd09      	ble.n	800be20 <__gethex+0x41c>
 800be0c:	2101      	movs	r1, #1
 800be0e:	0028      	movs	r0, r5
 800be10:	f7ff fd8e 	bl	800b930 <rshift>
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	3701      	adds	r7, #1
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	42bb      	cmp	r3, r7
 800be1c:	dac1      	bge.n	800bda2 <__gethex+0x39e>
 800be1e:	e6e4      	b.n	800bbea <__gethex+0x1e6>
 800be20:	221f      	movs	r2, #31
 800be22:	9c00      	ldr	r4, [sp, #0]
 800be24:	9900      	ldr	r1, [sp, #0]
 800be26:	2601      	movs	r6, #1
 800be28:	4014      	ands	r4, r2
 800be2a:	4211      	tst	r1, r2
 800be2c:	d0ba      	beq.n	800bda4 <__gethex+0x3a0>
 800be2e:	9a04      	ldr	r2, [sp, #16]
 800be30:	189b      	adds	r3, r3, r2
 800be32:	3b04      	subs	r3, #4
 800be34:	6818      	ldr	r0, [r3, #0]
 800be36:	f000 fa9f 	bl	800c378 <__hi0bits>
 800be3a:	2320      	movs	r3, #32
 800be3c:	1b1b      	subs	r3, r3, r4
 800be3e:	4298      	cmp	r0, r3
 800be40:	dbe4      	blt.n	800be0c <__gethex+0x408>
 800be42:	e7af      	b.n	800bda4 <__gethex+0x3a0>
 800be44:	0800d90e 	.word	0x0800d90e
 800be48:	0800d91f 	.word	0x0800d91f

0800be4c <L_shift>:
 800be4c:	2308      	movs	r3, #8
 800be4e:	b570      	push	{r4, r5, r6, lr}
 800be50:	2520      	movs	r5, #32
 800be52:	1a9a      	subs	r2, r3, r2
 800be54:	0092      	lsls	r2, r2, #2
 800be56:	1aad      	subs	r5, r5, r2
 800be58:	6843      	ldr	r3, [r0, #4]
 800be5a:	6804      	ldr	r4, [r0, #0]
 800be5c:	001e      	movs	r6, r3
 800be5e:	40ae      	lsls	r6, r5
 800be60:	40d3      	lsrs	r3, r2
 800be62:	4334      	orrs	r4, r6
 800be64:	6004      	str	r4, [r0, #0]
 800be66:	6043      	str	r3, [r0, #4]
 800be68:	3004      	adds	r0, #4
 800be6a:	4288      	cmp	r0, r1
 800be6c:	d3f4      	bcc.n	800be58 <L_shift+0xc>
 800be6e:	bd70      	pop	{r4, r5, r6, pc}

0800be70 <__match>:
 800be70:	b530      	push	{r4, r5, lr}
 800be72:	6803      	ldr	r3, [r0, #0]
 800be74:	780c      	ldrb	r4, [r1, #0]
 800be76:	3301      	adds	r3, #1
 800be78:	2c00      	cmp	r4, #0
 800be7a:	d102      	bne.n	800be82 <__match+0x12>
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	2001      	movs	r0, #1
 800be80:	bd30      	pop	{r4, r5, pc}
 800be82:	781a      	ldrb	r2, [r3, #0]
 800be84:	0015      	movs	r5, r2
 800be86:	3d41      	subs	r5, #65	; 0x41
 800be88:	2d19      	cmp	r5, #25
 800be8a:	d800      	bhi.n	800be8e <__match+0x1e>
 800be8c:	3220      	adds	r2, #32
 800be8e:	3101      	adds	r1, #1
 800be90:	42a2      	cmp	r2, r4
 800be92:	d0ef      	beq.n	800be74 <__match+0x4>
 800be94:	2000      	movs	r0, #0
 800be96:	e7f3      	b.n	800be80 <__match+0x10>

0800be98 <__hexnan>:
 800be98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be9a:	680b      	ldr	r3, [r1, #0]
 800be9c:	b08b      	sub	sp, #44	; 0x2c
 800be9e:	9201      	str	r2, [sp, #4]
 800bea0:	9901      	ldr	r1, [sp, #4]
 800bea2:	115a      	asrs	r2, r3, #5
 800bea4:	0092      	lsls	r2, r2, #2
 800bea6:	188a      	adds	r2, r1, r2
 800bea8:	9202      	str	r2, [sp, #8]
 800beaa:	0019      	movs	r1, r3
 800beac:	221f      	movs	r2, #31
 800beae:	4011      	ands	r1, r2
 800beb0:	9008      	str	r0, [sp, #32]
 800beb2:	9106      	str	r1, [sp, #24]
 800beb4:	4213      	tst	r3, r2
 800beb6:	d002      	beq.n	800bebe <__hexnan+0x26>
 800beb8:	9b02      	ldr	r3, [sp, #8]
 800beba:	3304      	adds	r3, #4
 800bebc:	9302      	str	r3, [sp, #8]
 800bebe:	9b02      	ldr	r3, [sp, #8]
 800bec0:	2500      	movs	r5, #0
 800bec2:	1f1f      	subs	r7, r3, #4
 800bec4:	003e      	movs	r6, r7
 800bec6:	003c      	movs	r4, r7
 800bec8:	9b08      	ldr	r3, [sp, #32]
 800beca:	603d      	str	r5, [r7, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	9507      	str	r5, [sp, #28]
 800bed0:	9305      	str	r3, [sp, #20]
 800bed2:	9503      	str	r5, [sp, #12]
 800bed4:	9b05      	ldr	r3, [sp, #20]
 800bed6:	3301      	adds	r3, #1
 800bed8:	9309      	str	r3, [sp, #36]	; 0x24
 800beda:	9b05      	ldr	r3, [sp, #20]
 800bedc:	785b      	ldrb	r3, [r3, #1]
 800bede:	9304      	str	r3, [sp, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d028      	beq.n	800bf36 <__hexnan+0x9e>
 800bee4:	9804      	ldr	r0, [sp, #16]
 800bee6:	f7ff fd78 	bl	800b9da <__hexdig_fun>
 800beea:	2800      	cmp	r0, #0
 800beec:	d154      	bne.n	800bf98 <__hexnan+0x100>
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	2b20      	cmp	r3, #32
 800bef2:	d819      	bhi.n	800bf28 <__hexnan+0x90>
 800bef4:	9b03      	ldr	r3, [sp, #12]
 800bef6:	9a07      	ldr	r2, [sp, #28]
 800bef8:	4293      	cmp	r3, r2
 800befa:	dd12      	ble.n	800bf22 <__hexnan+0x8a>
 800befc:	42b4      	cmp	r4, r6
 800befe:	d206      	bcs.n	800bf0e <__hexnan+0x76>
 800bf00:	2d07      	cmp	r5, #7
 800bf02:	dc04      	bgt.n	800bf0e <__hexnan+0x76>
 800bf04:	002a      	movs	r2, r5
 800bf06:	0031      	movs	r1, r6
 800bf08:	0020      	movs	r0, r4
 800bf0a:	f7ff ff9f 	bl	800be4c <L_shift>
 800bf0e:	9b01      	ldr	r3, [sp, #4]
 800bf10:	2508      	movs	r5, #8
 800bf12:	429c      	cmp	r4, r3
 800bf14:	d905      	bls.n	800bf22 <__hexnan+0x8a>
 800bf16:	1f26      	subs	r6, r4, #4
 800bf18:	2500      	movs	r5, #0
 800bf1a:	0034      	movs	r4, r6
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	6035      	str	r5, [r6, #0]
 800bf20:	9307      	str	r3, [sp, #28]
 800bf22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf24:	9305      	str	r3, [sp, #20]
 800bf26:	e7d5      	b.n	800bed4 <__hexnan+0x3c>
 800bf28:	9b04      	ldr	r3, [sp, #16]
 800bf2a:	2b29      	cmp	r3, #41	; 0x29
 800bf2c:	d159      	bne.n	800bfe2 <__hexnan+0x14a>
 800bf2e:	9b05      	ldr	r3, [sp, #20]
 800bf30:	9a08      	ldr	r2, [sp, #32]
 800bf32:	3302      	adds	r3, #2
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d052      	beq.n	800bfe2 <__hexnan+0x14a>
 800bf3c:	42b4      	cmp	r4, r6
 800bf3e:	d206      	bcs.n	800bf4e <__hexnan+0xb6>
 800bf40:	2d07      	cmp	r5, #7
 800bf42:	dc04      	bgt.n	800bf4e <__hexnan+0xb6>
 800bf44:	002a      	movs	r2, r5
 800bf46:	0031      	movs	r1, r6
 800bf48:	0020      	movs	r0, r4
 800bf4a:	f7ff ff7f 	bl	800be4c <L_shift>
 800bf4e:	9b01      	ldr	r3, [sp, #4]
 800bf50:	429c      	cmp	r4, r3
 800bf52:	d935      	bls.n	800bfc0 <__hexnan+0x128>
 800bf54:	001a      	movs	r2, r3
 800bf56:	0023      	movs	r3, r4
 800bf58:	cb02      	ldmia	r3!, {r1}
 800bf5a:	c202      	stmia	r2!, {r1}
 800bf5c:	429f      	cmp	r7, r3
 800bf5e:	d2fb      	bcs.n	800bf58 <__hexnan+0xc0>
 800bf60:	9b02      	ldr	r3, [sp, #8]
 800bf62:	1c62      	adds	r2, r4, #1
 800bf64:	1ed9      	subs	r1, r3, #3
 800bf66:	2304      	movs	r3, #4
 800bf68:	4291      	cmp	r1, r2
 800bf6a:	d305      	bcc.n	800bf78 <__hexnan+0xe0>
 800bf6c:	9b02      	ldr	r3, [sp, #8]
 800bf6e:	3b04      	subs	r3, #4
 800bf70:	1b1b      	subs	r3, r3, r4
 800bf72:	089b      	lsrs	r3, r3, #2
 800bf74:	3301      	adds	r3, #1
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	9a01      	ldr	r2, [sp, #4]
 800bf7a:	18d3      	adds	r3, r2, r3
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	c304      	stmia	r3!, {r2}
 800bf80:	429f      	cmp	r7, r3
 800bf82:	d2fc      	bcs.n	800bf7e <__hexnan+0xe6>
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d104      	bne.n	800bf94 <__hexnan+0xfc>
 800bf8a:	9b01      	ldr	r3, [sp, #4]
 800bf8c:	429f      	cmp	r7, r3
 800bf8e:	d126      	bne.n	800bfde <__hexnan+0x146>
 800bf90:	2301      	movs	r3, #1
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	2005      	movs	r0, #5
 800bf96:	e025      	b.n	800bfe4 <__hexnan+0x14c>
 800bf98:	9b03      	ldr	r3, [sp, #12]
 800bf9a:	3501      	adds	r5, #1
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	9303      	str	r3, [sp, #12]
 800bfa0:	2d08      	cmp	r5, #8
 800bfa2:	dd06      	ble.n	800bfb2 <__hexnan+0x11a>
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	429c      	cmp	r4, r3
 800bfa8:	d9bb      	bls.n	800bf22 <__hexnan+0x8a>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2501      	movs	r5, #1
 800bfae:	3c04      	subs	r4, #4
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	220f      	movs	r2, #15
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	4010      	ands	r0, r2
 800bfb8:	011b      	lsls	r3, r3, #4
 800bfba:	4303      	orrs	r3, r0
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	e7b0      	b.n	800bf22 <__hexnan+0x8a>
 800bfc0:	9b06      	ldr	r3, [sp, #24]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0de      	beq.n	800bf84 <__hexnan+0xec>
 800bfc6:	2320      	movs	r3, #32
 800bfc8:	9a06      	ldr	r2, [sp, #24]
 800bfca:	9902      	ldr	r1, [sp, #8]
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	2201      	movs	r2, #1
 800bfd0:	4252      	negs	r2, r2
 800bfd2:	40da      	lsrs	r2, r3
 800bfd4:	3904      	subs	r1, #4
 800bfd6:	680b      	ldr	r3, [r1, #0]
 800bfd8:	4013      	ands	r3, r2
 800bfda:	600b      	str	r3, [r1, #0]
 800bfdc:	e7d2      	b.n	800bf84 <__hexnan+0xec>
 800bfde:	3f04      	subs	r7, #4
 800bfe0:	e7d0      	b.n	800bf84 <__hexnan+0xec>
 800bfe2:	2004      	movs	r0, #4
 800bfe4:	b00b      	add	sp, #44	; 0x2c
 800bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfe8 <malloc>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	4b03      	ldr	r3, [pc, #12]	; (800bff8 <malloc+0x10>)
 800bfec:	0001      	movs	r1, r0
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	f000 f826 	bl	800c040 <_malloc_r>
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	46c0      	nop			; (mov r8, r8)
 800bff8:	200001d0 	.word	0x200001d0

0800bffc <sbrk_aligned>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	4e0f      	ldr	r6, [pc, #60]	; (800c03c <sbrk_aligned+0x40>)
 800c000:	000d      	movs	r5, r1
 800c002:	6831      	ldr	r1, [r6, #0]
 800c004:	0004      	movs	r4, r0
 800c006:	2900      	cmp	r1, #0
 800c008:	d102      	bne.n	800c010 <sbrk_aligned+0x14>
 800c00a:	f001 f97f 	bl	800d30c <_sbrk_r>
 800c00e:	6030      	str	r0, [r6, #0]
 800c010:	0029      	movs	r1, r5
 800c012:	0020      	movs	r0, r4
 800c014:	f001 f97a 	bl	800d30c <_sbrk_r>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d00a      	beq.n	800c032 <sbrk_aligned+0x36>
 800c01c:	2303      	movs	r3, #3
 800c01e:	1cc5      	adds	r5, r0, #3
 800c020:	439d      	bics	r5, r3
 800c022:	42a8      	cmp	r0, r5
 800c024:	d007      	beq.n	800c036 <sbrk_aligned+0x3a>
 800c026:	1a29      	subs	r1, r5, r0
 800c028:	0020      	movs	r0, r4
 800c02a:	f001 f96f 	bl	800d30c <_sbrk_r>
 800c02e:	3001      	adds	r0, #1
 800c030:	d101      	bne.n	800c036 <sbrk_aligned+0x3a>
 800c032:	2501      	movs	r5, #1
 800c034:	426d      	negs	r5, r5
 800c036:	0028      	movs	r0, r5
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	46c0      	nop			; (mov r8, r8)
 800c03c:	200007dc 	.word	0x200007dc

0800c040 <_malloc_r>:
 800c040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c042:	2203      	movs	r2, #3
 800c044:	1ccb      	adds	r3, r1, #3
 800c046:	4393      	bics	r3, r2
 800c048:	3308      	adds	r3, #8
 800c04a:	0006      	movs	r6, r0
 800c04c:	001f      	movs	r7, r3
 800c04e:	2b0c      	cmp	r3, #12
 800c050:	d238      	bcs.n	800c0c4 <_malloc_r+0x84>
 800c052:	270c      	movs	r7, #12
 800c054:	42b9      	cmp	r1, r7
 800c056:	d837      	bhi.n	800c0c8 <_malloc_r+0x88>
 800c058:	0030      	movs	r0, r6
 800c05a:	f000 f885 	bl	800c168 <__malloc_lock>
 800c05e:	4b38      	ldr	r3, [pc, #224]	; (800c140 <_malloc_r+0x100>)
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	001c      	movs	r4, r3
 800c066:	2c00      	cmp	r4, #0
 800c068:	d133      	bne.n	800c0d2 <_malloc_r+0x92>
 800c06a:	0039      	movs	r1, r7
 800c06c:	0030      	movs	r0, r6
 800c06e:	f7ff ffc5 	bl	800bffc <sbrk_aligned>
 800c072:	0004      	movs	r4, r0
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d15e      	bne.n	800c136 <_malloc_r+0xf6>
 800c078:	9b00      	ldr	r3, [sp, #0]
 800c07a:	681c      	ldr	r4, [r3, #0]
 800c07c:	0025      	movs	r5, r4
 800c07e:	2d00      	cmp	r5, #0
 800c080:	d14e      	bne.n	800c120 <_malloc_r+0xe0>
 800c082:	2c00      	cmp	r4, #0
 800c084:	d051      	beq.n	800c12a <_malloc_r+0xea>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	0029      	movs	r1, r5
 800c08a:	18e3      	adds	r3, r4, r3
 800c08c:	0030      	movs	r0, r6
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	f001 f93c 	bl	800d30c <_sbrk_r>
 800c094:	9b01      	ldr	r3, [sp, #4]
 800c096:	4283      	cmp	r3, r0
 800c098:	d147      	bne.n	800c12a <_malloc_r+0xea>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	0030      	movs	r0, r6
 800c09e:	1aff      	subs	r7, r7, r3
 800c0a0:	0039      	movs	r1, r7
 800c0a2:	f7ff ffab 	bl	800bffc <sbrk_aligned>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d03f      	beq.n	800c12a <_malloc_r+0xea>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	19db      	adds	r3, r3, r7
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	9b00      	ldr	r3, [sp, #0]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d040      	beq.n	800c13a <_malloc_r+0xfa>
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	42a2      	cmp	r2, r4
 800c0bc:	d133      	bne.n	800c126 <_malloc_r+0xe6>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	605a      	str	r2, [r3, #4]
 800c0c2:	e014      	b.n	800c0ee <_malloc_r+0xae>
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dac5      	bge.n	800c054 <_malloc_r+0x14>
 800c0c8:	230c      	movs	r3, #12
 800c0ca:	2500      	movs	r5, #0
 800c0cc:	6033      	str	r3, [r6, #0]
 800c0ce:	0028      	movs	r0, r5
 800c0d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0d2:	6821      	ldr	r1, [r4, #0]
 800c0d4:	1bc9      	subs	r1, r1, r7
 800c0d6:	d420      	bmi.n	800c11a <_malloc_r+0xda>
 800c0d8:	290b      	cmp	r1, #11
 800c0da:	d918      	bls.n	800c10e <_malloc_r+0xce>
 800c0dc:	19e2      	adds	r2, r4, r7
 800c0de:	6027      	str	r7, [r4, #0]
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	d112      	bne.n	800c10a <_malloc_r+0xca>
 800c0e4:	9b00      	ldr	r3, [sp, #0]
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	6011      	str	r1, [r2, #0]
 800c0ec:	6053      	str	r3, [r2, #4]
 800c0ee:	0030      	movs	r0, r6
 800c0f0:	0025      	movs	r5, r4
 800c0f2:	f000 f841 	bl	800c178 <__malloc_unlock>
 800c0f6:	2207      	movs	r2, #7
 800c0f8:	350b      	adds	r5, #11
 800c0fa:	1d23      	adds	r3, r4, #4
 800c0fc:	4395      	bics	r5, r2
 800c0fe:	1aea      	subs	r2, r5, r3
 800c100:	429d      	cmp	r5, r3
 800c102:	d0e4      	beq.n	800c0ce <_malloc_r+0x8e>
 800c104:	1b5b      	subs	r3, r3, r5
 800c106:	50a3      	str	r3, [r4, r2]
 800c108:	e7e1      	b.n	800c0ce <_malloc_r+0x8e>
 800c10a:	605a      	str	r2, [r3, #4]
 800c10c:	e7ec      	b.n	800c0e8 <_malloc_r+0xa8>
 800c10e:	6862      	ldr	r2, [r4, #4]
 800c110:	42a3      	cmp	r3, r4
 800c112:	d1d5      	bne.n	800c0c0 <_malloc_r+0x80>
 800c114:	9b00      	ldr	r3, [sp, #0]
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	e7e9      	b.n	800c0ee <_malloc_r+0xae>
 800c11a:	0023      	movs	r3, r4
 800c11c:	6864      	ldr	r4, [r4, #4]
 800c11e:	e7a2      	b.n	800c066 <_malloc_r+0x26>
 800c120:	002c      	movs	r4, r5
 800c122:	686d      	ldr	r5, [r5, #4]
 800c124:	e7ab      	b.n	800c07e <_malloc_r+0x3e>
 800c126:	0013      	movs	r3, r2
 800c128:	e7c4      	b.n	800c0b4 <_malloc_r+0x74>
 800c12a:	230c      	movs	r3, #12
 800c12c:	0030      	movs	r0, r6
 800c12e:	6033      	str	r3, [r6, #0]
 800c130:	f000 f822 	bl	800c178 <__malloc_unlock>
 800c134:	e7cb      	b.n	800c0ce <_malloc_r+0x8e>
 800c136:	6027      	str	r7, [r4, #0]
 800c138:	e7d9      	b.n	800c0ee <_malloc_r+0xae>
 800c13a:	605b      	str	r3, [r3, #4]
 800c13c:	deff      	udf	#255	; 0xff
 800c13e:	46c0      	nop			; (mov r8, r8)
 800c140:	200007d8 	.word	0x200007d8

0800c144 <__ascii_mbtowc>:
 800c144:	b082      	sub	sp, #8
 800c146:	2900      	cmp	r1, #0
 800c148:	d100      	bne.n	800c14c <__ascii_mbtowc+0x8>
 800c14a:	a901      	add	r1, sp, #4
 800c14c:	1e10      	subs	r0, r2, #0
 800c14e:	d006      	beq.n	800c15e <__ascii_mbtowc+0x1a>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d006      	beq.n	800c162 <__ascii_mbtowc+0x1e>
 800c154:	7813      	ldrb	r3, [r2, #0]
 800c156:	600b      	str	r3, [r1, #0]
 800c158:	7810      	ldrb	r0, [r2, #0]
 800c15a:	1e43      	subs	r3, r0, #1
 800c15c:	4198      	sbcs	r0, r3
 800c15e:	b002      	add	sp, #8
 800c160:	4770      	bx	lr
 800c162:	2002      	movs	r0, #2
 800c164:	4240      	negs	r0, r0
 800c166:	e7fa      	b.n	800c15e <__ascii_mbtowc+0x1a>

0800c168 <__malloc_lock>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	4802      	ldr	r0, [pc, #8]	; (800c174 <__malloc_lock+0xc>)
 800c16c:	f7fe fcd7 	bl	800ab1e <__retarget_lock_acquire_recursive>
 800c170:	bd10      	pop	{r4, pc}
 800c172:	46c0      	nop			; (mov r8, r8)
 800c174:	200007d4 	.word	0x200007d4

0800c178 <__malloc_unlock>:
 800c178:	b510      	push	{r4, lr}
 800c17a:	4802      	ldr	r0, [pc, #8]	; (800c184 <__malloc_unlock+0xc>)
 800c17c:	f7fe fcd0 	bl	800ab20 <__retarget_lock_release_recursive>
 800c180:	bd10      	pop	{r4, pc}
 800c182:	46c0      	nop			; (mov r8, r8)
 800c184:	200007d4 	.word	0x200007d4

0800c188 <_Balloc>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	69c5      	ldr	r5, [r0, #28]
 800c18c:	0006      	movs	r6, r0
 800c18e:	000c      	movs	r4, r1
 800c190:	2d00      	cmp	r5, #0
 800c192:	d10e      	bne.n	800c1b2 <_Balloc+0x2a>
 800c194:	2010      	movs	r0, #16
 800c196:	f7ff ff27 	bl	800bfe8 <malloc>
 800c19a:	1e02      	subs	r2, r0, #0
 800c19c:	61f0      	str	r0, [r6, #28]
 800c19e:	d104      	bne.n	800c1aa <_Balloc+0x22>
 800c1a0:	216b      	movs	r1, #107	; 0x6b
 800c1a2:	4b19      	ldr	r3, [pc, #100]	; (800c208 <_Balloc+0x80>)
 800c1a4:	4819      	ldr	r0, [pc, #100]	; (800c20c <_Balloc+0x84>)
 800c1a6:	f001 f8c3 	bl	800d330 <__assert_func>
 800c1aa:	6045      	str	r5, [r0, #4]
 800c1ac:	6085      	str	r5, [r0, #8]
 800c1ae:	6005      	str	r5, [r0, #0]
 800c1b0:	60c5      	str	r5, [r0, #12]
 800c1b2:	69f5      	ldr	r5, [r6, #28]
 800c1b4:	68eb      	ldr	r3, [r5, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d013      	beq.n	800c1e2 <_Balloc+0x5a>
 800c1ba:	69f3      	ldr	r3, [r6, #28]
 800c1bc:	00a2      	lsls	r2, r4, #2
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	189b      	adds	r3, r3, r2
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d118      	bne.n	800c1fa <_Balloc+0x72>
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	000d      	movs	r5, r1
 800c1cc:	40a5      	lsls	r5, r4
 800c1ce:	1d6a      	adds	r2, r5, #5
 800c1d0:	0030      	movs	r0, r6
 800c1d2:	0092      	lsls	r2, r2, #2
 800c1d4:	f001 f8ca 	bl	800d36c <_calloc_r>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d00c      	beq.n	800c1f6 <_Balloc+0x6e>
 800c1dc:	6044      	str	r4, [r0, #4]
 800c1de:	6085      	str	r5, [r0, #8]
 800c1e0:	e00d      	b.n	800c1fe <_Balloc+0x76>
 800c1e2:	2221      	movs	r2, #33	; 0x21
 800c1e4:	2104      	movs	r1, #4
 800c1e6:	0030      	movs	r0, r6
 800c1e8:	f001 f8c0 	bl	800d36c <_calloc_r>
 800c1ec:	69f3      	ldr	r3, [r6, #28]
 800c1ee:	60e8      	str	r0, [r5, #12]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e1      	bne.n	800c1ba <_Balloc+0x32>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	bd70      	pop	{r4, r5, r6, pc}
 800c1fa:	6802      	ldr	r2, [r0, #0]
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	2300      	movs	r3, #0
 800c200:	6103      	str	r3, [r0, #16]
 800c202:	60c3      	str	r3, [r0, #12]
 800c204:	e7f8      	b.n	800c1f8 <_Balloc+0x70>
 800c206:	46c0      	nop			; (mov r8, r8)
 800c208:	0800d89f 	.word	0x0800d89f
 800c20c:	0800d97f 	.word	0x0800d97f

0800c210 <_Bfree>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	69c6      	ldr	r6, [r0, #28]
 800c214:	0005      	movs	r5, r0
 800c216:	000c      	movs	r4, r1
 800c218:	2e00      	cmp	r6, #0
 800c21a:	d10e      	bne.n	800c23a <_Bfree+0x2a>
 800c21c:	2010      	movs	r0, #16
 800c21e:	f7ff fee3 	bl	800bfe8 <malloc>
 800c222:	1e02      	subs	r2, r0, #0
 800c224:	61e8      	str	r0, [r5, #28]
 800c226:	d104      	bne.n	800c232 <_Bfree+0x22>
 800c228:	218f      	movs	r1, #143	; 0x8f
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <_Bfree+0x40>)
 800c22c:	4809      	ldr	r0, [pc, #36]	; (800c254 <_Bfree+0x44>)
 800c22e:	f001 f87f 	bl	800d330 <__assert_func>
 800c232:	6046      	str	r6, [r0, #4]
 800c234:	6086      	str	r6, [r0, #8]
 800c236:	6006      	str	r6, [r0, #0]
 800c238:	60c6      	str	r6, [r0, #12]
 800c23a:	2c00      	cmp	r4, #0
 800c23c:	d007      	beq.n	800c24e <_Bfree+0x3e>
 800c23e:	69eb      	ldr	r3, [r5, #28]
 800c240:	6862      	ldr	r2, [r4, #4]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	0092      	lsls	r2, r2, #2
 800c246:	189b      	adds	r3, r3, r2
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	6022      	str	r2, [r4, #0]
 800c24c:	601c      	str	r4, [r3, #0]
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	0800d89f 	.word	0x0800d89f
 800c254:	0800d97f 	.word	0x0800d97f

0800c258 <__multadd>:
 800c258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c25a:	000e      	movs	r6, r1
 800c25c:	9001      	str	r0, [sp, #4]
 800c25e:	000c      	movs	r4, r1
 800c260:	001d      	movs	r5, r3
 800c262:	2000      	movs	r0, #0
 800c264:	690f      	ldr	r7, [r1, #16]
 800c266:	3614      	adds	r6, #20
 800c268:	6833      	ldr	r3, [r6, #0]
 800c26a:	3001      	adds	r0, #1
 800c26c:	b299      	uxth	r1, r3
 800c26e:	4351      	muls	r1, r2
 800c270:	0c1b      	lsrs	r3, r3, #16
 800c272:	4353      	muls	r3, r2
 800c274:	1949      	adds	r1, r1, r5
 800c276:	0c0d      	lsrs	r5, r1, #16
 800c278:	195b      	adds	r3, r3, r5
 800c27a:	0c1d      	lsrs	r5, r3, #16
 800c27c:	b289      	uxth	r1, r1
 800c27e:	041b      	lsls	r3, r3, #16
 800c280:	185b      	adds	r3, r3, r1
 800c282:	c608      	stmia	r6!, {r3}
 800c284:	4287      	cmp	r7, r0
 800c286:	dcef      	bgt.n	800c268 <__multadd+0x10>
 800c288:	2d00      	cmp	r5, #0
 800c28a:	d022      	beq.n	800c2d2 <__multadd+0x7a>
 800c28c:	68a3      	ldr	r3, [r4, #8]
 800c28e:	42bb      	cmp	r3, r7
 800c290:	dc19      	bgt.n	800c2c6 <__multadd+0x6e>
 800c292:	6861      	ldr	r1, [r4, #4]
 800c294:	9801      	ldr	r0, [sp, #4]
 800c296:	3101      	adds	r1, #1
 800c298:	f7ff ff76 	bl	800c188 <_Balloc>
 800c29c:	1e06      	subs	r6, r0, #0
 800c29e:	d105      	bne.n	800c2ac <__multadd+0x54>
 800c2a0:	0032      	movs	r2, r6
 800c2a2:	21ba      	movs	r1, #186	; 0xba
 800c2a4:	4b0c      	ldr	r3, [pc, #48]	; (800c2d8 <__multadd+0x80>)
 800c2a6:	480d      	ldr	r0, [pc, #52]	; (800c2dc <__multadd+0x84>)
 800c2a8:	f001 f842 	bl	800d330 <__assert_func>
 800c2ac:	0021      	movs	r1, r4
 800c2ae:	6922      	ldr	r2, [r4, #16]
 800c2b0:	310c      	adds	r1, #12
 800c2b2:	3202      	adds	r2, #2
 800c2b4:	0092      	lsls	r2, r2, #2
 800c2b6:	300c      	adds	r0, #12
 800c2b8:	f7fe fc3e 	bl	800ab38 <memcpy>
 800c2bc:	0021      	movs	r1, r4
 800c2be:	9801      	ldr	r0, [sp, #4]
 800c2c0:	f7ff ffa6 	bl	800c210 <_Bfree>
 800c2c4:	0034      	movs	r4, r6
 800c2c6:	1d3b      	adds	r3, r7, #4
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	18e3      	adds	r3, r4, r3
 800c2cc:	605d      	str	r5, [r3, #4]
 800c2ce:	1c7b      	adds	r3, r7, #1
 800c2d0:	6123      	str	r3, [r4, #16]
 800c2d2:	0020      	movs	r0, r4
 800c2d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2d6:	46c0      	nop			; (mov r8, r8)
 800c2d8:	0800d90e 	.word	0x0800d90e
 800c2dc:	0800d97f 	.word	0x0800d97f

0800c2e0 <__s2b>:
 800c2e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2e2:	0006      	movs	r6, r0
 800c2e4:	0018      	movs	r0, r3
 800c2e6:	000c      	movs	r4, r1
 800c2e8:	3008      	adds	r0, #8
 800c2ea:	2109      	movs	r1, #9
 800c2ec:	9301      	str	r3, [sp, #4]
 800c2ee:	0015      	movs	r5, r2
 800c2f0:	f7f3 ffb0 	bl	8000254 <__divsi3>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4283      	cmp	r3, r0
 800c2fa:	db0a      	blt.n	800c312 <__s2b+0x32>
 800c2fc:	0030      	movs	r0, r6
 800c2fe:	f7ff ff43 	bl	800c188 <_Balloc>
 800c302:	1e01      	subs	r1, r0, #0
 800c304:	d108      	bne.n	800c318 <__s2b+0x38>
 800c306:	000a      	movs	r2, r1
 800c308:	4b19      	ldr	r3, [pc, #100]	; (800c370 <__s2b+0x90>)
 800c30a:	481a      	ldr	r0, [pc, #104]	; (800c374 <__s2b+0x94>)
 800c30c:	31d3      	adds	r1, #211	; 0xd3
 800c30e:	f001 f80f 	bl	800d330 <__assert_func>
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	3101      	adds	r1, #1
 800c316:	e7ef      	b.n	800c2f8 <__s2b+0x18>
 800c318:	9b08      	ldr	r3, [sp, #32]
 800c31a:	6143      	str	r3, [r0, #20]
 800c31c:	2301      	movs	r3, #1
 800c31e:	6103      	str	r3, [r0, #16]
 800c320:	2d09      	cmp	r5, #9
 800c322:	dd18      	ble.n	800c356 <__s2b+0x76>
 800c324:	0023      	movs	r3, r4
 800c326:	3309      	adds	r3, #9
 800c328:	001f      	movs	r7, r3
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	1964      	adds	r4, r4, r5
 800c32e:	783b      	ldrb	r3, [r7, #0]
 800c330:	220a      	movs	r2, #10
 800c332:	0030      	movs	r0, r6
 800c334:	3b30      	subs	r3, #48	; 0x30
 800c336:	f7ff ff8f 	bl	800c258 <__multadd>
 800c33a:	3701      	adds	r7, #1
 800c33c:	0001      	movs	r1, r0
 800c33e:	42a7      	cmp	r7, r4
 800c340:	d1f5      	bne.n	800c32e <__s2b+0x4e>
 800c342:	002c      	movs	r4, r5
 800c344:	9b00      	ldr	r3, [sp, #0]
 800c346:	3c08      	subs	r4, #8
 800c348:	191c      	adds	r4, r3, r4
 800c34a:	002f      	movs	r7, r5
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	429f      	cmp	r7, r3
 800c350:	db04      	blt.n	800c35c <__s2b+0x7c>
 800c352:	0008      	movs	r0, r1
 800c354:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c356:	2509      	movs	r5, #9
 800c358:	340a      	adds	r4, #10
 800c35a:	e7f6      	b.n	800c34a <__s2b+0x6a>
 800c35c:	1b63      	subs	r3, r4, r5
 800c35e:	5ddb      	ldrb	r3, [r3, r7]
 800c360:	220a      	movs	r2, #10
 800c362:	0030      	movs	r0, r6
 800c364:	3b30      	subs	r3, #48	; 0x30
 800c366:	f7ff ff77 	bl	800c258 <__multadd>
 800c36a:	3701      	adds	r7, #1
 800c36c:	0001      	movs	r1, r0
 800c36e:	e7ed      	b.n	800c34c <__s2b+0x6c>
 800c370:	0800d90e 	.word	0x0800d90e
 800c374:	0800d97f 	.word	0x0800d97f

0800c378 <__hi0bits>:
 800c378:	0003      	movs	r3, r0
 800c37a:	0c02      	lsrs	r2, r0, #16
 800c37c:	2000      	movs	r0, #0
 800c37e:	4282      	cmp	r2, r0
 800c380:	d101      	bne.n	800c386 <__hi0bits+0xe>
 800c382:	041b      	lsls	r3, r3, #16
 800c384:	3010      	adds	r0, #16
 800c386:	0e1a      	lsrs	r2, r3, #24
 800c388:	d101      	bne.n	800c38e <__hi0bits+0x16>
 800c38a:	3008      	adds	r0, #8
 800c38c:	021b      	lsls	r3, r3, #8
 800c38e:	0f1a      	lsrs	r2, r3, #28
 800c390:	d101      	bne.n	800c396 <__hi0bits+0x1e>
 800c392:	3004      	adds	r0, #4
 800c394:	011b      	lsls	r3, r3, #4
 800c396:	0f9a      	lsrs	r2, r3, #30
 800c398:	d101      	bne.n	800c39e <__hi0bits+0x26>
 800c39a:	3002      	adds	r0, #2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	db03      	blt.n	800c3aa <__hi0bits+0x32>
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	d400      	bmi.n	800c3aa <__hi0bits+0x32>
 800c3a8:	2020      	movs	r0, #32
 800c3aa:	4770      	bx	lr

0800c3ac <__lo0bits>:
 800c3ac:	6803      	ldr	r3, [r0, #0]
 800c3ae:	0001      	movs	r1, r0
 800c3b0:	2207      	movs	r2, #7
 800c3b2:	0018      	movs	r0, r3
 800c3b4:	4010      	ands	r0, r2
 800c3b6:	4213      	tst	r3, r2
 800c3b8:	d00d      	beq.n	800c3d6 <__lo0bits+0x2a>
 800c3ba:	3a06      	subs	r2, #6
 800c3bc:	2000      	movs	r0, #0
 800c3be:	4213      	tst	r3, r2
 800c3c0:	d105      	bne.n	800c3ce <__lo0bits+0x22>
 800c3c2:	3002      	adds	r0, #2
 800c3c4:	4203      	tst	r3, r0
 800c3c6:	d003      	beq.n	800c3d0 <__lo0bits+0x24>
 800c3c8:	40d3      	lsrs	r3, r2
 800c3ca:	0010      	movs	r0, r2
 800c3cc:	600b      	str	r3, [r1, #0]
 800c3ce:	4770      	bx	lr
 800c3d0:	089b      	lsrs	r3, r3, #2
 800c3d2:	600b      	str	r3, [r1, #0]
 800c3d4:	e7fb      	b.n	800c3ce <__lo0bits+0x22>
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	2a00      	cmp	r2, #0
 800c3da:	d101      	bne.n	800c3e0 <__lo0bits+0x34>
 800c3dc:	2010      	movs	r0, #16
 800c3de:	0c1b      	lsrs	r3, r3, #16
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	2a00      	cmp	r2, #0
 800c3e4:	d101      	bne.n	800c3ea <__lo0bits+0x3e>
 800c3e6:	3008      	adds	r0, #8
 800c3e8:	0a1b      	lsrs	r3, r3, #8
 800c3ea:	071a      	lsls	r2, r3, #28
 800c3ec:	d101      	bne.n	800c3f2 <__lo0bits+0x46>
 800c3ee:	3004      	adds	r0, #4
 800c3f0:	091b      	lsrs	r3, r3, #4
 800c3f2:	079a      	lsls	r2, r3, #30
 800c3f4:	d101      	bne.n	800c3fa <__lo0bits+0x4e>
 800c3f6:	3002      	adds	r0, #2
 800c3f8:	089b      	lsrs	r3, r3, #2
 800c3fa:	07da      	lsls	r2, r3, #31
 800c3fc:	d4e9      	bmi.n	800c3d2 <__lo0bits+0x26>
 800c3fe:	3001      	adds	r0, #1
 800c400:	085b      	lsrs	r3, r3, #1
 800c402:	d1e6      	bne.n	800c3d2 <__lo0bits+0x26>
 800c404:	2020      	movs	r0, #32
 800c406:	e7e2      	b.n	800c3ce <__lo0bits+0x22>

0800c408 <__i2b>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	000c      	movs	r4, r1
 800c40c:	2101      	movs	r1, #1
 800c40e:	f7ff febb 	bl	800c188 <_Balloc>
 800c412:	2800      	cmp	r0, #0
 800c414:	d107      	bne.n	800c426 <__i2b+0x1e>
 800c416:	2146      	movs	r1, #70	; 0x46
 800c418:	4c05      	ldr	r4, [pc, #20]	; (800c430 <__i2b+0x28>)
 800c41a:	0002      	movs	r2, r0
 800c41c:	4b05      	ldr	r3, [pc, #20]	; (800c434 <__i2b+0x2c>)
 800c41e:	0020      	movs	r0, r4
 800c420:	31ff      	adds	r1, #255	; 0xff
 800c422:	f000 ff85 	bl	800d330 <__assert_func>
 800c426:	2301      	movs	r3, #1
 800c428:	6144      	str	r4, [r0, #20]
 800c42a:	6103      	str	r3, [r0, #16]
 800c42c:	bd10      	pop	{r4, pc}
 800c42e:	46c0      	nop			; (mov r8, r8)
 800c430:	0800d97f 	.word	0x0800d97f
 800c434:	0800d90e 	.word	0x0800d90e

0800c438 <__multiply>:
 800c438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43a:	0015      	movs	r5, r2
 800c43c:	690a      	ldr	r2, [r1, #16]
 800c43e:	692b      	ldr	r3, [r5, #16]
 800c440:	000c      	movs	r4, r1
 800c442:	b08b      	sub	sp, #44	; 0x2c
 800c444:	429a      	cmp	r2, r3
 800c446:	da01      	bge.n	800c44c <__multiply+0x14>
 800c448:	002c      	movs	r4, r5
 800c44a:	000d      	movs	r5, r1
 800c44c:	6927      	ldr	r7, [r4, #16]
 800c44e:	692e      	ldr	r6, [r5, #16]
 800c450:	6861      	ldr	r1, [r4, #4]
 800c452:	19bb      	adds	r3, r7, r6
 800c454:	9303      	str	r3, [sp, #12]
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	19ba      	adds	r2, r7, r6
 800c45a:	4293      	cmp	r3, r2
 800c45c:	da00      	bge.n	800c460 <__multiply+0x28>
 800c45e:	3101      	adds	r1, #1
 800c460:	f7ff fe92 	bl	800c188 <_Balloc>
 800c464:	9002      	str	r0, [sp, #8]
 800c466:	2800      	cmp	r0, #0
 800c468:	d106      	bne.n	800c478 <__multiply+0x40>
 800c46a:	21b1      	movs	r1, #177	; 0xb1
 800c46c:	4b48      	ldr	r3, [pc, #288]	; (800c590 <__multiply+0x158>)
 800c46e:	4849      	ldr	r0, [pc, #292]	; (800c594 <__multiply+0x15c>)
 800c470:	9a02      	ldr	r2, [sp, #8]
 800c472:	0049      	lsls	r1, r1, #1
 800c474:	f000 ff5c 	bl	800d330 <__assert_func>
 800c478:	9b02      	ldr	r3, [sp, #8]
 800c47a:	2200      	movs	r2, #0
 800c47c:	3314      	adds	r3, #20
 800c47e:	469c      	mov	ip, r3
 800c480:	19bb      	adds	r3, r7, r6
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4463      	add	r3, ip
 800c486:	9304      	str	r3, [sp, #16]
 800c488:	4663      	mov	r3, ip
 800c48a:	9904      	ldr	r1, [sp, #16]
 800c48c:	428b      	cmp	r3, r1
 800c48e:	d32a      	bcc.n	800c4e6 <__multiply+0xae>
 800c490:	0023      	movs	r3, r4
 800c492:	00bf      	lsls	r7, r7, #2
 800c494:	3314      	adds	r3, #20
 800c496:	3514      	adds	r5, #20
 800c498:	9308      	str	r3, [sp, #32]
 800c49a:	00b6      	lsls	r6, r6, #2
 800c49c:	19db      	adds	r3, r3, r7
 800c49e:	9305      	str	r3, [sp, #20]
 800c4a0:	19ab      	adds	r3, r5, r6
 800c4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a4:	2304      	movs	r3, #4
 800c4a6:	9306      	str	r3, [sp, #24]
 800c4a8:	0023      	movs	r3, r4
 800c4aa:	9a05      	ldr	r2, [sp, #20]
 800c4ac:	3315      	adds	r3, #21
 800c4ae:	9501      	str	r5, [sp, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d305      	bcc.n	800c4c0 <__multiply+0x88>
 800c4b4:	1b13      	subs	r3, r2, r4
 800c4b6:	3b15      	subs	r3, #21
 800c4b8:	089b      	lsrs	r3, r3, #2
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	9306      	str	r3, [sp, #24]
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d310      	bcc.n	800c4ea <__multiply+0xb2>
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dd05      	ble.n	800c4da <__multiply+0xa2>
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	3b04      	subs	r3, #4
 800c4d2:	9304      	str	r3, [sp, #16]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d056      	beq.n	800c588 <__multiply+0x150>
 800c4da:	9b02      	ldr	r3, [sp, #8]
 800c4dc:	9a03      	ldr	r2, [sp, #12]
 800c4de:	0018      	movs	r0, r3
 800c4e0:	611a      	str	r2, [r3, #16]
 800c4e2:	b00b      	add	sp, #44	; 0x2c
 800c4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e6:	c304      	stmia	r3!, {r2}
 800c4e8:	e7cf      	b.n	800c48a <__multiply+0x52>
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	6818      	ldr	r0, [r3, #0]
 800c4ee:	b280      	uxth	r0, r0
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d01e      	beq.n	800c532 <__multiply+0xfa>
 800c4f4:	4667      	mov	r7, ip
 800c4f6:	2500      	movs	r5, #0
 800c4f8:	9e08      	ldr	r6, [sp, #32]
 800c4fa:	ce02      	ldmia	r6!, {r1}
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	9307      	str	r3, [sp, #28]
 800c500:	b28b      	uxth	r3, r1
 800c502:	4343      	muls	r3, r0
 800c504:	001a      	movs	r2, r3
 800c506:	466b      	mov	r3, sp
 800c508:	8b9b      	ldrh	r3, [r3, #28]
 800c50a:	18d3      	adds	r3, r2, r3
 800c50c:	195b      	adds	r3, r3, r5
 800c50e:	0c0d      	lsrs	r5, r1, #16
 800c510:	4345      	muls	r5, r0
 800c512:	9a07      	ldr	r2, [sp, #28]
 800c514:	0c11      	lsrs	r1, r2, #16
 800c516:	1869      	adds	r1, r5, r1
 800c518:	0c1a      	lsrs	r2, r3, #16
 800c51a:	188a      	adds	r2, r1, r2
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	0c15      	lsrs	r5, r2, #16
 800c520:	0412      	lsls	r2, r2, #16
 800c522:	431a      	orrs	r2, r3
 800c524:	9b05      	ldr	r3, [sp, #20]
 800c526:	c704      	stmia	r7!, {r2}
 800c528:	42b3      	cmp	r3, r6
 800c52a:	d8e6      	bhi.n	800c4fa <__multiply+0xc2>
 800c52c:	4663      	mov	r3, ip
 800c52e:	9a06      	ldr	r2, [sp, #24]
 800c530:	509d      	str	r5, [r3, r2]
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	6818      	ldr	r0, [r3, #0]
 800c536:	0c00      	lsrs	r0, r0, #16
 800c538:	d020      	beq.n	800c57c <__multiply+0x144>
 800c53a:	4663      	mov	r3, ip
 800c53c:	0025      	movs	r5, r4
 800c53e:	4661      	mov	r1, ip
 800c540:	2700      	movs	r7, #0
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3514      	adds	r5, #20
 800c546:	682a      	ldr	r2, [r5, #0]
 800c548:	680e      	ldr	r6, [r1, #0]
 800c54a:	b292      	uxth	r2, r2
 800c54c:	4342      	muls	r2, r0
 800c54e:	0c36      	lsrs	r6, r6, #16
 800c550:	1992      	adds	r2, r2, r6
 800c552:	19d2      	adds	r2, r2, r7
 800c554:	0416      	lsls	r6, r2, #16
 800c556:	b29b      	uxth	r3, r3
 800c558:	431e      	orrs	r6, r3
 800c55a:	600e      	str	r6, [r1, #0]
 800c55c:	cd40      	ldmia	r5!, {r6}
 800c55e:	684b      	ldr	r3, [r1, #4]
 800c560:	0c36      	lsrs	r6, r6, #16
 800c562:	4346      	muls	r6, r0
 800c564:	b29b      	uxth	r3, r3
 800c566:	0c12      	lsrs	r2, r2, #16
 800c568:	18f3      	adds	r3, r6, r3
 800c56a:	189b      	adds	r3, r3, r2
 800c56c:	9a05      	ldr	r2, [sp, #20]
 800c56e:	0c1f      	lsrs	r7, r3, #16
 800c570:	3104      	adds	r1, #4
 800c572:	42aa      	cmp	r2, r5
 800c574:	d8e7      	bhi.n	800c546 <__multiply+0x10e>
 800c576:	4662      	mov	r2, ip
 800c578:	9906      	ldr	r1, [sp, #24]
 800c57a:	5053      	str	r3, [r2, r1]
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	3304      	adds	r3, #4
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	2304      	movs	r3, #4
 800c584:	449c      	add	ip, r3
 800c586:	e79b      	b.n	800c4c0 <__multiply+0x88>
 800c588:	9b03      	ldr	r3, [sp, #12]
 800c58a:	3b01      	subs	r3, #1
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	e79b      	b.n	800c4c8 <__multiply+0x90>
 800c590:	0800d90e 	.word	0x0800d90e
 800c594:	0800d97f 	.word	0x0800d97f

0800c598 <__pow5mult>:
 800c598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c59a:	2303      	movs	r3, #3
 800c59c:	0015      	movs	r5, r2
 800c59e:	0007      	movs	r7, r0
 800c5a0:	000e      	movs	r6, r1
 800c5a2:	401a      	ands	r2, r3
 800c5a4:	421d      	tst	r5, r3
 800c5a6:	d008      	beq.n	800c5ba <__pow5mult+0x22>
 800c5a8:	4925      	ldr	r1, [pc, #148]	; (800c640 <__pow5mult+0xa8>)
 800c5aa:	3a01      	subs	r2, #1
 800c5ac:	0092      	lsls	r2, r2, #2
 800c5ae:	5852      	ldr	r2, [r2, r1]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	0031      	movs	r1, r6
 800c5b4:	f7ff fe50 	bl	800c258 <__multadd>
 800c5b8:	0006      	movs	r6, r0
 800c5ba:	10ad      	asrs	r5, r5, #2
 800c5bc:	d03d      	beq.n	800c63a <__pow5mult+0xa2>
 800c5be:	69fc      	ldr	r4, [r7, #28]
 800c5c0:	2c00      	cmp	r4, #0
 800c5c2:	d10f      	bne.n	800c5e4 <__pow5mult+0x4c>
 800c5c4:	2010      	movs	r0, #16
 800c5c6:	f7ff fd0f 	bl	800bfe8 <malloc>
 800c5ca:	1e02      	subs	r2, r0, #0
 800c5cc:	61f8      	str	r0, [r7, #28]
 800c5ce:	d105      	bne.n	800c5dc <__pow5mult+0x44>
 800c5d0:	21b4      	movs	r1, #180	; 0xb4
 800c5d2:	4b1c      	ldr	r3, [pc, #112]	; (800c644 <__pow5mult+0xac>)
 800c5d4:	481c      	ldr	r0, [pc, #112]	; (800c648 <__pow5mult+0xb0>)
 800c5d6:	31ff      	adds	r1, #255	; 0xff
 800c5d8:	f000 feaa 	bl	800d330 <__assert_func>
 800c5dc:	6044      	str	r4, [r0, #4]
 800c5de:	6084      	str	r4, [r0, #8]
 800c5e0:	6004      	str	r4, [r0, #0]
 800c5e2:	60c4      	str	r4, [r0, #12]
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	689c      	ldr	r4, [r3, #8]
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	2c00      	cmp	r4, #0
 800c5ec:	d108      	bne.n	800c600 <__pow5mult+0x68>
 800c5ee:	0038      	movs	r0, r7
 800c5f0:	4916      	ldr	r1, [pc, #88]	; (800c64c <__pow5mult+0xb4>)
 800c5f2:	f7ff ff09 	bl	800c408 <__i2b>
 800c5f6:	9b01      	ldr	r3, [sp, #4]
 800c5f8:	0004      	movs	r4, r0
 800c5fa:	6098      	str	r0, [r3, #8]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	6003      	str	r3, [r0, #0]
 800c600:	2301      	movs	r3, #1
 800c602:	421d      	tst	r5, r3
 800c604:	d00a      	beq.n	800c61c <__pow5mult+0x84>
 800c606:	0031      	movs	r1, r6
 800c608:	0022      	movs	r2, r4
 800c60a:	0038      	movs	r0, r7
 800c60c:	f7ff ff14 	bl	800c438 <__multiply>
 800c610:	0031      	movs	r1, r6
 800c612:	9001      	str	r0, [sp, #4]
 800c614:	0038      	movs	r0, r7
 800c616:	f7ff fdfb 	bl	800c210 <_Bfree>
 800c61a:	9e01      	ldr	r6, [sp, #4]
 800c61c:	106d      	asrs	r5, r5, #1
 800c61e:	d00c      	beq.n	800c63a <__pow5mult+0xa2>
 800c620:	6820      	ldr	r0, [r4, #0]
 800c622:	2800      	cmp	r0, #0
 800c624:	d107      	bne.n	800c636 <__pow5mult+0x9e>
 800c626:	0022      	movs	r2, r4
 800c628:	0021      	movs	r1, r4
 800c62a:	0038      	movs	r0, r7
 800c62c:	f7ff ff04 	bl	800c438 <__multiply>
 800c630:	2300      	movs	r3, #0
 800c632:	6020      	str	r0, [r4, #0]
 800c634:	6003      	str	r3, [r0, #0]
 800c636:	0004      	movs	r4, r0
 800c638:	e7e2      	b.n	800c600 <__pow5mult+0x68>
 800c63a:	0030      	movs	r0, r6
 800c63c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c63e:	46c0      	nop			; (mov r8, r8)
 800c640:	0800dac8 	.word	0x0800dac8
 800c644:	0800d89f 	.word	0x0800d89f
 800c648:	0800d97f 	.word	0x0800d97f
 800c64c:	00000271 	.word	0x00000271

0800c650 <__lshift>:
 800c650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c652:	000c      	movs	r4, r1
 800c654:	0017      	movs	r7, r2
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	1155      	asrs	r5, r2, #5
 800c65a:	b087      	sub	sp, #28
 800c65c:	18eb      	adds	r3, r5, r3
 800c65e:	9302      	str	r3, [sp, #8]
 800c660:	3301      	adds	r3, #1
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	6849      	ldr	r1, [r1, #4]
 800c666:	68a3      	ldr	r3, [r4, #8]
 800c668:	9004      	str	r0, [sp, #16]
 800c66a:	9a01      	ldr	r2, [sp, #4]
 800c66c:	4293      	cmp	r3, r2
 800c66e:	db10      	blt.n	800c692 <__lshift+0x42>
 800c670:	9804      	ldr	r0, [sp, #16]
 800c672:	f7ff fd89 	bl	800c188 <_Balloc>
 800c676:	2300      	movs	r3, #0
 800c678:	0002      	movs	r2, r0
 800c67a:	0006      	movs	r6, r0
 800c67c:	0019      	movs	r1, r3
 800c67e:	3214      	adds	r2, #20
 800c680:	4298      	cmp	r0, r3
 800c682:	d10c      	bne.n	800c69e <__lshift+0x4e>
 800c684:	31df      	adds	r1, #223	; 0xdf
 800c686:	0032      	movs	r2, r6
 800c688:	4b26      	ldr	r3, [pc, #152]	; (800c724 <__lshift+0xd4>)
 800c68a:	4827      	ldr	r0, [pc, #156]	; (800c728 <__lshift+0xd8>)
 800c68c:	31ff      	adds	r1, #255	; 0xff
 800c68e:	f000 fe4f 	bl	800d330 <__assert_func>
 800c692:	3101      	adds	r1, #1
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	e7e8      	b.n	800c66a <__lshift+0x1a>
 800c698:	0098      	lsls	r0, r3, #2
 800c69a:	5011      	str	r1, [r2, r0]
 800c69c:	3301      	adds	r3, #1
 800c69e:	42ab      	cmp	r3, r5
 800c6a0:	dbfa      	blt.n	800c698 <__lshift+0x48>
 800c6a2:	43eb      	mvns	r3, r5
 800c6a4:	17db      	asrs	r3, r3, #31
 800c6a6:	401d      	ands	r5, r3
 800c6a8:	211f      	movs	r1, #31
 800c6aa:	0023      	movs	r3, r4
 800c6ac:	0038      	movs	r0, r7
 800c6ae:	00ad      	lsls	r5, r5, #2
 800c6b0:	1955      	adds	r5, r2, r5
 800c6b2:	6922      	ldr	r2, [r4, #16]
 800c6b4:	3314      	adds	r3, #20
 800c6b6:	0092      	lsls	r2, r2, #2
 800c6b8:	4008      	ands	r0, r1
 800c6ba:	4684      	mov	ip, r0
 800c6bc:	189a      	adds	r2, r3, r2
 800c6be:	420f      	tst	r7, r1
 800c6c0:	d02a      	beq.n	800c718 <__lshift+0xc8>
 800c6c2:	3101      	adds	r1, #1
 800c6c4:	1a09      	subs	r1, r1, r0
 800c6c6:	9105      	str	r1, [sp, #20]
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	9503      	str	r5, [sp, #12]
 800c6cc:	4667      	mov	r7, ip
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	40b8      	lsls	r0, r7
 800c6d2:	4308      	orrs	r0, r1
 800c6d4:	9903      	ldr	r1, [sp, #12]
 800c6d6:	c101      	stmia	r1!, {r0}
 800c6d8:	9103      	str	r1, [sp, #12]
 800c6da:	9805      	ldr	r0, [sp, #20]
 800c6dc:	cb02      	ldmia	r3!, {r1}
 800c6de:	40c1      	lsrs	r1, r0
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d8f3      	bhi.n	800c6cc <__lshift+0x7c>
 800c6e4:	0020      	movs	r0, r4
 800c6e6:	3015      	adds	r0, #21
 800c6e8:	2304      	movs	r3, #4
 800c6ea:	4282      	cmp	r2, r0
 800c6ec:	d304      	bcc.n	800c6f8 <__lshift+0xa8>
 800c6ee:	1b13      	subs	r3, r2, r4
 800c6f0:	3b15      	subs	r3, #21
 800c6f2:	089b      	lsrs	r3, r3, #2
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	50e9      	str	r1, [r5, r3]
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	d002      	beq.n	800c704 <__lshift+0xb4>
 800c6fe:	9b02      	ldr	r3, [sp, #8]
 800c700:	3302      	adds	r3, #2
 800c702:	9301      	str	r3, [sp, #4]
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	9804      	ldr	r0, [sp, #16]
 800c708:	3b01      	subs	r3, #1
 800c70a:	0021      	movs	r1, r4
 800c70c:	6133      	str	r3, [r6, #16]
 800c70e:	f7ff fd7f 	bl	800c210 <_Bfree>
 800c712:	0030      	movs	r0, r6
 800c714:	b007      	add	sp, #28
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c718:	cb02      	ldmia	r3!, {r1}
 800c71a:	c502      	stmia	r5!, {r1}
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d8fb      	bhi.n	800c718 <__lshift+0xc8>
 800c720:	e7f0      	b.n	800c704 <__lshift+0xb4>
 800c722:	46c0      	nop			; (mov r8, r8)
 800c724:	0800d90e 	.word	0x0800d90e
 800c728:	0800d97f 	.word	0x0800d97f

0800c72c <__mcmp>:
 800c72c:	b530      	push	{r4, r5, lr}
 800c72e:	690b      	ldr	r3, [r1, #16]
 800c730:	6904      	ldr	r4, [r0, #16]
 800c732:	0002      	movs	r2, r0
 800c734:	1ae0      	subs	r0, r4, r3
 800c736:	429c      	cmp	r4, r3
 800c738:	d10e      	bne.n	800c758 <__mcmp+0x2c>
 800c73a:	3214      	adds	r2, #20
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	3114      	adds	r1, #20
 800c740:	0014      	movs	r4, r2
 800c742:	18c9      	adds	r1, r1, r3
 800c744:	18d2      	adds	r2, r2, r3
 800c746:	3a04      	subs	r2, #4
 800c748:	3904      	subs	r1, #4
 800c74a:	6815      	ldr	r5, [r2, #0]
 800c74c:	680b      	ldr	r3, [r1, #0]
 800c74e:	429d      	cmp	r5, r3
 800c750:	d003      	beq.n	800c75a <__mcmp+0x2e>
 800c752:	2001      	movs	r0, #1
 800c754:	429d      	cmp	r5, r3
 800c756:	d303      	bcc.n	800c760 <__mcmp+0x34>
 800c758:	bd30      	pop	{r4, r5, pc}
 800c75a:	4294      	cmp	r4, r2
 800c75c:	d3f3      	bcc.n	800c746 <__mcmp+0x1a>
 800c75e:	e7fb      	b.n	800c758 <__mcmp+0x2c>
 800c760:	4240      	negs	r0, r0
 800c762:	e7f9      	b.n	800c758 <__mcmp+0x2c>

0800c764 <__mdiff>:
 800c764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c766:	000e      	movs	r6, r1
 800c768:	0007      	movs	r7, r0
 800c76a:	0011      	movs	r1, r2
 800c76c:	0030      	movs	r0, r6
 800c76e:	b087      	sub	sp, #28
 800c770:	0014      	movs	r4, r2
 800c772:	f7ff ffdb 	bl	800c72c <__mcmp>
 800c776:	1e05      	subs	r5, r0, #0
 800c778:	d110      	bne.n	800c79c <__mdiff+0x38>
 800c77a:	0001      	movs	r1, r0
 800c77c:	0038      	movs	r0, r7
 800c77e:	f7ff fd03 	bl	800c188 <_Balloc>
 800c782:	1e02      	subs	r2, r0, #0
 800c784:	d104      	bne.n	800c790 <__mdiff+0x2c>
 800c786:	4b3f      	ldr	r3, [pc, #252]	; (800c884 <__mdiff+0x120>)
 800c788:	483f      	ldr	r0, [pc, #252]	; (800c888 <__mdiff+0x124>)
 800c78a:	4940      	ldr	r1, [pc, #256]	; (800c88c <__mdiff+0x128>)
 800c78c:	f000 fdd0 	bl	800d330 <__assert_func>
 800c790:	2301      	movs	r3, #1
 800c792:	6145      	str	r5, [r0, #20]
 800c794:	6103      	str	r3, [r0, #16]
 800c796:	0010      	movs	r0, r2
 800c798:	b007      	add	sp, #28
 800c79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c79c:	2301      	movs	r3, #1
 800c79e:	9301      	str	r3, [sp, #4]
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	db04      	blt.n	800c7ae <__mdiff+0x4a>
 800c7a4:	0023      	movs	r3, r4
 800c7a6:	0034      	movs	r4, r6
 800c7a8:	001e      	movs	r6, r3
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9301      	str	r3, [sp, #4]
 800c7ae:	0038      	movs	r0, r7
 800c7b0:	6861      	ldr	r1, [r4, #4]
 800c7b2:	f7ff fce9 	bl	800c188 <_Balloc>
 800c7b6:	1e02      	subs	r2, r0, #0
 800c7b8:	d103      	bne.n	800c7c2 <__mdiff+0x5e>
 800c7ba:	4b32      	ldr	r3, [pc, #200]	; (800c884 <__mdiff+0x120>)
 800c7bc:	4832      	ldr	r0, [pc, #200]	; (800c888 <__mdiff+0x124>)
 800c7be:	4934      	ldr	r1, [pc, #208]	; (800c890 <__mdiff+0x12c>)
 800c7c0:	e7e4      	b.n	800c78c <__mdiff+0x28>
 800c7c2:	9b01      	ldr	r3, [sp, #4]
 800c7c4:	2700      	movs	r7, #0
 800c7c6:	60c3      	str	r3, [r0, #12]
 800c7c8:	6920      	ldr	r0, [r4, #16]
 800c7ca:	3414      	adds	r4, #20
 800c7cc:	0083      	lsls	r3, r0, #2
 800c7ce:	18e3      	adds	r3, r4, r3
 800c7d0:	0021      	movs	r1, r4
 800c7d2:	9401      	str	r4, [sp, #4]
 800c7d4:	0034      	movs	r4, r6
 800c7d6:	9302      	str	r3, [sp, #8]
 800c7d8:	6933      	ldr	r3, [r6, #16]
 800c7da:	3414      	adds	r4, #20
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	18e3      	adds	r3, r4, r3
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	0013      	movs	r3, r2
 800c7e4:	3314      	adds	r3, #20
 800c7e6:	469c      	mov	ip, r3
 800c7e8:	9305      	str	r3, [sp, #20]
 800c7ea:	9104      	str	r1, [sp, #16]
 800c7ec:	9b04      	ldr	r3, [sp, #16]
 800c7ee:	cc02      	ldmia	r4!, {r1}
 800c7f0:	cb20      	ldmia	r3!, {r5}
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	b2ab      	uxth	r3, r5
 800c7f6:	19df      	adds	r7, r3, r7
 800c7f8:	b28b      	uxth	r3, r1
 800c7fa:	1afb      	subs	r3, r7, r3
 800c7fc:	0c09      	lsrs	r1, r1, #16
 800c7fe:	0c2d      	lsrs	r5, r5, #16
 800c800:	1a6d      	subs	r5, r5, r1
 800c802:	1419      	asrs	r1, r3, #16
 800c804:	1869      	adds	r1, r5, r1
 800c806:	b29b      	uxth	r3, r3
 800c808:	140f      	asrs	r7, r1, #16
 800c80a:	0409      	lsls	r1, r1, #16
 800c80c:	4319      	orrs	r1, r3
 800c80e:	4663      	mov	r3, ip
 800c810:	c302      	stmia	r3!, {r1}
 800c812:	469c      	mov	ip, r3
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	42a3      	cmp	r3, r4
 800c818:	d8e8      	bhi.n	800c7ec <__mdiff+0x88>
 800c81a:	0031      	movs	r1, r6
 800c81c:	9c03      	ldr	r4, [sp, #12]
 800c81e:	3115      	adds	r1, #21
 800c820:	2304      	movs	r3, #4
 800c822:	428c      	cmp	r4, r1
 800c824:	d304      	bcc.n	800c830 <__mdiff+0xcc>
 800c826:	1ba3      	subs	r3, r4, r6
 800c828:	3b15      	subs	r3, #21
 800c82a:	089b      	lsrs	r3, r3, #2
 800c82c:	3301      	adds	r3, #1
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	9901      	ldr	r1, [sp, #4]
 800c832:	18cd      	adds	r5, r1, r3
 800c834:	9905      	ldr	r1, [sp, #20]
 800c836:	002e      	movs	r6, r5
 800c838:	18cb      	adds	r3, r1, r3
 800c83a:	469c      	mov	ip, r3
 800c83c:	9902      	ldr	r1, [sp, #8]
 800c83e:	428e      	cmp	r6, r1
 800c840:	d310      	bcc.n	800c864 <__mdiff+0x100>
 800c842:	9e02      	ldr	r6, [sp, #8]
 800c844:	1ee9      	subs	r1, r5, #3
 800c846:	2400      	movs	r4, #0
 800c848:	428e      	cmp	r6, r1
 800c84a:	d304      	bcc.n	800c856 <__mdiff+0xf2>
 800c84c:	0031      	movs	r1, r6
 800c84e:	3103      	adds	r1, #3
 800c850:	1b49      	subs	r1, r1, r5
 800c852:	0889      	lsrs	r1, r1, #2
 800c854:	008c      	lsls	r4, r1, #2
 800c856:	191b      	adds	r3, r3, r4
 800c858:	3b04      	subs	r3, #4
 800c85a:	6819      	ldr	r1, [r3, #0]
 800c85c:	2900      	cmp	r1, #0
 800c85e:	d00f      	beq.n	800c880 <__mdiff+0x11c>
 800c860:	6110      	str	r0, [r2, #16]
 800c862:	e798      	b.n	800c796 <__mdiff+0x32>
 800c864:	ce02      	ldmia	r6!, {r1}
 800c866:	b28c      	uxth	r4, r1
 800c868:	19e4      	adds	r4, r4, r7
 800c86a:	0c0f      	lsrs	r7, r1, #16
 800c86c:	1421      	asrs	r1, r4, #16
 800c86e:	1879      	adds	r1, r7, r1
 800c870:	b2a4      	uxth	r4, r4
 800c872:	140f      	asrs	r7, r1, #16
 800c874:	0409      	lsls	r1, r1, #16
 800c876:	4321      	orrs	r1, r4
 800c878:	4664      	mov	r4, ip
 800c87a:	c402      	stmia	r4!, {r1}
 800c87c:	46a4      	mov	ip, r4
 800c87e:	e7dd      	b.n	800c83c <__mdiff+0xd8>
 800c880:	3801      	subs	r0, #1
 800c882:	e7e9      	b.n	800c858 <__mdiff+0xf4>
 800c884:	0800d90e 	.word	0x0800d90e
 800c888:	0800d97f 	.word	0x0800d97f
 800c88c:	00000237 	.word	0x00000237
 800c890:	00000245 	.word	0x00000245

0800c894 <__ulp>:
 800c894:	2000      	movs	r0, #0
 800c896:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <__ulp+0x30>)
 800c898:	4019      	ands	r1, r3
 800c89a:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <__ulp+0x34>)
 800c89c:	18c9      	adds	r1, r1, r3
 800c89e:	4281      	cmp	r1, r0
 800c8a0:	dc06      	bgt.n	800c8b0 <__ulp+0x1c>
 800c8a2:	4249      	negs	r1, r1
 800c8a4:	150b      	asrs	r3, r1, #20
 800c8a6:	2b13      	cmp	r3, #19
 800c8a8:	dc03      	bgt.n	800c8b2 <__ulp+0x1e>
 800c8aa:	2180      	movs	r1, #128	; 0x80
 800c8ac:	0309      	lsls	r1, r1, #12
 800c8ae:	4119      	asrs	r1, r3
 800c8b0:	4770      	bx	lr
 800c8b2:	3b14      	subs	r3, #20
 800c8b4:	2001      	movs	r0, #1
 800c8b6:	2b1e      	cmp	r3, #30
 800c8b8:	dc02      	bgt.n	800c8c0 <__ulp+0x2c>
 800c8ba:	2080      	movs	r0, #128	; 0x80
 800c8bc:	0600      	lsls	r0, r0, #24
 800c8be:	40d8      	lsrs	r0, r3
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	e7f5      	b.n	800c8b0 <__ulp+0x1c>
 800c8c4:	7ff00000 	.word	0x7ff00000
 800c8c8:	fcc00000 	.word	0xfcc00000

0800c8cc <__b2d>:
 800c8cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8ce:	0006      	movs	r6, r0
 800c8d0:	6903      	ldr	r3, [r0, #16]
 800c8d2:	3614      	adds	r6, #20
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	18f3      	adds	r3, r6, r3
 800c8d8:	1f1d      	subs	r5, r3, #4
 800c8da:	682c      	ldr	r4, [r5, #0]
 800c8dc:	000f      	movs	r7, r1
 800c8de:	0020      	movs	r0, r4
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	f7ff fd49 	bl	800c378 <__hi0bits>
 800c8e6:	2220      	movs	r2, #32
 800c8e8:	1a12      	subs	r2, r2, r0
 800c8ea:	603a      	str	r2, [r7, #0]
 800c8ec:	0003      	movs	r3, r0
 800c8ee:	4a1c      	ldr	r2, [pc, #112]	; (800c960 <__b2d+0x94>)
 800c8f0:	280a      	cmp	r0, #10
 800c8f2:	dc15      	bgt.n	800c920 <__b2d+0x54>
 800c8f4:	210b      	movs	r1, #11
 800c8f6:	0027      	movs	r7, r4
 800c8f8:	1a09      	subs	r1, r1, r0
 800c8fa:	40cf      	lsrs	r7, r1
 800c8fc:	433a      	orrs	r2, r7
 800c8fe:	468c      	mov	ip, r1
 800c900:	0011      	movs	r1, r2
 800c902:	2200      	movs	r2, #0
 800c904:	42ae      	cmp	r6, r5
 800c906:	d202      	bcs.n	800c90e <__b2d+0x42>
 800c908:	9a01      	ldr	r2, [sp, #4]
 800c90a:	3a08      	subs	r2, #8
 800c90c:	6812      	ldr	r2, [r2, #0]
 800c90e:	3315      	adds	r3, #21
 800c910:	409c      	lsls	r4, r3
 800c912:	4663      	mov	r3, ip
 800c914:	0027      	movs	r7, r4
 800c916:	40da      	lsrs	r2, r3
 800c918:	4317      	orrs	r7, r2
 800c91a:	0038      	movs	r0, r7
 800c91c:	b003      	add	sp, #12
 800c91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c920:	2700      	movs	r7, #0
 800c922:	42ae      	cmp	r6, r5
 800c924:	d202      	bcs.n	800c92c <__b2d+0x60>
 800c926:	9d01      	ldr	r5, [sp, #4]
 800c928:	3d08      	subs	r5, #8
 800c92a:	682f      	ldr	r7, [r5, #0]
 800c92c:	210b      	movs	r1, #11
 800c92e:	4249      	negs	r1, r1
 800c930:	468c      	mov	ip, r1
 800c932:	449c      	add	ip, r3
 800c934:	2b0b      	cmp	r3, #11
 800c936:	d010      	beq.n	800c95a <__b2d+0x8e>
 800c938:	4661      	mov	r1, ip
 800c93a:	2320      	movs	r3, #32
 800c93c:	408c      	lsls	r4, r1
 800c93e:	1a5b      	subs	r3, r3, r1
 800c940:	0039      	movs	r1, r7
 800c942:	40d9      	lsrs	r1, r3
 800c944:	430c      	orrs	r4, r1
 800c946:	4322      	orrs	r2, r4
 800c948:	0011      	movs	r1, r2
 800c94a:	2200      	movs	r2, #0
 800c94c:	42b5      	cmp	r5, r6
 800c94e:	d901      	bls.n	800c954 <__b2d+0x88>
 800c950:	3d04      	subs	r5, #4
 800c952:	682a      	ldr	r2, [r5, #0]
 800c954:	4664      	mov	r4, ip
 800c956:	40a7      	lsls	r7, r4
 800c958:	e7dd      	b.n	800c916 <__b2d+0x4a>
 800c95a:	4322      	orrs	r2, r4
 800c95c:	0011      	movs	r1, r2
 800c95e:	e7dc      	b.n	800c91a <__b2d+0x4e>
 800c960:	3ff00000 	.word	0x3ff00000

0800c964 <__d2b>:
 800c964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c966:	2101      	movs	r1, #1
 800c968:	0014      	movs	r4, r2
 800c96a:	001d      	movs	r5, r3
 800c96c:	9f08      	ldr	r7, [sp, #32]
 800c96e:	f7ff fc0b 	bl	800c188 <_Balloc>
 800c972:	1e06      	subs	r6, r0, #0
 800c974:	d105      	bne.n	800c982 <__d2b+0x1e>
 800c976:	0032      	movs	r2, r6
 800c978:	4b24      	ldr	r3, [pc, #144]	; (800ca0c <__d2b+0xa8>)
 800c97a:	4825      	ldr	r0, [pc, #148]	; (800ca10 <__d2b+0xac>)
 800c97c:	4925      	ldr	r1, [pc, #148]	; (800ca14 <__d2b+0xb0>)
 800c97e:	f000 fcd7 	bl	800d330 <__assert_func>
 800c982:	032b      	lsls	r3, r5, #12
 800c984:	006d      	lsls	r5, r5, #1
 800c986:	0b1b      	lsrs	r3, r3, #12
 800c988:	0d6d      	lsrs	r5, r5, #21
 800c98a:	d125      	bne.n	800c9d8 <__d2b+0x74>
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	2c00      	cmp	r4, #0
 800c990:	d028      	beq.n	800c9e4 <__d2b+0x80>
 800c992:	4668      	mov	r0, sp
 800c994:	9400      	str	r4, [sp, #0]
 800c996:	f7ff fd09 	bl	800c3ac <__lo0bits>
 800c99a:	9b01      	ldr	r3, [sp, #4]
 800c99c:	9900      	ldr	r1, [sp, #0]
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d01e      	beq.n	800c9e0 <__d2b+0x7c>
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	001c      	movs	r4, r3
 800c9a6:	1a12      	subs	r2, r2, r0
 800c9a8:	4094      	lsls	r4, r2
 800c9aa:	0022      	movs	r2, r4
 800c9ac:	40c3      	lsrs	r3, r0
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	6172      	str	r2, [r6, #20]
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	9c01      	ldr	r4, [sp, #4]
 800c9b6:	61b4      	str	r4, [r6, #24]
 800c9b8:	1e63      	subs	r3, r4, #1
 800c9ba:	419c      	sbcs	r4, r3
 800c9bc:	3401      	adds	r4, #1
 800c9be:	6134      	str	r4, [r6, #16]
 800c9c0:	2d00      	cmp	r5, #0
 800c9c2:	d017      	beq.n	800c9f4 <__d2b+0x90>
 800c9c4:	2435      	movs	r4, #53	; 0x35
 800c9c6:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <__d2b+0xb4>)
 800c9c8:	18ed      	adds	r5, r5, r3
 800c9ca:	182d      	adds	r5, r5, r0
 800c9cc:	603d      	str	r5, [r7, #0]
 800c9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d0:	1a24      	subs	r4, r4, r0
 800c9d2:	601c      	str	r4, [r3, #0]
 800c9d4:	0030      	movs	r0, r6
 800c9d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9d8:	2280      	movs	r2, #128	; 0x80
 800c9da:	0352      	lsls	r2, r2, #13
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	e7d5      	b.n	800c98c <__d2b+0x28>
 800c9e0:	6171      	str	r1, [r6, #20]
 800c9e2:	e7e7      	b.n	800c9b4 <__d2b+0x50>
 800c9e4:	a801      	add	r0, sp, #4
 800c9e6:	f7ff fce1 	bl	800c3ac <__lo0bits>
 800c9ea:	9b01      	ldr	r3, [sp, #4]
 800c9ec:	2401      	movs	r4, #1
 800c9ee:	6173      	str	r3, [r6, #20]
 800c9f0:	3020      	adds	r0, #32
 800c9f2:	e7e4      	b.n	800c9be <__d2b+0x5a>
 800c9f4:	4b09      	ldr	r3, [pc, #36]	; (800ca1c <__d2b+0xb8>)
 800c9f6:	18c0      	adds	r0, r0, r3
 800c9f8:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <__d2b+0xbc>)
 800c9fa:	6038      	str	r0, [r7, #0]
 800c9fc:	18e3      	adds	r3, r4, r3
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	18f3      	adds	r3, r6, r3
 800ca02:	6958      	ldr	r0, [r3, #20]
 800ca04:	f7ff fcb8 	bl	800c378 <__hi0bits>
 800ca08:	0164      	lsls	r4, r4, #5
 800ca0a:	e7e0      	b.n	800c9ce <__d2b+0x6a>
 800ca0c:	0800d90e 	.word	0x0800d90e
 800ca10:	0800d97f 	.word	0x0800d97f
 800ca14:	0000030f 	.word	0x0000030f
 800ca18:	fffffbcd 	.word	0xfffffbcd
 800ca1c:	fffffbce 	.word	0xfffffbce
 800ca20:	3fffffff 	.word	0x3fffffff

0800ca24 <__ratio>:
 800ca24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca26:	b087      	sub	sp, #28
 800ca28:	000f      	movs	r7, r1
 800ca2a:	a904      	add	r1, sp, #16
 800ca2c:	0006      	movs	r6, r0
 800ca2e:	f7ff ff4d 	bl	800c8cc <__b2d>
 800ca32:	9000      	str	r0, [sp, #0]
 800ca34:	9101      	str	r1, [sp, #4]
 800ca36:	9c00      	ldr	r4, [sp, #0]
 800ca38:	9d01      	ldr	r5, [sp, #4]
 800ca3a:	0038      	movs	r0, r7
 800ca3c:	a905      	add	r1, sp, #20
 800ca3e:	f7ff ff45 	bl	800c8cc <__b2d>
 800ca42:	9002      	str	r0, [sp, #8]
 800ca44:	9103      	str	r1, [sp, #12]
 800ca46:	9a02      	ldr	r2, [sp, #8]
 800ca48:	9b03      	ldr	r3, [sp, #12]
 800ca4a:	6930      	ldr	r0, [r6, #16]
 800ca4c:	6939      	ldr	r1, [r7, #16]
 800ca4e:	9e04      	ldr	r6, [sp, #16]
 800ca50:	1a40      	subs	r0, r0, r1
 800ca52:	9905      	ldr	r1, [sp, #20]
 800ca54:	0140      	lsls	r0, r0, #5
 800ca56:	1a71      	subs	r1, r6, r1
 800ca58:	1841      	adds	r1, r0, r1
 800ca5a:	0508      	lsls	r0, r1, #20
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	dd07      	ble.n	800ca70 <__ratio+0x4c>
 800ca60:	9901      	ldr	r1, [sp, #4]
 800ca62:	1845      	adds	r5, r0, r1
 800ca64:	0020      	movs	r0, r4
 800ca66:	0029      	movs	r1, r5
 800ca68:	f7f4 fe58 	bl	800171c <__aeabi_ddiv>
 800ca6c:	b007      	add	sp, #28
 800ca6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca70:	9903      	ldr	r1, [sp, #12]
 800ca72:	1a0b      	subs	r3, r1, r0
 800ca74:	e7f6      	b.n	800ca64 <__ratio+0x40>

0800ca76 <__copybits>:
 800ca76:	b570      	push	{r4, r5, r6, lr}
 800ca78:	0014      	movs	r4, r2
 800ca7a:	0005      	movs	r5, r0
 800ca7c:	3901      	subs	r1, #1
 800ca7e:	6913      	ldr	r3, [r2, #16]
 800ca80:	1149      	asrs	r1, r1, #5
 800ca82:	3101      	adds	r1, #1
 800ca84:	0089      	lsls	r1, r1, #2
 800ca86:	3414      	adds	r4, #20
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	1841      	adds	r1, r0, r1
 800ca8c:	18e3      	adds	r3, r4, r3
 800ca8e:	42a3      	cmp	r3, r4
 800ca90:	d80d      	bhi.n	800caae <__copybits+0x38>
 800ca92:	0014      	movs	r4, r2
 800ca94:	3411      	adds	r4, #17
 800ca96:	2500      	movs	r5, #0
 800ca98:	429c      	cmp	r4, r3
 800ca9a:	d803      	bhi.n	800caa4 <__copybits+0x2e>
 800ca9c:	1a9b      	subs	r3, r3, r2
 800ca9e:	3b11      	subs	r3, #17
 800caa0:	089b      	lsrs	r3, r3, #2
 800caa2:	009d      	lsls	r5, r3, #2
 800caa4:	2300      	movs	r3, #0
 800caa6:	1940      	adds	r0, r0, r5
 800caa8:	4281      	cmp	r1, r0
 800caaa:	d803      	bhi.n	800cab4 <__copybits+0x3e>
 800caac:	bd70      	pop	{r4, r5, r6, pc}
 800caae:	cc40      	ldmia	r4!, {r6}
 800cab0:	c540      	stmia	r5!, {r6}
 800cab2:	e7ec      	b.n	800ca8e <__copybits+0x18>
 800cab4:	c008      	stmia	r0!, {r3}
 800cab6:	e7f7      	b.n	800caa8 <__copybits+0x32>

0800cab8 <__any_on>:
 800cab8:	0002      	movs	r2, r0
 800caba:	6900      	ldr	r0, [r0, #16]
 800cabc:	b510      	push	{r4, lr}
 800cabe:	3214      	adds	r2, #20
 800cac0:	114b      	asrs	r3, r1, #5
 800cac2:	4298      	cmp	r0, r3
 800cac4:	db13      	blt.n	800caee <__any_on+0x36>
 800cac6:	dd0c      	ble.n	800cae2 <__any_on+0x2a>
 800cac8:	241f      	movs	r4, #31
 800caca:	0008      	movs	r0, r1
 800cacc:	4020      	ands	r0, r4
 800cace:	4221      	tst	r1, r4
 800cad0:	d007      	beq.n	800cae2 <__any_on+0x2a>
 800cad2:	0099      	lsls	r1, r3, #2
 800cad4:	588c      	ldr	r4, [r1, r2]
 800cad6:	0021      	movs	r1, r4
 800cad8:	40c1      	lsrs	r1, r0
 800cada:	4081      	lsls	r1, r0
 800cadc:	2001      	movs	r0, #1
 800cade:	428c      	cmp	r4, r1
 800cae0:	d104      	bne.n	800caec <__any_on+0x34>
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	18d3      	adds	r3, r2, r3
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d803      	bhi.n	800caf2 <__any_on+0x3a>
 800caea:	2000      	movs	r0, #0
 800caec:	bd10      	pop	{r4, pc}
 800caee:	0003      	movs	r3, r0
 800caf0:	e7f7      	b.n	800cae2 <__any_on+0x2a>
 800caf2:	3b04      	subs	r3, #4
 800caf4:	6819      	ldr	r1, [r3, #0]
 800caf6:	2900      	cmp	r1, #0
 800caf8:	d0f5      	beq.n	800cae6 <__any_on+0x2e>
 800cafa:	2001      	movs	r0, #1
 800cafc:	e7f6      	b.n	800caec <__any_on+0x34>

0800cafe <__ascii_wctomb>:
 800cafe:	0003      	movs	r3, r0
 800cb00:	1e08      	subs	r0, r1, #0
 800cb02:	d005      	beq.n	800cb10 <__ascii_wctomb+0x12>
 800cb04:	2aff      	cmp	r2, #255	; 0xff
 800cb06:	d904      	bls.n	800cb12 <__ascii_wctomb+0x14>
 800cb08:	228a      	movs	r2, #138	; 0x8a
 800cb0a:	2001      	movs	r0, #1
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	4240      	negs	r0, r0
 800cb10:	4770      	bx	lr
 800cb12:	2001      	movs	r0, #1
 800cb14:	700a      	strb	r2, [r1, #0]
 800cb16:	e7fb      	b.n	800cb10 <__ascii_wctomb+0x12>

0800cb18 <__ssputs_r>:
 800cb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	9203      	str	r2, [sp, #12]
 800cb20:	688e      	ldr	r6, [r1, #8]
 800cb22:	9a01      	ldr	r2, [sp, #4]
 800cb24:	0007      	movs	r7, r0
 800cb26:	000c      	movs	r4, r1
 800cb28:	680b      	ldr	r3, [r1, #0]
 800cb2a:	4296      	cmp	r6, r2
 800cb2c:	d831      	bhi.n	800cb92 <__ssputs_r+0x7a>
 800cb2e:	898a      	ldrh	r2, [r1, #12]
 800cb30:	2190      	movs	r1, #144	; 0x90
 800cb32:	00c9      	lsls	r1, r1, #3
 800cb34:	420a      	tst	r2, r1
 800cb36:	d029      	beq.n	800cb8c <__ssputs_r+0x74>
 800cb38:	2003      	movs	r0, #3
 800cb3a:	6921      	ldr	r1, [r4, #16]
 800cb3c:	1a5b      	subs	r3, r3, r1
 800cb3e:	9302      	str	r3, [sp, #8]
 800cb40:	6963      	ldr	r3, [r4, #20]
 800cb42:	4343      	muls	r3, r0
 800cb44:	0fdd      	lsrs	r5, r3, #31
 800cb46:	18ed      	adds	r5, r5, r3
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	9802      	ldr	r0, [sp, #8]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	181b      	adds	r3, r3, r0
 800cb50:	106d      	asrs	r5, r5, #1
 800cb52:	42ab      	cmp	r3, r5
 800cb54:	d900      	bls.n	800cb58 <__ssputs_r+0x40>
 800cb56:	001d      	movs	r5, r3
 800cb58:	0552      	lsls	r2, r2, #21
 800cb5a:	d529      	bpl.n	800cbb0 <__ssputs_r+0x98>
 800cb5c:	0029      	movs	r1, r5
 800cb5e:	0038      	movs	r0, r7
 800cb60:	f7ff fa6e 	bl	800c040 <_malloc_r>
 800cb64:	1e06      	subs	r6, r0, #0
 800cb66:	d02d      	beq.n	800cbc4 <__ssputs_r+0xac>
 800cb68:	9a02      	ldr	r2, [sp, #8]
 800cb6a:	6921      	ldr	r1, [r4, #16]
 800cb6c:	f7fd ffe4 	bl	800ab38 <memcpy>
 800cb70:	89a2      	ldrh	r2, [r4, #12]
 800cb72:	4b19      	ldr	r3, [pc, #100]	; (800cbd8 <__ssputs_r+0xc0>)
 800cb74:	401a      	ands	r2, r3
 800cb76:	2380      	movs	r3, #128	; 0x80
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	9b02      	ldr	r3, [sp, #8]
 800cb7e:	6126      	str	r6, [r4, #16]
 800cb80:	18f6      	adds	r6, r6, r3
 800cb82:	6026      	str	r6, [r4, #0]
 800cb84:	6165      	str	r5, [r4, #20]
 800cb86:	9e01      	ldr	r6, [sp, #4]
 800cb88:	1aed      	subs	r5, r5, r3
 800cb8a:	60a5      	str	r5, [r4, #8]
 800cb8c:	9b01      	ldr	r3, [sp, #4]
 800cb8e:	429e      	cmp	r6, r3
 800cb90:	d900      	bls.n	800cb94 <__ssputs_r+0x7c>
 800cb92:	9e01      	ldr	r6, [sp, #4]
 800cb94:	0032      	movs	r2, r6
 800cb96:	9903      	ldr	r1, [sp, #12]
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	f000 fb7f 	bl	800d29c <memmove>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	68a3      	ldr	r3, [r4, #8]
 800cba2:	1b9b      	subs	r3, r3, r6
 800cba4:	60a3      	str	r3, [r4, #8]
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	199b      	adds	r3, r3, r6
 800cbaa:	6023      	str	r3, [r4, #0]
 800cbac:	b005      	add	sp, #20
 800cbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb0:	002a      	movs	r2, r5
 800cbb2:	0038      	movs	r0, r7
 800cbb4:	f000 fc07 	bl	800d3c6 <_realloc_r>
 800cbb8:	1e06      	subs	r6, r0, #0
 800cbba:	d1df      	bne.n	800cb7c <__ssputs_r+0x64>
 800cbbc:	0038      	movs	r0, r7
 800cbbe:	6921      	ldr	r1, [r4, #16]
 800cbc0:	f7fe fe6c 	bl	800b89c <_free_r>
 800cbc4:	230c      	movs	r3, #12
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	603b      	str	r3, [r7, #0]
 800cbca:	89a2      	ldrh	r2, [r4, #12]
 800cbcc:	3334      	adds	r3, #52	; 0x34
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	4240      	negs	r0, r0
 800cbd4:	e7ea      	b.n	800cbac <__ssputs_r+0x94>
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	fffffb7f 	.word	0xfffffb7f

0800cbdc <_svfiprintf_r>:
 800cbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbde:	b0a1      	sub	sp, #132	; 0x84
 800cbe0:	9003      	str	r0, [sp, #12]
 800cbe2:	001d      	movs	r5, r3
 800cbe4:	898b      	ldrh	r3, [r1, #12]
 800cbe6:	000f      	movs	r7, r1
 800cbe8:	0016      	movs	r6, r2
 800cbea:	061b      	lsls	r3, r3, #24
 800cbec:	d511      	bpl.n	800cc12 <_svfiprintf_r+0x36>
 800cbee:	690b      	ldr	r3, [r1, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10e      	bne.n	800cc12 <_svfiprintf_r+0x36>
 800cbf4:	2140      	movs	r1, #64	; 0x40
 800cbf6:	f7ff fa23 	bl	800c040 <_malloc_r>
 800cbfa:	6038      	str	r0, [r7, #0]
 800cbfc:	6138      	str	r0, [r7, #16]
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	d105      	bne.n	800cc0e <_svfiprintf_r+0x32>
 800cc02:	230c      	movs	r3, #12
 800cc04:	9a03      	ldr	r2, [sp, #12]
 800cc06:	3801      	subs	r0, #1
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	b021      	add	sp, #132	; 0x84
 800cc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc0e:	2340      	movs	r3, #64	; 0x40
 800cc10:	617b      	str	r3, [r7, #20]
 800cc12:	2300      	movs	r3, #0
 800cc14:	ac08      	add	r4, sp, #32
 800cc16:	6163      	str	r3, [r4, #20]
 800cc18:	3320      	adds	r3, #32
 800cc1a:	7663      	strb	r3, [r4, #25]
 800cc1c:	3310      	adds	r3, #16
 800cc1e:	76a3      	strb	r3, [r4, #26]
 800cc20:	9507      	str	r5, [sp, #28]
 800cc22:	0035      	movs	r5, r6
 800cc24:	782b      	ldrb	r3, [r5, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <_svfiprintf_r+0x52>
 800cc2a:	2b25      	cmp	r3, #37	; 0x25
 800cc2c:	d148      	bne.n	800ccc0 <_svfiprintf_r+0xe4>
 800cc2e:	1bab      	subs	r3, r5, r6
 800cc30:	9305      	str	r3, [sp, #20]
 800cc32:	42b5      	cmp	r5, r6
 800cc34:	d00b      	beq.n	800cc4e <_svfiprintf_r+0x72>
 800cc36:	0032      	movs	r2, r6
 800cc38:	0039      	movs	r1, r7
 800cc3a:	9803      	ldr	r0, [sp, #12]
 800cc3c:	f7ff ff6c 	bl	800cb18 <__ssputs_r>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d100      	bne.n	800cc46 <_svfiprintf_r+0x6a>
 800cc44:	e0af      	b.n	800cda6 <_svfiprintf_r+0x1ca>
 800cc46:	6963      	ldr	r3, [r4, #20]
 800cc48:	9a05      	ldr	r2, [sp, #20]
 800cc4a:	189b      	adds	r3, r3, r2
 800cc4c:	6163      	str	r3, [r4, #20]
 800cc4e:	782b      	ldrb	r3, [r5, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d100      	bne.n	800cc56 <_svfiprintf_r+0x7a>
 800cc54:	e0a7      	b.n	800cda6 <_svfiprintf_r+0x1ca>
 800cc56:	2201      	movs	r2, #1
 800cc58:	2300      	movs	r3, #0
 800cc5a:	4252      	negs	r2, r2
 800cc5c:	6062      	str	r2, [r4, #4]
 800cc5e:	a904      	add	r1, sp, #16
 800cc60:	3254      	adds	r2, #84	; 0x54
 800cc62:	1852      	adds	r2, r2, r1
 800cc64:	1c6e      	adds	r6, r5, #1
 800cc66:	6023      	str	r3, [r4, #0]
 800cc68:	60e3      	str	r3, [r4, #12]
 800cc6a:	60a3      	str	r3, [r4, #8]
 800cc6c:	7013      	strb	r3, [r2, #0]
 800cc6e:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc70:	4b55      	ldr	r3, [pc, #340]	; (800cdc8 <_svfiprintf_r+0x1ec>)
 800cc72:	2205      	movs	r2, #5
 800cc74:	0018      	movs	r0, r3
 800cc76:	7831      	ldrb	r1, [r6, #0]
 800cc78:	9305      	str	r3, [sp, #20]
 800cc7a:	f7fd ff52 	bl	800ab22 <memchr>
 800cc7e:	1c75      	adds	r5, r6, #1
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d11f      	bne.n	800ccc4 <_svfiprintf_r+0xe8>
 800cc84:	6822      	ldr	r2, [r4, #0]
 800cc86:	06d3      	lsls	r3, r2, #27
 800cc88:	d504      	bpl.n	800cc94 <_svfiprintf_r+0xb8>
 800cc8a:	2353      	movs	r3, #83	; 0x53
 800cc8c:	a904      	add	r1, sp, #16
 800cc8e:	185b      	adds	r3, r3, r1
 800cc90:	2120      	movs	r1, #32
 800cc92:	7019      	strb	r1, [r3, #0]
 800cc94:	0713      	lsls	r3, r2, #28
 800cc96:	d504      	bpl.n	800cca2 <_svfiprintf_r+0xc6>
 800cc98:	2353      	movs	r3, #83	; 0x53
 800cc9a:	a904      	add	r1, sp, #16
 800cc9c:	185b      	adds	r3, r3, r1
 800cc9e:	212b      	movs	r1, #43	; 0x2b
 800cca0:	7019      	strb	r1, [r3, #0]
 800cca2:	7833      	ldrb	r3, [r6, #0]
 800cca4:	2b2a      	cmp	r3, #42	; 0x2a
 800cca6:	d016      	beq.n	800ccd6 <_svfiprintf_r+0xfa>
 800cca8:	0035      	movs	r5, r6
 800ccaa:	2100      	movs	r1, #0
 800ccac:	200a      	movs	r0, #10
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	782a      	ldrb	r2, [r5, #0]
 800ccb2:	1c6e      	adds	r6, r5, #1
 800ccb4:	3a30      	subs	r2, #48	; 0x30
 800ccb6:	2a09      	cmp	r2, #9
 800ccb8:	d94e      	bls.n	800cd58 <_svfiprintf_r+0x17c>
 800ccba:	2900      	cmp	r1, #0
 800ccbc:	d111      	bne.n	800cce2 <_svfiprintf_r+0x106>
 800ccbe:	e017      	b.n	800ccf0 <_svfiprintf_r+0x114>
 800ccc0:	3501      	adds	r5, #1
 800ccc2:	e7af      	b.n	800cc24 <_svfiprintf_r+0x48>
 800ccc4:	9b05      	ldr	r3, [sp, #20]
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	1ac0      	subs	r0, r0, r3
 800ccca:	2301      	movs	r3, #1
 800cccc:	4083      	lsls	r3, r0
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	002e      	movs	r6, r5
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	e7cc      	b.n	800cc70 <_svfiprintf_r+0x94>
 800ccd6:	9b07      	ldr	r3, [sp, #28]
 800ccd8:	1d19      	adds	r1, r3, #4
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	9107      	str	r1, [sp, #28]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	db01      	blt.n	800cce6 <_svfiprintf_r+0x10a>
 800cce2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cce4:	e004      	b.n	800ccf0 <_svfiprintf_r+0x114>
 800cce6:	425b      	negs	r3, r3
 800cce8:	60e3      	str	r3, [r4, #12]
 800ccea:	2302      	movs	r3, #2
 800ccec:	4313      	orrs	r3, r2
 800ccee:	6023      	str	r3, [r4, #0]
 800ccf0:	782b      	ldrb	r3, [r5, #0]
 800ccf2:	2b2e      	cmp	r3, #46	; 0x2e
 800ccf4:	d10a      	bne.n	800cd0c <_svfiprintf_r+0x130>
 800ccf6:	786b      	ldrb	r3, [r5, #1]
 800ccf8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfa:	d135      	bne.n	800cd68 <_svfiprintf_r+0x18c>
 800ccfc:	9b07      	ldr	r3, [sp, #28]
 800ccfe:	3502      	adds	r5, #2
 800cd00:	1d1a      	adds	r2, r3, #4
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	9207      	str	r2, [sp, #28]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	db2b      	blt.n	800cd62 <_svfiprintf_r+0x186>
 800cd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd0c:	4e2f      	ldr	r6, [pc, #188]	; (800cdcc <_svfiprintf_r+0x1f0>)
 800cd0e:	2203      	movs	r2, #3
 800cd10:	0030      	movs	r0, r6
 800cd12:	7829      	ldrb	r1, [r5, #0]
 800cd14:	f7fd ff05 	bl	800ab22 <memchr>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d006      	beq.n	800cd2a <_svfiprintf_r+0x14e>
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	1b80      	subs	r0, r0, r6
 800cd20:	4083      	lsls	r3, r0
 800cd22:	6822      	ldr	r2, [r4, #0]
 800cd24:	3501      	adds	r5, #1
 800cd26:	4313      	orrs	r3, r2
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	7829      	ldrb	r1, [r5, #0]
 800cd2c:	2206      	movs	r2, #6
 800cd2e:	4828      	ldr	r0, [pc, #160]	; (800cdd0 <_svfiprintf_r+0x1f4>)
 800cd30:	1c6e      	adds	r6, r5, #1
 800cd32:	7621      	strb	r1, [r4, #24]
 800cd34:	f7fd fef5 	bl	800ab22 <memchr>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d03c      	beq.n	800cdb6 <_svfiprintf_r+0x1da>
 800cd3c:	4b25      	ldr	r3, [pc, #148]	; (800cdd4 <_svfiprintf_r+0x1f8>)
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d125      	bne.n	800cd8e <_svfiprintf_r+0x1b2>
 800cd42:	2207      	movs	r2, #7
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	3307      	adds	r3, #7
 800cd48:	4393      	bics	r3, r2
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	9307      	str	r3, [sp, #28]
 800cd4e:	6963      	ldr	r3, [r4, #20]
 800cd50:	9a04      	ldr	r2, [sp, #16]
 800cd52:	189b      	adds	r3, r3, r2
 800cd54:	6163      	str	r3, [r4, #20]
 800cd56:	e764      	b.n	800cc22 <_svfiprintf_r+0x46>
 800cd58:	4343      	muls	r3, r0
 800cd5a:	0035      	movs	r5, r6
 800cd5c:	2101      	movs	r1, #1
 800cd5e:	189b      	adds	r3, r3, r2
 800cd60:	e7a6      	b.n	800ccb0 <_svfiprintf_r+0xd4>
 800cd62:	2301      	movs	r3, #1
 800cd64:	425b      	negs	r3, r3
 800cd66:	e7d0      	b.n	800cd0a <_svfiprintf_r+0x12e>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	200a      	movs	r0, #10
 800cd6c:	001a      	movs	r2, r3
 800cd6e:	3501      	adds	r5, #1
 800cd70:	6063      	str	r3, [r4, #4]
 800cd72:	7829      	ldrb	r1, [r5, #0]
 800cd74:	1c6e      	adds	r6, r5, #1
 800cd76:	3930      	subs	r1, #48	; 0x30
 800cd78:	2909      	cmp	r1, #9
 800cd7a:	d903      	bls.n	800cd84 <_svfiprintf_r+0x1a8>
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d0c5      	beq.n	800cd0c <_svfiprintf_r+0x130>
 800cd80:	9209      	str	r2, [sp, #36]	; 0x24
 800cd82:	e7c3      	b.n	800cd0c <_svfiprintf_r+0x130>
 800cd84:	4342      	muls	r2, r0
 800cd86:	0035      	movs	r5, r6
 800cd88:	2301      	movs	r3, #1
 800cd8a:	1852      	adds	r2, r2, r1
 800cd8c:	e7f1      	b.n	800cd72 <_svfiprintf_r+0x196>
 800cd8e:	aa07      	add	r2, sp, #28
 800cd90:	9200      	str	r2, [sp, #0]
 800cd92:	0021      	movs	r1, r4
 800cd94:	003a      	movs	r2, r7
 800cd96:	4b10      	ldr	r3, [pc, #64]	; (800cdd8 <_svfiprintf_r+0x1fc>)
 800cd98:	9803      	ldr	r0, [sp, #12]
 800cd9a:	f7fc fe05 	bl	80099a8 <_printf_float>
 800cd9e:	9004      	str	r0, [sp, #16]
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	3301      	adds	r3, #1
 800cda4:	d1d3      	bne.n	800cd4e <_svfiprintf_r+0x172>
 800cda6:	89bb      	ldrh	r3, [r7, #12]
 800cda8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cdaa:	065b      	lsls	r3, r3, #25
 800cdac:	d400      	bmi.n	800cdb0 <_svfiprintf_r+0x1d4>
 800cdae:	e72c      	b.n	800cc0a <_svfiprintf_r+0x2e>
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	4240      	negs	r0, r0
 800cdb4:	e729      	b.n	800cc0a <_svfiprintf_r+0x2e>
 800cdb6:	aa07      	add	r2, sp, #28
 800cdb8:	9200      	str	r2, [sp, #0]
 800cdba:	0021      	movs	r1, r4
 800cdbc:	003a      	movs	r2, r7
 800cdbe:	4b06      	ldr	r3, [pc, #24]	; (800cdd8 <_svfiprintf_r+0x1fc>)
 800cdc0:	9803      	ldr	r0, [sp, #12]
 800cdc2:	f7fd f8b7 	bl	8009f34 <_printf_i>
 800cdc6:	e7ea      	b.n	800cd9e <_svfiprintf_r+0x1c2>
 800cdc8:	0800dad4 	.word	0x0800dad4
 800cdcc:	0800dada 	.word	0x0800dada
 800cdd0:	0800dade 	.word	0x0800dade
 800cdd4:	080099a9 	.word	0x080099a9
 800cdd8:	0800cb19 	.word	0x0800cb19

0800cddc <__sfputc_r>:
 800cddc:	6893      	ldr	r3, [r2, #8]
 800cdde:	b510      	push	{r4, lr}
 800cde0:	3b01      	subs	r3, #1
 800cde2:	6093      	str	r3, [r2, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	da04      	bge.n	800cdf2 <__sfputc_r+0x16>
 800cde8:	6994      	ldr	r4, [r2, #24]
 800cdea:	42a3      	cmp	r3, r4
 800cdec:	db07      	blt.n	800cdfe <__sfputc_r+0x22>
 800cdee:	290a      	cmp	r1, #10
 800cdf0:	d005      	beq.n	800cdfe <__sfputc_r+0x22>
 800cdf2:	6813      	ldr	r3, [r2, #0]
 800cdf4:	1c58      	adds	r0, r3, #1
 800cdf6:	6010      	str	r0, [r2, #0]
 800cdf8:	7019      	strb	r1, [r3, #0]
 800cdfa:	0008      	movs	r0, r1
 800cdfc:	bd10      	pop	{r4, pc}
 800cdfe:	f7fd fd51 	bl	800a8a4 <__swbuf_r>
 800ce02:	0001      	movs	r1, r0
 800ce04:	e7f9      	b.n	800cdfa <__sfputc_r+0x1e>

0800ce06 <__sfputs_r>:
 800ce06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce08:	0006      	movs	r6, r0
 800ce0a:	000f      	movs	r7, r1
 800ce0c:	0014      	movs	r4, r2
 800ce0e:	18d5      	adds	r5, r2, r3
 800ce10:	42ac      	cmp	r4, r5
 800ce12:	d101      	bne.n	800ce18 <__sfputs_r+0x12>
 800ce14:	2000      	movs	r0, #0
 800ce16:	e007      	b.n	800ce28 <__sfputs_r+0x22>
 800ce18:	7821      	ldrb	r1, [r4, #0]
 800ce1a:	003a      	movs	r2, r7
 800ce1c:	0030      	movs	r0, r6
 800ce1e:	f7ff ffdd 	bl	800cddc <__sfputc_r>
 800ce22:	3401      	adds	r4, #1
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d1f3      	bne.n	800ce10 <__sfputs_r+0xa>
 800ce28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce2c <_vfiprintf_r>:
 800ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2e:	b0a1      	sub	sp, #132	; 0x84
 800ce30:	000f      	movs	r7, r1
 800ce32:	0015      	movs	r5, r2
 800ce34:	001e      	movs	r6, r3
 800ce36:	9003      	str	r0, [sp, #12]
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d004      	beq.n	800ce46 <_vfiprintf_r+0x1a>
 800ce3c:	6a03      	ldr	r3, [r0, #32]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <_vfiprintf_r+0x1a>
 800ce42:	f7fd fc1f 	bl	800a684 <__sinit>
 800ce46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce48:	07db      	lsls	r3, r3, #31
 800ce4a:	d405      	bmi.n	800ce58 <_vfiprintf_r+0x2c>
 800ce4c:	89bb      	ldrh	r3, [r7, #12]
 800ce4e:	059b      	lsls	r3, r3, #22
 800ce50:	d402      	bmi.n	800ce58 <_vfiprintf_r+0x2c>
 800ce52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ce54:	f7fd fe63 	bl	800ab1e <__retarget_lock_acquire_recursive>
 800ce58:	89bb      	ldrh	r3, [r7, #12]
 800ce5a:	071b      	lsls	r3, r3, #28
 800ce5c:	d502      	bpl.n	800ce64 <_vfiprintf_r+0x38>
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d113      	bne.n	800ce8c <_vfiprintf_r+0x60>
 800ce64:	0039      	movs	r1, r7
 800ce66:	9803      	ldr	r0, [sp, #12]
 800ce68:	f7fd fd5e 	bl	800a928 <__swsetup_r>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d00d      	beq.n	800ce8c <_vfiprintf_r+0x60>
 800ce70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce72:	07db      	lsls	r3, r3, #31
 800ce74:	d503      	bpl.n	800ce7e <_vfiprintf_r+0x52>
 800ce76:	2001      	movs	r0, #1
 800ce78:	4240      	negs	r0, r0
 800ce7a:	b021      	add	sp, #132	; 0x84
 800ce7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce7e:	89bb      	ldrh	r3, [r7, #12]
 800ce80:	059b      	lsls	r3, r3, #22
 800ce82:	d4f8      	bmi.n	800ce76 <_vfiprintf_r+0x4a>
 800ce84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ce86:	f7fd fe4b 	bl	800ab20 <__retarget_lock_release_recursive>
 800ce8a:	e7f4      	b.n	800ce76 <_vfiprintf_r+0x4a>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	ac08      	add	r4, sp, #32
 800ce90:	6163      	str	r3, [r4, #20]
 800ce92:	3320      	adds	r3, #32
 800ce94:	7663      	strb	r3, [r4, #25]
 800ce96:	3310      	adds	r3, #16
 800ce98:	76a3      	strb	r3, [r4, #26]
 800ce9a:	9607      	str	r6, [sp, #28]
 800ce9c:	002e      	movs	r6, r5
 800ce9e:	7833      	ldrb	r3, [r6, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <_vfiprintf_r+0x7c>
 800cea4:	2b25      	cmp	r3, #37	; 0x25
 800cea6:	d148      	bne.n	800cf3a <_vfiprintf_r+0x10e>
 800cea8:	1b73      	subs	r3, r6, r5
 800ceaa:	9305      	str	r3, [sp, #20]
 800ceac:	42ae      	cmp	r6, r5
 800ceae:	d00b      	beq.n	800cec8 <_vfiprintf_r+0x9c>
 800ceb0:	002a      	movs	r2, r5
 800ceb2:	0039      	movs	r1, r7
 800ceb4:	9803      	ldr	r0, [sp, #12]
 800ceb6:	f7ff ffa6 	bl	800ce06 <__sfputs_r>
 800ceba:	3001      	adds	r0, #1
 800cebc:	d100      	bne.n	800cec0 <_vfiprintf_r+0x94>
 800cebe:	e0af      	b.n	800d020 <_vfiprintf_r+0x1f4>
 800cec0:	6963      	ldr	r3, [r4, #20]
 800cec2:	9a05      	ldr	r2, [sp, #20]
 800cec4:	189b      	adds	r3, r3, r2
 800cec6:	6163      	str	r3, [r4, #20]
 800cec8:	7833      	ldrb	r3, [r6, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d100      	bne.n	800ced0 <_vfiprintf_r+0xa4>
 800cece:	e0a7      	b.n	800d020 <_vfiprintf_r+0x1f4>
 800ced0:	2201      	movs	r2, #1
 800ced2:	2300      	movs	r3, #0
 800ced4:	4252      	negs	r2, r2
 800ced6:	6062      	str	r2, [r4, #4]
 800ced8:	a904      	add	r1, sp, #16
 800ceda:	3254      	adds	r2, #84	; 0x54
 800cedc:	1852      	adds	r2, r2, r1
 800cede:	1c75      	adds	r5, r6, #1
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	60e3      	str	r3, [r4, #12]
 800cee4:	60a3      	str	r3, [r4, #8]
 800cee6:	7013      	strb	r3, [r2, #0]
 800cee8:	65a3      	str	r3, [r4, #88]	; 0x58
 800ceea:	4b59      	ldr	r3, [pc, #356]	; (800d050 <_vfiprintf_r+0x224>)
 800ceec:	2205      	movs	r2, #5
 800ceee:	0018      	movs	r0, r3
 800cef0:	7829      	ldrb	r1, [r5, #0]
 800cef2:	9305      	str	r3, [sp, #20]
 800cef4:	f7fd fe15 	bl	800ab22 <memchr>
 800cef8:	1c6e      	adds	r6, r5, #1
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d11f      	bne.n	800cf3e <_vfiprintf_r+0x112>
 800cefe:	6822      	ldr	r2, [r4, #0]
 800cf00:	06d3      	lsls	r3, r2, #27
 800cf02:	d504      	bpl.n	800cf0e <_vfiprintf_r+0xe2>
 800cf04:	2353      	movs	r3, #83	; 0x53
 800cf06:	a904      	add	r1, sp, #16
 800cf08:	185b      	adds	r3, r3, r1
 800cf0a:	2120      	movs	r1, #32
 800cf0c:	7019      	strb	r1, [r3, #0]
 800cf0e:	0713      	lsls	r3, r2, #28
 800cf10:	d504      	bpl.n	800cf1c <_vfiprintf_r+0xf0>
 800cf12:	2353      	movs	r3, #83	; 0x53
 800cf14:	a904      	add	r1, sp, #16
 800cf16:	185b      	adds	r3, r3, r1
 800cf18:	212b      	movs	r1, #43	; 0x2b
 800cf1a:	7019      	strb	r1, [r3, #0]
 800cf1c:	782b      	ldrb	r3, [r5, #0]
 800cf1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf20:	d016      	beq.n	800cf50 <_vfiprintf_r+0x124>
 800cf22:	002e      	movs	r6, r5
 800cf24:	2100      	movs	r1, #0
 800cf26:	200a      	movs	r0, #10
 800cf28:	68e3      	ldr	r3, [r4, #12]
 800cf2a:	7832      	ldrb	r2, [r6, #0]
 800cf2c:	1c75      	adds	r5, r6, #1
 800cf2e:	3a30      	subs	r2, #48	; 0x30
 800cf30:	2a09      	cmp	r2, #9
 800cf32:	d94e      	bls.n	800cfd2 <_vfiprintf_r+0x1a6>
 800cf34:	2900      	cmp	r1, #0
 800cf36:	d111      	bne.n	800cf5c <_vfiprintf_r+0x130>
 800cf38:	e017      	b.n	800cf6a <_vfiprintf_r+0x13e>
 800cf3a:	3601      	adds	r6, #1
 800cf3c:	e7af      	b.n	800ce9e <_vfiprintf_r+0x72>
 800cf3e:	9b05      	ldr	r3, [sp, #20]
 800cf40:	6822      	ldr	r2, [r4, #0]
 800cf42:	1ac0      	subs	r0, r0, r3
 800cf44:	2301      	movs	r3, #1
 800cf46:	4083      	lsls	r3, r0
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	0035      	movs	r5, r6
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	e7cc      	b.n	800ceea <_vfiprintf_r+0xbe>
 800cf50:	9b07      	ldr	r3, [sp, #28]
 800cf52:	1d19      	adds	r1, r3, #4
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	9107      	str	r1, [sp, #28]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	db01      	blt.n	800cf60 <_vfiprintf_r+0x134>
 800cf5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf5e:	e004      	b.n	800cf6a <_vfiprintf_r+0x13e>
 800cf60:	425b      	negs	r3, r3
 800cf62:	60e3      	str	r3, [r4, #12]
 800cf64:	2302      	movs	r3, #2
 800cf66:	4313      	orrs	r3, r2
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	7833      	ldrb	r3, [r6, #0]
 800cf6c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf6e:	d10a      	bne.n	800cf86 <_vfiprintf_r+0x15a>
 800cf70:	7873      	ldrb	r3, [r6, #1]
 800cf72:	2b2a      	cmp	r3, #42	; 0x2a
 800cf74:	d135      	bne.n	800cfe2 <_vfiprintf_r+0x1b6>
 800cf76:	9b07      	ldr	r3, [sp, #28]
 800cf78:	3602      	adds	r6, #2
 800cf7a:	1d1a      	adds	r2, r3, #4
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	9207      	str	r2, [sp, #28]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	db2b      	blt.n	800cfdc <_vfiprintf_r+0x1b0>
 800cf84:	9309      	str	r3, [sp, #36]	; 0x24
 800cf86:	4d33      	ldr	r5, [pc, #204]	; (800d054 <_vfiprintf_r+0x228>)
 800cf88:	2203      	movs	r2, #3
 800cf8a:	0028      	movs	r0, r5
 800cf8c:	7831      	ldrb	r1, [r6, #0]
 800cf8e:	f7fd fdc8 	bl	800ab22 <memchr>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d006      	beq.n	800cfa4 <_vfiprintf_r+0x178>
 800cf96:	2340      	movs	r3, #64	; 0x40
 800cf98:	1b40      	subs	r0, r0, r5
 800cf9a:	4083      	lsls	r3, r0
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	3601      	adds	r6, #1
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	7831      	ldrb	r1, [r6, #0]
 800cfa6:	2206      	movs	r2, #6
 800cfa8:	482b      	ldr	r0, [pc, #172]	; (800d058 <_vfiprintf_r+0x22c>)
 800cfaa:	1c75      	adds	r5, r6, #1
 800cfac:	7621      	strb	r1, [r4, #24]
 800cfae:	f7fd fdb8 	bl	800ab22 <memchr>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d043      	beq.n	800d03e <_vfiprintf_r+0x212>
 800cfb6:	4b29      	ldr	r3, [pc, #164]	; (800d05c <_vfiprintf_r+0x230>)
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d125      	bne.n	800d008 <_vfiprintf_r+0x1dc>
 800cfbc:	2207      	movs	r2, #7
 800cfbe:	9b07      	ldr	r3, [sp, #28]
 800cfc0:	3307      	adds	r3, #7
 800cfc2:	4393      	bics	r3, r2
 800cfc4:	3308      	adds	r3, #8
 800cfc6:	9307      	str	r3, [sp, #28]
 800cfc8:	6963      	ldr	r3, [r4, #20]
 800cfca:	9a04      	ldr	r2, [sp, #16]
 800cfcc:	189b      	adds	r3, r3, r2
 800cfce:	6163      	str	r3, [r4, #20]
 800cfd0:	e764      	b.n	800ce9c <_vfiprintf_r+0x70>
 800cfd2:	4343      	muls	r3, r0
 800cfd4:	002e      	movs	r6, r5
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	189b      	adds	r3, r3, r2
 800cfda:	e7a6      	b.n	800cf2a <_vfiprintf_r+0xfe>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	425b      	negs	r3, r3
 800cfe0:	e7d0      	b.n	800cf84 <_vfiprintf_r+0x158>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	200a      	movs	r0, #10
 800cfe6:	001a      	movs	r2, r3
 800cfe8:	3601      	adds	r6, #1
 800cfea:	6063      	str	r3, [r4, #4]
 800cfec:	7831      	ldrb	r1, [r6, #0]
 800cfee:	1c75      	adds	r5, r6, #1
 800cff0:	3930      	subs	r1, #48	; 0x30
 800cff2:	2909      	cmp	r1, #9
 800cff4:	d903      	bls.n	800cffe <_vfiprintf_r+0x1d2>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0c5      	beq.n	800cf86 <_vfiprintf_r+0x15a>
 800cffa:	9209      	str	r2, [sp, #36]	; 0x24
 800cffc:	e7c3      	b.n	800cf86 <_vfiprintf_r+0x15a>
 800cffe:	4342      	muls	r2, r0
 800d000:	002e      	movs	r6, r5
 800d002:	2301      	movs	r3, #1
 800d004:	1852      	adds	r2, r2, r1
 800d006:	e7f1      	b.n	800cfec <_vfiprintf_r+0x1c0>
 800d008:	aa07      	add	r2, sp, #28
 800d00a:	9200      	str	r2, [sp, #0]
 800d00c:	0021      	movs	r1, r4
 800d00e:	003a      	movs	r2, r7
 800d010:	4b13      	ldr	r3, [pc, #76]	; (800d060 <_vfiprintf_r+0x234>)
 800d012:	9803      	ldr	r0, [sp, #12]
 800d014:	f7fc fcc8 	bl	80099a8 <_printf_float>
 800d018:	9004      	str	r0, [sp, #16]
 800d01a:	9b04      	ldr	r3, [sp, #16]
 800d01c:	3301      	adds	r3, #1
 800d01e:	d1d3      	bne.n	800cfc8 <_vfiprintf_r+0x19c>
 800d020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d022:	07db      	lsls	r3, r3, #31
 800d024:	d405      	bmi.n	800d032 <_vfiprintf_r+0x206>
 800d026:	89bb      	ldrh	r3, [r7, #12]
 800d028:	059b      	lsls	r3, r3, #22
 800d02a:	d402      	bmi.n	800d032 <_vfiprintf_r+0x206>
 800d02c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d02e:	f7fd fd77 	bl	800ab20 <__retarget_lock_release_recursive>
 800d032:	89bb      	ldrh	r3, [r7, #12]
 800d034:	065b      	lsls	r3, r3, #25
 800d036:	d500      	bpl.n	800d03a <_vfiprintf_r+0x20e>
 800d038:	e71d      	b.n	800ce76 <_vfiprintf_r+0x4a>
 800d03a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d03c:	e71d      	b.n	800ce7a <_vfiprintf_r+0x4e>
 800d03e:	aa07      	add	r2, sp, #28
 800d040:	9200      	str	r2, [sp, #0]
 800d042:	0021      	movs	r1, r4
 800d044:	003a      	movs	r2, r7
 800d046:	4b06      	ldr	r3, [pc, #24]	; (800d060 <_vfiprintf_r+0x234>)
 800d048:	9803      	ldr	r0, [sp, #12]
 800d04a:	f7fc ff73 	bl	8009f34 <_printf_i>
 800d04e:	e7e3      	b.n	800d018 <_vfiprintf_r+0x1ec>
 800d050:	0800dad4 	.word	0x0800dad4
 800d054:	0800dada 	.word	0x0800dada
 800d058:	0800dade 	.word	0x0800dade
 800d05c:	080099a9 	.word	0x080099a9
 800d060:	0800ce07 	.word	0x0800ce07

0800d064 <__sflush_r>:
 800d064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d066:	898b      	ldrh	r3, [r1, #12]
 800d068:	0005      	movs	r5, r0
 800d06a:	000c      	movs	r4, r1
 800d06c:	071a      	lsls	r2, r3, #28
 800d06e:	d45c      	bmi.n	800d12a <__sflush_r+0xc6>
 800d070:	684a      	ldr	r2, [r1, #4]
 800d072:	2a00      	cmp	r2, #0
 800d074:	dc04      	bgt.n	800d080 <__sflush_r+0x1c>
 800d076:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d078:	2a00      	cmp	r2, #0
 800d07a:	dc01      	bgt.n	800d080 <__sflush_r+0x1c>
 800d07c:	2000      	movs	r0, #0
 800d07e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d080:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d082:	2f00      	cmp	r7, #0
 800d084:	d0fa      	beq.n	800d07c <__sflush_r+0x18>
 800d086:	2200      	movs	r2, #0
 800d088:	2080      	movs	r0, #128	; 0x80
 800d08a:	682e      	ldr	r6, [r5, #0]
 800d08c:	602a      	str	r2, [r5, #0]
 800d08e:	001a      	movs	r2, r3
 800d090:	0140      	lsls	r0, r0, #5
 800d092:	6a21      	ldr	r1, [r4, #32]
 800d094:	4002      	ands	r2, r0
 800d096:	4203      	tst	r3, r0
 800d098:	d034      	beq.n	800d104 <__sflush_r+0xa0>
 800d09a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	075b      	lsls	r3, r3, #29
 800d0a0:	d506      	bpl.n	800d0b0 <__sflush_r+0x4c>
 800d0a2:	6863      	ldr	r3, [r4, #4]
 800d0a4:	1ac0      	subs	r0, r0, r3
 800d0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <__sflush_r+0x4c>
 800d0ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0ae:	1ac0      	subs	r0, r0, r3
 800d0b0:	0002      	movs	r2, r0
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	0028      	movs	r0, r5
 800d0b6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d0b8:	6a21      	ldr	r1, [r4, #32]
 800d0ba:	47b8      	blx	r7
 800d0bc:	89a2      	ldrh	r2, [r4, #12]
 800d0be:	1c43      	adds	r3, r0, #1
 800d0c0:	d106      	bne.n	800d0d0 <__sflush_r+0x6c>
 800d0c2:	6829      	ldr	r1, [r5, #0]
 800d0c4:	291d      	cmp	r1, #29
 800d0c6:	d82c      	bhi.n	800d122 <__sflush_r+0xbe>
 800d0c8:	4b2a      	ldr	r3, [pc, #168]	; (800d174 <__sflush_r+0x110>)
 800d0ca:	410b      	asrs	r3, r1
 800d0cc:	07db      	lsls	r3, r3, #31
 800d0ce:	d428      	bmi.n	800d122 <__sflush_r+0xbe>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	6063      	str	r3, [r4, #4]
 800d0d4:	6923      	ldr	r3, [r4, #16]
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	04d2      	lsls	r2, r2, #19
 800d0da:	d505      	bpl.n	800d0e8 <__sflush_r+0x84>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d102      	bne.n	800d0e6 <__sflush_r+0x82>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d100      	bne.n	800d0e8 <__sflush_r+0x84>
 800d0e6:	6560      	str	r0, [r4, #84]	; 0x54
 800d0e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ea:	602e      	str	r6, [r5, #0]
 800d0ec:	2900      	cmp	r1, #0
 800d0ee:	d0c5      	beq.n	800d07c <__sflush_r+0x18>
 800d0f0:	0023      	movs	r3, r4
 800d0f2:	3344      	adds	r3, #68	; 0x44
 800d0f4:	4299      	cmp	r1, r3
 800d0f6:	d002      	beq.n	800d0fe <__sflush_r+0x9a>
 800d0f8:	0028      	movs	r0, r5
 800d0fa:	f7fe fbcf 	bl	800b89c <_free_r>
 800d0fe:	2000      	movs	r0, #0
 800d100:	6360      	str	r0, [r4, #52]	; 0x34
 800d102:	e7bc      	b.n	800d07e <__sflush_r+0x1a>
 800d104:	2301      	movs	r3, #1
 800d106:	0028      	movs	r0, r5
 800d108:	47b8      	blx	r7
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	d1c6      	bne.n	800d09c <__sflush_r+0x38>
 800d10e:	682b      	ldr	r3, [r5, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d0c3      	beq.n	800d09c <__sflush_r+0x38>
 800d114:	2b1d      	cmp	r3, #29
 800d116:	d001      	beq.n	800d11c <__sflush_r+0xb8>
 800d118:	2b16      	cmp	r3, #22
 800d11a:	d101      	bne.n	800d120 <__sflush_r+0xbc>
 800d11c:	602e      	str	r6, [r5, #0]
 800d11e:	e7ad      	b.n	800d07c <__sflush_r+0x18>
 800d120:	89a2      	ldrh	r2, [r4, #12]
 800d122:	2340      	movs	r3, #64	; 0x40
 800d124:	4313      	orrs	r3, r2
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	e7a9      	b.n	800d07e <__sflush_r+0x1a>
 800d12a:	690e      	ldr	r6, [r1, #16]
 800d12c:	2e00      	cmp	r6, #0
 800d12e:	d0a5      	beq.n	800d07c <__sflush_r+0x18>
 800d130:	680f      	ldr	r7, [r1, #0]
 800d132:	600e      	str	r6, [r1, #0]
 800d134:	1bba      	subs	r2, r7, r6
 800d136:	9201      	str	r2, [sp, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	079b      	lsls	r3, r3, #30
 800d13c:	d100      	bne.n	800d140 <__sflush_r+0xdc>
 800d13e:	694a      	ldr	r2, [r1, #20]
 800d140:	60a2      	str	r2, [r4, #8]
 800d142:	9b01      	ldr	r3, [sp, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	dd99      	ble.n	800d07c <__sflush_r+0x18>
 800d148:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d14a:	0032      	movs	r2, r6
 800d14c:	001f      	movs	r7, r3
 800d14e:	0028      	movs	r0, r5
 800d150:	9b01      	ldr	r3, [sp, #4]
 800d152:	6a21      	ldr	r1, [r4, #32]
 800d154:	47b8      	blx	r7
 800d156:	2800      	cmp	r0, #0
 800d158:	dc06      	bgt.n	800d168 <__sflush_r+0x104>
 800d15a:	2340      	movs	r3, #64	; 0x40
 800d15c:	2001      	movs	r0, #1
 800d15e:	89a2      	ldrh	r2, [r4, #12]
 800d160:	4240      	negs	r0, r0
 800d162:	4313      	orrs	r3, r2
 800d164:	81a3      	strh	r3, [r4, #12]
 800d166:	e78a      	b.n	800d07e <__sflush_r+0x1a>
 800d168:	9b01      	ldr	r3, [sp, #4]
 800d16a:	1836      	adds	r6, r6, r0
 800d16c:	1a1b      	subs	r3, r3, r0
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	e7e7      	b.n	800d142 <__sflush_r+0xde>
 800d172:	46c0      	nop			; (mov r8, r8)
 800d174:	dfbffffe 	.word	0xdfbffffe

0800d178 <_fflush_r>:
 800d178:	690b      	ldr	r3, [r1, #16]
 800d17a:	b570      	push	{r4, r5, r6, lr}
 800d17c:	0005      	movs	r5, r0
 800d17e:	000c      	movs	r4, r1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d102      	bne.n	800d18a <_fflush_r+0x12>
 800d184:	2500      	movs	r5, #0
 800d186:	0028      	movs	r0, r5
 800d188:	bd70      	pop	{r4, r5, r6, pc}
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d004      	beq.n	800d198 <_fflush_r+0x20>
 800d18e:	6a03      	ldr	r3, [r0, #32]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d101      	bne.n	800d198 <_fflush_r+0x20>
 800d194:	f7fd fa76 	bl	800a684 <__sinit>
 800d198:	220c      	movs	r2, #12
 800d19a:	5ea3      	ldrsh	r3, [r4, r2]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d0f1      	beq.n	800d184 <_fflush_r+0xc>
 800d1a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1a2:	07d2      	lsls	r2, r2, #31
 800d1a4:	d404      	bmi.n	800d1b0 <_fflush_r+0x38>
 800d1a6:	059b      	lsls	r3, r3, #22
 800d1a8:	d402      	bmi.n	800d1b0 <_fflush_r+0x38>
 800d1aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ac:	f7fd fcb7 	bl	800ab1e <__retarget_lock_acquire_recursive>
 800d1b0:	0028      	movs	r0, r5
 800d1b2:	0021      	movs	r1, r4
 800d1b4:	f7ff ff56 	bl	800d064 <__sflush_r>
 800d1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1ba:	0005      	movs	r5, r0
 800d1bc:	07db      	lsls	r3, r3, #31
 800d1be:	d4e2      	bmi.n	800d186 <_fflush_r+0xe>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	059b      	lsls	r3, r3, #22
 800d1c4:	d4df      	bmi.n	800d186 <_fflush_r+0xe>
 800d1c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c8:	f7fd fcaa 	bl	800ab20 <__retarget_lock_release_recursive>
 800d1cc:	e7db      	b.n	800d186 <_fflush_r+0xe>
	...

0800d1d0 <__swhatbuf_r>:
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	000e      	movs	r6, r1
 800d1d4:	001d      	movs	r5, r3
 800d1d6:	230e      	movs	r3, #14
 800d1d8:	5ec9      	ldrsh	r1, [r1, r3]
 800d1da:	0014      	movs	r4, r2
 800d1dc:	b096      	sub	sp, #88	; 0x58
 800d1de:	2900      	cmp	r1, #0
 800d1e0:	da0c      	bge.n	800d1fc <__swhatbuf_r+0x2c>
 800d1e2:	89b2      	ldrh	r2, [r6, #12]
 800d1e4:	2380      	movs	r3, #128	; 0x80
 800d1e6:	0011      	movs	r1, r2
 800d1e8:	4019      	ands	r1, r3
 800d1ea:	421a      	tst	r2, r3
 800d1ec:	d013      	beq.n	800d216 <__swhatbuf_r+0x46>
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	3b40      	subs	r3, #64	; 0x40
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	6029      	str	r1, [r5, #0]
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	b016      	add	sp, #88	; 0x58
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	466a      	mov	r2, sp
 800d1fe:	f000 f861 	bl	800d2c4 <_fstat_r>
 800d202:	2800      	cmp	r0, #0
 800d204:	dbed      	blt.n	800d1e2 <__swhatbuf_r+0x12>
 800d206:	23f0      	movs	r3, #240	; 0xf0
 800d208:	9901      	ldr	r1, [sp, #4]
 800d20a:	021b      	lsls	r3, r3, #8
 800d20c:	4019      	ands	r1, r3
 800d20e:	4b03      	ldr	r3, [pc, #12]	; (800d21c <__swhatbuf_r+0x4c>)
 800d210:	18c9      	adds	r1, r1, r3
 800d212:	424b      	negs	r3, r1
 800d214:	4159      	adcs	r1, r3
 800d216:	2380      	movs	r3, #128	; 0x80
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	e7ea      	b.n	800d1f2 <__swhatbuf_r+0x22>
 800d21c:	ffffe000 	.word	0xffffe000

0800d220 <__smakebuf_r>:
 800d220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d222:	2602      	movs	r6, #2
 800d224:	898b      	ldrh	r3, [r1, #12]
 800d226:	0005      	movs	r5, r0
 800d228:	000c      	movs	r4, r1
 800d22a:	4233      	tst	r3, r6
 800d22c:	d006      	beq.n	800d23c <__smakebuf_r+0x1c>
 800d22e:	0023      	movs	r3, r4
 800d230:	3347      	adds	r3, #71	; 0x47
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	6123      	str	r3, [r4, #16]
 800d236:	2301      	movs	r3, #1
 800d238:	6163      	str	r3, [r4, #20]
 800d23a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d23c:	466a      	mov	r2, sp
 800d23e:	ab01      	add	r3, sp, #4
 800d240:	f7ff ffc6 	bl	800d1d0 <__swhatbuf_r>
 800d244:	9900      	ldr	r1, [sp, #0]
 800d246:	0007      	movs	r7, r0
 800d248:	0028      	movs	r0, r5
 800d24a:	f7fe fef9 	bl	800c040 <_malloc_r>
 800d24e:	2800      	cmp	r0, #0
 800d250:	d108      	bne.n	800d264 <__smakebuf_r+0x44>
 800d252:	220c      	movs	r2, #12
 800d254:	5ea3      	ldrsh	r3, [r4, r2]
 800d256:	059a      	lsls	r2, r3, #22
 800d258:	d4ef      	bmi.n	800d23a <__smakebuf_r+0x1a>
 800d25a:	2203      	movs	r2, #3
 800d25c:	4393      	bics	r3, r2
 800d25e:	431e      	orrs	r6, r3
 800d260:	81a6      	strh	r6, [r4, #12]
 800d262:	e7e4      	b.n	800d22e <__smakebuf_r+0xe>
 800d264:	2380      	movs	r3, #128	; 0x80
 800d266:	89a2      	ldrh	r2, [r4, #12]
 800d268:	6020      	str	r0, [r4, #0]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	81a3      	strh	r3, [r4, #12]
 800d26e:	9b00      	ldr	r3, [sp, #0]
 800d270:	6120      	str	r0, [r4, #16]
 800d272:	6163      	str	r3, [r4, #20]
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00c      	beq.n	800d294 <__smakebuf_r+0x74>
 800d27a:	0028      	movs	r0, r5
 800d27c:	230e      	movs	r3, #14
 800d27e:	5ee1      	ldrsh	r1, [r4, r3]
 800d280:	f000 f832 	bl	800d2e8 <_isatty_r>
 800d284:	2800      	cmp	r0, #0
 800d286:	d005      	beq.n	800d294 <__smakebuf_r+0x74>
 800d288:	2303      	movs	r3, #3
 800d28a:	89a2      	ldrh	r2, [r4, #12]
 800d28c:	439a      	bics	r2, r3
 800d28e:	3b02      	subs	r3, #2
 800d290:	4313      	orrs	r3, r2
 800d292:	81a3      	strh	r3, [r4, #12]
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	433b      	orrs	r3, r7
 800d298:	81a3      	strh	r3, [r4, #12]
 800d29a:	e7ce      	b.n	800d23a <__smakebuf_r+0x1a>

0800d29c <memmove>:
 800d29c:	b510      	push	{r4, lr}
 800d29e:	4288      	cmp	r0, r1
 800d2a0:	d902      	bls.n	800d2a8 <memmove+0xc>
 800d2a2:	188b      	adds	r3, r1, r2
 800d2a4:	4298      	cmp	r0, r3
 800d2a6:	d303      	bcc.n	800d2b0 <memmove+0x14>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	e007      	b.n	800d2bc <memmove+0x20>
 800d2ac:	5c8b      	ldrb	r3, [r1, r2]
 800d2ae:	5483      	strb	r3, [r0, r2]
 800d2b0:	3a01      	subs	r2, #1
 800d2b2:	d2fb      	bcs.n	800d2ac <memmove+0x10>
 800d2b4:	bd10      	pop	{r4, pc}
 800d2b6:	5ccc      	ldrb	r4, [r1, r3]
 800d2b8:	54c4      	strb	r4, [r0, r3]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d1fa      	bne.n	800d2b6 <memmove+0x1a>
 800d2c0:	e7f8      	b.n	800d2b4 <memmove+0x18>
	...

0800d2c4 <_fstat_r>:
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	b570      	push	{r4, r5, r6, lr}
 800d2c8:	4d06      	ldr	r5, [pc, #24]	; (800d2e4 <_fstat_r+0x20>)
 800d2ca:	0004      	movs	r4, r0
 800d2cc:	0008      	movs	r0, r1
 800d2ce:	0011      	movs	r1, r2
 800d2d0:	602b      	str	r3, [r5, #0]
 800d2d2:	f7f6 fc7a 	bl	8003bca <_fstat>
 800d2d6:	1c43      	adds	r3, r0, #1
 800d2d8:	d103      	bne.n	800d2e2 <_fstat_r+0x1e>
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d000      	beq.n	800d2e2 <_fstat_r+0x1e>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	200007d0 	.word	0x200007d0

0800d2e8 <_isatty_r>:
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	b570      	push	{r4, r5, r6, lr}
 800d2ec:	4d06      	ldr	r5, [pc, #24]	; (800d308 <_isatty_r+0x20>)
 800d2ee:	0004      	movs	r4, r0
 800d2f0:	0008      	movs	r0, r1
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	f7f6 fc77 	bl	8003be6 <_isatty>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d103      	bne.n	800d304 <_isatty_r+0x1c>
 800d2fc:	682b      	ldr	r3, [r5, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d000      	beq.n	800d304 <_isatty_r+0x1c>
 800d302:	6023      	str	r3, [r4, #0]
 800d304:	bd70      	pop	{r4, r5, r6, pc}
 800d306:	46c0      	nop			; (mov r8, r8)
 800d308:	200007d0 	.word	0x200007d0

0800d30c <_sbrk_r>:
 800d30c:	2300      	movs	r3, #0
 800d30e:	b570      	push	{r4, r5, r6, lr}
 800d310:	4d06      	ldr	r5, [pc, #24]	; (800d32c <_sbrk_r+0x20>)
 800d312:	0004      	movs	r4, r0
 800d314:	0008      	movs	r0, r1
 800d316:	602b      	str	r3, [r5, #0]
 800d318:	f7f6 fc7a 	bl	8003c10 <_sbrk>
 800d31c:	1c43      	adds	r3, r0, #1
 800d31e:	d103      	bne.n	800d328 <_sbrk_r+0x1c>
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d000      	beq.n	800d328 <_sbrk_r+0x1c>
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	bd70      	pop	{r4, r5, r6, pc}
 800d32a:	46c0      	nop			; (mov r8, r8)
 800d32c:	200007d0 	.word	0x200007d0

0800d330 <__assert_func>:
 800d330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d332:	0014      	movs	r4, r2
 800d334:	001a      	movs	r2, r3
 800d336:	4b09      	ldr	r3, [pc, #36]	; (800d35c <__assert_func+0x2c>)
 800d338:	0005      	movs	r5, r0
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	000e      	movs	r6, r1
 800d33e:	68d8      	ldr	r0, [r3, #12]
 800d340:	4b07      	ldr	r3, [pc, #28]	; (800d360 <__assert_func+0x30>)
 800d342:	2c00      	cmp	r4, #0
 800d344:	d101      	bne.n	800d34a <__assert_func+0x1a>
 800d346:	4b07      	ldr	r3, [pc, #28]	; (800d364 <__assert_func+0x34>)
 800d348:	001c      	movs	r4, r3
 800d34a:	4907      	ldr	r1, [pc, #28]	; (800d368 <__assert_func+0x38>)
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	9402      	str	r4, [sp, #8]
 800d350:	002b      	movs	r3, r5
 800d352:	9600      	str	r6, [sp, #0]
 800d354:	f000 f866 	bl	800d424 <fiprintf>
 800d358:	f000 f874 	bl	800d444 <abort>
 800d35c:	200001d0 	.word	0x200001d0
 800d360:	0800dae5 	.word	0x0800dae5
 800d364:	0800db20 	.word	0x0800db20
 800d368:	0800daf2 	.word	0x0800daf2

0800d36c <_calloc_r>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	0c0b      	lsrs	r3, r1, #16
 800d370:	0c15      	lsrs	r5, r2, #16
 800d372:	2b00      	cmp	r3, #0
 800d374:	d11e      	bne.n	800d3b4 <_calloc_r+0x48>
 800d376:	2d00      	cmp	r5, #0
 800d378:	d10c      	bne.n	800d394 <_calloc_r+0x28>
 800d37a:	b289      	uxth	r1, r1
 800d37c:	b294      	uxth	r4, r2
 800d37e:	434c      	muls	r4, r1
 800d380:	0021      	movs	r1, r4
 800d382:	f7fe fe5d 	bl	800c040 <_malloc_r>
 800d386:	1e05      	subs	r5, r0, #0
 800d388:	d01b      	beq.n	800d3c2 <_calloc_r+0x56>
 800d38a:	0022      	movs	r2, r4
 800d38c:	2100      	movs	r1, #0
 800d38e:	f7fd fb2f 	bl	800a9f0 <memset>
 800d392:	e016      	b.n	800d3c2 <_calloc_r+0x56>
 800d394:	1c2b      	adds	r3, r5, #0
 800d396:	1c0c      	adds	r4, r1, #0
 800d398:	b289      	uxth	r1, r1
 800d39a:	b292      	uxth	r2, r2
 800d39c:	434a      	muls	r2, r1
 800d39e:	b2a1      	uxth	r1, r4
 800d3a0:	b29c      	uxth	r4, r3
 800d3a2:	434c      	muls	r4, r1
 800d3a4:	0c13      	lsrs	r3, r2, #16
 800d3a6:	18e4      	adds	r4, r4, r3
 800d3a8:	0c23      	lsrs	r3, r4, #16
 800d3aa:	d107      	bne.n	800d3bc <_calloc_r+0x50>
 800d3ac:	0424      	lsls	r4, r4, #16
 800d3ae:	b292      	uxth	r2, r2
 800d3b0:	4314      	orrs	r4, r2
 800d3b2:	e7e5      	b.n	800d380 <_calloc_r+0x14>
 800d3b4:	2d00      	cmp	r5, #0
 800d3b6:	d101      	bne.n	800d3bc <_calloc_r+0x50>
 800d3b8:	1c14      	adds	r4, r2, #0
 800d3ba:	e7ed      	b.n	800d398 <_calloc_r+0x2c>
 800d3bc:	230c      	movs	r3, #12
 800d3be:	2500      	movs	r5, #0
 800d3c0:	6003      	str	r3, [r0, #0]
 800d3c2:	0028      	movs	r0, r5
 800d3c4:	bd70      	pop	{r4, r5, r6, pc}

0800d3c6 <_realloc_r>:
 800d3c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3c8:	0007      	movs	r7, r0
 800d3ca:	000e      	movs	r6, r1
 800d3cc:	0014      	movs	r4, r2
 800d3ce:	2900      	cmp	r1, #0
 800d3d0:	d105      	bne.n	800d3de <_realloc_r+0x18>
 800d3d2:	0011      	movs	r1, r2
 800d3d4:	f7fe fe34 	bl	800c040 <_malloc_r>
 800d3d8:	0005      	movs	r5, r0
 800d3da:	0028      	movs	r0, r5
 800d3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d3de:	2a00      	cmp	r2, #0
 800d3e0:	d103      	bne.n	800d3ea <_realloc_r+0x24>
 800d3e2:	f7fe fa5b 	bl	800b89c <_free_r>
 800d3e6:	0025      	movs	r5, r4
 800d3e8:	e7f7      	b.n	800d3da <_realloc_r+0x14>
 800d3ea:	f000 f832 	bl	800d452 <_malloc_usable_size_r>
 800d3ee:	9001      	str	r0, [sp, #4]
 800d3f0:	4284      	cmp	r4, r0
 800d3f2:	d803      	bhi.n	800d3fc <_realloc_r+0x36>
 800d3f4:	0035      	movs	r5, r6
 800d3f6:	0843      	lsrs	r3, r0, #1
 800d3f8:	42a3      	cmp	r3, r4
 800d3fa:	d3ee      	bcc.n	800d3da <_realloc_r+0x14>
 800d3fc:	0021      	movs	r1, r4
 800d3fe:	0038      	movs	r0, r7
 800d400:	f7fe fe1e 	bl	800c040 <_malloc_r>
 800d404:	1e05      	subs	r5, r0, #0
 800d406:	d0e8      	beq.n	800d3da <_realloc_r+0x14>
 800d408:	9b01      	ldr	r3, [sp, #4]
 800d40a:	0022      	movs	r2, r4
 800d40c:	429c      	cmp	r4, r3
 800d40e:	d900      	bls.n	800d412 <_realloc_r+0x4c>
 800d410:	001a      	movs	r2, r3
 800d412:	0031      	movs	r1, r6
 800d414:	0028      	movs	r0, r5
 800d416:	f7fd fb8f 	bl	800ab38 <memcpy>
 800d41a:	0031      	movs	r1, r6
 800d41c:	0038      	movs	r0, r7
 800d41e:	f7fe fa3d 	bl	800b89c <_free_r>
 800d422:	e7da      	b.n	800d3da <_realloc_r+0x14>

0800d424 <fiprintf>:
 800d424:	b40e      	push	{r1, r2, r3}
 800d426:	b517      	push	{r0, r1, r2, r4, lr}
 800d428:	4c05      	ldr	r4, [pc, #20]	; (800d440 <fiprintf+0x1c>)
 800d42a:	ab05      	add	r3, sp, #20
 800d42c:	cb04      	ldmia	r3!, {r2}
 800d42e:	0001      	movs	r1, r0
 800d430:	6820      	ldr	r0, [r4, #0]
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	f7ff fcfa 	bl	800ce2c <_vfiprintf_r>
 800d438:	bc1e      	pop	{r1, r2, r3, r4}
 800d43a:	bc08      	pop	{r3}
 800d43c:	b003      	add	sp, #12
 800d43e:	4718      	bx	r3
 800d440:	200001d0 	.word	0x200001d0

0800d444 <abort>:
 800d444:	2006      	movs	r0, #6
 800d446:	b510      	push	{r4, lr}
 800d448:	f000 f836 	bl	800d4b8 <raise>
 800d44c:	2001      	movs	r0, #1
 800d44e:	f7f6 fb6d 	bl	8003b2c <_exit>

0800d452 <_malloc_usable_size_r>:
 800d452:	1f0b      	subs	r3, r1, #4
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	1f18      	subs	r0, r3, #4
 800d458:	2b00      	cmp	r3, #0
 800d45a:	da01      	bge.n	800d460 <_malloc_usable_size_r+0xe>
 800d45c:	580b      	ldr	r3, [r1, r0]
 800d45e:	18c0      	adds	r0, r0, r3
 800d460:	4770      	bx	lr

0800d462 <_raise_r>:
 800d462:	b570      	push	{r4, r5, r6, lr}
 800d464:	0004      	movs	r4, r0
 800d466:	000d      	movs	r5, r1
 800d468:	291f      	cmp	r1, #31
 800d46a:	d904      	bls.n	800d476 <_raise_r+0x14>
 800d46c:	2316      	movs	r3, #22
 800d46e:	6003      	str	r3, [r0, #0]
 800d470:	2001      	movs	r0, #1
 800d472:	4240      	negs	r0, r0
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d004      	beq.n	800d486 <_raise_r+0x24>
 800d47c:	008a      	lsls	r2, r1, #2
 800d47e:	189b      	adds	r3, r3, r2
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	2a00      	cmp	r2, #0
 800d484:	d108      	bne.n	800d498 <_raise_r+0x36>
 800d486:	0020      	movs	r0, r4
 800d488:	f000 f832 	bl	800d4f0 <_getpid_r>
 800d48c:	002a      	movs	r2, r5
 800d48e:	0001      	movs	r1, r0
 800d490:	0020      	movs	r0, r4
 800d492:	f000 f81b 	bl	800d4cc <_kill_r>
 800d496:	e7ed      	b.n	800d474 <_raise_r+0x12>
 800d498:	2000      	movs	r0, #0
 800d49a:	2a01      	cmp	r2, #1
 800d49c:	d0ea      	beq.n	800d474 <_raise_r+0x12>
 800d49e:	1c51      	adds	r1, r2, #1
 800d4a0:	d103      	bne.n	800d4aa <_raise_r+0x48>
 800d4a2:	2316      	movs	r3, #22
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	6023      	str	r3, [r4, #0]
 800d4a8:	e7e4      	b.n	800d474 <_raise_r+0x12>
 800d4aa:	2400      	movs	r4, #0
 800d4ac:	0028      	movs	r0, r5
 800d4ae:	601c      	str	r4, [r3, #0]
 800d4b0:	4790      	blx	r2
 800d4b2:	0020      	movs	r0, r4
 800d4b4:	e7de      	b.n	800d474 <_raise_r+0x12>
	...

0800d4b8 <raise>:
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	4b03      	ldr	r3, [pc, #12]	; (800d4c8 <raise+0x10>)
 800d4bc:	0001      	movs	r1, r0
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	f7ff ffcf 	bl	800d462 <_raise_r>
 800d4c4:	bd10      	pop	{r4, pc}
 800d4c6:	46c0      	nop			; (mov r8, r8)
 800d4c8:	200001d0 	.word	0x200001d0

0800d4cc <_kill_r>:
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	b570      	push	{r4, r5, r6, lr}
 800d4d0:	4d06      	ldr	r5, [pc, #24]	; (800d4ec <_kill_r+0x20>)
 800d4d2:	0004      	movs	r4, r0
 800d4d4:	0008      	movs	r0, r1
 800d4d6:	0011      	movs	r1, r2
 800d4d8:	602b      	str	r3, [r5, #0]
 800d4da:	f7f6 fb17 	bl	8003b0c <_kill>
 800d4de:	1c43      	adds	r3, r0, #1
 800d4e0:	d103      	bne.n	800d4ea <_kill_r+0x1e>
 800d4e2:	682b      	ldr	r3, [r5, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d000      	beq.n	800d4ea <_kill_r+0x1e>
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}
 800d4ec:	200007d0 	.word	0x200007d0

0800d4f0 <_getpid_r>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	f7f6 fb05 	bl	8003b00 <_getpid>
 800d4f6:	bd10      	pop	{r4, pc}

0800d4f8 <_init>:
 800d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fa:	46c0      	nop			; (mov r8, r8)
 800d4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fe:	bc08      	pop	{r3}
 800d500:	469e      	mov	lr, r3
 800d502:	4770      	bx	lr

0800d504 <_fini>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50a:	bc08      	pop	{r3}
 800d50c:	469e      	mov	lr, r3
 800d50e:	4770      	bx	lr
