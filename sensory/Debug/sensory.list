
sensory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800c660  0800c660  0001c660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc5c  0800cc5c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc5c  0800cc5c  0001cc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc64  0800cc64  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc64  0800cc64  0001cc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc68  0800cc68  0001cc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cc6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001d8  0800ce40  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  0800ce40  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a3c  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003505  00000000  00000000  00034c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00038180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e94  00000000  00000000  00039440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e77  00000000  00000000  0003a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f7c  00000000  00000000  0005114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083f0d  00000000  00000000  0006a0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058e4  00000000  00000000  000edfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f38b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c648 	.word	0x0800c648

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800c648 	.word	0x0800c648

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd03 	bl	8001e48 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcf5 	bl	8001e48 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fceb 	bl	8001e48 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7b 	bl	8001d7c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc71 	bl	8001d7c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb3b 	bl	8002bd4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ff94 	bl	8002494 <__aeabi_dsub>
 800056c:	f002 fb32 	bl	8002bd4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fca3 	bl	8001f10 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fb66 	bl	8002ca0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fc9a 	bl	8001f10 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 ff56 	bl	8002494 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fb1f 	bl	8002c40 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fc83 	bl	8001f10 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fb46 	bl	8002ca0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fd20 	bl	800105c <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fc3e 	bl	8002ec4 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fc39 	bl	8002ec4 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 facf 	bl	8002e88 <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 fac3 	bl	8002e88 <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800c708 	.word	0x0800c708
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800c748 	.word	0x0800c748

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f95a 	bl	8002e88 <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f002 f94c 	bl	8002e88 <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_fsub>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	46c6      	mov	lr, r8
 8000c90:	0243      	lsls	r3, r0, #9
 8000c92:	0a5b      	lsrs	r3, r3, #9
 8000c94:	0045      	lsls	r5, r0, #1
 8000c96:	00da      	lsls	r2, r3, #3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0248      	lsls	r0, r1, #9
 8000c9c:	004f      	lsls	r7, r1, #1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	0a42      	lsrs	r2, r0, #9
 8000ca2:	001e      	movs	r6, r3
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	b500      	push	{lr}
 8000ca8:	0e2d      	lsrs	r5, r5, #24
 8000caa:	0e3f      	lsrs	r7, r7, #24
 8000cac:	0fc9      	lsrs	r1, r1, #31
 8000cae:	0980      	lsrs	r0, r0, #6
 8000cb0:	2fff      	cmp	r7, #255	; 0xff
 8000cb2:	d059      	beq.n	8000d68 <__aeabi_fsub+0xdc>
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4051      	eors	r1, r2
 8000cb8:	428c      	cmp	r4, r1
 8000cba:	d039      	beq.n	8000d30 <__aeabi_fsub+0xa4>
 8000cbc:	1bea      	subs	r2, r5, r7
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	dd58      	ble.n	8000d74 <__aeabi_fsub+0xe8>
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d068      	beq.n	8000d98 <__aeabi_fsub+0x10c>
 8000cc6:	2dff      	cmp	r5, #255	; 0xff
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x40>
 8000cca:	e0d1      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	04db      	lsls	r3, r3, #19
 8000cd0:	4318      	orrs	r0, r3
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc00      	bgt.n	8000cd8 <__aeabi_fsub+0x4c>
 8000cd6:	e0e3      	b.n	8000ea0 <__aeabi_fsub+0x214>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4662      	mov	r2, ip
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0x58>
 8000ce2:	e0ac      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	099e      	lsrs	r6, r3, #6
 8000ce8:	0030      	movs	r0, r6
 8000cea:	f002 f8cd 	bl	8002e88 <__clzsi2>
 8000cee:	0033      	movs	r3, r6
 8000cf0:	3805      	subs	r0, #5
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fsub+0x6e>
 8000cf8:	e0c6      	b.n	8000e88 <__aeabi_fsub+0x1fc>
 8000cfa:	4ab2      	ldr	r2, [pc, #712]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000cfc:	1a2d      	subs	r5, r5, r0
 8000cfe:	4013      	ands	r3, r2
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	d004      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d04:	220f      	movs	r2, #15
 8000d06:	401a      	ands	r2, r3
 8000d08:	2a04      	cmp	r2, #4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_fsub+0x88>
 8000d12:	e097      	b.n	8000e44 <__aeabi_fsub+0x1b8>
 8000d14:	1c6a      	adds	r2, r5, #1
 8000d16:	2dfe      	cmp	r5, #254	; 0xfe
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x90>
 8000d1a:	e084      	b.n	8000e26 <__aeabi_fsub+0x19a>
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	0a5e      	lsrs	r6, r3, #9
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	05d0      	lsls	r0, r2, #23
 8000d24:	4330      	orrs	r0, r6
 8000d26:	07e4      	lsls	r4, r4, #31
 8000d28:	4320      	orrs	r0, r4
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	1bea      	subs	r2, r5, r7
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	dd41      	ble.n	8000dba <__aeabi_fsub+0x12e>
 8000d36:	2f00      	cmp	r7, #0
 8000d38:	d06b      	beq.n	8000e12 <__aeabi_fsub+0x186>
 8000d3a:	2dff      	cmp	r5, #255	; 0xff
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0xb4>
 8000d3e:	e097      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	04db      	lsls	r3, r3, #19
 8000d44:	4318      	orrs	r0, r3
 8000d46:	2a1b      	cmp	r2, #27
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_fsub+0xc0>
 8000d4a:	e0cc      	b.n	8000ee6 <__aeabi_fsub+0x25a>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4463      	add	r3, ip
 8000d50:	015a      	lsls	r2, r3, #5
 8000d52:	d574      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000d54:	3501      	adds	r5, #1
 8000d56:	2dff      	cmp	r5, #255	; 0xff
 8000d58:	d065      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	499a      	ldr	r1, [pc, #616]	; (8000fc8 <__aeabi_fsub+0x33c>)
 8000d5e:	401a      	ands	r2, r3
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	400b      	ands	r3, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	e7cb      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d01f      	beq.n	8000dac <__aeabi_fsub+0x120>
 8000d6c:	428c      	cmp	r4, r1
 8000d6e:	d022      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000d70:	002a      	movs	r2, r5
 8000d72:	3aff      	subs	r2, #255	; 0xff
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d035      	beq.n	8000de4 <__aeabi_fsub+0x158>
 8000d78:	1b7a      	subs	r2, r7, r5
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0xf4>
 8000d7e:	e099      	b.n	8000eb4 <__aeabi_fsub+0x228>
 8000d80:	4663      	mov	r3, ip
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0xfc>
 8000d86:	e0dd      	b.n	8000f44 <__aeabi_fsub+0x2b8>
 8000d88:	1e53      	subs	r3, r2, #1
 8000d8a:	2a01      	cmp	r2, #1
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x104>
 8000d8e:	e105      	b.n	8000f9c <__aeabi_fsub+0x310>
 8000d90:	2aff      	cmp	r2, #255	; 0xff
 8000d92:	d06b      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000d94:	001a      	movs	r2, r3
 8000d96:	e094      	b.n	8000ec2 <__aeabi_fsub+0x236>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d073      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000d9c:	1e51      	subs	r1, r2, #1
 8000d9e:	2a01      	cmp	r2, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x118>
 8000da2:	e0df      	b.n	8000f64 <__aeabi_fsub+0x2d8>
 8000da4:	2aff      	cmp	r2, #255	; 0xff
 8000da6:	d063      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000da8:	000a      	movs	r2, r1
 8000daa:	e792      	b.n	8000cd2 <__aeabi_fsub+0x46>
 8000dac:	2201      	movs	r2, #1
 8000dae:	4051      	eors	r1, r2
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000db4:	e782      	b.n	8000cbc <__aeabi_fsub+0x30>
 8000db6:	002a      	movs	r2, r5
 8000db8:	3aff      	subs	r2, #255	; 0xff
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d036      	beq.n	8000e2c <__aeabi_fsub+0x1a0>
 8000dbe:	1b7a      	subs	r2, r7, r5
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x13a>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_fsub+0x290>
 8000dc6:	2fff      	cmp	r7, #255	; 0xff
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x140>
 8000dca:	e0da      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	4661      	mov	r1, ip
 8000dd0:	04db      	lsls	r3, r3, #19
 8000dd2:	4319      	orrs	r1, r3
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2a1b      	cmp	r2, #27
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fsub+0x150>
 8000dda:	e0d4      	b.n	8000f86 <__aeabi_fsub+0x2fa>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	003d      	movs	r5, r7
 8000de0:	181b      	adds	r3, r3, r0
 8000de2:	e7b5      	b.n	8000d50 <__aeabi_fsub+0xc4>
 8000de4:	27fe      	movs	r7, #254	; 0xfe
 8000de6:	1c6a      	adds	r2, r5, #1
 8000de8:	4217      	tst	r7, r2
 8000dea:	d171      	bne.n	8000ed0 <__aeabi_fsub+0x244>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fsub+0x166>
 8000df0:	e09e      	b.n	8000f30 <__aeabi_fsub+0x2a4>
 8000df2:	4663      	mov	r3, ip
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x16e>
 8000df8:	e0d5      	b.n	8000fa6 <__aeabi_fsub+0x31a>
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x176>
 8000e00:	e78f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e02:	1a1b      	subs	r3, r3, r0
 8000e04:	015e      	lsls	r6, r3, #5
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_fsub+0x17e>
 8000e08:	e0d6      	b.n	8000fb8 <__aeabi_fsub+0x32c>
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	1ac3      	subs	r3, r0, r3
 8000e10:	e776      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d036      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000e16:	1e51      	subs	r1, r2, #1
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x192>
 8000e1c:	e09a      	b.n	8000f54 <__aeabi_fsub+0x2c8>
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d026      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e22:	000a      	movs	r2, r1
 8000e24:	e78f      	b.n	8000d46 <__aeabi_fsub+0xba>
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e77a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e2c:	27fe      	movs	r7, #254	; 0xfe
 8000e2e:	1c6a      	adds	r2, r5, #1
 8000e30:	4217      	tst	r7, r2
 8000e32:	d062      	beq.n	8000efa <__aeabi_fsub+0x26e>
 8000e34:	2aff      	cmp	r2, #255	; 0xff
 8000e36:	d0f6      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e38:	0015      	movs	r5, r2
 8000e3a:	4460      	add	r0, ip
 8000e3c:	0843      	lsrs	r3, r0, #1
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x1b8>
 8000e42:	e75f      	b.n	8000d04 <__aeabi_fsub+0x78>
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	2dff      	cmp	r5, #255	; 0xff
 8000e48:	d012      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	0a5e      	lsrs	r6, r3, #9
 8000e4e:	b2ea      	uxtb	r2, r5
 8000e50:	e767      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e52:	4662      	mov	r2, ip
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000e58:	e093      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d008      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	03d2      	lsls	r2, r2, #15
 8000e62:	4213      	tst	r3, r2
 8000e64:	d004      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e66:	4640      	mov	r0, r8
 8000e68:	4210      	tst	r0, r2
 8000e6a:	d101      	bne.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	4643      	mov	r3, r8
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0d8      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e74:	2680      	movs	r6, #128	; 0x80
 8000e76:	03f6      	lsls	r6, r6, #15
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	0276      	lsls	r6, r6, #9
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	0a76      	lsrs	r6, r6, #9
 8000e80:	e74f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e82:	4643      	mov	r3, r8
 8000e84:	0015      	movs	r5, r2
 8000e86:	e7de      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000e88:	2220      	movs	r2, #32
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	1a12      	subs	r2, r2, r0
 8000e90:	0019      	movs	r1, r3
 8000e92:	4093      	lsls	r3, r2
 8000e94:	40c1      	lsrs	r1, r0
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4193      	sbcs	r3, r2
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	e72f      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	40d1      	lsrs	r1, r2
 8000eac:	1e5a      	subs	r2, r3, #1
 8000eae:	4193      	sbcs	r3, r2
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	e712      	b.n	8000cda <__aeabi_fsub+0x4e>
 8000eb4:	2fff      	cmp	r7, #255	; 0xff
 8000eb6:	d0d9      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	4664      	mov	r4, ip
 8000ebc:	04db      	lsls	r3, r3, #19
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	2a1b      	cmp	r2, #27
 8000ec4:	dd52      	ble.n	8000f6c <__aeabi_fsub+0x2e0>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	000c      	movs	r4, r1
 8000eca:	003d      	movs	r5, r7
 8000ecc:	1ac3      	subs	r3, r0, r3
 8000ece:	e706      	b.n	8000cde <__aeabi_fsub+0x52>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	1a1e      	subs	r6, r3, r0
 8000ed4:	0173      	lsls	r3, r6, #5
 8000ed6:	d439      	bmi.n	8000f4c <__aeabi_fsub+0x2c0>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000edc:	e704      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	e71d      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	0001      	movs	r1, r0
 8000eec:	4098      	lsls	r0, r3
 8000eee:	0003      	movs	r3, r0
 8000ef0:	40d1      	lsrs	r1, r2
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	4193      	sbcs	r3, r2
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	e729      	b.n	8000d4e <__aeabi_fsub+0xc2>
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	d1a9      	bne.n	8000e52 <__aeabi_fsub+0x1c6>
 8000efe:	4663      	mov	r3, ip
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d056      	beq.n	8000fb2 <__aeabi_fsub+0x326>
 8000f04:	2200      	movs	r2, #0
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x280>
 8000f0a:	e70a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	4463      	add	r3, ip
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	d594      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f14:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000f16:	3501      	adds	r5, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	e790      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0af      	beq.n	8000e82 <__aeabi_fsub+0x1f6>
 8000f22:	1e53      	subs	r3, r2, #1
 8000f24:	2a01      	cmp	r2, #1
 8000f26:	d015      	beq.n	8000f54 <__aeabi_fsub+0x2c8>
 8000f28:	2aff      	cmp	r2, #255	; 0xff
 8000f2a:	d02a      	beq.n	8000f82 <__aeabi_fsub+0x2f6>
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	e752      	b.n	8000dd6 <__aeabi_fsub+0x14a>
 8000f30:	4662      	mov	r2, ip
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d191      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d198      	bne.n	8000e6c <__aeabi_fsub+0x1e0>
 8000f3a:	2680      	movs	r6, #128	; 0x80
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	03f6      	lsls	r6, r6, #15
 8000f42:	e6ee      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f44:	000c      	movs	r4, r1
 8000f46:	4643      	mov	r3, r8
 8000f48:	0015      	movs	r5, r2
 8000f4a:	e77c      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	000c      	movs	r4, r1
 8000f50:	1ac6      	subs	r6, r0, r3
 8000f52:	e6c9      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000f54:	0003      	movs	r3, r0
 8000f56:	4463      	add	r3, ip
 8000f58:	2501      	movs	r5, #1
 8000f5a:	015a      	lsls	r2, r3, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x2d4>
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f60:	2502      	movs	r5, #2
 8000f62:	e6fa      	b.n	8000d5a <__aeabi_fsub+0xce>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2501      	movs	r5, #1
 8000f68:	1a1b      	subs	r3, r3, r0
 8000f6a:	e6b8      	b.n	8000cde <__aeabi_fsub+0x52>
 8000f6c:	4664      	mov	r4, ip
 8000f6e:	2320      	movs	r3, #32
 8000f70:	40d4      	lsrs	r4, r2
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	4662      	mov	r2, ip
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	4193      	sbcs	r3, r2
 8000f7e:	4323      	orrs	r3, r4
 8000f80:	e7a2      	b.n	8000ec8 <__aeabi_fsub+0x23c>
 8000f82:	4643      	mov	r3, r8
 8000f84:	e774      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000f86:	4661      	mov	r1, ip
 8000f88:	2320      	movs	r3, #32
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	4662      	mov	r2, ip
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	4193      	sbcs	r3, r2
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	e720      	b.n	8000dde <__aeabi_fsub+0x152>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	1ac3      	subs	r3, r0, r3
 8000fa4:	e69b      	b.n	8000cde <__aeabi_fsub+0x52>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d099      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000faa:	000c      	movs	r4, r1
 8000fac:	4646      	mov	r6, r8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	e6b7      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb2:	4646      	mov	r6, r8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	e6b4      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0x332>
 8000fbc:	e73f      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e6ae      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fc4:	fbffffff 	.word	0xfbffffff
 8000fc8:	7dffffff 	.word	0x7dffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e04      	subs	r4, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f001 ff59 	bl	8002e88 <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0001      	movs	r1, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	d02c      	beq.n	800103e <__aeabi_ui2f+0x72>
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	408c      	lsls	r4, r1
 8000fe8:	0264      	lsls	r4, r4, #9
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4320      	orrs	r0, r4
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd0a      	ble.n	8001014 <__aeabi_ui2f+0x48>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0020      	movs	r0, r4
 8001002:	321b      	adds	r2, #27
 8001004:	4090      	lsls	r0, r2
 8001006:	0002      	movs	r2, r0
 8001008:	1e50      	subs	r0, r2, #1
 800100a:	4182      	sbcs	r2, r0
 800100c:	2005      	movs	r0, #5
 800100e:	1a40      	subs	r0, r0, r1
 8001010:	40c4      	lsrs	r4, r0
 8001012:	4314      	orrs	r4, r2
 8001014:	2905      	cmp	r1, #5
 8001016:	dc16      	bgt.n	8001046 <__aeabi_ui2f+0x7a>
 8001018:	0022      	movs	r2, r4
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <__aeabi_ui2f+0x8c>)
 800101c:	4002      	ands	r2, r0
 800101e:	0765      	lsls	r5, r4, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001022:	250f      	movs	r5, #15
 8001024:	402c      	ands	r4, r5
 8001026:	2c04      	cmp	r4, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 800102a:	3204      	adds	r2, #4
 800102c:	0154      	lsls	r4, r2, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_ui2f+0x6a>
 8001030:	239f      	movs	r3, #159	; 0x9f
 8001032:	4002      	ands	r2, r0
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	0192      	lsls	r2, r2, #6
 8001038:	0a54      	lsrs	r4, r2, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e7da      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103e:	0264      	lsls	r4, r4, #9
 8001040:	2096      	movs	r0, #150	; 0x96
 8001042:	0a64      	lsrs	r4, r4, #9
 8001044:	e7d6      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8001046:	1f4a      	subs	r2, r1, #5
 8001048:	4094      	lsls	r4, r2
 800104a:	0022      	movs	r2, r4
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <__aeabi_ui2f+0x8c>)
 800104e:	4002      	ands	r2, r0
 8001050:	0765      	lsls	r5, r4, #29
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001054:	e7e5      	b.n	8001022 <__aeabi_ui2f+0x56>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_dadd>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	464f      	mov	r7, r9
 8001060:	4646      	mov	r6, r8
 8001062:	46d6      	mov	lr, sl
 8001064:	0004      	movs	r4, r0
 8001066:	b5c0      	push	{r6, r7, lr}
 8001068:	001f      	movs	r7, r3
 800106a:	030b      	lsls	r3, r1, #12
 800106c:	0010      	movs	r0, r2
 800106e:	004e      	lsls	r6, r1, #1
 8001070:	0a5b      	lsrs	r3, r3, #9
 8001072:	0fcd      	lsrs	r5, r1, #31
 8001074:	0f61      	lsrs	r1, r4, #29
 8001076:	007a      	lsls	r2, r7, #1
 8001078:	4319      	orrs	r1, r3
 800107a:	00e3      	lsls	r3, r4, #3
 800107c:	033c      	lsls	r4, r7, #12
 800107e:	0fff      	lsrs	r7, r7, #31
 8001080:	46bc      	mov	ip, r7
 8001082:	0a64      	lsrs	r4, r4, #9
 8001084:	0f47      	lsrs	r7, r0, #29
 8001086:	4327      	orrs	r7, r4
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	00c0      	lsls	r0, r0, #3
 800108e:	46b9      	mov	r9, r7
 8001090:	4680      	mov	r8, r0
 8001092:	1ab7      	subs	r7, r6, r2
 8001094:	4565      	cmp	r5, ip
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x3e>
 8001098:	e09b      	b.n	80011d2 <__aeabi_dadd+0x176>
 800109a:	2f00      	cmp	r7, #0
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_dadd+0x44>
 800109e:	e084      	b.n	80011aa <__aeabi_dadd+0x14e>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x4a>
 80010a4:	e0be      	b.n	8001224 <__aeabi_dadd+0x1c8>
 80010a6:	4ac8      	ldr	r2, [pc, #800]	; (80013c8 <__aeabi_dadd+0x36c>)
 80010a8:	4296      	cmp	r6, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x52>
 80010ac:	e124      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	464c      	mov	r4, r9
 80010b2:	0412      	lsls	r2, r2, #16
 80010b4:	4314      	orrs	r4, r2
 80010b6:	46a1      	mov	r9, r4
 80010b8:	2f38      	cmp	r7, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x62>
 80010bc:	e167      	b.n	800138e <__aeabi_dadd+0x332>
 80010be:	2f1f      	cmp	r7, #31
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_dadd+0x68>
 80010c2:	e1d6      	b.n	8001472 <__aeabi_dadd+0x416>
 80010c4:	2220      	movs	r2, #32
 80010c6:	464c      	mov	r4, r9
 80010c8:	1bd2      	subs	r2, r2, r7
 80010ca:	4094      	lsls	r4, r2
 80010cc:	46a2      	mov	sl, r4
 80010ce:	4644      	mov	r4, r8
 80010d0:	40fc      	lsrs	r4, r7
 80010d2:	0020      	movs	r0, r4
 80010d4:	4654      	mov	r4, sl
 80010d6:	4304      	orrs	r4, r0
 80010d8:	4640      	mov	r0, r8
 80010da:	4090      	lsls	r0, r2
 80010dc:	1e42      	subs	r2, r0, #1
 80010de:	4190      	sbcs	r0, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	40fa      	lsrs	r2, r7
 80010e4:	4304      	orrs	r4, r0
 80010e6:	1a89      	subs	r1, r1, r2
 80010e8:	1b1c      	subs	r4, r3, r4
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	4192      	sbcs	r2, r2
 80010ee:	4252      	negs	r2, r2
 80010f0:	1a8b      	subs	r3, r1, r2
 80010f2:	469a      	mov	sl, r3
 80010f4:	4653      	mov	r3, sl
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0xa0>
 80010fa:	e0d4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80010fc:	4653      	mov	r3, sl
 80010fe:	025a      	lsls	r2, r3, #9
 8001100:	0a53      	lsrs	r3, r2, #9
 8001102:	469a      	mov	sl, r3
 8001104:	4653      	mov	r3, sl
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0xb0>
 800110a:	e104      	b.n	8001316 <__aeabi_dadd+0x2ba>
 800110c:	4650      	mov	r0, sl
 800110e:	f001 febb 	bl	8002e88 <__clzsi2>
 8001112:	0003      	movs	r3, r0
 8001114:	3b08      	subs	r3, #8
 8001116:	2220      	movs	r2, #32
 8001118:	0020      	movs	r0, r4
 800111a:	1ad2      	subs	r2, r2, r3
 800111c:	4651      	mov	r1, sl
 800111e:	40d0      	lsrs	r0, r2
 8001120:	4099      	lsls	r1, r3
 8001122:	0002      	movs	r2, r0
 8001124:	409c      	lsls	r4, r3
 8001126:	430a      	orrs	r2, r1
 8001128:	42b3      	cmp	r3, r6
 800112a:	da00      	bge.n	800112e <__aeabi_dadd+0xd2>
 800112c:	e102      	b.n	8001334 <__aeabi_dadd+0x2d8>
 800112e:	1b9b      	subs	r3, r3, r6
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	291f      	cmp	r1, #31
 8001134:	dd00      	ble.n	8001138 <__aeabi_dadd+0xdc>
 8001136:	e0a7      	b.n	8001288 <__aeabi_dadd+0x22c>
 8001138:	2320      	movs	r3, #32
 800113a:	0010      	movs	r0, r2
 800113c:	0026      	movs	r6, r4
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	409c      	lsls	r4, r3
 8001142:	4098      	lsls	r0, r3
 8001144:	40ce      	lsrs	r6, r1
 8001146:	40ca      	lsrs	r2, r1
 8001148:	1e63      	subs	r3, r4, #1
 800114a:	419c      	sbcs	r4, r3
 800114c:	4330      	orrs	r0, r6
 800114e:	4692      	mov	sl, r2
 8001150:	2600      	movs	r6, #0
 8001152:	4304      	orrs	r4, r0
 8001154:	0763      	lsls	r3, r4, #29
 8001156:	d009      	beq.n	800116c <__aeabi_dadd+0x110>
 8001158:	230f      	movs	r3, #15
 800115a:	4023      	ands	r3, r4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <__aeabi_dadd+0x110>
 8001160:	1d23      	adds	r3, r4, #4
 8001162:	42a3      	cmp	r3, r4
 8001164:	41a4      	sbcs	r4, r4
 8001166:	4264      	negs	r4, r4
 8001168:	44a2      	add	sl, r4
 800116a:	001c      	movs	r4, r3
 800116c:	4653      	mov	r3, sl
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_dadd+0x118>
 8001172:	e09b      	b.n	80012ac <__aeabi_dadd+0x250>
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001176:	3601      	adds	r6, #1
 8001178:	429e      	cmp	r6, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x122>
 800117c:	e0b8      	b.n	80012f0 <__aeabi_dadd+0x294>
 800117e:	4653      	mov	r3, sl
 8001180:	4992      	ldr	r1, [pc, #584]	; (80013cc <__aeabi_dadd+0x370>)
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	400b      	ands	r3, r1
 8001186:	0019      	movs	r1, r3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	4323      	orrs	r3, r4
 800118c:	0572      	lsls	r2, r6, #21
 800118e:	024c      	lsls	r4, r1, #9
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d52      	lsrs	r2, r2, #21
 8001194:	0512      	lsls	r2, r2, #20
 8001196:	07ed      	lsls	r5, r5, #31
 8001198:	4322      	orrs	r2, r4
 800119a:	432a      	orrs	r2, r5
 800119c:	0018      	movs	r0, r3
 800119e:	0011      	movs	r1, r2
 80011a0:	bce0      	pop	{r5, r6, r7}
 80011a2:	46ba      	mov	sl, r7
 80011a4:	46b1      	mov	r9, r6
 80011a6:	46a8      	mov	r8, r5
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d048      	beq.n	8001240 <__aeabi_dadd+0x1e4>
 80011ae:	1b97      	subs	r7, r2, r6
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x15a>
 80011b4:	e10e      	b.n	80013d4 <__aeabi_dadd+0x378>
 80011b6:	000c      	movs	r4, r1
 80011b8:	431c      	orrs	r4, r3
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x162>
 80011bc:	e1b7      	b.n	800152e <__aeabi_dadd+0x4d2>
 80011be:	1e7c      	subs	r4, r7, #1
 80011c0:	2f01      	cmp	r7, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x16a>
 80011c4:	e226      	b.n	8001614 <__aeabi_dadd+0x5b8>
 80011c6:	4d80      	ldr	r5, [pc, #512]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011c8:	42af      	cmp	r7, r5
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x172>
 80011cc:	e1d5      	b.n	800157a <__aeabi_dadd+0x51e>
 80011ce:	0027      	movs	r7, r4
 80011d0:	e107      	b.n	80013e2 <__aeabi_dadd+0x386>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dadd+0x17c>
 80011d6:	e0b2      	b.n	800133e <__aeabi_dadd+0x2e2>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d047      	beq.n	800126c <__aeabi_dadd+0x210>
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011de:	4296      	cmp	r6, r2
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x188>
 80011e2:	e089      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	464c      	mov	r4, r9
 80011e8:	0412      	lsls	r2, r2, #16
 80011ea:	4314      	orrs	r4, r2
 80011ec:	46a1      	mov	r9, r4
 80011ee:	2f38      	cmp	r7, #56	; 0x38
 80011f0:	dc6b      	bgt.n	80012ca <__aeabi_dadd+0x26e>
 80011f2:	2f1f      	cmp	r7, #31
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dadd+0x19c>
 80011f6:	e16e      	b.n	80014d6 <__aeabi_dadd+0x47a>
 80011f8:	003a      	movs	r2, r7
 80011fa:	4648      	mov	r0, r9
 80011fc:	3a20      	subs	r2, #32
 80011fe:	40d0      	lsrs	r0, r2
 8001200:	4684      	mov	ip, r0
 8001202:	2f20      	cmp	r7, #32
 8001204:	d007      	beq.n	8001216 <__aeabi_dadd+0x1ba>
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	4648      	mov	r0, r9
 800120a:	1bd2      	subs	r2, r2, r7
 800120c:	4090      	lsls	r0, r2
 800120e:	0002      	movs	r2, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4310      	orrs	r0, r2
 8001214:	4680      	mov	r8, r0
 8001216:	4640      	mov	r0, r8
 8001218:	1e42      	subs	r2, r0, #1
 800121a:	4190      	sbcs	r0, r2
 800121c:	4662      	mov	r2, ip
 800121e:	0004      	movs	r4, r0
 8001220:	4314      	orrs	r4, r2
 8001222:	e057      	b.n	80012d4 <__aeabi_dadd+0x278>
 8001224:	464a      	mov	r2, r9
 8001226:	4302      	orrs	r2, r0
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x1d0>
 800122a:	e103      	b.n	8001434 <__aeabi_dadd+0x3d8>
 800122c:	1e7a      	subs	r2, r7, #1
 800122e:	2f01      	cmp	r7, #1
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x1d8>
 8001232:	e193      	b.n	800155c <__aeabi_dadd+0x500>
 8001234:	4c64      	ldr	r4, [pc, #400]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001236:	42a7      	cmp	r7, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x1e0>
 800123a:	e18a      	b.n	8001552 <__aeabi_dadd+0x4f6>
 800123c:	0017      	movs	r7, r2
 800123e:	e73b      	b.n	80010b8 <__aeabi_dadd+0x5c>
 8001240:	4c63      	ldr	r4, [pc, #396]	; (80013d0 <__aeabi_dadd+0x374>)
 8001242:	1c72      	adds	r2, r6, #1
 8001244:	4222      	tst	r2, r4
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x1ee>
 8001248:	e0e0      	b.n	800140c <__aeabi_dadd+0x3b0>
 800124a:	000a      	movs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1f8>
 8001252:	e174      	b.n	800153e <__aeabi_dadd+0x4e2>
 8001254:	2a00      	cmp	r2, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1fe>
 8001258:	e1d0      	b.n	80015fc <__aeabi_dadd+0x5a0>
 800125a:	464a      	mov	r2, r9
 800125c:	4302      	orrs	r2, r0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x206>
 8001260:	e1e3      	b.n	800162a <__aeabi_dadd+0x5ce>
 8001262:	074a      	lsls	r2, r1, #29
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	08c9      	lsrs	r1, r1, #3
 800126a:	e029      	b.n	80012c0 <__aeabi_dadd+0x264>
 800126c:	464a      	mov	r2, r9
 800126e:	4302      	orrs	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x218>
 8001272:	e17d      	b.n	8001570 <__aeabi_dadd+0x514>
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	2f01      	cmp	r7, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x220>
 800127a:	e0e0      	b.n	800143e <__aeabi_dadd+0x3e2>
 800127c:	4c52      	ldr	r4, [pc, #328]	; (80013c8 <__aeabi_dadd+0x36c>)
 800127e:	42a7      	cmp	r7, r4
 8001280:	d100      	bne.n	8001284 <__aeabi_dadd+0x228>
 8001282:	e166      	b.n	8001552 <__aeabi_dadd+0x4f6>
 8001284:	0017      	movs	r7, r2
 8001286:	e7b2      	b.n	80011ee <__aeabi_dadd+0x192>
 8001288:	0010      	movs	r0, r2
 800128a:	3b1f      	subs	r3, #31
 800128c:	40d8      	lsrs	r0, r3
 800128e:	2920      	cmp	r1, #32
 8001290:	d003      	beq.n	800129a <__aeabi_dadd+0x23e>
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	409a      	lsls	r2, r3
 8001298:	4314      	orrs	r4, r2
 800129a:	1e63      	subs	r3, r4, #1
 800129c:	419c      	sbcs	r4, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	469a      	mov	sl, r3
 80012a4:	4304      	orrs	r4, r0
 80012a6:	0763      	lsls	r3, r4, #29
 80012a8:	d000      	beq.n	80012ac <__aeabi_dadd+0x250>
 80012aa:	e755      	b.n	8001158 <__aeabi_dadd+0xfc>
 80012ac:	4652      	mov	r2, sl
 80012ae:	08e3      	lsrs	r3, r4, #3
 80012b0:	0752      	lsls	r2, r2, #29
 80012b2:	4313      	orrs	r3, r2
 80012b4:	4652      	mov	r2, sl
 80012b6:	0037      	movs	r7, r6
 80012b8:	08d1      	lsrs	r1, r2, #3
 80012ba:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012bc:	4297      	cmp	r7, r2
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x2a4>
 80012c0:	0309      	lsls	r1, r1, #12
 80012c2:	057a      	lsls	r2, r7, #21
 80012c4:	0b0c      	lsrs	r4, r1, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	e764      	b.n	8001194 <__aeabi_dadd+0x138>
 80012ca:	4642      	mov	r2, r8
 80012cc:	464c      	mov	r4, r9
 80012ce:	4314      	orrs	r4, r2
 80012d0:	1e62      	subs	r2, r4, #1
 80012d2:	4194      	sbcs	r4, r2
 80012d4:	18e4      	adds	r4, r4, r3
 80012d6:	429c      	cmp	r4, r3
 80012d8:	4192      	sbcs	r2, r2
 80012da:	4252      	negs	r2, r2
 80012dc:	4692      	mov	sl, r2
 80012de:	448a      	add	sl, r1
 80012e0:	4653      	mov	r3, sl
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	d5df      	bpl.n	80012a6 <__aeabi_dadd+0x24a>
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x294>
 80012ee:	e0b3      	b.n	8001458 <__aeabi_dadd+0x3fc>
 80012f0:	0032      	movs	r2, r6
 80012f2:	2400      	movs	r4, #0
 80012f4:	2300      	movs	r3, #0
 80012f6:	e74d      	b.n	8001194 <__aeabi_dadd+0x138>
 80012f8:	074a      	lsls	r2, r1, #29
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	001a      	movs	r2, r3
 8001302:	430a      	orrs	r2, r1
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x2ac>
 8001306:	e200      	b.n	800170a <__aeabi_dadd+0x6ae>
 8001308:	2480      	movs	r4, #128	; 0x80
 800130a:	0324      	lsls	r4, r4, #12
 800130c:	430c      	orrs	r4, r1
 800130e:	0324      	lsls	r4, r4, #12
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001312:	0b24      	lsrs	r4, r4, #12
 8001314:	e73e      	b.n	8001194 <__aeabi_dadd+0x138>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fdb6 	bl	8002e88 <__clzsi2>
 800131c:	0003      	movs	r3, r0
 800131e:	3318      	adds	r3, #24
 8001320:	2b1f      	cmp	r3, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x2ca>
 8001324:	e6f7      	b.n	8001116 <__aeabi_dadd+0xba>
 8001326:	0022      	movs	r2, r4
 8001328:	3808      	subs	r0, #8
 800132a:	4082      	lsls	r2, r0
 800132c:	2400      	movs	r4, #0
 800132e:	42b3      	cmp	r3, r6
 8001330:	db00      	blt.n	8001334 <__aeabi_dadd+0x2d8>
 8001332:	e6fc      	b.n	800112e <__aeabi_dadd+0xd2>
 8001334:	1af6      	subs	r6, r6, r3
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <__aeabi_dadd+0x370>)
 8001338:	401a      	ands	r2, r3
 800133a:	4692      	mov	sl, r2
 800133c:	e70a      	b.n	8001154 <__aeabi_dadd+0xf8>
 800133e:	2f00      	cmp	r7, #0
 8001340:	d02b      	beq.n	800139a <__aeabi_dadd+0x33e>
 8001342:	1b97      	subs	r7, r2, r6
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x2ee>
 8001348:	e0b8      	b.n	80014bc <__aeabi_dadd+0x460>
 800134a:	4c1f      	ldr	r4, [pc, #124]	; (80013c8 <__aeabi_dadd+0x36c>)
 800134c:	42a2      	cmp	r2, r4
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x2f6>
 8001350:	e11c      	b.n	800158c <__aeabi_dadd+0x530>
 8001352:	2480      	movs	r4, #128	; 0x80
 8001354:	0424      	lsls	r4, r4, #16
 8001356:	4321      	orrs	r1, r4
 8001358:	2f38      	cmp	r7, #56	; 0x38
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0x302>
 800135c:	e11e      	b.n	800159c <__aeabi_dadd+0x540>
 800135e:	2f1f      	cmp	r7, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x308>
 8001362:	e19e      	b.n	80016a2 <__aeabi_dadd+0x646>
 8001364:	2620      	movs	r6, #32
 8001366:	000c      	movs	r4, r1
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	0018      	movs	r0, r3
 800136c:	40b3      	lsls	r3, r6
 800136e:	40b4      	lsls	r4, r6
 8001370:	40f8      	lsrs	r0, r7
 8001372:	1e5e      	subs	r6, r3, #1
 8001374:	41b3      	sbcs	r3, r6
 8001376:	40f9      	lsrs	r1, r7
 8001378:	4304      	orrs	r4, r0
 800137a:	431c      	orrs	r4, r3
 800137c:	4489      	add	r9, r1
 800137e:	4444      	add	r4, r8
 8001380:	4544      	cmp	r4, r8
 8001382:	419b      	sbcs	r3, r3
 8001384:	425b      	negs	r3, r3
 8001386:	444b      	add	r3, r9
 8001388:	469a      	mov	sl, r3
 800138a:	0016      	movs	r6, r2
 800138c:	e7a8      	b.n	80012e0 <__aeabi_dadd+0x284>
 800138e:	4642      	mov	r2, r8
 8001390:	464c      	mov	r4, r9
 8001392:	4314      	orrs	r4, r2
 8001394:	1e62      	subs	r2, r4, #1
 8001396:	4194      	sbcs	r4, r2
 8001398:	e6a6      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800139a:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__aeabi_dadd+0x374>)
 800139c:	1c72      	adds	r2, r6, #1
 800139e:	4222      	tst	r2, r4
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x348>
 80013a2:	e0a8      	b.n	80014f6 <__aeabi_dadd+0x49a>
 80013a4:	000a      	movs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x352>
 80013ac:	e10a      	b.n	80015c4 <__aeabi_dadd+0x568>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x358>
 80013b2:	e15e      	b.n	8001672 <__aeabi_dadd+0x616>
 80013b4:	464a      	mov	r2, r9
 80013b6:	4302      	orrs	r2, r0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x360>
 80013ba:	e161      	b.n	8001680 <__aeabi_dadd+0x624>
 80013bc:	074a      	lsls	r2, r1, #29
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	08c9      	lsrs	r1, r1, #3
 80013c4:	e77c      	b.n	80012c0 <__aeabi_dadd+0x264>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	4ccf      	ldr	r4, [pc, #828]	; (8001714 <__aeabi_dadd+0x6b8>)
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x380>
 80013da:	e0ce      	b.n	800157a <__aeabi_dadd+0x51e>
 80013dc:	2480      	movs	r4, #128	; 0x80
 80013de:	0424      	lsls	r4, r4, #16
 80013e0:	4321      	orrs	r1, r4
 80013e2:	2f38      	cmp	r7, #56	; 0x38
 80013e4:	dc5b      	bgt.n	800149e <__aeabi_dadd+0x442>
 80013e6:	2f1f      	cmp	r7, #31
 80013e8:	dd00      	ble.n	80013ec <__aeabi_dadd+0x390>
 80013ea:	e0dc      	b.n	80015a6 <__aeabi_dadd+0x54a>
 80013ec:	2520      	movs	r5, #32
 80013ee:	000c      	movs	r4, r1
 80013f0:	1bed      	subs	r5, r5, r7
 80013f2:	001e      	movs	r6, r3
 80013f4:	40ab      	lsls	r3, r5
 80013f6:	40ac      	lsls	r4, r5
 80013f8:	40fe      	lsrs	r6, r7
 80013fa:	1e5d      	subs	r5, r3, #1
 80013fc:	41ab      	sbcs	r3, r5
 80013fe:	4334      	orrs	r4, r6
 8001400:	40f9      	lsrs	r1, r7
 8001402:	431c      	orrs	r4, r3
 8001404:	464b      	mov	r3, r9
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4699      	mov	r9, r3
 800140a:	e04c      	b.n	80014a6 <__aeabi_dadd+0x44a>
 800140c:	464a      	mov	r2, r9
 800140e:	1a1c      	subs	r4, r3, r0
 8001410:	1a88      	subs	r0, r1, r2
 8001412:	42a3      	cmp	r3, r4
 8001414:	4192      	sbcs	r2, r2
 8001416:	4252      	negs	r2, r2
 8001418:	4692      	mov	sl, r2
 800141a:	0002      	movs	r2, r0
 800141c:	4650      	mov	r0, sl
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	4692      	mov	sl, r2
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	d478      	bmi.n	8001518 <__aeabi_dadd+0x4bc>
 8001426:	4653      	mov	r3, sl
 8001428:	4323      	orrs	r3, r4
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3d2>
 800142c:	e66a      	b.n	8001104 <__aeabi_dadd+0xa8>
 800142e:	2100      	movs	r1, #0
 8001430:	2500      	movs	r5, #0
 8001432:	e745      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001434:	074a      	lsls	r2, r1, #29
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	4313      	orrs	r3, r2
 800143a:	08c9      	lsrs	r1, r1, #3
 800143c:	e73d      	b.n	80012ba <__aeabi_dadd+0x25e>
 800143e:	181c      	adds	r4, r3, r0
 8001440:	429c      	cmp	r4, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	4449      	add	r1, r9
 8001446:	468a      	mov	sl, r1
 8001448:	425b      	negs	r3, r3
 800144a:	449a      	add	sl, r3
 800144c:	4653      	mov	r3, sl
 800144e:	2601      	movs	r6, #1
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x3fa>
 8001454:	e727      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001456:	2602      	movs	r6, #2
 8001458:	4652      	mov	r2, sl
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <__aeabi_dadd+0x6bc>)
 800145c:	2101      	movs	r1, #1
 800145e:	401a      	ands	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4021      	ands	r1, r4
 8001464:	0862      	lsrs	r2, r4, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	07dc      	lsls	r4, r3, #31
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	469a      	mov	sl, r3
 800146e:	4314      	orrs	r4, r2
 8001470:	e670      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001472:	003a      	movs	r2, r7
 8001474:	464c      	mov	r4, r9
 8001476:	3a20      	subs	r2, #32
 8001478:	40d4      	lsrs	r4, r2
 800147a:	46a4      	mov	ip, r4
 800147c:	2f20      	cmp	r7, #32
 800147e:	d007      	beq.n	8001490 <__aeabi_dadd+0x434>
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	4648      	mov	r0, r9
 8001484:	1bd2      	subs	r2, r2, r7
 8001486:	4090      	lsls	r0, r2
 8001488:	0002      	movs	r2, r0
 800148a:	4640      	mov	r0, r8
 800148c:	4310      	orrs	r0, r2
 800148e:	4680      	mov	r8, r0
 8001490:	4640      	mov	r0, r8
 8001492:	1e42      	subs	r2, r0, #1
 8001494:	4190      	sbcs	r0, r2
 8001496:	4662      	mov	r2, ip
 8001498:	0004      	movs	r4, r0
 800149a:	4314      	orrs	r4, r2
 800149c:	e624      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800149e:	4319      	orrs	r1, r3
 80014a0:	000c      	movs	r4, r1
 80014a2:	1e63      	subs	r3, r4, #1
 80014a4:	419c      	sbcs	r4, r3
 80014a6:	4643      	mov	r3, r8
 80014a8:	1b1c      	subs	r4, r3, r4
 80014aa:	45a0      	cmp	r8, r4
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	4649      	mov	r1, r9
 80014b0:	425b      	negs	r3, r3
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	469a      	mov	sl, r3
 80014b6:	4665      	mov	r5, ip
 80014b8:	0016      	movs	r6, r2
 80014ba:	e61b      	b.n	80010f4 <__aeabi_dadd+0x98>
 80014bc:	000c      	movs	r4, r1
 80014be:	431c      	orrs	r4, r3
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x468>
 80014c2:	e0c7      	b.n	8001654 <__aeabi_dadd+0x5f8>
 80014c4:	1e7c      	subs	r4, r7, #1
 80014c6:	2f01      	cmp	r7, #1
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x470>
 80014ca:	e0f9      	b.n	80016c0 <__aeabi_dadd+0x664>
 80014cc:	4e91      	ldr	r6, [pc, #580]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014ce:	42b7      	cmp	r7, r6
 80014d0:	d05c      	beq.n	800158c <__aeabi_dadd+0x530>
 80014d2:	0027      	movs	r7, r4
 80014d4:	e740      	b.n	8001358 <__aeabi_dadd+0x2fc>
 80014d6:	2220      	movs	r2, #32
 80014d8:	464c      	mov	r4, r9
 80014da:	4640      	mov	r0, r8
 80014dc:	1bd2      	subs	r2, r2, r7
 80014de:	4094      	lsls	r4, r2
 80014e0:	40f8      	lsrs	r0, r7
 80014e2:	4304      	orrs	r4, r0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4090      	lsls	r0, r2
 80014e8:	1e42      	subs	r2, r0, #1
 80014ea:	4190      	sbcs	r0, r2
 80014ec:	464a      	mov	r2, r9
 80014ee:	40fa      	lsrs	r2, r7
 80014f0:	4304      	orrs	r4, r0
 80014f2:	1889      	adds	r1, r1, r2
 80014f4:	e6ee      	b.n	80012d4 <__aeabi_dadd+0x278>
 80014f6:	4c87      	ldr	r4, [pc, #540]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014f8:	42a2      	cmp	r2, r4
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x4a2>
 80014fc:	e6f9      	b.n	80012f2 <__aeabi_dadd+0x296>
 80014fe:	1818      	adds	r0, r3, r0
 8001500:	4298      	cmp	r0, r3
 8001502:	419b      	sbcs	r3, r3
 8001504:	4449      	add	r1, r9
 8001506:	425b      	negs	r3, r3
 8001508:	18cb      	adds	r3, r1, r3
 800150a:	07dc      	lsls	r4, r3, #31
 800150c:	0840      	lsrs	r0, r0, #1
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	469a      	mov	sl, r3
 8001512:	0016      	movs	r6, r2
 8001514:	4304      	orrs	r4, r0
 8001516:	e6c6      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001518:	4642      	mov	r2, r8
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	45a0      	cmp	r8, r4
 800151e:	4180      	sbcs	r0, r0
 8001520:	464b      	mov	r3, r9
 8001522:	4240      	negs	r0, r0
 8001524:	1a59      	subs	r1, r3, r1
 8001526:	1a0b      	subs	r3, r1, r0
 8001528:	469a      	mov	sl, r3
 800152a:	4665      	mov	r5, ip
 800152c:	e5ea      	b.n	8001104 <__aeabi_dadd+0xa8>
 800152e:	464b      	mov	r3, r9
 8001530:	464a      	mov	r2, r9
 8001532:	08c0      	lsrs	r0, r0, #3
 8001534:	075b      	lsls	r3, r3, #29
 8001536:	4665      	mov	r5, ip
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e6bd      	b.n	80012ba <__aeabi_dadd+0x25e>
 800153e:	2a00      	cmp	r2, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x4e8>
 8001542:	e08e      	b.n	8001662 <__aeabi_dadd+0x606>
 8001544:	464b      	mov	r3, r9
 8001546:	4303      	orrs	r3, r0
 8001548:	d117      	bne.n	800157a <__aeabi_dadd+0x51e>
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	2500      	movs	r5, #0
 800154e:	0309      	lsls	r1, r1, #12
 8001550:	e6da      	b.n	8001308 <__aeabi_dadd+0x2ac>
 8001552:	074a      	lsls	r2, r1, #29
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4313      	orrs	r3, r2
 8001558:	08c9      	lsrs	r1, r1, #3
 800155a:	e6d1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800155c:	1a1c      	subs	r4, r3, r0
 800155e:	464a      	mov	r2, r9
 8001560:	42a3      	cmp	r3, r4
 8001562:	419b      	sbcs	r3, r3
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	425b      	negs	r3, r3
 8001568:	1acb      	subs	r3, r1, r3
 800156a:	469a      	mov	sl, r3
 800156c:	2601      	movs	r6, #1
 800156e:	e5c1      	b.n	80010f4 <__aeabi_dadd+0x98>
 8001570:	074a      	lsls	r2, r1, #29
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4313      	orrs	r3, r2
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	e69f      	b.n	80012ba <__aeabi_dadd+0x25e>
 800157a:	4643      	mov	r3, r8
 800157c:	08d8      	lsrs	r0, r3, #3
 800157e:	464b      	mov	r3, r9
 8001580:	464a      	mov	r2, r9
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	4665      	mov	r5, ip
 8001586:	4303      	orrs	r3, r0
 8001588:	08d1      	lsrs	r1, r2, #3
 800158a:	e6b9      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800158c:	4643      	mov	r3, r8
 800158e:	08d8      	lsrs	r0, r3, #3
 8001590:	464b      	mov	r3, r9
 8001592:	464a      	mov	r2, r9
 8001594:	075b      	lsls	r3, r3, #29
 8001596:	4303      	orrs	r3, r0
 8001598:	08d1      	lsrs	r1, r2, #3
 800159a:	e6b1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800159c:	4319      	orrs	r1, r3
 800159e:	000c      	movs	r4, r1
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	e6eb      	b.n	800137e <__aeabi_dadd+0x322>
 80015a6:	003c      	movs	r4, r7
 80015a8:	000d      	movs	r5, r1
 80015aa:	3c20      	subs	r4, #32
 80015ac:	40e5      	lsrs	r5, r4
 80015ae:	2f20      	cmp	r7, #32
 80015b0:	d003      	beq.n	80015ba <__aeabi_dadd+0x55e>
 80015b2:	2440      	movs	r4, #64	; 0x40
 80015b4:	1be4      	subs	r4, r4, r7
 80015b6:	40a1      	lsls	r1, r4
 80015b8:	430b      	orrs	r3, r1
 80015ba:	001c      	movs	r4, r3
 80015bc:	1e63      	subs	r3, r4, #1
 80015be:	419c      	sbcs	r4, r3
 80015c0:	432c      	orrs	r4, r5
 80015c2:	e770      	b.n	80014a6 <__aeabi_dadd+0x44a>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d0e1      	beq.n	800158c <__aeabi_dadd+0x530>
 80015c8:	464a      	mov	r2, r9
 80015ca:	4302      	orrs	r2, r0
 80015cc:	d0c1      	beq.n	8001552 <__aeabi_dadd+0x4f6>
 80015ce:	074a      	lsls	r2, r1, #29
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4211      	tst	r1, r2
 80015dc:	d008      	beq.n	80015f0 <__aeabi_dadd+0x594>
 80015de:	4648      	mov	r0, r9
 80015e0:	08c4      	lsrs	r4, r0, #3
 80015e2:	4214      	tst	r4, r2
 80015e4:	d104      	bne.n	80015f0 <__aeabi_dadd+0x594>
 80015e6:	4643      	mov	r3, r8
 80015e8:	0021      	movs	r1, r4
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	0742      	lsls	r2, r0, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	0f5a      	lsrs	r2, r3, #29
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	0752      	lsls	r2, r2, #29
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	e681      	b.n	8001300 <__aeabi_dadd+0x2a4>
 80015fc:	464b      	mov	r3, r9
 80015fe:	4303      	orrs	r3, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x5a8>
 8001602:	e714      	b.n	800142e <__aeabi_dadd+0x3d2>
 8001604:	464b      	mov	r3, r9
 8001606:	464a      	mov	r2, r9
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	4665      	mov	r5, ip
 800160e:	4303      	orrs	r3, r0
 8001610:	08d1      	lsrs	r1, r2, #3
 8001612:	e655      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001614:	1ac4      	subs	r4, r0, r3
 8001616:	45a0      	cmp	r8, r4
 8001618:	4180      	sbcs	r0, r0
 800161a:	464b      	mov	r3, r9
 800161c:	4240      	negs	r0, r0
 800161e:	1a59      	subs	r1, r3, r1
 8001620:	1a0b      	subs	r3, r1, r0
 8001622:	469a      	mov	sl, r3
 8001624:	4665      	mov	r5, ip
 8001626:	2601      	movs	r6, #1
 8001628:	e564      	b.n	80010f4 <__aeabi_dadd+0x98>
 800162a:	1a1c      	subs	r4, r3, r0
 800162c:	464a      	mov	r2, r9
 800162e:	42a3      	cmp	r3, r4
 8001630:	4180      	sbcs	r0, r0
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	4240      	negs	r0, r0
 8001636:	1a12      	subs	r2, r2, r0
 8001638:	4692      	mov	sl, r2
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	d549      	bpl.n	80016d2 <__aeabi_dadd+0x676>
 800163e:	4642      	mov	r2, r8
 8001640:	1ad4      	subs	r4, r2, r3
 8001642:	45a0      	cmp	r8, r4
 8001644:	4180      	sbcs	r0, r0
 8001646:	464b      	mov	r3, r9
 8001648:	4240      	negs	r0, r0
 800164a:	1a59      	subs	r1, r3, r1
 800164c:	1a0b      	subs	r3, r1, r0
 800164e:	469a      	mov	sl, r3
 8001650:	4665      	mov	r5, ip
 8001652:	e57f      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001654:	464b      	mov	r3, r9
 8001656:	464a      	mov	r2, r9
 8001658:	08c0      	lsrs	r0, r0, #3
 800165a:	075b      	lsls	r3, r3, #29
 800165c:	4303      	orrs	r3, r0
 800165e:	08d1      	lsrs	r1, r2, #3
 8001660:	e62b      	b.n	80012ba <__aeabi_dadd+0x25e>
 8001662:	464a      	mov	r2, r9
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4302      	orrs	r2, r0
 8001668:	d138      	bne.n	80016dc <__aeabi_dadd+0x680>
 800166a:	074a      	lsls	r2, r1, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c9      	lsrs	r1, r1, #3
 8001670:	e646      	b.n	8001300 <__aeabi_dadd+0x2a4>
 8001672:	464b      	mov	r3, r9
 8001674:	464a      	mov	r2, r9
 8001676:	08c0      	lsrs	r0, r0, #3
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	4303      	orrs	r3, r0
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	e61f      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001680:	181c      	adds	r4, r3, r0
 8001682:	429c      	cmp	r4, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	4449      	add	r1, r9
 8001688:	468a      	mov	sl, r1
 800168a:	425b      	negs	r3, r3
 800168c:	449a      	add	sl, r3
 800168e:	4653      	mov	r3, sl
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dadd+0x63a>
 8001694:	e607      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001696:	4652      	mov	r2, sl
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <__aeabi_dadd+0x6bc>)
 800169a:	2601      	movs	r6, #1
 800169c:	401a      	ands	r2, r3
 800169e:	4692      	mov	sl, r2
 80016a0:	e601      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016a2:	003c      	movs	r4, r7
 80016a4:	000e      	movs	r6, r1
 80016a6:	3c20      	subs	r4, #32
 80016a8:	40e6      	lsrs	r6, r4
 80016aa:	2f20      	cmp	r7, #32
 80016ac:	d003      	beq.n	80016b6 <__aeabi_dadd+0x65a>
 80016ae:	2440      	movs	r4, #64	; 0x40
 80016b0:	1be4      	subs	r4, r4, r7
 80016b2:	40a1      	lsls	r1, r4
 80016b4:	430b      	orrs	r3, r1
 80016b6:	001c      	movs	r4, r3
 80016b8:	1e63      	subs	r3, r4, #1
 80016ba:	419c      	sbcs	r4, r3
 80016bc:	4334      	orrs	r4, r6
 80016be:	e65e      	b.n	800137e <__aeabi_dadd+0x322>
 80016c0:	4443      	add	r3, r8
 80016c2:	4283      	cmp	r3, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4449      	add	r1, r9
 80016c8:	468a      	mov	sl, r1
 80016ca:	4240      	negs	r0, r0
 80016cc:	001c      	movs	r4, r3
 80016ce:	4482      	add	sl, r0
 80016d0:	e6bc      	b.n	800144c <__aeabi_dadd+0x3f0>
 80016d2:	4653      	mov	r3, sl
 80016d4:	4323      	orrs	r3, r4
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x67e>
 80016d8:	e6a9      	b.n	800142e <__aeabi_dadd+0x3d2>
 80016da:	e5e4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016dc:	074a      	lsls	r2, r1, #29
 80016de:	4313      	orrs	r3, r2
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	4211      	tst	r1, r2
 80016e8:	d009      	beq.n	80016fe <__aeabi_dadd+0x6a2>
 80016ea:	4648      	mov	r0, r9
 80016ec:	08c4      	lsrs	r4, r0, #3
 80016ee:	4214      	tst	r4, r2
 80016f0:	d105      	bne.n	80016fe <__aeabi_dadd+0x6a2>
 80016f2:	4643      	mov	r3, r8
 80016f4:	4665      	mov	r5, ip
 80016f6:	0021      	movs	r1, r4
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0742      	lsls	r2, r0, #29
 80016fc:	4313      	orrs	r3, r2
 80016fe:	0f5a      	lsrs	r2, r3, #29
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	0752      	lsls	r2, r2, #29
 8001706:	4313      	orrs	r3, r2
 8001708:	e5fa      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800170a:	2300      	movs	r3, #0
 800170c:	4a01      	ldr	r2, [pc, #4]	; (8001714 <__aeabi_dadd+0x6b8>)
 800170e:	001c      	movs	r4, r3
 8001710:	e540      	b.n	8001194 <__aeabi_dadd+0x138>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff
 8001718:	ff7fffff 	.word	0xff7fffff

0800171c <__aeabi_ddiv>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	030c      	lsls	r4, r1, #12
 800172a:	001f      	movs	r7, r3
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	4681      	mov	r9, r0
 8001730:	4692      	mov	sl, r2
 8001732:	0005      	movs	r5, r0
 8001734:	b085      	sub	sp, #20
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d5b      	lsrs	r3, r3, #21
 800173a:	0fce      	lsrs	r6, r1, #31
 800173c:	2b00      	cmp	r3, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x26>
 8001740:	e152      	b.n	80019e8 <__aeabi_ddiv+0x2cc>
 8001742:	4ad2      	ldr	r2, [pc, #840]	; (8001a8c <__aeabi_ddiv+0x370>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0x2e>
 8001748:	e16e      	b.n	8001a28 <__aeabi_ddiv+0x30c>
 800174a:	0f42      	lsrs	r2, r0, #29
 800174c:	00e4      	lsls	r4, r4, #3
 800174e:	4314      	orrs	r4, r2
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	4322      	orrs	r2, r4
 8001756:	4690      	mov	r8, r2
 8001758:	4acd      	ldr	r2, [pc, #820]	; (8001a90 <__aeabi_ddiv+0x374>)
 800175a:	00c5      	lsls	r5, r0, #3
 800175c:	4693      	mov	fp, r2
 800175e:	449b      	add	fp, r3
 8001760:	2300      	movs	r3, #0
 8001762:	4699      	mov	r9, r3
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	033c      	lsls	r4, r7, #12
 8001768:	007b      	lsls	r3, r7, #1
 800176a:	4650      	mov	r0, sl
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	0fff      	lsrs	r7, r7, #31
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x5c>
 8001776:	e11a      	b.n	80019ae <__aeabi_ddiv+0x292>
 8001778:	4ac4      	ldr	r2, [pc, #784]	; (8001a8c <__aeabi_ddiv+0x370>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x64>
 800177e:	e15e      	b.n	8001a3e <__aeabi_ddiv+0x322>
 8001780:	0f42      	lsrs	r2, r0, #29
 8001782:	00e4      	lsls	r4, r4, #3
 8001784:	4322      	orrs	r2, r4
 8001786:	2480      	movs	r4, #128	; 0x80
 8001788:	0424      	lsls	r4, r4, #16
 800178a:	4314      	orrs	r4, r2
 800178c:	4ac0      	ldr	r2, [pc, #768]	; (8001a90 <__aeabi_ddiv+0x374>)
 800178e:	00c1      	lsls	r1, r0, #3
 8001790:	4694      	mov	ip, r2
 8001792:	465a      	mov	r2, fp
 8001794:	4463      	add	r3, ip
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	469b      	mov	fp, r3
 800179a:	2000      	movs	r0, #0
 800179c:	0033      	movs	r3, r6
 800179e:	407b      	eors	r3, r7
 80017a0:	469a      	mov	sl, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d827      	bhi.n	80017f8 <__aeabi_ddiv+0xdc>
 80017a8:	4aba      	ldr	r2, [pc, #744]	; (8001a94 <__aeabi_ddiv+0x378>)
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	58d3      	ldr	r3, [r2, r3]
 80017ae:	469f      	mov	pc, r3
 80017b0:	46b2      	mov	sl, r6
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d016      	beq.n	80017e6 <__aeabi_ddiv+0xca>
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0xa2>
 80017bc:	e287      	b.n	8001cce <__aeabi_ddiv+0x5b2>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d000      	beq.n	80017c4 <__aeabi_ddiv+0xa8>
 80017c2:	e0d5      	b.n	8001970 <__aeabi_ddiv+0x254>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	4313      	orrs	r3, r2
 80017ce:	4652      	mov	r2, sl
 80017d0:	07d2      	lsls	r2, r2, #31
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0028      	movs	r0, r5
 80017d6:	0019      	movs	r1, r3
 80017d8:	b005      	add	sp, #20
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	2200      	movs	r2, #0
 80017e8:	2500      	movs	r5, #0
 80017ea:	4ba8      	ldr	r3, [pc, #672]	; (8001a8c <__aeabi_ddiv+0x370>)
 80017ec:	e7ed      	b.n	80017ca <__aeabi_ddiv+0xae>
 80017ee:	46ba      	mov	sl, r7
 80017f0:	46a0      	mov	r8, r4
 80017f2:	000d      	movs	r5, r1
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	e7dc      	b.n	80017b2 <__aeabi_ddiv+0x96>
 80017f8:	4544      	cmp	r4, r8
 80017fa:	d200      	bcs.n	80017fe <__aeabi_ddiv+0xe2>
 80017fc:	e1c4      	b.n	8001b88 <__aeabi_ddiv+0x46c>
 80017fe:	d100      	bne.n	8001802 <__aeabi_ddiv+0xe6>
 8001800:	e1bf      	b.n	8001b82 <__aeabi_ddiv+0x466>
 8001802:	2301      	movs	r3, #1
 8001804:	425b      	negs	r3, r3
 8001806:	469c      	mov	ip, r3
 8001808:	002e      	movs	r6, r5
 800180a:	4640      	mov	r0, r8
 800180c:	2500      	movs	r5, #0
 800180e:	44e3      	add	fp, ip
 8001810:	0223      	lsls	r3, r4, #8
 8001812:	0e0c      	lsrs	r4, r1, #24
 8001814:	431c      	orrs	r4, r3
 8001816:	0c1b      	lsrs	r3, r3, #16
 8001818:	4699      	mov	r9, r3
 800181a:	0423      	lsls	r3, r4, #16
 800181c:	020a      	lsls	r2, r1, #8
 800181e:	0c1f      	lsrs	r7, r3, #16
 8001820:	4649      	mov	r1, r9
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9701      	str	r7, [sp, #4]
 8001826:	f7fe fd11 	bl	800024c <__aeabi_uidivmod>
 800182a:	0002      	movs	r2, r0
 800182c:	437a      	muls	r2, r7
 800182e:	040b      	lsls	r3, r1, #16
 8001830:	0c31      	lsrs	r1, r6, #16
 8001832:	4680      	mov	r8, r0
 8001834:	4319      	orrs	r1, r3
 8001836:	428a      	cmp	r2, r1
 8001838:	d907      	bls.n	800184a <__aeabi_ddiv+0x12e>
 800183a:	2301      	movs	r3, #1
 800183c:	425b      	negs	r3, r3
 800183e:	469c      	mov	ip, r3
 8001840:	1909      	adds	r1, r1, r4
 8001842:	44e0      	add	r8, ip
 8001844:	428c      	cmp	r4, r1
 8001846:	d800      	bhi.n	800184a <__aeabi_ddiv+0x12e>
 8001848:	e201      	b.n	8001c4e <__aeabi_ddiv+0x532>
 800184a:	1a88      	subs	r0, r1, r2
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fcfd 	bl	800024c <__aeabi_uidivmod>
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	0436      	lsls	r6, r6, #16
 8001856:	4342      	muls	r2, r0
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	0003      	movs	r3, r0
 800185e:	430e      	orrs	r6, r1
 8001860:	42b2      	cmp	r2, r6
 8001862:	d904      	bls.n	800186e <__aeabi_ddiv+0x152>
 8001864:	1936      	adds	r6, r6, r4
 8001866:	3b01      	subs	r3, #1
 8001868:	42b4      	cmp	r4, r6
 800186a:	d800      	bhi.n	800186e <__aeabi_ddiv+0x152>
 800186c:	e1e9      	b.n	8001c42 <__aeabi_ddiv+0x526>
 800186e:	1ab0      	subs	r0, r6, r2
 8001870:	4642      	mov	r2, r8
 8001872:	9e00      	ldr	r6, [sp, #0]
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	0c33      	lsrs	r3, r6, #16
 800187a:	001f      	movs	r7, r3
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4690      	mov	r8, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	0413      	lsls	r3, r2, #16
 8001884:	0432      	lsls	r2, r6, #16
 8001886:	0c16      	lsrs	r6, r2, #16
 8001888:	0032      	movs	r2, r6
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	9603      	str	r6, [sp, #12]
 8001890:	437b      	muls	r3, r7
 8001892:	434e      	muls	r6, r1
 8001894:	4379      	muls	r1, r7
 8001896:	0c17      	lsrs	r7, r2, #16
 8001898:	46bc      	mov	ip, r7
 800189a:	199b      	adds	r3, r3, r6
 800189c:	4463      	add	r3, ip
 800189e:	429e      	cmp	r6, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x18e>
 80018a2:	2680      	movs	r6, #128	; 0x80
 80018a4:	0276      	lsls	r6, r6, #9
 80018a6:	46b4      	mov	ip, r6
 80018a8:	4461      	add	r1, ip
 80018aa:	0c1e      	lsrs	r6, r3, #16
 80018ac:	1871      	adds	r1, r6, r1
 80018ae:	0416      	lsls	r6, r2, #16
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c36      	lsrs	r6, r6, #16
 80018b4:	199e      	adds	r6, r3, r6
 80018b6:	4288      	cmp	r0, r1
 80018b8:	d302      	bcc.n	80018c0 <__aeabi_ddiv+0x1a4>
 80018ba:	d112      	bne.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018bc:	42b5      	cmp	r5, r6
 80018be:	d210      	bcs.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018c0:	4643      	mov	r3, r8
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	469c      	mov	ip, r3
 80018c8:	4465      	add	r5, ip
 80018ca:	001f      	movs	r7, r3
 80018cc:	429d      	cmp	r5, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	425b      	negs	r3, r3
 80018d2:	191b      	adds	r3, r3, r4
 80018d4:	18c0      	adds	r0, r0, r3
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x1c0>
 80018da:	e19e      	b.n	8001c1a <__aeabi_ddiv+0x4fe>
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x1c4>
 80018de:	e199      	b.n	8001c14 <__aeabi_ddiv+0x4f8>
 80018e0:	4690      	mov	r8, r2
 80018e2:	1bae      	subs	r6, r5, r6
 80018e4:	42b5      	cmp	r5, r6
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	1a40      	subs	r0, r0, r1
 80018ea:	426d      	negs	r5, r5
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x1d8>
 80018f2:	e1d2      	b.n	8001c9a <__aeabi_ddiv+0x57e>
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fca9 	bl	800024c <__aeabi_uidivmod>
 80018fa:	9a01      	ldr	r2, [sp, #4]
 80018fc:	040b      	lsls	r3, r1, #16
 80018fe:	4342      	muls	r2, r0
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	0005      	movs	r5, r0
 8001904:	4319      	orrs	r1, r3
 8001906:	428a      	cmp	r2, r1
 8001908:	d900      	bls.n	800190c <__aeabi_ddiv+0x1f0>
 800190a:	e16c      	b.n	8001be6 <__aeabi_ddiv+0x4ca>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	4649      	mov	r1, r9
 8001910:	f7fe fc9c 	bl	800024c <__aeabi_uidivmod>
 8001914:	9a01      	ldr	r2, [sp, #4]
 8001916:	0436      	lsls	r6, r6, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c36      	lsrs	r6, r6, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430e      	orrs	r6, r1
 8001922:	42b2      	cmp	r2, r6
 8001924:	d900      	bls.n	8001928 <__aeabi_ddiv+0x20c>
 8001926:	e153      	b.n	8001bd0 <__aeabi_ddiv+0x4b4>
 8001928:	9803      	ldr	r0, [sp, #12]
 800192a:	1ab6      	subs	r6, r6, r2
 800192c:	0002      	movs	r2, r0
 800192e:	042d      	lsls	r5, r5, #16
 8001930:	431d      	orrs	r5, r3
 8001932:	9f02      	ldr	r7, [sp, #8]
 8001934:	042b      	lsls	r3, r5, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	435a      	muls	r2, r3
 800193a:	437b      	muls	r3, r7
 800193c:	469c      	mov	ip, r3
 800193e:	0c29      	lsrs	r1, r5, #16
 8001940:	4348      	muls	r0, r1
 8001942:	0c13      	lsrs	r3, r2, #16
 8001944:	4484      	add	ip, r0
 8001946:	4463      	add	r3, ip
 8001948:	4379      	muls	r1, r7
 800194a:	4298      	cmp	r0, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_ddiv+0x23a>
 800194e:	2080      	movs	r0, #128	; 0x80
 8001950:	0240      	lsls	r0, r0, #9
 8001952:	4684      	mov	ip, r0
 8001954:	4461      	add	r1, ip
 8001956:	0c18      	lsrs	r0, r3, #16
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	1840      	adds	r0, r0, r1
 8001960:	189b      	adds	r3, r3, r2
 8001962:	4286      	cmp	r6, r0
 8001964:	d200      	bcs.n	8001968 <__aeabi_ddiv+0x24c>
 8001966:	e100      	b.n	8001b6a <__aeabi_ddiv+0x44e>
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x250>
 800196a:	e0fb      	b.n	8001b64 <__aeabi_ddiv+0x448>
 800196c:	2301      	movs	r3, #1
 800196e:	431d      	orrs	r5, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <__aeabi_ddiv+0x37c>)
 8001972:	445b      	add	r3, fp
 8001974:	2b00      	cmp	r3, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_ddiv+0x25e>
 8001978:	e0aa      	b.n	8001ad0 <__aeabi_ddiv+0x3b4>
 800197a:	076a      	lsls	r2, r5, #29
 800197c:	d000      	beq.n	8001980 <__aeabi_ddiv+0x264>
 800197e:	e13d      	b.n	8001bfc <__aeabi_ddiv+0x4e0>
 8001980:	08e9      	lsrs	r1, r5, #3
 8001982:	4642      	mov	r2, r8
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	d506      	bpl.n	8001996 <__aeabi_ddiv+0x27a>
 8001988:	4642      	mov	r2, r8
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <__aeabi_ddiv+0x380>)
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	4690      	mov	r8, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	445b      	add	r3, fp
 8001996:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <__aeabi_ddiv+0x384>)
 8001998:	4293      	cmp	r3, r2
 800199a:	dd00      	ble.n	800199e <__aeabi_ddiv+0x282>
 800199c:	e723      	b.n	80017e6 <__aeabi_ddiv+0xca>
 800199e:	4642      	mov	r2, r8
 80019a0:	055b      	lsls	r3, r3, #21
 80019a2:	0755      	lsls	r5, r2, #29
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	430d      	orrs	r5, r1
 80019a8:	0b12      	lsrs	r2, r2, #12
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	e70d      	b.n	80017ca <__aeabi_ddiv+0xae>
 80019ae:	4651      	mov	r1, sl
 80019b0:	4321      	orrs	r1, r4
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x29a>
 80019b4:	e07c      	b.n	8001ab0 <__aeabi_ddiv+0x394>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x2a0>
 80019ba:	e0fb      	b.n	8001bb4 <__aeabi_ddiv+0x498>
 80019bc:	0020      	movs	r0, r4
 80019be:	f001 fa63 	bl	8002e88 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	3a0b      	subs	r2, #11
 80019c6:	231d      	movs	r3, #29
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	4652      	mov	r2, sl
 80019cc:	0001      	movs	r1, r0
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	4653      	mov	r3, sl
 80019d2:	3908      	subs	r1, #8
 80019d4:	408b      	lsls	r3, r1
 80019d6:	408c      	lsls	r4, r1
 80019d8:	0019      	movs	r1, r3
 80019da:	4314      	orrs	r4, r2
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <__aeabi_ddiv+0x388>)
 80019de:	4458      	add	r0, fp
 80019e0:	469b      	mov	fp, r3
 80019e2:	4483      	add	fp, r0
 80019e4:	2000      	movs	r0, #0
 80019e6:	e6d9      	b.n	800179c <__aeabi_ddiv+0x80>
 80019e8:	0003      	movs	r3, r0
 80019ea:	4323      	orrs	r3, r4
 80019ec:	4698      	mov	r8, r3
 80019ee:	d044      	beq.n	8001a7a <__aeabi_ddiv+0x35e>
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x2da>
 80019f4:	e0cf      	b.n	8001b96 <__aeabi_ddiv+0x47a>
 80019f6:	0020      	movs	r0, r4
 80019f8:	f001 fa46 	bl	8002e88 <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0002      	movs	r2, r0
 8001a00:	390b      	subs	r1, #11
 8001a02:	231d      	movs	r3, #29
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	0010      	movs	r0, r2
 8001a0a:	40d9      	lsrs	r1, r3
 8001a0c:	3808      	subs	r0, #8
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	464d      	mov	r5, r9
 8001a14:	4323      	orrs	r3, r4
 8001a16:	4698      	mov	r8, r3
 8001a18:	4085      	lsls	r5, r0
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_ddiv+0x38c>)
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	469b      	mov	fp, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4699      	mov	r9, r3
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	e69e      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	d11d      	bne.n	8001a6c <__aeabi_ddiv+0x350>
 8001a30:	2208      	movs	r2, #8
 8001a32:	469b      	mov	fp, r3
 8001a34:	2302      	movs	r3, #2
 8001a36:	2500      	movs	r5, #0
 8001a38:	4691      	mov	r9, r2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e693      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a3e:	4651      	mov	r1, sl
 8001a40:	4321      	orrs	r1, r4
 8001a42:	d109      	bne.n	8001a58 <__aeabi_ddiv+0x33c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	464a      	mov	r2, r9
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a4c:	4691      	mov	r9, r2
 8001a4e:	469c      	mov	ip, r3
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	44e3      	add	fp, ip
 8001a56:	e6a1      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	464a      	mov	r2, r9
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a60:	4691      	mov	r9, r2
 8001a62:	469c      	mov	ip, r3
 8001a64:	4651      	mov	r1, sl
 8001a66:	2003      	movs	r0, #3
 8001a68:	44e3      	add	fp, ip
 8001a6a:	e697      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	469b      	mov	fp, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	46a0      	mov	r8, r4
 8001a74:	4691      	mov	r9, r2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	e675      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	469b      	mov	fp, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	2500      	movs	r5, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	e66d      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	000007ff 	.word	0x000007ff
 8001a90:	fffffc01 	.word	0xfffffc01
 8001a94:	0800c788 	.word	0x0800c788
 8001a98:	000003ff 	.word	0x000003ff
 8001a9c:	feffffff 	.word	0xfeffffff
 8001aa0:	000007fe 	.word	0x000007fe
 8001aa4:	000003f3 	.word	0x000003f3
 8001aa8:	fffffc0d 	.word	0xfffffc0d
 8001aac:	fffff801 	.word	0xfffff801
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2400      	movs	r4, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	e66e      	b.n	800179c <__aeabi_ddiv+0x80>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001ac8:	0312      	lsls	r2, r2, #12
 8001aca:	e67e      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001acc:	2501      	movs	r5, #1
 8001ace:	426d      	negs	r5, r5
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	2a38      	cmp	r2, #56	; 0x38
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_ddiv+0x3be>
 8001ad8:	e674      	b.n	80017c4 <__aeabi_ddiv+0xa8>
 8001ada:	2a1f      	cmp	r2, #31
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_ddiv+0x3c4>
 8001ade:	e0bd      	b.n	8001c5c <__aeabi_ddiv+0x540>
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	1acb      	subs	r3, r1, r3
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	000b      	movs	r3, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d004      	beq.n	8001afa <__aeabi_ddiv+0x3de>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <__aeabi_ddiv+0x5d0>)
 8001af4:	445a      	add	r2, fp
 8001af6:	4091      	lsls	r1, r2
 8001af8:	430d      	orrs	r5, r1
 8001afa:	0029      	movs	r1, r5
 8001afc:	1e4a      	subs	r2, r1, #1
 8001afe:	4191      	sbcs	r1, r2
 8001b00:	4319      	orrs	r1, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	400d      	ands	r5, r1
 8001b0a:	420b      	tst	r3, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x3f4>
 8001b0e:	e0d0      	b.n	8001cb2 <__aeabi_ddiv+0x596>
 8001b10:	220f      	movs	r2, #15
 8001b12:	2300      	movs	r3, #0
 8001b14:	400a      	ands	r2, r1
 8001b16:	2a04      	cmp	r2, #4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x400>
 8001b1a:	e0c7      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b1c:	1d0a      	adds	r2, r1, #4
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	4189      	sbcs	r1, r1
 8001b22:	4249      	negs	r1, r1
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	0011      	movs	r1, r2
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	d400      	bmi.n	8001b2e <__aeabi_ddiv+0x412>
 8001b2c:	e0be      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2200      	movs	r2, #0
 8001b32:	2500      	movs	r5, #0
 8001b34:	e649      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	4643      	mov	r3, r8
 8001b3a:	0312      	lsls	r2, r2, #12
 8001b3c:	4213      	tst	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <__aeabi_ddiv+0x436>
 8001b40:	4214      	tst	r4, r2
 8001b42:	d106      	bne.n	8001b52 <__aeabi_ddiv+0x436>
 8001b44:	4322      	orrs	r2, r4
 8001b46:	0312      	lsls	r2, r2, #12
 8001b48:	46ba      	mov	sl, r7
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b4e:	0b12      	lsrs	r2, r2, #12
 8001b50:	e63b      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	4643      	mov	r3, r8
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	46b2      	mov	sl, r6
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b60:	0b12      	lsrs	r2, r2, #12
 8001b62:	e632      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0x44e>
 8001b68:	e702      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001b6a:	19a6      	adds	r6, r4, r6
 8001b6c:	1e6a      	subs	r2, r5, #1
 8001b6e:	42a6      	cmp	r6, r4
 8001b70:	d200      	bcs.n	8001b74 <__aeabi_ddiv+0x458>
 8001b72:	e089      	b.n	8001c88 <__aeabi_ddiv+0x56c>
 8001b74:	4286      	cmp	r6, r0
 8001b76:	d200      	bcs.n	8001b7a <__aeabi_ddiv+0x45e>
 8001b78:	e09f      	b.n	8001cba <__aeabi_ddiv+0x59e>
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x462>
 8001b7c:	e0af      	b.n	8001cde <__aeabi_ddiv+0x5c2>
 8001b7e:	0015      	movs	r5, r2
 8001b80:	e6f4      	b.n	800196c <__aeabi_ddiv+0x250>
 8001b82:	42a9      	cmp	r1, r5
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x46c>
 8001b86:	e63c      	b.n	8001802 <__aeabi_ddiv+0xe6>
 8001b88:	4643      	mov	r3, r8
 8001b8a:	07de      	lsls	r6, r3, #31
 8001b8c:	0858      	lsrs	r0, r3, #1
 8001b8e:	086b      	lsrs	r3, r5, #1
 8001b90:	431e      	orrs	r6, r3
 8001b92:	07ed      	lsls	r5, r5, #31
 8001b94:	e63c      	b.n	8001810 <__aeabi_ddiv+0xf4>
 8001b96:	f001 f977 	bl	8002e88 <__clzsi2>
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3115      	adds	r1, #21
 8001ba0:	3220      	adds	r2, #32
 8001ba2:	291c      	cmp	r1, #28
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_ddiv+0x48c>
 8001ba6:	e72c      	b.n	8001a02 <__aeabi_ddiv+0x2e6>
 8001ba8:	464b      	mov	r3, r9
 8001baa:	3808      	subs	r0, #8
 8001bac:	4083      	lsls	r3, r0
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	e732      	b.n	8001a1a <__aeabi_ddiv+0x2fe>
 8001bb4:	f001 f968 	bl	8002e88 <__clzsi2>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	3215      	adds	r2, #21
 8001bbe:	3020      	adds	r0, #32
 8001bc0:	2a1c      	cmp	r2, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x4aa>
 8001bc4:	e6ff      	b.n	80019c6 <__aeabi_ddiv+0x2aa>
 8001bc6:	4654      	mov	r4, sl
 8001bc8:	3b08      	subs	r3, #8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	409c      	lsls	r4, r3
 8001bce:	e705      	b.n	80019dc <__aeabi_ddiv+0x2c0>
 8001bd0:	1936      	adds	r6, r6, r4
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	42b4      	cmp	r4, r6
 8001bd6:	d900      	bls.n	8001bda <__aeabi_ddiv+0x4be>
 8001bd8:	e6a6      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001bda:	42b2      	cmp	r2, r6
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x4c4>
 8001bde:	e6a3      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be0:	1e83      	subs	r3, r0, #2
 8001be2:	1936      	adds	r6, r6, r4
 8001be4:	e6a0      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be6:	1909      	adds	r1, r1, r4
 8001be8:	3d01      	subs	r5, #1
 8001bea:	428c      	cmp	r4, r1
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x4d4>
 8001bee:	e68d      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x4da>
 8001bf4:	e68a      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf6:	1e85      	subs	r5, r0, #2
 8001bf8:	1909      	adds	r1, r1, r4
 8001bfa:	e687      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	402a      	ands	r2, r5
 8001c00:	2a04      	cmp	r2, #4
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x4ea>
 8001c04:	e6bc      	b.n	8001980 <__aeabi_ddiv+0x264>
 8001c06:	1d29      	adds	r1, r5, #4
 8001c08:	42a9      	cmp	r1, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	426d      	negs	r5, r5
 8001c0e:	08c9      	lsrs	r1, r1, #3
 8001c10:	44a8      	add	r8, r5
 8001c12:	e6b6      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001c14:	42af      	cmp	r7, r5
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x4fe>
 8001c18:	e662      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c1a:	4281      	cmp	r1, r0
 8001c1c:	d804      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x506>
 8001c20:	e65e      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c22:	42ae      	cmp	r6, r5
 8001c24:	d800      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c26:	e65b      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	44e0      	add	r8, ip
 8001c32:	469c      	mov	ip, r3
 8001c34:	4465      	add	r5, ip
 8001c36:	429d      	cmp	r5, r3
 8001c38:	419b      	sbcs	r3, r3
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	191b      	adds	r3, r3, r4
 8001c3e:	18c0      	adds	r0, r0, r3
 8001c40:	e64f      	b.n	80018e2 <__aeabi_ddiv+0x1c6>
 8001c42:	42b2      	cmp	r2, r6
 8001c44:	d800      	bhi.n	8001c48 <__aeabi_ddiv+0x52c>
 8001c46:	e612      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	1936      	adds	r6, r6, r4
 8001c4c:	e60f      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d800      	bhi.n	8001c54 <__aeabi_ddiv+0x538>
 8001c52:	e5fa      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c54:	1e83      	subs	r3, r0, #2
 8001c56:	4698      	mov	r8, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	e5f6      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <__aeabi_ddiv+0x5d4>)
 8001c5e:	0028      	movs	r0, r5
 8001c60:	445b      	add	r3, fp
 8001c62:	4641      	mov	r1, r8
 8001c64:	409d      	lsls	r5, r3
 8001c66:	4099      	lsls	r1, r3
 8001c68:	40d0      	lsrs	r0, r2
 8001c6a:	1e6b      	subs	r3, r5, #1
 8001c6c:	419d      	sbcs	r5, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	4301      	orrs	r1, r0
 8001c72:	4329      	orrs	r1, r5
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	074a      	lsls	r2, r1, #29
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x560>
 8001c7a:	e755      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	400a      	ands	r2, r1
 8001c80:	2a04      	cmp	r2, #4
 8001c82:	d000      	beq.n	8001c86 <__aeabi_ddiv+0x56a>
 8001c84:	e74a      	b.n	8001b1c <__aeabi_ddiv+0x400>
 8001c86:	e74f      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	4286      	cmp	r6, r0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_ddiv+0x574>
 8001c8e:	e66d      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c90:	9a00      	ldr	r2, [sp, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x57c>
 8001c96:	e669      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c98:	e66a      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <__aeabi_ddiv+0x5d8>)
 8001c9c:	445b      	add	r3, fp
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_ddiv+0x588>
 8001ca2:	e713      	b.n	8001acc <__aeabi_ddiv+0x3b0>
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	44a8      	add	r8, r5
 8001caa:	e66a      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001cac:	075d      	lsls	r5, r3, #29
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	0b1a      	lsrs	r2, r3, #12
 8001cb2:	08c9      	lsrs	r1, r1, #3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	430d      	orrs	r5, r1
 8001cb8:	e587      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cba:	9900      	ldr	r1, [sp, #0]
 8001cbc:	3d02      	subs	r5, #2
 8001cbe:	004a      	lsls	r2, r1, #1
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	41bf      	sbcs	r7, r7
 8001cc4:	427f      	negs	r7, r7
 8001cc6:	193f      	adds	r7, r7, r4
 8001cc8:	19f6      	adds	r6, r6, r7
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	e7dd      	b.n	8001c8a <__aeabi_ddiv+0x56e>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	0312      	lsls	r2, r2, #12
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001cda:	0b12      	lsrs	r2, r2, #12
 8001cdc:	e575      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cde:	9900      	ldr	r1, [sp, #0]
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d3ea      	bcc.n	8001cba <__aeabi_ddiv+0x59e>
 8001ce4:	0015      	movs	r5, r2
 8001ce6:	e7d3      	b.n	8001c90 <__aeabi_ddiv+0x574>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e
 8001cf4:	000003ff 	.word	0x000003ff

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	464e      	mov	r6, r9
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	46de      	mov	lr, fp
 8001d00:	4657      	mov	r7, sl
 8001d02:	4690      	mov	r8, r2
 8001d04:	b5e0      	push	{r5, r6, r7, lr}
 8001d06:	0017      	movs	r7, r2
 8001d08:	031a      	lsls	r2, r3, #12
 8001d0a:	0b12      	lsrs	r2, r2, #12
 8001d0c:	0005      	movs	r5, r0
 8001d0e:	4684      	mov	ip, r0
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <__eqdf2+0x80>)
 8001d12:	030e      	lsls	r6, r1, #12
 8001d14:	004c      	lsls	r4, r1, #1
 8001d16:	4691      	mov	r9, r2
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	0b36      	lsrs	r6, r6, #12
 8001d20:	0d64      	lsrs	r4, r4, #21
 8001d22:	0fc9      	lsrs	r1, r1, #31
 8001d24:	0d52      	lsrs	r2, r2, #21
 8001d26:	4284      	cmp	r4, r0
 8001d28:	d019      	beq.n	8001d5e <__eqdf2+0x66>
 8001d2a:	4282      	cmp	r2, r0
 8001d2c:	d010      	beq.n	8001d50 <__eqdf2+0x58>
 8001d2e:	2001      	movs	r0, #1
 8001d30:	4294      	cmp	r4, r2
 8001d32:	d10e      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d34:	454e      	cmp	r6, r9
 8001d36:	d10c      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	45c4      	cmp	ip, r8
 8001d3c:	d109      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d3e:	4559      	cmp	r1, fp
 8001d40:	d017      	beq.n	8001d72 <__eqdf2+0x7a>
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	d105      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d46:	0030      	movs	r0, r6
 8001d48:	4328      	orrs	r0, r5
 8001d4a:	1e43      	subs	r3, r0, #1
 8001d4c:	4198      	sbcs	r0, r3
 8001d4e:	e000      	b.n	8001d52 <__eqdf2+0x5a>
 8001d50:	2001      	movs	r0, #1
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	0033      	movs	r3, r6
 8001d60:	2001      	movs	r0, #1
 8001d62:	432b      	orrs	r3, r5
 8001d64:	d1f5      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d1f3      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	433b      	orrs	r3, r7
 8001d6e:	d1f0      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d70:	e7e2      	b.n	8001d38 <__eqdf2+0x40>
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7ed      	b.n	8001d52 <__eqdf2+0x5a>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__gedf2>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4647      	mov	r7, r8
 8001d80:	46ce      	mov	lr, r9
 8001d82:	0004      	movs	r4, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	0016      	movs	r6, r2
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	4d2d      	ldr	r5, [pc, #180]	; (8001e44 <__gedf2+0xc8>)
 8001d8e:	004a      	lsls	r2, r1, #1
 8001d90:	4699      	mov	r9, r3
 8001d92:	b580      	push	{r7, lr}
 8001d94:	0043      	lsls	r3, r0, #1
 8001d96:	030f      	lsls	r7, r1, #12
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	0fc0      	lsrs	r0, r0, #31
 8001da6:	42aa      	cmp	r2, r5
 8001da8:	d021      	beq.n	8001dee <__gedf2+0x72>
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	d013      	beq.n	8001dd6 <__gedf2+0x5a>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d122      	bne.n	8001df8 <__gedf2+0x7c>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <__gedf2+0x42>
 8001db8:	464d      	mov	r5, r9
 8001dba:	432e      	orrs	r6, r5
 8001dbc:	d022      	beq.n	8001e04 <__gedf2+0x88>
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d010      	beq.n	8001de4 <__gedf2+0x68>
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	d022      	beq.n	8001e0c <__gedf2+0x90>
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	3901      	subs	r1, #1
 8001dca:	4008      	ands	r0, r1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	bcc0      	pop	{r6, r7}
 8001dd0:	46b9      	mov	r9, r7
 8001dd2:	46b0      	mov	r8, r6
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	432e      	orrs	r6, r5
 8001dda:	d129      	bne.n	8001e30 <__gedf2+0xb4>
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d1f0      	bne.n	8001dc2 <__gedf2+0x46>
 8001de0:	433c      	orrs	r4, r7
 8001de2:	d1ee      	bne.n	8001dc2 <__gedf2+0x46>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1f2      	bne.n	8001dce <__gedf2+0x52>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7ef      	b.n	8001dce <__gedf2+0x52>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d11d      	bne.n	8001e30 <__gedf2+0xb4>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d0ee      	beq.n	8001dd6 <__gedf2+0x5a>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e2      	bne.n	8001dc2 <__gedf2+0x46>
 8001dfc:	464c      	mov	r4, r9
 8001dfe:	4326      	orrs	r6, r4
 8001e00:	d1df      	bne.n	8001dc2 <__gedf2+0x46>
 8001e02:	e7e0      	b.n	8001dc6 <__gedf2+0x4a>
 8001e04:	2000      	movs	r0, #0
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	d0e1      	beq.n	8001dce <__gedf2+0x52>
 8001e0a:	e7dc      	b.n	8001dc6 <__gedf2+0x4a>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc0a      	bgt.n	8001e26 <__gedf2+0xaa>
 8001e10:	dbe8      	blt.n	8001de4 <__gedf2+0x68>
 8001e12:	454f      	cmp	r7, r9
 8001e14:	d8d7      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e16:	d00e      	beq.n	8001e36 <__gedf2+0xba>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	454f      	cmp	r7, r9
 8001e1c:	d2d7      	bcs.n	8001dce <__gedf2+0x52>
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d0e2      	beq.n	8001de8 <__gedf2+0x6c>
 8001e22:	0008      	movs	r0, r1
 8001e24:	e7d3      	b.n	8001dce <__gedf2+0x52>
 8001e26:	4243      	negs	r3, r0
 8001e28:	4158      	adcs	r0, r3
 8001e2a:	0040      	lsls	r0, r0, #1
 8001e2c:	3801      	subs	r0, #1
 8001e2e:	e7ce      	b.n	8001dce <__gedf2+0x52>
 8001e30:	2002      	movs	r0, #2
 8001e32:	4240      	negs	r0, r0
 8001e34:	e7cb      	b.n	8001dce <__gedf2+0x52>
 8001e36:	45c4      	cmp	ip, r8
 8001e38:	d8c5      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c4      	cmp	ip, r8
 8001e3e:	d2c6      	bcs.n	8001dce <__gedf2+0x52>
 8001e40:	e7ed      	b.n	8001e1e <__gedf2+0xa2>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__ledf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4647      	mov	r7, r8
 8001e4c:	46ce      	mov	lr, r9
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0016      	movs	r6, r2
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	4d2c      	ldr	r5, [pc, #176]	; (8001f0c <__ledf2+0xc4>)
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	0043      	lsls	r3, r0, #1
 8001e62:	030f      	lsls	r7, r1, #12
 8001e64:	46a4      	mov	ip, r4
 8001e66:	46b0      	mov	r8, r6
 8001e68:	0b3f      	lsrs	r7, r7, #12
 8001e6a:	0d52      	lsrs	r2, r2, #21
 8001e6c:	0fc9      	lsrs	r1, r1, #31
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fc0      	lsrs	r0, r0, #31
 8001e72:	42aa      	cmp	r2, r5
 8001e74:	d00d      	beq.n	8001e92 <__ledf2+0x4a>
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d010      	beq.n	8001e9c <__ledf2+0x54>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d127      	bne.n	8001ece <__ledf2+0x86>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <__ledf2+0x60>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10e      	bne.n	8001ea8 <__ledf2+0x60>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d015      	beq.n	8001ebc <__ledf2+0x74>
 8001e90:	e00e      	b.n	8001eb0 <__ledf2+0x68>
 8001e92:	003d      	movs	r5, r7
 8001e94:	4325      	orrs	r5, r4
 8001e96:	d110      	bne.n	8001eba <__ledf2+0x72>
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d118      	bne.n	8001ece <__ledf2+0x86>
 8001e9c:	464d      	mov	r5, r9
 8001e9e:	432e      	orrs	r6, r5
 8001ea0:	d10b      	bne.n	8001eba <__ledf2+0x72>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <__ledf2+0x64>
 8001ea6:	433c      	orrs	r4, r7
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	d00b      	beq.n	8001ec4 <__ledf2+0x7c>
 8001eac:	4281      	cmp	r1, r0
 8001eae:	d014      	beq.n	8001eda <__ledf2+0x92>
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	3901      	subs	r1, #1
 8001eb4:	4008      	ands	r0, r1
 8001eb6:	3801      	subs	r0, #1
 8001eb8:	e000      	b.n	8001ebc <__ledf2+0x74>
 8001eba:	2002      	movs	r0, #2
 8001ebc:	bcc0      	pop	{r6, r7}
 8001ebe:	46b9      	mov	r9, r7
 8001ec0:	46b0      	mov	r8, r6
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1f9      	bne.n	8001ebc <__ledf2+0x74>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	e7f6      	b.n	8001ebc <__ledf2+0x74>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ec      	bne.n	8001eac <__ledf2+0x64>
 8001ed2:	464c      	mov	r4, r9
 8001ed4:	4326      	orrs	r6, r4
 8001ed6:	d1e9      	bne.n	8001eac <__ledf2+0x64>
 8001ed8:	e7ea      	b.n	8001eb0 <__ledf2+0x68>
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dd04      	ble.n	8001ee8 <__ledf2+0xa0>
 8001ede:	4243      	negs	r3, r0
 8001ee0:	4158      	adcs	r0, r3
 8001ee2:	0040      	lsls	r0, r0, #1
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	e7e9      	b.n	8001ebc <__ledf2+0x74>
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbeb      	blt.n	8001ec4 <__ledf2+0x7c>
 8001eec:	454f      	cmp	r7, r9
 8001eee:	d8df      	bhi.n	8001eb0 <__ledf2+0x68>
 8001ef0:	d006      	beq.n	8001f00 <__ledf2+0xb8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	454f      	cmp	r7, r9
 8001ef6:	d2e1      	bcs.n	8001ebc <__ledf2+0x74>
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d0e5      	beq.n	8001ec8 <__ledf2+0x80>
 8001efc:	0008      	movs	r0, r1
 8001efe:	e7dd      	b.n	8001ebc <__ledf2+0x74>
 8001f00:	45c4      	cmp	ip, r8
 8001f02:	d8d5      	bhi.n	8001eb0 <__ledf2+0x68>
 8001f04:	2000      	movs	r0, #0
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d2d8      	bcs.n	8001ebc <__ledf2+0x74>
 8001f0a:	e7f5      	b.n	8001ef8 <__ledf2+0xb0>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__aeabi_dmul>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	001f      	movs	r7, r3
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	0b1b      	lsrs	r3, r3, #12
 8001f22:	469b      	mov	fp, r3
 8001f24:	004d      	lsls	r5, r1, #1
 8001f26:	0fcb      	lsrs	r3, r1, #31
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	b087      	sub	sp, #28
 8001f30:	0d6d      	lsrs	r5, r5, #21
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dmul+0x26>
 8001f34:	e1cd      	b.n	80022d2 <__aeabi_dmul+0x3c2>
 8001f36:	4bce      	ldr	r3, [pc, #824]	; (8002270 <__aeabi_dmul+0x360>)
 8001f38:	429d      	cmp	r5, r3
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2e>
 8001f3c:	e1e9      	b.n	8002312 <__aeabi_dmul+0x402>
 8001f3e:	465a      	mov	r2, fp
 8001f40:	0f43      	lsrs	r3, r0, #29
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0412      	lsls	r2, r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	00c3      	lsls	r3, r0, #3
 8001f4e:	469a      	mov	sl, r3
 8001f50:	4bc8      	ldr	r3, [pc, #800]	; (8002274 <__aeabi_dmul+0x364>)
 8001f52:	4693      	mov	fp, r2
 8001f54:	469c      	mov	ip, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4465      	add	r5, ip
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	033c      	lsls	r4, r7, #12
 8001f60:	007b      	lsls	r3, r7, #1
 8001f62:	4648      	mov	r0, r9
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	0fff      	lsrs	r7, r7, #31
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x60>
 8001f6e:	e189      	b.n	8002284 <__aeabi_dmul+0x374>
 8001f70:	4abf      	ldr	r2, [pc, #764]	; (8002270 <__aeabi_dmul+0x360>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <__aeabi_dmul+0x9a>
 8001f76:	0f42      	lsrs	r2, r0, #29
 8001f78:	00e4      	lsls	r4, r4, #3
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0424      	lsls	r4, r4, #16
 8001f80:	4314      	orrs	r4, r2
 8001f82:	4abc      	ldr	r2, [pc, #752]	; (8002274 <__aeabi_dmul+0x364>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4694      	mov	ip, r2
 8001f88:	4642      	mov	r2, r8
 8001f8a:	4463      	add	r3, ip
 8001f8c:	195b      	adds	r3, r3, r5
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	407a      	eors	r2, r7
 8001f94:	3301      	adds	r3, #1
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2e0a      	cmp	r6, #10
 8001f9e:	dd1c      	ble.n	8001fda <__aeabi_dmul+0xca>
 8001fa0:	003a      	movs	r2, r7
 8001fa2:	2e0b      	cmp	r6, #11
 8001fa4:	d05e      	beq.n	8002064 <__aeabi_dmul+0x154>
 8001fa6:	4647      	mov	r7, r8
 8001fa8:	e056      	b.n	8002058 <__aeabi_dmul+0x148>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4bb0      	ldr	r3, [pc, #704]	; (8002270 <__aeabi_dmul+0x360>)
 8001fae:	4321      	orrs	r1, r4
 8001fb0:	18eb      	adds	r3, r5, r3
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d12a      	bne.n	800200e <__aeabi_dmul+0xfe>
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	2202      	movs	r2, #2
 8001fbc:	0100      	lsls	r0, r0, #4
 8001fbe:	002b      	movs	r3, r5
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	4316      	orrs	r6, r2
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	4463      	add	r3, ip
 8001fc8:	407a      	eors	r2, r7
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2e0a      	cmp	r6, #10
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dmul+0xc4>
 8001fd2:	e231      	b.n	8002438 <__aeabi_dmul+0x528>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	2e02      	cmp	r6, #2
 8001fdc:	dc26      	bgt.n	800202c <__aeabi_dmul+0x11c>
 8001fde:	3e01      	subs	r6, #1
 8001fe0:	2e01      	cmp	r6, #1
 8001fe2:	d852      	bhi.n	800208a <__aeabi_dmul+0x17a>
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d04c      	beq.n	8002082 <__aeabi_dmul+0x172>
 8001fe8:	2901      	cmp	r1, #1
 8001fea:	d000      	beq.n	8001fee <__aeabi_dmul+0xde>
 8001fec:	e118      	b.n	8002220 <__aeabi_dmul+0x310>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	07d2      	lsls	r2, r2, #31
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	0019      	movs	r1, r3
 8002000:	b007      	add	sp, #28
 8002002:	bcf0      	pop	{r4, r5, r6, r7}
 8002004:	46bb      	mov	fp, r7
 8002006:	46b2      	mov	sl, r6
 8002008:	46a9      	mov	r9, r5
 800200a:	46a0      	mov	r8, r4
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	2203      	movs	r2, #3
 8002012:	0109      	lsls	r1, r1, #4
 8002014:	002b      	movs	r3, r5
 8002016:	468c      	mov	ip, r1
 8002018:	4316      	orrs	r6, r2
 800201a:	4642      	mov	r2, r8
 800201c:	4463      	add	r3, ip
 800201e:	407a      	eors	r2, r7
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2e0a      	cmp	r6, #10
 8002026:	dd00      	ble.n	800202a <__aeabi_dmul+0x11a>
 8002028:	e228      	b.n	800247c <__aeabi_dmul+0x56c>
 800202a:	2103      	movs	r1, #3
 800202c:	2501      	movs	r5, #1
 800202e:	40b5      	lsls	r5, r6
 8002030:	46ac      	mov	ip, r5
 8002032:	26a6      	movs	r6, #166	; 0xa6
 8002034:	4663      	mov	r3, ip
 8002036:	00f6      	lsls	r6, r6, #3
 8002038:	4035      	ands	r5, r6
 800203a:	4233      	tst	r3, r6
 800203c:	d10b      	bne.n	8002056 <__aeabi_dmul+0x146>
 800203e:	2690      	movs	r6, #144	; 0x90
 8002040:	00b6      	lsls	r6, r6, #2
 8002042:	4233      	tst	r3, r6
 8002044:	d118      	bne.n	8002078 <__aeabi_dmul+0x168>
 8002046:	3eb9      	subs	r6, #185	; 0xb9
 8002048:	3eff      	subs	r6, #255	; 0xff
 800204a:	421e      	tst	r6, r3
 800204c:	d01d      	beq.n	800208a <__aeabi_dmul+0x17a>
 800204e:	46a3      	mov	fp, r4
 8002050:	4682      	mov	sl, r0
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	e000      	b.n	8002058 <__aeabi_dmul+0x148>
 8002056:	0017      	movs	r7, r2
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	003a      	movs	r2, r7
 800205c:	2902      	cmp	r1, #2
 800205e:	d010      	beq.n	8002082 <__aeabi_dmul+0x172>
 8002060:	465c      	mov	r4, fp
 8002062:	4650      	mov	r0, sl
 8002064:	2903      	cmp	r1, #3
 8002066:	d1bf      	bne.n	8001fe8 <__aeabi_dmul+0xd8>
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	031b      	lsls	r3, r3, #12
 800206c:	431c      	orrs	r4, r3
 800206e:	0324      	lsls	r4, r4, #12
 8002070:	0005      	movs	r5, r0
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <__aeabi_dmul+0x360>)
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	e7bd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002078:	2480      	movs	r4, #128	; 0x80
 800207a:	2200      	movs	r2, #0
 800207c:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <__aeabi_dmul+0x360>)
 800207e:	0324      	lsls	r4, r4, #12
 8002080:	e7b8      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002082:	2400      	movs	r4, #0
 8002084:	2500      	movs	r5, #0
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <__aeabi_dmul+0x360>)
 8002088:	e7b4      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800208a:	4653      	mov	r3, sl
 800208c:	041e      	lsls	r6, r3, #16
 800208e:	0c36      	lsrs	r6, r6, #16
 8002090:	0c1f      	lsrs	r7, r3, #16
 8002092:	0033      	movs	r3, r6
 8002094:	0c01      	lsrs	r1, r0, #16
 8002096:	0400      	lsls	r0, r0, #16
 8002098:	0c00      	lsrs	r0, r0, #16
 800209a:	4343      	muls	r3, r0
 800209c:	4698      	mov	r8, r3
 800209e:	0003      	movs	r3, r0
 80020a0:	437b      	muls	r3, r7
 80020a2:	4699      	mov	r9, r3
 80020a4:	0033      	movs	r3, r6
 80020a6:	434b      	muls	r3, r1
 80020a8:	469c      	mov	ip, r3
 80020aa:	4643      	mov	r3, r8
 80020ac:	000d      	movs	r5, r1
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	469a      	mov	sl, r3
 80020b2:	437d      	muls	r5, r7
 80020b4:	44cc      	add	ip, r9
 80020b6:	44d4      	add	ip, sl
 80020b8:	9500      	str	r5, [sp, #0]
 80020ba:	45e1      	cmp	r9, ip
 80020bc:	d904      	bls.n	80020c8 <__aeabi_dmul+0x1b8>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4699      	mov	r9, r3
 80020c4:	444d      	add	r5, r9
 80020c6:	9500      	str	r5, [sp, #0]
 80020c8:	4663      	mov	r3, ip
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	001d      	movs	r5, r3
 80020ce:	4663      	mov	r3, ip
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	469c      	mov	ip, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	4698      	mov	r8, r3
 80020dc:	4663      	mov	r3, ip
 80020de:	4443      	add	r3, r8
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	0c23      	lsrs	r3, r4, #16
 80020e4:	4698      	mov	r8, r3
 80020e6:	0033      	movs	r3, r6
 80020e8:	0424      	lsls	r4, r4, #16
 80020ea:	0c24      	lsrs	r4, r4, #16
 80020ec:	4363      	muls	r3, r4
 80020ee:	469c      	mov	ip, r3
 80020f0:	0023      	movs	r3, r4
 80020f2:	437b      	muls	r3, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	4643      	mov	r3, r8
 80020f8:	435e      	muls	r6, r3
 80020fa:	435f      	muls	r7, r3
 80020fc:	444e      	add	r6, r9
 80020fe:	4663      	mov	r3, ip
 8002100:	46b2      	mov	sl, r6
 8002102:	0c1e      	lsrs	r6, r3, #16
 8002104:	4456      	add	r6, sl
 8002106:	45b1      	cmp	r9, r6
 8002108:	d903      	bls.n	8002112 <__aeabi_dmul+0x202>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4699      	mov	r9, r3
 8002110:	444f      	add	r7, r9
 8002112:	0c33      	lsrs	r3, r6, #16
 8002114:	4699      	mov	r9, r3
 8002116:	003b      	movs	r3, r7
 8002118:	444b      	add	r3, r9
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	4663      	mov	r3, ip
 800211e:	46ac      	mov	ip, r5
 8002120:	041f      	lsls	r7, r3, #16
 8002122:	0c3f      	lsrs	r7, r7, #16
 8002124:	0436      	lsls	r6, r6, #16
 8002126:	19f6      	adds	r6, r6, r7
 8002128:	44b4      	add	ip, r6
 800212a:	4663      	mov	r3, ip
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	465b      	mov	r3, fp
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	469c      	mov	ip, r3
 8002134:	465b      	mov	r3, fp
 8002136:	041f      	lsls	r7, r3, #16
 8002138:	0c3f      	lsrs	r7, r7, #16
 800213a:	003b      	movs	r3, r7
 800213c:	4343      	muls	r3, r0
 800213e:	4699      	mov	r9, r3
 8002140:	4663      	mov	r3, ip
 8002142:	4343      	muls	r3, r0
 8002144:	469a      	mov	sl, r3
 8002146:	464b      	mov	r3, r9
 8002148:	4660      	mov	r0, ip
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	469b      	mov	fp, r3
 800214e:	4348      	muls	r0, r1
 8002150:	4379      	muls	r1, r7
 8002152:	4451      	add	r1, sl
 8002154:	4459      	add	r1, fp
 8002156:	458a      	cmp	sl, r1
 8002158:	d903      	bls.n	8002162 <__aeabi_dmul+0x252>
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	469a      	mov	sl, r3
 8002160:	4450      	add	r0, sl
 8002162:	0c0b      	lsrs	r3, r1, #16
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	4699      	mov	r9, r3
 800216e:	003b      	movs	r3, r7
 8002170:	4363      	muls	r3, r4
 8002172:	0409      	lsls	r1, r1, #16
 8002174:	4645      	mov	r5, r8
 8002176:	4449      	add	r1, r9
 8002178:	4699      	mov	r9, r3
 800217a:	4663      	mov	r3, ip
 800217c:	435c      	muls	r4, r3
 800217e:	436b      	muls	r3, r5
 8002180:	469c      	mov	ip, r3
 8002182:	464b      	mov	r3, r9
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	4698      	mov	r8, r3
 8002188:	436f      	muls	r7, r5
 800218a:	193f      	adds	r7, r7, r4
 800218c:	4447      	add	r7, r8
 800218e:	4450      	add	r0, sl
 8002190:	42bc      	cmp	r4, r7
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x28c>
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	4698      	mov	r8, r3
 800219a:	44c4      	add	ip, r8
 800219c:	9b04      	ldr	r3, [sp, #16]
 800219e:	9d00      	ldr	r5, [sp, #0]
 80021a0:	4698      	mov	r8, r3
 80021a2:	4445      	add	r5, r8
 80021a4:	42b5      	cmp	r5, r6
 80021a6:	41b6      	sbcs	r6, r6
 80021a8:	4273      	negs	r3, r6
 80021aa:	4698      	mov	r8, r3
 80021ac:	464b      	mov	r3, r9
 80021ae:	041e      	lsls	r6, r3, #16
 80021b0:	9b05      	ldr	r3, [sp, #20]
 80021b2:	043c      	lsls	r4, r7, #16
 80021b4:	4699      	mov	r9, r3
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	19a4      	adds	r4, r4, r6
 80021ba:	444c      	add	r4, r9
 80021bc:	46a1      	mov	r9, r4
 80021be:	4683      	mov	fp, r0
 80021c0:	186e      	adds	r6, r5, r1
 80021c2:	44c1      	add	r9, r8
 80021c4:	428e      	cmp	r6, r1
 80021c6:	4189      	sbcs	r1, r1
 80021c8:	44cb      	add	fp, r9
 80021ca:	465d      	mov	r5, fp
 80021cc:	4249      	negs	r1, r1
 80021ce:	186d      	adds	r5, r5, r1
 80021d0:	429c      	cmp	r4, r3
 80021d2:	41a4      	sbcs	r4, r4
 80021d4:	45c1      	cmp	r9, r8
 80021d6:	419b      	sbcs	r3, r3
 80021d8:	4583      	cmp	fp, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	428d      	cmp	r5, r1
 80021de:	4189      	sbcs	r1, r1
 80021e0:	425b      	negs	r3, r3
 80021e2:	4264      	negs	r4, r4
 80021e4:	431c      	orrs	r4, r3
 80021e6:	4240      	negs	r0, r0
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	4249      	negs	r1, r1
 80021ec:	4301      	orrs	r1, r0
 80021ee:	0270      	lsls	r0, r6, #9
 80021f0:	0c3f      	lsrs	r7, r7, #16
 80021f2:	4318      	orrs	r0, r3
 80021f4:	19e4      	adds	r4, r4, r7
 80021f6:	1e47      	subs	r7, r0, #1
 80021f8:	41b8      	sbcs	r0, r7
 80021fa:	1864      	adds	r4, r4, r1
 80021fc:	4464      	add	r4, ip
 80021fe:	0df6      	lsrs	r6, r6, #23
 8002200:	0261      	lsls	r1, r4, #9
 8002202:	4330      	orrs	r0, r6
 8002204:	0dec      	lsrs	r4, r5, #23
 8002206:	026e      	lsls	r6, r5, #9
 8002208:	430c      	orrs	r4, r1
 800220a:	4330      	orrs	r0, r6
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	d400      	bmi.n	8002212 <__aeabi_dmul+0x302>
 8002210:	e0f1      	b.n	80023f6 <__aeabi_dmul+0x4e6>
 8002212:	2101      	movs	r1, #1
 8002214:	0843      	lsrs	r3, r0, #1
 8002216:	4001      	ands	r1, r0
 8002218:	430b      	orrs	r3, r1
 800221a:	07e0      	lsls	r0, r4, #31
 800221c:	4318      	orrs	r0, r3
 800221e:	0864      	lsrs	r4, r4, #1
 8002220:	4915      	ldr	r1, [pc, #84]	; (8002278 <__aeabi_dmul+0x368>)
 8002222:	9b02      	ldr	r3, [sp, #8]
 8002224:	468c      	mov	ip, r1
 8002226:	4463      	add	r3, ip
 8002228:	2b00      	cmp	r3, #0
 800222a:	dc00      	bgt.n	800222e <__aeabi_dmul+0x31e>
 800222c:	e097      	b.n	800235e <__aeabi_dmul+0x44e>
 800222e:	0741      	lsls	r1, r0, #29
 8002230:	d009      	beq.n	8002246 <__aeabi_dmul+0x336>
 8002232:	210f      	movs	r1, #15
 8002234:	4001      	ands	r1, r0
 8002236:	2904      	cmp	r1, #4
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x336>
 800223a:	1d01      	adds	r1, r0, #4
 800223c:	4281      	cmp	r1, r0
 800223e:	4180      	sbcs	r0, r0
 8002240:	4240      	negs	r0, r0
 8002242:	1824      	adds	r4, r4, r0
 8002244:	0008      	movs	r0, r1
 8002246:	01e1      	lsls	r1, r4, #7
 8002248:	d506      	bpl.n	8002258 <__aeabi_dmul+0x348>
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	468c      	mov	ip, r1
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <__aeabi_dmul+0x36c>)
 8002252:	401c      	ands	r4, r3
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4463      	add	r3, ip
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <__aeabi_dmul+0x370>)
 800225a:	428b      	cmp	r3, r1
 800225c:	dd00      	ble.n	8002260 <__aeabi_dmul+0x350>
 800225e:	e710      	b.n	8002082 <__aeabi_dmul+0x172>
 8002260:	0761      	lsls	r1, r4, #29
 8002262:	08c5      	lsrs	r5, r0, #3
 8002264:	0264      	lsls	r4, r4, #9
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	430d      	orrs	r5, r1
 800226a:	0b24      	lsrs	r4, r4, #12
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	e6c1      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002270:	000007ff 	.word	0x000007ff
 8002274:	fffffc01 	.word	0xfffffc01
 8002278:	000003ff 	.word	0x000003ff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	000007fe 	.word	0x000007fe
 8002284:	464b      	mov	r3, r9
 8002286:	4323      	orrs	r3, r4
 8002288:	d059      	beq.n	800233e <__aeabi_dmul+0x42e>
 800228a:	2c00      	cmp	r4, #0
 800228c:	d100      	bne.n	8002290 <__aeabi_dmul+0x380>
 800228e:	e0a3      	b.n	80023d8 <__aeabi_dmul+0x4c8>
 8002290:	0020      	movs	r0, r4
 8002292:	f000 fdf9 	bl	8002e88 <__clzsi2>
 8002296:	0001      	movs	r1, r0
 8002298:	0003      	movs	r3, r0
 800229a:	390b      	subs	r1, #11
 800229c:	221d      	movs	r2, #29
 800229e:	1a52      	subs	r2, r2, r1
 80022a0:	4649      	mov	r1, r9
 80022a2:	0018      	movs	r0, r3
 80022a4:	40d1      	lsrs	r1, r2
 80022a6:	464a      	mov	r2, r9
 80022a8:	3808      	subs	r0, #8
 80022aa:	4082      	lsls	r2, r0
 80022ac:	4084      	lsls	r4, r0
 80022ae:	0010      	movs	r0, r2
 80022b0:	430c      	orrs	r4, r1
 80022b2:	4a74      	ldr	r2, [pc, #464]	; (8002484 <__aeabi_dmul+0x574>)
 80022b4:	1aeb      	subs	r3, r5, r3
 80022b6:	4694      	mov	ip, r2
 80022b8:	4642      	mov	r2, r8
 80022ba:	4463      	add	r3, ip
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	407a      	eors	r2, r7
 80022c2:	3301      	adds	r3, #1
 80022c4:	2100      	movs	r1, #0
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2e0a      	cmp	r6, #10
 80022cc:	dd00      	ble.n	80022d0 <__aeabi_dmul+0x3c0>
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dmul+0x90>
 80022d0:	e683      	b.n	8001fda <__aeabi_dmul+0xca>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4303      	orrs	r3, r0
 80022d6:	469a      	mov	sl, r3
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dmul+0x420>
 80022da:	465b      	mov	r3, fp
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06d      	beq.n	80023bc <__aeabi_dmul+0x4ac>
 80022e0:	4658      	mov	r0, fp
 80022e2:	f000 fdd1 	bl	8002e88 <__clzsi2>
 80022e6:	0001      	movs	r1, r0
 80022e8:	0003      	movs	r3, r0
 80022ea:	390b      	subs	r1, #11
 80022ec:	221d      	movs	r2, #29
 80022ee:	1a52      	subs	r2, r2, r1
 80022f0:	0021      	movs	r1, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	465d      	mov	r5, fp
 80022f6:	40d1      	lsrs	r1, r2
 80022f8:	3808      	subs	r0, #8
 80022fa:	4085      	lsls	r5, r0
 80022fc:	000a      	movs	r2, r1
 80022fe:	4084      	lsls	r4, r0
 8002300:	432a      	orrs	r2, r5
 8002302:	4693      	mov	fp, r2
 8002304:	46a2      	mov	sl, r4
 8002306:	4d5f      	ldr	r5, [pc, #380]	; (8002484 <__aeabi_dmul+0x574>)
 8002308:	2600      	movs	r6, #0
 800230a:	1aed      	subs	r5, r5, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	e625      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002312:	465b      	mov	r3, fp
 8002314:	4303      	orrs	r3, r0
 8002316:	469a      	mov	sl, r3
 8002318:	d105      	bne.n	8002326 <__aeabi_dmul+0x416>
 800231a:	2300      	movs	r3, #0
 800231c:	469b      	mov	fp, r3
 800231e:	3302      	adds	r3, #2
 8002320:	2608      	movs	r6, #8
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	e61b      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002326:	2303      	movs	r3, #3
 8002328:	4682      	mov	sl, r0
 800232a:	260c      	movs	r6, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	e616      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002330:	2300      	movs	r3, #0
 8002332:	469b      	mov	fp, r3
 8002334:	3301      	adds	r3, #1
 8002336:	2604      	movs	r6, #4
 8002338:	2500      	movs	r5, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	e60f      	b.n	8001f5e <__aeabi_dmul+0x4e>
 800233e:	4642      	mov	r2, r8
 8002340:	3301      	adds	r3, #1
 8002342:	9501      	str	r5, [sp, #4]
 8002344:	431e      	orrs	r6, r3
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	407a      	eors	r2, r7
 800234a:	3301      	adds	r3, #1
 800234c:	2400      	movs	r4, #0
 800234e:	2000      	movs	r0, #0
 8002350:	2101      	movs	r1, #1
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2e0a      	cmp	r6, #10
 8002358:	dd00      	ble.n	800235c <__aeabi_dmul+0x44c>
 800235a:	e621      	b.n	8001fa0 <__aeabi_dmul+0x90>
 800235c:	e63d      	b.n	8001fda <__aeabi_dmul+0xca>
 800235e:	2101      	movs	r1, #1
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	2938      	cmp	r1, #56	; 0x38
 8002364:	dd00      	ble.n	8002368 <__aeabi_dmul+0x458>
 8002366:	e642      	b.n	8001fee <__aeabi_dmul+0xde>
 8002368:	291f      	cmp	r1, #31
 800236a:	dd47      	ble.n	80023fc <__aeabi_dmul+0x4ec>
 800236c:	261f      	movs	r6, #31
 800236e:	0025      	movs	r5, r4
 8002370:	4276      	negs	r6, r6
 8002372:	1af3      	subs	r3, r6, r3
 8002374:	40dd      	lsrs	r5, r3
 8002376:	002b      	movs	r3, r5
 8002378:	2920      	cmp	r1, #32
 800237a:	d005      	beq.n	8002388 <__aeabi_dmul+0x478>
 800237c:	4942      	ldr	r1, [pc, #264]	; (8002488 <__aeabi_dmul+0x578>)
 800237e:	9d02      	ldr	r5, [sp, #8]
 8002380:	468c      	mov	ip, r1
 8002382:	4465      	add	r5, ip
 8002384:	40ac      	lsls	r4, r5
 8002386:	4320      	orrs	r0, r4
 8002388:	1e41      	subs	r1, r0, #1
 800238a:	4188      	sbcs	r0, r1
 800238c:	4318      	orrs	r0, r3
 800238e:	2307      	movs	r3, #7
 8002390:	001d      	movs	r5, r3
 8002392:	2400      	movs	r4, #0
 8002394:	4005      	ands	r5, r0
 8002396:	4203      	tst	r3, r0
 8002398:	d04a      	beq.n	8002430 <__aeabi_dmul+0x520>
 800239a:	230f      	movs	r3, #15
 800239c:	2400      	movs	r4, #0
 800239e:	4003      	ands	r3, r0
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d042      	beq.n	800242a <__aeabi_dmul+0x51a>
 80023a4:	1d03      	adds	r3, r0, #4
 80023a6:	4283      	cmp	r3, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	4240      	negs	r0, r0
 80023ac:	1824      	adds	r4, r4, r0
 80023ae:	0018      	movs	r0, r3
 80023b0:	0223      	lsls	r3, r4, #8
 80023b2:	d53a      	bpl.n	800242a <__aeabi_dmul+0x51a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	2400      	movs	r4, #0
 80023b8:	2500      	movs	r5, #0
 80023ba:	e61b      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 80023bc:	f000 fd64 	bl	8002e88 <__clzsi2>
 80023c0:	0001      	movs	r1, r0
 80023c2:	0003      	movs	r3, r0
 80023c4:	3115      	adds	r1, #21
 80023c6:	3320      	adds	r3, #32
 80023c8:	291c      	cmp	r1, #28
 80023ca:	dd8f      	ble.n	80022ec <__aeabi_dmul+0x3dc>
 80023cc:	3808      	subs	r0, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	4084      	lsls	r4, r0
 80023d2:	4692      	mov	sl, r2
 80023d4:	46a3      	mov	fp, r4
 80023d6:	e796      	b.n	8002306 <__aeabi_dmul+0x3f6>
 80023d8:	f000 fd56 	bl	8002e88 <__clzsi2>
 80023dc:	0001      	movs	r1, r0
 80023de:	0003      	movs	r3, r0
 80023e0:	3115      	adds	r1, #21
 80023e2:	3320      	adds	r3, #32
 80023e4:	291c      	cmp	r1, #28
 80023e6:	dc00      	bgt.n	80023ea <__aeabi_dmul+0x4da>
 80023e8:	e758      	b.n	800229c <__aeabi_dmul+0x38c>
 80023ea:	0002      	movs	r2, r0
 80023ec:	464c      	mov	r4, r9
 80023ee:	3a08      	subs	r2, #8
 80023f0:	2000      	movs	r0, #0
 80023f2:	4094      	lsls	r4, r2
 80023f4:	e75d      	b.n	80022b2 <__aeabi_dmul+0x3a2>
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e711      	b.n	8002220 <__aeabi_dmul+0x310>
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <__aeabi_dmul+0x57c>)
 80023fe:	0026      	movs	r6, r4
 8002400:	469c      	mov	ip, r3
 8002402:	0003      	movs	r3, r0
 8002404:	9d02      	ldr	r5, [sp, #8]
 8002406:	40cb      	lsrs	r3, r1
 8002408:	4465      	add	r5, ip
 800240a:	40ae      	lsls	r6, r5
 800240c:	431e      	orrs	r6, r3
 800240e:	0003      	movs	r3, r0
 8002410:	40ab      	lsls	r3, r5
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	4183      	sbcs	r3, r0
 8002416:	0030      	movs	r0, r6
 8002418:	4318      	orrs	r0, r3
 800241a:	40cc      	lsrs	r4, r1
 800241c:	0743      	lsls	r3, r0, #29
 800241e:	d0c7      	beq.n	80023b0 <__aeabi_dmul+0x4a0>
 8002420:	230f      	movs	r3, #15
 8002422:	4003      	ands	r3, r0
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1bd      	bne.n	80023a4 <__aeabi_dmul+0x494>
 8002428:	e7c2      	b.n	80023b0 <__aeabi_dmul+0x4a0>
 800242a:	0765      	lsls	r5, r4, #29
 800242c:	0264      	lsls	r4, r4, #9
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	08c0      	lsrs	r0, r0, #3
 8002432:	2300      	movs	r3, #0
 8002434:	4305      	orrs	r5, r0
 8002436:	e5dd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002438:	2500      	movs	r5, #0
 800243a:	2302      	movs	r3, #2
 800243c:	2e0f      	cmp	r6, #15
 800243e:	d10c      	bne.n	800245a <__aeabi_dmul+0x54a>
 8002440:	2480      	movs	r4, #128	; 0x80
 8002442:	465b      	mov	r3, fp
 8002444:	0324      	lsls	r4, r4, #12
 8002446:	4223      	tst	r3, r4
 8002448:	d00e      	beq.n	8002468 <__aeabi_dmul+0x558>
 800244a:	4221      	tst	r1, r4
 800244c:	d10c      	bne.n	8002468 <__aeabi_dmul+0x558>
 800244e:	430c      	orrs	r4, r1
 8002450:	0324      	lsls	r4, r4, #12
 8002452:	003a      	movs	r2, r7
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <__aeabi_dmul+0x580>)
 8002456:	0b24      	lsrs	r4, r4, #12
 8002458:	e5cc      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800245a:	2e0b      	cmp	r6, #11
 800245c:	d000      	beq.n	8002460 <__aeabi_dmul+0x550>
 800245e:	e5a2      	b.n	8001fa6 <__aeabi_dmul+0x96>
 8002460:	468b      	mov	fp, r1
 8002462:	46aa      	mov	sl, r5
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e5f7      	b.n	8002058 <__aeabi_dmul+0x148>
 8002468:	2480      	movs	r4, #128	; 0x80
 800246a:	465b      	mov	r3, fp
 800246c:	0324      	lsls	r4, r4, #12
 800246e:	431c      	orrs	r4, r3
 8002470:	0324      	lsls	r4, r4, #12
 8002472:	4642      	mov	r2, r8
 8002474:	4655      	mov	r5, sl
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <__aeabi_dmul+0x580>)
 8002478:	0b24      	lsrs	r4, r4, #12
 800247a:	e5bb      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800247c:	464d      	mov	r5, r9
 800247e:	0021      	movs	r1, r4
 8002480:	2303      	movs	r3, #3
 8002482:	e7db      	b.n	800243c <__aeabi_dmul+0x52c>
 8002484:	fffffc0d 	.word	0xfffffc0d
 8002488:	0000043e 	.word	0x0000043e
 800248c:	0000041e 	.word	0x0000041e
 8002490:	000007ff 	.word	0x000007ff

08002494 <__aeabi_dsub>:
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	4657      	mov	r7, sl
 8002498:	464e      	mov	r6, r9
 800249a:	4645      	mov	r5, r8
 800249c:	46de      	mov	lr, fp
 800249e:	b5e0      	push	{r5, r6, r7, lr}
 80024a0:	000d      	movs	r5, r1
 80024a2:	0004      	movs	r4, r0
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	032b      	lsls	r3, r5, #12
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	0f62      	lsrs	r2, r4, #29
 80024ae:	431a      	orrs	r2, r3
 80024b0:	00e3      	lsls	r3, r4, #3
 80024b2:	030c      	lsls	r4, r1, #12
 80024b4:	0a64      	lsrs	r4, r4, #9
 80024b6:	0f47      	lsrs	r7, r0, #29
 80024b8:	4327      	orrs	r7, r4
 80024ba:	4cd0      	ldr	r4, [pc, #832]	; (80027fc <__aeabi_dsub+0x368>)
 80024bc:	006e      	lsls	r6, r5, #1
 80024be:	4691      	mov	r9, r2
 80024c0:	b083      	sub	sp, #12
 80024c2:	004a      	lsls	r2, r1, #1
 80024c4:	00c0      	lsls	r0, r0, #3
 80024c6:	4698      	mov	r8, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	0d76      	lsrs	r6, r6, #21
 80024cc:	0fed      	lsrs	r5, r5, #31
 80024ce:	0d52      	lsrs	r2, r2, #21
 80024d0:	0fc9      	lsrs	r1, r1, #31
 80024d2:	9001      	str	r0, [sp, #4]
 80024d4:	42a2      	cmp	r2, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x46>
 80024d8:	e0b9      	b.n	800264e <__aeabi_dsub+0x1ba>
 80024da:	2401      	movs	r4, #1
 80024dc:	4061      	eors	r1, r4
 80024de:	468b      	mov	fp, r1
 80024e0:	428d      	cmp	r5, r1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x52>
 80024e4:	e08d      	b.n	8002602 <__aeabi_dsub+0x16e>
 80024e6:	1ab4      	subs	r4, r6, r2
 80024e8:	46a4      	mov	ip, r4
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dsub+0x5c>
 80024ee:	e0b7      	b.n	8002660 <__aeabi_dsub+0x1cc>
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x62>
 80024f4:	e0cb      	b.n	800268e <__aeabi_dsub+0x1fa>
 80024f6:	4ac1      	ldr	r2, [pc, #772]	; (80027fc <__aeabi_dsub+0x368>)
 80024f8:	4296      	cmp	r6, r2
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x6a>
 80024fc:	e186      	b.n	800280c <__aeabi_dsub+0x378>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	4317      	orrs	r7, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a38      	cmp	r2, #56	; 0x38
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x78>
 800250a:	e1a4      	b.n	8002856 <__aeabi_dsub+0x3c2>
 800250c:	2a1f      	cmp	r2, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x7e>
 8002510:	e21d      	b.n	800294e <__aeabi_dsub+0x4ba>
 8002512:	4661      	mov	r1, ip
 8002514:	2220      	movs	r2, #32
 8002516:	003c      	movs	r4, r7
 8002518:	1a52      	subs	r2, r2, r1
 800251a:	0001      	movs	r1, r0
 800251c:	4090      	lsls	r0, r2
 800251e:	4094      	lsls	r4, r2
 8002520:	1e42      	subs	r2, r0, #1
 8002522:	4190      	sbcs	r0, r2
 8002524:	4662      	mov	r2, ip
 8002526:	46a0      	mov	r8, r4
 8002528:	4664      	mov	r4, ip
 800252a:	40d7      	lsrs	r7, r2
 800252c:	464a      	mov	r2, r9
 800252e:	40e1      	lsrs	r1, r4
 8002530:	4644      	mov	r4, r8
 8002532:	1bd2      	subs	r2, r2, r7
 8002534:	4691      	mov	r9, r2
 8002536:	430c      	orrs	r4, r1
 8002538:	4304      	orrs	r4, r0
 800253a:	1b1c      	subs	r4, r3, r4
 800253c:	42a3      	cmp	r3, r4
 800253e:	4192      	sbcs	r2, r2
 8002540:	464b      	mov	r3, r9
 8002542:	4252      	negs	r2, r2
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	469a      	mov	sl, r3
 8002548:	4653      	mov	r3, sl
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0xbc>
 800254e:	e12b      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002550:	4653      	mov	r3, sl
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	0a53      	lsrs	r3, r2, #9
 8002556:	469a      	mov	sl, r3
 8002558:	4653      	mov	r3, sl
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0xcc>
 800255e:	e166      	b.n	800282e <__aeabi_dsub+0x39a>
 8002560:	4650      	mov	r0, sl
 8002562:	f000 fc91 	bl	8002e88 <__clzsi2>
 8002566:	0003      	movs	r3, r0
 8002568:	3b08      	subs	r3, #8
 800256a:	2220      	movs	r2, #32
 800256c:	0020      	movs	r0, r4
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	4651      	mov	r1, sl
 8002572:	40d0      	lsrs	r0, r2
 8002574:	4099      	lsls	r1, r3
 8002576:	0002      	movs	r2, r0
 8002578:	409c      	lsls	r4, r3
 800257a:	430a      	orrs	r2, r1
 800257c:	429e      	cmp	r6, r3
 800257e:	dd00      	ble.n	8002582 <__aeabi_dsub+0xee>
 8002580:	e164      	b.n	800284c <__aeabi_dsub+0x3b8>
 8002582:	1b9b      	subs	r3, r3, r6
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	291f      	cmp	r1, #31
 8002588:	dd00      	ble.n	800258c <__aeabi_dsub+0xf8>
 800258a:	e0fe      	b.n	800278a <__aeabi_dsub+0x2f6>
 800258c:	2320      	movs	r3, #32
 800258e:	0010      	movs	r0, r2
 8002590:	0026      	movs	r6, r4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	409c      	lsls	r4, r3
 8002596:	4098      	lsls	r0, r3
 8002598:	40ce      	lsrs	r6, r1
 800259a:	40ca      	lsrs	r2, r1
 800259c:	1e63      	subs	r3, r4, #1
 800259e:	419c      	sbcs	r4, r3
 80025a0:	4330      	orrs	r0, r6
 80025a2:	4692      	mov	sl, r2
 80025a4:	2600      	movs	r6, #0
 80025a6:	4304      	orrs	r4, r0
 80025a8:	0763      	lsls	r3, r4, #29
 80025aa:	d009      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025ac:	230f      	movs	r3, #15
 80025ae:	4023      	ands	r3, r4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025b4:	1d23      	adds	r3, r4, #4
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	41a4      	sbcs	r4, r4
 80025ba:	4264      	negs	r4, r4
 80025bc:	44a2      	add	sl, r4
 80025be:	001c      	movs	r4, r3
 80025c0:	4653      	mov	r3, sl
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	d400      	bmi.n	80025c8 <__aeabi_dsub+0x134>
 80025c6:	e0f2      	b.n	80027ae <__aeabi_dsub+0x31a>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <__aeabi_dsub+0x368>)
 80025ca:	3601      	adds	r6, #1
 80025cc:	429e      	cmp	r6, r3
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x13e>
 80025d0:	e10f      	b.n	80027f2 <__aeabi_dsub+0x35e>
 80025d2:	4653      	mov	r3, sl
 80025d4:	498a      	ldr	r1, [pc, #552]	; (8002800 <__aeabi_dsub+0x36c>)
 80025d6:	08e4      	lsrs	r4, r4, #3
 80025d8:	400b      	ands	r3, r1
 80025da:	0019      	movs	r1, r3
 80025dc:	075b      	lsls	r3, r3, #29
 80025de:	4323      	orrs	r3, r4
 80025e0:	0572      	lsls	r2, r6, #21
 80025e2:	024c      	lsls	r4, r1, #9
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d52      	lsrs	r2, r2, #21
 80025e8:	0512      	lsls	r2, r2, #20
 80025ea:	4322      	orrs	r2, r4
 80025ec:	07ed      	lsls	r5, r5, #31
 80025ee:	432a      	orrs	r2, r5
 80025f0:	0018      	movs	r0, r3
 80025f2:	0011      	movs	r1, r2
 80025f4:	b003      	add	sp, #12
 80025f6:	bcf0      	pop	{r4, r5, r6, r7}
 80025f8:	46bb      	mov	fp, r7
 80025fa:	46b2      	mov	sl, r6
 80025fc:	46a9      	mov	r9, r5
 80025fe:	46a0      	mov	r8, r4
 8002600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002602:	1ab4      	subs	r4, r6, r2
 8002604:	46a4      	mov	ip, r4
 8002606:	2c00      	cmp	r4, #0
 8002608:	dd59      	ble.n	80026be <__aeabi_dsub+0x22a>
 800260a:	2a00      	cmp	r2, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x17c>
 800260e:	e0b0      	b.n	8002772 <__aeabi_dsub+0x2de>
 8002610:	4556      	cmp	r6, sl
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x182>
 8002614:	e0fa      	b.n	800280c <__aeabi_dsub+0x378>
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0412      	lsls	r2, r2, #16
 800261a:	4317      	orrs	r7, r2
 800261c:	4662      	mov	r2, ip
 800261e:	2a38      	cmp	r2, #56	; 0x38
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x190>
 8002622:	e0d4      	b.n	80027ce <__aeabi_dsub+0x33a>
 8002624:	2a1f      	cmp	r2, #31
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x196>
 8002628:	e1c0      	b.n	80029ac <__aeabi_dsub+0x518>
 800262a:	0039      	movs	r1, r7
 800262c:	3a20      	subs	r2, #32
 800262e:	40d1      	lsrs	r1, r2
 8002630:	4662      	mov	r2, ip
 8002632:	2a20      	cmp	r2, #32
 8002634:	d006      	beq.n	8002644 <__aeabi_dsub+0x1b0>
 8002636:	4664      	mov	r4, ip
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	1b12      	subs	r2, r2, r4
 800263c:	003c      	movs	r4, r7
 800263e:	4094      	lsls	r4, r2
 8002640:	4304      	orrs	r4, r0
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9c01      	ldr	r4, [sp, #4]
 8002646:	1e62      	subs	r2, r4, #1
 8002648:	4194      	sbcs	r4, r2
 800264a:	430c      	orrs	r4, r1
 800264c:	e0c3      	b.n	80027d6 <__aeabi_dsub+0x342>
 800264e:	003c      	movs	r4, r7
 8002650:	4304      	orrs	r4, r0
 8002652:	d02b      	beq.n	80026ac <__aeabi_dsub+0x218>
 8002654:	468b      	mov	fp, r1
 8002656:	428d      	cmp	r5, r1
 8002658:	d02e      	beq.n	80026b8 <__aeabi_dsub+0x224>
 800265a:	4c6a      	ldr	r4, [pc, #424]	; (8002804 <__aeabi_dsub+0x370>)
 800265c:	46a4      	mov	ip, r4
 800265e:	44b4      	add	ip, r6
 8002660:	4664      	mov	r4, ip
 8002662:	2c00      	cmp	r4, #0
 8002664:	d05f      	beq.n	8002726 <__aeabi_dsub+0x292>
 8002666:	1b94      	subs	r4, r2, r6
 8002668:	46a4      	mov	ip, r4
 800266a:	2e00      	cmp	r6, #0
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x1dc>
 800266e:	e120      	b.n	80028b2 <__aeabi_dsub+0x41e>
 8002670:	464c      	mov	r4, r9
 8002672:	431c      	orrs	r4, r3
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x1e4>
 8002676:	e1c7      	b.n	8002a08 <__aeabi_dsub+0x574>
 8002678:	4661      	mov	r1, ip
 800267a:	1e4c      	subs	r4, r1, #1
 800267c:	2901      	cmp	r1, #1
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x1ee>
 8002680:	e223      	b.n	8002aca <__aeabi_dsub+0x636>
 8002682:	4d5e      	ldr	r5, [pc, #376]	; (80027fc <__aeabi_dsub+0x368>)
 8002684:	45ac      	cmp	ip, r5
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x1f6>
 8002688:	e1d8      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 800268a:	46a4      	mov	ip, r4
 800268c:	e11a      	b.n	80028c4 <__aeabi_dsub+0x430>
 800268e:	003a      	movs	r2, r7
 8002690:	4302      	orrs	r2, r0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x202>
 8002694:	e0e4      	b.n	8002860 <__aeabi_dsub+0x3cc>
 8002696:	0022      	movs	r2, r4
 8002698:	3a01      	subs	r2, #1
 800269a:	2c01      	cmp	r4, #1
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x20c>
 800269e:	e1c3      	b.n	8002a28 <__aeabi_dsub+0x594>
 80026a0:	4956      	ldr	r1, [pc, #344]	; (80027fc <__aeabi_dsub+0x368>)
 80026a2:	428c      	cmp	r4, r1
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x214>
 80026a6:	e0b1      	b.n	800280c <__aeabi_dsub+0x378>
 80026a8:	4694      	mov	ip, r2
 80026aa:	e72b      	b.n	8002504 <__aeabi_dsub+0x70>
 80026ac:	2401      	movs	r4, #1
 80026ae:	4061      	eors	r1, r4
 80026b0:	468b      	mov	fp, r1
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x224>
 80026b6:	e716      	b.n	80024e6 <__aeabi_dsub+0x52>
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <__aeabi_dsub+0x370>)
 80026ba:	468c      	mov	ip, r1
 80026bc:	44b4      	add	ip, r6
 80026be:	4664      	mov	r4, ip
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x232>
 80026c4:	e0d3      	b.n	800286e <__aeabi_dsub+0x3da>
 80026c6:	1b91      	subs	r1, r2, r6
 80026c8:	468c      	mov	ip, r1
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x23c>
 80026ce:	e15e      	b.n	800298e <__aeabi_dsub+0x4fa>
 80026d0:	494a      	ldr	r1, [pc, #296]	; (80027fc <__aeabi_dsub+0x368>)
 80026d2:	428a      	cmp	r2, r1
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x244>
 80026d6:	e1be      	b.n	8002a56 <__aeabi_dsub+0x5c2>
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	464c      	mov	r4, r9
 80026dc:	0409      	lsls	r1, r1, #16
 80026de:	430c      	orrs	r4, r1
 80026e0:	46a1      	mov	r9, r4
 80026e2:	4661      	mov	r1, ip
 80026e4:	2938      	cmp	r1, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x256>
 80026e8:	e1ba      	b.n	8002a60 <__aeabi_dsub+0x5cc>
 80026ea:	291f      	cmp	r1, #31
 80026ec:	dd00      	ble.n	80026f0 <__aeabi_dsub+0x25c>
 80026ee:	e227      	b.n	8002b40 <__aeabi_dsub+0x6ac>
 80026f0:	2420      	movs	r4, #32
 80026f2:	1a64      	subs	r4, r4, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	40a1      	lsls	r1, r4
 80026f8:	001e      	movs	r6, r3
 80026fa:	4688      	mov	r8, r1
 80026fc:	4661      	mov	r1, ip
 80026fe:	40a3      	lsls	r3, r4
 8002700:	40ce      	lsrs	r6, r1
 8002702:	4641      	mov	r1, r8
 8002704:	1e5c      	subs	r4, r3, #1
 8002706:	41a3      	sbcs	r3, r4
 8002708:	4331      	orrs	r1, r6
 800270a:	4319      	orrs	r1, r3
 800270c:	000c      	movs	r4, r1
 800270e:	4663      	mov	r3, ip
 8002710:	4649      	mov	r1, r9
 8002712:	40d9      	lsrs	r1, r3
 8002714:	187f      	adds	r7, r7, r1
 8002716:	1824      	adds	r4, r4, r0
 8002718:	4284      	cmp	r4, r0
 800271a:	419b      	sbcs	r3, r3
 800271c:	425b      	negs	r3, r3
 800271e:	469a      	mov	sl, r3
 8002720:	0016      	movs	r6, r2
 8002722:	44ba      	add	sl, r7
 8002724:	e05d      	b.n	80027e2 <__aeabi_dsub+0x34e>
 8002726:	4c38      	ldr	r4, [pc, #224]	; (8002808 <__aeabi_dsub+0x374>)
 8002728:	1c72      	adds	r2, r6, #1
 800272a:	4222      	tst	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x29c>
 800272e:	e0df      	b.n	80028f0 <__aeabi_dsub+0x45c>
 8002730:	464a      	mov	r2, r9
 8002732:	431a      	orrs	r2, r3
 8002734:	2e00      	cmp	r6, #0
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x2a6>
 8002738:	e15c      	b.n	80029f4 <__aeabi_dsub+0x560>
 800273a:	2a00      	cmp	r2, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x2ac>
 800273e:	e1cf      	b.n	8002ae0 <__aeabi_dsub+0x64c>
 8002740:	003a      	movs	r2, r7
 8002742:	4302      	orrs	r2, r0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x2b4>
 8002746:	e17f      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002748:	1a1c      	subs	r4, r3, r0
 800274a:	464a      	mov	r2, r9
 800274c:	42a3      	cmp	r3, r4
 800274e:	4189      	sbcs	r1, r1
 8002750:	1bd2      	subs	r2, r2, r7
 8002752:	4249      	negs	r1, r1
 8002754:	1a52      	subs	r2, r2, r1
 8002756:	4692      	mov	sl, r2
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	d400      	bmi.n	800275e <__aeabi_dsub+0x2ca>
 800275c:	e20a      	b.n	8002b74 <__aeabi_dsub+0x6e0>
 800275e:	1ac4      	subs	r4, r0, r3
 8002760:	42a0      	cmp	r0, r4
 8002762:	4180      	sbcs	r0, r0
 8002764:	464b      	mov	r3, r9
 8002766:	4240      	negs	r0, r0
 8002768:	1aff      	subs	r7, r7, r3
 800276a:	1a3b      	subs	r3, r7, r0
 800276c:	469a      	mov	sl, r3
 800276e:	465d      	mov	r5, fp
 8002770:	e71a      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002772:	003a      	movs	r2, r7
 8002774:	4302      	orrs	r2, r0
 8002776:	d073      	beq.n	8002860 <__aeabi_dsub+0x3cc>
 8002778:	0022      	movs	r2, r4
 800277a:	3a01      	subs	r2, #1
 800277c:	2c01      	cmp	r4, #1
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x2ee>
 8002780:	e0cb      	b.n	800291a <__aeabi_dsub+0x486>
 8002782:	4554      	cmp	r4, sl
 8002784:	d042      	beq.n	800280c <__aeabi_dsub+0x378>
 8002786:	4694      	mov	ip, r2
 8002788:	e748      	b.n	800261c <__aeabi_dsub+0x188>
 800278a:	0010      	movs	r0, r2
 800278c:	3b1f      	subs	r3, #31
 800278e:	40d8      	lsrs	r0, r3
 8002790:	2920      	cmp	r1, #32
 8002792:	d003      	beq.n	800279c <__aeabi_dsub+0x308>
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	409a      	lsls	r2, r3
 800279a:	4314      	orrs	r4, r2
 800279c:	1e63      	subs	r3, r4, #1
 800279e:	419c      	sbcs	r4, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	469a      	mov	sl, r3
 80027a6:	4304      	orrs	r4, r0
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d000      	beq.n	80027ae <__aeabi_dsub+0x31a>
 80027ac:	e6fe      	b.n	80025ac <__aeabi_dsub+0x118>
 80027ae:	4652      	mov	r2, sl
 80027b0:	08e3      	lsrs	r3, r4, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4652      	mov	r2, sl
 80027b8:	46b4      	mov	ip, r6
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <__aeabi_dsub+0x368>)
 80027be:	458c      	cmp	ip, r1
 80027c0:	d02a      	beq.n	8002818 <__aeabi_dsub+0x384>
 80027c2:	0312      	lsls	r2, r2, #12
 80027c4:	0b14      	lsrs	r4, r2, #12
 80027c6:	4662      	mov	r2, ip
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	0d52      	lsrs	r2, r2, #21
 80027cc:	e70c      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027ce:	003c      	movs	r4, r7
 80027d0:	4304      	orrs	r4, r0
 80027d2:	1e62      	subs	r2, r4, #1
 80027d4:	4194      	sbcs	r4, r2
 80027d6:	18e4      	adds	r4, r4, r3
 80027d8:	429c      	cmp	r4, r3
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4252      	negs	r2, r2
 80027de:	444a      	add	r2, r9
 80027e0:	4692      	mov	sl, r2
 80027e2:	4653      	mov	r3, sl
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	d5df      	bpl.n	80027a8 <__aeabi_dsub+0x314>
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__aeabi_dsub+0x368>)
 80027ea:	3601      	adds	r6, #1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x35e>
 80027f0:	e0a0      	b.n	8002934 <__aeabi_dsub+0x4a0>
 80027f2:	0032      	movs	r2, r6
 80027f4:	2400      	movs	r4, #0
 80027f6:	2300      	movs	r3, #0
 80027f8:	e6f6      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	000007ff 	.word	0x000007ff
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	fffff801 	.word	0xfffff801
 8002808:	000007fe 	.word	0x000007fe
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	464a      	mov	r2, r9
 8002810:	0752      	lsls	r2, r2, #29
 8002812:	4313      	orrs	r3, r2
 8002814:	464a      	mov	r2, r9
 8002816:	08d2      	lsrs	r2, r2, #3
 8002818:	0019      	movs	r1, r3
 800281a:	4311      	orrs	r1, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x38c>
 800281e:	e1b5      	b.n	8002b8c <__aeabi_dsub+0x6f8>
 8002820:	2480      	movs	r4, #128	; 0x80
 8002822:	0324      	lsls	r4, r4, #12
 8002824:	4314      	orrs	r4, r2
 8002826:	0324      	lsls	r4, r4, #12
 8002828:	4ad5      	ldr	r2, [pc, #852]	; (8002b80 <__aeabi_dsub+0x6ec>)
 800282a:	0b24      	lsrs	r4, r4, #12
 800282c:	e6dc      	b.n	80025e8 <__aeabi_dsub+0x154>
 800282e:	0020      	movs	r0, r4
 8002830:	f000 fb2a 	bl	8002e88 <__clzsi2>
 8002834:	0003      	movs	r3, r0
 8002836:	3318      	adds	r3, #24
 8002838:	2b1f      	cmp	r3, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dsub+0x3aa>
 800283c:	e695      	b.n	800256a <__aeabi_dsub+0xd6>
 800283e:	0022      	movs	r2, r4
 8002840:	3808      	subs	r0, #8
 8002842:	4082      	lsls	r2, r0
 8002844:	2400      	movs	r4, #0
 8002846:	429e      	cmp	r6, r3
 8002848:	dc00      	bgt.n	800284c <__aeabi_dsub+0x3b8>
 800284a:	e69a      	b.n	8002582 <__aeabi_dsub+0xee>
 800284c:	1af6      	subs	r6, r6, r3
 800284e:	4bcd      	ldr	r3, [pc, #820]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002850:	401a      	ands	r2, r3
 8002852:	4692      	mov	sl, r2
 8002854:	e6a8      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002856:	003c      	movs	r4, r7
 8002858:	4304      	orrs	r4, r0
 800285a:	1e62      	subs	r2, r4, #1
 800285c:	4194      	sbcs	r4, r2
 800285e:	e66c      	b.n	800253a <__aeabi_dsub+0xa6>
 8002860:	464a      	mov	r2, r9
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	0752      	lsls	r2, r2, #29
 8002866:	4313      	orrs	r3, r2
 8002868:	464a      	mov	r2, r9
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	e7a6      	b.n	80027bc <__aeabi_dsub+0x328>
 800286e:	4cc6      	ldr	r4, [pc, #792]	; (8002b88 <__aeabi_dsub+0x6f4>)
 8002870:	1c72      	adds	r2, r6, #1
 8002872:	4222      	tst	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x3e4>
 8002876:	e0ac      	b.n	80029d2 <__aeabi_dsub+0x53e>
 8002878:	464a      	mov	r2, r9
 800287a:	431a      	orrs	r2, r3
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x3ee>
 8002880:	e105      	b.n	8002a8e <__aeabi_dsub+0x5fa>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x3f4>
 8002886:	e156      	b.n	8002b36 <__aeabi_dsub+0x6a2>
 8002888:	003a      	movs	r2, r7
 800288a:	4302      	orrs	r2, r0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x3fc>
 800288e:	e0db      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002890:	181c      	adds	r4, r3, r0
 8002892:	429c      	cmp	r4, r3
 8002894:	419b      	sbcs	r3, r3
 8002896:	444f      	add	r7, r9
 8002898:	46ba      	mov	sl, r7
 800289a:	425b      	negs	r3, r3
 800289c:	449a      	add	sl, r3
 800289e:	4653      	mov	r3, sl
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	d400      	bmi.n	80028a6 <__aeabi_dsub+0x412>
 80028a4:	e780      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028a6:	4652      	mov	r2, sl
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <__aeabi_dsub+0x6f0>)
 80028aa:	2601      	movs	r6, #1
 80028ac:	401a      	ands	r2, r3
 80028ae:	4692      	mov	sl, r2
 80028b0:	e77a      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028b2:	4cb3      	ldr	r4, [pc, #716]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80028b4:	42a2      	cmp	r2, r4
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x426>
 80028b8:	e0c0      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 80028ba:	2480      	movs	r4, #128	; 0x80
 80028bc:	464d      	mov	r5, r9
 80028be:	0424      	lsls	r4, r4, #16
 80028c0:	4325      	orrs	r5, r4
 80028c2:	46a9      	mov	r9, r5
 80028c4:	4664      	mov	r4, ip
 80028c6:	2c38      	cmp	r4, #56	; 0x38
 80028c8:	dc53      	bgt.n	8002972 <__aeabi_dsub+0x4de>
 80028ca:	4661      	mov	r1, ip
 80028cc:	2c1f      	cmp	r4, #31
 80028ce:	dd00      	ble.n	80028d2 <__aeabi_dsub+0x43e>
 80028d0:	e0cd      	b.n	8002a6e <__aeabi_dsub+0x5da>
 80028d2:	2520      	movs	r5, #32
 80028d4:	001e      	movs	r6, r3
 80028d6:	1b2d      	subs	r5, r5, r4
 80028d8:	464c      	mov	r4, r9
 80028da:	40ab      	lsls	r3, r5
 80028dc:	40ac      	lsls	r4, r5
 80028de:	40ce      	lsrs	r6, r1
 80028e0:	1e5d      	subs	r5, r3, #1
 80028e2:	41ab      	sbcs	r3, r5
 80028e4:	4334      	orrs	r4, r6
 80028e6:	4323      	orrs	r3, r4
 80028e8:	464c      	mov	r4, r9
 80028ea:	40cc      	lsrs	r4, r1
 80028ec:	1b3f      	subs	r7, r7, r4
 80028ee:	e045      	b.n	800297c <__aeabi_dsub+0x4e8>
 80028f0:	464a      	mov	r2, r9
 80028f2:	1a1c      	subs	r4, r3, r0
 80028f4:	1bd1      	subs	r1, r2, r7
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	4192      	sbcs	r2, r2
 80028fa:	4252      	negs	r2, r2
 80028fc:	4692      	mov	sl, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	4651      	mov	r1, sl
 8002902:	1a52      	subs	r2, r2, r1
 8002904:	4692      	mov	sl, r2
 8002906:	0212      	lsls	r2, r2, #8
 8002908:	d500      	bpl.n	800290c <__aeabi_dsub+0x478>
 800290a:	e083      	b.n	8002a14 <__aeabi_dsub+0x580>
 800290c:	4653      	mov	r3, sl
 800290e:	4323      	orrs	r3, r4
 8002910:	d000      	beq.n	8002914 <__aeabi_dsub+0x480>
 8002912:	e621      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002914:	2200      	movs	r2, #0
 8002916:	2500      	movs	r5, #0
 8002918:	e753      	b.n	80027c2 <__aeabi_dsub+0x32e>
 800291a:	181c      	adds	r4, r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	419b      	sbcs	r3, r3
 8002920:	444f      	add	r7, r9
 8002922:	46ba      	mov	sl, r7
 8002924:	425b      	negs	r3, r3
 8002926:	449a      	add	sl, r3
 8002928:	4653      	mov	r3, sl
 800292a:	2601      	movs	r6, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dsub+0x49e>
 8002930:	e73a      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002932:	2602      	movs	r6, #2
 8002934:	4652      	mov	r2, sl
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002938:	2101      	movs	r1, #1
 800293a:	401a      	ands	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	4021      	ands	r1, r4
 8002940:	0862      	lsrs	r2, r4, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	07dc      	lsls	r4, r3, #31
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	469a      	mov	sl, r3
 800294a:	4314      	orrs	r4, r2
 800294c:	e62c      	b.n	80025a8 <__aeabi_dsub+0x114>
 800294e:	0039      	movs	r1, r7
 8002950:	3a20      	subs	r2, #32
 8002952:	40d1      	lsrs	r1, r2
 8002954:	4662      	mov	r2, ip
 8002956:	2a20      	cmp	r2, #32
 8002958:	d006      	beq.n	8002968 <__aeabi_dsub+0x4d4>
 800295a:	4664      	mov	r4, ip
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	1b12      	subs	r2, r2, r4
 8002960:	003c      	movs	r4, r7
 8002962:	4094      	lsls	r4, r2
 8002964:	4304      	orrs	r4, r0
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	9c01      	ldr	r4, [sp, #4]
 800296a:	1e62      	subs	r2, r4, #1
 800296c:	4194      	sbcs	r4, r2
 800296e:	430c      	orrs	r4, r1
 8002970:	e5e3      	b.n	800253a <__aeabi_dsub+0xa6>
 8002972:	4649      	mov	r1, r9
 8002974:	4319      	orrs	r1, r3
 8002976:	000b      	movs	r3, r1
 8002978:	1e5c      	subs	r4, r3, #1
 800297a:	41a3      	sbcs	r3, r4
 800297c:	1ac4      	subs	r4, r0, r3
 800297e:	42a0      	cmp	r0, r4
 8002980:	419b      	sbcs	r3, r3
 8002982:	425b      	negs	r3, r3
 8002984:	1afb      	subs	r3, r7, r3
 8002986:	469a      	mov	sl, r3
 8002988:	465d      	mov	r5, fp
 800298a:	0016      	movs	r6, r2
 800298c:	e5dc      	b.n	8002548 <__aeabi_dsub+0xb4>
 800298e:	4649      	mov	r1, r9
 8002990:	4319      	orrs	r1, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x502>
 8002994:	e0ae      	b.n	8002af4 <__aeabi_dsub+0x660>
 8002996:	4661      	mov	r1, ip
 8002998:	4664      	mov	r4, ip
 800299a:	3901      	subs	r1, #1
 800299c:	2c01      	cmp	r4, #1
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x50e>
 80029a0:	e0e0      	b.n	8002b64 <__aeabi_dsub+0x6d0>
 80029a2:	4c77      	ldr	r4, [pc, #476]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029a4:	45a4      	cmp	ip, r4
 80029a6:	d056      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 80029a8:	468c      	mov	ip, r1
 80029aa:	e69a      	b.n	80026e2 <__aeabi_dsub+0x24e>
 80029ac:	4661      	mov	r1, ip
 80029ae:	2220      	movs	r2, #32
 80029b0:	003c      	movs	r4, r7
 80029b2:	1a52      	subs	r2, r2, r1
 80029b4:	4094      	lsls	r4, r2
 80029b6:	0001      	movs	r1, r0
 80029b8:	4090      	lsls	r0, r2
 80029ba:	46a0      	mov	r8, r4
 80029bc:	4664      	mov	r4, ip
 80029be:	1e42      	subs	r2, r0, #1
 80029c0:	4190      	sbcs	r0, r2
 80029c2:	4662      	mov	r2, ip
 80029c4:	40e1      	lsrs	r1, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	40d7      	lsrs	r7, r2
 80029ca:	430c      	orrs	r4, r1
 80029cc:	4304      	orrs	r4, r0
 80029ce:	44b9      	add	r9, r7
 80029d0:	e701      	b.n	80027d6 <__aeabi_dsub+0x342>
 80029d2:	496b      	ldr	r1, [pc, #428]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x546>
 80029d8:	e70c      	b.n	80027f4 <__aeabi_dsub+0x360>
 80029da:	1818      	adds	r0, r3, r0
 80029dc:	4298      	cmp	r0, r3
 80029de:	419b      	sbcs	r3, r3
 80029e0:	444f      	add	r7, r9
 80029e2:	425b      	negs	r3, r3
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	07dc      	lsls	r4, r3, #31
 80029e8:	0840      	lsrs	r0, r0, #1
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	469a      	mov	sl, r3
 80029ee:	0016      	movs	r6, r2
 80029f0:	4304      	orrs	r4, r0
 80029f2:	e6d9      	b.n	80027a8 <__aeabi_dsub+0x314>
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x566>
 80029f8:	e081      	b.n	8002afe <__aeabi_dsub+0x66a>
 80029fa:	003b      	movs	r3, r7
 80029fc:	4303      	orrs	r3, r0
 80029fe:	d11d      	bne.n	8002a3c <__aeabi_dsub+0x5a8>
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2500      	movs	r5, #0
 8002a04:	0312      	lsls	r2, r2, #12
 8002a06:	e70b      	b.n	8002820 <__aeabi_dsub+0x38c>
 8002a08:	08c0      	lsrs	r0, r0, #3
 8002a0a:	077b      	lsls	r3, r7, #29
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	08fa      	lsrs	r2, r7, #3
 8002a12:	e6d3      	b.n	80027bc <__aeabi_dsub+0x328>
 8002a14:	1ac4      	subs	r4, r0, r3
 8002a16:	42a0      	cmp	r0, r4
 8002a18:	4180      	sbcs	r0, r0
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	4240      	negs	r0, r0
 8002a1e:	1aff      	subs	r7, r7, r3
 8002a20:	1a3b      	subs	r3, r7, r0
 8002a22:	469a      	mov	sl, r3
 8002a24:	465d      	mov	r5, fp
 8002a26:	e597      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002a28:	1a1c      	subs	r4, r3, r0
 8002a2a:	464a      	mov	r2, r9
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	419b      	sbcs	r3, r3
 8002a30:	1bd7      	subs	r7, r2, r7
 8002a32:	425b      	negs	r3, r3
 8002a34:	1afb      	subs	r3, r7, r3
 8002a36:	469a      	mov	sl, r3
 8002a38:	2601      	movs	r6, #1
 8002a3a:	e585      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002a3c:	08c0      	lsrs	r0, r0, #3
 8002a3e:	077b      	lsls	r3, r7, #29
 8002a40:	465d      	mov	r5, fp
 8002a42:	4303      	orrs	r3, r0
 8002a44:	08fa      	lsrs	r2, r7, #3
 8002a46:	e6e7      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a48:	464a      	mov	r2, r9
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	0752      	lsls	r2, r2, #29
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	464a      	mov	r2, r9
 8002a52:	08d2      	lsrs	r2, r2, #3
 8002a54:	e6b5      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002a56:	08c0      	lsrs	r0, r0, #3
 8002a58:	077b      	lsls	r3, r7, #29
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	08fa      	lsrs	r2, r7, #3
 8002a5e:	e6db      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a60:	4649      	mov	r1, r9
 8002a62:	4319      	orrs	r1, r3
 8002a64:	000b      	movs	r3, r1
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	418b      	sbcs	r3, r1
 8002a6a:	001c      	movs	r4, r3
 8002a6c:	e653      	b.n	8002716 <__aeabi_dsub+0x282>
 8002a6e:	464d      	mov	r5, r9
 8002a70:	3c20      	subs	r4, #32
 8002a72:	40e5      	lsrs	r5, r4
 8002a74:	2920      	cmp	r1, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x5f0>
 8002a78:	2440      	movs	r4, #64	; 0x40
 8002a7a:	1a64      	subs	r4, r4, r1
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	40a1      	lsls	r1, r4
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4698      	mov	r8, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	1e5c      	subs	r4, r3, #1
 8002a88:	41a3      	sbcs	r3, r4
 8002a8a:	432b      	orrs	r3, r5
 8002a8c:	e776      	b.n	800297c <__aeabi_dsub+0x4e8>
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d0e1      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 8002a92:	003a      	movs	r2, r7
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x608>
 8002a9a:	e6b8      	b.n	800280e <__aeabi_dsub+0x37a>
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	0752      	lsls	r2, r2, #29
 8002aa0:	2480      	movs	r4, #128	; 0x80
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0324      	lsls	r4, r4, #12
 8002aa8:	08d2      	lsrs	r2, r2, #3
 8002aaa:	4222      	tst	r2, r4
 8002aac:	d007      	beq.n	8002abe <__aeabi_dsub+0x62a>
 8002aae:	08fe      	lsrs	r6, r7, #3
 8002ab0:	4226      	tst	r6, r4
 8002ab2:	d104      	bne.n	8002abe <__aeabi_dsub+0x62a>
 8002ab4:	465d      	mov	r5, fp
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	08c3      	lsrs	r3, r0, #3
 8002aba:	077f      	lsls	r7, r7, #29
 8002abc:	433b      	orrs	r3, r7
 8002abe:	0f59      	lsrs	r1, r3, #29
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	e6a6      	b.n	8002818 <__aeabi_dsub+0x384>
 8002aca:	1ac4      	subs	r4, r0, r3
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	1aff      	subs	r7, r7, r3
 8002ad6:	1a3b      	subs	r3, r7, r0
 8002ad8:	469a      	mov	sl, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	2601      	movs	r6, #1
 8002ade:	e533      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x654>
 8002ae6:	e715      	b.n	8002914 <__aeabi_dsub+0x480>
 8002ae8:	08c0      	lsrs	r0, r0, #3
 8002aea:	077b      	lsls	r3, r7, #29
 8002aec:	465d      	mov	r5, fp
 8002aee:	4303      	orrs	r3, r0
 8002af0:	08fa      	lsrs	r2, r7, #3
 8002af2:	e666      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002af4:	08c0      	lsrs	r0, r0, #3
 8002af6:	077b      	lsls	r3, r7, #29
 8002af8:	4303      	orrs	r3, r0
 8002afa:	08fa      	lsrs	r2, r7, #3
 8002afc:	e65e      	b.n	80027bc <__aeabi_dsub+0x328>
 8002afe:	003a      	movs	r2, r7
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	4302      	orrs	r2, r0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x674>
 8002b06:	e682      	b.n	800280e <__aeabi_dsub+0x37a>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	2480      	movs	r4, #128	; 0x80
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	464a      	mov	r2, r9
 8002b12:	0324      	lsls	r4, r4, #12
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	4222      	tst	r2, r4
 8002b18:	d007      	beq.n	8002b2a <__aeabi_dsub+0x696>
 8002b1a:	08fe      	lsrs	r6, r7, #3
 8002b1c:	4226      	tst	r6, r4
 8002b1e:	d104      	bne.n	8002b2a <__aeabi_dsub+0x696>
 8002b20:	465d      	mov	r5, fp
 8002b22:	0032      	movs	r2, r6
 8002b24:	08c3      	lsrs	r3, r0, #3
 8002b26:	077f      	lsls	r7, r7, #29
 8002b28:	433b      	orrs	r3, r7
 8002b2a:	0f59      	lsrs	r1, r3, #29
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	0749      	lsls	r1, r1, #29
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e670      	b.n	8002818 <__aeabi_dsub+0x384>
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	077b      	lsls	r3, r7, #29
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	08fa      	lsrs	r2, r7, #3
 8002b3e:	e640      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002b40:	464c      	mov	r4, r9
 8002b42:	3920      	subs	r1, #32
 8002b44:	40cc      	lsrs	r4, r1
 8002b46:	4661      	mov	r1, ip
 8002b48:	2920      	cmp	r1, #32
 8002b4a:	d006      	beq.n	8002b5a <__aeabi_dsub+0x6c6>
 8002b4c:	4666      	mov	r6, ip
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	1b89      	subs	r1, r1, r6
 8002b52:	464e      	mov	r6, r9
 8002b54:	408e      	lsls	r6, r1
 8002b56:	4333      	orrs	r3, r6
 8002b58:	4698      	mov	r8, r3
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	418b      	sbcs	r3, r1
 8002b60:	431c      	orrs	r4, r3
 8002b62:	e5d8      	b.n	8002716 <__aeabi_dsub+0x282>
 8002b64:	181c      	adds	r4, r3, r0
 8002b66:	4284      	cmp	r4, r0
 8002b68:	4180      	sbcs	r0, r0
 8002b6a:	444f      	add	r7, r9
 8002b6c:	46ba      	mov	sl, r7
 8002b6e:	4240      	negs	r0, r0
 8002b70:	4482      	add	sl, r0
 8002b72:	e6d9      	b.n	8002928 <__aeabi_dsub+0x494>
 8002b74:	4653      	mov	r3, sl
 8002b76:	4323      	orrs	r3, r4
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x6e8>
 8002b7a:	e6cb      	b.n	8002914 <__aeabi_dsub+0x480>
 8002b7c:	e614      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff
 8002b84:	ff7fffff 	.word	0xff7fffff
 8002b88:	000007fe 	.word	0x000007fe
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4a01      	ldr	r2, [pc, #4]	; (8002b94 <__aeabi_dsub+0x700>)
 8002b90:	001c      	movs	r4, r3
 8002b92:	e529      	b.n	80025e8 <__aeabi_dsub+0x154>
 8002b94:	000007ff 	.word	0x000007ff

08002b98 <__aeabi_dcmpun>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	0005      	movs	r5, r0
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002b9e:	031c      	lsls	r4, r3, #12
 8002ba0:	0016      	movs	r6, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	030a      	lsls	r2, r1, #12
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	0b12      	lsrs	r2, r2, #12
 8002baa:	0d49      	lsrs	r1, r1, #21
 8002bac:	0b24      	lsrs	r4, r4, #12
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	4281      	cmp	r1, r0
 8002bb2:	d008      	beq.n	8002bc6 <__aeabi_dcmpun+0x2e>
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	4330      	orrs	r0, r6
 8002bc0:	1e43      	subs	r3, r0, #1
 8002bc2:	4198      	sbcs	r0, r3
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	432a      	orrs	r2, r5
 8002bca:	d1fb      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bcc:	e7f2      	b.n	8002bb4 <__aeabi_dcmpun+0x1c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	000007ff 	.word	0x000007ff

08002bd4 <__aeabi_d2iz>:
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	b530      	push	{r4, r5, lr}
 8002bd8:	4c13      	ldr	r4, [pc, #76]	; (8002c28 <__aeabi_d2iz+0x54>)
 8002bda:	0053      	lsls	r3, r2, #1
 8002bdc:	0309      	lsls	r1, r1, #12
 8002bde:	0005      	movs	r5, r0
 8002be0:	0b09      	lsrs	r1, r1, #12
 8002be2:	2000      	movs	r0, #0
 8002be4:	0d5b      	lsrs	r3, r3, #21
 8002be6:	0fd2      	lsrs	r2, r2, #31
 8002be8:	42a3      	cmp	r3, r4
 8002bea:	dd04      	ble.n	8002bf6 <__aeabi_d2iz+0x22>
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <__aeabi_d2iz+0x58>)
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	dd02      	ble.n	8002bf8 <__aeabi_d2iz+0x24>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <__aeabi_d2iz+0x5c>)
 8002bf4:	18d0      	adds	r0, r2, r3
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	2080      	movs	r0, #128	; 0x80
 8002bfa:	0340      	lsls	r0, r0, #13
 8002bfc:	4301      	orrs	r1, r0
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <__aeabi_d2iz+0x60>)
 8002c00:	1ac0      	subs	r0, r0, r3
 8002c02:	281f      	cmp	r0, #31
 8002c04:	dd08      	ble.n	8002c18 <__aeabi_d2iz+0x44>
 8002c06:	480c      	ldr	r0, [pc, #48]	; (8002c38 <__aeabi_d2iz+0x64>)
 8002c08:	1ac3      	subs	r3, r0, r3
 8002c0a:	40d9      	lsrs	r1, r3
 8002c0c:	000b      	movs	r3, r1
 8002c0e:	4258      	negs	r0, r3
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d1f0      	bne.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c14:	0018      	movs	r0, r3
 8002c16:	e7ee      	b.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c18:	4c08      	ldr	r4, [pc, #32]	; (8002c3c <__aeabi_d2iz+0x68>)
 8002c1a:	40c5      	lsrs	r5, r0
 8002c1c:	46a4      	mov	ip, r4
 8002c1e:	4463      	add	r3, ip
 8002c20:	4099      	lsls	r1, r3
 8002c22:	000b      	movs	r3, r1
 8002c24:	432b      	orrs	r3, r5
 8002c26:	e7f2      	b.n	8002c0e <__aeabi_d2iz+0x3a>
 8002c28:	000003fe 	.word	0x000003fe
 8002c2c:	0000041d 	.word	0x0000041d
 8002c30:	7fffffff 	.word	0x7fffffff
 8002c34:	00000433 	.word	0x00000433
 8002c38:	00000413 	.word	0x00000413
 8002c3c:	fffffbed 	.word	0xfffffbed

08002c40 <__aeabi_i2d>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d016      	beq.n	8002c74 <__aeabi_i2d+0x34>
 8002c46:	17c3      	asrs	r3, r0, #31
 8002c48:	18c5      	adds	r5, r0, r3
 8002c4a:	405d      	eors	r5, r3
 8002c4c:	0fc4      	lsrs	r4, r0, #31
 8002c4e:	0028      	movs	r0, r5
 8002c50:	f000 f91a 	bl	8002e88 <__clzsi2>
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <__aeabi_i2d+0x5c>)
 8002c56:	1a1b      	subs	r3, r3, r0
 8002c58:	280a      	cmp	r0, #10
 8002c5a:	dc16      	bgt.n	8002c8a <__aeabi_i2d+0x4a>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	002e      	movs	r6, r5
 8002c60:	3215      	adds	r2, #21
 8002c62:	4096      	lsls	r6, r2
 8002c64:	220b      	movs	r2, #11
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	40d5      	lsrs	r5, r2
 8002c6a:	055b      	lsls	r3, r3, #21
 8002c6c:	032d      	lsls	r5, r5, #12
 8002c6e:	0b2d      	lsrs	r5, r5, #12
 8002c70:	0d5b      	lsrs	r3, r3, #21
 8002c72:	e003      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c74:	2400      	movs	r4, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	2500      	movs	r5, #0
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	07e4      	lsls	r4, r4, #31
 8002c82:	4323      	orrs	r3, r4
 8002c84:	0030      	movs	r0, r6
 8002c86:	0019      	movs	r1, r3
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	380b      	subs	r0, #11
 8002c8c:	4085      	lsls	r5, r0
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	032d      	lsls	r5, r5, #12
 8002c92:	2600      	movs	r6, #0
 8002c94:	0b2d      	lsrs	r5, r5, #12
 8002c96:	0d5b      	lsrs	r3, r3, #21
 8002c98:	e7f0      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	0000041e 	.word	0x0000041e

08002ca0 <__aeabi_ui2d>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	1e04      	subs	r4, r0, #0
 8002ca4:	d010      	beq.n	8002cc8 <__aeabi_ui2d+0x28>
 8002ca6:	f000 f8ef 	bl	8002e88 <__clzsi2>
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <__aeabi_ui2d+0x48>)
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	280a      	cmp	r0, #10
 8002cb0:	dc11      	bgt.n	8002cd6 <__aeabi_ui2d+0x36>
 8002cb2:	220b      	movs	r2, #11
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	1a12      	subs	r2, r2, r0
 8002cb8:	40d1      	lsrs	r1, r2
 8002cba:	3015      	adds	r0, #21
 8002cbc:	030a      	lsls	r2, r1, #12
 8002cbe:	055b      	lsls	r3, r3, #21
 8002cc0:	4084      	lsls	r4, r0
 8002cc2:	0b12      	lsrs	r2, r2, #12
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	e001      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	0022      	movs	r2, r4
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4082      	lsls	r2, r0
 8002cdc:	055b      	lsls	r3, r3, #21
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	0b12      	lsrs	r2, r2, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	e7f1      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002ce8:	0000041e 	.word	0x0000041e

08002cec <__aeabi_f2d>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0242      	lsls	r2, r0, #9
 8002cf0:	0043      	lsls	r3, r0, #1
 8002cf2:	0fc4      	lsrs	r4, r0, #31
 8002cf4:	20fe      	movs	r0, #254	; 0xfe
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	0a55      	lsrs	r5, r2, #9
 8002cfc:	4208      	tst	r0, r1
 8002cfe:	d00c      	beq.n	8002d1a <__aeabi_f2d+0x2e>
 8002d00:	21e0      	movs	r1, #224	; 0xe0
 8002d02:	0089      	lsls	r1, r1, #2
 8002d04:	468c      	mov	ip, r1
 8002d06:	076d      	lsls	r5, r5, #29
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	4463      	add	r3, ip
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0028      	movs	r0, r5
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <__aeabi_f2d+0x5c>
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	d01b      	beq.n	8002d5a <__aeabi_f2d+0x6e>
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f8b0 	bl	8002e88 <__clzsi2>
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	dc1c      	bgt.n	8002d66 <__aeabi_f2d+0x7a>
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	002a      	movs	r2, r5
 8002d30:	1a1b      	subs	r3, r3, r0
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	0003      	movs	r3, r0
 8002d36:	3315      	adds	r3, #21
 8002d38:	409d      	lsls	r5, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <__aeabi_f2d+0x88>)
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	1a1b      	subs	r3, r3, r0
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	0b12      	lsrs	r2, r2, #12
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	e7e1      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d009      	beq.n	8002d60 <__aeabi_f2d+0x74>
 8002d4c:	0b13      	lsrs	r3, r2, #12
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0312      	lsls	r2, r2, #12
 8002d52:	431a      	orrs	r2, r3
 8002d54:	076d      	lsls	r5, r5, #29
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d58:	e7d8      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e7d5      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d60:	2200      	movs	r2, #0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d64:	e7d2      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d66:	0003      	movs	r3, r0
 8002d68:	002a      	movs	r2, r5
 8002d6a:	3b0b      	subs	r3, #11
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	2500      	movs	r5, #0
 8002d70:	e7e3      	b.n	8002d3a <__aeabi_f2d+0x4e>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00000389 	.word	0x00000389
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_d2f>:
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d80:	004b      	lsls	r3, r1, #1
 8002d82:	030d      	lsls	r5, r1, #12
 8002d84:	0f40      	lsrs	r0, r0, #29
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	0fcc      	lsrs	r4, r1, #31
 8002d8a:	0a6d      	lsrs	r5, r5, #9
 8002d8c:	493a      	ldr	r1, [pc, #232]	; (8002e78 <__aeabi_d2f+0xfc>)
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	1c58      	adds	r0, r3, #1
 8002d92:	00d7      	lsls	r7, r2, #3
 8002d94:	4208      	tst	r0, r1
 8002d96:	d00a      	beq.n	8002dae <__aeabi_d2f+0x32>
 8002d98:	4938      	ldr	r1, [pc, #224]	; (8002e7c <__aeabi_d2f+0x100>)
 8002d9a:	1859      	adds	r1, r3, r1
 8002d9c:	29fe      	cmp	r1, #254	; 0xfe
 8002d9e:	dd16      	ble.n	8002dce <__aeabi_d2f+0x52>
 8002da0:	20ff      	movs	r0, #255	; 0xff
 8002da2:	2200      	movs	r2, #0
 8002da4:	05c0      	lsls	r0, r0, #23
 8002da6:	4310      	orrs	r0, r2
 8002da8:	07e4      	lsls	r4, r4, #31
 8002daa:	4320      	orrs	r0, r4
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <__aeabi_d2f+0x44>
 8002db2:	433d      	orrs	r5, r7
 8002db4:	d026      	beq.n	8002e04 <__aeabi_d2f+0x88>
 8002db6:	2205      	movs	r2, #5
 8002db8:	0192      	lsls	r2, r2, #6
 8002dba:	0a52      	lsrs	r2, r2, #9
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	e7f1      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dc0:	432f      	orrs	r7, r5
 8002dc2:	d0ed      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	03d2      	lsls	r2, r2, #15
 8002dc8:	20ff      	movs	r0, #255	; 0xff
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	e7ea      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	dd1b      	ble.n	8002e0a <__aeabi_d2f+0x8e>
 8002dd2:	0192      	lsls	r2, r2, #6
 8002dd4:	1e50      	subs	r0, r2, #1
 8002dd6:	4182      	sbcs	r2, r0
 8002dd8:	00ed      	lsls	r5, r5, #3
 8002dda:	0f7f      	lsrs	r7, r7, #29
 8002ddc:	432a      	orrs	r2, r5
 8002dde:	433a      	orrs	r2, r7
 8002de0:	0753      	lsls	r3, r2, #29
 8002de2:	d047      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002de4:	230f      	movs	r3, #15
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d000      	beq.n	8002dee <__aeabi_d2f+0x72>
 8002dec:	3204      	adds	r2, #4
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	04db      	lsls	r3, r3, #19
 8002df2:	4013      	ands	r3, r2
 8002df4:	d03e      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002df6:	1c48      	adds	r0, r1, #1
 8002df8:	29fe      	cmp	r1, #254	; 0xfe
 8002dfa:	d0d1      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	0a52      	lsrs	r2, r2, #9
 8002e00:	b2c0      	uxtb	r0, r0
 8002e02:	e7cf      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e04:	2000      	movs	r0, #0
 8002e06:	2200      	movs	r2, #0
 8002e08:	e7cc      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	3217      	adds	r2, #23
 8002e0e:	db2f      	blt.n	8002e70 <__aeabi_d2f+0xf4>
 8002e10:	2680      	movs	r6, #128	; 0x80
 8002e12:	0436      	lsls	r6, r6, #16
 8002e14:	432e      	orrs	r6, r5
 8002e16:	251e      	movs	r5, #30
 8002e18:	1a6d      	subs	r5, r5, r1
 8002e1a:	2d1f      	cmp	r5, #31
 8002e1c:	dd11      	ble.n	8002e42 <__aeabi_d2f+0xc6>
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4252      	negs	r2, r2
 8002e22:	1a52      	subs	r2, r2, r1
 8002e24:	0031      	movs	r1, r6
 8002e26:	40d1      	lsrs	r1, r2
 8002e28:	2d20      	cmp	r5, #32
 8002e2a:	d004      	beq.n	8002e36 <__aeabi_d2f+0xba>
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <__aeabi_d2f+0x104>)
 8002e2e:	4694      	mov	ip, r2
 8002e30:	4463      	add	r3, ip
 8002e32:	409e      	lsls	r6, r3
 8002e34:	4337      	orrs	r7, r6
 8002e36:	003a      	movs	r2, r7
 8002e38:	1e53      	subs	r3, r2, #1
 8002e3a:	419a      	sbcs	r2, r3
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	2100      	movs	r1, #0
 8002e40:	e7ce      	b.n	8002de0 <__aeabi_d2f+0x64>
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <__aeabi_d2f+0x108>)
 8002e44:	0038      	movs	r0, r7
 8002e46:	4694      	mov	ip, r2
 8002e48:	4463      	add	r3, ip
 8002e4a:	4098      	lsls	r0, r3
 8002e4c:	003a      	movs	r2, r7
 8002e4e:	1e41      	subs	r1, r0, #1
 8002e50:	4188      	sbcs	r0, r1
 8002e52:	409e      	lsls	r6, r3
 8002e54:	40ea      	lsrs	r2, r5
 8002e56:	4330      	orrs	r0, r6
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0753      	lsls	r3, r2, #29
 8002e5e:	d1c1      	bne.n	8002de4 <__aeabi_d2f+0x68>
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0013      	movs	r3, r2
 8002e64:	04c9      	lsls	r1, r1, #19
 8002e66:	2001      	movs	r0, #1
 8002e68:	400b      	ands	r3, r1
 8002e6a:	420a      	tst	r2, r1
 8002e6c:	d1c6      	bne.n	8002dfc <__aeabi_d2f+0x80>
 8002e6e:	e7a3      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e70:	2300      	movs	r3, #0
 8002e72:	e7a0      	b.n	8002db6 <__aeabi_d2f+0x3a>
 8002e74:	000b      	movs	r3, r1
 8002e76:	e79f      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e78:	000007fe 	.word	0x000007fe
 8002e7c:	fffffc80 	.word	0xfffffc80
 8002e80:	fffffca2 	.word	0xfffffca2
 8002e84:	fffffc82 	.word	0xfffffc82

08002e88 <__clzsi2>:
 8002e88:	211c      	movs	r1, #28
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0xe>
 8002e92:	0c00      	lsrs	r0, r0, #16
 8002e94:	3910      	subs	r1, #16
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d301      	bcc.n	8002ea0 <__clzsi2+0x18>
 8002e9c:	0a00      	lsrs	r0, r0, #8
 8002e9e:	3908      	subs	r1, #8
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0x22>
 8002ea6:	0900      	lsrs	r0, r0, #4
 8002ea8:	3904      	subs	r1, #4
 8002eaa:	a202      	add	r2, pc, #8	; (adr r2, 8002eb4 <__clzsi2+0x2c>)
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	1840      	adds	r0, r0, r1
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	02020304 	.word	0x02020304
 8002eb8:	01010101 	.word	0x01010101
	...

08002ec4 <__clzdi2>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d103      	bne.n	8002ed2 <__clzdi2+0xe>
 8002eca:	f7ff ffdd 	bl	8002e88 <__clzsi2>
 8002ece:	3020      	adds	r0, #32
 8002ed0:	e002      	b.n	8002ed8 <__clzdi2+0x14>
 8002ed2:	0008      	movs	r0, r1
 8002ed4:	f7ff ffd8 	bl	8002e88 <__clzsi2>
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)

08002edc <AHT20_Master_Transmit>:
 */

#include "AHT20.h"

HAL_StatusTypeDef AHT20_Master_Transmit(uint8_t *data, uint16_t size)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	1cbb      	adds	r3, r7, #2
 8002ee8:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, data, size, HAL_MAX_DELAY);
 8002eea:	250f      	movs	r5, #15
 8002eec:	197c      	adds	r4, r7, r5
 8002eee:	1cbb      	adds	r3, r7, #2
 8002ef0:	8819      	ldrh	r1, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <AHT20_Master_Transmit+0x38>)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	425b      	negs	r3, r3
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	000b      	movs	r3, r1
 8002efe:	2170      	movs	r1, #112	; 0x70
 8002f00:	f001 fb20 	bl	8004544 <HAL_I2C_Master_Transmit>
 8002f04:	0003      	movs	r3, r0
 8002f06:	7023      	strb	r3, [r4, #0]

	return status;
 8002f08:	197b      	adds	r3, r7, r5
 8002f0a:	781b      	ldrb	r3, [r3, #0]
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}
 8002f14:	200001f8 	.word	0x200001f8

08002f18 <AHT20_Master_Receive>:

HAL_StatusTypeDef AHT20_Master_Receive(uint8_t *data, uint16_t size)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	000a      	movs	r2, r1
 8002f22:	1cbb      	adds	r3, r7, #2
 8002f24:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c1, AHT20_READ_ADDR, data, size, HAL_MAX_DELAY);
 8002f26:	250f      	movs	r5, #15
 8002f28:	197c      	adds	r4, r7, r5
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	8819      	ldrh	r1, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4807      	ldr	r0, [pc, #28]	; (8002f50 <AHT20_Master_Receive+0x38>)
 8002f32:	2301      	movs	r3, #1
 8002f34:	425b      	negs	r3, r3
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	000b      	movs	r3, r1
 8002f3a:	2171      	movs	r1, #113	; 0x71
 8002f3c:	f001 fc0a 	bl	8004754 <HAL_I2C_Master_Receive>
 8002f40:	0003      	movs	r3, r0
 8002f42:	7023      	strb	r3, [r4, #0]

	return status;
 8002f44:	197b      	adds	r3, r7, r5
 8002f46:	781b      	ldrb	r3, [r3, #0]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f50:	200001f8 	.word	0x200001f8

08002f54 <AHT20_Init>:

	return read_value;
}

void AHT20_Init()
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
	uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <AHT20_Init+0x70>)
 8002f5e:	8811      	ldrh	r1, [r2, #0]
 8002f60:	8019      	strh	r1, [r3, #0]
 8002f62:	7892      	ldrb	r2, [r2, #2]
 8002f64:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(init_cmd, sizeof(init_cmd)) != HAL_OK)
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	2103      	movs	r1, #3
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff ffb6 	bl	8002edc <AHT20_Master_Transmit>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d004      	beq.n	8002f7e <AHT20_Init+0x2a>
	{
		printf("AHT20 initialisation error\n");
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <AHT20_Init+0x74>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f006 fcc6 	bl	8009908 <puts>
		else
		{
			printf("AHT20 not calibrated\n");
		}
	}
}
 8002f7c:	e01d      	b.n	8002fba <AHT20_Init+0x66>
		printf("AHT20 initialised\n");
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <AHT20_Init+0x78>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f006 fcc1 	bl	8009908 <puts>
		uint8_t value = 0x00;
 8002f86:	1cfb      	adds	r3, r7, #3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f000 ff0b 	bl	8003da8 <HAL_Delay>
		AHT20_Master_Receive(&value, sizeof(value));
 8002f92:	1cfb      	adds	r3, r7, #3
 8002f94:	2101      	movs	r1, #1
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ffbe 	bl	8002f18 <AHT20_Master_Receive>
		if ((value & 0x08) != 0x00) // check calibration bit
 8002f9c:	1cfb      	adds	r3, r7, #3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <AHT20_Init+0x5e>
			printf("AHT20 calibrated\n");
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <AHT20_Init+0x7c>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f006 fcac 	bl	8009908 <puts>
}
 8002fb0:	e003      	b.n	8002fba <AHT20_Init+0x66>
			printf("AHT20 not calibrated\n");
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <AHT20_Init+0x80>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f006 fca7 	bl	8009908 <puts>
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	0800c6bc 	.word	0x0800c6bc
 8002fc8:	0800c660 	.word	0x0800c660
 8002fcc:	0800c67c 	.word	0x0800c67c
 8002fd0:	0800c690 	.word	0x0800c690
 8002fd4:	0800c6a4 	.word	0x0800c6a4

08002fd8 <AHT20_Read>:

void AHT20_Read(volatile float *Temp, volatile float *Hum)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	uint8_t trig_measure_cmd[] = {0xAC, 0x33, 0x00};
 8002fe2:	2010      	movs	r0, #16
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	4a35      	ldr	r2, [pc, #212]	; (80030bc <AHT20_Read+0xe4>)
 8002fe8:	8811      	ldrh	r1, [r2, #0]
 8002fea:	8019      	strh	r1, [r3, #0]
 8002fec:	7892      	ldrb	r2, [r2, #2]
 8002fee:	709a      	strb	r2, [r3, #2]
	if (AHT20_Master_Transmit(trig_measure_cmd, sizeof(trig_measure_cmd)) != HAL_OK)
 8002ff0:	183b      	adds	r3, r7, r0
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff71 	bl	8002edc <AHT20_Master_Transmit>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d004      	beq.n	8003008 <AHT20_Read+0x30>
	{
		printf("AHT20 trigger measurement error\n");
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <AHT20_Read+0xe8>)
 8003000:	0018      	movs	r0, r3
 8003002:	f006 fc81 	bl	8009908 <puts>

			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
			*Temp = data * 200.0f / (1 << 20) - 50;
		}
	}
}
 8003006:	e054      	b.n	80030b2 <AHT20_Read+0xda>
		HAL_Delay(80); // wait for the measurements to be completed
 8003008:	2050      	movs	r0, #80	; 0x50
 800300a:	f000 fecd 	bl	8003da8 <HAL_Delay>
		AHT20_Master_Receive(read_buffer, sizeof(read_buffer));
 800300e:	2408      	movs	r4, #8
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2106      	movs	r1, #6
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff ff7f 	bl	8002f18 <AHT20_Master_Receive>
		if(((read_buffer[0]) & 0x80) == 0x00)
 800301a:	193b      	adds	r3, r7, r4
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b25b      	sxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	db46      	blt.n	80030b2 <AHT20_Read+0xda>
			uint32_t data = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
			data = (((uint32_t)read_buffer[3] >> 4) + ((uint32_t)read_buffer[2] << 4) + ((uint32_t)read_buffer[1] << 12));
 8003028:	193b      	adds	r3, r7, r4
 800302a:	78db      	ldrb	r3, [r3, #3]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	b2db      	uxtb	r3, r3
 8003030:	001a      	movs	r2, r3
 8003032:	193b      	adds	r3, r7, r4
 8003034:	789b      	ldrb	r3, [r3, #2]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	18d2      	adds	r2, r2, r3
 800303a:	193b      	adds	r3, r7, r4
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	031b      	lsls	r3, r3, #12
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
			*Hum = data * 100.0f / (1 << 20);
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7fd ffc1 	bl	8000fcc <__aeabi_ui2f>
 800304a:	1c03      	adds	r3, r0, #0
 800304c:	491d      	ldr	r1, [pc, #116]	; (80030c4 <AHT20_Read+0xec>)
 800304e:	1c18      	adds	r0, r3, #0
 8003050:	f7fd fcce 	bl	80009f0 <__aeabi_fmul>
 8003054:	1c03      	adds	r3, r0, #0
 8003056:	2193      	movs	r1, #147	; 0x93
 8003058:	05c9      	lsls	r1, r1, #23
 800305a:	1c18      	adds	r0, r3, #0
 800305c:	f7fd fbae 	bl	80007bc <__aeabi_fdiv>
 8003060:	1c03      	adds	r3, r0, #0
 8003062:	1c1a      	adds	r2, r3, #0
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	601a      	str	r2, [r3, #0]
			data = (((uint32_t)read_buffer[3] & 0x0F) << 16) + ((uint32_t)read_buffer[4] << 8) + ((uint32_t)read_buffer[5]);
 8003068:	193b      	adds	r3, r7, r4
 800306a:	78db      	ldrb	r3, [r3, #3]
 800306c:	041a      	lsls	r2, r3, #16
 800306e:	23f0      	movs	r3, #240	; 0xf0
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	401a      	ands	r2, r3
 8003074:	193b      	adds	r3, r7, r4
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	193a      	adds	r2, r7, r4
 800307e:	7952      	ldrb	r2, [r2, #5]
 8003080:	189b      	adds	r3, r3, r2
 8003082:	617b      	str	r3, [r7, #20]
			*Temp = data * 200.0f / (1 << 20) - 50;
 8003084:	6978      	ldr	r0, [r7, #20]
 8003086:	f7fd ffa1 	bl	8000fcc <__aeabi_ui2f>
 800308a:	1c03      	adds	r3, r0, #0
 800308c:	490e      	ldr	r1, [pc, #56]	; (80030c8 <AHT20_Read+0xf0>)
 800308e:	1c18      	adds	r0, r3, #0
 8003090:	f7fd fcae 	bl	80009f0 <__aeabi_fmul>
 8003094:	1c03      	adds	r3, r0, #0
 8003096:	2193      	movs	r1, #147	; 0x93
 8003098:	05c9      	lsls	r1, r1, #23
 800309a:	1c18      	adds	r0, r3, #0
 800309c:	f7fd fb8e 	bl	80007bc <__aeabi_fdiv>
 80030a0:	1c03      	adds	r3, r0, #0
 80030a2:	490a      	ldr	r1, [pc, #40]	; (80030cc <AHT20_Read+0xf4>)
 80030a4:	1c18      	adds	r0, r3, #0
 80030a6:	f7fd fdf1 	bl	8000c8c <__aeabi_fsub>
 80030aa:	1c03      	adds	r3, r0, #0
 80030ac:	1c1a      	adds	r2, r3, #0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b007      	add	sp, #28
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	0800c6e0 	.word	0x0800c6e0
 80030c0:	0800c6c0 	.word	0x0800c6c0
 80030c4:	42c80000 	.word	0x42c80000
 80030c8:	43480000 	.word	0x43480000
 80030cc:	42480000 	.word	0x42480000

080030d0 <NEO6_ReceiveUartChar>:
  /* done */
  return token;
}

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	2382      	movs	r3, #130	; 0x82
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <NEO6_ReceiveUartChar+0xc0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	d503      	bpl.n	80030f0 <NEO6_ReceiveUartChar+0x20>
 80030e8:	3b01      	subs	r3, #1
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <NEO6_ReceiveUartChar+0xc4>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	3301      	adds	r3, #1
 80030f0:	001a      	movs	r2, r3
 80030f2:	200f      	movs	r0, #15
 80030f4:	183b      	adds	r3, r7, r0
 80030f6:	701a      	strb	r2, [r3, #0]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	2306      	movs	r3, #6
 80030fc:	33ff      	adds	r3, #255	; 0xff
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	183a      	adds	r2, r7, r0
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d038      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b0d      	cmp	r3, #13
 8003110:	d119      	bne.n	8003146 <NEO6_ReceiveUartChar+0x76>
		{
			GpsStateHandler->UartBufferLines++;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	2383      	movs	r3, #131	; 0x83
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	3301      	adds	r3, #1
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	2383      	movs	r3, #131	; 0x83
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBufferHead = TempHead;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	1839      	adds	r1, r7, r0
 800312a:	2382      	movs	r3, #130	; 0x82
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	7809      	ldrb	r1, [r1, #0]
 8003130:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003132:	183b      	adds	r3, r7, r0
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	b2d1      	uxtb	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	18d3      	adds	r3, r2, r3
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	711a      	strb	r2, [r3, #4]
 8003144:	e019      	b.n	800317a <NEO6_ReceiveUartChar+0xaa>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d00f      	beq.n	800317a <NEO6_ReceiveUartChar+0xaa>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	200f      	movs	r0, #15
 800315e:	1839      	adds	r1, r7, r0
 8003160:	2382      	movs	r3, #130	; 0x82
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	7809      	ldrb	r1, [r1, #0]
 8003166:	54d1      	strb	r1, [r2, r3]
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8003168:	183b      	adds	r3, r7, r0
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	b2d1      	uxtb	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	1c0a      	adds	r2, r1, #0
 8003178:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <NEO6_ReceiveUartChar+0xc8>)
 8003180:	2201      	movs	r2, #1
 8003182:	0018      	movs	r0, r3
 8003184:	f003 fa7a 	bl	800667c <HAL_UART_Receive_IT>
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b004      	add	sp, #16
 800318e:	bd80      	pop	{r7, pc}
 8003190:	800000ff 	.word	0x800000ff
 8003194:	ffffff00 	.word	0xffffff00
 8003198:	200001f4 	.word	0x200001f4

0800319c <NEO6_Init>:
		NEO6_ParseLine(GpsStateHandler);
	}
}

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	2382      	movs	r3, #130	; 0x82
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferTail = 0;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	2306      	movs	r3, #6
 80031ba:	33ff      	adds	r3, #255	; 0xff
 80031bc:	2100      	movs	r1, #0
 80031be:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->UartBufferLines = 0;
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	2383      	movs	r3, #131	; 0x83
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2100      	movs	r1, #0
 80031c8:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Hour = 0;
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	2388      	movs	r3, #136	; 0x88
 80031ce:	33ff      	adds	r3, #255	; 0xff
 80031d0:	2100      	movs	r1, #0
 80031d2:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Minute = 0;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	23c4      	movs	r3, #196	; 0xc4
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2100      	movs	r1, #0
 80031dc:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Second = 0;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	238a      	movs	r3, #138	; 0x8a
 80031e2:	33ff      	adds	r3, #255	; 0xff
 80031e4:	2100      	movs	r1, #0
 80031e6:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Day = 0;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	23c5      	movs	r3, #197	; 0xc5
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2100      	movs	r1, #0
 80031f0:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Month = 0;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	238c      	movs	r3, #140	; 0x8c
 80031f6:	33ff      	adds	r3, #255	; 0xff
 80031f8:	2100      	movs	r1, #0
 80031fa:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Year = 0;
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	23c6      	movs	r3, #198	; 0xc6
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2100      	movs	r1, #0
 8003204:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->Latitude = 0;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	23c8      	movs	r3, #200	; 0xc8
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	18d1      	adds	r1, r2, r3
 800320e:	2200      	movs	r2, #0
 8003210:	2300      	movs	r3, #0
 8003212:	600a      	str	r2, [r1, #0]
 8003214:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LatitudeDirection = '0';
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	23cc      	movs	r3, #204	; 0xcc
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2130      	movs	r1, #48	; 0x30
 800321e:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Longitude = 0;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	23d0      	movs	r3, #208	; 0xd0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	18d1      	adds	r1, r2, r3
 8003228:	2200      	movs	r2, #0
 800322a:	2300      	movs	r3, #0
 800322c:	600a      	str	r2, [r1, #0]
 800322e:	604b      	str	r3, [r1, #4]
	GpsStateHandler->LongitudeDirection = '0';
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	23d4      	movs	r3, #212	; 0xd4
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2130      	movs	r1, #48	; 0x30
 8003238:	54d1      	strb	r1, [r2, r3]

	GpsStateHandler->SpeedKilometers = 0;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	23e0      	movs	r3, #224	; 0xe0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	18d1      	adds	r1, r2, r3
 8003242:	2200      	movs	r2, #0
 8003244:	2300      	movs	r3, #0
 8003246:	600a      	str	r2, [r1, #0]
 8003248:	604b      	str	r3, [r1, #4]
	GpsStateHandler->SpeedKnots = 0;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	23dc      	movs	r3, #220	; 0xdc
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	18d1      	adds	r1, r2, r3
 8003252:	2200      	movs	r2, #0
 8003254:	2300      	movs	r3, #0
 8003256:	600a      	str	r2, [r1, #0]
 8003258:	604b      	str	r3, [r1, #4]

	GpsStateHandler->SatelitesNumber = 0;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	23e4      	movs	r3, #228	; 0xe4
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2100      	movs	r1, #0
 8003262:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Quality = 0;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	23ca      	movs	r3, #202	; 0xca
 8003268:	33ff      	adds	r3, #255	; 0xff
 800326a:	2100      	movs	r1, #0
 800326c:	54d1      	strb	r1, [r2, r3]
	GpsStateHandler->Dop = 0;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	23e8      	movs	r3, #232	; 0xe8
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	18d1      	adds	r1, r2, r3
 8003276:	2200      	movs	r2, #0
 8003278:	2300      	movs	r3, #0
 800327a:	600a      	str	r2, [r1, #0]
 800327c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Hdop = 0;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	23ec      	movs	r3, #236	; 0xec
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	18d1      	adds	r1, r2, r3
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	600a      	str	r2, [r1, #0]
 800328c:	604b      	str	r3, [r1, #4]
	GpsStateHandler->Vdop = 0;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	23f0      	movs	r3, #240	; 0xf0
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	2200      	movs	r2, #0
 8003298:	2300      	movs	r3, #0
 800329a:	600a      	str	r2, [r1, #0]
 800329c:	604b      	str	r3, [r1, #4]

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4904      	ldr	r1, [pc, #16]	; (80032b4 <NEO6_Init+0x118>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f003 f9e8 	bl	800667c <HAL_UART_Receive_IT>
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200001f4 	.word	0x200001f4

080032b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b08b      	sub	sp, #44	; 0x2c
 80032bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032be:	2414      	movs	r4, #20
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	0018      	movs	r0, r3
 80032c4:	2314      	movs	r3, #20
 80032c6:	001a      	movs	r2, r3
 80032c8:	2100      	movs	r1, #0
 80032ca:	f006 fc39 	bl	8009b40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032d4:	2104      	movs	r1, #4
 80032d6:	430a      	orrs	r2, r1
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	2204      	movs	r2, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <MX_GPIO_Init+0xd8>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	4013      	ands	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <MX_GPIO_Init+0xd8>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <MX_GPIO_Init+0xd8>)
 800331c:	2102      	movs	r1, #2
 800331e:	430a      	orrs	r2, r1
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <MX_GPIO_Init+0xd8>)
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	2202      	movs	r2, #2
 8003328:	4013      	ands	r3, r2
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800332e:	23a0      	movs	r3, #160	; 0xa0
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	2200      	movs	r2, #0
 8003334:	2120      	movs	r1, #32
 8003336:	0018      	movs	r0, r3
 8003338:	f001 f836 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800333c:	193b      	adds	r3, r7, r4
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	0192      	lsls	r2, r2, #6
 8003342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003344:	193b      	adds	r3, r7, r4
 8003346:	2284      	movs	r2, #132	; 0x84
 8003348:	0392      	lsls	r2, r2, #14
 800334a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	193b      	adds	r3, r7, r4
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003352:	193b      	adds	r3, r7, r4
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <MX_GPIO_Init+0xdc>)
 8003356:	0019      	movs	r1, r3
 8003358:	0010      	movs	r0, r2
 800335a:	f000 feaf 	bl	80040bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800335e:	0021      	movs	r1, r4
 8003360:	187b      	adds	r3, r7, r1
 8003362:	2220      	movs	r2, #32
 8003364:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2201      	movs	r2, #1
 800336a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003378:	187a      	adds	r2, r7, r1
 800337a:	23a0      	movs	r3, #160	; 0xa0
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f000 fe9b 	bl	80040bc <HAL_GPIO_Init>

}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b00b      	add	sp, #44	; 0x2c
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	40021000 	.word	0x40021000
 8003394:	50000800 	.word	0x50000800

08003398 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <MX_I2C1_Init+0x74>)
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <MX_I2C1_Init+0x78>)
 80033a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <MX_I2C1_Init+0x74>)
 80033a4:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <MX_I2C1_Init+0x7c>)
 80033a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <MX_I2C1_Init+0x74>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <MX_I2C1_Init+0x74>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <MX_I2C1_Init+0x74>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033ba:	4b14      	ldr	r3, [pc, #80]	; (800340c <MX_I2C1_Init+0x74>)
 80033bc:	2200      	movs	r2, #0
 80033be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <MX_I2C1_Init+0x74>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <MX_I2C1_Init+0x74>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <MX_I2C1_Init+0x74>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <MX_I2C1_Init+0x74>)
 80033d4:	0018      	movs	r0, r3
 80033d6:	f001 f81f 	bl	8004418 <HAL_I2C_Init>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d001      	beq.n	80033e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033de:	f000 f963 	bl	80036a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <MX_I2C1_Init+0x74>)
 80033e4:	2100      	movs	r1, #0
 80033e6:	0018      	movs	r0, r3
 80033e8:	f001 fd72 	bl	8004ed0 <HAL_I2CEx_ConfigAnalogFilter>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d001      	beq.n	80033f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033f0:	f000 f95a 	bl	80036a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <MX_I2C1_Init+0x74>)
 80033f6:	2100      	movs	r1, #0
 80033f8:	0018      	movs	r0, r3
 80033fa:	f001 fdb5 	bl	8004f68 <HAL_I2CEx_ConfigDigitalFilter>
 80033fe:	1e03      	subs	r3, r0, #0
 8003400:	d001      	beq.n	8003406 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003402:	f000 f951 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	200001f8 	.word	0x200001f8
 8003410:	40005400 	.word	0x40005400
 8003414:	00707cbb 	.word	0x00707cbb

08003418 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	240c      	movs	r4, #12
 8003422:	193b      	adds	r3, r7, r4
 8003424:	0018      	movs	r0, r3
 8003426:	2314      	movs	r3, #20
 8003428:	001a      	movs	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f006 fb88 	bl	8009b40 <memset>
  if(i2cHandle->Instance==I2C1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_I2C_MspInit+0x7c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d128      	bne.n	800348c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_I2C_MspInit+0x80>)
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <HAL_I2C_MspInit+0x80>)
 8003440:	2102      	movs	r1, #2
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_I2C_MspInit+0x80>)
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003452:	0021      	movs	r1, r4
 8003454:	187b      	adds	r3, r7, r1
 8003456:	22c0      	movs	r2, #192	; 0xc0
 8003458:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	2212      	movs	r2, #18
 800345e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	187b      	adds	r3, r7, r1
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	187b      	adds	r3, r7, r1
 8003468:	2203      	movs	r2, #3
 800346a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800346c:	187b      	adds	r3, r7, r1
 800346e:	2201      	movs	r2, #1
 8003470:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003472:	187b      	adds	r3, r7, r1
 8003474:	4a09      	ldr	r2, [pc, #36]	; (800349c <HAL_I2C_MspInit+0x84>)
 8003476:	0019      	movs	r1, r3
 8003478:	0010      	movs	r0, r2
 800347a:	f000 fe1f 	bl	80040bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_I2C_MspInit+0x80>)
 8003480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_I2C_MspInit+0x80>)
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	0389      	lsls	r1, r1, #14
 8003488:	430a      	orrs	r2, r1
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b009      	add	sp, #36	; 0x24
 8003492:	bd90      	pop	{r4, r7, pc}
 8003494:	40005400 	.word	0x40005400
 8003498:	40021000 	.word	0x40021000
 800349c:	50000400 	.word	0x50000400

080034a0 <__io_putchar>:
uint8_t MessageLength;
volatile float Temp = 0.0f;
volatile float Hum = 0.0f;

int __io_putchar(int ch) // to pc
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b0a      	cmp	r3, #10
 80034ac:	d102      	bne.n	80034b4 <__io_putchar+0x14>
    __io_putchar('\r');
 80034ae:	200d      	movs	r0, #13
 80034b0:	f7ff fff6 	bl	80034a0 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80034b4:	2301      	movs	r3, #1
 80034b6:	425b      	negs	r3, r3
 80034b8:	1d39      	adds	r1, r7, #4
 80034ba:	4804      	ldr	r0, [pc, #16]	; (80034cc <__io_putchar+0x2c>)
 80034bc:	2201      	movs	r2, #1
 80034be:	f003 f83d 	bl	800653c <HAL_UART_Transmit>

  return 1;
 80034c2:	2301      	movs	r3, #1
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000564 	.word	0x20000564

080034d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if(huart == GpsState.neo6_huart)
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_UART_RxCpltCallback+0x24>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d103      	bne.n	80034ea <HAL_UART_RxCpltCallback+0x1a>
  {
    NEO6_ReceiveUartChar(&GpsState);
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_UART_RxCpltCallback+0x24>)
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff fdf3 	bl	80030d0 <NEO6_ReceiveUartChar>
  }
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	20000250 	.word	0x20000250

080034f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003504:	429a      	cmp	r2, r3
 8003506:	d121      	bne.n	800354c <HAL_TIM_PeriodElapsedCallback+0x54>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003508:	23a0      	movs	r3, #160	; 0xa0
 800350a:	05db      	lsls	r3, r3, #23
 800350c:	2120      	movs	r1, #32
 800350e:	0018      	movs	r0, r3
 8003510:	f000 ff67 	bl	80043e2 <HAL_GPIO_TogglePin>
    AHT20_Read(&Temp, &Hum); // reads AHT20 measurements every second
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003518:	0011      	movs	r1, r2
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff fd5c 	bl	8002fd8 <AHT20_Read>
    printf("Temperature = %.1fC\n Hum = %.1f\n", Temp, Hum);
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	1c18      	adds	r0, r3, #0
 8003526:	f7ff fbe1 	bl	8002cec <__aeabi_f2d>
 800352a:	0004      	movs	r4, r0
 800352c:	000d      	movs	r5, r1
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	1c18      	adds	r0, r3, #0
 8003534:	f7ff fbda 	bl	8002cec <__aeabi_f2d>
 8003538:	0002      	movs	r2, r0
 800353a:	000b      	movs	r3, r1
 800353c:	4908      	ldr	r1, [pc, #32]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800353e:	9200      	str	r2, [sp, #0]
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	0022      	movs	r2, r4
 8003544:	002b      	movs	r3, r5
 8003546:	0008      	movs	r0, r1
 8003548:	f006 f978 	bl	800983c <iprintf>
  }
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	2000049c 	.word	0x2000049c
 8003558:	2000043c 	.word	0x2000043c
 800355c:	20000438 	.word	0x20000438
 8003560:	0800c6e4 	.word	0x0800c6e4

08003564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800356a:	f000 fbad 	bl	8003cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800356e:	f000 f823 	bl	80035b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003572:	f7ff fea1 	bl	80032b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003576:	f7ff ff0f 	bl	8003398 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800357a:	f000 fa9d 	bl	8003ab8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800357e:	f000 facb 	bl	8003b18 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003582:	f000 f897 	bl	80036b4 <MX_SPI1_Init>
  MX_TIM6_Init();
 8003586:	f000 fa39 	bl	80039fc <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  AHT20_Init();
 800358a:	f7ff fce3 	bl	8002f54 <AHT20_Init>
  NEO6_Init(&GpsState, &huart1);
 800358e:	4a07      	ldr	r2, [pc, #28]	; (80035ac <main+0x48>)
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <main+0x4c>)
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff fe01 	bl	800319c <NEO6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <main+0x50>)
 800359c:	0018      	movs	r0, r3
 800359e:	f002 fd79 	bl	8006094 <HAL_TIM_Base_Start_IT>

  uint32_t Timer = HAL_GetTick();
 80035a2:	f000 fbf7 	bl	8003d94 <HAL_GetTick>
 80035a6:	0003      	movs	r3, r0
 80035a8:	607b      	str	r3, [r7, #4]

  while (1)
 80035aa:	e7fe      	b.n	80035aa <main+0x46>
 80035ac:	200004dc 	.word	0x200004dc
 80035b0:	20000250 	.word	0x20000250
 80035b4:	2000049c 	.word	0x2000049c

080035b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b09d      	sub	sp, #116	; 0x74
 80035bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035be:	2438      	movs	r4, #56	; 0x38
 80035c0:	193b      	adds	r3, r7, r4
 80035c2:	0018      	movs	r0, r3
 80035c4:	2338      	movs	r3, #56	; 0x38
 80035c6:	001a      	movs	r2, r3
 80035c8:	2100      	movs	r1, #0
 80035ca:	f006 fab9 	bl	8009b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035ce:	2324      	movs	r3, #36	; 0x24
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	0018      	movs	r0, r3
 80035d4:	2314      	movs	r3, #20
 80035d6:	001a      	movs	r2, r3
 80035d8:	2100      	movs	r1, #0
 80035da:	f006 fab1 	bl	8009b40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035de:	003b      	movs	r3, r7
 80035e0:	0018      	movs	r0, r3
 80035e2:	2324      	movs	r3, #36	; 0x24
 80035e4:	001a      	movs	r2, r3
 80035e6:	2100      	movs	r1, #0
 80035e8:	f006 faaa 	bl	8009b40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ec:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <SystemClock_Config+0xe8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <SystemClock_Config+0xec>)
 80035f2:	401a      	ands	r2, r3
 80035f4:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <SystemClock_Config+0xe8>)
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	0109      	lsls	r1, r1, #4
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035fe:	0021      	movs	r1, r4
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	22a0      	movs	r2, #160	; 0xa0
 800360a:	02d2      	lsls	r2, r2, #11
 800360c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2202      	movs	r2, #2
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003614:	187b      	adds	r3, r7, r1
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	0252      	lsls	r2, r2, #9
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 800361c:	187b      	adds	r3, r7, r1
 800361e:	22c0      	movs	r2, #192	; 0xc0
 8003620:	0312      	lsls	r2, r2, #12
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003624:	187b      	adds	r3, r7, r1
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	03d2      	lsls	r2, r2, #15
 800362a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800362c:	187b      	adds	r3, r7, r1
 800362e:	0018      	movs	r0, r3
 8003630:	f001 fce6 	bl	8005000 <HAL_RCC_OscConfig>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d001      	beq.n	800363c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003638:	f000 f836 	bl	80036a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800363c:	2124      	movs	r1, #36	; 0x24
 800363e:	187b      	adds	r3, r7, r1
 8003640:	220f      	movs	r2, #15
 8003642:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2203      	movs	r2, #3
 8003648:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800365c:	187b      	adds	r3, r7, r1
 800365e:	2101      	movs	r1, #1
 8003660:	0018      	movs	r0, r3
 8003662:	f002 f891 	bl	8005788 <HAL_RCC_ClockConfig>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800366a:	f000 f81d 	bl	80036a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800366e:	003b      	movs	r3, r7
 8003670:	220b      	movs	r2, #11
 8003672:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003674:	003b      	movs	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800367a:	003b      	movs	r3, r7
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003680:	003b      	movs	r3, r7
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003686:	003b      	movs	r3, r7
 8003688:	0018      	movs	r0, r3
 800368a:	f002 faa1 	bl	8005bd0 <HAL_RCCEx_PeriphCLKConfig>
 800368e:	1e03      	subs	r3, r0, #0
 8003690:	d001      	beq.n	8003696 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8003692:	f000 f809 	bl	80036a8 <Error_Handler>
  }
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b01d      	add	sp, #116	; 0x74
 800369c:	bd90      	pop	{r4, r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	40007000 	.word	0x40007000
 80036a4:	ffffe7ff 	.word	0xffffe7ff

080036a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <Error_Handler+0x8>
	...

080036b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <MX_SPI1_Init+0x64>)
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <MX_SPI1_Init+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <MX_SPI1_Init+0x64>)
 80036c0:	2282      	movs	r2, #130	; 0x82
 80036c2:	0052      	lsls	r2, r2, #1
 80036c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036c6:	4b14      	ldr	r3, [pc, #80]	; (8003718 <MX_SPI1_Init+0x64>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <MX_SPI1_Init+0x64>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <MX_SPI1_Init+0x64>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <MX_SPI1_Init+0x64>)
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <MX_SPI1_Init+0x64>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <MX_SPI1_Init+0x64>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <MX_SPI1_Init+0x64>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <MX_SPI1_Init+0x64>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <MX_SPI1_Init+0x64>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <MX_SPI1_Init+0x64>)
 80036fe:	2207      	movs	r2, #7
 8003700:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <MX_SPI1_Init+0x64>)
 8003704:	0018      	movs	r0, r3
 8003706:	f002 fbf1 	bl	8005eec <HAL_SPI_Init>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 800370e:	f7ff ffcb 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000440 	.word	0x20000440
 800371c:	40013000 	.word	0x40013000

08003720 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b08b      	sub	sp, #44	; 0x2c
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	2414      	movs	r4, #20
 800372a:	193b      	adds	r3, r7, r4
 800372c:	0018      	movs	r0, r3
 800372e:	2314      	movs	r3, #20
 8003730:	001a      	movs	r2, r3
 8003732:	2100      	movs	r1, #0
 8003734:	f006 fa04 	bl	8009b40 <memset>
  if(spiHandle->Instance==SPI1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a28      	ldr	r2, [pc, #160]	; (80037e0 <HAL_SPI_MspInit+0xc0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d14a      	bne.n	80037d8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003742:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 8003744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	0149      	lsls	r1, r1, #5
 800374c:	430a      	orrs	r2, r1
 800374e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 8003756:	2101      	movs	r1, #1
 8003758:	430a      	orrs	r2, r1
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	2201      	movs	r2, #1
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 800376e:	2102      	movs	r1, #2
 8003770:	430a      	orrs	r2, r1
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_SPI_MspInit+0xc4>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	2202      	movs	r2, #2
 800377a:	4013      	ands	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8003780:	193b      	adds	r3, r7, r4
 8003782:	22d0      	movs	r2, #208	; 0xd0
 8003784:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	193b      	adds	r3, r7, r4
 8003788:	2202      	movs	r2, #2
 800378a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	193b      	adds	r3, r7, r4
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003792:	193b      	adds	r3, r7, r4
 8003794:	2203      	movs	r2, #3
 8003796:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003798:	193b      	adds	r3, r7, r4
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379e:	193a      	adds	r2, r7, r4
 80037a0:	23a0      	movs	r3, #160	; 0xa0
 80037a2:	05db      	lsls	r3, r3, #23
 80037a4:	0011      	movs	r1, r2
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 fc88 	bl	80040bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037ac:	0021      	movs	r1, r4
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2208      	movs	r2, #8
 80037b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2202      	movs	r2, #2
 80037b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2203      	movs	r2, #3
 80037c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	4a06      	ldr	r2, [pc, #24]	; (80037e8 <HAL_SPI_MspInit+0xc8>)
 80037d0:	0019      	movs	r1, r3
 80037d2:	0010      	movs	r0, r2
 80037d4:	f000 fc72 	bl	80040bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b00b      	add	sp, #44	; 0x2c
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	40013000 	.word	0x40013000
 80037e4:	40021000 	.word	0x40021000
 80037e8:	50000400 	.word	0x50000400

080037ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <HAL_MspInit+0x24>)
 80037f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_MspInit+0x24>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	430a      	orrs	r2, r1
 80037fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <HAL_MspInit+0x24>)
 80037fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_MspInit+0x24>)
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	0549      	lsls	r1, r1, #21
 8003806:	430a      	orrs	r2, r1
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000

08003814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003818:	e7fe      	b.n	8003818 <NMI_Handler+0x4>

0800381a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800381e:	e7fe      	b.n	800381e <HardFault_Handler+0x4>

08003820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003838:	f000 fa9a 	bl	8003d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <TIM6_DAC_IRQHandler+0x14>)
 800384a:	0018      	movs	r0, r3
 800384c:	f002 fc6e 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	2000049c 	.word	0x2000049c

0800385c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <USART1_IRQHandler+0x14>)
 8003862:	0018      	movs	r0, r3
 8003864:	f002 ff68 	bl	8006738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	200004dc 	.word	0x200004dc

08003874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  return 1;
 8003878:	2301      	movs	r3, #1
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_kill>:

int _kill(int pid, int sig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800388a:	f006 f9c5 	bl	8009c18 <__errno>
 800388e:	0003      	movs	r3, r0
 8003890:	2216      	movs	r2, #22
 8003892:	601a      	str	r2, [r3, #0]
  return -1;
 8003894:	2301      	movs	r3, #1
 8003896:	425b      	negs	r3, r3
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_exit>:

void _exit (int status)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038a8:	2301      	movs	r3, #1
 80038aa:	425a      	negs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7ff ffe5 	bl	8003880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038b6:	e7fe      	b.n	80038b6 <_exit+0x16>

080038b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e00a      	b.n	80038e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038ca:	e000      	b.n	80038ce <_read+0x16>
 80038cc:	bf00      	nop
 80038ce:	0001      	movs	r1, r0
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	60ba      	str	r2, [r7, #8]
 80038d6:	b2ca      	uxtb	r2, r1
 80038d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3301      	adds	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	dbf0      	blt.n	80038ca <_read+0x12>
  }

  return len;
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b006      	add	sp, #24
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e009      	b.n	8003918 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	60ba      	str	r2, [r7, #8]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	0018      	movs	r0, r3
 800390e:	f7ff fdc7 	bl	80034a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3301      	adds	r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	dbf1      	blt.n	8003904 <_write+0x12>
  }
  return len;
 8003920:	687b      	ldr	r3, [r7, #4]
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}

0800392a <_close>:

int _close(int file)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003932:	2301      	movs	r3, #1
 8003934:	425b      	negs	r3, r3
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}

0800393e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2280      	movs	r2, #128	; 0x80
 800394c:	0192      	lsls	r2, r2, #6
 800394e:	605a      	str	r2, [r3, #4]
  return 0;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}

0800395a <_isatty>:

int _isatty(int file)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003962:	2301      	movs	r3, #1
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003978:	2300      	movs	r3, #0
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b004      	add	sp, #16
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <_sbrk+0x5c>)
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <_sbrk+0x60>)
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <_sbrk+0x64>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <_sbrk+0x64>)
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <_sbrk+0x68>)
 80039a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <_sbrk+0x64>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	18d3      	adds	r3, r2, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d207      	bcs.n	80039c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039b4:	f006 f930 	bl	8009c18 <__errno>
 80039b8:	0003      	movs	r3, r0
 80039ba:	220c      	movs	r2, #12
 80039bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039be:	2301      	movs	r3, #1
 80039c0:	425b      	negs	r3, r3
 80039c2:	e009      	b.n	80039d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <_sbrk+0x64>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <_sbrk+0x64>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	18d2      	adds	r2, r2, r3
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <_sbrk+0x64>)
 80039d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80039d6:	68fb      	ldr	r3, [r7, #12]
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b006      	add	sp, #24
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20002000 	.word	0x20002000
 80039e4:	00000400 	.word	0x00000400
 80039e8:	20000498 	.word	0x20000498
 80039ec:	20000740 	.word	0x20000740

080039f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a02:	003b      	movs	r3, r7
 8003a04:	0018      	movs	r0, r3
 8003a06:	2308      	movs	r3, #8
 8003a08:	001a      	movs	r2, r3
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f006 f898 	bl	8009b40 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a10:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <MX_TIM6_Init+0x6c>)
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <MX_TIM6_Init+0x70>)
 8003a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <MX_TIM6_Init+0x6c>)
 8003a18:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <MX_TIM6_Init+0x74>)
 8003a1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <MX_TIM6_Init+0x6c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <MX_TIM6_Init+0x6c>)
 8003a24:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <MX_TIM6_Init+0x78>)
 8003a26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <MX_TIM6_Init+0x6c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <MX_TIM6_Init+0x6c>)
 8003a30:	0018      	movs	r0, r3
 8003a32:	f002 faef 	bl	8006014 <HAL_TIM_Base_Init>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003a3a:	f7ff fe35 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a3e:	003b      	movs	r3, r7
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a44:	003b      	movs	r3, r7
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a4a:	003a      	movs	r2, r7
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <MX_TIM6_Init+0x6c>)
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f002 fcc7 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003a5a:	f7ff fe25 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	2000049c 	.word	0x2000049c
 8003a6c:	40001000 	.word	0x40001000
 8003a70:	00000c7f 	.word	0x00000c7f
 8003a74:	0000270f 	.word	0x0000270f

08003a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <HAL_TIM_Base_MspInit+0x38>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10d      	bne.n	8003aa6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_TIM_Base_MspInit+0x3c>)
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_TIM_Base_MspInit+0x3c>)
 8003a90:	2110      	movs	r1, #16
 8003a92:	430a      	orrs	r2, r1
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2103      	movs	r1, #3
 8003a9a:	2011      	movs	r0, #17
 8003a9c:	f000 fa54 	bl	8003f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003aa0:	2011      	movs	r0, #17
 8003aa2:	f000 fa66 	bl	8003f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40001000 	.word	0x40001000
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003abe:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <MX_USART1_UART_Init+0x5c>)
 8003ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003ac4:	2296      	movs	r2, #150	; 0x96
 8003ac6:	0192      	lsls	r2, r2, #6
 8003ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003ade:	220c      	movs	r2, #12
 8003ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <MX_USART1_UART_Init+0x58>)
 8003afc:	0018      	movs	r0, r3
 8003afe:	f002 fcc9 	bl	8006494 <HAL_UART_Init>
 8003b02:	1e03      	subs	r3, r0, #0
 8003b04:	d001      	beq.n	8003b0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003b06:	f7ff fdcf 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200004dc 	.word	0x200004dc
 8003b14:	40013800 	.word	0x40013800

08003b18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b1e:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <MX_USART2_UART_Init+0x5c>)
 8003b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b24:	2296      	movs	r2, #150	; 0x96
 8003b26:	0192      	lsls	r2, r2, #6
 8003b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b3e:	220c      	movs	r2, #12
 8003b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <MX_USART2_UART_Init+0x58>)
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f002 fc99 	bl	8006494 <HAL_UART_Init>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d001      	beq.n	8003b6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003b66:	f7ff fd9f 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000564 	.word	0x20000564
 8003b74:	40004400 	.word	0x40004400

08003b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b08b      	sub	sp, #44	; 0x2c
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	2414      	movs	r4, #20
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	0018      	movs	r0, r3
 8003b86:	2314      	movs	r3, #20
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f005 ffd8 	bl	8009b40 <memset>
  if(uartHandle->Instance==USART1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a34      	ldr	r2, [pc, #208]	; (8003c68 <HAL_UART_MspInit+0xf0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d133      	bne.n	8003c02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9e:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003ba0:	2180      	movs	r1, #128	; 0x80
 8003ba2:	01c9      	lsls	r1, r1, #7
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba8:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bc0:	193b      	adds	r3, r7, r4
 8003bc2:	22c0      	movs	r2, #192	; 0xc0
 8003bc4:	00d2      	lsls	r2, r2, #3
 8003bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	0021      	movs	r1, r4
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	2202      	movs	r2, #2
 8003bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	187b      	adds	r3, r7, r1
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	2204      	movs	r2, #4
 8003be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be2:	187a      	adds	r2, r7, r1
 8003be4:	23a0      	movs	r3, #160	; 0xa0
 8003be6:	05db      	lsls	r3, r3, #23
 8003be8:	0011      	movs	r1, r2
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 fa66 	bl	80040bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	201b      	movs	r0, #27
 8003bf6:	f000 f9a7 	bl	8003f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bfa:	201b      	movs	r0, #27
 8003bfc:	f000 f9b9 	bl	8003f72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c00:	e02e      	b.n	8003c60 <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_UART_MspInit+0xf8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d129      	bne.n	8003c60 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	0289      	lsls	r1, r1, #10
 8003c16:	430a      	orrs	r2, r1
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	430a      	orrs	r2, r1
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_UART_MspInit+0xf4>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c32:	2114      	movs	r1, #20
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	220c      	movs	r2, #12
 8003c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	187b      	adds	r3, r7, r1
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	2204      	movs	r2, #4
 8003c50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c52:	187a      	adds	r2, r7, r1
 8003c54:	23a0      	movs	r3, #160	; 0xa0
 8003c56:	05db      	lsls	r3, r3, #23
 8003c58:	0011      	movs	r1, r2
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fa2e 	bl	80040bc <HAL_GPIO_Init>
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b00b      	add	sp, #44	; 0x2c
 8003c66:	bd90      	pop	{r4, r7, pc}
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40004400 	.word	0x40004400

08003c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c78:	f7ff feba 	bl	80039f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c7c:	480c      	ldr	r0, [pc, #48]	; (8003cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c7e:	490d      	ldr	r1, [pc, #52]	; (8003cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c80:	4a0d      	ldr	r2, [pc, #52]	; (8003cb8 <LoopForever+0xe>)
  movs r3, #0
 8003c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c84:	e002      	b.n	8003c8c <LoopCopyDataInit>

08003c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c8a:	3304      	adds	r3, #4

08003c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c90:	d3f9      	bcc.n	8003c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c94:	4c0a      	ldr	r4, [pc, #40]	; (8003cc0 <LoopForever+0x16>)
  movs r3, #0
 8003c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c98:	e001      	b.n	8003c9e <LoopFillZerobss>

08003c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c9c:	3204      	adds	r2, #4

08003c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ca0:	d3fb      	bcc.n	8003c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ca2:	f005 ffbf 	bl	8009c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ca6:	f7ff fc5d 	bl	8003564 <main>

08003caa <LoopForever>:

LoopForever:
    b LoopForever
 8003caa:	e7fe      	b.n	8003caa <LoopForever>
  ldr   r0, =_estack
 8003cac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cb4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003cb8:	0800cc6c 	.word	0x0800cc6c
  ldr r2, =_sbss
 8003cbc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003cc0:	2000073c 	.word	0x2000073c

08003cc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cc4:	e7fe      	b.n	8003cc4 <ADC1_COMP_IRQHandler>
	...

08003cc8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_Init+0x3c>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <HAL_Init+0x3c>)
 8003cda:	2140      	movs	r1, #64	; 0x40
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f000 f811 	bl	8003d08 <HAL_InitTick>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	2201      	movs	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e001      	b.n	8003cf6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cf2:	f7ff fd7b 	bl	80037ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cf6:	1dfb      	adds	r3, r7, #7
 8003cf8:	781b      	ldrb	r3, [r3, #0]
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	40022000 	.word	0x40022000

08003d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_InitTick+0x5c>)
 8003d12:	681c      	ldr	r4, [r3, #0]
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <HAL_InitTick+0x60>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	0019      	movs	r1, r3
 8003d1a:	23fa      	movs	r3, #250	; 0xfa
 8003d1c:	0098      	lsls	r0, r3, #2
 8003d1e:	f7fc fa0f 	bl	8000140 <__udivsi3>
 8003d22:	0003      	movs	r3, r0
 8003d24:	0019      	movs	r1, r3
 8003d26:	0020      	movs	r0, r4
 8003d28:	f7fc fa0a 	bl	8000140 <__udivsi3>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 f92f 	bl	8003f92 <HAL_SYSTICK_Config>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e00f      	b.n	8003d5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d80b      	bhi.n	8003d5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	2301      	movs	r3, #1
 8003d46:	425b      	negs	r3, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 f8fc 	bl	8003f48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_InitTick+0x64>)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b003      	add	sp, #12
 8003d62:	bd90      	pop	{r4, r7, pc}
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000008 	.word	0x20000008
 8003d6c:	20000004 	.word	0x20000004

08003d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_IncTick+0x1c>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	001a      	movs	r2, r3
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_IncTick+0x20>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	18d2      	adds	r2, r2, r3
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_IncTick+0x20>)
 8003d82:	601a      	str	r2, [r3, #0]
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	20000008 	.word	0x20000008
 8003d90:	200005ec 	.word	0x200005ec

08003d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  return uwTick;
 8003d98:	4b02      	ldr	r3, [pc, #8]	; (8003da4 <HAL_GetTick+0x10>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	200005ec 	.word	0x200005ec

08003da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	d005      	beq.n	8003dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <HAL_Delay+0x44>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001a      	movs	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	f7ff ffe0 	bl	8003d94 <HAL_GetTick>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d8f7      	bhi.n	8003dd0 <HAL_Delay+0x28>
  {
  }
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	20000008 	.word	0x20000008

08003df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	0002      	movs	r2, r0
 8003df8:	1dfb      	adds	r3, r7, #7
 8003dfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dfc:	1dfb      	adds	r3, r7, #7
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b7f      	cmp	r3, #127	; 0x7f
 8003e02:	d809      	bhi.n	8003e18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	001a      	movs	r2, r3
 8003e0a:	231f      	movs	r3, #31
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <__NVIC_EnableIRQ+0x30>)
 8003e10:	2101      	movs	r1, #1
 8003e12:	4091      	lsls	r1, r2
 8003e14:	000a      	movs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
  }
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	1dfb      	adds	r3, r7, #7
 8003e30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e32:	1dfb      	adds	r3, r7, #7
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b7f      	cmp	r3, #127	; 0x7f
 8003e38:	d828      	bhi.n	8003e8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e3a:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <__NVIC_SetPriority+0xd4>)
 8003e3c:	1dfb      	adds	r3, r7, #7
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	33c0      	adds	r3, #192	; 0xc0
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	589b      	ldr	r3, [r3, r2]
 8003e4a:	1dfa      	adds	r2, r7, #7
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	0011      	movs	r1, r2
 8003e50:	2203      	movs	r2, #3
 8003e52:	400a      	ands	r2, r1
 8003e54:	00d2      	lsls	r2, r2, #3
 8003e56:	21ff      	movs	r1, #255	; 0xff
 8003e58:	4091      	lsls	r1, r2
 8003e5a:	000a      	movs	r2, r1
 8003e5c:	43d2      	mvns	r2, r2
 8003e5e:	401a      	ands	r2, r3
 8003e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	22ff      	movs	r2, #255	; 0xff
 8003e68:	401a      	ands	r2, r3
 8003e6a:	1dfb      	adds	r3, r7, #7
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	2303      	movs	r3, #3
 8003e72:	4003      	ands	r3, r0
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e78:	481f      	ldr	r0, [pc, #124]	; (8003ef8 <__NVIC_SetPriority+0xd4>)
 8003e7a:	1dfb      	adds	r3, r7, #7
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	430a      	orrs	r2, r1
 8003e84:	33c0      	adds	r3, #192	; 0xc0
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e8a:	e031      	b.n	8003ef0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <__NVIC_SetPriority+0xd8>)
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	0019      	movs	r1, r3
 8003e94:	230f      	movs	r3, #15
 8003e96:	400b      	ands	r3, r1
 8003e98:	3b08      	subs	r3, #8
 8003e9a:	089b      	lsrs	r3, r3, #2
 8003e9c:	3306      	adds	r3, #6
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	1dfa      	adds	r2, r7, #7
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	0011      	movs	r1, r2
 8003eac:	2203      	movs	r2, #3
 8003eae:	400a      	ands	r2, r1
 8003eb0:	00d2      	lsls	r2, r2, #3
 8003eb2:	21ff      	movs	r1, #255	; 0xff
 8003eb4:	4091      	lsls	r1, r2
 8003eb6:	000a      	movs	r2, r1
 8003eb8:	43d2      	mvns	r2, r2
 8003eba:	401a      	ands	r2, r3
 8003ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	019b      	lsls	r3, r3, #6
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	1dfb      	adds	r3, r7, #7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	2303      	movs	r3, #3
 8003ece:	4003      	ands	r3, r0
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ed4:	4809      	ldr	r0, [pc, #36]	; (8003efc <__NVIC_SetPriority+0xd8>)
 8003ed6:	1dfb      	adds	r3, r7, #7
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	001c      	movs	r4, r3
 8003edc:	230f      	movs	r3, #15
 8003ede:	4023      	ands	r3, r4
 8003ee0:	3b08      	subs	r3, #8
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	3306      	adds	r3, #6
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	18c3      	adds	r3, r0, r3
 8003eec:	3304      	adds	r3, #4
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b003      	add	sp, #12
 8003ef6:	bd90      	pop	{r4, r7, pc}
 8003ef8:	e000e100 	.word	0xe000e100
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1e5a      	subs	r2, r3, #1
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	045b      	lsls	r3, r3, #17
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d301      	bcc.n	8003f18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f14:	2301      	movs	r3, #1
 8003f16:	e010      	b.n	8003f3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <SysTick_Config+0x44>)
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	3a01      	subs	r2, #1
 8003f1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f20:	2301      	movs	r3, #1
 8003f22:	425b      	negs	r3, r3
 8003f24:	2103      	movs	r1, #3
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7ff ff7c 	bl	8003e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <SysTick_Config+0x44>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <SysTick_Config+0x44>)
 8003f34:	2207      	movs	r2, #7
 8003f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b002      	add	sp, #8
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	e000e010 	.word	0xe000e010

08003f48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	210f      	movs	r1, #15
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	1c02      	adds	r2, r0, #0
 8003f58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff ff5d 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	0002      	movs	r2, r0
 8003f7a:	1dfb      	adds	r3, r7, #7
 8003f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	b25b      	sxtb	r3, r3
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff ff33 	bl	8003df0 <__NVIC_EnableIRQ>
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff ffaf 	bl	8003f00 <SysTick_Config>
 8003fa2:	0003      	movs	r3, r0
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2225      	movs	r2, #37	; 0x25
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2224      	movs	r2, #36	; 0x24
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e024      	b.n	8004024 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	210e      	movs	r1, #14
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	438a      	bics	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	221c      	movs	r2, #28
 8004000:	401a      	ands	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2101      	movs	r1, #1
 8004008:	4091      	lsls	r1, r2
 800400a:	000a      	movs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2225      	movs	r2, #37	; 0x25
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2224      	movs	r2, #36	; 0x24
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]

    return status;
 800401e:	230f      	movs	r3, #15
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b004      	add	sp, #16
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004034:	210f      	movs	r1, #15
 8004036:	187b      	adds	r3, r7, r1
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2225      	movs	r2, #37	; 0x25
 8004040:	5c9b      	ldrb	r3, [r3, r2]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d006      	beq.n	8004056 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2204      	movs	r2, #4
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800404e:	187b      	adds	r3, r7, r1
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e02a      	b.n	80040ac <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	210e      	movs	r1, #14
 8004062:	438a      	bics	r2, r1
 8004064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	438a      	bics	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	221c      	movs	r2, #28
 800407c:	401a      	ands	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2101      	movs	r1, #1
 8004084:	4091      	lsls	r1, r2
 8004086:	000a      	movs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2225      	movs	r2, #37	; 0x25
 800408e:	2101      	movs	r1, #1
 8004090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2224      	movs	r2, #36	; 0x24
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	0010      	movs	r0, r2
 80040aa:	4798      	blx	r3
    }
  }
  return status;
 80040ac:	230f      	movs	r3, #15
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	781b      	ldrb	r3, [r3, #0]
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b004      	add	sp, #16
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80040d2:	e14f      	b.n	8004374 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2101      	movs	r1, #1
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4091      	lsls	r1, r2
 80040de:	000a      	movs	r2, r1
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d100      	bne.n	80040ec <HAL_GPIO_Init+0x30>
 80040ea:	e140      	b.n	800436e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d005      	beq.n	8004104 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004100:	2b02      	cmp	r3, #2
 8004102:	d130      	bne.n	8004166 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	2203      	movs	r2, #3
 8004110:	409a      	lsls	r2, r3
 8004112:	0013      	movs	r3, r2
 8004114:	43da      	mvns	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4013      	ands	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	409a      	lsls	r2, r3
 8004126:	0013      	movs	r3, r2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800413a:	2201      	movs	r2, #1
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	409a      	lsls	r2, r3
 8004140:	0013      	movs	r3, r2
 8004142:	43da      	mvns	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	2201      	movs	r2, #1
 8004152:	401a      	ands	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	409a      	lsls	r2, r3
 8004158:	0013      	movs	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2203      	movs	r2, #3
 800416c:	4013      	ands	r3, r2
 800416e:	2b03      	cmp	r3, #3
 8004170:	d017      	beq.n	80041a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	409a      	lsls	r2, r3
 8004180:	0013      	movs	r3, r2
 8004182:	43da      	mvns	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	409a      	lsls	r2, r3
 8004194:	0013      	movs	r3, r2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2203      	movs	r2, #3
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d123      	bne.n	80041f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	0092      	lsls	r2, r2, #2
 80041b8:	58d3      	ldr	r3, [r2, r3]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2207      	movs	r2, #7
 80041c0:	4013      	ands	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	409a      	lsls	r2, r3
 80041c8:	0013      	movs	r3, r2
 80041ca:	43da      	mvns	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2107      	movs	r1, #7
 80041da:	400b      	ands	r3, r1
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	409a      	lsls	r2, r3
 80041e0:	0013      	movs	r3, r2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	08da      	lsrs	r2, r3, #3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3208      	adds	r2, #8
 80041f0:	0092      	lsls	r2, r2, #2
 80041f2:	6939      	ldr	r1, [r7, #16]
 80041f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	409a      	lsls	r2, r3
 8004204:	0013      	movs	r3, r2
 8004206:	43da      	mvns	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2203      	movs	r2, #3
 8004214:	401a      	ands	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	0013      	movs	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	23c0      	movs	r3, #192	; 0xc0
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	4013      	ands	r3, r2
 8004234:	d100      	bne.n	8004238 <HAL_GPIO_Init+0x17c>
 8004236:	e09a      	b.n	800436e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004238:	4b54      	ldr	r3, [pc, #336]	; (800438c <HAL_GPIO_Init+0x2d0>)
 800423a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423c:	4b53      	ldr	r3, [pc, #332]	; (800438c <HAL_GPIO_Init+0x2d0>)
 800423e:	2101      	movs	r1, #1
 8004240:	430a      	orrs	r2, r1
 8004242:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004244:	4a52      	ldr	r2, [pc, #328]	; (8004390 <HAL_GPIO_Init+0x2d4>)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	3302      	adds	r3, #2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	589b      	ldr	r3, [r3, r2]
 8004250:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2203      	movs	r2, #3
 8004256:	4013      	ands	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	220f      	movs	r2, #15
 800425c:	409a      	lsls	r2, r3
 800425e:	0013      	movs	r3, r2
 8004260:	43da      	mvns	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	23a0      	movs	r3, #160	; 0xa0
 800426c:	05db      	lsls	r3, r3, #23
 800426e:	429a      	cmp	r2, r3
 8004270:	d019      	beq.n	80042a6 <HAL_GPIO_Init+0x1ea>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a47      	ldr	r2, [pc, #284]	; (8004394 <HAL_GPIO_Init+0x2d8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_GPIO_Init+0x1e6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a46      	ldr	r2, [pc, #280]	; (8004398 <HAL_GPIO_Init+0x2dc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00d      	beq.n	800429e <HAL_GPIO_Init+0x1e2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a45      	ldr	r2, [pc, #276]	; (800439c <HAL_GPIO_Init+0x2e0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <HAL_GPIO_Init+0x1de>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a44      	ldr	r2, [pc, #272]	; (80043a0 <HAL_GPIO_Init+0x2e4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_GPIO_Init+0x1da>
 8004292:	2305      	movs	r3, #5
 8004294:	e008      	b.n	80042a8 <HAL_GPIO_Init+0x1ec>
 8004296:	2306      	movs	r3, #6
 8004298:	e006      	b.n	80042a8 <HAL_GPIO_Init+0x1ec>
 800429a:	2303      	movs	r3, #3
 800429c:	e004      	b.n	80042a8 <HAL_GPIO_Init+0x1ec>
 800429e:	2302      	movs	r3, #2
 80042a0:	e002      	b.n	80042a8 <HAL_GPIO_Init+0x1ec>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_GPIO_Init+0x1ec>
 80042a6:	2300      	movs	r3, #0
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	2103      	movs	r1, #3
 80042ac:	400a      	ands	r2, r1
 80042ae:	0092      	lsls	r2, r2, #2
 80042b0:	4093      	lsls	r3, r2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b8:	4935      	ldr	r1, [pc, #212]	; (8004390 <HAL_GPIO_Init+0x2d4>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43da      	mvns	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	035b      	lsls	r3, r3, #13
 80042de:	4013      	ands	r3, r2
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042ea:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80042f0:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	039b      	lsls	r3, r3, #14
 8004308:	4013      	ands	r3, r2
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	43da      	mvns	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	029b      	lsls	r3, r3, #10
 8004332:	4013      	ands	r3, r2
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800433e:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004344:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	43da      	mvns	r2, r3
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	025b      	lsls	r3, r3, #9
 800435c:	4013      	ands	r3, r2
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_GPIO_Init+0x2e8>)
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	3301      	adds	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	40da      	lsrs	r2, r3
 800437c:	1e13      	subs	r3, r2, #0
 800437e:	d000      	beq.n	8004382 <HAL_GPIO_Init+0x2c6>
 8004380:	e6a8      	b.n	80040d4 <HAL_GPIO_Init+0x18>
  }
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46c0      	nop			; (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b006      	add	sp, #24
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	40010000 	.word	0x40010000
 8004394:	50000400 	.word	0x50000400
 8004398:	50000800 	.word	0x50000800
 800439c:	50000c00 	.word	0x50000c00
 80043a0:	50001c00 	.word	0x50001c00
 80043a4:	40010400 	.word	0x40010400

080043a8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	0008      	movs	r0, r1
 80043b2:	0011      	movs	r1, r2
 80043b4:	1cbb      	adds	r3, r7, #2
 80043b6:	1c02      	adds	r2, r0, #0
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	1c7b      	adds	r3, r7, #1
 80043bc:	1c0a      	adds	r2, r1, #0
 80043be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043c0:	1c7b      	adds	r3, r7, #1
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c8:	1cbb      	adds	r3, r7, #2
 80043ca:	881a      	ldrh	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80043d0:	e003      	b.n	80043da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80043d2:	1cbb      	adds	r3, r7, #2
 80043d4:	881a      	ldrh	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	000a      	movs	r2, r1
 80043ec:	1cbb      	adds	r3, r7, #2
 80043ee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043f6:	1cbb      	adds	r3, r7, #2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	041a      	lsls	r2, r3, #16
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	43db      	mvns	r3, r3
 8004404:	1cb9      	adds	r1, r7, #2
 8004406:	8809      	ldrh	r1, [r1, #0]
 8004408:	400b      	ands	r3, r1
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e082      	b.n	8004530 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2241      	movs	r2, #65	; 0x41
 800442e:	5c9b      	ldrb	r3, [r3, r2]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d107      	bne.n	8004446 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2240      	movs	r2, #64	; 0x40
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	0018      	movs	r0, r3
 8004442:	f7fe ffe9 	bl	8003418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2241      	movs	r2, #65	; 0x41
 800444a:	2124      	movs	r1, #36	; 0x24
 800444c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	438a      	bics	r2, r1
 800445c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4934      	ldr	r1, [pc, #208]	; (8004538 <HAL_I2C_Init+0x120>)
 8004468:	400a      	ands	r2, r1
 800446a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4931      	ldr	r1, [pc, #196]	; (800453c <HAL_I2C_Init+0x124>)
 8004478:	400a      	ands	r2, r1
 800447a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d108      	bne.n	8004496 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2180      	movs	r1, #128	; 0x80
 800448e:	0209      	lsls	r1, r1, #8
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	e007      	b.n	80044a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2184      	movs	r1, #132	; 0x84
 80044a0:	0209      	lsls	r1, r1, #8
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d104      	bne.n	80044b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	491f      	ldr	r1, [pc, #124]	; (8004540 <HAL_I2C_Init+0x128>)
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	491a      	ldr	r1, [pc, #104]	; (800453c <HAL_I2C_Init+0x124>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69d9      	ldr	r1, [r3, #28]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2241      	movs	r2, #65	; 0x41
 800451c:	2120      	movs	r1, #32
 800451e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2242      	movs	r2, #66	; 0x42
 800452a:	2100      	movs	r1, #0
 800452c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}
 8004538:	f0ffffff 	.word	0xf0ffffff
 800453c:	ffff7fff 	.word	0xffff7fff
 8004540:	02008000 	.word	0x02008000

08004544 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	0008      	movs	r0, r1
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	0019      	movs	r1, r3
 8004552:	230a      	movs	r3, #10
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	1c02      	adds	r2, r0, #0
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	2308      	movs	r3, #8
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	1c0a      	adds	r2, r1, #0
 8004560:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2241      	movs	r2, #65	; 0x41
 8004566:	5c9b      	ldrb	r3, [r3, r2]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b20      	cmp	r3, #32
 800456c:	d000      	beq.n	8004570 <HAL_I2C_Master_Transmit+0x2c>
 800456e:	e0e7      	b.n	8004740 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2240      	movs	r2, #64	; 0x40
 8004574:	5c9b      	ldrb	r3, [r3, r2]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_I2C_Master_Transmit+0x3a>
 800457a:	2302      	movs	r3, #2
 800457c:	e0e1      	b.n	8004742 <HAL_I2C_Master_Transmit+0x1fe>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2240      	movs	r2, #64	; 0x40
 8004582:	2101      	movs	r1, #1
 8004584:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004586:	f7ff fc05 	bl	8003d94 <HAL_GetTick>
 800458a:	0003      	movs	r3, r0
 800458c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	0219      	lsls	r1, r3, #8
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2319      	movs	r3, #25
 800459a:	2201      	movs	r2, #1
 800459c:	f000 fa04 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0cc      	b.n	8004742 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2241      	movs	r2, #65	; 0x41
 80045ac:	2121      	movs	r1, #33	; 0x21
 80045ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2242      	movs	r2, #66	; 0x42
 80045b4:	2110      	movs	r1, #16
 80045b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2208      	movs	r2, #8
 80045c8:	18ba      	adds	r2, r7, r2
 80045ca:	8812      	ldrh	r2, [r2, #0]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2bff      	cmp	r3, #255	; 0xff
 80045dc:	d911      	bls.n	8004602 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	22ff      	movs	r2, #255	; 0xff
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	045c      	lsls	r4, r3, #17
 80045ee:	230a      	movs	r3, #10
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	8819      	ldrh	r1, [r3, #0]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	4b55      	ldr	r3, [pc, #340]	; (800474c <HAL_I2C_Master_Transmit+0x208>)
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	0023      	movs	r3, r4
 80045fc:	f000 fc2e 	bl	8004e5c <I2C_TransferConfig>
 8004600:	e075      	b.n	80046ee <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	b2da      	uxtb	r2, r3
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	049c      	lsls	r4, r3, #18
 8004616:	230a      	movs	r3, #10
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	8819      	ldrh	r1, [r3, #0]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_I2C_Master_Transmit+0x208>)
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	0023      	movs	r3, r4
 8004624:	f000 fc1a 	bl	8004e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004628:	e061      	b.n	80046ee <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fa07 	bl	8004a44 <I2C_WaitOnTXISFlagUntilTimeout>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e081      	b.n	8004742 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03a      	beq.n	80046ee <HAL_I2C_Master_Transmit+0x1aa>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d136      	bne.n	80046ee <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0013      	movs	r3, r2
 800468a:	2200      	movs	r2, #0
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	f000 f98b 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8004692:	1e03      	subs	r3, r0, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e053      	b.n	8004742 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2bff      	cmp	r3, #255	; 0xff
 80046a2:	d911      	bls.n	80046c8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	22ff      	movs	r2, #255	; 0xff
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	045c      	lsls	r4, r3, #17
 80046b4:	230a      	movs	r3, #10
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	8819      	ldrh	r1, [r3, #0]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	2300      	movs	r3, #0
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	0023      	movs	r3, r4
 80046c2:	f000 fbcb 	bl	8004e5c <I2C_TransferConfig>
 80046c6:	e012      	b.n	80046ee <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	049c      	lsls	r4, r3, #18
 80046dc:	230a      	movs	r3, #10
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	8819      	ldrh	r1, [r3, #0]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	0023      	movs	r3, r4
 80046ea:	f000 fbb7 	bl	8004e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d198      	bne.n	800462a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 f9e6 	bl	8004ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e01a      	b.n	8004742 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2220      	movs	r2, #32
 8004712:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	490c      	ldr	r1, [pc, #48]	; (8004750 <HAL_I2C_Master_Transmit+0x20c>)
 8004720:	400a      	ands	r2, r1
 8004722:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2241      	movs	r2, #65	; 0x41
 8004728:	2120      	movs	r1, #32
 800472a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2242      	movs	r2, #66	; 0x42
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2240      	movs	r2, #64	; 0x40
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	b007      	add	sp, #28
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	80002000 	.word	0x80002000
 8004750:	fe00e800 	.word	0xfe00e800

08004754 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b089      	sub	sp, #36	; 0x24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	0008      	movs	r0, r1
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	0019      	movs	r1, r3
 8004762:	230a      	movs	r3, #10
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	1c02      	adds	r2, r0, #0
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	2308      	movs	r3, #8
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	1c0a      	adds	r2, r1, #0
 8004770:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2241      	movs	r2, #65	; 0x41
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	d000      	beq.n	8004780 <HAL_I2C_Master_Receive+0x2c>
 800477e:	e0e8      	b.n	8004952 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2240      	movs	r2, #64	; 0x40
 8004784:	5c9b      	ldrb	r3, [r3, r2]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_I2C_Master_Receive+0x3a>
 800478a:	2302      	movs	r3, #2
 800478c:	e0e2      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2240      	movs	r2, #64	; 0x40
 8004792:	2101      	movs	r1, #1
 8004794:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004796:	f7ff fafd 	bl	8003d94 <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	0219      	lsls	r1, r3, #8
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2319      	movs	r3, #25
 80047aa:	2201      	movs	r2, #1
 80047ac:	f000 f8fc 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cd      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2241      	movs	r2, #65	; 0x41
 80047bc:	2122      	movs	r1, #34	; 0x22
 80047be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2242      	movs	r2, #66	; 0x42
 80047c4:	2110      	movs	r1, #16
 80047c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2208      	movs	r2, #8
 80047d8:	18ba      	adds	r2, r7, r2
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2bff      	cmp	r3, #255	; 0xff
 80047ec:	d911      	bls.n	8004812 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	045c      	lsls	r4, r3, #17
 80047fe:	230a      	movs	r3, #10
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	8819      	ldrh	r1, [r3, #0]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_I2C_Master_Receive+0x208>)
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	0023      	movs	r3, r4
 800480c:	f000 fb26 	bl	8004e5c <I2C_TransferConfig>
 8004810:	e076      	b.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	b2da      	uxtb	r2, r3
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	049c      	lsls	r4, r3, #18
 8004826:	230a      	movs	r3, #10
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	8819      	ldrh	r1, [r3, #0]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	4b4b      	ldr	r3, [pc, #300]	; (800495c <HAL_I2C_Master_Receive+0x208>)
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	0023      	movs	r3, r4
 8004834:	f000 fb12 	bl	8004e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004838:	e062      	b.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	0018      	movs	r0, r3
 8004842:	f000 f989 	bl	8004b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004846:	1e03      	subs	r3, r0, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e082      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d03a      	beq.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d136      	bne.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	0013      	movs	r3, r2
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	; 0x80
 80048a0:	f000 f882 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e053      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2bff      	cmp	r3, #255	; 0xff
 80048b4:	d911      	bls.n	80048da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	045c      	lsls	r4, r3, #17
 80048c6:	230a      	movs	r3, #10
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	8819      	ldrh	r1, [r3, #0]
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	0023      	movs	r3, r4
 80048d4:	f000 fac2 	bl	8004e5c <I2C_TransferConfig>
 80048d8:	e012      	b.n	8004900 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	049c      	lsls	r4, r3, #18
 80048ee:	230a      	movs	r3, #10
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	8819      	ldrh	r1, [r3, #0]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	0023      	movs	r3, r4
 80048fc:	f000 faae 	bl	8004e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d197      	bne.n	800483a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f8dd 	bl	8004ad0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004916:	1e03      	subs	r3, r0, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e01a      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2220      	movs	r2, #32
 8004924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	490b      	ldr	r1, [pc, #44]	; (8004960 <HAL_I2C_Master_Receive+0x20c>)
 8004932:	400a      	ands	r2, r1
 8004934:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2241      	movs	r2, #65	; 0x41
 800493a:	2120      	movs	r1, #32
 800493c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2242      	movs	r2, #66	; 0x42
 8004942:	2100      	movs	r1, #0
 8004944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b007      	add	sp, #28
 800495a:	bd90      	pop	{r4, r7, pc}
 800495c:	80002400 	.word	0x80002400
 8004960:	fe00e800 	.word	0xfe00e800

08004964 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2202      	movs	r2, #2
 8004974:	4013      	ands	r3, r2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d103      	bne.n	8004982 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2201      	movs	r2, #1
 800498a:	4013      	ands	r3, r2
 800498c:	2b01      	cmp	r3, #1
 800498e:	d007      	beq.n	80049a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	430a      	orrs	r2, r1
 800499e:	619a      	str	r2, [r3, #24]
  }
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b8:	e030      	b.n	8004a1c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	d02d      	beq.n	8004a1c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c0:	f7ff f9e8 	bl	8003d94 <HAL_GetTick>
 80049c4:	0002      	movs	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d122      	bne.n	8004a1c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	425a      	negs	r2, r3
 80049e6:	4153      	adcs	r3, r2
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	001a      	movs	r2, r3
 80049ec:	1dfb      	adds	r3, r7, #7
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d113      	bne.n	8004a1c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	2220      	movs	r2, #32
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2241      	movs	r2, #65	; 0x41
 8004a04:	2120      	movs	r1, #32
 8004a06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2242      	movs	r2, #66	; 0x42
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2240      	movs	r2, #64	; 0x40
 8004a14:	2100      	movs	r1, #0
 8004a16:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e00f      	b.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	425a      	negs	r2, r3
 8004a2c:	4153      	adcs	r3, r2
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	001a      	movs	r2, r3
 8004a32:	1dfb      	adds	r3, r7, #7
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d0bf      	beq.n	80049ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b004      	add	sp, #16
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a50:	e032      	b.n	8004ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 f8ff 	bl	8004c5c <I2C_IsErrorOccurred>
 8004a5e:	1e03      	subs	r3, r0, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e030      	b.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	d025      	beq.n	8004ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7ff f992 	bl	8003d94 <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11a      	bne.n	8004ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d013      	beq.n	8004ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	2220      	movs	r2, #32
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2241      	movs	r2, #65	; 0x41
 8004aa0:	2120      	movs	r1, #32
 8004aa2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2242      	movs	r2, #66	; 0x42
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2240      	movs	r2, #64	; 0x40
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e007      	b.n	8004ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d1c5      	bne.n	8004a52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b004      	add	sp, #16
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004adc:	e02f      	b.n	8004b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f000 f8b9 	bl	8004c5c <I2C_IsErrorOccurred>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e02d      	b.n	8004b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7ff f94f 	bl	8003d94 <HAL_GetTick>
 8004af6:	0002      	movs	r2, r0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11a      	bne.n	8004b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d013      	beq.n	8004b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2241      	movs	r2, #65	; 0x41
 8004b26:	2120      	movs	r1, #32
 8004b28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2242      	movs	r2, #66	; 0x42
 8004b2e:	2100      	movs	r1, #0
 8004b30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2240      	movs	r2, #64	; 0x40
 8004b36:	2100      	movs	r1, #0
 8004b38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e007      	b.n	8004b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2220      	movs	r2, #32
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d1c8      	bne.n	8004ade <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b004      	add	sp, #16
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b64:	e06b      	b.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 f875 	bl	8004c5c <I2C_IsErrorOccurred>
 8004b72:	1e03      	subs	r3, r0, #0
 8004b74:	d001      	beq.n	8004b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e069      	b.n	8004c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2220      	movs	r2, #32
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d138      	bne.n	8004bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d105      	bne.n	8004ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e055      	b.n	8004c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d107      	bne.n	8004bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2204      	movs	r2, #4
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
 8004bbe:	e002      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	491f      	ldr	r1, [pc, #124]	; (8004c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004bda:	400a      	ands	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2241      	movs	r2, #65	; 0x41
 8004be2:	2120      	movs	r1, #32
 8004be4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2242      	movs	r2, #66	; 0x42
 8004bea:	2100      	movs	r1, #0
 8004bec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2240      	movs	r2, #64	; 0x40
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e029      	b.n	8004c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7ff f8cb 	bl	8003d94 <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d116      	bne.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2204      	movs	r2, #4
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d00f      	beq.n	8004c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	2220      	movs	r2, #32
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2241      	movs	r2, #65	; 0x41
 8004c2e:	2120      	movs	r1, #32
 8004c30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2240      	movs	r2, #64	; 0x40
 8004c36:	2100      	movs	r1, #0
 8004c38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e007      	b.n	8004c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2204      	movs	r2, #4
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d18c      	bne.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b004      	add	sp, #16
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	fe00e800 	.word	0xfe00e800

08004c5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b08b      	sub	sp, #44	; 0x2c
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c68:	2327      	movs	r3, #39	; 0x27
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2210      	movs	r2, #16
 8004c84:	4013      	ands	r3, r2
 8004c86:	d100      	bne.n	8004c8a <I2C_IsErrorOccurred+0x2e>
 8004c88:	e082      	b.n	8004d90 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c92:	e060      	b.n	8004d56 <I2C_IsErrorOccurred+0xfa>
 8004c94:	2427      	movs	r4, #39	; 0x27
 8004c96:	193b      	adds	r3, r7, r4
 8004c98:	193a      	adds	r2, r7, r4
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	d058      	beq.n	8004d56 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ca4:	f7ff f876 	bl	8003d94 <HAL_GetTick>
 8004ca8:	0002      	movs	r2, r0
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d306      	bcc.n	8004cc2 <I2C_IsErrorOccurred+0x66>
 8004cb4:	193b      	adds	r3, r7, r4
 8004cb6:	193a      	adds	r2, r7, r4
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d149      	bne.n	8004d56 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	01db      	lsls	r3, r3, #7
 8004ccc:	4013      	ands	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cd0:	2013      	movs	r0, #19
 8004cd2:	183b      	adds	r3, r7, r0
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	2142      	movs	r1, #66	; 0x42
 8004cd8:	5c52      	ldrb	r2, [r2, r1]
 8004cda:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d126      	bne.n	8004d3e <I2C_IsErrorOccurred+0xe2>
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d021      	beq.n	8004d3e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004cfa:	183b      	adds	r3, r7, r0
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d01d      	beq.n	8004d3e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2180      	movs	r1, #128	; 0x80
 8004d0e:	01c9      	lsls	r1, r1, #7
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d14:	f7ff f83e 	bl	8003d94 <HAL_GetTick>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d1c:	e00f      	b.n	8004d3e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d1e:	f7ff f839 	bl	8003d94 <HAL_GetTick>
 8004d22:	0002      	movs	r2, r0
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b19      	cmp	r3, #25
 8004d2a:	d908      	bls.n	8004d3e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	4313      	orrs	r3, r2
 8004d32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d34:	2327      	movs	r3, #39	; 0x27
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]

              break;
 8004d3c:	e00b      	b.n	8004d56 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2220      	movs	r2, #32
 8004d46:	4013      	ands	r3, r2
 8004d48:	2127      	movs	r1, #39	; 0x27
 8004d4a:	187a      	adds	r2, r7, r1
 8004d4c:	1879      	adds	r1, r7, r1
 8004d4e:	7809      	ldrb	r1, [r1, #0]
 8004d50:	7011      	strb	r1, [r2, #0]
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d1e3      	bne.n	8004d1e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d004      	beq.n	8004d6e <I2C_IsErrorOccurred+0x112>
 8004d64:	2327      	movs	r3, #39	; 0x27
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d092      	beq.n	8004c94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d6e:	2327      	movs	r3, #39	; 0x27
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d103      	bne.n	8004d80 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	2204      	movs	r2, #4
 8004d84:	4313      	orrs	r3, r2
 8004d86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d88:	2327      	movs	r3, #39	; 0x27
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d00c      	beq.n	8004dbc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2201      	movs	r2, #1
 8004da6:	4313      	orrs	r3, r2
 8004da8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	0052      	lsls	r2, r2, #1
 8004db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004db4:	2327      	movs	r3, #39	; 0x27
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00c      	beq.n	8004de0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	00d2      	lsls	r2, r2, #3
 8004dd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dd8:	2327      	movs	r3, #39	; 0x27
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4013      	ands	r3, r2
 8004de8:	d00c      	beq.n	8004e04 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2202      	movs	r2, #2
 8004dee:	4313      	orrs	r3, r2
 8004df0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	0092      	lsls	r2, r2, #2
 8004dfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dfc:	2327      	movs	r3, #39	; 0x27
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e04:	2327      	movs	r3, #39	; 0x27
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01d      	beq.n	8004e4a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f7ff fda7 	bl	8004964 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	490d      	ldr	r1, [pc, #52]	; (8004e58 <I2C_IsErrorOccurred+0x1fc>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2241      	movs	r2, #65	; 0x41
 8004e36:	2120      	movs	r1, #32
 8004e38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2242      	movs	r2, #66	; 0x42
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2240      	movs	r2, #64	; 0x40
 8004e46:	2100      	movs	r1, #0
 8004e48:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e4a:	2327      	movs	r3, #39	; 0x27
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	781b      	ldrb	r3, [r3, #0]
}
 8004e50:	0018      	movs	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b00b      	add	sp, #44	; 0x2c
 8004e56:	bd90      	pop	{r4, r7, pc}
 8004e58:	fe00e800 	.word	0xfe00e800

08004e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	0008      	movs	r0, r1
 8004e66:	0011      	movs	r1, r2
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	240a      	movs	r4, #10
 8004e6c:	193b      	adds	r3, r7, r4
 8004e6e:	1c02      	adds	r2, r0, #0
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	2009      	movs	r0, #9
 8004e74:	183b      	adds	r3, r7, r0
 8004e76:	1c0a      	adds	r2, r1, #0
 8004e78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e7a:	193b      	adds	r3, r7, r4
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	059b      	lsls	r3, r3, #22
 8004e80:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e82:	183b      	adds	r3, r7, r0
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	0419      	lsls	r1, r3, #16
 8004e88:	23ff      	movs	r3, #255	; 0xff
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e8e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	4313      	orrs	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea6:	0d51      	lsrs	r1, r2, #21
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	00d2      	lsls	r2, r2, #3
 8004eac:	400a      	ands	r2, r1
 8004eae:	4907      	ldr	r1, [pc, #28]	; (8004ecc <I2C_TransferConfig+0x70>)
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	43d2      	mvns	r2, r2
 8004eb4:	401a      	ands	r2, r3
 8004eb6:	0011      	movs	r1, r2
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b007      	add	sp, #28
 8004ec8:	bd90      	pop	{r4, r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	03ff63ff 	.word	0x03ff63ff

08004ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2241      	movs	r2, #65	; 0x41
 8004ede:	5c9b      	ldrb	r3, [r3, r2]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d138      	bne.n	8004f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	5c9b      	ldrb	r3, [r3, r2]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e032      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2241      	movs	r2, #65	; 0x41
 8004f00:	2124      	movs	r1, #36	; 0x24
 8004f02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2101      	movs	r1, #1
 8004f10:	438a      	bics	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4911      	ldr	r1, [pc, #68]	; (8004f64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2101      	movs	r1, #1
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2241      	movs	r2, #65	; 0x41
 8004f48:	2120      	movs	r1, #32
 8004f4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	2100      	movs	r1, #0
 8004f52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b002      	add	sp, #8
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	ffffefff 	.word	0xffffefff

08004f68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2241      	movs	r2, #65	; 0x41
 8004f76:	5c9b      	ldrb	r3, [r3, r2]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d139      	bne.n	8004ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2240      	movs	r2, #64	; 0x40
 8004f82:	5c9b      	ldrb	r3, [r3, r2]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e033      	b.n	8004ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2240      	movs	r2, #64	; 0x40
 8004f90:	2101      	movs	r1, #1
 8004f92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2241      	movs	r2, #65	; 0x41
 8004f98:	2124      	movs	r1, #36	; 0x24
 8004f9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	438a      	bics	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2101      	movs	r1, #1
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2241      	movs	r2, #65	; 0x41
 8004fe2:	2120      	movs	r1, #32
 8004fe4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2240      	movs	r2, #64	; 0x40
 8004fea:	2100      	movs	r1, #0
 8004fec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b004      	add	sp, #16
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	fffff0ff 	.word	0xfffff0ff

08005000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f000 fbaf 	bl	8005772 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005014:	4bcf      	ldr	r3, [pc, #828]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	220c      	movs	r2, #12
 800501a:	4013      	ands	r3, r2
 800501c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800501e:	4bcd      	ldr	r3, [pc, #820]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	025b      	lsls	r3, r3, #9
 8005026:	4013      	ands	r3, r2
 8005028:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2201      	movs	r2, #1
 8005030:	4013      	ands	r3, r2
 8005032:	d100      	bne.n	8005036 <HAL_RCC_OscConfig+0x36>
 8005034:	e07e      	b.n	8005134 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	2b08      	cmp	r3, #8
 800503a:	d007      	beq.n	800504c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d112      	bne.n	8005068 <HAL_RCC_OscConfig+0x68>
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	025b      	lsls	r3, r3, #9
 8005048:	429a      	cmp	r2, r3
 800504a:	d10d      	bne.n	8005068 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504c:	4bc1      	ldr	r3, [pc, #772]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	029b      	lsls	r3, r3, #10
 8005054:	4013      	ands	r3, r2
 8005056:	d100      	bne.n	800505a <HAL_RCC_OscConfig+0x5a>
 8005058:	e06b      	b.n	8005132 <HAL_RCC_OscConfig+0x132>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d167      	bne.n	8005132 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f000 fb85 	bl	8005772 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	025b      	lsls	r3, r3, #9
 8005070:	429a      	cmp	r2, r3
 8005072:	d107      	bne.n	8005084 <HAL_RCC_OscConfig+0x84>
 8005074:	4bb7      	ldr	r3, [pc, #732]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4bb6      	ldr	r3, [pc, #728]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800507a:	2180      	movs	r1, #128	; 0x80
 800507c:	0249      	lsls	r1, r1, #9
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e027      	b.n	80050d4 <HAL_RCC_OscConfig+0xd4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	23a0      	movs	r3, #160	; 0xa0
 800508a:	02db      	lsls	r3, r3, #11
 800508c:	429a      	cmp	r2, r3
 800508e:	d10e      	bne.n	80050ae <HAL_RCC_OscConfig+0xae>
 8005090:	4bb0      	ldr	r3, [pc, #704]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4baf      	ldr	r3, [pc, #700]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	02c9      	lsls	r1, r1, #11
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	4bad      	ldr	r3, [pc, #692]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4bac      	ldr	r3, [pc, #688]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050a4:	2180      	movs	r1, #128	; 0x80
 80050a6:	0249      	lsls	r1, r1, #9
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e012      	b.n	80050d4 <HAL_RCC_OscConfig+0xd4>
 80050ae:	4ba9      	ldr	r3, [pc, #676]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4ba8      	ldr	r3, [pc, #672]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050b4:	49a8      	ldr	r1, [pc, #672]	; (8005358 <HAL_RCC_OscConfig+0x358>)
 80050b6:	400a      	ands	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	4ba6      	ldr	r3, [pc, #664]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	025b      	lsls	r3, r3, #9
 80050c2:	4013      	ands	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4ba2      	ldr	r3, [pc, #648]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4ba1      	ldr	r3, [pc, #644]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050ce:	49a3      	ldr	r1, [pc, #652]	; (800535c <HAL_RCC_OscConfig+0x35c>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d015      	beq.n	8005108 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fe fe5a 	bl	8003d94 <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050e4:	e009      	b.n	80050fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e6:	f7fe fe55 	bl	8003d94 <HAL_GetTick>
 80050ea:	0002      	movs	r2, r0
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b64      	cmp	r3, #100	; 0x64
 80050f2:	d902      	bls.n	80050fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	f000 fb3c 	bl	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050fa:	4b96      	ldr	r3, [pc, #600]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	029b      	lsls	r3, r3, #10
 8005102:	4013      	ands	r3, r2
 8005104:	d0ef      	beq.n	80050e6 <HAL_RCC_OscConfig+0xe6>
 8005106:	e015      	b.n	8005134 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fe fe44 	bl	8003d94 <HAL_GetTick>
 800510c:	0003      	movs	r3, r0
 800510e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005112:	f7fe fe3f 	bl	8003d94 <HAL_GetTick>
 8005116:	0002      	movs	r2, r0
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b64      	cmp	r3, #100	; 0x64
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e326      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005124:	4b8b      	ldr	r3, [pc, #556]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	029b      	lsls	r3, r3, #10
 800512c:	4013      	ands	r3, r2
 800512e:	d1f0      	bne.n	8005112 <HAL_RCC_OscConfig+0x112>
 8005130:	e000      	b.n	8005134 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005132:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2202      	movs	r2, #2
 800513a:	4013      	ands	r3, r2
 800513c:	d100      	bne.n	8005140 <HAL_RCC_OscConfig+0x140>
 800513e:	e08b      	b.n	8005258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d005      	beq.n	8005158 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d13e      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1d0>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d13b      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005158:	4b7e      	ldr	r3, [pc, #504]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2204      	movs	r2, #4
 800515e:	4013      	ands	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_RCC_OscConfig+0x16c>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e302      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516c:	4b79      	ldr	r3, [pc, #484]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a7b      	ldr	r2, [pc, #492]	; (8005360 <HAL_RCC_OscConfig+0x360>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	021a      	lsls	r2, r3, #8
 800517c:	4b75      	ldr	r3, [pc, #468]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005182:	4b74      	ldr	r3, [pc, #464]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2209      	movs	r2, #9
 8005188:	4393      	bics	r3, r2
 800518a:	0019      	movs	r1, r3
 800518c:	4b71      	ldr	r3, [pc, #452]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	430a      	orrs	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005194:	f000 fc40 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 8005198:	0001      	movs	r1, r0
 800519a:	4b6e      	ldr	r3, [pc, #440]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	220f      	movs	r2, #15
 80051a2:	4013      	ands	r3, r2
 80051a4:	4a6f      	ldr	r2, [pc, #444]	; (8005364 <HAL_RCC_OscConfig+0x364>)
 80051a6:	5cd3      	ldrb	r3, [r2, r3]
 80051a8:	000a      	movs	r2, r1
 80051aa:	40da      	lsrs	r2, r3
 80051ac:	4b6e      	ldr	r3, [pc, #440]	; (8005368 <HAL_RCC_OscConfig+0x368>)
 80051ae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80051b0:	4b6e      	ldr	r3, [pc, #440]	; (800536c <HAL_RCC_OscConfig+0x36c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2513      	movs	r5, #19
 80051b6:	197c      	adds	r4, r7, r5
 80051b8:	0018      	movs	r0, r3
 80051ba:	f7fe fda5 	bl	8003d08 <HAL_InitTick>
 80051be:	0003      	movs	r3, r0
 80051c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80051c2:	197b      	adds	r3, r7, r5
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d046      	beq.n	8005258 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80051ca:	197b      	adds	r3, r7, r5
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	e2d0      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d027      	beq.n	8005226 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80051d6:	4b5f      	ldr	r3, [pc, #380]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2209      	movs	r2, #9
 80051dc:	4393      	bics	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	4b5c      	ldr	r3, [pc, #368]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fe fdd4 	bl	8003d94 <HAL_GetTick>
 80051ec:	0003      	movs	r3, r0
 80051ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fe fdcf 	bl	8003d94 <HAL_GetTick>
 80051f6:	0002      	movs	r2, r0
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e2b6      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005204:	4b53      	ldr	r3, [pc, #332]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2204      	movs	r2, #4
 800520a:	4013      	ands	r3, r2
 800520c:	d0f1      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520e:	4b51      	ldr	r3, [pc, #324]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4a53      	ldr	r2, [pc, #332]	; (8005360 <HAL_RCC_OscConfig+0x360>)
 8005214:	4013      	ands	r3, r2
 8005216:	0019      	movs	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	021a      	lsls	r2, r3, #8
 800521e:	4b4d      	ldr	r3, [pc, #308]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
 8005224:	e018      	b.n	8005258 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b4a      	ldr	r3, [pc, #296]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800522c:	2101      	movs	r1, #1
 800522e:	438a      	bics	r2, r1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fe fdaf 	bl	8003d94 <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800523c:	f7fe fdaa 	bl	8003d94 <HAL_GetTick>
 8005240:	0002      	movs	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e291      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800524e:	4b41      	ldr	r3, [pc, #260]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2204      	movs	r2, #4
 8005254:	4013      	ands	r3, r2
 8005256:	d1f1      	bne.n	800523c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d100      	bne.n	8005264 <HAL_RCC_OscConfig+0x264>
 8005262:	e0a1      	b.n	80053a8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d140      	bne.n	80052ec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800526a:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4013      	ands	r3, r2
 8005274:	d005      	beq.n	8005282 <HAL_RCC_OscConfig+0x282>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e277      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005282:	4b34      	ldr	r3, [pc, #208]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <HAL_RCC_OscConfig+0x370>)
 8005288:	4013      	ands	r3, r2
 800528a:	0019      	movs	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005290:	4b30      	ldr	r3, [pc, #192]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	0a19      	lsrs	r1, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	061a      	lsls	r2, r3, #24
 80052a4:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	0b5b      	lsrs	r3, r3, #13
 80052b0:	3301      	adds	r3, #1
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	0212      	lsls	r2, r2, #8
 80052b6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80052b8:	4b26      	ldr	r3, [pc, #152]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	210f      	movs	r1, #15
 80052c0:	400b      	ands	r3, r1
 80052c2:	4928      	ldr	r1, [pc, #160]	; (8005364 <HAL_RCC_OscConfig+0x364>)
 80052c4:	5ccb      	ldrb	r3, [r1, r3]
 80052c6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <HAL_RCC_OscConfig+0x368>)
 80052ca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80052cc:	4b27      	ldr	r3, [pc, #156]	; (800536c <HAL_RCC_OscConfig+0x36c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2513      	movs	r5, #19
 80052d2:	197c      	adds	r4, r7, r5
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7fe fd17 	bl	8003d08 <HAL_InitTick>
 80052da:	0003      	movs	r3, r0
 80052dc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80052de:	197b      	adds	r3, r7, r5
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d060      	beq.n	80053a8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	e242      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d03f      	beq.n	8005374 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b16      	ldr	r3, [pc, #88]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 80052fa:	2180      	movs	r1, #128	; 0x80
 80052fc:	0049      	lsls	r1, r1, #1
 80052fe:	430a      	orrs	r2, r1
 8005300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005302:	f7fe fd47 	bl	8003d94 <HAL_GetTick>
 8005306:	0003      	movs	r3, r0
 8005308:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800530c:	f7fe fd42 	bl	8003d94 <HAL_GetTick>
 8005310:	0002      	movs	r2, r0
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e229      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4013      	ands	r3, r2
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4a10      	ldr	r2, [pc, #64]	; (8005370 <HAL_RCC_OscConfig+0x370>)
 8005330:	4013      	ands	r3, r2
 8005332:	0019      	movs	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	0a19      	lsrs	r1, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	061a      	lsls	r2, r3, #24
 800534c:	4b01      	ldr	r3, [pc, #4]	; (8005354 <HAL_RCC_OscConfig+0x354>)
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	e029      	b.n	80053a8 <HAL_RCC_OscConfig+0x3a8>
 8005354:	40021000 	.word	0x40021000
 8005358:	fffeffff 	.word	0xfffeffff
 800535c:	fffbffff 	.word	0xfffbffff
 8005360:	ffffe0ff 	.word	0xffffe0ff
 8005364:	0800c7c8 	.word	0x0800c7c8
 8005368:	20000000 	.word	0x20000000
 800536c:	20000004 	.word	0x20000004
 8005370:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005374:	4bbd      	ldr	r3, [pc, #756]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4bbc      	ldr	r3, [pc, #752]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 800537a:	49bd      	ldr	r1, [pc, #756]	; (8005670 <HAL_RCC_OscConfig+0x670>)
 800537c:	400a      	ands	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fe fd08 	bl	8003d94 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800538a:	f7fe fd03 	bl	8003d94 <HAL_GetTick>
 800538e:	0002      	movs	r2, r0
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1ea      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800539c:	4bb3      	ldr	r3, [pc, #716]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4013      	ands	r3, r2
 80053a6:	d1f0      	bne.n	800538a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2208      	movs	r2, #8
 80053ae:	4013      	ands	r3, r2
 80053b0:	d036      	beq.n	8005420 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d019      	beq.n	80053ee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ba:	4bac      	ldr	r3, [pc, #688]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80053bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053be:	4bab      	ldr	r3, [pc, #684]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80053c0:	2101      	movs	r1, #1
 80053c2:	430a      	orrs	r2, r1
 80053c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c6:	f7fe fce5 	bl	8003d94 <HAL_GetTick>
 80053ca:	0003      	movs	r3, r0
 80053cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053d0:	f7fe fce0 	bl	8003d94 <HAL_GetTick>
 80053d4:	0002      	movs	r2, r0
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e1c7      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053e2:	4ba2      	ldr	r3, [pc, #648]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	2202      	movs	r2, #2
 80053e8:	4013      	ands	r3, r2
 80053ea:	d0f1      	beq.n	80053d0 <HAL_RCC_OscConfig+0x3d0>
 80053ec:	e018      	b.n	8005420 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ee:	4b9f      	ldr	r3, [pc, #636]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80053f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053f2:	4b9e      	ldr	r3, [pc, #632]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80053f4:	2101      	movs	r1, #1
 80053f6:	438a      	bics	r2, r1
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fa:	f7fe fccb 	bl	8003d94 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005404:	f7fe fcc6 	bl	8003d94 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e1ad      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005416:	4b95      	ldr	r3, [pc, #596]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541a:	2202      	movs	r2, #2
 800541c:	4013      	ands	r3, r2
 800541e:	d1f1      	bne.n	8005404 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2204      	movs	r2, #4
 8005426:	4013      	ands	r3, r2
 8005428:	d100      	bne.n	800542c <HAL_RCC_OscConfig+0x42c>
 800542a:	e0ae      	b.n	800558a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542c:	2027      	movs	r0, #39	; 0x27
 800542e:	183b      	adds	r3, r7, r0
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005434:	4b8d      	ldr	r3, [pc, #564]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	055b      	lsls	r3, r3, #21
 800543c:	4013      	ands	r3, r2
 800543e:	d109      	bne.n	8005454 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005440:	4b8a      	ldr	r3, [pc, #552]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005444:	4b89      	ldr	r3, [pc, #548]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005446:	2180      	movs	r1, #128	; 0x80
 8005448:	0549      	lsls	r1, r1, #21
 800544a:	430a      	orrs	r2, r1
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800544e:	183b      	adds	r3, r7, r0
 8005450:	2201      	movs	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005454:	4b87      	ldr	r3, [pc, #540]	; (8005674 <HAL_RCC_OscConfig+0x674>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	4013      	ands	r3, r2
 800545e:	d11a      	bne.n	8005496 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005460:	4b84      	ldr	r3, [pc, #528]	; (8005674 <HAL_RCC_OscConfig+0x674>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4b83      	ldr	r3, [pc, #524]	; (8005674 <HAL_RCC_OscConfig+0x674>)
 8005466:	2180      	movs	r1, #128	; 0x80
 8005468:	0049      	lsls	r1, r1, #1
 800546a:	430a      	orrs	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546e:	f7fe fc91 	bl	8003d94 <HAL_GetTick>
 8005472:	0003      	movs	r3, r0
 8005474:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005478:	f7fe fc8c 	bl	8003d94 <HAL_GetTick>
 800547c:	0002      	movs	r2, r0
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	; 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e173      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548a:	4b7a      	ldr	r3, [pc, #488]	; (8005674 <HAL_RCC_OscConfig+0x674>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4013      	ands	r3, r2
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	429a      	cmp	r2, r3
 80054a0:	d107      	bne.n	80054b2 <HAL_RCC_OscConfig+0x4b2>
 80054a2:	4b72      	ldr	r3, [pc, #456]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054a6:	4b71      	ldr	r3, [pc, #452]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	0049      	lsls	r1, r1, #1
 80054ac:	430a      	orrs	r2, r1
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50
 80054b0:	e031      	b.n	8005516 <HAL_RCC_OscConfig+0x516>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4d4>
 80054ba:	4b6c      	ldr	r3, [pc, #432]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054be:	4b6b      	ldr	r3, [pc, #428]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054c0:	496b      	ldr	r1, [pc, #428]	; (8005670 <HAL_RCC_OscConfig+0x670>)
 80054c2:	400a      	ands	r2, r1
 80054c4:	651a      	str	r2, [r3, #80]	; 0x50
 80054c6:	4b69      	ldr	r3, [pc, #420]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ca:	4b68      	ldr	r3, [pc, #416]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054cc:	496a      	ldr	r1, [pc, #424]	; (8005678 <HAL_RCC_OscConfig+0x678>)
 80054ce:	400a      	ands	r2, r1
 80054d0:	651a      	str	r2, [r3, #80]	; 0x50
 80054d2:	e020      	b.n	8005516 <HAL_RCC_OscConfig+0x516>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	23a0      	movs	r3, #160	; 0xa0
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	429a      	cmp	r2, r3
 80054de:	d10e      	bne.n	80054fe <HAL_RCC_OscConfig+0x4fe>
 80054e0:	4b62      	ldr	r3, [pc, #392]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054e4:	4b61      	ldr	r3, [pc, #388]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	00c9      	lsls	r1, r1, #3
 80054ea:	430a      	orrs	r2, r1
 80054ec:	651a      	str	r2, [r3, #80]	; 0x50
 80054ee:	4b5f      	ldr	r3, [pc, #380]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054f2:	4b5e      	ldr	r3, [pc, #376]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	0049      	lsls	r1, r1, #1
 80054f8:	430a      	orrs	r2, r1
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50
 80054fc:	e00b      	b.n	8005516 <HAL_RCC_OscConfig+0x516>
 80054fe:	4b5b      	ldr	r3, [pc, #364]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005502:	4b5a      	ldr	r3, [pc, #360]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005504:	495a      	ldr	r1, [pc, #360]	; (8005670 <HAL_RCC_OscConfig+0x670>)
 8005506:	400a      	ands	r2, r1
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
 800550a:	4b58      	ldr	r3, [pc, #352]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 800550c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800550e:	4b57      	ldr	r3, [pc, #348]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005510:	4959      	ldr	r1, [pc, #356]	; (8005678 <HAL_RCC_OscConfig+0x678>)
 8005512:	400a      	ands	r2, r1
 8005514:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d015      	beq.n	800554a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800551e:	f7fe fc39 	bl	8003d94 <HAL_GetTick>
 8005522:	0003      	movs	r3, r0
 8005524:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005526:	e009      	b.n	800553c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f7fe fc34 	bl	8003d94 <HAL_GetTick>
 800552c:	0002      	movs	r2, r0
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a52      	ldr	r2, [pc, #328]	; (800567c <HAL_RCC_OscConfig+0x67c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e11a      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800553c:	4b4b      	ldr	r3, [pc, #300]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 800553e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4013      	ands	r3, r2
 8005546:	d0ef      	beq.n	8005528 <HAL_RCC_OscConfig+0x528>
 8005548:	e014      	b.n	8005574 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554a:	f7fe fc23 	bl	8003d94 <HAL_GetTick>
 800554e:	0003      	movs	r3, r0
 8005550:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005552:	e009      	b.n	8005568 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005554:	f7fe fc1e 	bl	8003d94 <HAL_GetTick>
 8005558:	0002      	movs	r2, r0
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	4a47      	ldr	r2, [pc, #284]	; (800567c <HAL_RCC_OscConfig+0x67c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e104      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005568:	4b40      	ldr	r3, [pc, #256]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 800556a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4013      	ands	r3, r2
 8005572:	d1ef      	bne.n	8005554 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005574:	2327      	movs	r3, #39	; 0x27
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557e:	4b3b      	ldr	r3, [pc, #236]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005582:	4b3a      	ldr	r3, [pc, #232]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005584:	493e      	ldr	r1, [pc, #248]	; (8005680 <HAL_RCC_OscConfig+0x680>)
 8005586:	400a      	ands	r2, r1
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2220      	movs	r2, #32
 8005590:	4013      	ands	r3, r2
 8005592:	d049      	beq.n	8005628 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d026      	beq.n	80055ea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800559c:	4b33      	ldr	r3, [pc, #204]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80055a2:	2101      	movs	r1, #1
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	4b30      	ldr	r3, [pc, #192]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80055aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ac:	4b2f      	ldr	r3, [pc, #188]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80055ae:	2101      	movs	r1, #1
 80055b0:	430a      	orrs	r2, r1
 80055b2:	635a      	str	r2, [r3, #52]	; 0x34
 80055b4:	4b33      	ldr	r3, [pc, #204]	; (8005684 <HAL_RCC_OscConfig+0x684>)
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	4b32      	ldr	r3, [pc, #200]	; (8005684 <HAL_RCC_OscConfig+0x684>)
 80055ba:	2180      	movs	r1, #128	; 0x80
 80055bc:	0189      	lsls	r1, r1, #6
 80055be:	430a      	orrs	r2, r1
 80055c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c2:	f7fe fbe7 	bl	8003d94 <HAL_GetTick>
 80055c6:	0003      	movs	r3, r0
 80055c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055cc:	f7fe fbe2 	bl	8003d94 <HAL_GetTick>
 80055d0:	0002      	movs	r2, r0
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e0c9      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055de:	4b23      	ldr	r3, [pc, #140]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2202      	movs	r2, #2
 80055e4:	4013      	ands	r3, r2
 80055e6:	d0f1      	beq.n	80055cc <HAL_RCC_OscConfig+0x5cc>
 80055e8:	e01e      	b.n	8005628 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80055ea:	4b20      	ldr	r3, [pc, #128]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	4b1f      	ldr	r3, [pc, #124]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 80055f0:	2101      	movs	r1, #1
 80055f2:	438a      	bics	r2, r1
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	4b23      	ldr	r3, [pc, #140]	; (8005684 <HAL_RCC_OscConfig+0x684>)
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <HAL_RCC_OscConfig+0x684>)
 80055fc:	4922      	ldr	r1, [pc, #136]	; (8005688 <HAL_RCC_OscConfig+0x688>)
 80055fe:	400a      	ands	r2, r1
 8005600:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005602:	f7fe fbc7 	bl	8003d94 <HAL_GetTick>
 8005606:	0003      	movs	r3, r0
 8005608:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800560c:	f7fe fbc2 	bl	8003d94 <HAL_GetTick>
 8005610:	0002      	movs	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e0a9      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2202      	movs	r2, #2
 8005624:	4013      	ands	r3, r2
 8005626:	d1f1      	bne.n	800560c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	2b00      	cmp	r3, #0
 800562e:	d100      	bne.n	8005632 <HAL_RCC_OscConfig+0x632>
 8005630:	e09e      	b.n	8005770 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d100      	bne.n	800563a <HAL_RCC_OscConfig+0x63a>
 8005638:	e077      	b.n	800572a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	2b02      	cmp	r3, #2
 8005640:	d158      	bne.n	80056f4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b09      	ldr	r3, [pc, #36]	; (800566c <HAL_RCC_OscConfig+0x66c>)
 8005648:	4910      	ldr	r1, [pc, #64]	; (800568c <HAL_RCC_OscConfig+0x68c>)
 800564a:	400a      	ands	r2, r1
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fe fba1 	bl	8003d94 <HAL_GetTick>
 8005652:	0003      	movs	r3, r0
 8005654:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005656:	e01b      	b.n	8005690 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005658:	f7fe fb9c 	bl	8003d94 <HAL_GetTick>
 800565c:	0002      	movs	r2, r0
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d914      	bls.n	8005690 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e083      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	40021000 	.word	0x40021000
 8005670:	fffffeff 	.word	0xfffffeff
 8005674:	40007000 	.word	0x40007000
 8005678:	fffffbff 	.word	0xfffffbff
 800567c:	00001388 	.word	0x00001388
 8005680:	efffffff 	.word	0xefffffff
 8005684:	40010000 	.word	0x40010000
 8005688:	ffffdfff 	.word	0xffffdfff
 800568c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005690:	4b3a      	ldr	r3, [pc, #232]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	049b      	lsls	r3, r3, #18
 8005698:	4013      	ands	r3, r2
 800569a:	d1dd      	bne.n	8005658 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a37      	ldr	r2, [pc, #220]	; (8005780 <HAL_RCC_OscConfig+0x780>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	431a      	orrs	r2, r3
 80056b6:	4b31      	ldr	r3, [pc, #196]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 80056b8:	430a      	orrs	r2, r1
 80056ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056bc:	4b2f      	ldr	r3, [pc, #188]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b2e      	ldr	r3, [pc, #184]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 80056c2:	2180      	movs	r1, #128	; 0x80
 80056c4:	0449      	lsls	r1, r1, #17
 80056c6:	430a      	orrs	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fe fb63 	bl	8003d94 <HAL_GetTick>
 80056ce:	0003      	movs	r3, r0
 80056d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d4:	f7fe fb5e 	bl	8003d94 <HAL_GetTick>
 80056d8:	0002      	movs	r2, r0
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e045      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056e6:	4b25      	ldr	r3, [pc, #148]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	2380      	movs	r3, #128	; 0x80
 80056ec:	049b      	lsls	r3, r3, #18
 80056ee:	4013      	ands	r3, r2
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x6d4>
 80056f2:	e03d      	b.n	8005770 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f4:	4b21      	ldr	r3, [pc, #132]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b20      	ldr	r3, [pc, #128]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 80056fa:	4922      	ldr	r1, [pc, #136]	; (8005784 <HAL_RCC_OscConfig+0x784>)
 80056fc:	400a      	ands	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fe fb48 	bl	8003d94 <HAL_GetTick>
 8005704:	0003      	movs	r3, r0
 8005706:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570a:	f7fe fb43 	bl	8003d94 <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e02a      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800571c:	4b17      	ldr	r3, [pc, #92]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	049b      	lsls	r3, r3, #18
 8005724:	4013      	ands	r3, r2
 8005726:	d1f0      	bne.n	800570a <HAL_RCC_OscConfig+0x70a>
 8005728:	e022      	b.n	8005770 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e01d      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005736:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_RCC_OscConfig+0x77c>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	025b      	lsls	r3, r3, #9
 8005742:	401a      	ands	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d10f      	bne.n	800576c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	23f0      	movs	r3, #240	; 0xf0
 8005750:	039b      	lsls	r3, r3, #14
 8005752:	401a      	ands	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d107      	bne.n	800576c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	23c0      	movs	r3, #192	; 0xc0
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	401a      	ands	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b00a      	add	sp, #40	; 0x28
 8005778:	bdb0      	pop	{r4, r5, r7, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	40021000 	.word	0x40021000
 8005780:	ff02ffff 	.word	0xff02ffff
 8005784:	feffffff 	.word	0xfeffffff

08005788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b5b0      	push	{r4, r5, r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e128      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b96      	ldr	r3, [pc, #600]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2201      	movs	r2, #1
 80057a2:	4013      	ands	r3, r2
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d91e      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b93      	ldr	r3, [pc, #588]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4393      	bics	r3, r2
 80057b2:	0019      	movs	r1, r3
 80057b4:	4b90      	ldr	r3, [pc, #576]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057bc:	f7fe faea 	bl	8003d94 <HAL_GetTick>
 80057c0:	0003      	movs	r3, r0
 80057c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c4:	e009      	b.n	80057da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c6:	f7fe fae5 	bl	8003d94 <HAL_GetTick>
 80057ca:	0002      	movs	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	4a8a      	ldr	r2, [pc, #552]	; (80059fc <HAL_RCC_ClockConfig+0x274>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e109      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b87      	ldr	r3, [pc, #540]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2201      	movs	r2, #1
 80057e0:	4013      	ands	r3, r2
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d1ee      	bne.n	80057c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2202      	movs	r2, #2
 80057ee:	4013      	ands	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057f2:	4b83      	ldr	r3, [pc, #524]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	22f0      	movs	r2, #240	; 0xf0
 80057f8:	4393      	bics	r3, r2
 80057fa:	0019      	movs	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	4b7f      	ldr	r3, [pc, #508]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 8005802:	430a      	orrs	r2, r1
 8005804:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	4013      	ands	r3, r2
 800580e:	d100      	bne.n	8005812 <HAL_RCC_ClockConfig+0x8a>
 8005810:	e089      	b.n	8005926 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581a:	4b79      	ldr	r3, [pc, #484]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	4013      	ands	r3, r2
 8005824:	d120      	bne.n	8005868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e0e1      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d107      	bne.n	8005842 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005832:	4b73      	ldr	r3, [pc, #460]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	049b      	lsls	r3, r3, #18
 800583a:	4013      	ands	r3, r2
 800583c:	d114      	bne.n	8005868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e0d5      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d106      	bne.n	8005858 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800584a:	4b6d      	ldr	r3, [pc, #436]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2204      	movs	r2, #4
 8005850:	4013      	ands	r3, r2
 8005852:	d109      	bne.n	8005868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0ca      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005858:	4b69      	ldr	r3, [pc, #420]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	2380      	movs	r3, #128	; 0x80
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4013      	ands	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0c2      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005868:	4b65      	ldr	r3, [pc, #404]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2203      	movs	r2, #3
 800586e:	4393      	bics	r3, r2
 8005870:	0019      	movs	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	4b62      	ldr	r3, [pc, #392]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 8005878:	430a      	orrs	r2, r1
 800587a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800587c:	f7fe fa8a 	bl	8003d94 <HAL_GetTick>
 8005880:	0003      	movs	r3, r0
 8005882:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d111      	bne.n	80058b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800588c:	e009      	b.n	80058a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588e:	f7fe fa81 	bl	8003d94 <HAL_GetTick>
 8005892:	0002      	movs	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	4a58      	ldr	r2, [pc, #352]	; (80059fc <HAL_RCC_ClockConfig+0x274>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e0a5      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058a2:	4b57      	ldr	r3, [pc, #348]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	220c      	movs	r2, #12
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d1ef      	bne.n	800588e <HAL_RCC_ClockConfig+0x106>
 80058ae:	e03a      	b.n	8005926 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d111      	bne.n	80058dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058b8:	e009      	b.n	80058ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ba:	f7fe fa6b 	bl	8003d94 <HAL_GetTick>
 80058be:	0002      	movs	r2, r0
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	4a4d      	ldr	r2, [pc, #308]	; (80059fc <HAL_RCC_ClockConfig+0x274>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e08f      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ce:	4b4c      	ldr	r3, [pc, #304]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	220c      	movs	r2, #12
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d1ef      	bne.n	80058ba <HAL_RCC_ClockConfig+0x132>
 80058da:	e024      	b.n	8005926 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d11b      	bne.n	800591c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058e4:	e009      	b.n	80058fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e6:	f7fe fa55 	bl	8003d94 <HAL_GetTick>
 80058ea:	0002      	movs	r2, r0
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	4a42      	ldr	r2, [pc, #264]	; (80059fc <HAL_RCC_ClockConfig+0x274>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e079      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058fa:	4b41      	ldr	r3, [pc, #260]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	220c      	movs	r2, #12
 8005900:	4013      	ands	r3, r2
 8005902:	2b04      	cmp	r3, #4
 8005904:	d1ef      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x15e>
 8005906:	e00e      	b.n	8005926 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005908:	f7fe fa44 	bl	8003d94 <HAL_GetTick>
 800590c:	0002      	movs	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	4a3a      	ldr	r2, [pc, #232]	; (80059fc <HAL_RCC_ClockConfig+0x274>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e068      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800591c:	4b38      	ldr	r3, [pc, #224]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	220c      	movs	r2, #12
 8005922:	4013      	ands	r3, r2
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005926:	4b34      	ldr	r3, [pc, #208]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2201      	movs	r2, #1
 800592c:	4013      	ands	r3, r2
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d21e      	bcs.n	8005972 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005934:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2201      	movs	r2, #1
 800593a:	4393      	bics	r3, r2
 800593c:	0019      	movs	r1, r3
 800593e:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005946:	f7fe fa25 	bl	8003d94 <HAL_GetTick>
 800594a:	0003      	movs	r3, r0
 800594c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594e:	e009      	b.n	8005964 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005950:	f7fe fa20 	bl	8003d94 <HAL_GetTick>
 8005954:	0002      	movs	r2, r0
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	4a28      	ldr	r2, [pc, #160]	; (80059fc <HAL_RCC_ClockConfig+0x274>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e044      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RCC_ClockConfig+0x270>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2201      	movs	r2, #1
 800596a:	4013      	ands	r3, r2
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d1ee      	bne.n	8005950 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2204      	movs	r2, #4
 8005978:	4013      	ands	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <HAL_RCC_ClockConfig+0x27c>)
 8005982:	4013      	ands	r3, r2
 8005984:	0019      	movs	r1, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800598c:	430a      	orrs	r2, r1
 800598e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2208      	movs	r2, #8
 8005996:	4013      	ands	r3, r2
 8005998:	d00a      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800599a:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <HAL_RCC_ClockConfig+0x280>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	0019      	movs	r1, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	00da      	lsls	r2, r3, #3
 80059aa:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 80059ac:	430a      	orrs	r2, r1
 80059ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059b0:	f000 f832 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 80059b4:	0001      	movs	r1, r0
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_RCC_ClockConfig+0x278>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	220f      	movs	r2, #15
 80059be:	4013      	ands	r3, r2
 80059c0:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <HAL_RCC_ClockConfig+0x284>)
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	000a      	movs	r2, r1
 80059c6:	40da      	lsrs	r2, r3
 80059c8:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <HAL_RCC_ClockConfig+0x288>)
 80059ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059cc:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <HAL_RCC_ClockConfig+0x28c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	250b      	movs	r5, #11
 80059d2:	197c      	adds	r4, r7, r5
 80059d4:	0018      	movs	r0, r3
 80059d6:	f7fe f997 	bl	8003d08 <HAL_InitTick>
 80059da:	0003      	movs	r3, r0
 80059dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80059de:	197b      	adds	r3, r7, r5
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80059e6:	197b      	adds	r3, r7, r5
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	e000      	b.n	80059ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b004      	add	sp, #16
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	40022000 	.word	0x40022000
 80059fc:	00001388 	.word	0x00001388
 8005a00:	40021000 	.word	0x40021000
 8005a04:	fffff8ff 	.word	0xfffff8ff
 8005a08:	ffffc7ff 	.word	0xffffc7ff
 8005a0c:	0800c7c8 	.word	0x0800c7c8
 8005a10:	20000000 	.word	0x20000000
 8005a14:	20000004 	.word	0x20000004

08005a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a18:	b5b0      	push	{r4, r5, r7, lr}
 8005a1a:	b08e      	sub	sp, #56	; 0x38
 8005a1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005a1e:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a26:	230c      	movs	r3, #12
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d014      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x40>
 8005a2e:	d900      	bls.n	8005a32 <HAL_RCC_GetSysClockFreq+0x1a>
 8005a30:	e07b      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x112>
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d002      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x24>
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a3a:	e076      	b.n	8005b2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a3c:	4b44      	ldr	r3, [pc, #272]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2210      	movs	r2, #16
 8005a42:	4013      	ands	r3, r2
 8005a44:	d002      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005a46:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005a4a:	e07c      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005a4c:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x140>)
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a50:	e079      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a52:	4b42      	ldr	r3, [pc, #264]	; (8005b5c <HAL_RCC_GetSysClockFreq+0x144>)
 8005a54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a56:	e076      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	0c9a      	lsrs	r2, r3, #18
 8005a5c:	230f      	movs	r3, #15
 8005a5e:	401a      	ands	r2, r3
 8005a60:	4b3f      	ldr	r3, [pc, #252]	; (8005b60 <HAL_RCC_GetSysClockFreq+0x148>)
 8005a62:	5c9b      	ldrb	r3, [r3, r2]
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	0d9a      	lsrs	r2, r3, #22
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	3301      	adds	r3, #1
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a72:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	025b      	lsls	r3, r3, #9
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d01a      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	4a35      	ldr	r2, [pc, #212]	; (8005b5c <HAL_RCC_GetSysClockFreq+0x144>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	69b8      	ldr	r0, [r7, #24]
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	f7fa fd2b 	bl	80004e8 <__aeabi_lmul>
 8005a92:	0002      	movs	r2, r0
 8005a94:	000b      	movs	r3, r1
 8005a96:	0010      	movs	r0, r2
 8005a98:	0019      	movs	r1, r3
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f7fa fcff 	bl	80004a8 <__aeabi_uldivmod>
 8005aaa:	0002      	movs	r2, r0
 8005aac:	000b      	movs	r3, r1
 8005aae:	0013      	movs	r3, r2
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	e037      	b.n	8005b24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005ab4:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2210      	movs	r2, #16
 8005aba:	4013      	ands	r3, r2
 8005abc:	d01a      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	4a23      	ldr	r2, [pc, #140]	; (8005b54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	68b8      	ldr	r0, [r7, #8]
 8005acc:	68f9      	ldr	r1, [r7, #12]
 8005ace:	f7fa fd0b 	bl	80004e8 <__aeabi_lmul>
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	000b      	movs	r3, r1
 8005ad6:	0010      	movs	r0, r2
 8005ad8:	0019      	movs	r1, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f7fa fcdf 	bl	80004a8 <__aeabi_uldivmod>
 8005aea:	0002      	movs	r2, r0
 8005aec:	000b      	movs	r3, r1
 8005aee:	0013      	movs	r3, r2
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
 8005af2:	e017      	b.n	8005b24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	0018      	movs	r0, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	0019      	movs	r1, r3
 8005afc:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <HAL_RCC_GetSysClockFreq+0x140>)
 8005afe:	2300      	movs	r3, #0
 8005b00:	f7fa fcf2 	bl	80004e8 <__aeabi_lmul>
 8005b04:	0002      	movs	r2, r0
 8005b06:	000b      	movs	r3, r1
 8005b08:	0010      	movs	r0, r2
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	001c      	movs	r4, r3
 8005b10:	2300      	movs	r3, #0
 8005b12:	001d      	movs	r5, r3
 8005b14:	0022      	movs	r2, r4
 8005b16:	002b      	movs	r3, r5
 8005b18:	f7fa fcc6 	bl	80004a8 <__aeabi_uldivmod>
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	000b      	movs	r3, r1
 8005b20:	0013      	movs	r3, r2
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b28:	e00d      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	0b5b      	lsrs	r3, r3, #13
 8005b30:	2207      	movs	r2, #7
 8005b32:	4013      	ands	r3, r2
 8005b34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	0212      	lsls	r2, r2, #8
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	0013      	movs	r3, r2
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b48:	0018      	movs	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	b00e      	add	sp, #56	; 0x38
 8005b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b50:	40021000 	.word	0x40021000
 8005b54:	003d0900 	.word	0x003d0900
 8005b58:	00f42400 	.word	0x00f42400
 8005b5c:	007a1200 	.word	0x007a1200
 8005b60:	0800c7e0 	.word	0x0800c7e0

08005b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b68:	4b02      	ldr	r3, [pc, #8]	; (8005b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	20000000 	.word	0x20000000

08005b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b7c:	f7ff fff2 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005b80:	0001      	movs	r1, r0
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	2207      	movs	r2, #7
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	4a04      	ldr	r2, [pc, #16]	; (8005ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b8e:	5cd3      	ldrb	r3, [r2, r3]
 8005b90:	40d9      	lsrs	r1, r3
 8005b92:	000b      	movs	r3, r1
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	0800c7d8 	.word	0x0800c7d8

08005ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ba8:	f7ff ffdc 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005bac:	0001      	movs	r1, r0
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	0adb      	lsrs	r3, r3, #11
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bba:	5cd3      	ldrb	r3, [r2, r3]
 8005bbc:	40d9      	lsrs	r1, r3
 8005bbe:	000b      	movs	r3, r1
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	0800c7d8 	.word	0x0800c7d8

08005bd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005bd8:	2317      	movs	r3, #23
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2220      	movs	r2, #32
 8005be6:	4013      	ands	r3, r2
 8005be8:	d106      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d100      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005bf6:	e104      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf8:	4bb1      	ldr	r3, [pc, #708]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	055b      	lsls	r3, r3, #21
 8005c00:	4013      	ands	r3, r2
 8005c02:	d10a      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c04:	4bae      	ldr	r3, [pc, #696]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c08:	4bad      	ldr	r3, [pc, #692]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c0a:	2180      	movs	r1, #128	; 0x80
 8005c0c:	0549      	lsls	r1, r1, #21
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005c12:	2317      	movs	r3, #23
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	4baa      	ldr	r3, [pc, #680]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4013      	ands	r3, r2
 8005c24:	d11a      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c26:	4ba7      	ldr	r3, [pc, #668]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4ba6      	ldr	r3, [pc, #664]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c2c:	2180      	movs	r1, #128	; 0x80
 8005c2e:	0049      	lsls	r1, r1, #1
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c34:	f7fe f8ae 	bl	8003d94 <HAL_GetTick>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3c:	e008      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3e:	f7fe f8a9 	bl	8003d94 <HAL_GetTick>
 8005c42:	0002      	movs	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b64      	cmp	r3, #100	; 0x64
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e133      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c50:	4b9c      	ldr	r3, [pc, #624]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005c5c:	4b98      	ldr	r3, [pc, #608]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	23c0      	movs	r3, #192	; 0xc0
 8005c62:	039b      	lsls	r3, r3, #14
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	23c0      	movs	r3, #192	; 0xc0
 8005c6e:	039b      	lsls	r3, r3, #14
 8005c70:	4013      	ands	r3, r2
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d107      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	23c0      	movs	r3, #192	; 0xc0
 8005c7e:	039b      	lsls	r3, r3, #14
 8005c80:	4013      	ands	r3, r2
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d013      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	23c0      	movs	r3, #192	; 0xc0
 8005c8e:	029b      	lsls	r3, r3, #10
 8005c90:	401a      	ands	r2, r3
 8005c92:	23c0      	movs	r3, #192	; 0xc0
 8005c94:	029b      	lsls	r3, r3, #10
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d10a      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c9a:	4b89      	ldr	r3, [pc, #548]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	2380      	movs	r3, #128	; 0x80
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	2380      	movs	r3, #128	; 0x80
 8005ca6:	029b      	lsls	r3, r3, #10
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d101      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e103      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005cb0:	4b83      	ldr	r3, [pc, #524]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cb4:	23c0      	movs	r3, #192	; 0xc0
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d049      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	23c0      	movs	r3, #192	; 0xc0
 8005cc8:	029b      	lsls	r3, r3, #10
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d004      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d10d      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	23c0      	movs	r3, #192	; 0xc0
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d034      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d02e      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005cf8:	4b71      	ldr	r3, [pc, #452]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfc:	4a72      	ldr	r2, [pc, #456]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d02:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d06:	4b6e      	ldr	r3, [pc, #440]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	0309      	lsls	r1, r1, #12
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d10:	4b6b      	ldr	r3, [pc, #428]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d14:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d16:	496d      	ldr	r1, [pc, #436]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005d18:	400a      	ands	r2, r1
 8005d1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005d1c:	4b68      	ldr	r3, [pc, #416]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d014      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2c:	f7fe f832 	bl	8003d94 <HAL_GetTick>
 8005d30:	0003      	movs	r3, r0
 8005d32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d34:	e009      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f7fe f82d 	bl	8003d94 <HAL_GetTick>
 8005d3a:	0002      	movs	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	4a63      	ldr	r2, [pc, #396]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0b6      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d4e:	2380      	movs	r3, #128	; 0x80
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4013      	ands	r3, r2
 8005d54:	d0ef      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d01f      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	23c0      	movs	r3, #192	; 0xc0
 8005d68:	029b      	lsls	r3, r3, #10
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	23c0      	movs	r3, #192	; 0xc0
 8005d6e:	029b      	lsls	r3, r3, #10
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d10c      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005d74:	4b52      	ldr	r3, [pc, #328]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a56      	ldr	r2, [pc, #344]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	23c0      	movs	r3, #192	; 0xc0
 8005d84:	039b      	lsls	r3, r3, #14
 8005d86:	401a      	ands	r2, r3
 8005d88:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	23c0      	movs	r3, #192	; 0xc0
 8005d98:	029b      	lsls	r3, r3, #10
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	4b48      	ldr	r3, [pc, #288]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2220      	movs	r2, #32
 8005da8:	4013      	ands	r3, r2
 8005daa:	d01f      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	23c0      	movs	r3, #192	; 0xc0
 8005db2:	029b      	lsls	r3, r3, #10
 8005db4:	401a      	ands	r2, r3
 8005db6:	23c0      	movs	r3, #192	; 0xc0
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005dbe:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a44      	ldr	r2, [pc, #272]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	0019      	movs	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	23c0      	movs	r3, #192	; 0xc0
 8005dce:	039b      	lsls	r3, r3, #14
 8005dd0:	401a      	ands	r2, r3
 8005dd2:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dda:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	23c0      	movs	r3, #192	; 0xc0
 8005de2:	029b      	lsls	r3, r3, #10
 8005de4:	401a      	ands	r2, r3
 8005de6:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005de8:	430a      	orrs	r2, r1
 8005dea:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dec:	2317      	movs	r3, #23
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d105      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df6:	4b32      	ldr	r3, [pc, #200]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dfc:	4936      	ldr	r1, [pc, #216]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005dfe:	400a      	ands	r2, r1
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2201      	movs	r2, #1
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e10:	2203      	movs	r2, #3
 8005e12:	4393      	bics	r3, r2
 8005e14:	0019      	movs	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2202      	movs	r2, #2
 8005e26:	4013      	ands	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e2a:	4b25      	ldr	r3, [pc, #148]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	220c      	movs	r2, #12
 8005e30:	4393      	bics	r3, r2
 8005e32:	0019      	movs	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2204      	movs	r2, #4
 8005e44:	4013      	ands	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4c:	4a23      	ldr	r2, [pc, #140]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	0019      	movs	r1, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2208      	movs	r2, #8
 8005e62:	4013      	ands	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e66:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	0019      	movs	r1, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699a      	ldr	r2, [r3, #24]
 8005e74:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e76:	430a      	orrs	r2, r1
 8005e78:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2240      	movs	r2, #64	; 0x40
 8005e80:	4013      	ands	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e88:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e94:	430a      	orrs	r2, r1
 8005e96:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2280      	movs	r2, #128	; 0x80
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	0018      	movs	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b006      	add	sp, #24
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40007000 	.word	0x40007000
 8005ec8:	fffcffff 	.word	0xfffcffff
 8005ecc:	fff7ffff 	.word	0xfff7ffff
 8005ed0:	00001388 	.word	0x00001388
 8005ed4:	ffcfffff 	.word	0xffcfffff
 8005ed8:	efffffff 	.word	0xefffffff
 8005edc:	fffff3ff 	.word	0xfffff3ff
 8005ee0:	ffffcfff 	.word	0xffffcfff
 8005ee4:	fbffffff 	.word	0xfbffffff
 8005ee8:	fff3ffff 	.word	0xfff3ffff

08005eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e083      	b.n	8006006 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	2382      	movs	r3, #130	; 0x82
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d009      	beq.n	8005f26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	61da      	str	r2, [r3, #28]
 8005f18:	e005      	b.n	8005f26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2251      	movs	r2, #81	; 0x51
 8005f30:	5c9b      	ldrb	r3, [r3, r2]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d107      	bne.n	8005f48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2250      	movs	r2, #80	; 0x50
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7fd fbec 	bl	8003720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2251      	movs	r2, #81	; 0x51
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2140      	movs	r1, #64	; 0x40
 8005f5c:	438a      	bics	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	2382      	movs	r3, #130	; 0x82
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	401a      	ands	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6899      	ldr	r1, [r3, #8]
 8005f6e:	2384      	movs	r3, #132	; 0x84
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	400b      	ands	r3, r1
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68d9      	ldr	r1, [r3, #12]
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	400b      	ands	r3, r1
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2102      	movs	r1, #2
 8005f88:	400b      	ands	r3, r1
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	2101      	movs	r1, #1
 8005f92:	400b      	ands	r3, r1
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6999      	ldr	r1, [r3, #24]
 8005f9a:	2380      	movs	r3, #128	; 0x80
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	400b      	ands	r3, r1
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	2138      	movs	r1, #56	; 0x38
 8005fa8:	400b      	ands	r3, r1
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	400b      	ands	r3, r1
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	019b      	lsls	r3, r3, #6
 8005fc0:	401a      	ands	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	0019      	movs	r1, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2210      	movs	r2, #16
 8005fdc:	401a      	ands	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4907      	ldr	r1, [pc, #28]	; (8006010 <HAL_SPI_Init+0x124>)
 8005ff2:	400a      	ands	r2, r1
 8005ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2251      	movs	r2, #81	; 0x51
 8006000:	2101      	movs	r1, #1
 8006002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b002      	add	sp, #8
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	fffff7ff 	.word	0xfffff7ff

08006014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e032      	b.n	800608c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2239      	movs	r2, #57	; 0x39
 800602a:	5c9b      	ldrb	r3, [r3, r2]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d107      	bne.n	8006042 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2238      	movs	r2, #56	; 0x38
 8006036:	2100      	movs	r1, #0
 8006038:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f7fd fd1b 	bl	8003a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2239      	movs	r2, #57	; 0x39
 8006046:	2102      	movs	r1, #2
 8006048:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	0019      	movs	r1, r3
 8006054:	0010      	movs	r0, r2
 8006056:	f000 f971 	bl	800633c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	223e      	movs	r2, #62	; 0x3e
 800605e:	2101      	movs	r1, #1
 8006060:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	223a      	movs	r2, #58	; 0x3a
 8006066:	2101      	movs	r1, #1
 8006068:	5499      	strb	r1, [r3, r2]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	223b      	movs	r2, #59	; 0x3b
 800606e:	2101      	movs	r1, #1
 8006070:	5499      	strb	r1, [r3, r2]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	223c      	movs	r2, #60	; 0x3c
 8006076:	2101      	movs	r1, #1
 8006078:	5499      	strb	r1, [r3, r2]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	223d      	movs	r2, #61	; 0x3d
 800607e:	2101      	movs	r1, #1
 8006080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2239      	movs	r2, #57	; 0x39
 8006086:	2101      	movs	r1, #1
 8006088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b002      	add	sp, #8
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2239      	movs	r2, #57	; 0x39
 80060a0:	5c9b      	ldrb	r3, [r3, r2]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d001      	beq.n	80060ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e036      	b.n	800611a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2239      	movs	r2, #57	; 0x39
 80060b0:	2102      	movs	r1, #2
 80060b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2101      	movs	r1, #1
 80060c0:	430a      	orrs	r2, r1
 80060c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	05db      	lsls	r3, r3, #23
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d009      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x50>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <HAL_TIM_Base_Start_IT+0x90>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x50>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a12      	ldr	r2, [pc, #72]	; (8006128 <HAL_TIM_Base_Start_IT+0x94>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d111      	bne.n	8006108 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2207      	movs	r2, #7
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d010      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2101      	movs	r1, #1
 8006102:	430a      	orrs	r2, r1
 8006104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	e007      	b.n	8006118 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2101      	movs	r1, #1
 8006114:	430a      	orrs	r2, r1
 8006116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b004      	add	sp, #16
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	40010800 	.word	0x40010800
 8006128:	40011400 	.word	0x40011400

0800612c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2202      	movs	r2, #2
 800613c:	4013      	ands	r3, r2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d124      	bne.n	800618c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2202      	movs	r2, #2
 800614a:	4013      	ands	r3, r2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d11d      	bne.n	800618c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2203      	movs	r2, #3
 8006156:	4252      	negs	r2, r2
 8006158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2203      	movs	r2, #3
 8006168:	4013      	ands	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	0018      	movs	r0, r3
 8006170:	f000 f8cc 	bl	800630c <HAL_TIM_IC_CaptureCallback>
 8006174:	e007      	b.n	8006186 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0018      	movs	r0, r3
 800617a:	f000 f8bf 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0018      	movs	r0, r3
 8006182:	f000 f8cb 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2204      	movs	r2, #4
 8006194:	4013      	ands	r3, r2
 8006196:	2b04      	cmp	r3, #4
 8006198:	d125      	bne.n	80061e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2204      	movs	r2, #4
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d11e      	bne.n	80061e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2205      	movs	r2, #5
 80061ae:	4252      	negs	r2, r2
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699a      	ldr	r2, [r3, #24]
 80061be:	23c0      	movs	r3, #192	; 0xc0
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4013      	ands	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f000 f89f 	bl	800630c <HAL_TIM_IC_CaptureCallback>
 80061ce:	e007      	b.n	80061e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	0018      	movs	r0, r3
 80061d4:	f000 f892 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	0018      	movs	r0, r3
 80061dc:	f000 f89e 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2208      	movs	r2, #8
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d124      	bne.n	800623e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2208      	movs	r2, #8
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d11d      	bne.n	800623e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2209      	movs	r2, #9
 8006208:	4252      	negs	r2, r2
 800620a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2204      	movs	r2, #4
 8006210:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	2203      	movs	r2, #3
 800621a:	4013      	ands	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0018      	movs	r0, r3
 8006222:	f000 f873 	bl	800630c <HAL_TIM_IC_CaptureCallback>
 8006226:	e007      	b.n	8006238 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	0018      	movs	r0, r3
 800622c:	f000 f866 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	0018      	movs	r0, r3
 8006234:	f000 f872 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2210      	movs	r2, #16
 8006246:	4013      	ands	r3, r2
 8006248:	2b10      	cmp	r3, #16
 800624a:	d125      	bne.n	8006298 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2210      	movs	r2, #16
 8006254:	4013      	ands	r3, r2
 8006256:	2b10      	cmp	r3, #16
 8006258:	d11e      	bne.n	8006298 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2211      	movs	r2, #17
 8006260:	4252      	negs	r2, r2
 8006262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2208      	movs	r2, #8
 8006268:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	23c0      	movs	r3, #192	; 0xc0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4013      	ands	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f000 f846 	bl	800630c <HAL_TIM_IC_CaptureCallback>
 8006280:	e007      	b.n	8006292 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0018      	movs	r0, r3
 8006286:	f000 f839 	bl	80062fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	0018      	movs	r0, r3
 800628e:	f000 f845 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2201      	movs	r2, #1
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d10f      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d108      	bne.n	80062c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2202      	movs	r2, #2
 80062ba:	4252      	negs	r2, r2
 80062bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0018      	movs	r0, r3
 80062c2:	f7fd f919 	bl	80034f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2240      	movs	r2, #64	; 0x40
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	d10f      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2240      	movs	r2, #64	; 0x40
 80062dc:	4013      	ands	r3, r2
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d108      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2241      	movs	r2, #65	; 0x41
 80062e8:	4252      	negs	r2, r2
 80062ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	0018      	movs	r0, r3
 80062f0:	f000 f81c 	bl	800632c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062f4:	46c0      	nop			; (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b002      	add	sp, #8
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	b002      	add	sp, #8
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006314:	46c0      	nop			; (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006324:	46c0      	nop			; (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b002      	add	sp, #8
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}

0800633c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	2380      	movs	r3, #128	; 0x80
 8006350:	05db      	lsls	r3, r3, #23
 8006352:	429a      	cmp	r2, r3
 8006354:	d007      	beq.n	8006366 <TIM_Base_SetConfig+0x2a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1f      	ldr	r2, [pc, #124]	; (80063d8 <TIM_Base_SetConfig+0x9c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_Base_SetConfig+0x2a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1e      	ldr	r2, [pc, #120]	; (80063dc <TIM_Base_SetConfig+0xa0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d108      	bne.n	8006378 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2270      	movs	r2, #112	; 0x70
 800636a:	4393      	bics	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	05db      	lsls	r3, r3, #23
 800637e:	429a      	cmp	r2, r3
 8006380:	d007      	beq.n	8006392 <TIM_Base_SetConfig+0x56>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <TIM_Base_SetConfig+0x9c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_Base_SetConfig+0x56>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a13      	ldr	r2, [pc, #76]	; (80063dc <TIM_Base_SetConfig+0xa0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d108      	bne.n	80063a4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a12      	ldr	r2, [pc, #72]	; (80063e0 <TIM_Base_SetConfig+0xa4>)
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	4393      	bics	r3, r2
 80063aa:	001a      	movs	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	615a      	str	r2, [r3, #20]
}
 80063d0:	46c0      	nop			; (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b004      	add	sp, #16
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40010800 	.word	0x40010800
 80063dc:	40011400 	.word	0x40011400
 80063e0:	fffffcff 	.word	0xfffffcff

080063e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2238      	movs	r2, #56	; 0x38
 80063f2:	5c9b      	ldrb	r3, [r3, r2]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e042      	b.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2238      	movs	r2, #56	; 0x38
 8006400:	2101      	movs	r1, #1
 8006402:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2239      	movs	r2, #57	; 0x39
 8006408:	2102      	movs	r1, #2
 800640a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2270      	movs	r2, #112	; 0x70
 8006420:	4393      	bics	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	05db      	lsls	r3, r3, #23
 800643e:	429a      	cmp	r2, r3
 8006440:	d009      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a11      	ldr	r2, [pc, #68]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d10c      	bne.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	4393      	bics	r3, r2
 800645c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	4313      	orrs	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2239      	movs	r2, #57	; 0x39
 8006474:	2101      	movs	r1, #1
 8006476:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2238      	movs	r2, #56	; 0x38
 800647c:	2100      	movs	r1, #0
 800647e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	b004      	add	sp, #16
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	40010800 	.word	0x40010800
 8006490:	40011400 	.word	0x40011400

08006494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e044      	b.n	8006530 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d107      	bne.n	80064be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2278      	movs	r2, #120	; 0x78
 80064b2:	2100      	movs	r1, #0
 80064b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7fd fb5d 	bl	8003b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2224      	movs	r2, #36	; 0x24
 80064c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2101      	movs	r1, #1
 80064d0:	438a      	bics	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	0018      	movs	r0, r3
 80064d8:	f000 fc2c 	bl	8006d34 <UART_SetConfig>
 80064dc:	0003      	movs	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e024      	b.n	8006530 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fea3 	bl	800723c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	490d      	ldr	r1, [pc, #52]	; (8006538 <HAL_UART_Init+0xa4>)
 8006502:	400a      	ands	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	212a      	movs	r1, #42	; 0x2a
 8006512:	438a      	bics	r2, r1
 8006514:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2101      	movs	r1, #1
 8006522:	430a      	orrs	r2, r1
 8006524:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0018      	movs	r0, r3
 800652a:	f000 ff3b 	bl	80073a4 <UART_CheckIdleState>
 800652e:	0003      	movs	r3, r0
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b002      	add	sp, #8
 8006536:	bd80      	pop	{r7, pc}
 8006538:	ffffb7ff 	.word	0xffffb7ff

0800653c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	; 0x28
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	1dbb      	adds	r3, r7, #6
 800654a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006550:	2b20      	cmp	r3, #32
 8006552:	d000      	beq.n	8006556 <HAL_UART_Transmit+0x1a>
 8006554:	e08c      	b.n	8006670 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_UART_Transmit+0x28>
 800655c:	1dbb      	adds	r3, r7, #6
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e084      	b.n	8006672 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	015b      	lsls	r3, r3, #5
 8006570:	429a      	cmp	r2, r3
 8006572:	d109      	bne.n	8006588 <HAL_UART_Transmit+0x4c>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2201      	movs	r2, #1
 8006580:	4013      	ands	r3, r2
 8006582:	d001      	beq.n	8006588 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e074      	b.n	8006672 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2284      	movs	r2, #132	; 0x84
 800658c:	2100      	movs	r1, #0
 800658e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2221      	movs	r2, #33	; 0x21
 8006594:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006596:	f7fd fbfd 	bl	8003d94 <HAL_GetTick>
 800659a:	0003      	movs	r3, r0
 800659c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1dba      	adds	r2, r7, #6
 80065a2:	2150      	movs	r1, #80	; 0x50
 80065a4:	8812      	ldrh	r2, [r2, #0]
 80065a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1dba      	adds	r2, r7, #6
 80065ac:	2152      	movs	r1, #82	; 0x52
 80065ae:	8812      	ldrh	r2, [r2, #0]
 80065b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	015b      	lsls	r3, r3, #5
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d108      	bne.n	80065d0 <HAL_UART_Transmit+0x94>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	e003      	b.n	80065d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065d8:	e02f      	b.n	800663a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	0013      	movs	r3, r2
 80065e4:	2200      	movs	r2, #0
 80065e6:	2180      	movs	r1, #128	; 0x80
 80065e8:	f000 ff84 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 80065ec:	1e03      	subs	r3, r0, #0
 80065ee:	d004      	beq.n	80065fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e03b      	b.n	8006672 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10b      	bne.n	8006618 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	001a      	movs	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	05d2      	lsls	r2, r2, #23
 800660c:	0dd2      	lsrs	r2, r2, #23
 800660e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	3302      	adds	r3, #2
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	e007      	b.n	8006628 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	3301      	adds	r3, #1
 8006626:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2252      	movs	r2, #82	; 0x52
 800662c:	5a9b      	ldrh	r3, [r3, r2]
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	b299      	uxth	r1, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2252      	movs	r2, #82	; 0x52
 8006638:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2252      	movs	r2, #82	; 0x52
 800663e:	5a9b      	ldrh	r3, [r3, r2]
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1c9      	bne.n	80065da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	0013      	movs	r3, r2
 8006650:	2200      	movs	r2, #0
 8006652:	2140      	movs	r1, #64	; 0x40
 8006654:	f000 ff4e 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 8006658:	1e03      	subs	r3, r0, #0
 800665a:	d004      	beq.n	8006666 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e005      	b.n	8006672 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	e000      	b.n	8006672 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006670:	2302      	movs	r3, #2
  }
}
 8006672:	0018      	movs	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	b008      	add	sp, #32
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	1dbb      	adds	r3, r7, #6
 8006688:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2280      	movs	r2, #128	; 0x80
 800668e:	589b      	ldr	r3, [r3, r2]
 8006690:	2b20      	cmp	r3, #32
 8006692:	d14a      	bne.n	800672a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_Receive_IT+0x26>
 800669a:	1dbb      	adds	r3, r7, #6
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e042      	b.n	800672c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	2380      	movs	r3, #128	; 0x80
 80066ac:	015b      	lsls	r3, r3, #5
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d109      	bne.n	80066c6 <HAL_UART_Receive_IT+0x4a>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2201      	movs	r2, #1
 80066be:	4013      	ands	r3, r2
 80066c0:	d001      	beq.n	80066c6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e032      	b.n	800672c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a18      	ldr	r2, [pc, #96]	; (8006734 <HAL_UART_Receive_IT+0xb8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d020      	beq.n	8006718 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	4013      	ands	r3, r2
 80066e2:	d019      	beq.n	8006718 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e4:	f3ef 8310 	mrs	r3, PRIMASK
 80066e8:	613b      	str	r3, [r7, #16]
  return(result);
 80066ea:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	2301      	movs	r3, #1
 80066f0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f383 8810 	msr	PRIMASK, r3
}
 80066f8:	46c0      	nop			; (mov r8, r8)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	04c9      	lsls	r1, r1, #19
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f383 8810 	msr	PRIMASK, r3
}
 8006716:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006718:	1dbb      	adds	r3, r7, #6
 800671a:	881a      	ldrh	r2, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	0018      	movs	r0, r3
 8006722:	f000 ff51 	bl	80075c8 <UART_Start_Receive_IT>
 8006726:	0003      	movs	r3, r0
 8006728:	e000      	b.n	800672c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800672a:	2302      	movs	r3, #2
  }
}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b008      	add	sp, #32
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40004800 	.word	0x40004800

08006738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006738:	b590      	push	{r4, r7, lr}
 800673a:	b0ab      	sub	sp, #172	; 0xac
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	22a4      	movs	r2, #164	; 0xa4
 8006748:	18b9      	adds	r1, r7, r2
 800674a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	20a0      	movs	r0, #160	; 0xa0
 8006754:	1839      	adds	r1, r7, r0
 8006756:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	219c      	movs	r1, #156	; 0x9c
 8006760:	1879      	adds	r1, r7, r1
 8006762:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006764:	0011      	movs	r1, r2
 8006766:	18bb      	adds	r3, r7, r2
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a99      	ldr	r2, [pc, #612]	; (80069d0 <HAL_UART_IRQHandler+0x298>)
 800676c:	4013      	ands	r3, r2
 800676e:	2298      	movs	r2, #152	; 0x98
 8006770:	18bc      	adds	r4, r7, r2
 8006772:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006774:	18bb      	adds	r3, r7, r2
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d114      	bne.n	80067a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800677c:	187b      	adds	r3, r7, r1
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2220      	movs	r2, #32
 8006782:	4013      	ands	r3, r2
 8006784:	d00f      	beq.n	80067a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006786:	183b      	adds	r3, r7, r0
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2220      	movs	r2, #32
 800678c:	4013      	ands	r3, r2
 800678e:	d00a      	beq.n	80067a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006794:	2b00      	cmp	r3, #0
 8006796:	d100      	bne.n	800679a <HAL_UART_IRQHandler+0x62>
 8006798:	e2a0      	b.n	8006cdc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	0010      	movs	r0, r2
 80067a2:	4798      	blx	r3
      }
      return;
 80067a4:	e29a      	b.n	8006cdc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067a6:	2398      	movs	r3, #152	; 0x98
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d100      	bne.n	80067b2 <HAL_UART_IRQHandler+0x7a>
 80067b0:	e114      	b.n	80069dc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067b2:	239c      	movs	r3, #156	; 0x9c
 80067b4:	18fb      	adds	r3, r7, r3
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2201      	movs	r2, #1
 80067ba:	4013      	ands	r3, r2
 80067bc:	d106      	bne.n	80067cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067be:	23a0      	movs	r3, #160	; 0xa0
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a83      	ldr	r2, [pc, #524]	; (80069d4 <HAL_UART_IRQHandler+0x29c>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	d100      	bne.n	80067cc <HAL_UART_IRQHandler+0x94>
 80067ca:	e107      	b.n	80069dc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067cc:	23a4      	movs	r3, #164	; 0xa4
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2201      	movs	r2, #1
 80067d4:	4013      	ands	r3, r2
 80067d6:	d012      	beq.n	80067fe <HAL_UART_IRQHandler+0xc6>
 80067d8:	23a0      	movs	r3, #160	; 0xa0
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	2380      	movs	r3, #128	; 0x80
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	4013      	ands	r3, r2
 80067e4:	d00b      	beq.n	80067fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2201      	movs	r2, #1
 80067ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2284      	movs	r2, #132	; 0x84
 80067f2:	589b      	ldr	r3, [r3, r2]
 80067f4:	2201      	movs	r2, #1
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2184      	movs	r1, #132	; 0x84
 80067fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067fe:	23a4      	movs	r3, #164	; 0xa4
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2202      	movs	r2, #2
 8006806:	4013      	ands	r3, r2
 8006808:	d011      	beq.n	800682e <HAL_UART_IRQHandler+0xf6>
 800680a:	239c      	movs	r3, #156	; 0x9c
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2201      	movs	r2, #1
 8006812:	4013      	ands	r3, r2
 8006814:	d00b      	beq.n	800682e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2202      	movs	r2, #2
 800681c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2284      	movs	r2, #132	; 0x84
 8006822:	589b      	ldr	r3, [r3, r2]
 8006824:	2204      	movs	r2, #4
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2184      	movs	r1, #132	; 0x84
 800682c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800682e:	23a4      	movs	r3, #164	; 0xa4
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2204      	movs	r2, #4
 8006836:	4013      	ands	r3, r2
 8006838:	d011      	beq.n	800685e <HAL_UART_IRQHandler+0x126>
 800683a:	239c      	movs	r3, #156	; 0x9c
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2201      	movs	r2, #1
 8006842:	4013      	ands	r3, r2
 8006844:	d00b      	beq.n	800685e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2204      	movs	r2, #4
 800684c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2284      	movs	r2, #132	; 0x84
 8006852:	589b      	ldr	r3, [r3, r2]
 8006854:	2202      	movs	r2, #2
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2184      	movs	r1, #132	; 0x84
 800685c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800685e:	23a4      	movs	r3, #164	; 0xa4
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	4013      	ands	r3, r2
 8006868:	d017      	beq.n	800689a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800686a:	23a0      	movs	r3, #160	; 0xa0
 800686c:	18fb      	adds	r3, r7, r3
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2220      	movs	r2, #32
 8006872:	4013      	ands	r3, r2
 8006874:	d105      	bne.n	8006882 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006876:	239c      	movs	r3, #156	; 0x9c
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2201      	movs	r2, #1
 800687e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006880:	d00b      	beq.n	800689a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2208      	movs	r2, #8
 8006888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2284      	movs	r2, #132	; 0x84
 800688e:	589b      	ldr	r3, [r3, r2]
 8006890:	2208      	movs	r2, #8
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2184      	movs	r1, #132	; 0x84
 8006898:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800689a:	23a4      	movs	r3, #164	; 0xa4
 800689c:	18fb      	adds	r3, r7, r3
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	4013      	ands	r3, r2
 80068a6:	d013      	beq.n	80068d0 <HAL_UART_IRQHandler+0x198>
 80068a8:	23a0      	movs	r3, #160	; 0xa0
 80068aa:	18fb      	adds	r3, r7, r3
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	2380      	movs	r3, #128	; 0x80
 80068b0:	04db      	lsls	r3, r3, #19
 80068b2:	4013      	ands	r3, r2
 80068b4:	d00c      	beq.n	80068d0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2280      	movs	r2, #128	; 0x80
 80068bc:	0112      	lsls	r2, r2, #4
 80068be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2284      	movs	r2, #132	; 0x84
 80068c4:	589b      	ldr	r3, [r3, r2]
 80068c6:	2220      	movs	r2, #32
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2184      	movs	r1, #132	; 0x84
 80068ce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2284      	movs	r2, #132	; 0x84
 80068d4:	589b      	ldr	r3, [r3, r2]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d100      	bne.n	80068dc <HAL_UART_IRQHandler+0x1a4>
 80068da:	e201      	b.n	8006ce0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068dc:	23a4      	movs	r3, #164	; 0xa4
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2220      	movs	r2, #32
 80068e4:	4013      	ands	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068e8:	23a0      	movs	r3, #160	; 0xa0
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2220      	movs	r2, #32
 80068f0:	4013      	ands	r3, r2
 80068f2:	d008      	beq.n	8006906 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	0010      	movs	r0, r2
 8006904:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2284      	movs	r2, #132	; 0x84
 800690a:	589b      	ldr	r3, [r3, r2]
 800690c:	2194      	movs	r1, #148	; 0x94
 800690e:	187a      	adds	r2, r7, r1
 8006910:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2240      	movs	r2, #64	; 0x40
 800691a:	4013      	ands	r3, r2
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d004      	beq.n	800692a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006920:	187b      	adds	r3, r7, r1
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2228      	movs	r2, #40	; 0x28
 8006926:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006928:	d047      	beq.n	80069ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	0018      	movs	r0, r3
 800692e:	f000 ff15 	bl	800775c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2240      	movs	r2, #64	; 0x40
 800693a:	4013      	ands	r3, r2
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d137      	bne.n	80069b0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006940:	f3ef 8310 	mrs	r3, PRIMASK
 8006944:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006948:	2090      	movs	r0, #144	; 0x90
 800694a:	183a      	adds	r2, r7, r0
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	2301      	movs	r3, #1
 8006950:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006954:	f383 8810 	msr	PRIMASK, r3
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2140      	movs	r1, #64	; 0x40
 8006966:	438a      	bics	r2, r1
 8006968:	609a      	str	r2, [r3, #8]
 800696a:	183b      	adds	r3, r7, r0
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006972:	f383 8810 	msr	PRIMASK, r3
}
 8006976:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697c:	2b00      	cmp	r3, #0
 800697e:	d012      	beq.n	80069a6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006984:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <HAL_UART_IRQHandler+0x2a0>)
 8006986:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698c:	0018      	movs	r0, r3
 800698e:	f7fd fb4d 	bl	800402c <HAL_DMA_Abort_IT>
 8006992:	1e03      	subs	r3, r0, #0
 8006994:	d01a      	beq.n	80069cc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a0:	0018      	movs	r0, r3
 80069a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	e012      	b.n	80069cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 f9af 	bl	8006d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ae:	e00d      	b.n	80069cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 f9aa 	bl	8006d0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	e008      	b.n	80069cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 f9a5 	bl	8006d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2284      	movs	r2, #132	; 0x84
 80069c6:	2100      	movs	r1, #0
 80069c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80069ca:	e189      	b.n	8006ce0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069cc:	46c0      	nop			; (mov r8, r8)
    return;
 80069ce:	e187      	b.n	8006ce0 <HAL_UART_IRQHandler+0x5a8>
 80069d0:	0000080f 	.word	0x0000080f
 80069d4:	04000120 	.word	0x04000120
 80069d8:	08007825 	.word	0x08007825

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d000      	beq.n	80069e6 <HAL_UART_IRQHandler+0x2ae>
 80069e4:	e13b      	b.n	8006c5e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069e6:	23a4      	movs	r3, #164	; 0xa4
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2210      	movs	r2, #16
 80069ee:	4013      	ands	r3, r2
 80069f0:	d100      	bne.n	80069f4 <HAL_UART_IRQHandler+0x2bc>
 80069f2:	e134      	b.n	8006c5e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069f4:	23a0      	movs	r3, #160	; 0xa0
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2210      	movs	r2, #16
 80069fc:	4013      	ands	r3, r2
 80069fe:	d100      	bne.n	8006a02 <HAL_UART_IRQHandler+0x2ca>
 8006a00:	e12d      	b.n	8006c5e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2210      	movs	r2, #16
 8006a08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2240      	movs	r2, #64	; 0x40
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b40      	cmp	r3, #64	; 0x40
 8006a16:	d000      	beq.n	8006a1a <HAL_UART_IRQHandler+0x2e2>
 8006a18:	e0a1      	b.n	8006b5e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	217e      	movs	r1, #126	; 0x7e
 8006a24:	187b      	adds	r3, r7, r1
 8006a26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006a28:	187b      	adds	r3, r7, r1
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d100      	bne.n	8006a32 <HAL_UART_IRQHandler+0x2fa>
 8006a30:	e158      	b.n	8006ce4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2258      	movs	r2, #88	; 0x58
 8006a36:	5a9b      	ldrh	r3, [r3, r2]
 8006a38:	187a      	adds	r2, r7, r1
 8006a3a:	8812      	ldrh	r2, [r2, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d300      	bcc.n	8006a42 <HAL_UART_IRQHandler+0x30a>
 8006a40:	e150      	b.n	8006ce4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	187a      	adds	r2, r7, r1
 8006a46:	215a      	movs	r1, #90	; 0x5a
 8006a48:	8812      	ldrh	r2, [r2, #0]
 8006a4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2220      	movs	r2, #32
 8006a56:	4013      	ands	r3, r2
 8006a58:	d16f      	bne.n	8006b3a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a64:	2301      	movs	r3, #1
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	f383 8810 	msr	PRIMASK, r3
}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	499e      	ldr	r1, [pc, #632]	; (8006cf4 <HAL_UART_IRQHandler+0x5bc>)
 8006a7c:	400a      	ands	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	f383 8810 	msr	PRIMASK, r3
}
 8006a8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	677b      	str	r3, [r7, #116]	; 0x74
 8006a96:	2301      	movs	r3, #1
 8006a98:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9c:	f383 8810 	msr	PRIMASK, r3
}
 8006aa0:	46c0      	nop			; (mov r8, r8)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2101      	movs	r1, #1
 8006aae:	438a      	bics	r2, r1
 8006ab0:	609a      	str	r2, [r3, #8]
 8006ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab8:	f383 8810 	msr	PRIMASK, r3
}
 8006abc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006abe:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ac8:	2301      	movs	r3, #1
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	f383 8810 	msr	PRIMASK, r3
}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2140      	movs	r1, #64	; 0x40
 8006ae0:	438a      	bics	r2, r1
 8006ae2:	609a      	str	r2, [r3, #8]
 8006ae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aea:	f383 8810 	msr	PRIMASK, r3
}
 8006aee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2280      	movs	r2, #128	; 0x80
 8006af4:	2120      	movs	r1, #32
 8006af6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afe:	f3ef 8310 	mrs	r3, PRIMASK
 8006b02:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b08:	2301      	movs	r3, #1
 8006b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b0e:	f383 8810 	msr	PRIMASK, r3
}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2110      	movs	r1, #16
 8006b20:	438a      	bics	r2, r1
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b26:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2a:	f383 8810 	msr	PRIMASK, r3
}
 8006b2e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b34:	0018      	movs	r0, r3
 8006b36:	f7fd fa39 	bl	8003fac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2258      	movs	r2, #88	; 0x58
 8006b44:	5a9a      	ldrh	r2, [r3, r2]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	215a      	movs	r1, #90	; 0x5a
 8006b4a:	5a5b      	ldrh	r3, [r3, r1]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0011      	movs	r1, r2
 8006b56:	0018      	movs	r0, r3
 8006b58:	f000 f8e0 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b5c:	e0c2      	b.n	8006ce4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2258      	movs	r2, #88	; 0x58
 8006b62:	5a99      	ldrh	r1, [r3, r2]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	225a      	movs	r2, #90	; 0x5a
 8006b68:	5a9b      	ldrh	r3, [r3, r2]
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	208e      	movs	r0, #142	; 0x8e
 8006b6e:	183b      	adds	r3, r7, r0
 8006b70:	1a8a      	subs	r2, r1, r2
 8006b72:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	225a      	movs	r2, #90	; 0x5a
 8006b78:	5a9b      	ldrh	r3, [r3, r2]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d100      	bne.n	8006b82 <HAL_UART_IRQHandler+0x44a>
 8006b80:	e0b2      	b.n	8006ce8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006b82:	183b      	adds	r3, r7, r0
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d100      	bne.n	8006b8c <HAL_UART_IRQHandler+0x454>
 8006b8a:	e0ad      	b.n	8006ce8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b90:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b92:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b94:	2488      	movs	r4, #136	; 0x88
 8006b96:	193a      	adds	r2, r7, r4
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f383 8810 	msr	PRIMASK, r3
}
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4951      	ldr	r1, [pc, #324]	; (8006cf8 <HAL_UART_IRQHandler+0x5c0>)
 8006bb2:	400a      	ands	r2, r1
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	193b      	adds	r3, r7, r4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f383 8810 	msr	PRIMASK, r3
}
 8006bc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bca:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bcc:	2484      	movs	r4, #132	; 0x84
 8006bce:	193a      	adds	r2, r7, r4
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f383 8810 	msr	PRIMASK, r3
}
 8006bdc:	46c0      	nop			; (mov r8, r8)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	438a      	bics	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
 8006bee:	193b      	adds	r3, r7, r4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	f383 8810 	msr	PRIMASK, r3
}
 8006bfa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2280      	movs	r2, #128	; 0x80
 8006c00:	2120      	movs	r1, #32
 8006c02:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c10:	f3ef 8310 	mrs	r3, PRIMASK
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c18:	2480      	movs	r4, #128	; 0x80
 8006c1a:	193a      	adds	r2, r7, r4
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	2301      	movs	r3, #1
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	f383 8810 	msr	PRIMASK, r3
}
 8006c28:	46c0      	nop			; (mov r8, r8)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2110      	movs	r1, #16
 8006c36:	438a      	bics	r2, r1
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	193b      	adds	r3, r7, r4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	f383 8810 	msr	PRIMASK, r3
}
 8006c46:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c4e:	183b      	adds	r3, r7, r0
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	0011      	movs	r1, r2
 8006c56:	0018      	movs	r0, r3
 8006c58:	f000 f860 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c5c:	e044      	b.n	8006ce8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c5e:	23a4      	movs	r3, #164	; 0xa4
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	2380      	movs	r3, #128	; 0x80
 8006c66:	035b      	lsls	r3, r3, #13
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d010      	beq.n	8006c8e <HAL_UART_IRQHandler+0x556>
 8006c6c:	239c      	movs	r3, #156	; 0x9c
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	2380      	movs	r3, #128	; 0x80
 8006c74:	03db      	lsls	r3, r3, #15
 8006c76:	4013      	ands	r3, r2
 8006c78:	d009      	beq.n	8006c8e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2280      	movs	r2, #128	; 0x80
 8006c80:	0352      	lsls	r2, r2, #13
 8006c82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	0018      	movs	r0, r3
 8006c88:	f000 ffd2 	bl	8007c30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c8c:	e02f      	b.n	8006cee <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c8e:	23a4      	movs	r3, #164	; 0xa4
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2280      	movs	r2, #128	; 0x80
 8006c96:	4013      	ands	r3, r2
 8006c98:	d00f      	beq.n	8006cba <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c9a:	23a0      	movs	r3, #160	; 0xa0
 8006c9c:	18fb      	adds	r3, r7, r3
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2280      	movs	r2, #128	; 0x80
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d01e      	beq.n	8006cec <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	0010      	movs	r0, r2
 8006cb6:	4798      	blx	r3
    }
    return;
 8006cb8:	e018      	b.n	8006cec <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cba:	23a4      	movs	r3, #164	; 0xa4
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2240      	movs	r2, #64	; 0x40
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_UART_IRQHandler+0x5b6>
 8006cc6:	23a0      	movs	r3, #160	; 0xa0
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2240      	movs	r2, #64	; 0x40
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d00d      	beq.n	8006cee <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f000 fdbc 	bl	8007852 <UART_EndTransmit_IT>
    return;
 8006cda:	e008      	b.n	8006cee <HAL_UART_IRQHandler+0x5b6>
      return;
 8006cdc:	46c0      	nop			; (mov r8, r8)
 8006cde:	e006      	b.n	8006cee <HAL_UART_IRQHandler+0x5b6>
    return;
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	e004      	b.n	8006cee <HAL_UART_IRQHandler+0x5b6>
      return;
 8006ce4:	46c0      	nop			; (mov r8, r8)
 8006ce6:	e002      	b.n	8006cee <HAL_UART_IRQHandler+0x5b6>
      return;
 8006ce8:	46c0      	nop			; (mov r8, r8)
 8006cea:	e000      	b.n	8006cee <HAL_UART_IRQHandler+0x5b6>
    return;
 8006cec:	46c0      	nop			; (mov r8, r8)
  }

}
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b02b      	add	sp, #172	; 0xac
 8006cf2:	bd90      	pop	{r4, r7, pc}
 8006cf4:	fffffeff 	.word	0xfffffeff
 8006cf8:	fffffedf 	.word	0xfffffedf

08006cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d04:	46c0      	nop			; (mov r8, r8)
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b002      	add	sp, #8
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d14:	46c0      	nop			; (mov r8, r8)
 8006d16:	46bd      	mov	sp, r7
 8006d18:	b002      	add	sp, #8
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	000a      	movs	r2, r1
 8006d26:	1cbb      	adds	r3, r7, #2
 8006d28:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d34:	b5b0      	push	{r4, r5, r7, lr}
 8006d36:	b08e      	sub	sp, #56	; 0x38
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d3c:	231a      	movs	r3, #26
 8006d3e:	2218      	movs	r2, #24
 8006d40:	189b      	adds	r3, r3, r2
 8006d42:	19db      	adds	r3, r3, r7
 8006d44:	2200      	movs	r2, #0
 8006d46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	431a      	orrs	r2, r3
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4ac6      	ldr	r2, [pc, #792]	; (8007080 <UART_SetConfig+0x34c>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	0019      	movs	r1, r3
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d72:	430a      	orrs	r2, r1
 8006d74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4ac1      	ldr	r2, [pc, #772]	; (8007084 <UART_SetConfig+0x350>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	0019      	movs	r1, r3
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4abb      	ldr	r2, [pc, #748]	; (8007088 <UART_SetConfig+0x354>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006da4:	4313      	orrs	r3, r2
 8006da6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	4ab7      	ldr	r2, [pc, #732]	; (800708c <UART_SetConfig+0x358>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	0019      	movs	r1, r3
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4ab3      	ldr	r2, [pc, #716]	; (8007090 <UART_SetConfig+0x35c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d131      	bne.n	8006e2c <UART_SetConfig+0xf8>
 8006dc8:	4bb2      	ldr	r3, [pc, #712]	; (8007094 <UART_SetConfig+0x360>)
 8006dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dcc:	2203      	movs	r2, #3
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d01d      	beq.n	8006e10 <UART_SetConfig+0xdc>
 8006dd4:	d823      	bhi.n	8006e1e <UART_SetConfig+0xea>
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d00c      	beq.n	8006df4 <UART_SetConfig+0xc0>
 8006dda:	d820      	bhi.n	8006e1e <UART_SetConfig+0xea>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <UART_SetConfig+0xb2>
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d00e      	beq.n	8006e02 <UART_SetConfig+0xce>
 8006de4:	e01b      	b.n	8006e1e <UART_SetConfig+0xea>
 8006de6:	231b      	movs	r3, #27
 8006de8:	2218      	movs	r2, #24
 8006dea:	189b      	adds	r3, r3, r2
 8006dec:	19db      	adds	r3, r3, r7
 8006dee:	2201      	movs	r2, #1
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	e09c      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006df4:	231b      	movs	r3, #27
 8006df6:	2218      	movs	r2, #24
 8006df8:	189b      	adds	r3, r3, r2
 8006dfa:	19db      	adds	r3, r3, r7
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	e095      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e02:	231b      	movs	r3, #27
 8006e04:	2218      	movs	r2, #24
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	19db      	adds	r3, r3, r7
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e08e      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e10:	231b      	movs	r3, #27
 8006e12:	2218      	movs	r2, #24
 8006e14:	189b      	adds	r3, r3, r2
 8006e16:	19db      	adds	r3, r3, r7
 8006e18:	2208      	movs	r2, #8
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e087      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e1e:	231b      	movs	r3, #27
 8006e20:	2218      	movs	r2, #24
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	19db      	adds	r3, r3, r7
 8006e26:	2210      	movs	r2, #16
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	e080      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a99      	ldr	r2, [pc, #612]	; (8007098 <UART_SetConfig+0x364>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d131      	bne.n	8006e9a <UART_SetConfig+0x166>
 8006e36:	4b97      	ldr	r3, [pc, #604]	; (8007094 <UART_SetConfig+0x360>)
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	220c      	movs	r2, #12
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b0c      	cmp	r3, #12
 8006e40:	d01d      	beq.n	8006e7e <UART_SetConfig+0x14a>
 8006e42:	d823      	bhi.n	8006e8c <UART_SetConfig+0x158>
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d00c      	beq.n	8006e62 <UART_SetConfig+0x12e>
 8006e48:	d820      	bhi.n	8006e8c <UART_SetConfig+0x158>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <UART_SetConfig+0x120>
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d00e      	beq.n	8006e70 <UART_SetConfig+0x13c>
 8006e52:	e01b      	b.n	8006e8c <UART_SetConfig+0x158>
 8006e54:	231b      	movs	r3, #27
 8006e56:	2218      	movs	r2, #24
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	19db      	adds	r3, r3, r7
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	e065      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e62:	231b      	movs	r3, #27
 8006e64:	2218      	movs	r2, #24
 8006e66:	189b      	adds	r3, r3, r2
 8006e68:	19db      	adds	r3, r3, r7
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e05e      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e70:	231b      	movs	r3, #27
 8006e72:	2218      	movs	r2, #24
 8006e74:	189b      	adds	r3, r3, r2
 8006e76:	19db      	adds	r3, r3, r7
 8006e78:	2204      	movs	r2, #4
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	e057      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e7e:	231b      	movs	r3, #27
 8006e80:	2218      	movs	r2, #24
 8006e82:	189b      	adds	r3, r3, r2
 8006e84:	19db      	adds	r3, r3, r7
 8006e86:	2208      	movs	r2, #8
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	e050      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e8c:	231b      	movs	r3, #27
 8006e8e:	2218      	movs	r2, #24
 8006e90:	189b      	adds	r3, r3, r2
 8006e92:	19db      	adds	r3, r3, r7
 8006e94:	2210      	movs	r2, #16
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e049      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a7a      	ldr	r2, [pc, #488]	; (8007088 <UART_SetConfig+0x354>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d13e      	bne.n	8006f22 <UART_SetConfig+0x1ee>
 8006ea4:	4b7b      	ldr	r3, [pc, #492]	; (8007094 <UART_SetConfig+0x360>)
 8006ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ea8:	23c0      	movs	r3, #192	; 0xc0
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	4013      	ands	r3, r2
 8006eae:	22c0      	movs	r2, #192	; 0xc0
 8006eb0:	0112      	lsls	r2, r2, #4
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d027      	beq.n	8006f06 <UART_SetConfig+0x1d2>
 8006eb6:	22c0      	movs	r2, #192	; 0xc0
 8006eb8:	0112      	lsls	r2, r2, #4
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d82a      	bhi.n	8006f14 <UART_SetConfig+0x1e0>
 8006ebe:	2280      	movs	r2, #128	; 0x80
 8006ec0:	0112      	lsls	r2, r2, #4
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d011      	beq.n	8006eea <UART_SetConfig+0x1b6>
 8006ec6:	2280      	movs	r2, #128	; 0x80
 8006ec8:	0112      	lsls	r2, r2, #4
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d822      	bhi.n	8006f14 <UART_SetConfig+0x1e0>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <UART_SetConfig+0x1a8>
 8006ed2:	2280      	movs	r2, #128	; 0x80
 8006ed4:	00d2      	lsls	r2, r2, #3
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00e      	beq.n	8006ef8 <UART_SetConfig+0x1c4>
 8006eda:	e01b      	b.n	8006f14 <UART_SetConfig+0x1e0>
 8006edc:	231b      	movs	r3, #27
 8006ede:	2218      	movs	r2, #24
 8006ee0:	189b      	adds	r3, r3, r2
 8006ee2:	19db      	adds	r3, r3, r7
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e021      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006eea:	231b      	movs	r3, #27
 8006eec:	2218      	movs	r2, #24
 8006eee:	189b      	adds	r3, r3, r2
 8006ef0:	19db      	adds	r3, r3, r7
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e01a      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006ef8:	231b      	movs	r3, #27
 8006efa:	2218      	movs	r2, #24
 8006efc:	189b      	adds	r3, r3, r2
 8006efe:	19db      	adds	r3, r3, r7
 8006f00:	2204      	movs	r2, #4
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e013      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006f06:	231b      	movs	r3, #27
 8006f08:	2218      	movs	r2, #24
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	19db      	adds	r3, r3, r7
 8006f0e:	2208      	movs	r2, #8
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e00c      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006f14:	231b      	movs	r3, #27
 8006f16:	2218      	movs	r2, #24
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	19db      	adds	r3, r3, r7
 8006f1c:	2210      	movs	r2, #16
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e005      	b.n	8006f2e <UART_SetConfig+0x1fa>
 8006f22:	231b      	movs	r3, #27
 8006f24:	2218      	movs	r2, #24
 8006f26:	189b      	adds	r3, r3, r2
 8006f28:	19db      	adds	r3, r3, r7
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a55      	ldr	r2, [pc, #340]	; (8007088 <UART_SetConfig+0x354>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d000      	beq.n	8006f3a <UART_SetConfig+0x206>
 8006f38:	e084      	b.n	8007044 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f3a:	231b      	movs	r3, #27
 8006f3c:	2218      	movs	r2, #24
 8006f3e:	189b      	adds	r3, r3, r2
 8006f40:	19db      	adds	r3, r3, r7
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d01d      	beq.n	8006f84 <UART_SetConfig+0x250>
 8006f48:	dc20      	bgt.n	8006f8c <UART_SetConfig+0x258>
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d015      	beq.n	8006f7a <UART_SetConfig+0x246>
 8006f4e:	dc1d      	bgt.n	8006f8c <UART_SetConfig+0x258>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <UART_SetConfig+0x226>
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d005      	beq.n	8006f64 <UART_SetConfig+0x230>
 8006f58:	e018      	b.n	8006f8c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f5a:	f7fe fe0d 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 8006f5e:	0003      	movs	r3, r0
 8006f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f62:	e01c      	b.n	8006f9e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f64:	4b4b      	ldr	r3, [pc, #300]	; (8007094 <UART_SetConfig+0x360>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2210      	movs	r2, #16
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d002      	beq.n	8006f74 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006f6e:	4b4b      	ldr	r3, [pc, #300]	; (800709c <UART_SetConfig+0x368>)
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f72:	e014      	b.n	8006f9e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006f74:	4b4a      	ldr	r3, [pc, #296]	; (80070a0 <UART_SetConfig+0x36c>)
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f78:	e011      	b.n	8006f9e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7a:	f7fe fd4d 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 8006f7e:	0003      	movs	r3, r0
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f82:	e00c      	b.n	8006f9e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f8a:	e008      	b.n	8006f9e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006f90:	231a      	movs	r3, #26
 8006f92:	2218      	movs	r2, #24
 8006f94:	189b      	adds	r3, r3, r2
 8006f96:	19db      	adds	r3, r3, r7
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
        break;
 8006f9c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d100      	bne.n	8006fa6 <UART_SetConfig+0x272>
 8006fa4:	e132      	b.n	800720c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	0013      	movs	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d305      	bcc.n	8006fc2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d906      	bls.n	8006fd0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8006fc2:	231a      	movs	r3, #26
 8006fc4:	2218      	movs	r2, #24
 8006fc6:	189b      	adds	r3, r3, r2
 8006fc8:	19db      	adds	r3, r3, r7
 8006fca:	2201      	movs	r2, #1
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	e11d      	b.n	800720c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	6939      	ldr	r1, [r7, #16]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	000b      	movs	r3, r1
 8006fde:	0e1b      	lsrs	r3, r3, #24
 8006fe0:	0010      	movs	r0, r2
 8006fe2:	0205      	lsls	r5, r0, #8
 8006fe4:	431d      	orrs	r5, r3
 8006fe6:	000b      	movs	r3, r1
 8006fe8:	021c      	lsls	r4, r3, #8
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68b8      	ldr	r0, [r7, #8]
 8006ff8:	68f9      	ldr	r1, [r7, #12]
 8006ffa:	1900      	adds	r0, r0, r4
 8006ffc:	4169      	adcs	r1, r5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f7f9 fa4c 	bl	80004a8 <__aeabi_uldivmod>
 8007010:	0002      	movs	r2, r0
 8007012:	000b      	movs	r3, r1
 8007014:	0013      	movs	r3, r2
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701a:	23c0      	movs	r3, #192	; 0xc0
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	429a      	cmp	r2, r3
 8007020:	d309      	bcc.n	8007036 <UART_SetConfig+0x302>
 8007022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	035b      	lsls	r3, r3, #13
 8007028:	429a      	cmp	r2, r3
 800702a:	d204      	bcs.n	8007036 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e0ea      	b.n	800720c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8007036:	231a      	movs	r3, #26
 8007038:	2218      	movs	r2, #24
 800703a:	189b      	adds	r3, r3, r2
 800703c:	19db      	adds	r3, r3, r7
 800703e:	2201      	movs	r2, #1
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e0e3      	b.n	800720c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	429a      	cmp	r2, r3
 800704e:	d000      	beq.n	8007052 <UART_SetConfig+0x31e>
 8007050:	e085      	b.n	800715e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8007052:	231b      	movs	r3, #27
 8007054:	2218      	movs	r2, #24
 8007056:	189b      	adds	r3, r3, r2
 8007058:	19db      	adds	r3, r3, r7
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d837      	bhi.n	80070d0 <UART_SetConfig+0x39c>
 8007060:	009a      	lsls	r2, r3, #2
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <UART_SetConfig+0x370>)
 8007064:	18d3      	adds	r3, r2, r3
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800706a:	f7fe fd85 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 800706e:	0003      	movs	r3, r0
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007072:	e036      	b.n	80070e2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007074:	f7fe fd96 	bl	8005ba4 <HAL_RCC_GetPCLK2Freq>
 8007078:	0003      	movs	r3, r0
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800707c:	e031      	b.n	80070e2 <UART_SetConfig+0x3ae>
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	efff69f3 	.word	0xefff69f3
 8007084:	ffffcfff 	.word	0xffffcfff
 8007088:	40004800 	.word	0x40004800
 800708c:	fffff4ff 	.word	0xfffff4ff
 8007090:	40013800 	.word	0x40013800
 8007094:	40021000 	.word	0x40021000
 8007098:	40004400 	.word	0x40004400
 800709c:	003d0900 	.word	0x003d0900
 80070a0:	00f42400 	.word	0x00f42400
 80070a4:	0800c7ec 	.word	0x0800c7ec
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a8:	4b60      	ldr	r3, [pc, #384]	; (800722c <UART_SetConfig+0x4f8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2210      	movs	r2, #16
 80070ae:	4013      	ands	r3, r2
 80070b0:	d002      	beq.n	80070b8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80070b2:	4b5f      	ldr	r3, [pc, #380]	; (8007230 <UART_SetConfig+0x4fc>)
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070b6:	e014      	b.n	80070e2 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80070b8:	4b5e      	ldr	r3, [pc, #376]	; (8007234 <UART_SetConfig+0x500>)
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070bc:	e011      	b.n	80070e2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070be:	f7fe fcab 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 80070c2:	0003      	movs	r3, r0
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070c6:	e00c      	b.n	80070e2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070ce:	e008      	b.n	80070e2 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80070d4:	231a      	movs	r3, #26
 80070d6:	2218      	movs	r2, #24
 80070d8:	189b      	adds	r3, r3, r2
 80070da:	19db      	adds	r3, r3, r7
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
        break;
 80070e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d100      	bne.n	80070ea <UART_SetConfig+0x3b6>
 80070e8:	e090      	b.n	800720c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	005a      	lsls	r2, r3, #1
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	18d2      	adds	r2, r2, r3
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	0019      	movs	r1, r3
 80070fc:	0010      	movs	r0, r2
 80070fe:	f7f9 f81f 	bl	8000140 <__udivsi3>
 8007102:	0003      	movs	r3, r0
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	2b0f      	cmp	r3, #15
 800710a:	d921      	bls.n	8007150 <UART_SetConfig+0x41c>
 800710c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800710e:	2380      	movs	r3, #128	; 0x80
 8007110:	025b      	lsls	r3, r3, #9
 8007112:	429a      	cmp	r2, r3
 8007114:	d21c      	bcs.n	8007150 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	b29a      	uxth	r2, r3
 800711a:	200e      	movs	r0, #14
 800711c:	2418      	movs	r4, #24
 800711e:	1903      	adds	r3, r0, r4
 8007120:	19db      	adds	r3, r3, r7
 8007122:	210f      	movs	r1, #15
 8007124:	438a      	bics	r2, r1
 8007126:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	2207      	movs	r2, #7
 8007130:	4013      	ands	r3, r2
 8007132:	b299      	uxth	r1, r3
 8007134:	1903      	adds	r3, r0, r4
 8007136:	19db      	adds	r3, r3, r7
 8007138:	1902      	adds	r2, r0, r4
 800713a:	19d2      	adds	r2, r2, r7
 800713c:	8812      	ldrh	r2, [r2, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	1902      	adds	r2, r0, r4
 8007148:	19d2      	adds	r2, r2, r7
 800714a:	8812      	ldrh	r2, [r2, #0]
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	e05d      	b.n	800720c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007150:	231a      	movs	r3, #26
 8007152:	2218      	movs	r2, #24
 8007154:	189b      	adds	r3, r3, r2
 8007156:	19db      	adds	r3, r3, r7
 8007158:	2201      	movs	r2, #1
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	e056      	b.n	800720c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800715e:	231b      	movs	r3, #27
 8007160:	2218      	movs	r2, #24
 8007162:	189b      	adds	r3, r3, r2
 8007164:	19db      	adds	r3, r3, r7
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d822      	bhi.n	80071b2 <UART_SetConfig+0x47e>
 800716c:	009a      	lsls	r2, r3, #2
 800716e:	4b32      	ldr	r3, [pc, #200]	; (8007238 <UART_SetConfig+0x504>)
 8007170:	18d3      	adds	r3, r2, r3
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007176:	f7fe fcff 	bl	8005b78 <HAL_RCC_GetPCLK1Freq>
 800717a:	0003      	movs	r3, r0
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800717e:	e021      	b.n	80071c4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007180:	f7fe fd10 	bl	8005ba4 <HAL_RCC_GetPCLK2Freq>
 8007184:	0003      	movs	r3, r0
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007188:	e01c      	b.n	80071c4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800718a:	4b28      	ldr	r3, [pc, #160]	; (800722c <UART_SetConfig+0x4f8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2210      	movs	r2, #16
 8007190:	4013      	ands	r3, r2
 8007192:	d002      	beq.n	800719a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007194:	4b26      	ldr	r3, [pc, #152]	; (8007230 <UART_SetConfig+0x4fc>)
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007198:	e014      	b.n	80071c4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800719a:	4b26      	ldr	r3, [pc, #152]	; (8007234 <UART_SetConfig+0x500>)
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800719e:	e011      	b.n	80071c4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a0:	f7fe fc3a 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 80071a4:	0003      	movs	r3, r0
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071a8:	e00c      	b.n	80071c4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071aa:	2380      	movs	r3, #128	; 0x80
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071b0:	e008      	b.n	80071c4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80071b6:	231a      	movs	r3, #26
 80071b8:	2218      	movs	r2, #24
 80071ba:	189b      	adds	r3, r3, r2
 80071bc:	19db      	adds	r3, r3, r7
 80071be:	2201      	movs	r2, #1
 80071c0:	701a      	strb	r2, [r3, #0]
        break;
 80071c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d020      	beq.n	800720c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	085a      	lsrs	r2, r3, #1
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	18d2      	adds	r2, r2, r3
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	0019      	movs	r1, r3
 80071da:	0010      	movs	r0, r2
 80071dc:	f7f8 ffb0 	bl	8000140 <__udivsi3>
 80071e0:	0003      	movs	r3, r0
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	2b0f      	cmp	r3, #15
 80071e8:	d90a      	bls.n	8007200 <UART_SetConfig+0x4cc>
 80071ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	025b      	lsls	r3, r3, #9
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d205      	bcs.n	8007200 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	e005      	b.n	800720c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8007200:	231a      	movs	r3, #26
 8007202:	2218      	movs	r2, #24
 8007204:	189b      	adds	r3, r3, r2
 8007206:	19db      	adds	r3, r3, r7
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	2200      	movs	r2, #0
 8007210:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2200      	movs	r2, #0
 8007216:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007218:	231a      	movs	r3, #26
 800721a:	2218      	movs	r2, #24
 800721c:	189b      	adds	r3, r3, r2
 800721e:	19db      	adds	r3, r3, r7
 8007220:	781b      	ldrb	r3, [r3, #0]
}
 8007222:	0018      	movs	r0, r3
 8007224:	46bd      	mov	sp, r7
 8007226:	b00e      	add	sp, #56	; 0x38
 8007228:	bdb0      	pop	{r4, r5, r7, pc}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	40021000 	.word	0x40021000
 8007230:	003d0900 	.word	0x003d0900
 8007234:	00f42400 	.word	0x00f42400
 8007238:	0800c810 	.word	0x0800c810

0800723c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	2201      	movs	r2, #1
 800724a:	4013      	ands	r3, r2
 800724c:	d00b      	beq.n	8007266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4a4a      	ldr	r2, [pc, #296]	; (8007380 <UART_AdvFeatureConfig+0x144>)
 8007256:	4013      	ands	r3, r2
 8007258:	0019      	movs	r1, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2202      	movs	r2, #2
 800726c:	4013      	ands	r3, r2
 800726e:	d00b      	beq.n	8007288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4a43      	ldr	r2, [pc, #268]	; (8007384 <UART_AdvFeatureConfig+0x148>)
 8007278:	4013      	ands	r3, r2
 800727a:	0019      	movs	r1, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2204      	movs	r2, #4
 800728e:	4013      	ands	r3, r2
 8007290:	d00b      	beq.n	80072aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a3b      	ldr	r2, [pc, #236]	; (8007388 <UART_AdvFeatureConfig+0x14c>)
 800729a:	4013      	ands	r3, r2
 800729c:	0019      	movs	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2208      	movs	r2, #8
 80072b0:	4013      	ands	r3, r2
 80072b2:	d00b      	beq.n	80072cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4a34      	ldr	r2, [pc, #208]	; (800738c <UART_AdvFeatureConfig+0x150>)
 80072bc:	4013      	ands	r3, r2
 80072be:	0019      	movs	r1, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2210      	movs	r2, #16
 80072d2:	4013      	ands	r3, r2
 80072d4:	d00b      	beq.n	80072ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4a2c      	ldr	r2, [pc, #176]	; (8007390 <UART_AdvFeatureConfig+0x154>)
 80072de:	4013      	ands	r3, r2
 80072e0:	0019      	movs	r1, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2220      	movs	r2, #32
 80072f4:	4013      	ands	r3, r2
 80072f6:	d00b      	beq.n	8007310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4a25      	ldr	r2, [pc, #148]	; (8007394 <UART_AdvFeatureConfig+0x158>)
 8007300:	4013      	ands	r3, r2
 8007302:	0019      	movs	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2240      	movs	r2, #64	; 0x40
 8007316:	4013      	ands	r3, r2
 8007318:	d01d      	beq.n	8007356 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <UART_AdvFeatureConfig+0x15c>)
 8007322:	4013      	ands	r3, r2
 8007324:	0019      	movs	r1, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007336:	2380      	movs	r3, #128	; 0x80
 8007338:	035b      	lsls	r3, r3, #13
 800733a:	429a      	cmp	r2, r3
 800733c:	d10b      	bne.n	8007356 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4a15      	ldr	r2, [pc, #84]	; (800739c <UART_AdvFeatureConfig+0x160>)
 8007346:	4013      	ands	r3, r2
 8007348:	0019      	movs	r1, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2280      	movs	r2, #128	; 0x80
 800735c:	4013      	ands	r3, r2
 800735e:	d00b      	beq.n	8007378 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4a0e      	ldr	r2, [pc, #56]	; (80073a0 <UART_AdvFeatureConfig+0x164>)
 8007368:	4013      	ands	r3, r2
 800736a:	0019      	movs	r1, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	46bd      	mov	sp, r7
 800737c:	b002      	add	sp, #8
 800737e:	bd80      	pop	{r7, pc}
 8007380:	fffdffff 	.word	0xfffdffff
 8007384:	fffeffff 	.word	0xfffeffff
 8007388:	fffbffff 	.word	0xfffbffff
 800738c:	ffff7fff 	.word	0xffff7fff
 8007390:	ffffefff 	.word	0xffffefff
 8007394:	ffffdfff 	.word	0xffffdfff
 8007398:	ffefffff 	.word	0xffefffff
 800739c:	ff9fffff 	.word	0xff9fffff
 80073a0:	fff7ffff 	.word	0xfff7ffff

080073a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b092      	sub	sp, #72	; 0x48
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2284      	movs	r2, #132	; 0x84
 80073b0:	2100      	movs	r1, #0
 80073b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b4:	f7fc fcee 	bl	8003d94 <HAL_GetTick>
 80073b8:	0003      	movs	r3, r0
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2208      	movs	r2, #8
 80073c4:	4013      	ands	r3, r2
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d12c      	bne.n	8007424 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073cc:	2280      	movs	r2, #128	; 0x80
 80073ce:	0391      	lsls	r1, r2, #14
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4a46      	ldr	r2, [pc, #280]	; (80074ec <UART_CheckIdleState+0x148>)
 80073d4:	9200      	str	r2, [sp, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f000 f88c 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 80073dc:	1e03      	subs	r3, r0, #0
 80073de:	d021      	beq.n	8007424 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e0:	f3ef 8310 	mrs	r3, PRIMASK
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80073e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ea:	2301      	movs	r3, #1
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	f383 8810 	msr	PRIMASK, r3
}
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2180      	movs	r1, #128	; 0x80
 8007402:	438a      	bics	r2, r1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	f383 8810 	msr	PRIMASK, r3
}
 8007410:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2278      	movs	r2, #120	; 0x78
 800741c:	2100      	movs	r1, #0
 800741e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e05f      	b.n	80074e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2204      	movs	r2, #4
 800742c:	4013      	ands	r3, r2
 800742e:	2b04      	cmp	r3, #4
 8007430:	d146      	bne.n	80074c0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007434:	2280      	movs	r2, #128	; 0x80
 8007436:	03d1      	lsls	r1, r2, #15
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4a2c      	ldr	r2, [pc, #176]	; (80074ec <UART_CheckIdleState+0x148>)
 800743c:	9200      	str	r2, [sp, #0]
 800743e:	2200      	movs	r2, #0
 8007440:	f000 f858 	bl	80074f4 <UART_WaitOnFlagUntilTimeout>
 8007444:	1e03      	subs	r3, r0, #0
 8007446:	d03b      	beq.n	80074c0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007448:	f3ef 8310 	mrs	r3, PRIMASK
 800744c:	60fb      	str	r3, [r7, #12]
  return(result);
 800744e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
 8007452:	2301      	movs	r3, #1
 8007454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f383 8810 	msr	PRIMASK, r3
}
 800745c:	46c0      	nop			; (mov r8, r8)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4921      	ldr	r1, [pc, #132]	; (80074f0 <UART_CheckIdleState+0x14c>)
 800746a:	400a      	ands	r2, r1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f383 8810 	msr	PRIMASK, r3
}
 8007478:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800747a:	f3ef 8310 	mrs	r3, PRIMASK
 800747e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007480:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007482:	633b      	str	r3, [r7, #48]	; 0x30
 8007484:	2301      	movs	r3, #1
 8007486:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	f383 8810 	msr	PRIMASK, r3
}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2101      	movs	r1, #1
 800749c:	438a      	bics	r2, r1
 800749e:	609a      	str	r2, [r3, #8]
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	f383 8810 	msr	PRIMASK, r3
}
 80074aa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2280      	movs	r2, #128	; 0x80
 80074b0:	2120      	movs	r1, #32
 80074b2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2278      	movs	r2, #120	; 0x78
 80074b8:	2100      	movs	r1, #0
 80074ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e011      	b.n	80074e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2280      	movs	r2, #128	; 0x80
 80074ca:	2120      	movs	r1, #32
 80074cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2278      	movs	r2, #120	; 0x78
 80074de:	2100      	movs	r1, #0
 80074e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b010      	add	sp, #64	; 0x40
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	01ffffff 	.word	0x01ffffff
 80074f0:	fffffedf 	.word	0xfffffedf

080074f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	1dfb      	adds	r3, r7, #7
 8007502:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007504:	e04b      	b.n	800759e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	3301      	adds	r3, #1
 800750a:	d048      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750c:	f7fc fc42 	bl	8003d94 <HAL_GetTick>
 8007510:	0002      	movs	r2, r0
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	429a      	cmp	r2, r3
 800751a:	d302      	bcc.n	8007522 <UART_WaitOnFlagUntilTimeout+0x2e>
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e04b      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	4013      	ands	r3, r2
 8007530:	d035      	beq.n	800759e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	2208      	movs	r2, #8
 800753a:	4013      	ands	r3, r2
 800753c:	2b08      	cmp	r3, #8
 800753e:	d111      	bne.n	8007564 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2208      	movs	r2, #8
 8007546:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	0018      	movs	r0, r3
 800754c:	f000 f906 	bl	800775c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2284      	movs	r2, #132	; 0x84
 8007554:	2108      	movs	r1, #8
 8007556:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2278      	movs	r2, #120	; 0x78
 800755c:	2100      	movs	r1, #0
 800755e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e02c      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69da      	ldr	r2, [r3, #28]
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	401a      	ands	r2, r3
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	429a      	cmp	r2, r3
 8007576:	d112      	bne.n	800759e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2280      	movs	r2, #128	; 0x80
 800757e:	0112      	lsls	r2, r2, #4
 8007580:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	0018      	movs	r0, r3
 8007586:	f000 f8e9 	bl	800775c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2284      	movs	r2, #132	; 0x84
 800758e:	2120      	movs	r1, #32
 8007590:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2278      	movs	r2, #120	; 0x78
 8007596:	2100      	movs	r1, #0
 8007598:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e00f      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	4013      	ands	r3, r2
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	425a      	negs	r2, r3
 80075ae:	4153      	adcs	r3, r2
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	001a      	movs	r2, r3
 80075b4:	1dfb      	adds	r3, r7, #7
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d0a4      	beq.n	8007506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	0018      	movs	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b004      	add	sp, #16
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b090      	sub	sp, #64	; 0x40
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	1dbb      	adds	r3, r7, #6
 80075d4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1dba      	adds	r2, r7, #6
 80075e0:	2158      	movs	r1, #88	; 0x58
 80075e2:	8812      	ldrh	r2, [r2, #0]
 80075e4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	1dba      	adds	r2, r7, #6
 80075ea:	215a      	movs	r1, #90	; 0x5a
 80075ec:	8812      	ldrh	r2, [r2, #0]
 80075ee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	015b      	lsls	r3, r3, #5
 80075fe:	429a      	cmp	r2, r3
 8007600:	d10d      	bne.n	800761e <UART_Start_Receive_IT+0x56>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d104      	bne.n	8007614 <UART_Start_Receive_IT+0x4c>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	225c      	movs	r2, #92	; 0x5c
 800760e:	4950      	ldr	r1, [pc, #320]	; (8007750 <UART_Start_Receive_IT+0x188>)
 8007610:	5299      	strh	r1, [r3, r2]
 8007612:	e02e      	b.n	8007672 <UART_Start_Receive_IT+0xaa>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	225c      	movs	r2, #92	; 0x5c
 8007618:	21ff      	movs	r1, #255	; 0xff
 800761a:	5299      	strh	r1, [r3, r2]
 800761c:	e029      	b.n	8007672 <UART_Start_Receive_IT+0xaa>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <UART_Start_Receive_IT+0x7a>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <UART_Start_Receive_IT+0x70>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	225c      	movs	r2, #92	; 0x5c
 8007632:	21ff      	movs	r1, #255	; 0xff
 8007634:	5299      	strh	r1, [r3, r2]
 8007636:	e01c      	b.n	8007672 <UART_Start_Receive_IT+0xaa>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	225c      	movs	r2, #92	; 0x5c
 800763c:	217f      	movs	r1, #127	; 0x7f
 800763e:	5299      	strh	r1, [r3, r2]
 8007640:	e017      	b.n	8007672 <UART_Start_Receive_IT+0xaa>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	2380      	movs	r3, #128	; 0x80
 8007648:	055b      	lsls	r3, r3, #21
 800764a:	429a      	cmp	r2, r3
 800764c:	d10d      	bne.n	800766a <UART_Start_Receive_IT+0xa2>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <UART_Start_Receive_IT+0x98>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	225c      	movs	r2, #92	; 0x5c
 800765a:	217f      	movs	r1, #127	; 0x7f
 800765c:	5299      	strh	r1, [r3, r2]
 800765e:	e008      	b.n	8007672 <UART_Start_Receive_IT+0xaa>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	225c      	movs	r2, #92	; 0x5c
 8007664:	213f      	movs	r1, #63	; 0x3f
 8007666:	5299      	strh	r1, [r3, r2]
 8007668:	e003      	b.n	8007672 <UART_Start_Receive_IT+0xaa>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	225c      	movs	r2, #92	; 0x5c
 800766e:	2100      	movs	r1, #0
 8007670:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2284      	movs	r2, #132	; 0x84
 8007676:	2100      	movs	r1, #0
 8007678:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2280      	movs	r2, #128	; 0x80
 800767e:	2122      	movs	r1, #34	; 0x22
 8007680:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007682:	f3ef 8310 	mrs	r3, PRIMASK
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768c:	2301      	movs	r3, #1
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	f383 8810 	msr	PRIMASK, r3
}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689a      	ldr	r2, [r3, #8]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2101      	movs	r1, #1
 80076a4:	430a      	orrs	r2, r1
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	f383 8810 	msr	PRIMASK, r3
}
 80076b2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	015b      	lsls	r3, r3, #5
 80076bc:	429a      	cmp	r2, r3
 80076be:	d107      	bne.n	80076d0 <UART_Start_Receive_IT+0x108>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d103      	bne.n	80076d0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a22      	ldr	r2, [pc, #136]	; (8007754 <UART_Start_Receive_IT+0x18c>)
 80076cc:	669a      	str	r2, [r3, #104]	; 0x68
 80076ce:	e002      	b.n	80076d6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a21      	ldr	r2, [pc, #132]	; (8007758 <UART_Start_Receive_IT+0x190>)
 80076d4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d019      	beq.n	8007712 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076de:	f3ef 8310 	mrs	r3, PRIMASK
 80076e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80076e4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80076e6:	637b      	str	r3, [r7, #52]	; 0x34
 80076e8:	2301      	movs	r3, #1
 80076ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	f383 8810 	msr	PRIMASK, r3
}
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2190      	movs	r1, #144	; 0x90
 8007700:	0049      	lsls	r1, r1, #1
 8007702:	430a      	orrs	r2, r1
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	f383 8810 	msr	PRIMASK, r3
}
 8007710:	e018      	b.n	8007744 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007712:	f3ef 8310 	mrs	r3, PRIMASK
 8007716:	613b      	str	r3, [r7, #16]
  return(result);
 8007718:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800771a:	63bb      	str	r3, [r7, #56]	; 0x38
 800771c:	2301      	movs	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f383 8810 	msr	PRIMASK, r3
}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2120      	movs	r1, #32
 8007734:	430a      	orrs	r2, r1
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f383 8810 	msr	PRIMASK, r3
}
 8007742:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	0018      	movs	r0, r3
 8007748:	46bd      	mov	sp, r7
 800774a:	b010      	add	sp, #64	; 0x40
 800774c:	bd80      	pop	{r7, pc}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	000001ff 	.word	0x000001ff
 8007754:	08007a6d 	.word	0x08007a6d
 8007758:	080078a9 	.word	0x080078a9

0800775c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08e      	sub	sp, #56	; 0x38
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007764:	f3ef 8310 	mrs	r3, PRIMASK
 8007768:	617b      	str	r3, [r7, #20]
  return(result);
 800776a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
 800776e:	2301      	movs	r3, #1
 8007770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	f383 8810 	msr	PRIMASK, r3
}
 8007778:	46c0      	nop			; (mov r8, r8)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4926      	ldr	r1, [pc, #152]	; (8007820 <UART_EndRxTransfer+0xc4>)
 8007786:	400a      	ands	r2, r1
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f383 8810 	msr	PRIMASK, r3
}
 8007794:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007796:	f3ef 8310 	mrs	r3, PRIMASK
 800779a:	623b      	str	r3, [r7, #32]
  return(result);
 800779c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779e:	633b      	str	r3, [r7, #48]	; 0x30
 80077a0:	2301      	movs	r3, #1
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	f383 8810 	msr	PRIMASK, r3
}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2101      	movs	r1, #1
 80077b8:	438a      	bics	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	f383 8810 	msr	PRIMASK, r3
}
 80077c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d118      	bne.n	8007802 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d0:	f3ef 8310 	mrs	r3, PRIMASK
 80077d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80077d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077da:	2301      	movs	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f383 8810 	msr	PRIMASK, r3
}
 80077e4:	46c0      	nop			; (mov r8, r8)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2110      	movs	r1, #16
 80077f2:	438a      	bics	r2, r1
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f383 8810 	msr	PRIMASK, r3
}
 8007800:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2280      	movs	r2, #128	; 0x80
 8007806:	2120      	movs	r1, #32
 8007808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b00e      	add	sp, #56	; 0x38
 800781c:	bd80      	pop	{r7, pc}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	fffffedf 	.word	0xfffffedf

08007824 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	225a      	movs	r2, #90	; 0x5a
 8007836:	2100      	movs	r1, #0
 8007838:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2252      	movs	r2, #82	; 0x52
 800783e:	2100      	movs	r1, #0
 8007840:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	0018      	movs	r0, r3
 8007846:	f7ff fa61 	bl	8006d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	46bd      	mov	sp, r7
 800784e:	b004      	add	sp, #16
 8007850:	bd80      	pop	{r7, pc}

08007852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b086      	sub	sp, #24
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785a:	f3ef 8310 	mrs	r3, PRIMASK
 800785e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007860:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	2301      	movs	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f383 8810 	msr	PRIMASK, r3
}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2140      	movs	r1, #64	; 0x40
 800787c:	438a      	bics	r2, r1
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f383 8810 	msr	PRIMASK, r3
}
 800788a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2220      	movs	r2, #32
 8007890:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	0018      	movs	r0, r3
 800789c:	f7ff fa2e 	bl	8006cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a0:	46c0      	nop			; (mov r8, r8)
 80078a2:	46bd      	mov	sp, r7
 80078a4:	b006      	add	sp, #24
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b094      	sub	sp, #80	; 0x50
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078b0:	204e      	movs	r0, #78	; 0x4e
 80078b2:	183b      	adds	r3, r7, r0
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	215c      	movs	r1, #92	; 0x5c
 80078b8:	5a52      	ldrh	r2, [r2, r1]
 80078ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2280      	movs	r2, #128	; 0x80
 80078c0:	589b      	ldr	r3, [r3, r2]
 80078c2:	2b22      	cmp	r3, #34	; 0x22
 80078c4:	d000      	beq.n	80078c8 <UART_RxISR_8BIT+0x20>
 80078c6:	e0bf      	b.n	8007a48 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ce:	214c      	movs	r1, #76	; 0x4c
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078d4:	187b      	adds	r3, r7, r1
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	183b      	adds	r3, r7, r0
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b2d9      	uxtb	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e4:	400a      	ands	r2, r1
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	225a      	movs	r2, #90	; 0x5a
 80078f8:	5a9b      	ldrh	r3, [r3, r2]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b299      	uxth	r1, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	225a      	movs	r2, #90	; 0x5a
 8007904:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	225a      	movs	r2, #90	; 0x5a
 800790a:	5a9b      	ldrh	r3, [r3, r2]
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d000      	beq.n	8007914 <UART_RxISR_8BIT+0x6c>
 8007912:	e0a1      	b.n	8007a58 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007914:	f3ef 8310 	mrs	r3, PRIMASK
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800791c:	64bb      	str	r3, [r7, #72]	; 0x48
 800791e:	2301      	movs	r3, #1
 8007920:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	f383 8810 	msr	PRIMASK, r3
}
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	494a      	ldr	r1, [pc, #296]	; (8007a60 <UART_RxISR_8BIT+0x1b8>)
 8007936:	400a      	ands	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	f383 8810 	msr	PRIMASK, r3
}
 8007944:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007946:	f3ef 8310 	mrs	r3, PRIMASK
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794e:	647b      	str	r3, [r7, #68]	; 0x44
 8007950:	2301      	movs	r3, #1
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	f383 8810 	msr	PRIMASK, r3
}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2101      	movs	r1, #1
 8007968:	438a      	bics	r2, r1
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	f383 8810 	msr	PRIMASK, r3
}
 8007976:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2280      	movs	r2, #128	; 0x80
 800797c:	2120      	movs	r1, #32
 800797e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a34      	ldr	r2, [pc, #208]	; (8007a64 <UART_RxISR_8BIT+0x1bc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d01f      	beq.n	80079d6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	2380      	movs	r3, #128	; 0x80
 800799e:	041b      	lsls	r3, r3, #16
 80079a0:	4013      	ands	r3, r2
 80079a2:	d018      	beq.n	80079d6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a4:	f3ef 8310 	mrs	r3, PRIMASK
 80079a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80079aa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079ac:	643b      	str	r3, [r7, #64]	; 0x40
 80079ae:	2301      	movs	r3, #1
 80079b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f383 8810 	msr	PRIMASK, r3
}
 80079b8:	46c0      	nop			; (mov r8, r8)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4928      	ldr	r1, [pc, #160]	; (8007a68 <UART_RxISR_8BIT+0x1c0>)
 80079c6:	400a      	ands	r2, r1
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	f383 8810 	msr	PRIMASK, r3
}
 80079d4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d12f      	bne.n	8007a3e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e4:	f3ef 8310 	mrs	r3, PRIMASK
 80079e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80079ea:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ee:	2301      	movs	r3, #1
 80079f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f383 8810 	msr	PRIMASK, r3
}
 80079f8:	46c0      	nop			; (mov r8, r8)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2110      	movs	r1, #16
 8007a06:	438a      	bics	r2, r1
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f383 8810 	msr	PRIMASK, r3
}
 8007a14:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b10      	cmp	r3, #16
 8007a22:	d103      	bne.n	8007a2c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2210      	movs	r2, #16
 8007a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2258      	movs	r2, #88	; 0x58
 8007a30:	5a9a      	ldrh	r2, [r3, r2]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	0011      	movs	r1, r2
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff f970 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a3c:	e00c      	b.n	8007a58 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f7fb fd45 	bl	80034d0 <HAL_UART_RxCpltCallback>
}
 8007a46:	e007      	b.n	8007a58 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2108      	movs	r1, #8
 8007a54:	430a      	orrs	r2, r1
 8007a56:	619a      	str	r2, [r3, #24]
}
 8007a58:	46c0      	nop			; (mov r8, r8)
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b014      	add	sp, #80	; 0x50
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	fffffedf 	.word	0xfffffedf
 8007a64:	40004800 	.word	0x40004800
 8007a68:	fbffffff 	.word	0xfbffffff

08007a6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b094      	sub	sp, #80	; 0x50
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a74:	204e      	movs	r0, #78	; 0x4e
 8007a76:	183b      	adds	r3, r7, r0
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	215c      	movs	r1, #92	; 0x5c
 8007a7c:	5a52      	ldrh	r2, [r2, r1]
 8007a7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2280      	movs	r2, #128	; 0x80
 8007a84:	589b      	ldr	r3, [r3, r2]
 8007a86:	2b22      	cmp	r3, #34	; 0x22
 8007a88:	d000      	beq.n	8007a8c <UART_RxISR_16BIT+0x20>
 8007a8a:	e0bf      	b.n	8007c0c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a92:	214c      	movs	r1, #76	; 0x4c
 8007a94:	187b      	adds	r3, r7, r1
 8007a96:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	183a      	adds	r2, r7, r0
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	8812      	ldrh	r2, [r2, #0]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab2:	1c9a      	adds	r2, r3, #2
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	225a      	movs	r2, #90	; 0x5a
 8007abc:	5a9b      	ldrh	r3, [r3, r2]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b299      	uxth	r1, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	225a      	movs	r2, #90	; 0x5a
 8007ac8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	225a      	movs	r2, #90	; 0x5a
 8007ace:	5a9b      	ldrh	r3, [r3, r2]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d000      	beq.n	8007ad8 <UART_RxISR_16BIT+0x6c>
 8007ad6:	e0a1      	b.n	8007c1c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8007adc:	623b      	str	r3, [r7, #32]
  return(result);
 8007ade:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	f383 8810 	msr	PRIMASK, r3
}
 8007aec:	46c0      	nop			; (mov r8, r8)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	494a      	ldr	r1, [pc, #296]	; (8007c24 <UART_RxISR_16BIT+0x1b8>)
 8007afa:	400a      	ands	r2, r1
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	f383 8810 	msr	PRIMASK, r3
}
 8007b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b12:	643b      	str	r3, [r7, #64]	; 0x40
 8007b14:	2301      	movs	r3, #1
 8007b16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	f383 8810 	msr	PRIMASK, r3
}
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	438a      	bics	r2, r1
 8007b2e:	609a      	str	r2, [r3, #8]
 8007b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	f383 8810 	msr	PRIMASK, r3
}
 8007b3a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2280      	movs	r2, #128	; 0x80
 8007b40:	2120      	movs	r1, #32
 8007b42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a34      	ldr	r2, [pc, #208]	; (8007c28 <UART_RxISR_16BIT+0x1bc>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01f      	beq.n	8007b9a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	2380      	movs	r3, #128	; 0x80
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	4013      	ands	r3, r2
 8007b66:	d018      	beq.n	8007b9a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b68:	f3ef 8310 	mrs	r3, PRIMASK
 8007b6c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b6e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b72:	2301      	movs	r3, #1
 8007b74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	f383 8810 	msr	PRIMASK, r3
}
 8007b7c:	46c0      	nop			; (mov r8, r8)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4928      	ldr	r1, [pc, #160]	; (8007c2c <UART_RxISR_16BIT+0x1c0>)
 8007b8a:	400a      	ands	r2, r1
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	f383 8810 	msr	PRIMASK, r3
}
 8007b98:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d12f      	bne.n	8007c02 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bac:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bae:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f383 8810 	msr	PRIMASK, r3
}
 8007bbc:	46c0      	nop			; (mov r8, r8)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2110      	movs	r1, #16
 8007bca:	438a      	bics	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f383 8810 	msr	PRIMASK, r3
}
 8007bd8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	2210      	movs	r2, #16
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d103      	bne.n	8007bf0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2210      	movs	r2, #16
 8007bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2258      	movs	r2, #88	; 0x58
 8007bf4:	5a9a      	ldrh	r2, [r3, r2]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	0011      	movs	r1, r2
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f7ff f88e 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c00:	e00c      	b.n	8007c1c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f7fb fc63 	bl	80034d0 <HAL_UART_RxCpltCallback>
}
 8007c0a:	e007      	b.n	8007c1c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2108      	movs	r1, #8
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	619a      	str	r2, [r3, #24]
}
 8007c1c:	46c0      	nop			; (mov r8, r8)
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b014      	add	sp, #80	; 0x50
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	fffffedf 	.word	0xfffffedf
 8007c28:	40004800 	.word	0x40004800
 8007c2c:	fbffffff 	.word	0xfbffffff

08007c30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c38:	46c0      	nop			; (mov r8, r8)
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	b002      	add	sp, #8
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <sulp>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	0016      	movs	r6, r2
 8007c44:	000d      	movs	r5, r1
 8007c46:	f003 fecd 	bl	800b9e4 <__ulp>
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	d00d      	beq.n	8007c6a <sulp+0x2a>
 8007c4e:	236b      	movs	r3, #107	; 0x6b
 8007c50:	006a      	lsls	r2, r5, #1
 8007c52:	0d52      	lsrs	r2, r2, #21
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dd07      	ble.n	8007c6a <sulp+0x2a>
 8007c5a:	2400      	movs	r4, #0
 8007c5c:	4a03      	ldr	r2, [pc, #12]	; (8007c6c <sulp+0x2c>)
 8007c5e:	051b      	lsls	r3, r3, #20
 8007c60:	189d      	adds	r5, r3, r2
 8007c62:	002b      	movs	r3, r5
 8007c64:	0022      	movs	r2, r4
 8007c66:	f7fa f953 	bl	8001f10 <__aeabi_dmul>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	3ff00000 	.word	0x3ff00000

08007c70 <_strtod_l>:
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	b0a1      	sub	sp, #132	; 0x84
 8007c74:	9219      	str	r2, [sp, #100]	; 0x64
 8007c76:	2200      	movs	r2, #0
 8007c78:	2600      	movs	r6, #0
 8007c7a:	2700      	movs	r7, #0
 8007c7c:	9004      	str	r0, [sp, #16]
 8007c7e:	9107      	str	r1, [sp, #28]
 8007c80:	921c      	str	r2, [sp, #112]	; 0x70
 8007c82:	911b      	str	r1, [sp, #108]	; 0x6c
 8007c84:	780a      	ldrb	r2, [r1, #0]
 8007c86:	2a2b      	cmp	r2, #43	; 0x2b
 8007c88:	d055      	beq.n	8007d36 <_strtod_l+0xc6>
 8007c8a:	d841      	bhi.n	8007d10 <_strtod_l+0xa0>
 8007c8c:	2a0d      	cmp	r2, #13
 8007c8e:	d83b      	bhi.n	8007d08 <_strtod_l+0x98>
 8007c90:	2a08      	cmp	r2, #8
 8007c92:	d83b      	bhi.n	8007d0c <_strtod_l+0x9c>
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d044      	beq.n	8007d22 <_strtod_l+0xb2>
 8007c98:	2200      	movs	r2, #0
 8007c9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007ca0:	9109      	str	r1, [sp, #36]	; 0x24
 8007ca2:	782a      	ldrb	r2, [r5, #0]
 8007ca4:	2a30      	cmp	r2, #48	; 0x30
 8007ca6:	d000      	beq.n	8007caa <_strtod_l+0x3a>
 8007ca8:	e085      	b.n	8007db6 <_strtod_l+0x146>
 8007caa:	786a      	ldrb	r2, [r5, #1]
 8007cac:	3120      	adds	r1, #32
 8007cae:	438a      	bics	r2, r1
 8007cb0:	2a58      	cmp	r2, #88	; 0x58
 8007cb2:	d000      	beq.n	8007cb6 <_strtod_l+0x46>
 8007cb4:	e075      	b.n	8007da2 <_strtod_l+0x132>
 8007cb6:	9302      	str	r3, [sp, #8]
 8007cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cba:	4a97      	ldr	r2, [pc, #604]	; (8007f18 <_strtod_l+0x2a8>)
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	ab1c      	add	r3, sp, #112	; 0x70
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	9804      	ldr	r0, [sp, #16]
 8007cc4:	ab1d      	add	r3, sp, #116	; 0x74
 8007cc6:	a91b      	add	r1, sp, #108	; 0x6c
 8007cc8:	f002 ff44 	bl	800ab54 <__gethex>
 8007ccc:	230f      	movs	r3, #15
 8007cce:	0002      	movs	r2, r0
 8007cd0:	401a      	ands	r2, r3
 8007cd2:	0004      	movs	r4, r0
 8007cd4:	9205      	str	r2, [sp, #20]
 8007cd6:	4218      	tst	r0, r3
 8007cd8:	d005      	beq.n	8007ce6 <_strtod_l+0x76>
 8007cda:	2a06      	cmp	r2, #6
 8007cdc:	d12d      	bne.n	8007d3a <_strtod_l+0xca>
 8007cde:	1c6b      	adds	r3, r5, #1
 8007ce0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <_strtod_l+0x82>
 8007cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01b      	beq.n	8007d30 <_strtod_l+0xc0>
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	0032      	movs	r2, r6
 8007cfc:	061b      	lsls	r3, r3, #24
 8007cfe:	18fb      	adds	r3, r7, r3
 8007d00:	0010      	movs	r0, r2
 8007d02:	0019      	movs	r1, r3
 8007d04:	b021      	add	sp, #132	; 0x84
 8007d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d08:	2a20      	cmp	r2, #32
 8007d0a:	d1c5      	bne.n	8007c98 <_strtod_l+0x28>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	e7b8      	b.n	8007c82 <_strtod_l+0x12>
 8007d10:	2a2d      	cmp	r2, #45	; 0x2d
 8007d12:	d1c1      	bne.n	8007c98 <_strtod_l+0x28>
 8007d14:	3a2c      	subs	r2, #44	; 0x2c
 8007d16:	920f      	str	r2, [sp, #60]	; 0x3c
 8007d18:	1c4a      	adds	r2, r1, #1
 8007d1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d1c:	784a      	ldrb	r2, [r1, #1]
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	d1bc      	bne.n	8007c9c <_strtod_l+0x2c>
 8007d22:	9b07      	ldr	r3, [sp, #28]
 8007d24:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d26:	2300      	movs	r3, #0
 8007d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1dd      	bne.n	8007cec <_strtod_l+0x7c>
 8007d30:	0032      	movs	r2, r6
 8007d32:	003b      	movs	r3, r7
 8007d34:	e7e4      	b.n	8007d00 <_strtod_l+0x90>
 8007d36:	2200      	movs	r2, #0
 8007d38:	e7ed      	b.n	8007d16 <_strtod_l+0xa6>
 8007d3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d007      	beq.n	8007d50 <_strtod_l+0xe0>
 8007d40:	2135      	movs	r1, #53	; 0x35
 8007d42:	a81e      	add	r0, sp, #120	; 0x78
 8007d44:	f003 ff3f 	bl	800bbc6 <__copybits>
 8007d48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d4a:	9804      	ldr	r0, [sp, #16]
 8007d4c:	f003 fb08 	bl	800b360 <_Bfree>
 8007d50:	9805      	ldr	r0, [sp, #20]
 8007d52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d54:	3801      	subs	r0, #1
 8007d56:	2804      	cmp	r0, #4
 8007d58:	d806      	bhi.n	8007d68 <_strtod_l+0xf8>
 8007d5a:	f7f8 f9dd 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007d5e:	0312      	.short	0x0312
 8007d60:	1e1c      	.short	0x1e1c
 8007d62:	12          	.byte	0x12
 8007d63:	00          	.byte	0x00
 8007d64:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007d66:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007d68:	05e4      	lsls	r4, r4, #23
 8007d6a:	d502      	bpl.n	8007d72 <_strtod_l+0x102>
 8007d6c:	2380      	movs	r3, #128	; 0x80
 8007d6e:	061b      	lsls	r3, r3, #24
 8007d70:	431f      	orrs	r7, r3
 8007d72:	4b6a      	ldr	r3, [pc, #424]	; (8007f1c <_strtod_l+0x2ac>)
 8007d74:	423b      	tst	r3, r7
 8007d76:	d1b6      	bne.n	8007ce6 <_strtod_l+0x76>
 8007d78:	f001 ff4e 	bl	8009c18 <__errno>
 8007d7c:	2322      	movs	r3, #34	; 0x22
 8007d7e:	6003      	str	r3, [r0, #0]
 8007d80:	e7b1      	b.n	8007ce6 <_strtod_l+0x76>
 8007d82:	4967      	ldr	r1, [pc, #412]	; (8007f20 <_strtod_l+0x2b0>)
 8007d84:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d86:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007d88:	400a      	ands	r2, r1
 8007d8a:	4966      	ldr	r1, [pc, #408]	; (8007f24 <_strtod_l+0x2b4>)
 8007d8c:	185b      	adds	r3, r3, r1
 8007d8e:	051b      	lsls	r3, r3, #20
 8007d90:	431a      	orrs	r2, r3
 8007d92:	0017      	movs	r7, r2
 8007d94:	e7e8      	b.n	8007d68 <_strtod_l+0xf8>
 8007d96:	4f61      	ldr	r7, [pc, #388]	; (8007f1c <_strtod_l+0x2ac>)
 8007d98:	e7e6      	b.n	8007d68 <_strtod_l+0xf8>
 8007d9a:	2601      	movs	r6, #1
 8007d9c:	4f62      	ldr	r7, [pc, #392]	; (8007f28 <_strtod_l+0x2b8>)
 8007d9e:	4276      	negs	r6, r6
 8007da0:	e7e2      	b.n	8007d68 <_strtod_l+0xf8>
 8007da2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	921b      	str	r2, [sp, #108]	; 0x6c
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b30      	cmp	r3, #48	; 0x30
 8007dac:	d0f9      	beq.n	8007da2 <_strtod_l+0x132>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d099      	beq.n	8007ce6 <_strtod_l+0x76>
 8007db2:	2301      	movs	r3, #1
 8007db4:	9309      	str	r3, [sp, #36]	; 0x24
 8007db6:	2500      	movs	r5, #0
 8007db8:	220a      	movs	r2, #10
 8007dba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dbc:	950d      	str	r5, [sp, #52]	; 0x34
 8007dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8007dc0:	9508      	str	r5, [sp, #32]
 8007dc2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007dc4:	7804      	ldrb	r4, [r0, #0]
 8007dc6:	0023      	movs	r3, r4
 8007dc8:	3b30      	subs	r3, #48	; 0x30
 8007dca:	b2d9      	uxtb	r1, r3
 8007dcc:	2909      	cmp	r1, #9
 8007dce:	d927      	bls.n	8007e20 <_strtod_l+0x1b0>
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	4956      	ldr	r1, [pc, #344]	; (8007f2c <_strtod_l+0x2bc>)
 8007dd4:	f001 febc 	bl	8009b50 <strncmp>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d031      	beq.n	8007e40 <_strtod_l+0x1d0>
 8007ddc:	2000      	movs	r0, #0
 8007dde:	0023      	movs	r3, r4
 8007de0:	4684      	mov	ip, r0
 8007de2:	9a08      	ldr	r2, [sp, #32]
 8007de4:	900c      	str	r0, [sp, #48]	; 0x30
 8007de6:	9205      	str	r2, [sp, #20]
 8007de8:	2220      	movs	r2, #32
 8007dea:	0019      	movs	r1, r3
 8007dec:	4391      	bics	r1, r2
 8007dee:	000a      	movs	r2, r1
 8007df0:	2100      	movs	r1, #0
 8007df2:	9106      	str	r1, [sp, #24]
 8007df4:	2a45      	cmp	r2, #69	; 0x45
 8007df6:	d000      	beq.n	8007dfa <_strtod_l+0x18a>
 8007df8:	e0c2      	b.n	8007f80 <_strtod_l+0x310>
 8007dfa:	9b05      	ldr	r3, [sp, #20]
 8007dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dfe:	4303      	orrs	r3, r0
 8007e00:	4313      	orrs	r3, r2
 8007e02:	428b      	cmp	r3, r1
 8007e04:	d08d      	beq.n	8007d22 <_strtod_l+0xb2>
 8007e06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e0e:	9b07      	ldr	r3, [sp, #28]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b2b      	cmp	r3, #43	; 0x2b
 8007e14:	d071      	beq.n	8007efa <_strtod_l+0x28a>
 8007e16:	000c      	movs	r4, r1
 8007e18:	2b2d      	cmp	r3, #45	; 0x2d
 8007e1a:	d174      	bne.n	8007f06 <_strtod_l+0x296>
 8007e1c:	2401      	movs	r4, #1
 8007e1e:	e06d      	b.n	8007efc <_strtod_l+0x28c>
 8007e20:	9908      	ldr	r1, [sp, #32]
 8007e22:	2908      	cmp	r1, #8
 8007e24:	dc09      	bgt.n	8007e3a <_strtod_l+0x1ca>
 8007e26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e28:	4351      	muls	r1, r2
 8007e2a:	185b      	adds	r3, r3, r1
 8007e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e2e:	9b08      	ldr	r3, [sp, #32]
 8007e30:	3001      	adds	r0, #1
 8007e32:	3301      	adds	r3, #1
 8007e34:	9308      	str	r3, [sp, #32]
 8007e36:	901b      	str	r0, [sp, #108]	; 0x6c
 8007e38:	e7c3      	b.n	8007dc2 <_strtod_l+0x152>
 8007e3a:	4355      	muls	r5, r2
 8007e3c:	195d      	adds	r5, r3, r5
 8007e3e:	e7f6      	b.n	8007e2e <_strtod_l+0x1be>
 8007e40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e46:	9a08      	ldr	r2, [sp, #32]
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	d03a      	beq.n	8007ec4 <_strtod_l+0x254>
 8007e4e:	900c      	str	r0, [sp, #48]	; 0x30
 8007e50:	9205      	str	r2, [sp, #20]
 8007e52:	001a      	movs	r2, r3
 8007e54:	3a30      	subs	r2, #48	; 0x30
 8007e56:	2a09      	cmp	r2, #9
 8007e58:	d912      	bls.n	8007e80 <_strtod_l+0x210>
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	4694      	mov	ip, r2
 8007e5e:	e7c3      	b.n	8007de8 <_strtod_l+0x178>
 8007e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e62:	3001      	adds	r0, #1
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b30      	cmp	r3, #48	; 0x30
 8007e6c:	d0f8      	beq.n	8007e60 <_strtod_l+0x1f0>
 8007e6e:	001a      	movs	r2, r3
 8007e70:	3a31      	subs	r2, #49	; 0x31
 8007e72:	2a08      	cmp	r2, #8
 8007e74:	d83c      	bhi.n	8007ef0 <_strtod_l+0x280>
 8007e76:	900c      	str	r0, [sp, #48]	; 0x30
 8007e78:	2000      	movs	r0, #0
 8007e7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e7c:	9005      	str	r0, [sp, #20]
 8007e7e:	9210      	str	r2, [sp, #64]	; 0x40
 8007e80:	001a      	movs	r2, r3
 8007e82:	1c41      	adds	r1, r0, #1
 8007e84:	3a30      	subs	r2, #48	; 0x30
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	d016      	beq.n	8007eb8 <_strtod_l+0x248>
 8007e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e8c:	185b      	adds	r3, r3, r1
 8007e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e90:	9b05      	ldr	r3, [sp, #20]
 8007e92:	210a      	movs	r1, #10
 8007e94:	469c      	mov	ip, r3
 8007e96:	4484      	add	ip, r0
 8007e98:	4563      	cmp	r3, ip
 8007e9a:	d115      	bne.n	8007ec8 <_strtod_l+0x258>
 8007e9c:	9905      	ldr	r1, [sp, #20]
 8007e9e:	9b05      	ldr	r3, [sp, #20]
 8007ea0:	3101      	adds	r1, #1
 8007ea2:	1809      	adds	r1, r1, r0
 8007ea4:	181b      	adds	r3, r3, r0
 8007ea6:	9105      	str	r1, [sp, #20]
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	dc19      	bgt.n	8007ee0 <_strtod_l+0x270>
 8007eac:	230a      	movs	r3, #10
 8007eae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007eb0:	434b      	muls	r3, r1
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	18d3      	adds	r3, r2, r3
 8007eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007eb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eba:	0008      	movs	r0, r1
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	e7c6      	b.n	8007e52 <_strtod_l+0x1e2>
 8007ec4:	9808      	ldr	r0, [sp, #32]
 8007ec6:	e7d0      	b.n	8007e6a <_strtod_l+0x1fa>
 8007ec8:	1c5c      	adds	r4, r3, #1
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	dc04      	bgt.n	8007ed8 <_strtod_l+0x268>
 8007ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed0:	434b      	muls	r3, r1
 8007ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ed4:	0023      	movs	r3, r4
 8007ed6:	e7df      	b.n	8007e98 <_strtod_l+0x228>
 8007ed8:	2c10      	cmp	r4, #16
 8007eda:	dcfb      	bgt.n	8007ed4 <_strtod_l+0x264>
 8007edc:	434d      	muls	r5, r1
 8007ede:	e7f9      	b.n	8007ed4 <_strtod_l+0x264>
 8007ee0:	9b05      	ldr	r3, [sp, #20]
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	dce7      	bgt.n	8007eb8 <_strtod_l+0x248>
 8007ee8:	230a      	movs	r3, #10
 8007eea:	435d      	muls	r5, r3
 8007eec:	1955      	adds	r5, r2, r5
 8007eee:	e7e3      	b.n	8007eb8 <_strtod_l+0x248>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	920c      	str	r2, [sp, #48]	; 0x30
 8007ef4:	9205      	str	r2, [sp, #20]
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	e7b0      	b.n	8007e5c <_strtod_l+0x1ec>
 8007efa:	2400      	movs	r4, #0
 8007efc:	9b07      	ldr	r3, [sp, #28]
 8007efe:	3302      	adds	r3, #2
 8007f00:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f02:	9b07      	ldr	r3, [sp, #28]
 8007f04:	789b      	ldrb	r3, [r3, #2]
 8007f06:	001a      	movs	r2, r3
 8007f08:	3a30      	subs	r2, #48	; 0x30
 8007f0a:	2a09      	cmp	r2, #9
 8007f0c:	d914      	bls.n	8007f38 <_strtod_l+0x2c8>
 8007f0e:	9a07      	ldr	r2, [sp, #28]
 8007f10:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f12:	2200      	movs	r2, #0
 8007f14:	e033      	b.n	8007f7e <_strtod_l+0x30e>
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	0800c838 	.word	0x0800c838
 8007f1c:	7ff00000 	.word	0x7ff00000
 8007f20:	ffefffff 	.word	0xffefffff
 8007f24:	00000433 	.word	0x00000433
 8007f28:	7fffffff 	.word	0x7fffffff
 8007f2c:	0800c834 	.word	0x0800c834
 8007f30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	921b      	str	r2, [sp, #108]	; 0x6c
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b30      	cmp	r3, #48	; 0x30
 8007f3a:	d0f9      	beq.n	8007f30 <_strtod_l+0x2c0>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	9206      	str	r2, [sp, #24]
 8007f40:	001a      	movs	r2, r3
 8007f42:	3a31      	subs	r2, #49	; 0x31
 8007f44:	2a08      	cmp	r2, #8
 8007f46:	d81b      	bhi.n	8007f80 <_strtod_l+0x310>
 8007f48:	3b30      	subs	r3, #48	; 0x30
 8007f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f4e:	9306      	str	r3, [sp, #24]
 8007f50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f52:	1c59      	adds	r1, r3, #1
 8007f54:	911b      	str	r1, [sp, #108]	; 0x6c
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	001a      	movs	r2, r3
 8007f5a:	3a30      	subs	r2, #48	; 0x30
 8007f5c:	2a09      	cmp	r2, #9
 8007f5e:	d93a      	bls.n	8007fd6 <_strtod_l+0x366>
 8007f60:	9a06      	ldr	r2, [sp, #24]
 8007f62:	1a8a      	subs	r2, r1, r2
 8007f64:	49b2      	ldr	r1, [pc, #712]	; (8008230 <_strtod_l+0x5c0>)
 8007f66:	9106      	str	r1, [sp, #24]
 8007f68:	2a08      	cmp	r2, #8
 8007f6a:	dc04      	bgt.n	8007f76 <_strtod_l+0x306>
 8007f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f6e:	9206      	str	r2, [sp, #24]
 8007f70:	428a      	cmp	r2, r1
 8007f72:	dd00      	ble.n	8007f76 <_strtod_l+0x306>
 8007f74:	9106      	str	r1, [sp, #24]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d002      	beq.n	8007f80 <_strtod_l+0x310>
 8007f7a:	9a06      	ldr	r2, [sp, #24]
 8007f7c:	4252      	negs	r2, r2
 8007f7e:	9206      	str	r2, [sp, #24]
 8007f80:	9a05      	ldr	r2, [sp, #20]
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	d14d      	bne.n	8008022 <_strtod_l+0x3b2>
 8007f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f88:	4310      	orrs	r0, r2
 8007f8a:	d000      	beq.n	8007f8e <_strtod_l+0x31e>
 8007f8c:	e6ab      	b.n	8007ce6 <_strtod_l+0x76>
 8007f8e:	4662      	mov	r2, ip
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	d000      	beq.n	8007f96 <_strtod_l+0x326>
 8007f94:	e6c5      	b.n	8007d22 <_strtod_l+0xb2>
 8007f96:	2b69      	cmp	r3, #105	; 0x69
 8007f98:	d027      	beq.n	8007fea <_strtod_l+0x37a>
 8007f9a:	dc23      	bgt.n	8007fe4 <_strtod_l+0x374>
 8007f9c:	2b49      	cmp	r3, #73	; 0x49
 8007f9e:	d024      	beq.n	8007fea <_strtod_l+0x37a>
 8007fa0:	2b4e      	cmp	r3, #78	; 0x4e
 8007fa2:	d000      	beq.n	8007fa6 <_strtod_l+0x336>
 8007fa4:	e6bd      	b.n	8007d22 <_strtod_l+0xb2>
 8007fa6:	49a3      	ldr	r1, [pc, #652]	; (8008234 <_strtod_l+0x5c4>)
 8007fa8:	a81b      	add	r0, sp, #108	; 0x6c
 8007faa:	f003 f809 	bl	800afc0 <__match>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d100      	bne.n	8007fb4 <_strtod_l+0x344>
 8007fb2:	e6b6      	b.n	8007d22 <_strtod_l+0xb2>
 8007fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b28      	cmp	r3, #40	; 0x28
 8007fba:	d12c      	bne.n	8008016 <_strtod_l+0x3a6>
 8007fbc:	499e      	ldr	r1, [pc, #632]	; (8008238 <_strtod_l+0x5c8>)
 8007fbe:	aa1e      	add	r2, sp, #120	; 0x78
 8007fc0:	a81b      	add	r0, sp, #108	; 0x6c
 8007fc2:	f003 f811 	bl	800afe8 <__hexnan>
 8007fc6:	2805      	cmp	r0, #5
 8007fc8:	d125      	bne.n	8008016 <_strtod_l+0x3a6>
 8007fca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fcc:	4a9b      	ldr	r2, [pc, #620]	; (800823c <_strtod_l+0x5cc>)
 8007fce:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	0017      	movs	r7, r2
 8007fd4:	e687      	b.n	8007ce6 <_strtod_l+0x76>
 8007fd6:	220a      	movs	r2, #10
 8007fd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007fda:	434a      	muls	r2, r1
 8007fdc:	18d2      	adds	r2, r2, r3
 8007fde:	3a30      	subs	r2, #48	; 0x30
 8007fe0:	920e      	str	r2, [sp, #56]	; 0x38
 8007fe2:	e7b5      	b.n	8007f50 <_strtod_l+0x2e0>
 8007fe4:	2b6e      	cmp	r3, #110	; 0x6e
 8007fe6:	d0de      	beq.n	8007fa6 <_strtod_l+0x336>
 8007fe8:	e69b      	b.n	8007d22 <_strtod_l+0xb2>
 8007fea:	4995      	ldr	r1, [pc, #596]	; (8008240 <_strtod_l+0x5d0>)
 8007fec:	a81b      	add	r0, sp, #108	; 0x6c
 8007fee:	f002 ffe7 	bl	800afc0 <__match>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d100      	bne.n	8007ff8 <_strtod_l+0x388>
 8007ff6:	e694      	b.n	8007d22 <_strtod_l+0xb2>
 8007ff8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ffa:	4992      	ldr	r1, [pc, #584]	; (8008244 <_strtod_l+0x5d4>)
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	a81b      	add	r0, sp, #108	; 0x6c
 8008000:	931b      	str	r3, [sp, #108]	; 0x6c
 8008002:	f002 ffdd 	bl	800afc0 <__match>
 8008006:	2800      	cmp	r0, #0
 8008008:	d102      	bne.n	8008010 <_strtod_l+0x3a0>
 800800a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800800c:	3301      	adds	r3, #1
 800800e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008010:	2600      	movs	r6, #0
 8008012:	4f8a      	ldr	r7, [pc, #552]	; (800823c <_strtod_l+0x5cc>)
 8008014:	e667      	b.n	8007ce6 <_strtod_l+0x76>
 8008016:	488c      	ldr	r0, [pc, #560]	; (8008248 <_strtod_l+0x5d8>)
 8008018:	f001 fe40 	bl	8009c9c <nan>
 800801c:	0006      	movs	r6, r0
 800801e:	000f      	movs	r7, r1
 8008020:	e661      	b.n	8007ce6 <_strtod_l+0x76>
 8008022:	9b06      	ldr	r3, [sp, #24]
 8008024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	9309      	str	r3, [sp, #36]	; 0x24
 800802a:	9b08      	ldr	r3, [sp, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <_strtod_l+0x3c4>
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	9308      	str	r3, [sp, #32]
 8008034:	9c05      	ldr	r4, [sp, #20]
 8008036:	2c10      	cmp	r4, #16
 8008038:	dd00      	ble.n	800803c <_strtod_l+0x3cc>
 800803a:	2410      	movs	r4, #16
 800803c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800803e:	f7fa fe2f 	bl	8002ca0 <__aeabi_ui2d>
 8008042:	9b05      	ldr	r3, [sp, #20]
 8008044:	0006      	movs	r6, r0
 8008046:	000f      	movs	r7, r1
 8008048:	2b09      	cmp	r3, #9
 800804a:	dd15      	ble.n	8008078 <_strtod_l+0x408>
 800804c:	0022      	movs	r2, r4
 800804e:	4b7f      	ldr	r3, [pc, #508]	; (800824c <_strtod_l+0x5dc>)
 8008050:	3a09      	subs	r2, #9
 8008052:	00d2      	lsls	r2, r2, #3
 8008054:	189b      	adds	r3, r3, r2
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f7f9 ff59 	bl	8001f10 <__aeabi_dmul>
 800805e:	0006      	movs	r6, r0
 8008060:	0028      	movs	r0, r5
 8008062:	000f      	movs	r7, r1
 8008064:	f7fa fe1c 	bl	8002ca0 <__aeabi_ui2d>
 8008068:	0002      	movs	r2, r0
 800806a:	000b      	movs	r3, r1
 800806c:	0030      	movs	r0, r6
 800806e:	0039      	movs	r1, r7
 8008070:	f7f8 fff4 	bl	800105c <__aeabi_dadd>
 8008074:	0006      	movs	r6, r0
 8008076:	000f      	movs	r7, r1
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	2b0f      	cmp	r3, #15
 800807c:	dc39      	bgt.n	80080f2 <_strtod_l+0x482>
 800807e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d100      	bne.n	8008086 <_strtod_l+0x416>
 8008084:	e62f      	b.n	8007ce6 <_strtod_l+0x76>
 8008086:	dd24      	ble.n	80080d2 <_strtod_l+0x462>
 8008088:	2b16      	cmp	r3, #22
 800808a:	dc09      	bgt.n	80080a0 <_strtod_l+0x430>
 800808c:	496f      	ldr	r1, [pc, #444]	; (800824c <_strtod_l+0x5dc>)
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	18c9      	adds	r1, r1, r3
 8008092:	0032      	movs	r2, r6
 8008094:	6808      	ldr	r0, [r1, #0]
 8008096:	6849      	ldr	r1, [r1, #4]
 8008098:	003b      	movs	r3, r7
 800809a:	f7f9 ff39 	bl	8001f10 <__aeabi_dmul>
 800809e:	e7bd      	b.n	800801c <_strtod_l+0x3ac>
 80080a0:	2325      	movs	r3, #37	; 0x25
 80080a2:	9a05      	ldr	r2, [sp, #20]
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a8:	4293      	cmp	r3, r2
 80080aa:	db22      	blt.n	80080f2 <_strtod_l+0x482>
 80080ac:	240f      	movs	r4, #15
 80080ae:	9b05      	ldr	r3, [sp, #20]
 80080b0:	4d66      	ldr	r5, [pc, #408]	; (800824c <_strtod_l+0x5dc>)
 80080b2:	1ae4      	subs	r4, r4, r3
 80080b4:	00e1      	lsls	r1, r4, #3
 80080b6:	1869      	adds	r1, r5, r1
 80080b8:	0032      	movs	r2, r6
 80080ba:	6808      	ldr	r0, [r1, #0]
 80080bc:	6849      	ldr	r1, [r1, #4]
 80080be:	003b      	movs	r3, r7
 80080c0:	f7f9 ff26 	bl	8001f10 <__aeabi_dmul>
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	1b1c      	subs	r4, r3, r4
 80080c8:	00e4      	lsls	r4, r4, #3
 80080ca:	192d      	adds	r5, r5, r4
 80080cc:	682a      	ldr	r2, [r5, #0]
 80080ce:	686b      	ldr	r3, [r5, #4]
 80080d0:	e7e3      	b.n	800809a <_strtod_l+0x42a>
 80080d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d4:	3316      	adds	r3, #22
 80080d6:	db0c      	blt.n	80080f2 <_strtod_l+0x482>
 80080d8:	9906      	ldr	r1, [sp, #24]
 80080da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080dc:	4b5b      	ldr	r3, [pc, #364]	; (800824c <_strtod_l+0x5dc>)
 80080de:	1a52      	subs	r2, r2, r1
 80080e0:	00d2      	lsls	r2, r2, #3
 80080e2:	189b      	adds	r3, r3, r2
 80080e4:	0030      	movs	r0, r6
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	0039      	movs	r1, r7
 80080ec:	f7f9 fb16 	bl	800171c <__aeabi_ddiv>
 80080f0:	e794      	b.n	800801c <_strtod_l+0x3ac>
 80080f2:	9b05      	ldr	r3, [sp, #20]
 80080f4:	1b1c      	subs	r4, r3, r4
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f8:	18e4      	adds	r4, r4, r3
 80080fa:	2c00      	cmp	r4, #0
 80080fc:	dd72      	ble.n	80081e4 <_strtod_l+0x574>
 80080fe:	220f      	movs	r2, #15
 8008100:	0023      	movs	r3, r4
 8008102:	4013      	ands	r3, r2
 8008104:	4214      	tst	r4, r2
 8008106:	d00a      	beq.n	800811e <_strtod_l+0x4ae>
 8008108:	4950      	ldr	r1, [pc, #320]	; (800824c <_strtod_l+0x5dc>)
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	18c9      	adds	r1, r1, r3
 800810e:	0032      	movs	r2, r6
 8008110:	6808      	ldr	r0, [r1, #0]
 8008112:	6849      	ldr	r1, [r1, #4]
 8008114:	003b      	movs	r3, r7
 8008116:	f7f9 fefb 	bl	8001f10 <__aeabi_dmul>
 800811a:	0006      	movs	r6, r0
 800811c:	000f      	movs	r7, r1
 800811e:	230f      	movs	r3, #15
 8008120:	439c      	bics	r4, r3
 8008122:	d04a      	beq.n	80081ba <_strtod_l+0x54a>
 8008124:	3326      	adds	r3, #38	; 0x26
 8008126:	33ff      	adds	r3, #255	; 0xff
 8008128:	429c      	cmp	r4, r3
 800812a:	dd22      	ble.n	8008172 <_strtod_l+0x502>
 800812c:	2300      	movs	r3, #0
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	9306      	str	r3, [sp, #24]
 8008132:	930d      	str	r3, [sp, #52]	; 0x34
 8008134:	9308      	str	r3, [sp, #32]
 8008136:	2322      	movs	r3, #34	; 0x22
 8008138:	2600      	movs	r6, #0
 800813a:	9a04      	ldr	r2, [sp, #16]
 800813c:	4f3f      	ldr	r7, [pc, #252]	; (800823c <_strtod_l+0x5cc>)
 800813e:	6013      	str	r3, [r2, #0]
 8008140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008142:	42b3      	cmp	r3, r6
 8008144:	d100      	bne.n	8008148 <_strtod_l+0x4d8>
 8008146:	e5ce      	b.n	8007ce6 <_strtod_l+0x76>
 8008148:	991c      	ldr	r1, [sp, #112]	; 0x70
 800814a:	9804      	ldr	r0, [sp, #16]
 800814c:	f003 f908 	bl	800b360 <_Bfree>
 8008150:	9908      	ldr	r1, [sp, #32]
 8008152:	9804      	ldr	r0, [sp, #16]
 8008154:	f003 f904 	bl	800b360 <_Bfree>
 8008158:	9906      	ldr	r1, [sp, #24]
 800815a:	9804      	ldr	r0, [sp, #16]
 800815c:	f003 f900 	bl	800b360 <_Bfree>
 8008160:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008162:	9804      	ldr	r0, [sp, #16]
 8008164:	f003 f8fc 	bl	800b360 <_Bfree>
 8008168:	9905      	ldr	r1, [sp, #20]
 800816a:	9804      	ldr	r0, [sp, #16]
 800816c:	f003 f8f8 	bl	800b360 <_Bfree>
 8008170:	e5b9      	b.n	8007ce6 <_strtod_l+0x76>
 8008172:	2300      	movs	r3, #0
 8008174:	0030      	movs	r0, r6
 8008176:	0039      	movs	r1, r7
 8008178:	4d35      	ldr	r5, [pc, #212]	; (8008250 <_strtod_l+0x5e0>)
 800817a:	1124      	asrs	r4, r4, #4
 800817c:	9307      	str	r3, [sp, #28]
 800817e:	2c01      	cmp	r4, #1
 8008180:	dc1e      	bgt.n	80081c0 <_strtod_l+0x550>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <_strtod_l+0x51a>
 8008186:	0006      	movs	r6, r0
 8008188:	000f      	movs	r7, r1
 800818a:	4b32      	ldr	r3, [pc, #200]	; (8008254 <_strtod_l+0x5e4>)
 800818c:	9a07      	ldr	r2, [sp, #28]
 800818e:	18ff      	adds	r7, r7, r3
 8008190:	4b2f      	ldr	r3, [pc, #188]	; (8008250 <_strtod_l+0x5e0>)
 8008192:	00d2      	lsls	r2, r2, #3
 8008194:	189d      	adds	r5, r3, r2
 8008196:	6828      	ldr	r0, [r5, #0]
 8008198:	6869      	ldr	r1, [r5, #4]
 800819a:	0032      	movs	r2, r6
 800819c:	003b      	movs	r3, r7
 800819e:	f7f9 feb7 	bl	8001f10 <__aeabi_dmul>
 80081a2:	4b26      	ldr	r3, [pc, #152]	; (800823c <_strtod_l+0x5cc>)
 80081a4:	4a2c      	ldr	r2, [pc, #176]	; (8008258 <_strtod_l+0x5e8>)
 80081a6:	0006      	movs	r6, r0
 80081a8:	400b      	ands	r3, r1
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d8be      	bhi.n	800812c <_strtod_l+0x4bc>
 80081ae:	4a2b      	ldr	r2, [pc, #172]	; (800825c <_strtod_l+0x5ec>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d913      	bls.n	80081dc <_strtod_l+0x56c>
 80081b4:	2601      	movs	r6, #1
 80081b6:	4f2a      	ldr	r7, [pc, #168]	; (8008260 <_strtod_l+0x5f0>)
 80081b8:	4276      	negs	r6, r6
 80081ba:	2300      	movs	r3, #0
 80081bc:	9307      	str	r3, [sp, #28]
 80081be:	e088      	b.n	80082d2 <_strtod_l+0x662>
 80081c0:	2201      	movs	r2, #1
 80081c2:	4214      	tst	r4, r2
 80081c4:	d004      	beq.n	80081d0 <_strtod_l+0x560>
 80081c6:	682a      	ldr	r2, [r5, #0]
 80081c8:	686b      	ldr	r3, [r5, #4]
 80081ca:	f7f9 fea1 	bl	8001f10 <__aeabi_dmul>
 80081ce:	2301      	movs	r3, #1
 80081d0:	9a07      	ldr	r2, [sp, #28]
 80081d2:	1064      	asrs	r4, r4, #1
 80081d4:	3201      	adds	r2, #1
 80081d6:	9207      	str	r2, [sp, #28]
 80081d8:	3508      	adds	r5, #8
 80081da:	e7d0      	b.n	800817e <_strtod_l+0x50e>
 80081dc:	23d4      	movs	r3, #212	; 0xd4
 80081de:	049b      	lsls	r3, r3, #18
 80081e0:	18cf      	adds	r7, r1, r3
 80081e2:	e7ea      	b.n	80081ba <_strtod_l+0x54a>
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	d0e8      	beq.n	80081ba <_strtod_l+0x54a>
 80081e8:	4264      	negs	r4, r4
 80081ea:	230f      	movs	r3, #15
 80081ec:	0022      	movs	r2, r4
 80081ee:	401a      	ands	r2, r3
 80081f0:	421c      	tst	r4, r3
 80081f2:	d00a      	beq.n	800820a <_strtod_l+0x59a>
 80081f4:	4b15      	ldr	r3, [pc, #84]	; (800824c <_strtod_l+0x5dc>)
 80081f6:	00d2      	lsls	r2, r2, #3
 80081f8:	189b      	adds	r3, r3, r2
 80081fa:	0030      	movs	r0, r6
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	0039      	movs	r1, r7
 8008202:	f7f9 fa8b 	bl	800171c <__aeabi_ddiv>
 8008206:	0006      	movs	r6, r0
 8008208:	000f      	movs	r7, r1
 800820a:	1124      	asrs	r4, r4, #4
 800820c:	d0d5      	beq.n	80081ba <_strtod_l+0x54a>
 800820e:	2c1f      	cmp	r4, #31
 8008210:	dd28      	ble.n	8008264 <_strtod_l+0x5f4>
 8008212:	2300      	movs	r3, #0
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	9306      	str	r3, [sp, #24]
 8008218:	930d      	str	r3, [sp, #52]	; 0x34
 800821a:	9308      	str	r3, [sp, #32]
 800821c:	2322      	movs	r3, #34	; 0x22
 800821e:	9a04      	ldr	r2, [sp, #16]
 8008220:	2600      	movs	r6, #0
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008226:	2700      	movs	r7, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d18d      	bne.n	8008148 <_strtod_l+0x4d8>
 800822c:	e55b      	b.n	8007ce6 <_strtod_l+0x76>
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	00004e1f 	.word	0x00004e1f
 8008234:	0800c996 	.word	0x0800c996
 8008238:	0800c84c 	.word	0x0800c84c
 800823c:	7ff00000 	.word	0x7ff00000
 8008240:	0800c98e 	.word	0x0800c98e
 8008244:	0800c9cd 	.word	0x0800c9cd
 8008248:	0800cc58 	.word	0x0800cc58
 800824c:	0800cb38 	.word	0x0800cb38
 8008250:	0800cb10 	.word	0x0800cb10
 8008254:	fcb00000 	.word	0xfcb00000
 8008258:	7ca00000 	.word	0x7ca00000
 800825c:	7c900000 	.word	0x7c900000
 8008260:	7fefffff 	.word	0x7fefffff
 8008264:	2310      	movs	r3, #16
 8008266:	0022      	movs	r2, r4
 8008268:	401a      	ands	r2, r3
 800826a:	9207      	str	r2, [sp, #28]
 800826c:	421c      	tst	r4, r3
 800826e:	d001      	beq.n	8008274 <_strtod_l+0x604>
 8008270:	335a      	adds	r3, #90	; 0x5a
 8008272:	9307      	str	r3, [sp, #28]
 8008274:	0030      	movs	r0, r6
 8008276:	0039      	movs	r1, r7
 8008278:	2300      	movs	r3, #0
 800827a:	4dc4      	ldr	r5, [pc, #784]	; (800858c <_strtod_l+0x91c>)
 800827c:	2201      	movs	r2, #1
 800827e:	4214      	tst	r4, r2
 8008280:	d004      	beq.n	800828c <_strtod_l+0x61c>
 8008282:	682a      	ldr	r2, [r5, #0]
 8008284:	686b      	ldr	r3, [r5, #4]
 8008286:	f7f9 fe43 	bl	8001f10 <__aeabi_dmul>
 800828a:	2301      	movs	r3, #1
 800828c:	1064      	asrs	r4, r4, #1
 800828e:	3508      	adds	r5, #8
 8008290:	2c00      	cmp	r4, #0
 8008292:	d1f3      	bne.n	800827c <_strtod_l+0x60c>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <_strtod_l+0x62c>
 8008298:	0006      	movs	r6, r0
 800829a:	000f      	movs	r7, r1
 800829c:	9b07      	ldr	r3, [sp, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00f      	beq.n	80082c2 <_strtod_l+0x652>
 80082a2:	236b      	movs	r3, #107	; 0x6b
 80082a4:	007a      	lsls	r2, r7, #1
 80082a6:	0d52      	lsrs	r2, r2, #21
 80082a8:	0039      	movs	r1, r7
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd08      	ble.n	80082c2 <_strtod_l+0x652>
 80082b0:	2b1f      	cmp	r3, #31
 80082b2:	dc00      	bgt.n	80082b6 <_strtod_l+0x646>
 80082b4:	e121      	b.n	80084fa <_strtod_l+0x88a>
 80082b6:	2600      	movs	r6, #0
 80082b8:	2b34      	cmp	r3, #52	; 0x34
 80082ba:	dc00      	bgt.n	80082be <_strtod_l+0x64e>
 80082bc:	e116      	b.n	80084ec <_strtod_l+0x87c>
 80082be:	27dc      	movs	r7, #220	; 0xdc
 80082c0:	04bf      	lsls	r7, r7, #18
 80082c2:	2200      	movs	r2, #0
 80082c4:	2300      	movs	r3, #0
 80082c6:	0030      	movs	r0, r6
 80082c8:	0039      	movs	r1, r7
 80082ca:	f7f8 f8bf 	bl	800044c <__aeabi_dcmpeq>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d19f      	bne.n	8008212 <_strtod_l+0x5a2>
 80082d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d4:	9a08      	ldr	r2, [sp, #32]
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80082da:	9b05      	ldr	r3, [sp, #20]
 80082dc:	9804      	ldr	r0, [sp, #16]
 80082de:	f003 f8a7 	bl	800b430 <__s2b>
 80082e2:	900d      	str	r0, [sp, #52]	; 0x34
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d100      	bne.n	80082ea <_strtod_l+0x67a>
 80082e8:	e720      	b.n	800812c <_strtod_l+0x4bc>
 80082ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ec:	9906      	ldr	r1, [sp, #24]
 80082ee:	17da      	asrs	r2, r3, #31
 80082f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082f2:	1a5b      	subs	r3, r3, r1
 80082f4:	401a      	ands	r2, r3
 80082f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f8:	9215      	str	r2, [sp, #84]	; 0x54
 80082fa:	43db      	mvns	r3, r3
 80082fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fe:	17db      	asrs	r3, r3, #31
 8008300:	401a      	ands	r2, r3
 8008302:	2300      	movs	r3, #0
 8008304:	9218      	str	r2, [sp, #96]	; 0x60
 8008306:	9305      	str	r3, [sp, #20]
 8008308:	9306      	str	r3, [sp, #24]
 800830a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800830c:	9804      	ldr	r0, [sp, #16]
 800830e:	6859      	ldr	r1, [r3, #4]
 8008310:	f002 ffe2 	bl	800b2d8 <_Balloc>
 8008314:	9008      	str	r0, [sp, #32]
 8008316:	2800      	cmp	r0, #0
 8008318:	d100      	bne.n	800831c <_strtod_l+0x6ac>
 800831a:	e70c      	b.n	8008136 <_strtod_l+0x4c6>
 800831c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800831e:	300c      	adds	r0, #12
 8008320:	0019      	movs	r1, r3
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	310c      	adds	r1, #12
 8008326:	3202      	adds	r2, #2
 8008328:	0092      	lsls	r2, r2, #2
 800832a:	f001 fcad 	bl	8009c88 <memcpy>
 800832e:	ab1e      	add	r3, sp, #120	; 0x78
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	ab1d      	add	r3, sp, #116	; 0x74
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	0032      	movs	r2, r6
 8008338:	003b      	movs	r3, r7
 800833a:	9804      	ldr	r0, [sp, #16]
 800833c:	9610      	str	r6, [sp, #64]	; 0x40
 800833e:	9711      	str	r7, [sp, #68]	; 0x44
 8008340:	f003 fbb8 	bl	800bab4 <__d2b>
 8008344:	901c      	str	r0, [sp, #112]	; 0x70
 8008346:	2800      	cmp	r0, #0
 8008348:	d100      	bne.n	800834c <_strtod_l+0x6dc>
 800834a:	e6f4      	b.n	8008136 <_strtod_l+0x4c6>
 800834c:	2101      	movs	r1, #1
 800834e:	9804      	ldr	r0, [sp, #16]
 8008350:	f003 f902 	bl	800b558 <__i2b>
 8008354:	9006      	str	r0, [sp, #24]
 8008356:	2800      	cmp	r0, #0
 8008358:	d100      	bne.n	800835c <_strtod_l+0x6ec>
 800835a:	e6ec      	b.n	8008136 <_strtod_l+0x4c6>
 800835c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800835e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008360:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008362:	1ad4      	subs	r4, r2, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	db01      	blt.n	800836c <_strtod_l+0x6fc>
 8008368:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800836a:	195d      	adds	r5, r3, r5
 800836c:	9907      	ldr	r1, [sp, #28]
 800836e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008370:	1a5b      	subs	r3, r3, r1
 8008372:	2136      	movs	r1, #54	; 0x36
 8008374:	189b      	adds	r3, r3, r2
 8008376:	1a8a      	subs	r2, r1, r2
 8008378:	4985      	ldr	r1, [pc, #532]	; (8008590 <_strtod_l+0x920>)
 800837a:	2001      	movs	r0, #1
 800837c:	468c      	mov	ip, r1
 800837e:	2100      	movs	r1, #0
 8008380:	3b01      	subs	r3, #1
 8008382:	9114      	str	r1, [sp, #80]	; 0x50
 8008384:	9012      	str	r0, [sp, #72]	; 0x48
 8008386:	4563      	cmp	r3, ip
 8008388:	da07      	bge.n	800839a <_strtod_l+0x72a>
 800838a:	4661      	mov	r1, ip
 800838c:	1ac9      	subs	r1, r1, r3
 800838e:	1a52      	subs	r2, r2, r1
 8008390:	291f      	cmp	r1, #31
 8008392:	dd00      	ble.n	8008396 <_strtod_l+0x726>
 8008394:	e0b6      	b.n	8008504 <_strtod_l+0x894>
 8008396:	4088      	lsls	r0, r1
 8008398:	9012      	str	r0, [sp, #72]	; 0x48
 800839a:	18ab      	adds	r3, r5, r2
 800839c:	930c      	str	r3, [sp, #48]	; 0x30
 800839e:	18a4      	adds	r4, r4, r2
 80083a0:	9b07      	ldr	r3, [sp, #28]
 80083a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a4:	191c      	adds	r4, r3, r4
 80083a6:	002b      	movs	r3, r5
 80083a8:	4295      	cmp	r5, r2
 80083aa:	dd00      	ble.n	80083ae <_strtod_l+0x73e>
 80083ac:	0013      	movs	r3, r2
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	dd00      	ble.n	80083b4 <_strtod_l+0x744>
 80083b2:	0023      	movs	r3, r4
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd04      	ble.n	80083c2 <_strtod_l+0x752>
 80083b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ba:	1ae4      	subs	r4, r4, r3
 80083bc:	1ad2      	subs	r2, r2, r3
 80083be:	920c      	str	r2, [sp, #48]	; 0x30
 80083c0:	1aed      	subs	r5, r5, r3
 80083c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dd17      	ble.n	80083f8 <_strtod_l+0x788>
 80083c8:	001a      	movs	r2, r3
 80083ca:	9906      	ldr	r1, [sp, #24]
 80083cc:	9804      	ldr	r0, [sp, #16]
 80083ce:	f003 f98b 	bl	800b6e8 <__pow5mult>
 80083d2:	9006      	str	r0, [sp, #24]
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d100      	bne.n	80083da <_strtod_l+0x76a>
 80083d8:	e6ad      	b.n	8008136 <_strtod_l+0x4c6>
 80083da:	0001      	movs	r1, r0
 80083dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80083de:	9804      	ldr	r0, [sp, #16]
 80083e0:	f003 f8d2 	bl	800b588 <__multiply>
 80083e4:	900e      	str	r0, [sp, #56]	; 0x38
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d100      	bne.n	80083ec <_strtod_l+0x77c>
 80083ea:	e6a4      	b.n	8008136 <_strtod_l+0x4c6>
 80083ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083ee:	9804      	ldr	r0, [sp, #16]
 80083f0:	f002 ffb6 	bl	800b360 <_Bfree>
 80083f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f6:	931c      	str	r3, [sp, #112]	; 0x70
 80083f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dd00      	ble.n	8008400 <_strtod_l+0x790>
 80083fe:	e087      	b.n	8008510 <_strtod_l+0x8a0>
 8008400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	dd08      	ble.n	8008418 <_strtod_l+0x7a8>
 8008406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008408:	9908      	ldr	r1, [sp, #32]
 800840a:	9804      	ldr	r0, [sp, #16]
 800840c:	f003 f96c 	bl	800b6e8 <__pow5mult>
 8008410:	9008      	str	r0, [sp, #32]
 8008412:	2800      	cmp	r0, #0
 8008414:	d100      	bne.n	8008418 <_strtod_l+0x7a8>
 8008416:	e68e      	b.n	8008136 <_strtod_l+0x4c6>
 8008418:	2c00      	cmp	r4, #0
 800841a:	dd08      	ble.n	800842e <_strtod_l+0x7be>
 800841c:	0022      	movs	r2, r4
 800841e:	9908      	ldr	r1, [sp, #32]
 8008420:	9804      	ldr	r0, [sp, #16]
 8008422:	f003 f9bd 	bl	800b7a0 <__lshift>
 8008426:	9008      	str	r0, [sp, #32]
 8008428:	2800      	cmp	r0, #0
 800842a:	d100      	bne.n	800842e <_strtod_l+0x7be>
 800842c:	e683      	b.n	8008136 <_strtod_l+0x4c6>
 800842e:	2d00      	cmp	r5, #0
 8008430:	dd08      	ble.n	8008444 <_strtod_l+0x7d4>
 8008432:	002a      	movs	r2, r5
 8008434:	9906      	ldr	r1, [sp, #24]
 8008436:	9804      	ldr	r0, [sp, #16]
 8008438:	f003 f9b2 	bl	800b7a0 <__lshift>
 800843c:	9006      	str	r0, [sp, #24]
 800843e:	2800      	cmp	r0, #0
 8008440:	d100      	bne.n	8008444 <_strtod_l+0x7d4>
 8008442:	e678      	b.n	8008136 <_strtod_l+0x4c6>
 8008444:	9a08      	ldr	r2, [sp, #32]
 8008446:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008448:	9804      	ldr	r0, [sp, #16]
 800844a:	f003 fa33 	bl	800b8b4 <__mdiff>
 800844e:	9005      	str	r0, [sp, #20]
 8008450:	2800      	cmp	r0, #0
 8008452:	d100      	bne.n	8008456 <_strtod_l+0x7e6>
 8008454:	e66f      	b.n	8008136 <_strtod_l+0x4c6>
 8008456:	2200      	movs	r2, #0
 8008458:	68c3      	ldr	r3, [r0, #12]
 800845a:	9906      	ldr	r1, [sp, #24]
 800845c:	60c2      	str	r2, [r0, #12]
 800845e:	930c      	str	r3, [sp, #48]	; 0x30
 8008460:	f003 fa0c 	bl	800b87c <__mcmp>
 8008464:	2800      	cmp	r0, #0
 8008466:	da5d      	bge.n	8008524 <_strtod_l+0x8b4>
 8008468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800846a:	4333      	orrs	r3, r6
 800846c:	d000      	beq.n	8008470 <_strtod_l+0x800>
 800846e:	e088      	b.n	8008582 <_strtod_l+0x912>
 8008470:	033b      	lsls	r3, r7, #12
 8008472:	d000      	beq.n	8008476 <_strtod_l+0x806>
 8008474:	e085      	b.n	8008582 <_strtod_l+0x912>
 8008476:	22d6      	movs	r2, #214	; 0xd6
 8008478:	4b46      	ldr	r3, [pc, #280]	; (8008594 <_strtod_l+0x924>)
 800847a:	04d2      	lsls	r2, r2, #19
 800847c:	403b      	ands	r3, r7
 800847e:	4293      	cmp	r3, r2
 8008480:	d97f      	bls.n	8008582 <_strtod_l+0x912>
 8008482:	9b05      	ldr	r3, [sp, #20]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d103      	bne.n	8008492 <_strtod_l+0x822>
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b01      	cmp	r3, #1
 8008490:	dd77      	ble.n	8008582 <_strtod_l+0x912>
 8008492:	9905      	ldr	r1, [sp, #20]
 8008494:	2201      	movs	r2, #1
 8008496:	9804      	ldr	r0, [sp, #16]
 8008498:	f003 f982 	bl	800b7a0 <__lshift>
 800849c:	9906      	ldr	r1, [sp, #24]
 800849e:	9005      	str	r0, [sp, #20]
 80084a0:	f003 f9ec 	bl	800b87c <__mcmp>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	dd6c      	ble.n	8008582 <_strtod_l+0x912>
 80084a8:	9907      	ldr	r1, [sp, #28]
 80084aa:	003b      	movs	r3, r7
 80084ac:	4a39      	ldr	r2, [pc, #228]	; (8008594 <_strtod_l+0x924>)
 80084ae:	2900      	cmp	r1, #0
 80084b0:	d100      	bne.n	80084b4 <_strtod_l+0x844>
 80084b2:	e094      	b.n	80085de <_strtod_l+0x96e>
 80084b4:	0011      	movs	r1, r2
 80084b6:	20d6      	movs	r0, #214	; 0xd6
 80084b8:	4039      	ands	r1, r7
 80084ba:	04c0      	lsls	r0, r0, #19
 80084bc:	4281      	cmp	r1, r0
 80084be:	dd00      	ble.n	80084c2 <_strtod_l+0x852>
 80084c0:	e08d      	b.n	80085de <_strtod_l+0x96e>
 80084c2:	23dc      	movs	r3, #220	; 0xdc
 80084c4:	049b      	lsls	r3, r3, #18
 80084c6:	4299      	cmp	r1, r3
 80084c8:	dc00      	bgt.n	80084cc <_strtod_l+0x85c>
 80084ca:	e6a7      	b.n	800821c <_strtod_l+0x5ac>
 80084cc:	0030      	movs	r0, r6
 80084ce:	0039      	movs	r1, r7
 80084d0:	4b31      	ldr	r3, [pc, #196]	; (8008598 <_strtod_l+0x928>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	f7f9 fd1c 	bl	8001f10 <__aeabi_dmul>
 80084d8:	4b2e      	ldr	r3, [pc, #184]	; (8008594 <_strtod_l+0x924>)
 80084da:	0006      	movs	r6, r0
 80084dc:	000f      	movs	r7, r1
 80084de:	420b      	tst	r3, r1
 80084e0:	d000      	beq.n	80084e4 <_strtod_l+0x874>
 80084e2:	e631      	b.n	8008148 <_strtod_l+0x4d8>
 80084e4:	2322      	movs	r3, #34	; 0x22
 80084e6:	9a04      	ldr	r2, [sp, #16]
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	e62d      	b.n	8008148 <_strtod_l+0x4d8>
 80084ec:	234b      	movs	r3, #75	; 0x4b
 80084ee:	1a9a      	subs	r2, r3, r2
 80084f0:	3b4c      	subs	r3, #76	; 0x4c
 80084f2:	4093      	lsls	r3, r2
 80084f4:	4019      	ands	r1, r3
 80084f6:	000f      	movs	r7, r1
 80084f8:	e6e3      	b.n	80082c2 <_strtod_l+0x652>
 80084fa:	2201      	movs	r2, #1
 80084fc:	4252      	negs	r2, r2
 80084fe:	409a      	lsls	r2, r3
 8008500:	4016      	ands	r6, r2
 8008502:	e6de      	b.n	80082c2 <_strtod_l+0x652>
 8008504:	4925      	ldr	r1, [pc, #148]	; (800859c <_strtod_l+0x92c>)
 8008506:	1acb      	subs	r3, r1, r3
 8008508:	0001      	movs	r1, r0
 800850a:	4099      	lsls	r1, r3
 800850c:	9114      	str	r1, [sp, #80]	; 0x50
 800850e:	e743      	b.n	8008398 <_strtod_l+0x728>
 8008510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008512:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008514:	9804      	ldr	r0, [sp, #16]
 8008516:	f003 f943 	bl	800b7a0 <__lshift>
 800851a:	901c      	str	r0, [sp, #112]	; 0x70
 800851c:	2800      	cmp	r0, #0
 800851e:	d000      	beq.n	8008522 <_strtod_l+0x8b2>
 8008520:	e76e      	b.n	8008400 <_strtod_l+0x790>
 8008522:	e608      	b.n	8008136 <_strtod_l+0x4c6>
 8008524:	970e      	str	r7, [sp, #56]	; 0x38
 8008526:	2800      	cmp	r0, #0
 8008528:	d177      	bne.n	800861a <_strtod_l+0x9aa>
 800852a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800852c:	033b      	lsls	r3, r7, #12
 800852e:	0b1b      	lsrs	r3, r3, #12
 8008530:	2a00      	cmp	r2, #0
 8008532:	d039      	beq.n	80085a8 <_strtod_l+0x938>
 8008534:	4a1a      	ldr	r2, [pc, #104]	; (80085a0 <_strtod_l+0x930>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d139      	bne.n	80085ae <_strtod_l+0x93e>
 800853a:	2101      	movs	r1, #1
 800853c:	9b07      	ldr	r3, [sp, #28]
 800853e:	4249      	negs	r1, r1
 8008540:	0032      	movs	r2, r6
 8008542:	0008      	movs	r0, r1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <_strtod_l+0x8f0>
 8008548:	24d4      	movs	r4, #212	; 0xd4
 800854a:	4b12      	ldr	r3, [pc, #72]	; (8008594 <_strtod_l+0x924>)
 800854c:	0008      	movs	r0, r1
 800854e:	403b      	ands	r3, r7
 8008550:	04e4      	lsls	r4, r4, #19
 8008552:	42a3      	cmp	r3, r4
 8008554:	d804      	bhi.n	8008560 <_strtod_l+0x8f0>
 8008556:	306c      	adds	r0, #108	; 0x6c
 8008558:	0d1b      	lsrs	r3, r3, #20
 800855a:	1ac3      	subs	r3, r0, r3
 800855c:	4099      	lsls	r1, r3
 800855e:	0008      	movs	r0, r1
 8008560:	4282      	cmp	r2, r0
 8008562:	d124      	bne.n	80085ae <_strtod_l+0x93e>
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <_strtod_l+0x934>)
 8008566:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008568:	4299      	cmp	r1, r3
 800856a:	d102      	bne.n	8008572 <_strtod_l+0x902>
 800856c:	3201      	adds	r2, #1
 800856e:	d100      	bne.n	8008572 <_strtod_l+0x902>
 8008570:	e5e1      	b.n	8008136 <_strtod_l+0x4c6>
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <_strtod_l+0x924>)
 8008574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008576:	2600      	movs	r6, #0
 8008578:	401a      	ands	r2, r3
 800857a:	0013      	movs	r3, r2
 800857c:	2280      	movs	r2, #128	; 0x80
 800857e:	0352      	lsls	r2, r2, #13
 8008580:	189f      	adds	r7, r3, r2
 8008582:	9b07      	ldr	r3, [sp, #28]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1a1      	bne.n	80084cc <_strtod_l+0x85c>
 8008588:	e5de      	b.n	8008148 <_strtod_l+0x4d8>
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	0800c860 	.word	0x0800c860
 8008590:	fffffc02 	.word	0xfffffc02
 8008594:	7ff00000 	.word	0x7ff00000
 8008598:	39500000 	.word	0x39500000
 800859c:	fffffbe2 	.word	0xfffffbe2
 80085a0:	000fffff 	.word	0x000fffff
 80085a4:	7fefffff 	.word	0x7fefffff
 80085a8:	4333      	orrs	r3, r6
 80085aa:	d100      	bne.n	80085ae <_strtod_l+0x93e>
 80085ac:	e77c      	b.n	80084a8 <_strtod_l+0x838>
 80085ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01d      	beq.n	80085f0 <_strtod_l+0x980>
 80085b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085b8:	4213      	tst	r3, r2
 80085ba:	d0e2      	beq.n	8008582 <_strtod_l+0x912>
 80085bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085be:	0030      	movs	r0, r6
 80085c0:	0039      	movs	r1, r7
 80085c2:	9a07      	ldr	r2, [sp, #28]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d017      	beq.n	80085f8 <_strtod_l+0x988>
 80085c8:	f7ff fb3a 	bl	8007c40 <sulp>
 80085cc:	0002      	movs	r2, r0
 80085ce:	000b      	movs	r3, r1
 80085d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80085d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085d4:	f7f8 fd42 	bl	800105c <__aeabi_dadd>
 80085d8:	0006      	movs	r6, r0
 80085da:	000f      	movs	r7, r1
 80085dc:	e7d1      	b.n	8008582 <_strtod_l+0x912>
 80085de:	2601      	movs	r6, #1
 80085e0:	4013      	ands	r3, r2
 80085e2:	4a98      	ldr	r2, [pc, #608]	; (8008844 <_strtod_l+0xbd4>)
 80085e4:	4276      	negs	r6, r6
 80085e6:	189b      	adds	r3, r3, r2
 80085e8:	4a97      	ldr	r2, [pc, #604]	; (8008848 <_strtod_l+0xbd8>)
 80085ea:	431a      	orrs	r2, r3
 80085ec:	0017      	movs	r7, r2
 80085ee:	e7c8      	b.n	8008582 <_strtod_l+0x912>
 80085f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f2:	4233      	tst	r3, r6
 80085f4:	d0c5      	beq.n	8008582 <_strtod_l+0x912>
 80085f6:	e7e1      	b.n	80085bc <_strtod_l+0x94c>
 80085f8:	f7ff fb22 	bl	8007c40 <sulp>
 80085fc:	0002      	movs	r2, r0
 80085fe:	000b      	movs	r3, r1
 8008600:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008602:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008604:	f7f9 ff46 	bl	8002494 <__aeabi_dsub>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	0006      	movs	r6, r0
 800860e:	000f      	movs	r7, r1
 8008610:	f7f7 ff1c 	bl	800044c <__aeabi_dcmpeq>
 8008614:	2800      	cmp	r0, #0
 8008616:	d0b4      	beq.n	8008582 <_strtod_l+0x912>
 8008618:	e600      	b.n	800821c <_strtod_l+0x5ac>
 800861a:	9906      	ldr	r1, [sp, #24]
 800861c:	9805      	ldr	r0, [sp, #20]
 800861e:	f003 faa9 	bl	800bb74 <__ratio>
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	2200      	movs	r2, #0
 8008626:	05db      	lsls	r3, r3, #23
 8008628:	0004      	movs	r4, r0
 800862a:	000d      	movs	r5, r1
 800862c:	f7f7 ff1e 	bl	800046c <__aeabi_dcmple>
 8008630:	2800      	cmp	r0, #0
 8008632:	d06d      	beq.n	8008710 <_strtod_l+0xaa0>
 8008634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008636:	2b00      	cmp	r3, #0
 8008638:	d000      	beq.n	800863c <_strtod_l+0x9cc>
 800863a:	e07e      	b.n	800873a <_strtod_l+0xaca>
 800863c:	2e00      	cmp	r6, #0
 800863e:	d158      	bne.n	80086f2 <_strtod_l+0xa82>
 8008640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008642:	031b      	lsls	r3, r3, #12
 8008644:	d000      	beq.n	8008648 <_strtod_l+0x9d8>
 8008646:	e07f      	b.n	8008748 <_strtod_l+0xad8>
 8008648:	2200      	movs	r2, #0
 800864a:	0020      	movs	r0, r4
 800864c:	0029      	movs	r1, r5
 800864e:	4b7f      	ldr	r3, [pc, #508]	; (800884c <_strtod_l+0xbdc>)
 8008650:	f7f7 ff02 	bl	8000458 <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	d158      	bne.n	800870a <_strtod_l+0xa9a>
 8008658:	0020      	movs	r0, r4
 800865a:	0029      	movs	r1, r5
 800865c:	2200      	movs	r2, #0
 800865e:	4b7c      	ldr	r3, [pc, #496]	; (8008850 <_strtod_l+0xbe0>)
 8008660:	f7f9 fc56 	bl	8001f10 <__aeabi_dmul>
 8008664:	0004      	movs	r4, r0
 8008666:	000d      	movs	r5, r1
 8008668:	2380      	movs	r3, #128	; 0x80
 800866a:	061b      	lsls	r3, r3, #24
 800866c:	940a      	str	r4, [sp, #40]	; 0x28
 800866e:	18eb      	adds	r3, r5, r3
 8008670:	930b      	str	r3, [sp, #44]	; 0x2c
 8008672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008676:	9212      	str	r2, [sp, #72]	; 0x48
 8008678:	9313      	str	r3, [sp, #76]	; 0x4c
 800867a:	4a76      	ldr	r2, [pc, #472]	; (8008854 <_strtod_l+0xbe4>)
 800867c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800867e:	4013      	ands	r3, r2
 8008680:	9314      	str	r3, [sp, #80]	; 0x50
 8008682:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008684:	4b74      	ldr	r3, [pc, #464]	; (8008858 <_strtod_l+0xbe8>)
 8008686:	429a      	cmp	r2, r3
 8008688:	d000      	beq.n	800868c <_strtod_l+0xa1c>
 800868a:	e091      	b.n	80087b0 <_strtod_l+0xb40>
 800868c:	4a73      	ldr	r2, [pc, #460]	; (800885c <_strtod_l+0xbec>)
 800868e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008690:	4694      	mov	ip, r2
 8008692:	4463      	add	r3, ip
 8008694:	001f      	movs	r7, r3
 8008696:	0030      	movs	r0, r6
 8008698:	0019      	movs	r1, r3
 800869a:	f003 f9a3 	bl	800b9e4 <__ulp>
 800869e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a2:	f7f9 fc35 	bl	8001f10 <__aeabi_dmul>
 80086a6:	0032      	movs	r2, r6
 80086a8:	003b      	movs	r3, r7
 80086aa:	f7f8 fcd7 	bl	800105c <__aeabi_dadd>
 80086ae:	4a69      	ldr	r2, [pc, #420]	; (8008854 <_strtod_l+0xbe4>)
 80086b0:	4b6b      	ldr	r3, [pc, #428]	; (8008860 <_strtod_l+0xbf0>)
 80086b2:	0006      	movs	r6, r0
 80086b4:	400a      	ands	r2, r1
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d949      	bls.n	800874e <_strtod_l+0xade>
 80086ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086bc:	4b69      	ldr	r3, [pc, #420]	; (8008864 <_strtod_l+0xbf4>)
 80086be:	429a      	cmp	r2, r3
 80086c0:	d103      	bne.n	80086ca <_strtod_l+0xa5a>
 80086c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086c4:	3301      	adds	r3, #1
 80086c6:	d100      	bne.n	80086ca <_strtod_l+0xa5a>
 80086c8:	e535      	b.n	8008136 <_strtod_l+0x4c6>
 80086ca:	2601      	movs	r6, #1
 80086cc:	4f65      	ldr	r7, [pc, #404]	; (8008864 <_strtod_l+0xbf4>)
 80086ce:	4276      	negs	r6, r6
 80086d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086d2:	9804      	ldr	r0, [sp, #16]
 80086d4:	f002 fe44 	bl	800b360 <_Bfree>
 80086d8:	9908      	ldr	r1, [sp, #32]
 80086da:	9804      	ldr	r0, [sp, #16]
 80086dc:	f002 fe40 	bl	800b360 <_Bfree>
 80086e0:	9906      	ldr	r1, [sp, #24]
 80086e2:	9804      	ldr	r0, [sp, #16]
 80086e4:	f002 fe3c 	bl	800b360 <_Bfree>
 80086e8:	9905      	ldr	r1, [sp, #20]
 80086ea:	9804      	ldr	r0, [sp, #16]
 80086ec:	f002 fe38 	bl	800b360 <_Bfree>
 80086f0:	e60b      	b.n	800830a <_strtod_l+0x69a>
 80086f2:	2e01      	cmp	r6, #1
 80086f4:	d103      	bne.n	80086fe <_strtod_l+0xa8e>
 80086f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d100      	bne.n	80086fe <_strtod_l+0xa8e>
 80086fc:	e58e      	b.n	800821c <_strtod_l+0x5ac>
 80086fe:	2300      	movs	r3, #0
 8008700:	4c59      	ldr	r4, [pc, #356]	; (8008868 <_strtod_l+0xbf8>)
 8008702:	930a      	str	r3, [sp, #40]	; 0x28
 8008704:	940b      	str	r4, [sp, #44]	; 0x2c
 8008706:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008708:	e01c      	b.n	8008744 <_strtod_l+0xad4>
 800870a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800870c:	4d50      	ldr	r5, [pc, #320]	; (8008850 <_strtod_l+0xbe0>)
 800870e:	e7ab      	b.n	8008668 <_strtod_l+0x9f8>
 8008710:	2200      	movs	r2, #0
 8008712:	0020      	movs	r0, r4
 8008714:	0029      	movs	r1, r5
 8008716:	4b4e      	ldr	r3, [pc, #312]	; (8008850 <_strtod_l+0xbe0>)
 8008718:	f7f9 fbfa 	bl	8001f10 <__aeabi_dmul>
 800871c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800871e:	0004      	movs	r4, r0
 8008720:	000b      	movs	r3, r1
 8008722:	000d      	movs	r5, r1
 8008724:	2a00      	cmp	r2, #0
 8008726:	d104      	bne.n	8008732 <_strtod_l+0xac2>
 8008728:	2280      	movs	r2, #128	; 0x80
 800872a:	0612      	lsls	r2, r2, #24
 800872c:	900a      	str	r0, [sp, #40]	; 0x28
 800872e:	188b      	adds	r3, r1, r2
 8008730:	e79e      	b.n	8008670 <_strtod_l+0xa00>
 8008732:	0002      	movs	r2, r0
 8008734:	920a      	str	r2, [sp, #40]	; 0x28
 8008736:	930b      	str	r3, [sp, #44]	; 0x2c
 8008738:	e79b      	b.n	8008672 <_strtod_l+0xa02>
 800873a:	2300      	movs	r3, #0
 800873c:	4c43      	ldr	r4, [pc, #268]	; (800884c <_strtod_l+0xbdc>)
 800873e:	930a      	str	r3, [sp, #40]	; 0x28
 8008740:	940b      	str	r4, [sp, #44]	; 0x2c
 8008742:	2400      	movs	r4, #0
 8008744:	4d41      	ldr	r5, [pc, #260]	; (800884c <_strtod_l+0xbdc>)
 8008746:	e794      	b.n	8008672 <_strtod_l+0xa02>
 8008748:	2300      	movs	r3, #0
 800874a:	4c47      	ldr	r4, [pc, #284]	; (8008868 <_strtod_l+0xbf8>)
 800874c:	e7f7      	b.n	800873e <_strtod_l+0xace>
 800874e:	23d4      	movs	r3, #212	; 0xd4
 8008750:	049b      	lsls	r3, r3, #18
 8008752:	18cf      	adds	r7, r1, r3
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	970e      	str	r7, [sp, #56]	; 0x38
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1b9      	bne.n	80086d0 <_strtod_l+0xa60>
 800875c:	4b3d      	ldr	r3, [pc, #244]	; (8008854 <_strtod_l+0xbe4>)
 800875e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008760:	403b      	ands	r3, r7
 8008762:	429a      	cmp	r2, r3
 8008764:	d1b4      	bne.n	80086d0 <_strtod_l+0xa60>
 8008766:	0020      	movs	r0, r4
 8008768:	0029      	movs	r1, r5
 800876a:	f7f7 ff09 	bl	8000580 <__aeabi_d2lz>
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_l2d>
 8008772:	0002      	movs	r2, r0
 8008774:	000b      	movs	r3, r1
 8008776:	0020      	movs	r0, r4
 8008778:	0029      	movs	r1, r5
 800877a:	f7f9 fe8b 	bl	8002494 <__aeabi_dsub>
 800877e:	033b      	lsls	r3, r7, #12
 8008780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008782:	0b1b      	lsrs	r3, r3, #12
 8008784:	4333      	orrs	r3, r6
 8008786:	4313      	orrs	r3, r2
 8008788:	0004      	movs	r4, r0
 800878a:	000d      	movs	r5, r1
 800878c:	4a37      	ldr	r2, [pc, #220]	; (800886c <_strtod_l+0xbfc>)
 800878e:	2b00      	cmp	r3, #0
 8008790:	d054      	beq.n	800883c <_strtod_l+0xbcc>
 8008792:	4b37      	ldr	r3, [pc, #220]	; (8008870 <_strtod_l+0xc00>)
 8008794:	f7f7 fe60 	bl	8000458 <__aeabi_dcmplt>
 8008798:	2800      	cmp	r0, #0
 800879a:	d000      	beq.n	800879e <_strtod_l+0xb2e>
 800879c:	e4d4      	b.n	8008148 <_strtod_l+0x4d8>
 800879e:	0020      	movs	r0, r4
 80087a0:	0029      	movs	r1, r5
 80087a2:	4a34      	ldr	r2, [pc, #208]	; (8008874 <_strtod_l+0xc04>)
 80087a4:	4b2a      	ldr	r3, [pc, #168]	; (8008850 <_strtod_l+0xbe0>)
 80087a6:	f7f7 fe6b 	bl	8000480 <__aeabi_dcmpgt>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d090      	beq.n	80086d0 <_strtod_l+0xa60>
 80087ae:	e4cb      	b.n	8008148 <_strtod_l+0x4d8>
 80087b0:	9b07      	ldr	r3, [sp, #28]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d02b      	beq.n	800880e <_strtod_l+0xb9e>
 80087b6:	23d4      	movs	r3, #212	; 0xd4
 80087b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087ba:	04db      	lsls	r3, r3, #19
 80087bc:	429a      	cmp	r2, r3
 80087be:	d826      	bhi.n	800880e <_strtod_l+0xb9e>
 80087c0:	0020      	movs	r0, r4
 80087c2:	0029      	movs	r1, r5
 80087c4:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <_strtod_l+0xc08>)
 80087c6:	4b2d      	ldr	r3, [pc, #180]	; (800887c <_strtod_l+0xc0c>)
 80087c8:	f7f7 fe50 	bl	800046c <__aeabi_dcmple>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d017      	beq.n	8008800 <_strtod_l+0xb90>
 80087d0:	0020      	movs	r0, r4
 80087d2:	0029      	movs	r1, r5
 80087d4:	f7f7 feb6 	bl	8000544 <__aeabi_d2uiz>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d100      	bne.n	80087de <_strtod_l+0xb6e>
 80087dc:	3001      	adds	r0, #1
 80087de:	f7fa fa5f 	bl	8002ca0 <__aeabi_ui2d>
 80087e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087e4:	0004      	movs	r4, r0
 80087e6:	000b      	movs	r3, r1
 80087e8:	000d      	movs	r5, r1
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	d122      	bne.n	8008834 <_strtod_l+0xbc4>
 80087ee:	2280      	movs	r2, #128	; 0x80
 80087f0:	0612      	lsls	r2, r2, #24
 80087f2:	188b      	adds	r3, r1, r2
 80087f4:	9016      	str	r0, [sp, #88]	; 0x58
 80087f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80087f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80087fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087fc:	9212      	str	r2, [sp, #72]	; 0x48
 80087fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8008800:	22d6      	movs	r2, #214	; 0xd6
 8008802:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008804:	04d2      	lsls	r2, r2, #19
 8008806:	189b      	adds	r3, r3, r2
 8008808:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	9313      	str	r3, [sp, #76]	; 0x4c
 800880e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008810:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008812:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008814:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8008816:	f003 f8e5 	bl	800b9e4 <__ulp>
 800881a:	0002      	movs	r2, r0
 800881c:	000b      	movs	r3, r1
 800881e:	0030      	movs	r0, r6
 8008820:	0039      	movs	r1, r7
 8008822:	f7f9 fb75 	bl	8001f10 <__aeabi_dmul>
 8008826:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800882a:	f7f8 fc17 	bl	800105c <__aeabi_dadd>
 800882e:	0006      	movs	r6, r0
 8008830:	000f      	movs	r7, r1
 8008832:	e78f      	b.n	8008754 <_strtod_l+0xae4>
 8008834:	0002      	movs	r2, r0
 8008836:	9216      	str	r2, [sp, #88]	; 0x58
 8008838:	9317      	str	r3, [sp, #92]	; 0x5c
 800883a:	e7dd      	b.n	80087f8 <_strtod_l+0xb88>
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <_strtod_l+0xc10>)
 800883e:	f7f7 fe0b 	bl	8000458 <__aeabi_dcmplt>
 8008842:	e7b2      	b.n	80087aa <_strtod_l+0xb3a>
 8008844:	fff00000 	.word	0xfff00000
 8008848:	000fffff 	.word	0x000fffff
 800884c:	3ff00000 	.word	0x3ff00000
 8008850:	3fe00000 	.word	0x3fe00000
 8008854:	7ff00000 	.word	0x7ff00000
 8008858:	7fe00000 	.word	0x7fe00000
 800885c:	fcb00000 	.word	0xfcb00000
 8008860:	7c9fffff 	.word	0x7c9fffff
 8008864:	7fefffff 	.word	0x7fefffff
 8008868:	bff00000 	.word	0xbff00000
 800886c:	94a03595 	.word	0x94a03595
 8008870:	3fdfffff 	.word	0x3fdfffff
 8008874:	35afe535 	.word	0x35afe535
 8008878:	ffc00000 	.word	0xffc00000
 800887c:	41dfffff 	.word	0x41dfffff
 8008880:	3fcfffff 	.word	0x3fcfffff

08008884 <_strtod_r>:
 8008884:	b510      	push	{r4, lr}
 8008886:	4b02      	ldr	r3, [pc, #8]	; (8008890 <_strtod_r+0xc>)
 8008888:	f7ff f9f2 	bl	8007c70 <_strtod_l>
 800888c:	bd10      	pop	{r4, pc}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	20000018 	.word	0x20000018

08008894 <_strtol_l.constprop.0>:
 8008894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008896:	b087      	sub	sp, #28
 8008898:	001e      	movs	r6, r3
 800889a:	9005      	str	r0, [sp, #20]
 800889c:	9101      	str	r1, [sp, #4]
 800889e:	9202      	str	r2, [sp, #8]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d048      	beq.n	8008936 <_strtol_l.constprop.0+0xa2>
 80088a4:	000b      	movs	r3, r1
 80088a6:	2e24      	cmp	r6, #36	; 0x24
 80088a8:	d845      	bhi.n	8008936 <_strtol_l.constprop.0+0xa2>
 80088aa:	4a3b      	ldr	r2, [pc, #236]	; (8008998 <_strtol_l.constprop.0+0x104>)
 80088ac:	2108      	movs	r1, #8
 80088ae:	4694      	mov	ip, r2
 80088b0:	001a      	movs	r2, r3
 80088b2:	4660      	mov	r0, ip
 80088b4:	7814      	ldrb	r4, [r2, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	5d00      	ldrb	r0, [r0, r4]
 80088ba:	001d      	movs	r5, r3
 80088bc:	0007      	movs	r7, r0
 80088be:	400f      	ands	r7, r1
 80088c0:	4208      	tst	r0, r1
 80088c2:	d1f5      	bne.n	80088b0 <_strtol_l.constprop.0+0x1c>
 80088c4:	2c2d      	cmp	r4, #45	; 0x2d
 80088c6:	d13d      	bne.n	8008944 <_strtol_l.constprop.0+0xb0>
 80088c8:	2701      	movs	r7, #1
 80088ca:	781c      	ldrb	r4, [r3, #0]
 80088cc:	1c95      	adds	r5, r2, #2
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	d05e      	beq.n	8008990 <_strtol_l.constprop.0+0xfc>
 80088d2:	2e10      	cmp	r6, #16
 80088d4:	d109      	bne.n	80088ea <_strtol_l.constprop.0+0x56>
 80088d6:	2c30      	cmp	r4, #48	; 0x30
 80088d8:	d107      	bne.n	80088ea <_strtol_l.constprop.0+0x56>
 80088da:	2220      	movs	r2, #32
 80088dc:	782b      	ldrb	r3, [r5, #0]
 80088de:	4393      	bics	r3, r2
 80088e0:	2b58      	cmp	r3, #88	; 0x58
 80088e2:	d150      	bne.n	8008986 <_strtol_l.constprop.0+0xf2>
 80088e4:	2610      	movs	r6, #16
 80088e6:	786c      	ldrb	r4, [r5, #1]
 80088e8:	3502      	adds	r5, #2
 80088ea:	4b2c      	ldr	r3, [pc, #176]	; (800899c <_strtol_l.constprop.0+0x108>)
 80088ec:	0031      	movs	r1, r6
 80088ee:	18fb      	adds	r3, r7, r3
 80088f0:	0018      	movs	r0, r3
 80088f2:	9303      	str	r3, [sp, #12]
 80088f4:	f7f7 fcaa 	bl	800024c <__aeabi_uidivmod>
 80088f8:	2200      	movs	r2, #0
 80088fa:	9104      	str	r1, [sp, #16]
 80088fc:	2101      	movs	r1, #1
 80088fe:	4684      	mov	ip, r0
 8008900:	0010      	movs	r0, r2
 8008902:	4249      	negs	r1, r1
 8008904:	0023      	movs	r3, r4
 8008906:	3b30      	subs	r3, #48	; 0x30
 8008908:	2b09      	cmp	r3, #9
 800890a:	d903      	bls.n	8008914 <_strtol_l.constprop.0+0x80>
 800890c:	3b11      	subs	r3, #17
 800890e:	2b19      	cmp	r3, #25
 8008910:	d81d      	bhi.n	800894e <_strtol_l.constprop.0+0xba>
 8008912:	330a      	adds	r3, #10
 8008914:	429e      	cmp	r6, r3
 8008916:	dd1e      	ble.n	8008956 <_strtol_l.constprop.0+0xc2>
 8008918:	1c54      	adds	r4, r2, #1
 800891a:	d009      	beq.n	8008930 <_strtol_l.constprop.0+0x9c>
 800891c:	000a      	movs	r2, r1
 800891e:	4584      	cmp	ip, r0
 8008920:	d306      	bcc.n	8008930 <_strtol_l.constprop.0+0x9c>
 8008922:	d102      	bne.n	800892a <_strtol_l.constprop.0+0x96>
 8008924:	9c04      	ldr	r4, [sp, #16]
 8008926:	429c      	cmp	r4, r3
 8008928:	db02      	blt.n	8008930 <_strtol_l.constprop.0+0x9c>
 800892a:	2201      	movs	r2, #1
 800892c:	4370      	muls	r0, r6
 800892e:	1818      	adds	r0, r3, r0
 8008930:	782c      	ldrb	r4, [r5, #0]
 8008932:	3501      	adds	r5, #1
 8008934:	e7e6      	b.n	8008904 <_strtol_l.constprop.0+0x70>
 8008936:	f001 f96f 	bl	8009c18 <__errno>
 800893a:	2316      	movs	r3, #22
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	2000      	movs	r0, #0
 8008940:	b007      	add	sp, #28
 8008942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008944:	2c2b      	cmp	r4, #43	; 0x2b
 8008946:	d1c2      	bne.n	80088ce <_strtol_l.constprop.0+0x3a>
 8008948:	781c      	ldrb	r4, [r3, #0]
 800894a:	1c95      	adds	r5, r2, #2
 800894c:	e7bf      	b.n	80088ce <_strtol_l.constprop.0+0x3a>
 800894e:	0023      	movs	r3, r4
 8008950:	3b61      	subs	r3, #97	; 0x61
 8008952:	2b19      	cmp	r3, #25
 8008954:	d9dd      	bls.n	8008912 <_strtol_l.constprop.0+0x7e>
 8008956:	1c53      	adds	r3, r2, #1
 8008958:	d109      	bne.n	800896e <_strtol_l.constprop.0+0xda>
 800895a:	2322      	movs	r3, #34	; 0x22
 800895c:	9a05      	ldr	r2, [sp, #20]
 800895e:	9803      	ldr	r0, [sp, #12]
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	9b02      	ldr	r3, [sp, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0eb      	beq.n	8008940 <_strtol_l.constprop.0+0xac>
 8008968:	1e6b      	subs	r3, r5, #1
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	e007      	b.n	800897e <_strtol_l.constprop.0+0xea>
 800896e:	2f00      	cmp	r7, #0
 8008970:	d000      	beq.n	8008974 <_strtol_l.constprop.0+0xe0>
 8008972:	4240      	negs	r0, r0
 8008974:	9b02      	ldr	r3, [sp, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0e2      	beq.n	8008940 <_strtol_l.constprop.0+0xac>
 800897a:	2a00      	cmp	r2, #0
 800897c:	d1f4      	bne.n	8008968 <_strtol_l.constprop.0+0xd4>
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	9a01      	ldr	r2, [sp, #4]
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e7dc      	b.n	8008940 <_strtol_l.constprop.0+0xac>
 8008986:	2430      	movs	r4, #48	; 0x30
 8008988:	2e00      	cmp	r6, #0
 800898a:	d1ae      	bne.n	80088ea <_strtol_l.constprop.0+0x56>
 800898c:	3608      	adds	r6, #8
 800898e:	e7ac      	b.n	80088ea <_strtol_l.constprop.0+0x56>
 8008990:	2c30      	cmp	r4, #48	; 0x30
 8008992:	d0a2      	beq.n	80088da <_strtol_l.constprop.0+0x46>
 8008994:	260a      	movs	r6, #10
 8008996:	e7a8      	b.n	80088ea <_strtol_l.constprop.0+0x56>
 8008998:	0800c889 	.word	0x0800c889
 800899c:	7fffffff 	.word	0x7fffffff

080089a0 <_strtol_r>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	f7ff ff77 	bl	8008894 <_strtol_l.constprop.0>
 80089a6:	bd10      	pop	{r4, pc}

080089a8 <__cvt>:
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	001e      	movs	r6, r3
 80089ac:	2300      	movs	r3, #0
 80089ae:	0014      	movs	r4, r2
 80089b0:	b08b      	sub	sp, #44	; 0x2c
 80089b2:	429e      	cmp	r6, r3
 80089b4:	da04      	bge.n	80089c0 <__cvt+0x18>
 80089b6:	2180      	movs	r1, #128	; 0x80
 80089b8:	0609      	lsls	r1, r1, #24
 80089ba:	1873      	adds	r3, r6, r1
 80089bc:	001e      	movs	r6, r3
 80089be:	232d      	movs	r3, #45	; 0x2d
 80089c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089c4:	7013      	strb	r3, [r2, #0]
 80089c6:	2320      	movs	r3, #32
 80089c8:	2203      	movs	r2, #3
 80089ca:	439f      	bics	r7, r3
 80089cc:	2f46      	cmp	r7, #70	; 0x46
 80089ce:	d007      	beq.n	80089e0 <__cvt+0x38>
 80089d0:	003b      	movs	r3, r7
 80089d2:	3b45      	subs	r3, #69	; 0x45
 80089d4:	4259      	negs	r1, r3
 80089d6:	414b      	adcs	r3, r1
 80089d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80089da:	3a01      	subs	r2, #1
 80089dc:	18cb      	adds	r3, r1, r3
 80089de:	9310      	str	r3, [sp, #64]	; 0x40
 80089e0:	ab09      	add	r3, sp, #36	; 0x24
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	ab08      	add	r3, sp, #32
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ea:	9200      	str	r2, [sp, #0]
 80089ec:	9302      	str	r3, [sp, #8]
 80089ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089f0:	0022      	movs	r2, r4
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	0033      	movs	r3, r6
 80089f6:	f001 f9eb 	bl	8009dd0 <_dtoa_r>
 80089fa:	0005      	movs	r5, r0
 80089fc:	2f47      	cmp	r7, #71	; 0x47
 80089fe:	d102      	bne.n	8008a06 <__cvt+0x5e>
 8008a00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a02:	07db      	lsls	r3, r3, #31
 8008a04:	d528      	bpl.n	8008a58 <__cvt+0xb0>
 8008a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a08:	18eb      	adds	r3, r5, r3
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	2f46      	cmp	r7, #70	; 0x46
 8008a0e:	d114      	bne.n	8008a3a <__cvt+0x92>
 8008a10:	782b      	ldrb	r3, [r5, #0]
 8008a12:	2b30      	cmp	r3, #48	; 0x30
 8008a14:	d10c      	bne.n	8008a30 <__cvt+0x88>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	0020      	movs	r0, r4
 8008a1c:	0031      	movs	r1, r6
 8008a1e:	f7f7 fd15 	bl	800044c <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d104      	bne.n	8008a30 <__cvt+0x88>
 8008a26:	2301      	movs	r3, #1
 8008a28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a32:	9a07      	ldr	r2, [sp, #28]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	18d3      	adds	r3, r2, r3
 8008a38:	9307      	str	r3, [sp, #28]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	0020      	movs	r0, r4
 8008a40:	0031      	movs	r1, r6
 8008a42:	f7f7 fd03 	bl	800044c <__aeabi_dcmpeq>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d001      	beq.n	8008a4e <__cvt+0xa6>
 8008a4a:	9b07      	ldr	r3, [sp, #28]
 8008a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4e:	2230      	movs	r2, #48	; 0x30
 8008a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a52:	9907      	ldr	r1, [sp, #28]
 8008a54:	428b      	cmp	r3, r1
 8008a56:	d306      	bcc.n	8008a66 <__cvt+0xbe>
 8008a58:	0028      	movs	r0, r5
 8008a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008a5e:	1b5b      	subs	r3, r3, r5
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	b00b      	add	sp, #44	; 0x2c
 8008a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a66:	1c59      	adds	r1, r3, #1
 8008a68:	9109      	str	r1, [sp, #36]	; 0x24
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	e7f0      	b.n	8008a50 <__cvt+0xa8>

08008a6e <__exponent>:
 8008a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a70:	1c83      	adds	r3, r0, #2
 8008a72:	b087      	sub	sp, #28
 8008a74:	9303      	str	r3, [sp, #12]
 8008a76:	0005      	movs	r5, r0
 8008a78:	000c      	movs	r4, r1
 8008a7a:	232b      	movs	r3, #43	; 0x2b
 8008a7c:	7002      	strb	r2, [r0, #0]
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	da01      	bge.n	8008a86 <__exponent+0x18>
 8008a82:	424c      	negs	r4, r1
 8008a84:	3302      	adds	r3, #2
 8008a86:	706b      	strb	r3, [r5, #1]
 8008a88:	2c09      	cmp	r4, #9
 8008a8a:	dd2f      	ble.n	8008aec <__exponent+0x7e>
 8008a8c:	270a      	movs	r7, #10
 8008a8e:	ab04      	add	r3, sp, #16
 8008a90:	1dde      	adds	r6, r3, #7
 8008a92:	0020      	movs	r0, r4
 8008a94:	0039      	movs	r1, r7
 8008a96:	9601      	str	r6, [sp, #4]
 8008a98:	f7f7 fcc2 	bl	8000420 <__aeabi_idivmod>
 8008a9c:	3e01      	subs	r6, #1
 8008a9e:	3130      	adds	r1, #48	; 0x30
 8008aa0:	0020      	movs	r0, r4
 8008aa2:	7031      	strb	r1, [r6, #0]
 8008aa4:	0039      	movs	r1, r7
 8008aa6:	9402      	str	r4, [sp, #8]
 8008aa8:	f7f7 fbd4 	bl	8000254 <__divsi3>
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	0004      	movs	r4, r0
 8008ab0:	2b63      	cmp	r3, #99	; 0x63
 8008ab2:	dcee      	bgt.n	8008a92 <__exponent+0x24>
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	3430      	adds	r4, #48	; 0x30
 8008ab8:	1e9a      	subs	r2, r3, #2
 8008aba:	0013      	movs	r3, r2
 8008abc:	9903      	ldr	r1, [sp, #12]
 8008abe:	7014      	strb	r4, [r2, #0]
 8008ac0:	a804      	add	r0, sp, #16
 8008ac2:	3007      	adds	r0, #7
 8008ac4:	4298      	cmp	r0, r3
 8008ac6:	d80c      	bhi.n	8008ae2 <__exponent+0x74>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4282      	cmp	r2, r0
 8008acc:	d804      	bhi.n	8008ad8 <__exponent+0x6a>
 8008ace:	aa04      	add	r2, sp, #16
 8008ad0:	3309      	adds	r3, #9
 8008ad2:	189b      	adds	r3, r3, r2
 8008ad4:	9a01      	ldr	r2, [sp, #4]
 8008ad6:	1a9b      	subs	r3, r3, r2
 8008ad8:	9a03      	ldr	r2, [sp, #12]
 8008ada:	18d3      	adds	r3, r2, r3
 8008adc:	1b58      	subs	r0, r3, r5
 8008ade:	b007      	add	sp, #28
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae2:	7818      	ldrb	r0, [r3, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	7008      	strb	r0, [r1, #0]
 8008ae8:	3101      	adds	r1, #1
 8008aea:	e7e9      	b.n	8008ac0 <__exponent+0x52>
 8008aec:	2330      	movs	r3, #48	; 0x30
 8008aee:	3430      	adds	r4, #48	; 0x30
 8008af0:	70ab      	strb	r3, [r5, #2]
 8008af2:	70ec      	strb	r4, [r5, #3]
 8008af4:	1d2b      	adds	r3, r5, #4
 8008af6:	e7f1      	b.n	8008adc <__exponent+0x6e>

08008af8 <_printf_float>:
 8008af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008afa:	b095      	sub	sp, #84	; 0x54
 8008afc:	000c      	movs	r4, r1
 8008afe:	9208      	str	r2, [sp, #32]
 8008b00:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	0007      	movs	r7, r0
 8008b06:	f001 f835 	bl	8009b74 <_localeconv_r>
 8008b0a:	6803      	ldr	r3, [r0, #0]
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b10:	f7f7 fafa 	bl	8000108 <strlen>
 8008b14:	2300      	movs	r3, #0
 8008b16:	9312      	str	r3, [sp, #72]	; 0x48
 8008b18:	7e23      	ldrb	r3, [r4, #24]
 8008b1a:	2207      	movs	r2, #7
 8008b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	900d      	str	r0, [sp, #52]	; 0x34
 8008b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	05c9      	lsls	r1, r1, #23
 8008b2a:	d547      	bpl.n	8008bbc <_printf_float+0xc4>
 8008b2c:	189b      	adds	r3, r3, r2
 8008b2e:	4393      	bics	r3, r2
 8008b30:	001a      	movs	r2, r3
 8008b32:	3208      	adds	r2, #8
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	681e      	ldr	r6, [r3, #0]
 8008b38:	685d      	ldr	r5, [r3, #4]
 8008b3a:	0032      	movs	r2, r6
 8008b3c:	002b      	movs	r3, r5
 8008b3e:	64a2      	str	r2, [r4, #72]	; 0x48
 8008b40:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008b42:	2201      	movs	r2, #1
 8008b44:	006b      	lsls	r3, r5, #1
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	930e      	str	r3, [sp, #56]	; 0x38
 8008b4a:	0030      	movs	r0, r6
 8008b4c:	4bab      	ldr	r3, [pc, #684]	; (8008dfc <_printf_float+0x304>)
 8008b4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008b50:	4252      	negs	r2, r2
 8008b52:	f7fa f821 	bl	8002b98 <__aeabi_dcmpun>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d132      	bne.n	8008bc0 <_printf_float+0xc8>
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	0030      	movs	r0, r6
 8008b5e:	4ba7      	ldr	r3, [pc, #668]	; (8008dfc <_printf_float+0x304>)
 8008b60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008b62:	4252      	negs	r2, r2
 8008b64:	f7f7 fc82 	bl	800046c <__aeabi_dcmple>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d129      	bne.n	8008bc0 <_printf_float+0xc8>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2300      	movs	r3, #0
 8008b70:	0030      	movs	r0, r6
 8008b72:	0029      	movs	r1, r5
 8008b74:	f7f7 fc70 	bl	8000458 <__aeabi_dcmplt>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d003      	beq.n	8008b84 <_printf_float+0x8c>
 8008b7c:	0023      	movs	r3, r4
 8008b7e:	222d      	movs	r2, #45	; 0x2d
 8008b80:	3343      	adds	r3, #67	; 0x43
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b86:	4d9e      	ldr	r5, [pc, #632]	; (8008e00 <_printf_float+0x308>)
 8008b88:	2b47      	cmp	r3, #71	; 0x47
 8008b8a:	d900      	bls.n	8008b8e <_printf_float+0x96>
 8008b8c:	4d9d      	ldr	r5, [pc, #628]	; (8008e04 <_printf_float+0x30c>)
 8008b8e:	2303      	movs	r3, #3
 8008b90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	3301      	adds	r3, #1
 8008b96:	439a      	bics	r2, r3
 8008b98:	2300      	movs	r3, #0
 8008b9a:	6022      	str	r2, [r4, #0]
 8008b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba0:	0021      	movs	r1, r4
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	0038      	movs	r0, r7
 8008ba6:	9b08      	ldr	r3, [sp, #32]
 8008ba8:	aa13      	add	r2, sp, #76	; 0x4c
 8008baa:	f000 f9fb 	bl	8008fa4 <_printf_common>
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d000      	beq.n	8008bb4 <_printf_float+0xbc>
 8008bb2:	e0a3      	b.n	8008cfc <_printf_float+0x204>
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	4240      	negs	r0, r0
 8008bb8:	b015      	add	sp, #84	; 0x54
 8008bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bbc:	3307      	adds	r3, #7
 8008bbe:	e7b6      	b.n	8008b2e <_printf_float+0x36>
 8008bc0:	0032      	movs	r2, r6
 8008bc2:	002b      	movs	r3, r5
 8008bc4:	0030      	movs	r0, r6
 8008bc6:	0029      	movs	r1, r5
 8008bc8:	f7f9 ffe6 	bl	8002b98 <__aeabi_dcmpun>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d00b      	beq.n	8008be8 <_printf_float+0xf0>
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	da03      	bge.n	8008bdc <_printf_float+0xe4>
 8008bd4:	0023      	movs	r3, r4
 8008bd6:	222d      	movs	r2, #45	; 0x2d
 8008bd8:	3343      	adds	r3, #67	; 0x43
 8008bda:	701a      	strb	r2, [r3, #0]
 8008bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bde:	4d8a      	ldr	r5, [pc, #552]	; (8008e08 <_printf_float+0x310>)
 8008be0:	2b47      	cmp	r3, #71	; 0x47
 8008be2:	d9d4      	bls.n	8008b8e <_printf_float+0x96>
 8008be4:	4d89      	ldr	r5, [pc, #548]	; (8008e0c <_printf_float+0x314>)
 8008be6:	e7d2      	b.n	8008b8e <_printf_float+0x96>
 8008be8:	2220      	movs	r2, #32
 8008bea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bec:	6863      	ldr	r3, [r4, #4]
 8008bee:	4391      	bics	r1, r2
 8008bf0:	910e      	str	r1, [sp, #56]	; 0x38
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	d14a      	bne.n	8008c8c <_printf_float+0x194>
 8008bf6:	3307      	adds	r3, #7
 8008bf8:	6063      	str	r3, [r4, #4]
 8008bfa:	2380      	movs	r3, #128	; 0x80
 8008bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	4313      	orrs	r3, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	9206      	str	r2, [sp, #24]
 8008c06:	aa12      	add	r2, sp, #72	; 0x48
 8008c08:	9205      	str	r2, [sp, #20]
 8008c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	9204      	str	r2, [sp, #16]
 8008c10:	aa11      	add	r2, sp, #68	; 0x44
 8008c12:	9203      	str	r2, [sp, #12]
 8008c14:	2223      	movs	r2, #35	; 0x23
 8008c16:	a908      	add	r1, sp, #32
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	6863      	ldr	r3, [r4, #4]
 8008c1c:	1852      	adds	r2, r2, r1
 8008c1e:	9202      	str	r2, [sp, #8]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	0032      	movs	r2, r6
 8008c24:	002b      	movs	r3, r5
 8008c26:	0038      	movs	r0, r7
 8008c28:	f7ff febe 	bl	80089a8 <__cvt>
 8008c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c2e:	0005      	movs	r5, r0
 8008c30:	2b47      	cmp	r3, #71	; 0x47
 8008c32:	d109      	bne.n	8008c48 <_printf_float+0x150>
 8008c34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c36:	1cda      	adds	r2, r3, #3
 8008c38:	db02      	blt.n	8008c40 <_printf_float+0x148>
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	dd49      	ble.n	8008cd4 <_printf_float+0x1dc>
 8008c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c42:	3b02      	subs	r3, #2
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	930a      	str	r3, [sp, #40]	; 0x28
 8008c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c4c:	2b65      	cmp	r3, #101	; 0x65
 8008c4e:	d824      	bhi.n	8008c9a <_printf_float+0x1a2>
 8008c50:	0020      	movs	r0, r4
 8008c52:	001a      	movs	r2, r3
 8008c54:	3901      	subs	r1, #1
 8008c56:	3050      	adds	r0, #80	; 0x50
 8008c58:	9111      	str	r1, [sp, #68]	; 0x44
 8008c5a:	f7ff ff08 	bl	8008a6e <__exponent>
 8008c5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c60:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c62:	1813      	adds	r3, r2, r0
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	2a01      	cmp	r2, #1
 8008c68:	dc02      	bgt.n	8008c70 <_printf_float+0x178>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	07d2      	lsls	r2, r2, #31
 8008c6e:	d501      	bpl.n	8008c74 <_printf_float+0x17c>
 8008c70:	3301      	adds	r3, #1
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	2323      	movs	r3, #35	; 0x23
 8008c76:	aa08      	add	r2, sp, #32
 8008c78:	189b      	adds	r3, r3, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d100      	bne.n	8008c82 <_printf_float+0x18a>
 8008c80:	e78d      	b.n	8008b9e <_printf_float+0xa6>
 8008c82:	0023      	movs	r3, r4
 8008c84:	222d      	movs	r2, #45	; 0x2d
 8008c86:	3343      	adds	r3, #67	; 0x43
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	e788      	b.n	8008b9e <_printf_float+0xa6>
 8008c8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c8e:	2a47      	cmp	r2, #71	; 0x47
 8008c90:	d1b3      	bne.n	8008bfa <_printf_float+0x102>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1b1      	bne.n	8008bfa <_printf_float+0x102>
 8008c96:	3301      	adds	r3, #1
 8008c98:	e7ae      	b.n	8008bf8 <_printf_float+0x100>
 8008c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c9c:	2b66      	cmp	r3, #102	; 0x66
 8008c9e:	d11b      	bne.n	8008cd8 <_printf_float+0x1e0>
 8008ca0:	6863      	ldr	r3, [r4, #4]
 8008ca2:	2900      	cmp	r1, #0
 8008ca4:	dd09      	ble.n	8008cba <_printf_float+0x1c2>
 8008ca6:	6121      	str	r1, [r4, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d102      	bne.n	8008cb2 <_printf_float+0x1ba>
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	07d2      	lsls	r2, r2, #31
 8008cb0:	d50b      	bpl.n	8008cca <_printf_float+0x1d2>
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	185b      	adds	r3, r3, r1
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	e007      	b.n	8008cca <_printf_float+0x1d2>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <_printf_float+0x1ce>
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	6821      	ldr	r1, [r4, #0]
 8008cc2:	4211      	tst	r1, r2
 8008cc4:	d000      	beq.n	8008cc8 <_printf_float+0x1d0>
 8008cc6:	1c9a      	adds	r2, r3, #2
 8008cc8:	6122      	str	r2, [r4, #16]
 8008cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ccc:	65a3      	str	r3, [r4, #88]	; 0x58
 8008cce:	2300      	movs	r3, #0
 8008cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cd2:	e7cf      	b.n	8008c74 <_printf_float+0x17c>
 8008cd4:	2367      	movs	r3, #103	; 0x67
 8008cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cdc:	4299      	cmp	r1, r3
 8008cde:	db06      	blt.n	8008cee <_printf_float+0x1f6>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	6121      	str	r1, [r4, #16]
 8008ce4:	07db      	lsls	r3, r3, #31
 8008ce6:	d5f0      	bpl.n	8008cca <_printf_float+0x1d2>
 8008ce8:	3101      	adds	r1, #1
 8008cea:	6121      	str	r1, [r4, #16]
 8008cec:	e7ed      	b.n	8008cca <_printf_float+0x1d2>
 8008cee:	2201      	movs	r2, #1
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	dc01      	bgt.n	8008cf8 <_printf_float+0x200>
 8008cf4:	1892      	adds	r2, r2, r2
 8008cf6:	1a52      	subs	r2, r2, r1
 8008cf8:	189b      	adds	r3, r3, r2
 8008cfa:	e7dc      	b.n	8008cb6 <_printf_float+0x1be>
 8008cfc:	6822      	ldr	r2, [r4, #0]
 8008cfe:	0553      	lsls	r3, r2, #21
 8008d00:	d408      	bmi.n	8008d14 <_printf_float+0x21c>
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	002a      	movs	r2, r5
 8008d06:	0038      	movs	r0, r7
 8008d08:	9908      	ldr	r1, [sp, #32]
 8008d0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d0c:	47a8      	blx	r5
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d12a      	bne.n	8008d68 <_printf_float+0x270>
 8008d12:	e74f      	b.n	8008bb4 <_printf_float+0xbc>
 8008d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d16:	2b65      	cmp	r3, #101	; 0x65
 8008d18:	d800      	bhi.n	8008d1c <_printf_float+0x224>
 8008d1a:	e0ec      	b.n	8008ef6 <_printf_float+0x3fe>
 8008d1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008d1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008d20:	2200      	movs	r2, #0
 8008d22:	2300      	movs	r3, #0
 8008d24:	f7f7 fb92 	bl	800044c <__aeabi_dcmpeq>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d034      	beq.n	8008d96 <_printf_float+0x29e>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	0038      	movs	r0, r7
 8008d30:	4a37      	ldr	r2, [pc, #220]	; (8008e10 <_printf_float+0x318>)
 8008d32:	9908      	ldr	r1, [sp, #32]
 8008d34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d36:	47a8      	blx	r5
 8008d38:	3001      	adds	r0, #1
 8008d3a:	d100      	bne.n	8008d3e <_printf_float+0x246>
 8008d3c:	e73a      	b.n	8008bb4 <_printf_float+0xbc>
 8008d3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d42:	429a      	cmp	r2, r3
 8008d44:	db02      	blt.n	8008d4c <_printf_float+0x254>
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	07db      	lsls	r3, r3, #31
 8008d4a:	d50d      	bpl.n	8008d68 <_printf_float+0x270>
 8008d4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d4e:	0038      	movs	r0, r7
 8008d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d54:	9908      	ldr	r1, [sp, #32]
 8008d56:	47a8      	blx	r5
 8008d58:	2500      	movs	r5, #0
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d100      	bne.n	8008d60 <_printf_float+0x268>
 8008d5e:	e729      	b.n	8008bb4 <_printf_float+0xbc>
 8008d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d62:	3b01      	subs	r3, #1
 8008d64:	42ab      	cmp	r3, r5
 8008d66:	dc0a      	bgt.n	8008d7e <_printf_float+0x286>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	079b      	lsls	r3, r3, #30
 8008d6c:	d500      	bpl.n	8008d70 <_printf_float+0x278>
 8008d6e:	e116      	b.n	8008f9e <_printf_float+0x4a6>
 8008d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d72:	68e0      	ldr	r0, [r4, #12]
 8008d74:	4298      	cmp	r0, r3
 8008d76:	db00      	blt.n	8008d7a <_printf_float+0x282>
 8008d78:	e71e      	b.n	8008bb8 <_printf_float+0xc0>
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	e71c      	b.n	8008bb8 <_printf_float+0xc0>
 8008d7e:	0022      	movs	r2, r4
 8008d80:	2301      	movs	r3, #1
 8008d82:	0038      	movs	r0, r7
 8008d84:	9908      	ldr	r1, [sp, #32]
 8008d86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d88:	321a      	adds	r2, #26
 8008d8a:	47b0      	blx	r6
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d100      	bne.n	8008d92 <_printf_float+0x29a>
 8008d90:	e710      	b.n	8008bb4 <_printf_float+0xbc>
 8008d92:	3501      	adds	r5, #1
 8008d94:	e7e4      	b.n	8008d60 <_printf_float+0x268>
 8008d96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dc3b      	bgt.n	8008e14 <_printf_float+0x31c>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	0038      	movs	r0, r7
 8008da0:	4a1b      	ldr	r2, [pc, #108]	; (8008e10 <_printf_float+0x318>)
 8008da2:	9908      	ldr	r1, [sp, #32]
 8008da4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008da6:	47b0      	blx	r6
 8008da8:	3001      	adds	r0, #1
 8008daa:	d100      	bne.n	8008dae <_printf_float+0x2b6>
 8008dac:	e702      	b.n	8008bb4 <_printf_float+0xbc>
 8008dae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008db0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008db2:	4313      	orrs	r3, r2
 8008db4:	d102      	bne.n	8008dbc <_printf_float+0x2c4>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	07db      	lsls	r3, r3, #31
 8008dba:	d5d5      	bpl.n	8008d68 <_printf_float+0x270>
 8008dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dbe:	0038      	movs	r0, r7
 8008dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc2:	9908      	ldr	r1, [sp, #32]
 8008dc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dc6:	47b0      	blx	r6
 8008dc8:	2300      	movs	r3, #0
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d100      	bne.n	8008dd0 <_printf_float+0x2d8>
 8008dce:	e6f1      	b.n	8008bb4 <_printf_float+0xbc>
 8008dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dd6:	425b      	negs	r3, r3
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	dc01      	bgt.n	8008de0 <_printf_float+0x2e8>
 8008ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dde:	e791      	b.n	8008d04 <_printf_float+0x20c>
 8008de0:	0022      	movs	r2, r4
 8008de2:	2301      	movs	r3, #1
 8008de4:	0038      	movs	r0, r7
 8008de6:	9908      	ldr	r1, [sp, #32]
 8008de8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dea:	321a      	adds	r2, #26
 8008dec:	47b0      	blx	r6
 8008dee:	3001      	adds	r0, #1
 8008df0:	d100      	bne.n	8008df4 <_printf_float+0x2fc>
 8008df2:	e6df      	b.n	8008bb4 <_printf_float+0xbc>
 8008df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df6:	3301      	adds	r3, #1
 8008df8:	e7ea      	b.n	8008dd0 <_printf_float+0x2d8>
 8008dfa:	46c0      	nop			; (mov r8, r8)
 8008dfc:	7fefffff 	.word	0x7fefffff
 8008e00:	0800c989 	.word	0x0800c989
 8008e04:	0800c98d 	.word	0x0800c98d
 8008e08:	0800c991 	.word	0x0800c991
 8008e0c:	0800c995 	.word	0x0800c995
 8008e10:	0800c999 	.word	0x0800c999
 8008e14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e18:	920a      	str	r2, [sp, #40]	; 0x28
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	dd00      	ble.n	8008e20 <_printf_float+0x328>
 8008e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	dc3d      	bgt.n	8008ea2 <_printf_float+0x3aa>
 8008e26:	2300      	movs	r3, #0
 8008e28:	930e      	str	r3, [sp, #56]	; 0x38
 8008e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	17db      	asrs	r3, r3, #31
 8008e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e42:	4293      	cmp	r3, r2
 8008e44:	dc36      	bgt.n	8008eb4 <_printf_float+0x3bc>
 8008e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	db40      	blt.n	8008ed0 <_printf_float+0x3d8>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	07db      	lsls	r3, r3, #31
 8008e52:	d43d      	bmi.n	8008ed0 <_printf_float+0x3d8>
 8008e54:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008e56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e5a:	1af3      	subs	r3, r6, r3
 8008e5c:	1ab6      	subs	r6, r6, r2
 8008e5e:	429e      	cmp	r6, r3
 8008e60:	dd00      	ble.n	8008e64 <_printf_float+0x36c>
 8008e62:	001e      	movs	r6, r3
 8008e64:	2e00      	cmp	r6, #0
 8008e66:	dc3c      	bgt.n	8008ee2 <_printf_float+0x3ea>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e6c:	43f3      	mvns	r3, r6
 8008e6e:	17db      	asrs	r3, r3, #31
 8008e70:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e7a:	4032      	ands	r2, r6
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e80:	4293      	cmp	r3, r2
 8008e82:	dc00      	bgt.n	8008e86 <_printf_float+0x38e>
 8008e84:	e770      	b.n	8008d68 <_printf_float+0x270>
 8008e86:	0022      	movs	r2, r4
 8008e88:	2301      	movs	r3, #1
 8008e8a:	0038      	movs	r0, r7
 8008e8c:	9908      	ldr	r1, [sp, #32]
 8008e8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008e90:	321a      	adds	r2, #26
 8008e92:	47a8      	blx	r5
 8008e94:	3001      	adds	r0, #1
 8008e96:	d100      	bne.n	8008e9a <_printf_float+0x3a2>
 8008e98:	e68c      	b.n	8008bb4 <_printf_float+0xbc>
 8008e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea0:	e7e7      	b.n	8008e72 <_printf_float+0x37a>
 8008ea2:	002a      	movs	r2, r5
 8008ea4:	0038      	movs	r0, r7
 8008ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea8:	9908      	ldr	r1, [sp, #32]
 8008eaa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008eac:	47b0      	blx	r6
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d1b9      	bne.n	8008e26 <_printf_float+0x32e>
 8008eb2:	e67f      	b.n	8008bb4 <_printf_float+0xbc>
 8008eb4:	0022      	movs	r2, r4
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	0038      	movs	r0, r7
 8008eba:	9908      	ldr	r1, [sp, #32]
 8008ebc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ebe:	321a      	adds	r2, #26
 8008ec0:	47b0      	blx	r6
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d100      	bne.n	8008ec8 <_printf_float+0x3d0>
 8008ec6:	e675      	b.n	8008bb4 <_printf_float+0xbc>
 8008ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eca:	3301      	adds	r3, #1
 8008ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ece:	e7b0      	b.n	8008e32 <_printf_float+0x33a>
 8008ed0:	0038      	movs	r0, r7
 8008ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ed6:	9908      	ldr	r1, [sp, #32]
 8008ed8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008eda:	47b0      	blx	r6
 8008edc:	3001      	adds	r0, #1
 8008ede:	d1b9      	bne.n	8008e54 <_printf_float+0x35c>
 8008ee0:	e668      	b.n	8008bb4 <_printf_float+0xbc>
 8008ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee4:	0038      	movs	r0, r7
 8008ee6:	18ea      	adds	r2, r5, r3
 8008ee8:	9908      	ldr	r1, [sp, #32]
 8008eea:	0033      	movs	r3, r6
 8008eec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008eee:	47a8      	blx	r5
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d1b9      	bne.n	8008e68 <_printf_float+0x370>
 8008ef4:	e65e      	b.n	8008bb4 <_printf_float+0xbc>
 8008ef6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	dc02      	bgt.n	8008f02 <_printf_float+0x40a>
 8008efc:	2301      	movs	r3, #1
 8008efe:	421a      	tst	r2, r3
 8008f00:	d03a      	beq.n	8008f78 <_printf_float+0x480>
 8008f02:	2301      	movs	r3, #1
 8008f04:	002a      	movs	r2, r5
 8008f06:	0038      	movs	r0, r7
 8008f08:	9908      	ldr	r1, [sp, #32]
 8008f0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f0c:	47b0      	blx	r6
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d100      	bne.n	8008f14 <_printf_float+0x41c>
 8008f12:	e64f      	b.n	8008bb4 <_printf_float+0xbc>
 8008f14:	0038      	movs	r0, r7
 8008f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f1a:	9908      	ldr	r1, [sp, #32]
 8008f1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f1e:	47b0      	blx	r6
 8008f20:	3001      	adds	r0, #1
 8008f22:	d100      	bne.n	8008f26 <_printf_float+0x42e>
 8008f24:	e646      	b.n	8008bb4 <_printf_float+0xbc>
 8008f26:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008f28:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008f2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	001e      	movs	r6, r3
 8008f30:	2300      	movs	r3, #0
 8008f32:	f7f7 fa8b 	bl	800044c <__aeabi_dcmpeq>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d11c      	bne.n	8008f74 <_printf_float+0x47c>
 8008f3a:	0033      	movs	r3, r6
 8008f3c:	1c6a      	adds	r2, r5, #1
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	0038      	movs	r0, r7
 8008f42:	9908      	ldr	r1, [sp, #32]
 8008f44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f46:	47a8      	blx	r5
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d10f      	bne.n	8008f6c <_printf_float+0x474>
 8008f4c:	e632      	b.n	8008bb4 <_printf_float+0xbc>
 8008f4e:	0022      	movs	r2, r4
 8008f50:	2301      	movs	r3, #1
 8008f52:	0038      	movs	r0, r7
 8008f54:	9908      	ldr	r1, [sp, #32]
 8008f56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f58:	321a      	adds	r2, #26
 8008f5a:	47b0      	blx	r6
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d100      	bne.n	8008f62 <_printf_float+0x46a>
 8008f60:	e628      	b.n	8008bb4 <_printf_float+0xbc>
 8008f62:	3501      	adds	r5, #1
 8008f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f66:	3b01      	subs	r3, #1
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	dcf0      	bgt.n	8008f4e <_printf_float+0x456>
 8008f6c:	0022      	movs	r2, r4
 8008f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f70:	3250      	adds	r2, #80	; 0x50
 8008f72:	e6c8      	b.n	8008d06 <_printf_float+0x20e>
 8008f74:	2500      	movs	r5, #0
 8008f76:	e7f5      	b.n	8008f64 <_printf_float+0x46c>
 8008f78:	002a      	movs	r2, r5
 8008f7a:	e7e1      	b.n	8008f40 <_printf_float+0x448>
 8008f7c:	0022      	movs	r2, r4
 8008f7e:	2301      	movs	r3, #1
 8008f80:	0038      	movs	r0, r7
 8008f82:	9908      	ldr	r1, [sp, #32]
 8008f84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f86:	3219      	adds	r2, #25
 8008f88:	47b0      	blx	r6
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d100      	bne.n	8008f90 <_printf_float+0x498>
 8008f8e:	e611      	b.n	8008bb4 <_printf_float+0xbc>
 8008f90:	3501      	adds	r5, #1
 8008f92:	68e3      	ldr	r3, [r4, #12]
 8008f94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f96:	1a9b      	subs	r3, r3, r2
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	dcef      	bgt.n	8008f7c <_printf_float+0x484>
 8008f9c:	e6e8      	b.n	8008d70 <_printf_float+0x278>
 8008f9e:	2500      	movs	r5, #0
 8008fa0:	e7f7      	b.n	8008f92 <_printf_float+0x49a>
 8008fa2:	46c0      	nop			; (mov r8, r8)

08008fa4 <_printf_common>:
 8008fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa6:	0016      	movs	r6, r2
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	688a      	ldr	r2, [r1, #8]
 8008fac:	690b      	ldr	r3, [r1, #16]
 8008fae:	000c      	movs	r4, r1
 8008fb0:	9000      	str	r0, [sp, #0]
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	da00      	bge.n	8008fb8 <_printf_common+0x14>
 8008fb6:	0013      	movs	r3, r2
 8008fb8:	0022      	movs	r2, r4
 8008fba:	6033      	str	r3, [r6, #0]
 8008fbc:	3243      	adds	r2, #67	; 0x43
 8008fbe:	7812      	ldrb	r2, [r2, #0]
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	d001      	beq.n	8008fc8 <_printf_common+0x24>
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	6033      	str	r3, [r6, #0]
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	069b      	lsls	r3, r3, #26
 8008fcc:	d502      	bpl.n	8008fd4 <_printf_common+0x30>
 8008fce:	6833      	ldr	r3, [r6, #0]
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	6822      	ldr	r2, [r4, #0]
 8008fd6:	2306      	movs	r3, #6
 8008fd8:	0015      	movs	r5, r2
 8008fda:	401d      	ands	r5, r3
 8008fdc:	421a      	tst	r2, r3
 8008fde:	d027      	beq.n	8009030 <_printf_common+0x8c>
 8008fe0:	0023      	movs	r3, r4
 8008fe2:	3343      	adds	r3, #67	; 0x43
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	1e5a      	subs	r2, r3, #1
 8008fe8:	4193      	sbcs	r3, r2
 8008fea:	6822      	ldr	r2, [r4, #0]
 8008fec:	0692      	lsls	r2, r2, #26
 8008fee:	d430      	bmi.n	8009052 <_printf_common+0xae>
 8008ff0:	0022      	movs	r2, r4
 8008ff2:	9901      	ldr	r1, [sp, #4]
 8008ff4:	9800      	ldr	r0, [sp, #0]
 8008ff6:	9d08      	ldr	r5, [sp, #32]
 8008ff8:	3243      	adds	r2, #67	; 0x43
 8008ffa:	47a8      	blx	r5
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d025      	beq.n	800904c <_printf_common+0xa8>
 8009000:	2206      	movs	r2, #6
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	2500      	movs	r5, #0
 8009006:	4013      	ands	r3, r2
 8009008:	2b04      	cmp	r3, #4
 800900a:	d105      	bne.n	8009018 <_printf_common+0x74>
 800900c:	6833      	ldr	r3, [r6, #0]
 800900e:	68e5      	ldr	r5, [r4, #12]
 8009010:	1aed      	subs	r5, r5, r3
 8009012:	43eb      	mvns	r3, r5
 8009014:	17db      	asrs	r3, r3, #31
 8009016:	401d      	ands	r5, r3
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	6922      	ldr	r2, [r4, #16]
 800901c:	4293      	cmp	r3, r2
 800901e:	dd01      	ble.n	8009024 <_printf_common+0x80>
 8009020:	1a9b      	subs	r3, r3, r2
 8009022:	18ed      	adds	r5, r5, r3
 8009024:	2600      	movs	r6, #0
 8009026:	42b5      	cmp	r5, r6
 8009028:	d120      	bne.n	800906c <_printf_common+0xc8>
 800902a:	2000      	movs	r0, #0
 800902c:	e010      	b.n	8009050 <_printf_common+0xac>
 800902e:	3501      	adds	r5, #1
 8009030:	68e3      	ldr	r3, [r4, #12]
 8009032:	6832      	ldr	r2, [r6, #0]
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	42ab      	cmp	r3, r5
 8009038:	ddd2      	ble.n	8008fe0 <_printf_common+0x3c>
 800903a:	0022      	movs	r2, r4
 800903c:	2301      	movs	r3, #1
 800903e:	9901      	ldr	r1, [sp, #4]
 8009040:	9800      	ldr	r0, [sp, #0]
 8009042:	9f08      	ldr	r7, [sp, #32]
 8009044:	3219      	adds	r2, #25
 8009046:	47b8      	blx	r7
 8009048:	3001      	adds	r0, #1
 800904a:	d1f0      	bne.n	800902e <_printf_common+0x8a>
 800904c:	2001      	movs	r0, #1
 800904e:	4240      	negs	r0, r0
 8009050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009052:	2030      	movs	r0, #48	; 0x30
 8009054:	18e1      	adds	r1, r4, r3
 8009056:	3143      	adds	r1, #67	; 0x43
 8009058:	7008      	strb	r0, [r1, #0]
 800905a:	0021      	movs	r1, r4
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	3145      	adds	r1, #69	; 0x45
 8009060:	7809      	ldrb	r1, [r1, #0]
 8009062:	18a2      	adds	r2, r4, r2
 8009064:	3243      	adds	r2, #67	; 0x43
 8009066:	3302      	adds	r3, #2
 8009068:	7011      	strb	r1, [r2, #0]
 800906a:	e7c1      	b.n	8008ff0 <_printf_common+0x4c>
 800906c:	0022      	movs	r2, r4
 800906e:	2301      	movs	r3, #1
 8009070:	9901      	ldr	r1, [sp, #4]
 8009072:	9800      	ldr	r0, [sp, #0]
 8009074:	9f08      	ldr	r7, [sp, #32]
 8009076:	321a      	adds	r2, #26
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	d0e6      	beq.n	800904c <_printf_common+0xa8>
 800907e:	3601      	adds	r6, #1
 8009080:	e7d1      	b.n	8009026 <_printf_common+0x82>
	...

08009084 <_printf_i>:
 8009084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009086:	b08b      	sub	sp, #44	; 0x2c
 8009088:	9206      	str	r2, [sp, #24]
 800908a:	000a      	movs	r2, r1
 800908c:	3243      	adds	r2, #67	; 0x43
 800908e:	9307      	str	r3, [sp, #28]
 8009090:	9005      	str	r0, [sp, #20]
 8009092:	9204      	str	r2, [sp, #16]
 8009094:	7e0a      	ldrb	r2, [r1, #24]
 8009096:	000c      	movs	r4, r1
 8009098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800909a:	2a78      	cmp	r2, #120	; 0x78
 800909c:	d809      	bhi.n	80090b2 <_printf_i+0x2e>
 800909e:	2a62      	cmp	r2, #98	; 0x62
 80090a0:	d80b      	bhi.n	80090ba <_printf_i+0x36>
 80090a2:	2a00      	cmp	r2, #0
 80090a4:	d100      	bne.n	80090a8 <_printf_i+0x24>
 80090a6:	e0be      	b.n	8009226 <_printf_i+0x1a2>
 80090a8:	497c      	ldr	r1, [pc, #496]	; (800929c <_printf_i+0x218>)
 80090aa:	9103      	str	r1, [sp, #12]
 80090ac:	2a58      	cmp	r2, #88	; 0x58
 80090ae:	d100      	bne.n	80090b2 <_printf_i+0x2e>
 80090b0:	e093      	b.n	80091da <_printf_i+0x156>
 80090b2:	0026      	movs	r6, r4
 80090b4:	3642      	adds	r6, #66	; 0x42
 80090b6:	7032      	strb	r2, [r6, #0]
 80090b8:	e022      	b.n	8009100 <_printf_i+0x7c>
 80090ba:	0010      	movs	r0, r2
 80090bc:	3863      	subs	r0, #99	; 0x63
 80090be:	2815      	cmp	r0, #21
 80090c0:	d8f7      	bhi.n	80090b2 <_printf_i+0x2e>
 80090c2:	f7f7 f833 	bl	800012c <__gnu_thumb1_case_shi>
 80090c6:	0016      	.short	0x0016
 80090c8:	fff6001f 	.word	0xfff6001f
 80090cc:	fff6fff6 	.word	0xfff6fff6
 80090d0:	001ffff6 	.word	0x001ffff6
 80090d4:	fff6fff6 	.word	0xfff6fff6
 80090d8:	fff6fff6 	.word	0xfff6fff6
 80090dc:	003600a3 	.word	0x003600a3
 80090e0:	fff60083 	.word	0xfff60083
 80090e4:	00b4fff6 	.word	0x00b4fff6
 80090e8:	0036fff6 	.word	0x0036fff6
 80090ec:	fff6fff6 	.word	0xfff6fff6
 80090f0:	0087      	.short	0x0087
 80090f2:	0026      	movs	r6, r4
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	3642      	adds	r6, #66	; 0x42
 80090f8:	1d11      	adds	r1, r2, #4
 80090fa:	6019      	str	r1, [r3, #0]
 80090fc:	6813      	ldr	r3, [r2, #0]
 80090fe:	7033      	strb	r3, [r6, #0]
 8009100:	2301      	movs	r3, #1
 8009102:	e0a2      	b.n	800924a <_printf_i+0x1c6>
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	6809      	ldr	r1, [r1, #0]
 8009108:	1d02      	adds	r2, r0, #4
 800910a:	060d      	lsls	r5, r1, #24
 800910c:	d50b      	bpl.n	8009126 <_printf_i+0xa2>
 800910e:	6805      	ldr	r5, [r0, #0]
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	2d00      	cmp	r5, #0
 8009114:	da03      	bge.n	800911e <_printf_i+0x9a>
 8009116:	232d      	movs	r3, #45	; 0x2d
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	426d      	negs	r5, r5
 800911c:	7013      	strb	r3, [r2, #0]
 800911e:	4b5f      	ldr	r3, [pc, #380]	; (800929c <_printf_i+0x218>)
 8009120:	270a      	movs	r7, #10
 8009122:	9303      	str	r3, [sp, #12]
 8009124:	e01b      	b.n	800915e <_printf_i+0xda>
 8009126:	6805      	ldr	r5, [r0, #0]
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	0649      	lsls	r1, r1, #25
 800912c:	d5f1      	bpl.n	8009112 <_printf_i+0x8e>
 800912e:	b22d      	sxth	r5, r5
 8009130:	e7ef      	b.n	8009112 <_printf_i+0x8e>
 8009132:	680d      	ldr	r5, [r1, #0]
 8009134:	6819      	ldr	r1, [r3, #0]
 8009136:	1d08      	adds	r0, r1, #4
 8009138:	6018      	str	r0, [r3, #0]
 800913a:	062e      	lsls	r6, r5, #24
 800913c:	d501      	bpl.n	8009142 <_printf_i+0xbe>
 800913e:	680d      	ldr	r5, [r1, #0]
 8009140:	e003      	b.n	800914a <_printf_i+0xc6>
 8009142:	066d      	lsls	r5, r5, #25
 8009144:	d5fb      	bpl.n	800913e <_printf_i+0xba>
 8009146:	680d      	ldr	r5, [r1, #0]
 8009148:	b2ad      	uxth	r5, r5
 800914a:	4b54      	ldr	r3, [pc, #336]	; (800929c <_printf_i+0x218>)
 800914c:	2708      	movs	r7, #8
 800914e:	9303      	str	r3, [sp, #12]
 8009150:	2a6f      	cmp	r2, #111	; 0x6f
 8009152:	d000      	beq.n	8009156 <_printf_i+0xd2>
 8009154:	3702      	adds	r7, #2
 8009156:	0023      	movs	r3, r4
 8009158:	2200      	movs	r2, #0
 800915a:	3343      	adds	r3, #67	; 0x43
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	6863      	ldr	r3, [r4, #4]
 8009160:	60a3      	str	r3, [r4, #8]
 8009162:	2b00      	cmp	r3, #0
 8009164:	db03      	blt.n	800916e <_printf_i+0xea>
 8009166:	2104      	movs	r1, #4
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	438a      	bics	r2, r1
 800916c:	6022      	str	r2, [r4, #0]
 800916e:	2d00      	cmp	r5, #0
 8009170:	d102      	bne.n	8009178 <_printf_i+0xf4>
 8009172:	9e04      	ldr	r6, [sp, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <_printf_i+0x10e>
 8009178:	9e04      	ldr	r6, [sp, #16]
 800917a:	0028      	movs	r0, r5
 800917c:	0039      	movs	r1, r7
 800917e:	f7f7 f865 	bl	800024c <__aeabi_uidivmod>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	3e01      	subs	r6, #1
 8009186:	5c5b      	ldrb	r3, [r3, r1]
 8009188:	7033      	strb	r3, [r6, #0]
 800918a:	002b      	movs	r3, r5
 800918c:	0005      	movs	r5, r0
 800918e:	429f      	cmp	r7, r3
 8009190:	d9f3      	bls.n	800917a <_printf_i+0xf6>
 8009192:	2f08      	cmp	r7, #8
 8009194:	d109      	bne.n	80091aa <_printf_i+0x126>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	07db      	lsls	r3, r3, #31
 800919a:	d506      	bpl.n	80091aa <_printf_i+0x126>
 800919c:	6862      	ldr	r2, [r4, #4]
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	dc02      	bgt.n	80091aa <_printf_i+0x126>
 80091a4:	2330      	movs	r3, #48	; 0x30
 80091a6:	3e01      	subs	r6, #1
 80091a8:	7033      	strb	r3, [r6, #0]
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	1b9b      	subs	r3, r3, r6
 80091ae:	6123      	str	r3, [r4, #16]
 80091b0:	9b07      	ldr	r3, [sp, #28]
 80091b2:	0021      	movs	r1, r4
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	9805      	ldr	r0, [sp, #20]
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	aa09      	add	r2, sp, #36	; 0x24
 80091bc:	f7ff fef2 	bl	8008fa4 <_printf_common>
 80091c0:	3001      	adds	r0, #1
 80091c2:	d147      	bne.n	8009254 <_printf_i+0x1d0>
 80091c4:	2001      	movs	r0, #1
 80091c6:	4240      	negs	r0, r0
 80091c8:	b00b      	add	sp, #44	; 0x2c
 80091ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091cc:	2220      	movs	r2, #32
 80091ce:	6809      	ldr	r1, [r1, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	6022      	str	r2, [r4, #0]
 80091d4:	2278      	movs	r2, #120	; 0x78
 80091d6:	4932      	ldr	r1, [pc, #200]	; (80092a0 <_printf_i+0x21c>)
 80091d8:	9103      	str	r1, [sp, #12]
 80091da:	0021      	movs	r1, r4
 80091dc:	3145      	adds	r1, #69	; 0x45
 80091de:	700a      	strb	r2, [r1, #0]
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	6822      	ldr	r2, [r4, #0]
 80091e4:	c920      	ldmia	r1!, {r5}
 80091e6:	0610      	lsls	r0, r2, #24
 80091e8:	d402      	bmi.n	80091f0 <_printf_i+0x16c>
 80091ea:	0650      	lsls	r0, r2, #25
 80091ec:	d500      	bpl.n	80091f0 <_printf_i+0x16c>
 80091ee:	b2ad      	uxth	r5, r5
 80091f0:	6019      	str	r1, [r3, #0]
 80091f2:	07d3      	lsls	r3, r2, #31
 80091f4:	d502      	bpl.n	80091fc <_printf_i+0x178>
 80091f6:	2320      	movs	r3, #32
 80091f8:	4313      	orrs	r3, r2
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	2710      	movs	r7, #16
 80091fe:	2d00      	cmp	r5, #0
 8009200:	d1a9      	bne.n	8009156 <_printf_i+0xd2>
 8009202:	2220      	movs	r2, #32
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	4393      	bics	r3, r2
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	e7a4      	b.n	8009156 <_printf_i+0xd2>
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	680d      	ldr	r5, [r1, #0]
 8009210:	1d10      	adds	r0, r2, #4
 8009212:	6949      	ldr	r1, [r1, #20]
 8009214:	6018      	str	r0, [r3, #0]
 8009216:	6813      	ldr	r3, [r2, #0]
 8009218:	062e      	lsls	r6, r5, #24
 800921a:	d501      	bpl.n	8009220 <_printf_i+0x19c>
 800921c:	6019      	str	r1, [r3, #0]
 800921e:	e002      	b.n	8009226 <_printf_i+0x1a2>
 8009220:	066d      	lsls	r5, r5, #25
 8009222:	d5fb      	bpl.n	800921c <_printf_i+0x198>
 8009224:	8019      	strh	r1, [r3, #0]
 8009226:	2300      	movs	r3, #0
 8009228:	9e04      	ldr	r6, [sp, #16]
 800922a:	6123      	str	r3, [r4, #16]
 800922c:	e7c0      	b.n	80091b0 <_printf_i+0x12c>
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	1d11      	adds	r1, r2, #4
 8009232:	6019      	str	r1, [r3, #0]
 8009234:	6816      	ldr	r6, [r2, #0]
 8009236:	2100      	movs	r1, #0
 8009238:	0030      	movs	r0, r6
 800923a:	6862      	ldr	r2, [r4, #4]
 800923c:	f000 fd19 	bl	8009c72 <memchr>
 8009240:	2800      	cmp	r0, #0
 8009242:	d001      	beq.n	8009248 <_printf_i+0x1c4>
 8009244:	1b80      	subs	r0, r0, r6
 8009246:	6060      	str	r0, [r4, #4]
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	2300      	movs	r3, #0
 800924e:	9a04      	ldr	r2, [sp, #16]
 8009250:	7013      	strb	r3, [r2, #0]
 8009252:	e7ad      	b.n	80091b0 <_printf_i+0x12c>
 8009254:	0032      	movs	r2, r6
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	9906      	ldr	r1, [sp, #24]
 800925a:	9805      	ldr	r0, [sp, #20]
 800925c:	9d07      	ldr	r5, [sp, #28]
 800925e:	47a8      	blx	r5
 8009260:	3001      	adds	r0, #1
 8009262:	d0af      	beq.n	80091c4 <_printf_i+0x140>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	079b      	lsls	r3, r3, #30
 8009268:	d415      	bmi.n	8009296 <_printf_i+0x212>
 800926a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926c:	68e0      	ldr	r0, [r4, #12]
 800926e:	4298      	cmp	r0, r3
 8009270:	daaa      	bge.n	80091c8 <_printf_i+0x144>
 8009272:	0018      	movs	r0, r3
 8009274:	e7a8      	b.n	80091c8 <_printf_i+0x144>
 8009276:	0022      	movs	r2, r4
 8009278:	2301      	movs	r3, #1
 800927a:	9906      	ldr	r1, [sp, #24]
 800927c:	9805      	ldr	r0, [sp, #20]
 800927e:	9e07      	ldr	r6, [sp, #28]
 8009280:	3219      	adds	r2, #25
 8009282:	47b0      	blx	r6
 8009284:	3001      	adds	r0, #1
 8009286:	d09d      	beq.n	80091c4 <_printf_i+0x140>
 8009288:	3501      	adds	r5, #1
 800928a:	68e3      	ldr	r3, [r4, #12]
 800928c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	42ab      	cmp	r3, r5
 8009292:	dcf0      	bgt.n	8009276 <_printf_i+0x1f2>
 8009294:	e7e9      	b.n	800926a <_printf_i+0x1e6>
 8009296:	2500      	movs	r5, #0
 8009298:	e7f7      	b.n	800928a <_printf_i+0x206>
 800929a:	46c0      	nop			; (mov r8, r8)
 800929c:	0800c99b 	.word	0x0800c99b
 80092a0:	0800c9ac 	.word	0x0800c9ac

080092a4 <_scanf_float>:
 80092a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092a6:	b08b      	sub	sp, #44	; 0x2c
 80092a8:	0016      	movs	r6, r2
 80092aa:	9002      	str	r0, [sp, #8]
 80092ac:	22ae      	movs	r2, #174	; 0xae
 80092ae:	2000      	movs	r0, #0
 80092b0:	9307      	str	r3, [sp, #28]
 80092b2:	688b      	ldr	r3, [r1, #8]
 80092b4:	000f      	movs	r7, r1
 80092b6:	1e59      	subs	r1, r3, #1
 80092b8:	0052      	lsls	r2, r2, #1
 80092ba:	9006      	str	r0, [sp, #24]
 80092bc:	4291      	cmp	r1, r2
 80092be:	d905      	bls.n	80092cc <_scanf_float+0x28>
 80092c0:	3b5e      	subs	r3, #94	; 0x5e
 80092c2:	3bff      	subs	r3, #255	; 0xff
 80092c4:	9306      	str	r3, [sp, #24]
 80092c6:	235e      	movs	r3, #94	; 0x5e
 80092c8:	33ff      	adds	r3, #255	; 0xff
 80092ca:	60bb      	str	r3, [r7, #8]
 80092cc:	23f0      	movs	r3, #240	; 0xf0
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	4313      	orrs	r3, r2
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	003b      	movs	r3, r7
 80092d8:	2400      	movs	r4, #0
 80092da:	331c      	adds	r3, #28
 80092dc:	001d      	movs	r5, r3
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	9403      	str	r4, [sp, #12]
 80092e2:	9409      	str	r4, [sp, #36]	; 0x24
 80092e4:	9408      	str	r4, [sp, #32]
 80092e6:	9401      	str	r4, [sp, #4]
 80092e8:	9405      	str	r4, [sp, #20]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	2a00      	cmp	r2, #0
 80092ee:	d00a      	beq.n	8009306 <_scanf_float+0x62>
 80092f0:	6833      	ldr	r3, [r6, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b4e      	cmp	r3, #78	; 0x4e
 80092f6:	d844      	bhi.n	8009382 <_scanf_float+0xde>
 80092f8:	0018      	movs	r0, r3
 80092fa:	2b40      	cmp	r3, #64	; 0x40
 80092fc:	d82c      	bhi.n	8009358 <_scanf_float+0xb4>
 80092fe:	382b      	subs	r0, #43	; 0x2b
 8009300:	b2c1      	uxtb	r1, r0
 8009302:	290e      	cmp	r1, #14
 8009304:	d92a      	bls.n	800935c <_scanf_float+0xb8>
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <_scanf_float+0x70>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	4aa3      	ldr	r2, [pc, #652]	; (800959c <_scanf_float+0x2f8>)
 8009310:	4013      	ands	r3, r2
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	3b01      	subs	r3, #1
 8009318:	2b01      	cmp	r3, #1
 800931a:	d900      	bls.n	800931e <_scanf_float+0x7a>
 800931c:	e0f9      	b.n	8009512 <_scanf_float+0x26e>
 800931e:	24be      	movs	r4, #190	; 0xbe
 8009320:	0064      	lsls	r4, r4, #1
 8009322:	9b04      	ldr	r3, [sp, #16]
 8009324:	429d      	cmp	r5, r3
 8009326:	d900      	bls.n	800932a <_scanf_float+0x86>
 8009328:	e0e9      	b.n	80094fe <_scanf_float+0x25a>
 800932a:	2301      	movs	r3, #1
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	e183      	b.n	8009638 <_scanf_float+0x394>
 8009330:	0018      	movs	r0, r3
 8009332:	3861      	subs	r0, #97	; 0x61
 8009334:	280d      	cmp	r0, #13
 8009336:	d8e6      	bhi.n	8009306 <_scanf_float+0x62>
 8009338:	f7f6 fef8 	bl	800012c <__gnu_thumb1_case_shi>
 800933c:	ffe50083 	.word	0xffe50083
 8009340:	ffe5ffe5 	.word	0xffe5ffe5
 8009344:	00a200b6 	.word	0x00a200b6
 8009348:	ffe5ffe5 	.word	0xffe5ffe5
 800934c:	ffe50089 	.word	0xffe50089
 8009350:	ffe5ffe5 	.word	0xffe5ffe5
 8009354:	0065ffe5 	.word	0x0065ffe5
 8009358:	3841      	subs	r0, #65	; 0x41
 800935a:	e7eb      	b.n	8009334 <_scanf_float+0x90>
 800935c:	280e      	cmp	r0, #14
 800935e:	d8d2      	bhi.n	8009306 <_scanf_float+0x62>
 8009360:	f7f6 fee4 	bl	800012c <__gnu_thumb1_case_shi>
 8009364:	ffd1004b 	.word	0xffd1004b
 8009368:	0098004b 	.word	0x0098004b
 800936c:	0020ffd1 	.word	0x0020ffd1
 8009370:	00400040 	.word	0x00400040
 8009374:	00400040 	.word	0x00400040
 8009378:	00400040 	.word	0x00400040
 800937c:	00400040 	.word	0x00400040
 8009380:	0040      	.short	0x0040
 8009382:	2b6e      	cmp	r3, #110	; 0x6e
 8009384:	d809      	bhi.n	800939a <_scanf_float+0xf6>
 8009386:	2b60      	cmp	r3, #96	; 0x60
 8009388:	d8d2      	bhi.n	8009330 <_scanf_float+0x8c>
 800938a:	2b54      	cmp	r3, #84	; 0x54
 800938c:	d07d      	beq.n	800948a <_scanf_float+0x1e6>
 800938e:	2b59      	cmp	r3, #89	; 0x59
 8009390:	d1b9      	bne.n	8009306 <_scanf_float+0x62>
 8009392:	2c07      	cmp	r4, #7
 8009394:	d1b7      	bne.n	8009306 <_scanf_float+0x62>
 8009396:	2408      	movs	r4, #8
 8009398:	e02c      	b.n	80093f4 <_scanf_float+0x150>
 800939a:	2b74      	cmp	r3, #116	; 0x74
 800939c:	d075      	beq.n	800948a <_scanf_float+0x1e6>
 800939e:	2b79      	cmp	r3, #121	; 0x79
 80093a0:	d0f7      	beq.n	8009392 <_scanf_float+0xee>
 80093a2:	e7b0      	b.n	8009306 <_scanf_float+0x62>
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	05c8      	lsls	r0, r1, #23
 80093a8:	d51c      	bpl.n	80093e4 <_scanf_float+0x140>
 80093aa:	2380      	movs	r3, #128	; 0x80
 80093ac:	4399      	bics	r1, r3
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	3301      	adds	r3, #1
 80093b4:	9301      	str	r3, [sp, #4]
 80093b6:	9b06      	ldr	r3, [sp, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <_scanf_float+0x120>
 80093bc:	3b01      	subs	r3, #1
 80093be:	3201      	adds	r2, #1
 80093c0:	9306      	str	r3, [sp, #24]
 80093c2:	60ba      	str	r2, [r7, #8]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3301      	adds	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	6873      	ldr	r3, [r6, #4]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	6073      	str	r3, [r6, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc00      	bgt.n	80093dc <_scanf_float+0x138>
 80093da:	e086      	b.n	80094ea <_scanf_float+0x246>
 80093dc:	6833      	ldr	r3, [r6, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	6033      	str	r3, [r6, #0]
 80093e2:	e782      	b.n	80092ea <_scanf_float+0x46>
 80093e4:	9a03      	ldr	r2, [sp, #12]
 80093e6:	1912      	adds	r2, r2, r4
 80093e8:	2a00      	cmp	r2, #0
 80093ea:	d18c      	bne.n	8009306 <_scanf_float+0x62>
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	496c      	ldr	r1, [pc, #432]	; (80095a0 <_scanf_float+0x2fc>)
 80093f0:	400a      	ands	r2, r1
 80093f2:	603a      	str	r2, [r7, #0]
 80093f4:	702b      	strb	r3, [r5, #0]
 80093f6:	3501      	adds	r5, #1
 80093f8:	e7e4      	b.n	80093c4 <_scanf_float+0x120>
 80093fa:	2180      	movs	r1, #128	; 0x80
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	420a      	tst	r2, r1
 8009400:	d081      	beq.n	8009306 <_scanf_float+0x62>
 8009402:	438a      	bics	r2, r1
 8009404:	e7f5      	b.n	80093f2 <_scanf_float+0x14e>
 8009406:	9a03      	ldr	r2, [sp, #12]
 8009408:	2a00      	cmp	r2, #0
 800940a:	d10f      	bne.n	800942c <_scanf_float+0x188>
 800940c:	9a01      	ldr	r2, [sp, #4]
 800940e:	2a00      	cmp	r2, #0
 8009410:	d10f      	bne.n	8009432 <_scanf_float+0x18e>
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	21e0      	movs	r1, #224	; 0xe0
 8009416:	0010      	movs	r0, r2
 8009418:	00c9      	lsls	r1, r1, #3
 800941a:	4008      	ands	r0, r1
 800941c:	4288      	cmp	r0, r1
 800941e:	d108      	bne.n	8009432 <_scanf_float+0x18e>
 8009420:	4960      	ldr	r1, [pc, #384]	; (80095a4 <_scanf_float+0x300>)
 8009422:	400a      	ands	r2, r1
 8009424:	603a      	str	r2, [r7, #0]
 8009426:	2201      	movs	r2, #1
 8009428:	9203      	str	r2, [sp, #12]
 800942a:	e7e3      	b.n	80093f4 <_scanf_float+0x150>
 800942c:	9a03      	ldr	r2, [sp, #12]
 800942e:	2a02      	cmp	r2, #2
 8009430:	d059      	beq.n	80094e6 <_scanf_float+0x242>
 8009432:	2c01      	cmp	r4, #1
 8009434:	d002      	beq.n	800943c <_scanf_float+0x198>
 8009436:	2c04      	cmp	r4, #4
 8009438:	d000      	beq.n	800943c <_scanf_float+0x198>
 800943a:	e764      	b.n	8009306 <_scanf_float+0x62>
 800943c:	3401      	adds	r4, #1
 800943e:	b2e4      	uxtb	r4, r4
 8009440:	e7d8      	b.n	80093f4 <_scanf_float+0x150>
 8009442:	9a03      	ldr	r2, [sp, #12]
 8009444:	2a01      	cmp	r2, #1
 8009446:	d000      	beq.n	800944a <_scanf_float+0x1a6>
 8009448:	e75d      	b.n	8009306 <_scanf_float+0x62>
 800944a:	2202      	movs	r2, #2
 800944c:	e7ec      	b.n	8009428 <_scanf_float+0x184>
 800944e:	2c00      	cmp	r4, #0
 8009450:	d110      	bne.n	8009474 <_scanf_float+0x1d0>
 8009452:	9a01      	ldr	r2, [sp, #4]
 8009454:	2a00      	cmp	r2, #0
 8009456:	d000      	beq.n	800945a <_scanf_float+0x1b6>
 8009458:	e758      	b.n	800930c <_scanf_float+0x68>
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	21e0      	movs	r1, #224	; 0xe0
 800945e:	0010      	movs	r0, r2
 8009460:	00c9      	lsls	r1, r1, #3
 8009462:	4008      	ands	r0, r1
 8009464:	4288      	cmp	r0, r1
 8009466:	d000      	beq.n	800946a <_scanf_float+0x1c6>
 8009468:	e754      	b.n	8009314 <_scanf_float+0x70>
 800946a:	494e      	ldr	r1, [pc, #312]	; (80095a4 <_scanf_float+0x300>)
 800946c:	3401      	adds	r4, #1
 800946e:	400a      	ands	r2, r1
 8009470:	603a      	str	r2, [r7, #0]
 8009472:	e7bf      	b.n	80093f4 <_scanf_float+0x150>
 8009474:	21fd      	movs	r1, #253	; 0xfd
 8009476:	1ee2      	subs	r2, r4, #3
 8009478:	420a      	tst	r2, r1
 800947a:	d000      	beq.n	800947e <_scanf_float+0x1da>
 800947c:	e743      	b.n	8009306 <_scanf_float+0x62>
 800947e:	e7dd      	b.n	800943c <_scanf_float+0x198>
 8009480:	2c02      	cmp	r4, #2
 8009482:	d000      	beq.n	8009486 <_scanf_float+0x1e2>
 8009484:	e73f      	b.n	8009306 <_scanf_float+0x62>
 8009486:	2403      	movs	r4, #3
 8009488:	e7b4      	b.n	80093f4 <_scanf_float+0x150>
 800948a:	2c06      	cmp	r4, #6
 800948c:	d000      	beq.n	8009490 <_scanf_float+0x1ec>
 800948e:	e73a      	b.n	8009306 <_scanf_float+0x62>
 8009490:	2407      	movs	r4, #7
 8009492:	e7af      	b.n	80093f4 <_scanf_float+0x150>
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	0591      	lsls	r1, r2, #22
 8009498:	d400      	bmi.n	800949c <_scanf_float+0x1f8>
 800949a:	e734      	b.n	8009306 <_scanf_float+0x62>
 800949c:	4942      	ldr	r1, [pc, #264]	; (80095a8 <_scanf_float+0x304>)
 800949e:	400a      	ands	r2, r1
 80094a0:	603a      	str	r2, [r7, #0]
 80094a2:	9a01      	ldr	r2, [sp, #4]
 80094a4:	9205      	str	r2, [sp, #20]
 80094a6:	e7a5      	b.n	80093f4 <_scanf_float+0x150>
 80094a8:	21a0      	movs	r1, #160	; 0xa0
 80094aa:	2080      	movs	r0, #128	; 0x80
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	00c9      	lsls	r1, r1, #3
 80094b0:	4011      	ands	r1, r2
 80094b2:	00c0      	lsls	r0, r0, #3
 80094b4:	4281      	cmp	r1, r0
 80094b6:	d006      	beq.n	80094c6 <_scanf_float+0x222>
 80094b8:	4202      	tst	r2, r0
 80094ba:	d100      	bne.n	80094be <_scanf_float+0x21a>
 80094bc:	e723      	b.n	8009306 <_scanf_float+0x62>
 80094be:	9901      	ldr	r1, [sp, #4]
 80094c0:	2900      	cmp	r1, #0
 80094c2:	d100      	bne.n	80094c6 <_scanf_float+0x222>
 80094c4:	e726      	b.n	8009314 <_scanf_float+0x70>
 80094c6:	0591      	lsls	r1, r2, #22
 80094c8:	d404      	bmi.n	80094d4 <_scanf_float+0x230>
 80094ca:	9901      	ldr	r1, [sp, #4]
 80094cc:	9805      	ldr	r0, [sp, #20]
 80094ce:	9509      	str	r5, [sp, #36]	; 0x24
 80094d0:	1a09      	subs	r1, r1, r0
 80094d2:	9108      	str	r1, [sp, #32]
 80094d4:	4933      	ldr	r1, [pc, #204]	; (80095a4 <_scanf_float+0x300>)
 80094d6:	400a      	ands	r2, r1
 80094d8:	21c0      	movs	r1, #192	; 0xc0
 80094da:	0049      	lsls	r1, r1, #1
 80094dc:	430a      	orrs	r2, r1
 80094de:	603a      	str	r2, [r7, #0]
 80094e0:	2200      	movs	r2, #0
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	e786      	b.n	80093f4 <_scanf_float+0x150>
 80094e6:	2203      	movs	r2, #3
 80094e8:	e79e      	b.n	8009428 <_scanf_float+0x184>
 80094ea:	23c0      	movs	r3, #192	; 0xc0
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	0031      	movs	r1, r6
 80094f0:	58fb      	ldr	r3, [r7, r3]
 80094f2:	9802      	ldr	r0, [sp, #8]
 80094f4:	4798      	blx	r3
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d100      	bne.n	80094fc <_scanf_float+0x258>
 80094fa:	e6f6      	b.n	80092ea <_scanf_float+0x46>
 80094fc:	e703      	b.n	8009306 <_scanf_float+0x62>
 80094fe:	3d01      	subs	r5, #1
 8009500:	593b      	ldr	r3, [r7, r4]
 8009502:	0032      	movs	r2, r6
 8009504:	7829      	ldrb	r1, [r5, #0]
 8009506:	9802      	ldr	r0, [sp, #8]
 8009508:	4798      	blx	r3
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	3b01      	subs	r3, #1
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	e707      	b.n	8009322 <_scanf_float+0x7e>
 8009512:	1e63      	subs	r3, r4, #1
 8009514:	2b06      	cmp	r3, #6
 8009516:	d80e      	bhi.n	8009536 <_scanf_float+0x292>
 8009518:	9503      	str	r5, [sp, #12]
 800951a:	2c02      	cmp	r4, #2
 800951c:	d920      	bls.n	8009560 <_scanf_float+0x2bc>
 800951e:	1b63      	subs	r3, r4, r5
 8009520:	b2db      	uxtb	r3, r3
 8009522:	9306      	str	r3, [sp, #24]
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	9a06      	ldr	r2, [sp, #24]
 8009528:	189b      	adds	r3, r3, r2
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b03      	cmp	r3, #3
 800952e:	d827      	bhi.n	8009580 <_scanf_float+0x2dc>
 8009530:	3c03      	subs	r4, #3
 8009532:	b2e4      	uxtb	r4, r4
 8009534:	1b2d      	subs	r5, r5, r4
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	05da      	lsls	r2, r3, #23
 800953a:	d552      	bpl.n	80095e2 <_scanf_float+0x33e>
 800953c:	055b      	lsls	r3, r3, #21
 800953e:	d535      	bpl.n	80095ac <_scanf_float+0x308>
 8009540:	24be      	movs	r4, #190	; 0xbe
 8009542:	0064      	lsls	r4, r4, #1
 8009544:	9b04      	ldr	r3, [sp, #16]
 8009546:	429d      	cmp	r5, r3
 8009548:	d800      	bhi.n	800954c <_scanf_float+0x2a8>
 800954a:	e6ee      	b.n	800932a <_scanf_float+0x86>
 800954c:	3d01      	subs	r5, #1
 800954e:	593b      	ldr	r3, [r7, r4]
 8009550:	0032      	movs	r2, r6
 8009552:	7829      	ldrb	r1, [r5, #0]
 8009554:	9802      	ldr	r0, [sp, #8]
 8009556:	4798      	blx	r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	3b01      	subs	r3, #1
 800955c:	613b      	str	r3, [r7, #16]
 800955e:	e7f1      	b.n	8009544 <_scanf_float+0x2a0>
 8009560:	24be      	movs	r4, #190	; 0xbe
 8009562:	0064      	lsls	r4, r4, #1
 8009564:	9b04      	ldr	r3, [sp, #16]
 8009566:	429d      	cmp	r5, r3
 8009568:	d800      	bhi.n	800956c <_scanf_float+0x2c8>
 800956a:	e6de      	b.n	800932a <_scanf_float+0x86>
 800956c:	3d01      	subs	r5, #1
 800956e:	593b      	ldr	r3, [r7, r4]
 8009570:	0032      	movs	r2, r6
 8009572:	7829      	ldrb	r1, [r5, #0]
 8009574:	9802      	ldr	r0, [sp, #8]
 8009576:	4798      	blx	r3
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	3b01      	subs	r3, #1
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	e7f1      	b.n	8009564 <_scanf_float+0x2c0>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	0032      	movs	r2, r6
 8009584:	3b01      	subs	r3, #1
 8009586:	7819      	ldrb	r1, [r3, #0]
 8009588:	9303      	str	r3, [sp, #12]
 800958a:	23be      	movs	r3, #190	; 0xbe
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	58fb      	ldr	r3, [r7, r3]
 8009590:	9802      	ldr	r0, [sp, #8]
 8009592:	4798      	blx	r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	3b01      	subs	r3, #1
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	e7c3      	b.n	8009524 <_scanf_float+0x280>
 800959c:	fffffeff 	.word	0xfffffeff
 80095a0:	fffffe7f 	.word	0xfffffe7f
 80095a4:	fffff87f 	.word	0xfffff87f
 80095a8:	fffffd7f 	.word	0xfffffd7f
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	1e6c      	subs	r4, r5, #1
 80095b0:	7821      	ldrb	r1, [r4, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	2965      	cmp	r1, #101	; 0x65
 80095b8:	d00c      	beq.n	80095d4 <_scanf_float+0x330>
 80095ba:	2945      	cmp	r1, #69	; 0x45
 80095bc:	d00a      	beq.n	80095d4 <_scanf_float+0x330>
 80095be:	23be      	movs	r3, #190	; 0xbe
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	58fb      	ldr	r3, [r7, r3]
 80095c4:	0032      	movs	r2, r6
 80095c6:	9802      	ldr	r0, [sp, #8]
 80095c8:	4798      	blx	r3
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	1eac      	subs	r4, r5, #2
 80095ce:	3b01      	subs	r3, #1
 80095d0:	7821      	ldrb	r1, [r4, #0]
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	23be      	movs	r3, #190	; 0xbe
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	0032      	movs	r2, r6
 80095da:	58fb      	ldr	r3, [r7, r3]
 80095dc:	9802      	ldr	r0, [sp, #8]
 80095de:	4798      	blx	r3
 80095e0:	0025      	movs	r5, r4
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	2310      	movs	r3, #16
 80095e6:	0011      	movs	r1, r2
 80095e8:	4019      	ands	r1, r3
 80095ea:	9103      	str	r1, [sp, #12]
 80095ec:	421a      	tst	r2, r3
 80095ee:	d15b      	bne.n	80096a8 <_scanf_float+0x404>
 80095f0:	22c0      	movs	r2, #192	; 0xc0
 80095f2:	7029      	strb	r1, [r5, #0]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	00d2      	lsls	r2, r2, #3
 80095f8:	4013      	ands	r3, r2
 80095fa:	2280      	movs	r2, #128	; 0x80
 80095fc:	00d2      	lsls	r2, r2, #3
 80095fe:	4293      	cmp	r3, r2
 8009600:	d11d      	bne.n	800963e <_scanf_float+0x39a>
 8009602:	9b05      	ldr	r3, [sp, #20]
 8009604:	9a01      	ldr	r2, [sp, #4]
 8009606:	9901      	ldr	r1, [sp, #4]
 8009608:	1a9a      	subs	r2, r3, r2
 800960a:	428b      	cmp	r3, r1
 800960c:	d124      	bne.n	8009658 <_scanf_float+0x3b4>
 800960e:	2200      	movs	r2, #0
 8009610:	9904      	ldr	r1, [sp, #16]
 8009612:	9802      	ldr	r0, [sp, #8]
 8009614:	f7ff f936 	bl	8008884 <_strtod_r>
 8009618:	9b07      	ldr	r3, [sp, #28]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	0004      	movs	r4, r0
 800961e:	000d      	movs	r5, r1
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	0791      	lsls	r1, r2, #30
 8009624:	d525      	bpl.n	8009672 <_scanf_float+0x3ce>
 8009626:	9907      	ldr	r1, [sp, #28]
 8009628:	1d1a      	adds	r2, r3, #4
 800962a:	600a      	str	r2, [r1, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	601c      	str	r4, [r3, #0]
 8009630:	605d      	str	r5, [r3, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3301      	adds	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	9803      	ldr	r0, [sp, #12]
 800963a:	b00b      	add	sp, #44	; 0x2c
 800963c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800963e:	9b08      	ldr	r3, [sp, #32]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d0e4      	beq.n	800960e <_scanf_float+0x36a>
 8009644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009646:	9a03      	ldr	r2, [sp, #12]
 8009648:	1c59      	adds	r1, r3, #1
 800964a:	9802      	ldr	r0, [sp, #8]
 800964c:	230a      	movs	r3, #10
 800964e:	f7ff f9a7 	bl	80089a0 <_strtol_r>
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009656:	1ac2      	subs	r2, r0, r3
 8009658:	003b      	movs	r3, r7
 800965a:	3370      	adds	r3, #112	; 0x70
 800965c:	33ff      	adds	r3, #255	; 0xff
 800965e:	429d      	cmp	r5, r3
 8009660:	d302      	bcc.n	8009668 <_scanf_float+0x3c4>
 8009662:	003d      	movs	r5, r7
 8009664:	356f      	adds	r5, #111	; 0x6f
 8009666:	35ff      	adds	r5, #255	; 0xff
 8009668:	0028      	movs	r0, r5
 800966a:	4910      	ldr	r1, [pc, #64]	; (80096ac <_scanf_float+0x408>)
 800966c:	f000 f956 	bl	800991c <siprintf>
 8009670:	e7cd      	b.n	800960e <_scanf_float+0x36a>
 8009672:	1d19      	adds	r1, r3, #4
 8009674:	0752      	lsls	r2, r2, #29
 8009676:	d502      	bpl.n	800967e <_scanf_float+0x3da>
 8009678:	9a07      	ldr	r2, [sp, #28]
 800967a:	6011      	str	r1, [r2, #0]
 800967c:	e7d6      	b.n	800962c <_scanf_float+0x388>
 800967e:	9a07      	ldr	r2, [sp, #28]
 8009680:	0020      	movs	r0, r4
 8009682:	6011      	str	r1, [r2, #0]
 8009684:	681e      	ldr	r6, [r3, #0]
 8009686:	0022      	movs	r2, r4
 8009688:	002b      	movs	r3, r5
 800968a:	0029      	movs	r1, r5
 800968c:	f7f9 fa84 	bl	8002b98 <__aeabi_dcmpun>
 8009690:	2800      	cmp	r0, #0
 8009692:	d004      	beq.n	800969e <_scanf_float+0x3fa>
 8009694:	4806      	ldr	r0, [pc, #24]	; (80096b0 <_scanf_float+0x40c>)
 8009696:	f000 fb07 	bl	8009ca8 <nanf>
 800969a:	6030      	str	r0, [r6, #0]
 800969c:	e7c9      	b.n	8009632 <_scanf_float+0x38e>
 800969e:	0020      	movs	r0, r4
 80096a0:	0029      	movs	r1, r5
 80096a2:	f7f9 fb6b 	bl	8002d7c <__aeabi_d2f>
 80096a6:	e7f8      	b.n	800969a <_scanf_float+0x3f6>
 80096a8:	2300      	movs	r3, #0
 80096aa:	e63f      	b.n	800932c <_scanf_float+0x88>
 80096ac:	0800c9bd 	.word	0x0800c9bd
 80096b0:	0800cc58 	.word	0x0800cc58

080096b4 <std>:
 80096b4:	2300      	movs	r3, #0
 80096b6:	b510      	push	{r4, lr}
 80096b8:	0004      	movs	r4, r0
 80096ba:	6003      	str	r3, [r0, #0]
 80096bc:	6043      	str	r3, [r0, #4]
 80096be:	6083      	str	r3, [r0, #8]
 80096c0:	8181      	strh	r1, [r0, #12]
 80096c2:	6643      	str	r3, [r0, #100]	; 0x64
 80096c4:	81c2      	strh	r2, [r0, #14]
 80096c6:	6103      	str	r3, [r0, #16]
 80096c8:	6143      	str	r3, [r0, #20]
 80096ca:	6183      	str	r3, [r0, #24]
 80096cc:	0019      	movs	r1, r3
 80096ce:	2208      	movs	r2, #8
 80096d0:	305c      	adds	r0, #92	; 0x5c
 80096d2:	f000 fa35 	bl	8009b40 <memset>
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <std+0x50>)
 80096d8:	6224      	str	r4, [r4, #32]
 80096da:	6263      	str	r3, [r4, #36]	; 0x24
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <std+0x54>)
 80096de:	62a3      	str	r3, [r4, #40]	; 0x28
 80096e0:	4b0a      	ldr	r3, [pc, #40]	; (800970c <std+0x58>)
 80096e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096e4:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <std+0x5c>)
 80096e6:	6323      	str	r3, [r4, #48]	; 0x30
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <std+0x60>)
 80096ea:	429c      	cmp	r4, r3
 80096ec:	d005      	beq.n	80096fa <std+0x46>
 80096ee:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <std+0x64>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	d002      	beq.n	80096fa <std+0x46>
 80096f4:	4b09      	ldr	r3, [pc, #36]	; (800971c <std+0x68>)
 80096f6:	429c      	cmp	r4, r3
 80096f8:	d103      	bne.n	8009702 <std+0x4e>
 80096fa:	0020      	movs	r0, r4
 80096fc:	3058      	adds	r0, #88	; 0x58
 80096fe:	f000 fab5 	bl	8009c6c <__retarget_lock_init_recursive>
 8009702:	bd10      	pop	{r4, pc}
 8009704:	0800995d 	.word	0x0800995d
 8009708:	08009985 	.word	0x08009985
 800970c:	080099bd 	.word	0x080099bd
 8009710:	080099e9 	.word	0x080099e9
 8009714:	200005f0 	.word	0x200005f0
 8009718:	20000658 	.word	0x20000658
 800971c:	200006c0 	.word	0x200006c0

08009720 <stdio_exit_handler>:
 8009720:	b510      	push	{r4, lr}
 8009722:	4a03      	ldr	r2, [pc, #12]	; (8009730 <stdio_exit_handler+0x10>)
 8009724:	4903      	ldr	r1, [pc, #12]	; (8009734 <stdio_exit_handler+0x14>)
 8009726:	4804      	ldr	r0, [pc, #16]	; (8009738 <stdio_exit_handler+0x18>)
 8009728:	f000 f86c 	bl	8009804 <_fwalk_sglue>
 800972c:	bd10      	pop	{r4, pc}
 800972e:	46c0      	nop			; (mov r8, r8)
 8009730:	2000000c 	.word	0x2000000c
 8009734:	0800c2c9 	.word	0x0800c2c9
 8009738:	20000184 	.word	0x20000184

0800973c <cleanup_stdio>:
 800973c:	6841      	ldr	r1, [r0, #4]
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <cleanup_stdio+0x30>)
 8009740:	b510      	push	{r4, lr}
 8009742:	0004      	movs	r4, r0
 8009744:	4299      	cmp	r1, r3
 8009746:	d001      	beq.n	800974c <cleanup_stdio+0x10>
 8009748:	f002 fdbe 	bl	800c2c8 <_fflush_r>
 800974c:	68a1      	ldr	r1, [r4, #8]
 800974e:	4b08      	ldr	r3, [pc, #32]	; (8009770 <cleanup_stdio+0x34>)
 8009750:	4299      	cmp	r1, r3
 8009752:	d002      	beq.n	800975a <cleanup_stdio+0x1e>
 8009754:	0020      	movs	r0, r4
 8009756:	f002 fdb7 	bl	800c2c8 <_fflush_r>
 800975a:	68e1      	ldr	r1, [r4, #12]
 800975c:	4b05      	ldr	r3, [pc, #20]	; (8009774 <cleanup_stdio+0x38>)
 800975e:	4299      	cmp	r1, r3
 8009760:	d002      	beq.n	8009768 <cleanup_stdio+0x2c>
 8009762:	0020      	movs	r0, r4
 8009764:	f002 fdb0 	bl	800c2c8 <_fflush_r>
 8009768:	bd10      	pop	{r4, pc}
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	200005f0 	.word	0x200005f0
 8009770:	20000658 	.word	0x20000658
 8009774:	200006c0 	.word	0x200006c0

08009778 <global_stdio_init.part.0>:
 8009778:	b510      	push	{r4, lr}
 800977a:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <global_stdio_init.part.0+0x28>)
 800977c:	4a09      	ldr	r2, [pc, #36]	; (80097a4 <global_stdio_init.part.0+0x2c>)
 800977e:	2104      	movs	r1, #4
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	4809      	ldr	r0, [pc, #36]	; (80097a8 <global_stdio_init.part.0+0x30>)
 8009784:	2200      	movs	r2, #0
 8009786:	f7ff ff95 	bl	80096b4 <std>
 800978a:	2201      	movs	r2, #1
 800978c:	2109      	movs	r1, #9
 800978e:	4807      	ldr	r0, [pc, #28]	; (80097ac <global_stdio_init.part.0+0x34>)
 8009790:	f7ff ff90 	bl	80096b4 <std>
 8009794:	2202      	movs	r2, #2
 8009796:	2112      	movs	r1, #18
 8009798:	4805      	ldr	r0, [pc, #20]	; (80097b0 <global_stdio_init.part.0+0x38>)
 800979a:	f7ff ff8b 	bl	80096b4 <std>
 800979e:	bd10      	pop	{r4, pc}
 80097a0:	20000728 	.word	0x20000728
 80097a4:	08009721 	.word	0x08009721
 80097a8:	200005f0 	.word	0x200005f0
 80097ac:	20000658 	.word	0x20000658
 80097b0:	200006c0 	.word	0x200006c0

080097b4 <__sfp_lock_acquire>:
 80097b4:	b510      	push	{r4, lr}
 80097b6:	4802      	ldr	r0, [pc, #8]	; (80097c0 <__sfp_lock_acquire+0xc>)
 80097b8:	f000 fa59 	bl	8009c6e <__retarget_lock_acquire_recursive>
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	20000731 	.word	0x20000731

080097c4 <__sfp_lock_release>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4802      	ldr	r0, [pc, #8]	; (80097d0 <__sfp_lock_release+0xc>)
 80097c8:	f000 fa52 	bl	8009c70 <__retarget_lock_release_recursive>
 80097cc:	bd10      	pop	{r4, pc}
 80097ce:	46c0      	nop			; (mov r8, r8)
 80097d0:	20000731 	.word	0x20000731

080097d4 <__sinit>:
 80097d4:	b510      	push	{r4, lr}
 80097d6:	0004      	movs	r4, r0
 80097d8:	f7ff ffec 	bl	80097b4 <__sfp_lock_acquire>
 80097dc:	6a23      	ldr	r3, [r4, #32]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <__sinit+0x14>
 80097e2:	f7ff ffef 	bl	80097c4 <__sfp_lock_release>
 80097e6:	bd10      	pop	{r4, pc}
 80097e8:	4b04      	ldr	r3, [pc, #16]	; (80097fc <__sinit+0x28>)
 80097ea:	6223      	str	r3, [r4, #32]
 80097ec:	4b04      	ldr	r3, [pc, #16]	; (8009800 <__sinit+0x2c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f6      	bne.n	80097e2 <__sinit+0xe>
 80097f4:	f7ff ffc0 	bl	8009778 <global_stdio_init.part.0>
 80097f8:	e7f3      	b.n	80097e2 <__sinit+0xe>
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	0800973d 	.word	0x0800973d
 8009800:	20000728 	.word	0x20000728

08009804 <_fwalk_sglue>:
 8009804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009806:	0014      	movs	r4, r2
 8009808:	2600      	movs	r6, #0
 800980a:	9000      	str	r0, [sp, #0]
 800980c:	9101      	str	r1, [sp, #4]
 800980e:	68a5      	ldr	r5, [r4, #8]
 8009810:	6867      	ldr	r7, [r4, #4]
 8009812:	3f01      	subs	r7, #1
 8009814:	d504      	bpl.n	8009820 <_fwalk_sglue+0x1c>
 8009816:	6824      	ldr	r4, [r4, #0]
 8009818:	2c00      	cmp	r4, #0
 800981a:	d1f8      	bne.n	800980e <_fwalk_sglue+0xa>
 800981c:	0030      	movs	r0, r6
 800981e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009820:	89ab      	ldrh	r3, [r5, #12]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d908      	bls.n	8009838 <_fwalk_sglue+0x34>
 8009826:	220e      	movs	r2, #14
 8009828:	5eab      	ldrsh	r3, [r5, r2]
 800982a:	3301      	adds	r3, #1
 800982c:	d004      	beq.n	8009838 <_fwalk_sglue+0x34>
 800982e:	0029      	movs	r1, r5
 8009830:	9800      	ldr	r0, [sp, #0]
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	4798      	blx	r3
 8009836:	4306      	orrs	r6, r0
 8009838:	3568      	adds	r5, #104	; 0x68
 800983a:	e7ea      	b.n	8009812 <_fwalk_sglue+0xe>

0800983c <iprintf>:
 800983c:	b40f      	push	{r0, r1, r2, r3}
 800983e:	b507      	push	{r0, r1, r2, lr}
 8009840:	4905      	ldr	r1, [pc, #20]	; (8009858 <iprintf+0x1c>)
 8009842:	ab04      	add	r3, sp, #16
 8009844:	6808      	ldr	r0, [r1, #0]
 8009846:	cb04      	ldmia	r3!, {r2}
 8009848:	6881      	ldr	r1, [r0, #8]
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	f002 fb96 	bl	800bf7c <_vfiprintf_r>
 8009850:	b003      	add	sp, #12
 8009852:	bc08      	pop	{r3}
 8009854:	b004      	add	sp, #16
 8009856:	4718      	bx	r3
 8009858:	200001d0 	.word	0x200001d0

0800985c <_puts_r>:
 800985c:	6a03      	ldr	r3, [r0, #32]
 800985e:	b570      	push	{r4, r5, r6, lr}
 8009860:	0005      	movs	r5, r0
 8009862:	000e      	movs	r6, r1
 8009864:	6884      	ldr	r4, [r0, #8]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <_puts_r+0x12>
 800986a:	f7ff ffb3 	bl	80097d4 <__sinit>
 800986e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009870:	07db      	lsls	r3, r3, #31
 8009872:	d405      	bmi.n	8009880 <_puts_r+0x24>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	059b      	lsls	r3, r3, #22
 8009878:	d402      	bmi.n	8009880 <_puts_r+0x24>
 800987a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800987c:	f000 f9f7 	bl	8009c6e <__retarget_lock_acquire_recursive>
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	071b      	lsls	r3, r3, #28
 8009884:	d502      	bpl.n	800988c <_puts_r+0x30>
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d11f      	bne.n	80098cc <_puts_r+0x70>
 800988c:	0021      	movs	r1, r4
 800988e:	0028      	movs	r0, r5
 8009890:	f000 f8f2 	bl	8009a78 <__swsetup_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	d019      	beq.n	80098cc <_puts_r+0x70>
 8009898:	2501      	movs	r5, #1
 800989a:	426d      	negs	r5, r5
 800989c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800989e:	07db      	lsls	r3, r3, #31
 80098a0:	d405      	bmi.n	80098ae <_puts_r+0x52>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	059b      	lsls	r3, r3, #22
 80098a6:	d402      	bmi.n	80098ae <_puts_r+0x52>
 80098a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098aa:	f000 f9e1 	bl	8009c70 <__retarget_lock_release_recursive>
 80098ae:	0028      	movs	r0, r5
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	3601      	adds	r6, #1
 80098b4:	60a3      	str	r3, [r4, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da04      	bge.n	80098c4 <_puts_r+0x68>
 80098ba:	69a2      	ldr	r2, [r4, #24]
 80098bc:	429a      	cmp	r2, r3
 80098be:	dc16      	bgt.n	80098ee <_puts_r+0x92>
 80098c0:	290a      	cmp	r1, #10
 80098c2:	d014      	beq.n	80098ee <_puts_r+0x92>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	6022      	str	r2, [r4, #0]
 80098ca:	7019      	strb	r1, [r3, #0]
 80098cc:	68a3      	ldr	r3, [r4, #8]
 80098ce:	7831      	ldrb	r1, [r6, #0]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	2900      	cmp	r1, #0
 80098d4:	d1ed      	bne.n	80098b2 <_puts_r+0x56>
 80098d6:	60a3      	str	r3, [r4, #8]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	da0f      	bge.n	80098fc <_puts_r+0xa0>
 80098dc:	0028      	movs	r0, r5
 80098de:	0022      	movs	r2, r4
 80098e0:	310a      	adds	r1, #10
 80098e2:	f000 f887 	bl	80099f4 <__swbuf_r>
 80098e6:	250a      	movs	r5, #10
 80098e8:	3001      	adds	r0, #1
 80098ea:	d1d7      	bne.n	800989c <_puts_r+0x40>
 80098ec:	e7d4      	b.n	8009898 <_puts_r+0x3c>
 80098ee:	0022      	movs	r2, r4
 80098f0:	0028      	movs	r0, r5
 80098f2:	f000 f87f 	bl	80099f4 <__swbuf_r>
 80098f6:	3001      	adds	r0, #1
 80098f8:	d1e8      	bne.n	80098cc <_puts_r+0x70>
 80098fa:	e7cd      	b.n	8009898 <_puts_r+0x3c>
 80098fc:	250a      	movs	r5, #10
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	6022      	str	r2, [r4, #0]
 8009904:	701d      	strb	r5, [r3, #0]
 8009906:	e7c9      	b.n	800989c <_puts_r+0x40>

08009908 <puts>:
 8009908:	b510      	push	{r4, lr}
 800990a:	4b03      	ldr	r3, [pc, #12]	; (8009918 <puts+0x10>)
 800990c:	0001      	movs	r1, r0
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	f7ff ffa4 	bl	800985c <_puts_r>
 8009914:	bd10      	pop	{r4, pc}
 8009916:	46c0      	nop			; (mov r8, r8)
 8009918:	200001d0 	.word	0x200001d0

0800991c <siprintf>:
 800991c:	b40e      	push	{r1, r2, r3}
 800991e:	b500      	push	{lr}
 8009920:	490b      	ldr	r1, [pc, #44]	; (8009950 <siprintf+0x34>)
 8009922:	b09c      	sub	sp, #112	; 0x70
 8009924:	ab1d      	add	r3, sp, #116	; 0x74
 8009926:	9002      	str	r0, [sp, #8]
 8009928:	9006      	str	r0, [sp, #24]
 800992a:	9107      	str	r1, [sp, #28]
 800992c:	9104      	str	r1, [sp, #16]
 800992e:	4809      	ldr	r0, [pc, #36]	; (8009954 <siprintf+0x38>)
 8009930:	4909      	ldr	r1, [pc, #36]	; (8009958 <siprintf+0x3c>)
 8009932:	cb04      	ldmia	r3!, {r2}
 8009934:	9105      	str	r1, [sp, #20]
 8009936:	6800      	ldr	r0, [r0, #0]
 8009938:	a902      	add	r1, sp, #8
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	f002 f9f6 	bl	800bd2c <_svfiprintf_r>
 8009940:	2200      	movs	r2, #0
 8009942:	9b02      	ldr	r3, [sp, #8]
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	b01c      	add	sp, #112	; 0x70
 8009948:	bc08      	pop	{r3}
 800994a:	b003      	add	sp, #12
 800994c:	4718      	bx	r3
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	7fffffff 	.word	0x7fffffff
 8009954:	200001d0 	.word	0x200001d0
 8009958:	ffff0208 	.word	0xffff0208

0800995c <__sread>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	000c      	movs	r4, r1
 8009960:	250e      	movs	r5, #14
 8009962:	5f49      	ldrsh	r1, [r1, r5]
 8009964:	f000 f930 	bl	8009bc8 <_read_r>
 8009968:	2800      	cmp	r0, #0
 800996a:	db03      	blt.n	8009974 <__sread+0x18>
 800996c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800996e:	181b      	adds	r3, r3, r0
 8009970:	6563      	str	r3, [r4, #84]	; 0x54
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	4a02      	ldr	r2, [pc, #8]	; (8009980 <__sread+0x24>)
 8009978:	4013      	ands	r3, r2
 800997a:	81a3      	strh	r3, [r4, #12]
 800997c:	e7f9      	b.n	8009972 <__sread+0x16>
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	ffffefff 	.word	0xffffefff

08009984 <__swrite>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	001f      	movs	r7, r3
 8009988:	898b      	ldrh	r3, [r1, #12]
 800998a:	0005      	movs	r5, r0
 800998c:	000c      	movs	r4, r1
 800998e:	0016      	movs	r6, r2
 8009990:	05db      	lsls	r3, r3, #23
 8009992:	d505      	bpl.n	80099a0 <__swrite+0x1c>
 8009994:	230e      	movs	r3, #14
 8009996:	5ec9      	ldrsh	r1, [r1, r3]
 8009998:	2200      	movs	r2, #0
 800999a:	2302      	movs	r3, #2
 800999c:	f000 f900 	bl	8009ba0 <_lseek_r>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	4a05      	ldr	r2, [pc, #20]	; (80099b8 <__swrite+0x34>)
 80099a4:	0028      	movs	r0, r5
 80099a6:	4013      	ands	r3, r2
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	0032      	movs	r2, r6
 80099ac:	230e      	movs	r3, #14
 80099ae:	5ee1      	ldrsh	r1, [r4, r3]
 80099b0:	003b      	movs	r3, r7
 80099b2:	f000 f91d 	bl	8009bf0 <_write_r>
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b8:	ffffefff 	.word	0xffffefff

080099bc <__sseek>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	000c      	movs	r4, r1
 80099c0:	250e      	movs	r5, #14
 80099c2:	5f49      	ldrsh	r1, [r1, r5]
 80099c4:	f000 f8ec 	bl	8009ba0 <_lseek_r>
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	1c42      	adds	r2, r0, #1
 80099cc:	d103      	bne.n	80099d6 <__sseek+0x1a>
 80099ce:	4a05      	ldr	r2, [pc, #20]	; (80099e4 <__sseek+0x28>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	2280      	movs	r2, #128	; 0x80
 80099d8:	0152      	lsls	r2, r2, #5
 80099da:	4313      	orrs	r3, r2
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	6560      	str	r0, [r4, #84]	; 0x54
 80099e0:	e7f8      	b.n	80099d4 <__sseek+0x18>
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	ffffefff 	.word	0xffffefff

080099e8 <__sclose>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	230e      	movs	r3, #14
 80099ec:	5ec9      	ldrsh	r1, [r1, r3]
 80099ee:	f000 f8c5 	bl	8009b7c <_close_r>
 80099f2:	bd10      	pop	{r4, pc}

080099f4 <__swbuf_r>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	0006      	movs	r6, r0
 80099f8:	000d      	movs	r5, r1
 80099fa:	0014      	movs	r4, r2
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d004      	beq.n	8009a0a <__swbuf_r+0x16>
 8009a00:	6a03      	ldr	r3, [r0, #32]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <__swbuf_r+0x16>
 8009a06:	f7ff fee5 	bl	80097d4 <__sinit>
 8009a0a:	69a3      	ldr	r3, [r4, #24]
 8009a0c:	60a3      	str	r3, [r4, #8]
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	071b      	lsls	r3, r3, #28
 8009a12:	d528      	bpl.n	8009a66 <__swbuf_r+0x72>
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d025      	beq.n	8009a66 <__swbuf_r+0x72>
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	b2ef      	uxtb	r7, r5
 8009a20:	1ac0      	subs	r0, r0, r3
 8009a22:	6963      	ldr	r3, [r4, #20]
 8009a24:	b2ed      	uxtb	r5, r5
 8009a26:	4283      	cmp	r3, r0
 8009a28:	dc05      	bgt.n	8009a36 <__swbuf_r+0x42>
 8009a2a:	0021      	movs	r1, r4
 8009a2c:	0030      	movs	r0, r6
 8009a2e:	f002 fc4b 	bl	800c2c8 <_fflush_r>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d11d      	bne.n	8009a72 <__swbuf_r+0x7e>
 8009a36:	68a3      	ldr	r3, [r4, #8]
 8009a38:	3001      	adds	r0, #1
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	60a3      	str	r3, [r4, #8]
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	6022      	str	r2, [r4, #0]
 8009a44:	701f      	strb	r7, [r3, #0]
 8009a46:	6963      	ldr	r3, [r4, #20]
 8009a48:	4283      	cmp	r3, r0
 8009a4a:	d004      	beq.n	8009a56 <__swbuf_r+0x62>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	07db      	lsls	r3, r3, #31
 8009a50:	d507      	bpl.n	8009a62 <__swbuf_r+0x6e>
 8009a52:	2d0a      	cmp	r5, #10
 8009a54:	d105      	bne.n	8009a62 <__swbuf_r+0x6e>
 8009a56:	0021      	movs	r1, r4
 8009a58:	0030      	movs	r0, r6
 8009a5a:	f002 fc35 	bl	800c2c8 <_fflush_r>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d107      	bne.n	8009a72 <__swbuf_r+0x7e>
 8009a62:	0028      	movs	r0, r5
 8009a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a66:	0021      	movs	r1, r4
 8009a68:	0030      	movs	r0, r6
 8009a6a:	f000 f805 	bl	8009a78 <__swsetup_r>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d0d3      	beq.n	8009a1a <__swbuf_r+0x26>
 8009a72:	2501      	movs	r5, #1
 8009a74:	426d      	negs	r5, r5
 8009a76:	e7f4      	b.n	8009a62 <__swbuf_r+0x6e>

08009a78 <__swsetup_r>:
 8009a78:	4b30      	ldr	r3, [pc, #192]	; (8009b3c <__swsetup_r+0xc4>)
 8009a7a:	b570      	push	{r4, r5, r6, lr}
 8009a7c:	0005      	movs	r5, r0
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	000c      	movs	r4, r1
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d004      	beq.n	8009a90 <__swsetup_r+0x18>
 8009a86:	6a03      	ldr	r3, [r0, #32]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <__swsetup_r+0x18>
 8009a8c:	f7ff fea2 	bl	80097d4 <__sinit>
 8009a90:	230c      	movs	r3, #12
 8009a92:	5ee2      	ldrsh	r2, [r4, r3]
 8009a94:	b293      	uxth	r3, r2
 8009a96:	0711      	lsls	r1, r2, #28
 8009a98:	d423      	bmi.n	8009ae2 <__swsetup_r+0x6a>
 8009a9a:	06d9      	lsls	r1, r3, #27
 8009a9c:	d407      	bmi.n	8009aae <__swsetup_r+0x36>
 8009a9e:	2309      	movs	r3, #9
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	602b      	str	r3, [r5, #0]
 8009aa4:	3337      	adds	r3, #55	; 0x37
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	4240      	negs	r0, r0
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
 8009aae:	075b      	lsls	r3, r3, #29
 8009ab0:	d513      	bpl.n	8009ada <__swsetup_r+0x62>
 8009ab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d008      	beq.n	8009aca <__swsetup_r+0x52>
 8009ab8:	0023      	movs	r3, r4
 8009aba:	3344      	adds	r3, #68	; 0x44
 8009abc:	4299      	cmp	r1, r3
 8009abe:	d002      	beq.n	8009ac6 <__swsetup_r+0x4e>
 8009ac0:	0028      	movs	r0, r5
 8009ac2:	f000 ff93 	bl	800a9ec <_free_r>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8009aca:	2224      	movs	r2, #36	; 0x24
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	4393      	bics	r3, r2
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	6063      	str	r3, [r4, #4]
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	2308      	movs	r3, #8
 8009adc:	89a2      	ldrh	r2, [r4, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	6923      	ldr	r3, [r4, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10b      	bne.n	8009b00 <__swsetup_r+0x88>
 8009ae8:	21a0      	movs	r1, #160	; 0xa0
 8009aea:	2280      	movs	r2, #128	; 0x80
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	0089      	lsls	r1, r1, #2
 8009af0:	0092      	lsls	r2, r2, #2
 8009af2:	400b      	ands	r3, r1
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <__swsetup_r+0x88>
 8009af8:	0021      	movs	r1, r4
 8009afa:	0028      	movs	r0, r5
 8009afc:	f002 fc38 	bl	800c370 <__smakebuf_r>
 8009b00:	220c      	movs	r2, #12
 8009b02:	5ea3      	ldrsh	r3, [r4, r2]
 8009b04:	2001      	movs	r0, #1
 8009b06:	001a      	movs	r2, r3
 8009b08:	b299      	uxth	r1, r3
 8009b0a:	4002      	ands	r2, r0
 8009b0c:	4203      	tst	r3, r0
 8009b0e:	d00f      	beq.n	8009b30 <__swsetup_r+0xb8>
 8009b10:	2200      	movs	r2, #0
 8009b12:	60a2      	str	r2, [r4, #8]
 8009b14:	6962      	ldr	r2, [r4, #20]
 8009b16:	4252      	negs	r2, r2
 8009b18:	61a2      	str	r2, [r4, #24]
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	6922      	ldr	r2, [r4, #16]
 8009b1e:	4282      	cmp	r2, r0
 8009b20:	d1c4      	bne.n	8009aac <__swsetup_r+0x34>
 8009b22:	0609      	lsls	r1, r1, #24
 8009b24:	d5c2      	bpl.n	8009aac <__swsetup_r+0x34>
 8009b26:	2240      	movs	r2, #64	; 0x40
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	3801      	subs	r0, #1
 8009b2e:	e7bd      	b.n	8009aac <__swsetup_r+0x34>
 8009b30:	0788      	lsls	r0, r1, #30
 8009b32:	d400      	bmi.n	8009b36 <__swsetup_r+0xbe>
 8009b34:	6962      	ldr	r2, [r4, #20]
 8009b36:	60a2      	str	r2, [r4, #8]
 8009b38:	e7ef      	b.n	8009b1a <__swsetup_r+0xa2>
 8009b3a:	46c0      	nop			; (mov r8, r8)
 8009b3c:	200001d0 	.word	0x200001d0

08009b40 <memset>:
 8009b40:	0003      	movs	r3, r0
 8009b42:	1882      	adds	r2, r0, r2
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d100      	bne.n	8009b4a <memset+0xa>
 8009b48:	4770      	bx	lr
 8009b4a:	7019      	strb	r1, [r3, #0]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	e7f9      	b.n	8009b44 <memset+0x4>

08009b50 <strncmp>:
 8009b50:	b530      	push	{r4, r5, lr}
 8009b52:	0005      	movs	r5, r0
 8009b54:	1e10      	subs	r0, r2, #0
 8009b56:	d00b      	beq.n	8009b70 <strncmp+0x20>
 8009b58:	2400      	movs	r4, #0
 8009b5a:	3a01      	subs	r2, #1
 8009b5c:	5d2b      	ldrb	r3, [r5, r4]
 8009b5e:	5d08      	ldrb	r0, [r1, r4]
 8009b60:	4283      	cmp	r3, r0
 8009b62:	d104      	bne.n	8009b6e <strncmp+0x1e>
 8009b64:	42a2      	cmp	r2, r4
 8009b66:	d002      	beq.n	8009b6e <strncmp+0x1e>
 8009b68:	3401      	adds	r4, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1f6      	bne.n	8009b5c <strncmp+0xc>
 8009b6e:	1a18      	subs	r0, r3, r0
 8009b70:	bd30      	pop	{r4, r5, pc}
	...

08009b74 <_localeconv_r>:
 8009b74:	4800      	ldr	r0, [pc, #0]	; (8009b78 <_localeconv_r+0x4>)
 8009b76:	4770      	bx	lr
 8009b78:	20000108 	.word	0x20000108

08009b7c <_close_r>:
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	b570      	push	{r4, r5, r6, lr}
 8009b80:	4d06      	ldr	r5, [pc, #24]	; (8009b9c <_close_r+0x20>)
 8009b82:	0004      	movs	r4, r0
 8009b84:	0008      	movs	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f9 fecf 	bl	800392a <_close>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d103      	bne.n	8009b98 <_close_r+0x1c>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d000      	beq.n	8009b98 <_close_r+0x1c>
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	46c0      	nop			; (mov r8, r8)
 8009b9c:	2000072c 	.word	0x2000072c

08009ba0 <_lseek_r>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	0004      	movs	r4, r0
 8009ba4:	0008      	movs	r0, r1
 8009ba6:	0011      	movs	r1, r2
 8009ba8:	001a      	movs	r2, r3
 8009baa:	2300      	movs	r3, #0
 8009bac:	4d05      	ldr	r5, [pc, #20]	; (8009bc4 <_lseek_r+0x24>)
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	f7f9 fedc 	bl	800396c <_lseek>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d103      	bne.n	8009bc0 <_lseek_r+0x20>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d000      	beq.n	8009bc0 <_lseek_r+0x20>
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
 8009bc2:	46c0      	nop			; (mov r8, r8)
 8009bc4:	2000072c 	.word	0x2000072c

08009bc8 <_read_r>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	0004      	movs	r4, r0
 8009bcc:	0008      	movs	r0, r1
 8009bce:	0011      	movs	r1, r2
 8009bd0:	001a      	movs	r2, r3
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4d05      	ldr	r5, [pc, #20]	; (8009bec <_read_r+0x24>)
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	f7f9 fe6e 	bl	80038b8 <_read>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d103      	bne.n	8009be8 <_read_r+0x20>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d000      	beq.n	8009be8 <_read_r+0x20>
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	2000072c 	.word	0x2000072c

08009bf0 <_write_r>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	0004      	movs	r4, r0
 8009bf4:	0008      	movs	r0, r1
 8009bf6:	0011      	movs	r1, r2
 8009bf8:	001a      	movs	r2, r3
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4d05      	ldr	r5, [pc, #20]	; (8009c14 <_write_r+0x24>)
 8009bfe:	602b      	str	r3, [r5, #0]
 8009c00:	f7f9 fe77 	bl	80038f2 <_write>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d103      	bne.n	8009c10 <_write_r+0x20>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d000      	beq.n	8009c10 <_write_r+0x20>
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	bd70      	pop	{r4, r5, r6, pc}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	2000072c 	.word	0x2000072c

08009c18 <__errno>:
 8009c18:	4b01      	ldr	r3, [pc, #4]	; (8009c20 <__errno+0x8>)
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	4770      	bx	lr
 8009c1e:	46c0      	nop			; (mov r8, r8)
 8009c20:	200001d0 	.word	0x200001d0

08009c24 <__libc_init_array>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	2600      	movs	r6, #0
 8009c28:	4c0c      	ldr	r4, [pc, #48]	; (8009c5c <__libc_init_array+0x38>)
 8009c2a:	4d0d      	ldr	r5, [pc, #52]	; (8009c60 <__libc_init_array+0x3c>)
 8009c2c:	1b64      	subs	r4, r4, r5
 8009c2e:	10a4      	asrs	r4, r4, #2
 8009c30:	42a6      	cmp	r6, r4
 8009c32:	d109      	bne.n	8009c48 <__libc_init_array+0x24>
 8009c34:	2600      	movs	r6, #0
 8009c36:	f002 fd07 	bl	800c648 <_init>
 8009c3a:	4c0a      	ldr	r4, [pc, #40]	; (8009c64 <__libc_init_array+0x40>)
 8009c3c:	4d0a      	ldr	r5, [pc, #40]	; (8009c68 <__libc_init_array+0x44>)
 8009c3e:	1b64      	subs	r4, r4, r5
 8009c40:	10a4      	asrs	r4, r4, #2
 8009c42:	42a6      	cmp	r6, r4
 8009c44:	d105      	bne.n	8009c52 <__libc_init_array+0x2e>
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	00b3      	lsls	r3, r6, #2
 8009c4a:	58eb      	ldr	r3, [r5, r3]
 8009c4c:	4798      	blx	r3
 8009c4e:	3601      	adds	r6, #1
 8009c50:	e7ee      	b.n	8009c30 <__libc_init_array+0xc>
 8009c52:	00b3      	lsls	r3, r6, #2
 8009c54:	58eb      	ldr	r3, [r5, r3]
 8009c56:	4798      	blx	r3
 8009c58:	3601      	adds	r6, #1
 8009c5a:	e7f2      	b.n	8009c42 <__libc_init_array+0x1e>
 8009c5c:	0800cc64 	.word	0x0800cc64
 8009c60:	0800cc64 	.word	0x0800cc64
 8009c64:	0800cc68 	.word	0x0800cc68
 8009c68:	0800cc64 	.word	0x0800cc64

08009c6c <__retarget_lock_init_recursive>:
 8009c6c:	4770      	bx	lr

08009c6e <__retarget_lock_acquire_recursive>:
 8009c6e:	4770      	bx	lr

08009c70 <__retarget_lock_release_recursive>:
 8009c70:	4770      	bx	lr

08009c72 <memchr>:
 8009c72:	b2c9      	uxtb	r1, r1
 8009c74:	1882      	adds	r2, r0, r2
 8009c76:	4290      	cmp	r0, r2
 8009c78:	d101      	bne.n	8009c7e <memchr+0xc>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	4770      	bx	lr
 8009c7e:	7803      	ldrb	r3, [r0, #0]
 8009c80:	428b      	cmp	r3, r1
 8009c82:	d0fb      	beq.n	8009c7c <memchr+0xa>
 8009c84:	3001      	adds	r0, #1
 8009c86:	e7f6      	b.n	8009c76 <memchr+0x4>

08009c88 <memcpy>:
 8009c88:	2300      	movs	r3, #0
 8009c8a:	b510      	push	{r4, lr}
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d100      	bne.n	8009c92 <memcpy+0xa>
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	5ccc      	ldrb	r4, [r1, r3]
 8009c94:	54c4      	strb	r4, [r0, r3]
 8009c96:	3301      	adds	r3, #1
 8009c98:	e7f8      	b.n	8009c8c <memcpy+0x4>
	...

08009c9c <nan>:
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	4901      	ldr	r1, [pc, #4]	; (8009ca4 <nan+0x8>)
 8009ca0:	4770      	bx	lr
 8009ca2:	46c0      	nop			; (mov r8, r8)
 8009ca4:	7ff80000 	.word	0x7ff80000

08009ca8 <nanf>:
 8009ca8:	4800      	ldr	r0, [pc, #0]	; (8009cac <nanf+0x4>)
 8009caa:	4770      	bx	lr
 8009cac:	7fc00000 	.word	0x7fc00000

08009cb0 <quorem>:
 8009cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb2:	6902      	ldr	r2, [r0, #16]
 8009cb4:	690b      	ldr	r3, [r1, #16]
 8009cb6:	b089      	sub	sp, #36	; 0x24
 8009cb8:	0007      	movs	r7, r0
 8009cba:	9104      	str	r1, [sp, #16]
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	db69      	blt.n	8009d96 <quorem+0xe6>
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	009c      	lsls	r4, r3, #2
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	000b      	movs	r3, r1
 8009cca:	3314      	adds	r3, #20
 8009ccc:	9306      	str	r3, [sp, #24]
 8009cce:	191b      	adds	r3, r3, r4
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	003b      	movs	r3, r7
 8009cd4:	3314      	adds	r3, #20
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	191c      	adds	r4, r3, r4
 8009cda:	9b05      	ldr	r3, [sp, #20]
 8009cdc:	6826      	ldr	r6, [r4, #0]
 8009cde:	681d      	ldr	r5, [r3, #0]
 8009ce0:	0030      	movs	r0, r6
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	0029      	movs	r1, r5
 8009ce6:	f7f6 fa2b 	bl	8000140 <__udivsi3>
 8009cea:	9002      	str	r0, [sp, #8]
 8009cec:	42ae      	cmp	r6, r5
 8009cee:	d329      	bcc.n	8009d44 <quorem+0x94>
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	2600      	movs	r6, #0
 8009cf4:	469c      	mov	ip, r3
 8009cf6:	9d03      	ldr	r5, [sp, #12]
 8009cf8:	9606      	str	r6, [sp, #24]
 8009cfa:	4662      	mov	r2, ip
 8009cfc:	ca08      	ldmia	r2!, {r3}
 8009cfe:	6828      	ldr	r0, [r5, #0]
 8009d00:	4694      	mov	ip, r2
 8009d02:	9a02      	ldr	r2, [sp, #8]
 8009d04:	b299      	uxth	r1, r3
 8009d06:	4351      	muls	r1, r2
 8009d08:	0c1b      	lsrs	r3, r3, #16
 8009d0a:	4353      	muls	r3, r2
 8009d0c:	1989      	adds	r1, r1, r6
 8009d0e:	0c0a      	lsrs	r2, r1, #16
 8009d10:	189b      	adds	r3, r3, r2
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	0c1e      	lsrs	r6, r3, #16
 8009d16:	9b06      	ldr	r3, [sp, #24]
 8009d18:	b282      	uxth	r2, r0
 8009d1a:	18d2      	adds	r2, r2, r3
 8009d1c:	466b      	mov	r3, sp
 8009d1e:	b289      	uxth	r1, r1
 8009d20:	8b9b      	ldrh	r3, [r3, #28]
 8009d22:	1a52      	subs	r2, r2, r1
 8009d24:	0c01      	lsrs	r1, r0, #16
 8009d26:	1ac9      	subs	r1, r1, r3
 8009d28:	1413      	asrs	r3, r2, #16
 8009d2a:	18cb      	adds	r3, r1, r3
 8009d2c:	1419      	asrs	r1, r3, #16
 8009d2e:	b292      	uxth	r2, r2
 8009d30:	041b      	lsls	r3, r3, #16
 8009d32:	4313      	orrs	r3, r2
 8009d34:	c508      	stmia	r5!, {r3}
 8009d36:	9b05      	ldr	r3, [sp, #20]
 8009d38:	9106      	str	r1, [sp, #24]
 8009d3a:	4563      	cmp	r3, ip
 8009d3c:	d2dd      	bcs.n	8009cfa <quorem+0x4a>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d030      	beq.n	8009da6 <quorem+0xf6>
 8009d44:	0038      	movs	r0, r7
 8009d46:	9904      	ldr	r1, [sp, #16]
 8009d48:	f001 fd98 	bl	800b87c <__mcmp>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	db21      	blt.n	8009d94 <quorem+0xe4>
 8009d50:	0038      	movs	r0, r7
 8009d52:	2600      	movs	r6, #0
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	9c04      	ldr	r4, [sp, #16]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	9302      	str	r3, [sp, #8]
 8009d5c:	3014      	adds	r0, #20
 8009d5e:	3414      	adds	r4, #20
 8009d60:	6803      	ldr	r3, [r0, #0]
 8009d62:	cc02      	ldmia	r4!, {r1}
 8009d64:	b29d      	uxth	r5, r3
 8009d66:	19ad      	adds	r5, r5, r6
 8009d68:	b28a      	uxth	r2, r1
 8009d6a:	1aaa      	subs	r2, r5, r2
 8009d6c:	0c09      	lsrs	r1, r1, #16
 8009d6e:	0c1b      	lsrs	r3, r3, #16
 8009d70:	1a5b      	subs	r3, r3, r1
 8009d72:	1411      	asrs	r1, r2, #16
 8009d74:	185b      	adds	r3, r3, r1
 8009d76:	141e      	asrs	r6, r3, #16
 8009d78:	b292      	uxth	r2, r2
 8009d7a:	041b      	lsls	r3, r3, #16
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	c008      	stmia	r0!, {r3}
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	d2ec      	bcs.n	8009d60 <quorem+0xb0>
 8009d86:	9b01      	ldr	r3, [sp, #4]
 8009d88:	9a03      	ldr	r2, [sp, #12]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	18d3      	adds	r3, r2, r3
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	2a00      	cmp	r2, #0
 8009d92:	d015      	beq.n	8009dc0 <quorem+0x110>
 8009d94:	9802      	ldr	r0, [sp, #8]
 8009d96:	b009      	add	sp, #36	; 0x24
 8009d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d106      	bne.n	8009dae <quorem+0xfe>
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	9b03      	ldr	r3, [sp, #12]
 8009da8:	3c04      	subs	r4, #4
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	d3f5      	bcc.n	8009d9a <quorem+0xea>
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	e7c7      	b.n	8009d44 <quorem+0x94>
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	d106      	bne.n	8009dc8 <quorem+0x118>
 8009dba:	9a01      	ldr	r2, [sp, #4]
 8009dbc:	3a01      	subs	r2, #1
 8009dbe:	9201      	str	r2, [sp, #4]
 8009dc0:	9a03      	ldr	r2, [sp, #12]
 8009dc2:	3b04      	subs	r3, #4
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d3f5      	bcc.n	8009db4 <quorem+0x104>
 8009dc8:	9b01      	ldr	r3, [sp, #4]
 8009dca:	613b      	str	r3, [r7, #16]
 8009dcc:	e7e2      	b.n	8009d94 <quorem+0xe4>
	...

08009dd0 <_dtoa_r>:
 8009dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd2:	0014      	movs	r4, r2
 8009dd4:	001d      	movs	r5, r3
 8009dd6:	69c6      	ldr	r6, [r0, #28]
 8009dd8:	b09d      	sub	sp, #116	; 0x74
 8009dda:	9408      	str	r4, [sp, #32]
 8009ddc:	9509      	str	r5, [sp, #36]	; 0x24
 8009dde:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009de0:	9004      	str	r0, [sp, #16]
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	d10f      	bne.n	8009e06 <_dtoa_r+0x36>
 8009de6:	2010      	movs	r0, #16
 8009de8:	f001 f9a6 	bl	800b138 <malloc>
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	1e02      	subs	r2, r0, #0
 8009df0:	61d8      	str	r0, [r3, #28]
 8009df2:	d104      	bne.n	8009dfe <_dtoa_r+0x2e>
 8009df4:	21ef      	movs	r1, #239	; 0xef
 8009df6:	4bc6      	ldr	r3, [pc, #792]	; (800a110 <_dtoa_r+0x340>)
 8009df8:	48c6      	ldr	r0, [pc, #792]	; (800a114 <_dtoa_r+0x344>)
 8009dfa:	f002 fb41 	bl	800c480 <__assert_func>
 8009dfe:	6046      	str	r6, [r0, #4]
 8009e00:	6086      	str	r6, [r0, #8]
 8009e02:	6006      	str	r6, [r0, #0]
 8009e04:	60c6      	str	r6, [r0, #12]
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	6819      	ldr	r1, [r3, #0]
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d00b      	beq.n	8009e28 <_dtoa_r+0x58>
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	2301      	movs	r3, #1
 8009e14:	4093      	lsls	r3, r2
 8009e16:	604a      	str	r2, [r1, #4]
 8009e18:	608b      	str	r3, [r1, #8]
 8009e1a:	9804      	ldr	r0, [sp, #16]
 8009e1c:	f001 faa0 	bl	800b360 <_Bfree>
 8009e20:	2200      	movs	r2, #0
 8009e22:	9b04      	ldr	r3, [sp, #16]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	2d00      	cmp	r5, #0
 8009e2a:	da1e      	bge.n	8009e6a <_dtoa_r+0x9a>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	006b      	lsls	r3, r5, #1
 8009e32:	085b      	lsrs	r3, r3, #1
 8009e34:	9309      	str	r3, [sp, #36]	; 0x24
 8009e36:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e38:	4bb7      	ldr	r3, [pc, #732]	; (800a118 <_dtoa_r+0x348>)
 8009e3a:	4ab7      	ldr	r2, [pc, #732]	; (800a118 <_dtoa_r+0x348>)
 8009e3c:	403b      	ands	r3, r7
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d116      	bne.n	8009e70 <_dtoa_r+0xa0>
 8009e42:	4bb6      	ldr	r3, [pc, #728]	; (800a11c <_dtoa_r+0x34c>)
 8009e44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	033b      	lsls	r3, r7, #12
 8009e4a:	0b1b      	lsrs	r3, r3, #12
 8009e4c:	4323      	orrs	r3, r4
 8009e4e:	d101      	bne.n	8009e54 <_dtoa_r+0x84>
 8009e50:	f000 fdb5 	bl	800a9be <_dtoa_r+0xbee>
 8009e54:	4bb2      	ldr	r3, [pc, #712]	; (800a120 <_dtoa_r+0x350>)
 8009e56:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009e58:	9306      	str	r3, [sp, #24]
 8009e5a:	2a00      	cmp	r2, #0
 8009e5c:	d002      	beq.n	8009e64 <_dtoa_r+0x94>
 8009e5e:	4bb1      	ldr	r3, [pc, #708]	; (800a124 <_dtoa_r+0x354>)
 8009e60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	9806      	ldr	r0, [sp, #24]
 8009e66:	b01d      	add	sp, #116	; 0x74
 8009e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	603b      	str	r3, [r7, #0]
 8009e6e:	e7e2      	b.n	8009e36 <_dtoa_r+0x66>
 8009e70:	9a08      	ldr	r2, [sp, #32]
 8009e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e74:	9210      	str	r2, [sp, #64]	; 0x40
 8009e76:	9311      	str	r3, [sp, #68]	; 0x44
 8009e78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f7f6 fae4 	bl	800044c <__aeabi_dcmpeq>
 8009e84:	1e06      	subs	r6, r0, #0
 8009e86:	d009      	beq.n	8009e9c <_dtoa_r+0xcc>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	4ba6      	ldr	r3, [pc, #664]	; (800a128 <_dtoa_r+0x358>)
 8009e90:	9306      	str	r3, [sp, #24]
 8009e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0e5      	beq.n	8009e64 <_dtoa_r+0x94>
 8009e98:	4ba4      	ldr	r3, [pc, #656]	; (800a12c <_dtoa_r+0x35c>)
 8009e9a:	e7e1      	b.n	8009e60 <_dtoa_r+0x90>
 8009e9c:	ab1a      	add	r3, sp, #104	; 0x68
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	ab1b      	add	r3, sp, #108	; 0x6c
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	9804      	ldr	r0, [sp, #16]
 8009ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eaa:	f001 fe03 	bl	800bab4 <__d2b>
 8009eae:	007a      	lsls	r2, r7, #1
 8009eb0:	9005      	str	r0, [sp, #20]
 8009eb2:	0d52      	lsrs	r2, r2, #21
 8009eb4:	d100      	bne.n	8009eb8 <_dtoa_r+0xe8>
 8009eb6:	e07b      	b.n	8009fb0 <_dtoa_r+0x1e0>
 8009eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eba:	9617      	str	r6, [sp, #92]	; 0x5c
 8009ebc:	0319      	lsls	r1, r3, #12
 8009ebe:	4b9c      	ldr	r3, [pc, #624]	; (800a130 <_dtoa_r+0x360>)
 8009ec0:	0b09      	lsrs	r1, r1, #12
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	499b      	ldr	r1, [pc, #620]	; (800a134 <_dtoa_r+0x364>)
 8009ec6:	1857      	adds	r7, r2, r1
 8009ec8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009eca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ecc:	0019      	movs	r1, r3
 8009ece:	2200      	movs	r2, #0
 8009ed0:	4b99      	ldr	r3, [pc, #612]	; (800a138 <_dtoa_r+0x368>)
 8009ed2:	f7f8 fadf 	bl	8002494 <__aeabi_dsub>
 8009ed6:	4a99      	ldr	r2, [pc, #612]	; (800a13c <_dtoa_r+0x36c>)
 8009ed8:	4b99      	ldr	r3, [pc, #612]	; (800a140 <_dtoa_r+0x370>)
 8009eda:	f7f8 f819 	bl	8001f10 <__aeabi_dmul>
 8009ede:	4a99      	ldr	r2, [pc, #612]	; (800a144 <_dtoa_r+0x374>)
 8009ee0:	4b99      	ldr	r3, [pc, #612]	; (800a148 <_dtoa_r+0x378>)
 8009ee2:	f7f7 f8bb 	bl	800105c <__aeabi_dadd>
 8009ee6:	0004      	movs	r4, r0
 8009ee8:	0038      	movs	r0, r7
 8009eea:	000d      	movs	r5, r1
 8009eec:	f7f8 fea8 	bl	8002c40 <__aeabi_i2d>
 8009ef0:	4a96      	ldr	r2, [pc, #600]	; (800a14c <_dtoa_r+0x37c>)
 8009ef2:	4b97      	ldr	r3, [pc, #604]	; (800a150 <_dtoa_r+0x380>)
 8009ef4:	f7f8 f80c 	bl	8001f10 <__aeabi_dmul>
 8009ef8:	0002      	movs	r2, r0
 8009efa:	000b      	movs	r3, r1
 8009efc:	0020      	movs	r0, r4
 8009efe:	0029      	movs	r1, r5
 8009f00:	f7f7 f8ac 	bl	800105c <__aeabi_dadd>
 8009f04:	0004      	movs	r4, r0
 8009f06:	000d      	movs	r5, r1
 8009f08:	f7f8 fe64 	bl	8002bd4 <__aeabi_d2iz>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	9003      	str	r0, [sp, #12]
 8009f10:	2300      	movs	r3, #0
 8009f12:	0020      	movs	r0, r4
 8009f14:	0029      	movs	r1, r5
 8009f16:	f7f6 fa9f 	bl	8000458 <__aeabi_dcmplt>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d00b      	beq.n	8009f36 <_dtoa_r+0x166>
 8009f1e:	9803      	ldr	r0, [sp, #12]
 8009f20:	f7f8 fe8e 	bl	8002c40 <__aeabi_i2d>
 8009f24:	002b      	movs	r3, r5
 8009f26:	0022      	movs	r2, r4
 8009f28:	f7f6 fa90 	bl	800044c <__aeabi_dcmpeq>
 8009f2c:	4243      	negs	r3, r0
 8009f2e:	4158      	adcs	r0, r3
 8009f30:	9b03      	ldr	r3, [sp, #12]
 8009f32:	1a1b      	subs	r3, r3, r0
 8009f34:	9303      	str	r3, [sp, #12]
 8009f36:	2301      	movs	r3, #1
 8009f38:	9316      	str	r3, [sp, #88]	; 0x58
 8009f3a:	9b03      	ldr	r3, [sp, #12]
 8009f3c:	2b16      	cmp	r3, #22
 8009f3e:	d810      	bhi.n	8009f62 <_dtoa_r+0x192>
 8009f40:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009f42:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f44:	9a03      	ldr	r2, [sp, #12]
 8009f46:	4b83      	ldr	r3, [pc, #524]	; (800a154 <_dtoa_r+0x384>)
 8009f48:	00d2      	lsls	r2, r2, #3
 8009f4a:	189b      	adds	r3, r3, r2
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f7f6 fa82 	bl	8000458 <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d047      	beq.n	8009fe8 <_dtoa_r+0x218>
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	9303      	str	r3, [sp, #12]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9316      	str	r3, [sp, #88]	; 0x58
 8009f62:	2200      	movs	r2, #0
 8009f64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009f66:	920a      	str	r2, [sp, #40]	; 0x28
 8009f68:	1bdb      	subs	r3, r3, r7
 8009f6a:	1e5a      	subs	r2, r3, #1
 8009f6c:	d53e      	bpl.n	8009fec <_dtoa_r+0x21c>
 8009f6e:	2201      	movs	r2, #1
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	930a      	str	r3, [sp, #40]	; 0x28
 8009f74:	2300      	movs	r3, #0
 8009f76:	930c      	str	r3, [sp, #48]	; 0x30
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	db38      	blt.n	8009ff0 <_dtoa_r+0x220>
 8009f7e:	9a03      	ldr	r2, [sp, #12]
 8009f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f82:	4694      	mov	ip, r2
 8009f84:	4463      	add	r3, ip
 8009f86:	930c      	str	r3, [sp, #48]	; 0x30
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8009f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f90:	2401      	movs	r4, #1
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d867      	bhi.n	800a066 <_dtoa_r+0x296>
 8009f96:	2b05      	cmp	r3, #5
 8009f98:	dd02      	ble.n	8009fa0 <_dtoa_r+0x1d0>
 8009f9a:	2400      	movs	r4, #0
 8009f9c:	3b04      	subs	r3, #4
 8009f9e:	9322      	str	r3, [sp, #136]	; 0x88
 8009fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fa2:	1e98      	subs	r0, r3, #2
 8009fa4:	2803      	cmp	r0, #3
 8009fa6:	d867      	bhi.n	800a078 <_dtoa_r+0x2a8>
 8009fa8:	f7f6 f8b6 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009fac:	5b383a2b 	.word	0x5b383a2b
 8009fb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fb2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009fb4:	18f6      	adds	r6, r6, r3
 8009fb6:	4b68      	ldr	r3, [pc, #416]	; (800a158 <_dtoa_r+0x388>)
 8009fb8:	18f2      	adds	r2, r6, r3
 8009fba:	2a20      	cmp	r2, #32
 8009fbc:	dd0f      	ble.n	8009fde <_dtoa_r+0x20e>
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	409f      	lsls	r7, r3
 8009fc4:	4b65      	ldr	r3, [pc, #404]	; (800a15c <_dtoa_r+0x38c>)
 8009fc6:	0038      	movs	r0, r7
 8009fc8:	18f3      	adds	r3, r6, r3
 8009fca:	40dc      	lsrs	r4, r3
 8009fcc:	4320      	orrs	r0, r4
 8009fce:	f7f8 fe67 	bl	8002ca0 <__aeabi_ui2d>
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4b62      	ldr	r3, [pc, #392]	; (800a160 <_dtoa_r+0x390>)
 8009fd6:	1e77      	subs	r7, r6, #1
 8009fd8:	18cb      	adds	r3, r1, r3
 8009fda:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fdc:	e776      	b.n	8009ecc <_dtoa_r+0xfc>
 8009fde:	2320      	movs	r3, #32
 8009fe0:	0020      	movs	r0, r4
 8009fe2:	1a9b      	subs	r3, r3, r2
 8009fe4:	4098      	lsls	r0, r3
 8009fe6:	e7f2      	b.n	8009fce <_dtoa_r+0x1fe>
 8009fe8:	9016      	str	r0, [sp, #88]	; 0x58
 8009fea:	e7ba      	b.n	8009f62 <_dtoa_r+0x192>
 8009fec:	920c      	str	r2, [sp, #48]	; 0x30
 8009fee:	e7c3      	b.n	8009f78 <_dtoa_r+0x1a8>
 8009ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff2:	9a03      	ldr	r2, [sp, #12]
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ff8:	4253      	negs	r3, r2
 8009ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9313      	str	r3, [sp, #76]	; 0x4c
 800a000:	e7c5      	b.n	8009f8e <_dtoa_r+0x1be>
 800a002:	2300      	movs	r3, #0
 800a004:	930f      	str	r3, [sp, #60]	; 0x3c
 800a006:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a008:	930b      	str	r3, [sp, #44]	; 0x2c
 800a00a:	9307      	str	r3, [sp, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc13      	bgt.n	800a038 <_dtoa_r+0x268>
 800a010:	2301      	movs	r3, #1
 800a012:	001a      	movs	r2, r3
 800a014:	930b      	str	r3, [sp, #44]	; 0x2c
 800a016:	9307      	str	r3, [sp, #28]
 800a018:	9223      	str	r2, [sp, #140]	; 0x8c
 800a01a:	e00d      	b.n	800a038 <_dtoa_r+0x268>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e7f1      	b.n	800a004 <_dtoa_r+0x234>
 800a020:	2300      	movs	r3, #0
 800a022:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a024:	930f      	str	r3, [sp, #60]	; 0x3c
 800a026:	4694      	mov	ip, r2
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	4463      	add	r3, ip
 800a02c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a02e:	3301      	adds	r3, #1
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	2b00      	cmp	r3, #0
 800a034:	dc00      	bgt.n	800a038 <_dtoa_r+0x268>
 800a036:	2301      	movs	r3, #1
 800a038:	9a04      	ldr	r2, [sp, #16]
 800a03a:	2100      	movs	r1, #0
 800a03c:	69d0      	ldr	r0, [r2, #28]
 800a03e:	2204      	movs	r2, #4
 800a040:	0015      	movs	r5, r2
 800a042:	3514      	adds	r5, #20
 800a044:	429d      	cmp	r5, r3
 800a046:	d91b      	bls.n	800a080 <_dtoa_r+0x2b0>
 800a048:	6041      	str	r1, [r0, #4]
 800a04a:	9804      	ldr	r0, [sp, #16]
 800a04c:	f001 f944 	bl	800b2d8 <_Balloc>
 800a050:	9006      	str	r0, [sp, #24]
 800a052:	2800      	cmp	r0, #0
 800a054:	d117      	bne.n	800a086 <_dtoa_r+0x2b6>
 800a056:	21b0      	movs	r1, #176	; 0xb0
 800a058:	4b42      	ldr	r3, [pc, #264]	; (800a164 <_dtoa_r+0x394>)
 800a05a:	482e      	ldr	r0, [pc, #184]	; (800a114 <_dtoa_r+0x344>)
 800a05c:	9a06      	ldr	r2, [sp, #24]
 800a05e:	31ff      	adds	r1, #255	; 0xff
 800a060:	e6cb      	b.n	8009dfa <_dtoa_r+0x2a>
 800a062:	2301      	movs	r3, #1
 800a064:	e7dd      	b.n	800a022 <_dtoa_r+0x252>
 800a066:	2300      	movs	r3, #0
 800a068:	940f      	str	r4, [sp, #60]	; 0x3c
 800a06a:	9322      	str	r3, [sp, #136]	; 0x88
 800a06c:	3b01      	subs	r3, #1
 800a06e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a070:	9307      	str	r3, [sp, #28]
 800a072:	2200      	movs	r2, #0
 800a074:	3313      	adds	r3, #19
 800a076:	e7cf      	b.n	800a018 <_dtoa_r+0x248>
 800a078:	2301      	movs	r3, #1
 800a07a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a07c:	3b02      	subs	r3, #2
 800a07e:	e7f6      	b.n	800a06e <_dtoa_r+0x29e>
 800a080:	3101      	adds	r1, #1
 800a082:	0052      	lsls	r2, r2, #1
 800a084:	e7dc      	b.n	800a040 <_dtoa_r+0x270>
 800a086:	9b04      	ldr	r3, [sp, #16]
 800a088:	9a06      	ldr	r2, [sp, #24]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	9b07      	ldr	r3, [sp, #28]
 800a090:	2b0e      	cmp	r3, #14
 800a092:	d900      	bls.n	800a096 <_dtoa_r+0x2c6>
 800a094:	e0e5      	b.n	800a262 <_dtoa_r+0x492>
 800a096:	2c00      	cmp	r4, #0
 800a098:	d100      	bne.n	800a09c <_dtoa_r+0x2cc>
 800a09a:	e0e2      	b.n	800a262 <_dtoa_r+0x492>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	dd64      	ble.n	800a16c <_dtoa_r+0x39c>
 800a0a2:	210f      	movs	r1, #15
 800a0a4:	9a03      	ldr	r2, [sp, #12]
 800a0a6:	4b2b      	ldr	r3, [pc, #172]	; (800a154 <_dtoa_r+0x384>)
 800a0a8:	400a      	ands	r2, r1
 800a0aa:	00d2      	lsls	r2, r2, #3
 800a0ac:	189b      	adds	r3, r3, r2
 800a0ae:	681e      	ldr	r6, [r3, #0]
 800a0b0:	685f      	ldr	r7, [r3, #4]
 800a0b2:	9b03      	ldr	r3, [sp, #12]
 800a0b4:	2402      	movs	r4, #2
 800a0b6:	111d      	asrs	r5, r3, #4
 800a0b8:	05db      	lsls	r3, r3, #23
 800a0ba:	d50a      	bpl.n	800a0d2 <_dtoa_r+0x302>
 800a0bc:	4b2a      	ldr	r3, [pc, #168]	; (800a168 <_dtoa_r+0x398>)
 800a0be:	400d      	ands	r5, r1
 800a0c0:	6a1a      	ldr	r2, [r3, #32]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a0c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0c8:	f7f7 fb28 	bl	800171c <__aeabi_ddiv>
 800a0cc:	9008      	str	r0, [sp, #32]
 800a0ce:	9109      	str	r1, [sp, #36]	; 0x24
 800a0d0:	3401      	adds	r4, #1
 800a0d2:	4b25      	ldr	r3, [pc, #148]	; (800a168 <_dtoa_r+0x398>)
 800a0d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	d108      	bne.n	800a0ec <_dtoa_r+0x31c>
 800a0da:	9808      	ldr	r0, [sp, #32]
 800a0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0de:	0032      	movs	r2, r6
 800a0e0:	003b      	movs	r3, r7
 800a0e2:	f7f7 fb1b 	bl	800171c <__aeabi_ddiv>
 800a0e6:	9008      	str	r0, [sp, #32]
 800a0e8:	9109      	str	r1, [sp, #36]	; 0x24
 800a0ea:	e05a      	b.n	800a1a2 <_dtoa_r+0x3d2>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	421d      	tst	r5, r3
 800a0f0:	d009      	beq.n	800a106 <_dtoa_r+0x336>
 800a0f2:	18e4      	adds	r4, r4, r3
 800a0f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f6:	0030      	movs	r0, r6
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	0039      	movs	r1, r7
 800a0fe:	f7f7 ff07 	bl	8001f10 <__aeabi_dmul>
 800a102:	0006      	movs	r6, r0
 800a104:	000f      	movs	r7, r1
 800a106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a108:	106d      	asrs	r5, r5, #1
 800a10a:	3308      	adds	r3, #8
 800a10c:	e7e2      	b.n	800a0d4 <_dtoa_r+0x304>
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	0800c9d7 	.word	0x0800c9d7
 800a114:	0800c9ee 	.word	0x0800c9ee
 800a118:	7ff00000 	.word	0x7ff00000
 800a11c:	0000270f 	.word	0x0000270f
 800a120:	0800c9d3 	.word	0x0800c9d3
 800a124:	0800c9d6 	.word	0x0800c9d6
 800a128:	0800c999 	.word	0x0800c999
 800a12c:	0800c99a 	.word	0x0800c99a
 800a130:	3ff00000 	.word	0x3ff00000
 800a134:	fffffc01 	.word	0xfffffc01
 800a138:	3ff80000 	.word	0x3ff80000
 800a13c:	636f4361 	.word	0x636f4361
 800a140:	3fd287a7 	.word	0x3fd287a7
 800a144:	8b60c8b3 	.word	0x8b60c8b3
 800a148:	3fc68a28 	.word	0x3fc68a28
 800a14c:	509f79fb 	.word	0x509f79fb
 800a150:	3fd34413 	.word	0x3fd34413
 800a154:	0800cb38 	.word	0x0800cb38
 800a158:	00000432 	.word	0x00000432
 800a15c:	00000412 	.word	0x00000412
 800a160:	fe100000 	.word	0xfe100000
 800a164:	0800ca46 	.word	0x0800ca46
 800a168:	0800cb10 	.word	0x0800cb10
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	2402      	movs	r4, #2
 800a170:	2b00      	cmp	r3, #0
 800a172:	d016      	beq.n	800a1a2 <_dtoa_r+0x3d2>
 800a174:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a176:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a178:	220f      	movs	r2, #15
 800a17a:	425d      	negs	r5, r3
 800a17c:	402a      	ands	r2, r5
 800a17e:	4bdd      	ldr	r3, [pc, #884]	; (800a4f4 <_dtoa_r+0x724>)
 800a180:	00d2      	lsls	r2, r2, #3
 800a182:	189b      	adds	r3, r3, r2
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f7f7 fec2 	bl	8001f10 <__aeabi_dmul>
 800a18c:	2701      	movs	r7, #1
 800a18e:	2300      	movs	r3, #0
 800a190:	9008      	str	r0, [sp, #32]
 800a192:	9109      	str	r1, [sp, #36]	; 0x24
 800a194:	4ed8      	ldr	r6, [pc, #864]	; (800a4f8 <_dtoa_r+0x728>)
 800a196:	112d      	asrs	r5, r5, #4
 800a198:	2d00      	cmp	r5, #0
 800a19a:	d000      	beq.n	800a19e <_dtoa_r+0x3ce>
 800a19c:	e091      	b.n	800a2c2 <_dtoa_r+0x4f2>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1a1      	bne.n	800a0e6 <_dtoa_r+0x316>
 800a1a2:	9e08      	ldr	r6, [sp, #32]
 800a1a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d100      	bne.n	800a1ae <_dtoa_r+0x3de>
 800a1ac:	e094      	b.n	800a2d8 <_dtoa_r+0x508>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	0030      	movs	r0, r6
 800a1b2:	0039      	movs	r1, r7
 800a1b4:	4bd1      	ldr	r3, [pc, #836]	; (800a4fc <_dtoa_r+0x72c>)
 800a1b6:	f7f6 f94f 	bl	8000458 <__aeabi_dcmplt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d100      	bne.n	800a1c0 <_dtoa_r+0x3f0>
 800a1be:	e08b      	b.n	800a2d8 <_dtoa_r+0x508>
 800a1c0:	9b07      	ldr	r3, [sp, #28]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d100      	bne.n	800a1c8 <_dtoa_r+0x3f8>
 800a1c6:	e087      	b.n	800a2d8 <_dtoa_r+0x508>
 800a1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dd45      	ble.n	800a25a <_dtoa_r+0x48a>
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a1d6:	0030      	movs	r0, r6
 800a1d8:	4bc9      	ldr	r3, [pc, #804]	; (800a500 <_dtoa_r+0x730>)
 800a1da:	0039      	movs	r1, r7
 800a1dc:	f7f7 fe98 	bl	8001f10 <__aeabi_dmul>
 800a1e0:	9008      	str	r0, [sp, #32]
 800a1e2:	9109      	str	r1, [sp, #36]	; 0x24
 800a1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e6:	3401      	adds	r4, #1
 800a1e8:	0020      	movs	r0, r4
 800a1ea:	9e08      	ldr	r6, [sp, #32]
 800a1ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1ee:	9312      	str	r3, [sp, #72]	; 0x48
 800a1f0:	f7f8 fd26 	bl	8002c40 <__aeabi_i2d>
 800a1f4:	0032      	movs	r2, r6
 800a1f6:	003b      	movs	r3, r7
 800a1f8:	f7f7 fe8a 	bl	8001f10 <__aeabi_dmul>
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	4bc1      	ldr	r3, [pc, #772]	; (800a504 <_dtoa_r+0x734>)
 800a200:	f7f6 ff2c 	bl	800105c <__aeabi_dadd>
 800a204:	4ac0      	ldr	r2, [pc, #768]	; (800a508 <_dtoa_r+0x738>)
 800a206:	9014      	str	r0, [sp, #80]	; 0x50
 800a208:	9115      	str	r1, [sp, #84]	; 0x54
 800a20a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a20c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a20e:	4694      	mov	ip, r2
 800a210:	9308      	str	r3, [sp, #32]
 800a212:	9409      	str	r4, [sp, #36]	; 0x24
 800a214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a216:	4463      	add	r3, ip
 800a218:	9318      	str	r3, [sp, #96]	; 0x60
 800a21a:	9309      	str	r3, [sp, #36]	; 0x24
 800a21c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d15e      	bne.n	800a2e0 <_dtoa_r+0x510>
 800a222:	2200      	movs	r2, #0
 800a224:	4bb9      	ldr	r3, [pc, #740]	; (800a50c <_dtoa_r+0x73c>)
 800a226:	0030      	movs	r0, r6
 800a228:	0039      	movs	r1, r7
 800a22a:	f7f8 f933 	bl	8002494 <__aeabi_dsub>
 800a22e:	9a08      	ldr	r2, [sp, #32]
 800a230:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a232:	0004      	movs	r4, r0
 800a234:	000d      	movs	r5, r1
 800a236:	f7f6 f923 	bl	8000480 <__aeabi_dcmpgt>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d000      	beq.n	800a240 <_dtoa_r+0x470>
 800a23e:	e2b3      	b.n	800a7a8 <_dtoa_r+0x9d8>
 800a240:	48b3      	ldr	r0, [pc, #716]	; (800a510 <_dtoa_r+0x740>)
 800a242:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a244:	4684      	mov	ip, r0
 800a246:	4461      	add	r1, ip
 800a248:	000b      	movs	r3, r1
 800a24a:	0020      	movs	r0, r4
 800a24c:	0029      	movs	r1, r5
 800a24e:	9a08      	ldr	r2, [sp, #32]
 800a250:	f7f6 f902 	bl	8000458 <__aeabi_dcmplt>
 800a254:	2800      	cmp	r0, #0
 800a256:	d000      	beq.n	800a25a <_dtoa_r+0x48a>
 800a258:	e2a3      	b.n	800a7a2 <_dtoa_r+0x9d2>
 800a25a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a25c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a25e:	9308      	str	r3, [sp, #32]
 800a260:	9409      	str	r4, [sp, #36]	; 0x24
 800a262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a264:	2b00      	cmp	r3, #0
 800a266:	da00      	bge.n	800a26a <_dtoa_r+0x49a>
 800a268:	e179      	b.n	800a55e <_dtoa_r+0x78e>
 800a26a:	9a03      	ldr	r2, [sp, #12]
 800a26c:	2a0e      	cmp	r2, #14
 800a26e:	dd00      	ble.n	800a272 <_dtoa_r+0x4a2>
 800a270:	e175      	b.n	800a55e <_dtoa_r+0x78e>
 800a272:	4ba0      	ldr	r3, [pc, #640]	; (800a4f4 <_dtoa_r+0x724>)
 800a274:	00d2      	lsls	r2, r2, #3
 800a276:	189b      	adds	r3, r3, r2
 800a278:	681e      	ldr	r6, [r3, #0]
 800a27a:	685f      	ldr	r7, [r3, #4]
 800a27c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	db00      	blt.n	800a284 <_dtoa_r+0x4b4>
 800a282:	e0e5      	b.n	800a450 <_dtoa_r+0x680>
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	2b00      	cmp	r3, #0
 800a288:	dd00      	ble.n	800a28c <_dtoa_r+0x4bc>
 800a28a:	e0e1      	b.n	800a450 <_dtoa_r+0x680>
 800a28c:	d000      	beq.n	800a290 <_dtoa_r+0x4c0>
 800a28e:	e288      	b.n	800a7a2 <_dtoa_r+0x9d2>
 800a290:	2200      	movs	r2, #0
 800a292:	0030      	movs	r0, r6
 800a294:	0039      	movs	r1, r7
 800a296:	4b9d      	ldr	r3, [pc, #628]	; (800a50c <_dtoa_r+0x73c>)
 800a298:	f7f7 fe3a 	bl	8001f10 <__aeabi_dmul>
 800a29c:	9a08      	ldr	r2, [sp, #32]
 800a29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a0:	f7f6 f8f8 	bl	8000494 <__aeabi_dcmpge>
 800a2a4:	9e07      	ldr	r6, [sp, #28]
 800a2a6:	0037      	movs	r7, r6
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d000      	beq.n	800a2ae <_dtoa_r+0x4de>
 800a2ac:	e25f      	b.n	800a76e <_dtoa_r+0x99e>
 800a2ae:	9b06      	ldr	r3, [sp, #24]
 800a2b0:	9a06      	ldr	r2, [sp, #24]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	9308      	str	r3, [sp, #32]
 800a2b6:	2331      	movs	r3, #49	; 0x31
 800a2b8:	7013      	strb	r3, [r2, #0]
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	9303      	str	r3, [sp, #12]
 800a2c0:	e25a      	b.n	800a778 <_dtoa_r+0x9a8>
 800a2c2:	423d      	tst	r5, r7
 800a2c4:	d005      	beq.n	800a2d2 <_dtoa_r+0x502>
 800a2c6:	6832      	ldr	r2, [r6, #0]
 800a2c8:	6873      	ldr	r3, [r6, #4]
 800a2ca:	f7f7 fe21 	bl	8001f10 <__aeabi_dmul>
 800a2ce:	003b      	movs	r3, r7
 800a2d0:	3401      	adds	r4, #1
 800a2d2:	106d      	asrs	r5, r5, #1
 800a2d4:	3608      	adds	r6, #8
 800a2d6:	e75f      	b.n	800a198 <_dtoa_r+0x3c8>
 800a2d8:	9b03      	ldr	r3, [sp, #12]
 800a2da:	930e      	str	r3, [sp, #56]	; 0x38
 800a2dc:	9b07      	ldr	r3, [sp, #28]
 800a2de:	e783      	b.n	800a1e8 <_dtoa_r+0x418>
 800a2e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2e2:	4b84      	ldr	r3, [pc, #528]	; (800a4f4 <_dtoa_r+0x724>)
 800a2e4:	3a01      	subs	r2, #1
 800a2e6:	00d2      	lsls	r2, r2, #3
 800a2e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2ea:	189b      	adds	r3, r3, r2
 800a2ec:	9c08      	ldr	r4, [sp, #32]
 800a2ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	d051      	beq.n	800a39c <_dtoa_r+0x5cc>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	4986      	ldr	r1, [pc, #536]	; (800a514 <_dtoa_r+0x744>)
 800a2fc:	f7f7 fa0e 	bl	800171c <__aeabi_ddiv>
 800a300:	0022      	movs	r2, r4
 800a302:	002b      	movs	r3, r5
 800a304:	f7f8 f8c6 	bl	8002494 <__aeabi_dsub>
 800a308:	9a06      	ldr	r2, [sp, #24]
 800a30a:	0004      	movs	r4, r0
 800a30c:	4694      	mov	ip, r2
 800a30e:	000d      	movs	r5, r1
 800a310:	9b06      	ldr	r3, [sp, #24]
 800a312:	9314      	str	r3, [sp, #80]	; 0x50
 800a314:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a316:	4463      	add	r3, ip
 800a318:	9318      	str	r3, [sp, #96]	; 0x60
 800a31a:	0039      	movs	r1, r7
 800a31c:	0030      	movs	r0, r6
 800a31e:	f7f8 fc59 	bl	8002bd4 <__aeabi_d2iz>
 800a322:	9012      	str	r0, [sp, #72]	; 0x48
 800a324:	f7f8 fc8c 	bl	8002c40 <__aeabi_i2d>
 800a328:	0002      	movs	r2, r0
 800a32a:	000b      	movs	r3, r1
 800a32c:	0030      	movs	r0, r6
 800a32e:	0039      	movs	r1, r7
 800a330:	f7f8 f8b0 	bl	8002494 <__aeabi_dsub>
 800a334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a336:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a338:	3301      	adds	r3, #1
 800a33a:	9308      	str	r3, [sp, #32]
 800a33c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a33e:	0006      	movs	r6, r0
 800a340:	3330      	adds	r3, #48	; 0x30
 800a342:	7013      	strb	r3, [r2, #0]
 800a344:	0022      	movs	r2, r4
 800a346:	002b      	movs	r3, r5
 800a348:	000f      	movs	r7, r1
 800a34a:	f7f6 f885 	bl	8000458 <__aeabi_dcmplt>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d174      	bne.n	800a43c <_dtoa_r+0x66c>
 800a352:	0032      	movs	r2, r6
 800a354:	003b      	movs	r3, r7
 800a356:	2000      	movs	r0, #0
 800a358:	4968      	ldr	r1, [pc, #416]	; (800a4fc <_dtoa_r+0x72c>)
 800a35a:	f7f8 f89b 	bl	8002494 <__aeabi_dsub>
 800a35e:	0022      	movs	r2, r4
 800a360:	002b      	movs	r3, r5
 800a362:	f7f6 f879 	bl	8000458 <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	d000      	beq.n	800a36c <_dtoa_r+0x59c>
 800a36a:	e0d7      	b.n	800a51c <_dtoa_r+0x74c>
 800a36c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a36e:	9a08      	ldr	r2, [sp, #32]
 800a370:	4293      	cmp	r3, r2
 800a372:	d100      	bne.n	800a376 <_dtoa_r+0x5a6>
 800a374:	e771      	b.n	800a25a <_dtoa_r+0x48a>
 800a376:	2200      	movs	r2, #0
 800a378:	0020      	movs	r0, r4
 800a37a:	0029      	movs	r1, r5
 800a37c:	4b60      	ldr	r3, [pc, #384]	; (800a500 <_dtoa_r+0x730>)
 800a37e:	f7f7 fdc7 	bl	8001f10 <__aeabi_dmul>
 800a382:	4b5f      	ldr	r3, [pc, #380]	; (800a500 <_dtoa_r+0x730>)
 800a384:	0004      	movs	r4, r0
 800a386:	000d      	movs	r5, r1
 800a388:	0030      	movs	r0, r6
 800a38a:	0039      	movs	r1, r7
 800a38c:	2200      	movs	r2, #0
 800a38e:	f7f7 fdbf 	bl	8001f10 <__aeabi_dmul>
 800a392:	9b08      	ldr	r3, [sp, #32]
 800a394:	0006      	movs	r6, r0
 800a396:	000f      	movs	r7, r1
 800a398:	9314      	str	r3, [sp, #80]	; 0x50
 800a39a:	e7be      	b.n	800a31a <_dtoa_r+0x54a>
 800a39c:	0020      	movs	r0, r4
 800a39e:	0029      	movs	r1, r5
 800a3a0:	f7f7 fdb6 	bl	8001f10 <__aeabi_dmul>
 800a3a4:	9a06      	ldr	r2, [sp, #24]
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	4694      	mov	ip, r2
 800a3aa:	9308      	str	r3, [sp, #32]
 800a3ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3ae:	9014      	str	r0, [sp, #80]	; 0x50
 800a3b0:	9115      	str	r1, [sp, #84]	; 0x54
 800a3b2:	4463      	add	r3, ip
 800a3b4:	9319      	str	r3, [sp, #100]	; 0x64
 800a3b6:	0030      	movs	r0, r6
 800a3b8:	0039      	movs	r1, r7
 800a3ba:	f7f8 fc0b 	bl	8002bd4 <__aeabi_d2iz>
 800a3be:	9018      	str	r0, [sp, #96]	; 0x60
 800a3c0:	f7f8 fc3e 	bl	8002c40 <__aeabi_i2d>
 800a3c4:	0002      	movs	r2, r0
 800a3c6:	000b      	movs	r3, r1
 800a3c8:	0030      	movs	r0, r6
 800a3ca:	0039      	movs	r1, r7
 800a3cc:	f7f8 f862 	bl	8002494 <__aeabi_dsub>
 800a3d0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	3630      	adds	r6, #48	; 0x30
 800a3d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3d8:	701e      	strb	r6, [r3, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	0004      	movs	r4, r0
 800a3de:	000d      	movs	r5, r1
 800a3e0:	9308      	str	r3, [sp, #32]
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d12d      	bne.n	800a442 <_dtoa_r+0x672>
 800a3e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a3e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a3ea:	9a06      	ldr	r2, [sp, #24]
 800a3ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3ee:	4694      	mov	ip, r2
 800a3f0:	4463      	add	r3, ip
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	9308      	str	r3, [sp, #32]
 800a3f6:	4b47      	ldr	r3, [pc, #284]	; (800a514 <_dtoa_r+0x744>)
 800a3f8:	f7f6 fe30 	bl	800105c <__aeabi_dadd>
 800a3fc:	0002      	movs	r2, r0
 800a3fe:	000b      	movs	r3, r1
 800a400:	0020      	movs	r0, r4
 800a402:	0029      	movs	r1, r5
 800a404:	f7f6 f83c 	bl	8000480 <__aeabi_dcmpgt>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d000      	beq.n	800a40e <_dtoa_r+0x63e>
 800a40c:	e086      	b.n	800a51c <_dtoa_r+0x74c>
 800a40e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a412:	2000      	movs	r0, #0
 800a414:	493f      	ldr	r1, [pc, #252]	; (800a514 <_dtoa_r+0x744>)
 800a416:	f7f8 f83d 	bl	8002494 <__aeabi_dsub>
 800a41a:	0002      	movs	r2, r0
 800a41c:	000b      	movs	r3, r1
 800a41e:	0020      	movs	r0, r4
 800a420:	0029      	movs	r1, r5
 800a422:	f7f6 f819 	bl	8000458 <__aeabi_dcmplt>
 800a426:	2800      	cmp	r0, #0
 800a428:	d100      	bne.n	800a42c <_dtoa_r+0x65c>
 800a42a:	e716      	b.n	800a25a <_dtoa_r+0x48a>
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	001a      	movs	r2, r3
 800a430:	3a01      	subs	r2, #1
 800a432:	9208      	str	r2, [sp, #32]
 800a434:	7812      	ldrb	r2, [r2, #0]
 800a436:	2a30      	cmp	r2, #48	; 0x30
 800a438:	d0f8      	beq.n	800a42c <_dtoa_r+0x65c>
 800a43a:	9308      	str	r3, [sp, #32]
 800a43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a43e:	9303      	str	r3, [sp, #12]
 800a440:	e046      	b.n	800a4d0 <_dtoa_r+0x700>
 800a442:	2200      	movs	r2, #0
 800a444:	4b2e      	ldr	r3, [pc, #184]	; (800a500 <_dtoa_r+0x730>)
 800a446:	f7f7 fd63 	bl	8001f10 <__aeabi_dmul>
 800a44a:	0006      	movs	r6, r0
 800a44c:	000f      	movs	r7, r1
 800a44e:	e7b2      	b.n	800a3b6 <_dtoa_r+0x5e6>
 800a450:	9b06      	ldr	r3, [sp, #24]
 800a452:	9a06      	ldr	r2, [sp, #24]
 800a454:	930a      	str	r3, [sp, #40]	; 0x28
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	9c08      	ldr	r4, [sp, #32]
 800a45a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a45c:	3b01      	subs	r3, #1
 800a45e:	189b      	adds	r3, r3, r2
 800a460:	930b      	str	r3, [sp, #44]	; 0x2c
 800a462:	0032      	movs	r2, r6
 800a464:	003b      	movs	r3, r7
 800a466:	0020      	movs	r0, r4
 800a468:	0029      	movs	r1, r5
 800a46a:	f7f7 f957 	bl	800171c <__aeabi_ddiv>
 800a46e:	f7f8 fbb1 	bl	8002bd4 <__aeabi_d2iz>
 800a472:	9007      	str	r0, [sp, #28]
 800a474:	f7f8 fbe4 	bl	8002c40 <__aeabi_i2d>
 800a478:	0032      	movs	r2, r6
 800a47a:	003b      	movs	r3, r7
 800a47c:	f7f7 fd48 	bl	8001f10 <__aeabi_dmul>
 800a480:	0002      	movs	r2, r0
 800a482:	000b      	movs	r3, r1
 800a484:	0020      	movs	r0, r4
 800a486:	0029      	movs	r1, r5
 800a488:	f7f8 f804 	bl	8002494 <__aeabi_dsub>
 800a48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48e:	001a      	movs	r2, r3
 800a490:	3201      	adds	r2, #1
 800a492:	920a      	str	r2, [sp, #40]	; 0x28
 800a494:	9208      	str	r2, [sp, #32]
 800a496:	9a07      	ldr	r2, [sp, #28]
 800a498:	3230      	adds	r2, #48	; 0x30
 800a49a:	701a      	strb	r2, [r3, #0]
 800a49c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d14f      	bne.n	800a542 <_dtoa_r+0x772>
 800a4a2:	0002      	movs	r2, r0
 800a4a4:	000b      	movs	r3, r1
 800a4a6:	f7f6 fdd9 	bl	800105c <__aeabi_dadd>
 800a4aa:	0032      	movs	r2, r6
 800a4ac:	003b      	movs	r3, r7
 800a4ae:	0004      	movs	r4, r0
 800a4b0:	000d      	movs	r5, r1
 800a4b2:	f7f5 ffe5 	bl	8000480 <__aeabi_dcmpgt>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d12e      	bne.n	800a518 <_dtoa_r+0x748>
 800a4ba:	0032      	movs	r2, r6
 800a4bc:	003b      	movs	r3, r7
 800a4be:	0020      	movs	r0, r4
 800a4c0:	0029      	movs	r1, r5
 800a4c2:	f7f5 ffc3 	bl	800044c <__aeabi_dcmpeq>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d002      	beq.n	800a4d0 <_dtoa_r+0x700>
 800a4ca:	9b07      	ldr	r3, [sp, #28]
 800a4cc:	07de      	lsls	r6, r3, #31
 800a4ce:	d423      	bmi.n	800a518 <_dtoa_r+0x748>
 800a4d0:	9905      	ldr	r1, [sp, #20]
 800a4d2:	9804      	ldr	r0, [sp, #16]
 800a4d4:	f000 ff44 	bl	800b360 <_Bfree>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	9a08      	ldr	r2, [sp, #32]
 800a4dc:	7013      	strb	r3, [r2, #0]
 800a4de:	9b03      	ldr	r3, [sp, #12]
 800a4e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d100      	bne.n	800a4ee <_dtoa_r+0x71e>
 800a4ec:	e4ba      	b.n	8009e64 <_dtoa_r+0x94>
 800a4ee:	9a08      	ldr	r2, [sp, #32]
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	e4b7      	b.n	8009e64 <_dtoa_r+0x94>
 800a4f4:	0800cb38 	.word	0x0800cb38
 800a4f8:	0800cb10 	.word	0x0800cb10
 800a4fc:	3ff00000 	.word	0x3ff00000
 800a500:	40240000 	.word	0x40240000
 800a504:	401c0000 	.word	0x401c0000
 800a508:	fcc00000 	.word	0xfcc00000
 800a50c:	40140000 	.word	0x40140000
 800a510:	7cc00000 	.word	0x7cc00000
 800a514:	3fe00000 	.word	0x3fe00000
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	930e      	str	r3, [sp, #56]	; 0x38
 800a51c:	9b08      	ldr	r3, [sp, #32]
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	3b01      	subs	r3, #1
 800a522:	781a      	ldrb	r2, [r3, #0]
 800a524:	2a39      	cmp	r2, #57	; 0x39
 800a526:	d108      	bne.n	800a53a <_dtoa_r+0x76a>
 800a528:	9a06      	ldr	r2, [sp, #24]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d1f7      	bne.n	800a51e <_dtoa_r+0x74e>
 800a52e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a530:	9906      	ldr	r1, [sp, #24]
 800a532:	3201      	adds	r2, #1
 800a534:	920e      	str	r2, [sp, #56]	; 0x38
 800a536:	2230      	movs	r2, #48	; 0x30
 800a538:	700a      	strb	r2, [r1, #0]
 800a53a:	781a      	ldrb	r2, [r3, #0]
 800a53c:	3201      	adds	r2, #1
 800a53e:	701a      	strb	r2, [r3, #0]
 800a540:	e77c      	b.n	800a43c <_dtoa_r+0x66c>
 800a542:	2200      	movs	r2, #0
 800a544:	4ba9      	ldr	r3, [pc, #676]	; (800a7ec <_dtoa_r+0xa1c>)
 800a546:	f7f7 fce3 	bl	8001f10 <__aeabi_dmul>
 800a54a:	2200      	movs	r2, #0
 800a54c:	2300      	movs	r3, #0
 800a54e:	0004      	movs	r4, r0
 800a550:	000d      	movs	r5, r1
 800a552:	f7f5 ff7b 	bl	800044c <__aeabi_dcmpeq>
 800a556:	2800      	cmp	r0, #0
 800a558:	d100      	bne.n	800a55c <_dtoa_r+0x78c>
 800a55a:	e782      	b.n	800a462 <_dtoa_r+0x692>
 800a55c:	e7b8      	b.n	800a4d0 <_dtoa_r+0x700>
 800a55e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a560:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a562:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a564:	2f00      	cmp	r7, #0
 800a566:	d012      	beq.n	800a58e <_dtoa_r+0x7be>
 800a568:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a56a:	2a01      	cmp	r2, #1
 800a56c:	dc6e      	bgt.n	800a64c <_dtoa_r+0x87c>
 800a56e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a570:	2a00      	cmp	r2, #0
 800a572:	d065      	beq.n	800a640 <_dtoa_r+0x870>
 800a574:	4a9e      	ldr	r2, [pc, #632]	; (800a7f0 <_dtoa_r+0xa20>)
 800a576:	189b      	adds	r3, r3, r2
 800a578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a57a:	2101      	movs	r1, #1
 800a57c:	18d2      	adds	r2, r2, r3
 800a57e:	920a      	str	r2, [sp, #40]	; 0x28
 800a580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a582:	9804      	ldr	r0, [sp, #16]
 800a584:	18d3      	adds	r3, r2, r3
 800a586:	930c      	str	r3, [sp, #48]	; 0x30
 800a588:	f000 ffe6 	bl	800b558 <__i2b>
 800a58c:	0007      	movs	r7, r0
 800a58e:	2c00      	cmp	r4, #0
 800a590:	d00e      	beq.n	800a5b0 <_dtoa_r+0x7e0>
 800a592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd0b      	ble.n	800a5b0 <_dtoa_r+0x7e0>
 800a598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a59a:	0023      	movs	r3, r4
 800a59c:	4294      	cmp	r4, r2
 800a59e:	dd00      	ble.n	800a5a2 <_dtoa_r+0x7d2>
 800a5a0:	0013      	movs	r3, r2
 800a5a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5a4:	1ae4      	subs	r4, r4, r3
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	920a      	str	r2, [sp, #40]	; 0x28
 800a5aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a5b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01e      	beq.n	800a5f4 <_dtoa_r+0x824>
 800a5b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d05c      	beq.n	800a676 <_dtoa_r+0x8a6>
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	dd10      	ble.n	800a5e2 <_dtoa_r+0x812>
 800a5c0:	0039      	movs	r1, r7
 800a5c2:	002a      	movs	r2, r5
 800a5c4:	9804      	ldr	r0, [sp, #16]
 800a5c6:	f001 f88f 	bl	800b6e8 <__pow5mult>
 800a5ca:	9a05      	ldr	r2, [sp, #20]
 800a5cc:	0001      	movs	r1, r0
 800a5ce:	0007      	movs	r7, r0
 800a5d0:	9804      	ldr	r0, [sp, #16]
 800a5d2:	f000 ffd9 	bl	800b588 <__multiply>
 800a5d6:	0006      	movs	r6, r0
 800a5d8:	9905      	ldr	r1, [sp, #20]
 800a5da:	9804      	ldr	r0, [sp, #16]
 800a5dc:	f000 fec0 	bl	800b360 <_Bfree>
 800a5e0:	9605      	str	r6, [sp, #20]
 800a5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5e4:	1b5a      	subs	r2, r3, r5
 800a5e6:	42ab      	cmp	r3, r5
 800a5e8:	d004      	beq.n	800a5f4 <_dtoa_r+0x824>
 800a5ea:	9905      	ldr	r1, [sp, #20]
 800a5ec:	9804      	ldr	r0, [sp, #16]
 800a5ee:	f001 f87b 	bl	800b6e8 <__pow5mult>
 800a5f2:	9005      	str	r0, [sp, #20]
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	9804      	ldr	r0, [sp, #16]
 800a5f8:	f000 ffae 	bl	800b558 <__i2b>
 800a5fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5fe:	0006      	movs	r6, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	dd3a      	ble.n	800a67a <_dtoa_r+0x8aa>
 800a604:	001a      	movs	r2, r3
 800a606:	0001      	movs	r1, r0
 800a608:	9804      	ldr	r0, [sp, #16]
 800a60a:	f001 f86d 	bl	800b6e8 <__pow5mult>
 800a60e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a610:	0006      	movs	r6, r0
 800a612:	2500      	movs	r5, #0
 800a614:	2b01      	cmp	r3, #1
 800a616:	dc38      	bgt.n	800a68a <_dtoa_r+0x8ba>
 800a618:	2500      	movs	r5, #0
 800a61a:	9b08      	ldr	r3, [sp, #32]
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	d130      	bne.n	800a682 <_dtoa_r+0x8b2>
 800a620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a622:	031b      	lsls	r3, r3, #12
 800a624:	42ab      	cmp	r3, r5
 800a626:	d12c      	bne.n	800a682 <_dtoa_r+0x8b2>
 800a628:	4b72      	ldr	r3, [pc, #456]	; (800a7f4 <_dtoa_r+0xa24>)
 800a62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a62c:	4213      	tst	r3, r2
 800a62e:	d028      	beq.n	800a682 <_dtoa_r+0x8b2>
 800a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a632:	3501      	adds	r5, #1
 800a634:	3301      	adds	r3, #1
 800a636:	930a      	str	r3, [sp, #40]	; 0x28
 800a638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a63a:	3301      	adds	r3, #1
 800a63c:	930c      	str	r3, [sp, #48]	; 0x30
 800a63e:	e020      	b.n	800a682 <_dtoa_r+0x8b2>
 800a640:	2336      	movs	r3, #54	; 0x36
 800a642:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a644:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a646:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a648:	1a9b      	subs	r3, r3, r2
 800a64a:	e795      	b.n	800a578 <_dtoa_r+0x7a8>
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	1e5d      	subs	r5, r3, #1
 800a650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a652:	42ab      	cmp	r3, r5
 800a654:	db07      	blt.n	800a666 <_dtoa_r+0x896>
 800a656:	1b5d      	subs	r5, r3, r5
 800a658:	9b07      	ldr	r3, [sp, #28]
 800a65a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	da8b      	bge.n	800a578 <_dtoa_r+0x7a8>
 800a660:	1ae4      	subs	r4, r4, r3
 800a662:	2300      	movs	r3, #0
 800a664:	e788      	b.n	800a578 <_dtoa_r+0x7a8>
 800a666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a66a:	1aeb      	subs	r3, r5, r3
 800a66c:	18d3      	adds	r3, r2, r3
 800a66e:	950d      	str	r5, [sp, #52]	; 0x34
 800a670:	9313      	str	r3, [sp, #76]	; 0x4c
 800a672:	2500      	movs	r5, #0
 800a674:	e7f0      	b.n	800a658 <_dtoa_r+0x888>
 800a676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a678:	e7b7      	b.n	800a5ea <_dtoa_r+0x81a>
 800a67a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a67c:	2500      	movs	r5, #0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	ddca      	ble.n	800a618 <_dtoa_r+0x848>
 800a682:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a684:	2001      	movs	r0, #1
 800a686:	2b00      	cmp	r3, #0
 800a688:	d008      	beq.n	800a69c <_dtoa_r+0x8cc>
 800a68a:	6933      	ldr	r3, [r6, #16]
 800a68c:	3303      	adds	r3, #3
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	18f3      	adds	r3, r6, r3
 800a692:	6858      	ldr	r0, [r3, #4]
 800a694:	f000 ff18 	bl	800b4c8 <__hi0bits>
 800a698:	2320      	movs	r3, #32
 800a69a:	1a18      	subs	r0, r3, r0
 800a69c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a69e:	1818      	adds	r0, r3, r0
 800a6a0:	0002      	movs	r2, r0
 800a6a2:	231f      	movs	r3, #31
 800a6a4:	401a      	ands	r2, r3
 800a6a6:	4218      	tst	r0, r3
 800a6a8:	d047      	beq.n	800a73a <_dtoa_r+0x96a>
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	dd3f      	ble.n	800a732 <_dtoa_r+0x962>
 800a6b2:	231c      	movs	r3, #28
 800a6b4:	1a9b      	subs	r3, r3, r2
 800a6b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b8:	18e4      	adds	r4, r4, r3
 800a6ba:	18d2      	adds	r2, r2, r3
 800a6bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c0:	18d3      	adds	r3, r2, r3
 800a6c2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	dd05      	ble.n	800a6d6 <_dtoa_r+0x906>
 800a6ca:	001a      	movs	r2, r3
 800a6cc:	9905      	ldr	r1, [sp, #20]
 800a6ce:	9804      	ldr	r0, [sp, #16]
 800a6d0:	f001 f866 	bl	800b7a0 <__lshift>
 800a6d4:	9005      	str	r0, [sp, #20]
 800a6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dd05      	ble.n	800a6e8 <_dtoa_r+0x918>
 800a6dc:	0031      	movs	r1, r6
 800a6de:	001a      	movs	r2, r3
 800a6e0:	9804      	ldr	r0, [sp, #16]
 800a6e2:	f001 f85d 	bl	800b7a0 <__lshift>
 800a6e6:	0006      	movs	r6, r0
 800a6e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d027      	beq.n	800a73e <_dtoa_r+0x96e>
 800a6ee:	0031      	movs	r1, r6
 800a6f0:	9805      	ldr	r0, [sp, #20]
 800a6f2:	f001 f8c3 	bl	800b87c <__mcmp>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	da21      	bge.n	800a73e <_dtoa_r+0x96e>
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	220a      	movs	r2, #10
 800a6fe:	3b01      	subs	r3, #1
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	9905      	ldr	r1, [sp, #20]
 800a704:	2300      	movs	r3, #0
 800a706:	9804      	ldr	r0, [sp, #16]
 800a708:	f000 fe4e 	bl	800b3a8 <__multadd>
 800a70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a70e:	9005      	str	r0, [sp, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d100      	bne.n	800a716 <_dtoa_r+0x946>
 800a714:	e15d      	b.n	800a9d2 <_dtoa_r+0xc02>
 800a716:	2300      	movs	r3, #0
 800a718:	0039      	movs	r1, r7
 800a71a:	220a      	movs	r2, #10
 800a71c:	9804      	ldr	r0, [sp, #16]
 800a71e:	f000 fe43 	bl	800b3a8 <__multadd>
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	0007      	movs	r7, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	dc49      	bgt.n	800a7be <_dtoa_r+0x9ee>
 800a72a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	dc0e      	bgt.n	800a74e <_dtoa_r+0x97e>
 800a730:	e045      	b.n	800a7be <_dtoa_r+0x9ee>
 800a732:	2b04      	cmp	r3, #4
 800a734:	d0c6      	beq.n	800a6c4 <_dtoa_r+0x8f4>
 800a736:	331c      	adds	r3, #28
 800a738:	e7bd      	b.n	800a6b6 <_dtoa_r+0x8e6>
 800a73a:	0013      	movs	r3, r2
 800a73c:	e7fb      	b.n	800a736 <_dtoa_r+0x966>
 800a73e:	9b07      	ldr	r3, [sp, #28]
 800a740:	2b00      	cmp	r3, #0
 800a742:	dc36      	bgt.n	800a7b2 <_dtoa_r+0x9e2>
 800a744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a746:	2b02      	cmp	r3, #2
 800a748:	dd33      	ble.n	800a7b2 <_dtoa_r+0x9e2>
 800a74a:	9b07      	ldr	r3, [sp, #28]
 800a74c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10c      	bne.n	800a76e <_dtoa_r+0x99e>
 800a754:	0031      	movs	r1, r6
 800a756:	2205      	movs	r2, #5
 800a758:	9804      	ldr	r0, [sp, #16]
 800a75a:	f000 fe25 	bl	800b3a8 <__multadd>
 800a75e:	0006      	movs	r6, r0
 800a760:	0001      	movs	r1, r0
 800a762:	9805      	ldr	r0, [sp, #20]
 800a764:	f001 f88a 	bl	800b87c <__mcmp>
 800a768:	2800      	cmp	r0, #0
 800a76a:	dd00      	ble.n	800a76e <_dtoa_r+0x99e>
 800a76c:	e59f      	b.n	800a2ae <_dtoa_r+0x4de>
 800a76e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a770:	43db      	mvns	r3, r3
 800a772:	9303      	str	r3, [sp, #12]
 800a774:	9b06      	ldr	r3, [sp, #24]
 800a776:	9308      	str	r3, [sp, #32]
 800a778:	2500      	movs	r5, #0
 800a77a:	0031      	movs	r1, r6
 800a77c:	9804      	ldr	r0, [sp, #16]
 800a77e:	f000 fdef 	bl	800b360 <_Bfree>
 800a782:	2f00      	cmp	r7, #0
 800a784:	d100      	bne.n	800a788 <_dtoa_r+0x9b8>
 800a786:	e6a3      	b.n	800a4d0 <_dtoa_r+0x700>
 800a788:	2d00      	cmp	r5, #0
 800a78a:	d005      	beq.n	800a798 <_dtoa_r+0x9c8>
 800a78c:	42bd      	cmp	r5, r7
 800a78e:	d003      	beq.n	800a798 <_dtoa_r+0x9c8>
 800a790:	0029      	movs	r1, r5
 800a792:	9804      	ldr	r0, [sp, #16]
 800a794:	f000 fde4 	bl	800b360 <_Bfree>
 800a798:	0039      	movs	r1, r7
 800a79a:	9804      	ldr	r0, [sp, #16]
 800a79c:	f000 fde0 	bl	800b360 <_Bfree>
 800a7a0:	e696      	b.n	800a4d0 <_dtoa_r+0x700>
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	0037      	movs	r7, r6
 800a7a6:	e7e2      	b.n	800a76e <_dtoa_r+0x99e>
 800a7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7aa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a7ac:	9303      	str	r3, [sp, #12]
 800a7ae:	0037      	movs	r7, r6
 800a7b0:	e57d      	b.n	800a2ae <_dtoa_r+0x4de>
 800a7b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d100      	bne.n	800a7ba <_dtoa_r+0x9ea>
 800a7b8:	e0c3      	b.n	800a942 <_dtoa_r+0xb72>
 800a7ba:	9b07      	ldr	r3, [sp, #28]
 800a7bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7be:	2c00      	cmp	r4, #0
 800a7c0:	dd05      	ble.n	800a7ce <_dtoa_r+0x9fe>
 800a7c2:	0039      	movs	r1, r7
 800a7c4:	0022      	movs	r2, r4
 800a7c6:	9804      	ldr	r0, [sp, #16]
 800a7c8:	f000 ffea 	bl	800b7a0 <__lshift>
 800a7cc:	0007      	movs	r7, r0
 800a7ce:	0038      	movs	r0, r7
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	d024      	beq.n	800a81e <_dtoa_r+0xa4e>
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	9804      	ldr	r0, [sp, #16]
 800a7d8:	f000 fd7e 	bl	800b2d8 <_Balloc>
 800a7dc:	1e04      	subs	r4, r0, #0
 800a7de:	d111      	bne.n	800a804 <_dtoa_r+0xa34>
 800a7e0:	0022      	movs	r2, r4
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <_dtoa_r+0xa28>)
 800a7e4:	4805      	ldr	r0, [pc, #20]	; (800a7fc <_dtoa_r+0xa2c>)
 800a7e6:	4906      	ldr	r1, [pc, #24]	; (800a800 <_dtoa_r+0xa30>)
 800a7e8:	f7ff fb07 	bl	8009dfa <_dtoa_r+0x2a>
 800a7ec:	40240000 	.word	0x40240000
 800a7f0:	00000433 	.word	0x00000433
 800a7f4:	7ff00000 	.word	0x7ff00000
 800a7f8:	0800ca46 	.word	0x0800ca46
 800a7fc:	0800c9ee 	.word	0x0800c9ee
 800a800:	000002ef 	.word	0x000002ef
 800a804:	0039      	movs	r1, r7
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	310c      	adds	r1, #12
 800a80a:	3202      	adds	r2, #2
 800a80c:	0092      	lsls	r2, r2, #2
 800a80e:	300c      	adds	r0, #12
 800a810:	f7ff fa3a 	bl	8009c88 <memcpy>
 800a814:	2201      	movs	r2, #1
 800a816:	0021      	movs	r1, r4
 800a818:	9804      	ldr	r0, [sp, #16]
 800a81a:	f000 ffc1 	bl	800b7a0 <__lshift>
 800a81e:	9b06      	ldr	r3, [sp, #24]
 800a820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	3b01      	subs	r3, #1
 800a826:	189b      	adds	r3, r3, r2
 800a828:	2201      	movs	r2, #1
 800a82a:	003d      	movs	r5, r7
 800a82c:	0007      	movs	r7, r0
 800a82e:	930e      	str	r3, [sp, #56]	; 0x38
 800a830:	9b08      	ldr	r3, [sp, #32]
 800a832:	4013      	ands	r3, r2
 800a834:	930d      	str	r3, [sp, #52]	; 0x34
 800a836:	0031      	movs	r1, r6
 800a838:	9805      	ldr	r0, [sp, #20]
 800a83a:	f7ff fa39 	bl	8009cb0 <quorem>
 800a83e:	0029      	movs	r1, r5
 800a840:	0004      	movs	r4, r0
 800a842:	900b      	str	r0, [sp, #44]	; 0x2c
 800a844:	9805      	ldr	r0, [sp, #20]
 800a846:	f001 f819 	bl	800b87c <__mcmp>
 800a84a:	003a      	movs	r2, r7
 800a84c:	900c      	str	r0, [sp, #48]	; 0x30
 800a84e:	0031      	movs	r1, r6
 800a850:	9804      	ldr	r0, [sp, #16]
 800a852:	f001 f82f 	bl	800b8b4 <__mdiff>
 800a856:	2201      	movs	r2, #1
 800a858:	68c3      	ldr	r3, [r0, #12]
 800a85a:	3430      	adds	r4, #48	; 0x30
 800a85c:	9008      	str	r0, [sp, #32]
 800a85e:	920a      	str	r2, [sp, #40]	; 0x28
 800a860:	2b00      	cmp	r3, #0
 800a862:	d104      	bne.n	800a86e <_dtoa_r+0xa9e>
 800a864:	0001      	movs	r1, r0
 800a866:	9805      	ldr	r0, [sp, #20]
 800a868:	f001 f808 	bl	800b87c <__mcmp>
 800a86c:	900a      	str	r0, [sp, #40]	; 0x28
 800a86e:	9908      	ldr	r1, [sp, #32]
 800a870:	9804      	ldr	r0, [sp, #16]
 800a872:	f000 fd75 	bl	800b360 <_Bfree>
 800a876:	9b07      	ldr	r3, [sp, #28]
 800a878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a87a:	3301      	adds	r3, #1
 800a87c:	9308      	str	r3, [sp, #32]
 800a87e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a880:	4313      	orrs	r3, r2
 800a882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a884:	4313      	orrs	r3, r2
 800a886:	d109      	bne.n	800a89c <_dtoa_r+0xacc>
 800a888:	2c39      	cmp	r4, #57	; 0x39
 800a88a:	d022      	beq.n	800a8d2 <_dtoa_r+0xb02>
 800a88c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dd01      	ble.n	800a896 <_dtoa_r+0xac6>
 800a892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a894:	3431      	adds	r4, #49	; 0x31
 800a896:	9b07      	ldr	r3, [sp, #28]
 800a898:	701c      	strb	r4, [r3, #0]
 800a89a:	e76e      	b.n	800a77a <_dtoa_r+0x9aa>
 800a89c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	db04      	blt.n	800a8ac <_dtoa_r+0xadc>
 800a8a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	d11e      	bne.n	800a8ea <_dtoa_r+0xb1a>
 800a8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	ddf1      	ble.n	800a896 <_dtoa_r+0xac6>
 800a8b2:	9905      	ldr	r1, [sp, #20]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	9804      	ldr	r0, [sp, #16]
 800a8b8:	f000 ff72 	bl	800b7a0 <__lshift>
 800a8bc:	0031      	movs	r1, r6
 800a8be:	9005      	str	r0, [sp, #20]
 800a8c0:	f000 ffdc 	bl	800b87c <__mcmp>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	dc02      	bgt.n	800a8ce <_dtoa_r+0xafe>
 800a8c8:	d1e5      	bne.n	800a896 <_dtoa_r+0xac6>
 800a8ca:	07e3      	lsls	r3, r4, #31
 800a8cc:	d5e3      	bpl.n	800a896 <_dtoa_r+0xac6>
 800a8ce:	2c39      	cmp	r4, #57	; 0x39
 800a8d0:	d1df      	bne.n	800a892 <_dtoa_r+0xac2>
 800a8d2:	2339      	movs	r3, #57	; 0x39
 800a8d4:	9a07      	ldr	r2, [sp, #28]
 800a8d6:	7013      	strb	r3, [r2, #0]
 800a8d8:	9b08      	ldr	r3, [sp, #32]
 800a8da:	9308      	str	r3, [sp, #32]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	781a      	ldrb	r2, [r3, #0]
 800a8e0:	2a39      	cmp	r2, #57	; 0x39
 800a8e2:	d063      	beq.n	800a9ac <_dtoa_r+0xbdc>
 800a8e4:	3201      	adds	r2, #1
 800a8e6:	701a      	strb	r2, [r3, #0]
 800a8e8:	e747      	b.n	800a77a <_dtoa_r+0x9aa>
 800a8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dd03      	ble.n	800a8f8 <_dtoa_r+0xb28>
 800a8f0:	2c39      	cmp	r4, #57	; 0x39
 800a8f2:	d0ee      	beq.n	800a8d2 <_dtoa_r+0xb02>
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	e7ce      	b.n	800a896 <_dtoa_r+0xac6>
 800a8f8:	9b07      	ldr	r3, [sp, #28]
 800a8fa:	9a07      	ldr	r2, [sp, #28]
 800a8fc:	701c      	strb	r4, [r3, #0]
 800a8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a900:	4293      	cmp	r3, r2
 800a902:	d03e      	beq.n	800a982 <_dtoa_r+0xbb2>
 800a904:	2300      	movs	r3, #0
 800a906:	220a      	movs	r2, #10
 800a908:	9905      	ldr	r1, [sp, #20]
 800a90a:	9804      	ldr	r0, [sp, #16]
 800a90c:	f000 fd4c 	bl	800b3a8 <__multadd>
 800a910:	2300      	movs	r3, #0
 800a912:	9005      	str	r0, [sp, #20]
 800a914:	220a      	movs	r2, #10
 800a916:	0029      	movs	r1, r5
 800a918:	9804      	ldr	r0, [sp, #16]
 800a91a:	42bd      	cmp	r5, r7
 800a91c:	d106      	bne.n	800a92c <_dtoa_r+0xb5c>
 800a91e:	f000 fd43 	bl	800b3a8 <__multadd>
 800a922:	0005      	movs	r5, r0
 800a924:	0007      	movs	r7, r0
 800a926:	9b08      	ldr	r3, [sp, #32]
 800a928:	9307      	str	r3, [sp, #28]
 800a92a:	e784      	b.n	800a836 <_dtoa_r+0xa66>
 800a92c:	f000 fd3c 	bl	800b3a8 <__multadd>
 800a930:	0039      	movs	r1, r7
 800a932:	0005      	movs	r5, r0
 800a934:	2300      	movs	r3, #0
 800a936:	220a      	movs	r2, #10
 800a938:	9804      	ldr	r0, [sp, #16]
 800a93a:	f000 fd35 	bl	800b3a8 <__multadd>
 800a93e:	0007      	movs	r7, r0
 800a940:	e7f1      	b.n	800a926 <_dtoa_r+0xb56>
 800a942:	9b07      	ldr	r3, [sp, #28]
 800a944:	930b      	str	r3, [sp, #44]	; 0x2c
 800a946:	2500      	movs	r5, #0
 800a948:	0031      	movs	r1, r6
 800a94a:	9805      	ldr	r0, [sp, #20]
 800a94c:	f7ff f9b0 	bl	8009cb0 <quorem>
 800a950:	9b06      	ldr	r3, [sp, #24]
 800a952:	3030      	adds	r0, #48	; 0x30
 800a954:	5558      	strb	r0, [r3, r5]
 800a956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a958:	3501      	adds	r5, #1
 800a95a:	0004      	movs	r4, r0
 800a95c:	42ab      	cmp	r3, r5
 800a95e:	dd07      	ble.n	800a970 <_dtoa_r+0xba0>
 800a960:	2300      	movs	r3, #0
 800a962:	220a      	movs	r2, #10
 800a964:	9905      	ldr	r1, [sp, #20]
 800a966:	9804      	ldr	r0, [sp, #16]
 800a968:	f000 fd1e 	bl	800b3a8 <__multadd>
 800a96c:	9005      	str	r0, [sp, #20]
 800a96e:	e7eb      	b.n	800a948 <_dtoa_r+0xb78>
 800a970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a972:	2301      	movs	r3, #1
 800a974:	2a00      	cmp	r2, #0
 800a976:	dd00      	ble.n	800a97a <_dtoa_r+0xbaa>
 800a978:	0013      	movs	r3, r2
 800a97a:	2500      	movs	r5, #0
 800a97c:	9a06      	ldr	r2, [sp, #24]
 800a97e:	18d3      	adds	r3, r2, r3
 800a980:	9308      	str	r3, [sp, #32]
 800a982:	9905      	ldr	r1, [sp, #20]
 800a984:	2201      	movs	r2, #1
 800a986:	9804      	ldr	r0, [sp, #16]
 800a988:	f000 ff0a 	bl	800b7a0 <__lshift>
 800a98c:	0031      	movs	r1, r6
 800a98e:	9005      	str	r0, [sp, #20]
 800a990:	f000 ff74 	bl	800b87c <__mcmp>
 800a994:	2800      	cmp	r0, #0
 800a996:	dc9f      	bgt.n	800a8d8 <_dtoa_r+0xb08>
 800a998:	d101      	bne.n	800a99e <_dtoa_r+0xbce>
 800a99a:	07e4      	lsls	r4, r4, #31
 800a99c:	d49c      	bmi.n	800a8d8 <_dtoa_r+0xb08>
 800a99e:	9b08      	ldr	r3, [sp, #32]
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	781a      	ldrb	r2, [r3, #0]
 800a9a6:	2a30      	cmp	r2, #48	; 0x30
 800a9a8:	d0fa      	beq.n	800a9a0 <_dtoa_r+0xbd0>
 800a9aa:	e6e6      	b.n	800a77a <_dtoa_r+0x9aa>
 800a9ac:	9a06      	ldr	r2, [sp, #24]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d193      	bne.n	800a8da <_dtoa_r+0xb0a>
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	9303      	str	r3, [sp, #12]
 800a9b8:	2331      	movs	r3, #49	; 0x31
 800a9ba:	7013      	strb	r3, [r2, #0]
 800a9bc:	e6dd      	b.n	800a77a <_dtoa_r+0x9aa>
 800a9be:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <_dtoa_r+0xc14>)
 800a9c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a9c2:	9306      	str	r3, [sp, #24]
 800a9c4:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <_dtoa_r+0xc18>)
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	d001      	beq.n	800a9ce <_dtoa_r+0xbfe>
 800a9ca:	f7ff fa49 	bl	8009e60 <_dtoa_r+0x90>
 800a9ce:	f7ff fa49 	bl	8009e64 <_dtoa_r+0x94>
 800a9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dcb6      	bgt.n	800a946 <_dtoa_r+0xb76>
 800a9d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	dd00      	ble.n	800a9e0 <_dtoa_r+0xc10>
 800a9de:	e6b6      	b.n	800a74e <_dtoa_r+0x97e>
 800a9e0:	e7b1      	b.n	800a946 <_dtoa_r+0xb76>
 800a9e2:	46c0      	nop			; (mov r8, r8)
 800a9e4:	0800c9ca 	.word	0x0800c9ca
 800a9e8:	0800c9d2 	.word	0x0800c9d2

0800a9ec <_free_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	0005      	movs	r5, r0
 800a9f0:	2900      	cmp	r1, #0
 800a9f2:	d010      	beq.n	800aa16 <_free_r+0x2a>
 800a9f4:	1f0c      	subs	r4, r1, #4
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da00      	bge.n	800a9fe <_free_r+0x12>
 800a9fc:	18e4      	adds	r4, r4, r3
 800a9fe:	0028      	movs	r0, r5
 800aa00:	f000 fc5a 	bl	800b2b8 <__malloc_lock>
 800aa04:	4a1d      	ldr	r2, [pc, #116]	; (800aa7c <_free_r+0x90>)
 800aa06:	6813      	ldr	r3, [r2, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d105      	bne.n	800aa18 <_free_r+0x2c>
 800aa0c:	6063      	str	r3, [r4, #4]
 800aa0e:	6014      	str	r4, [r2, #0]
 800aa10:	0028      	movs	r0, r5
 800aa12:	f000 fc59 	bl	800b2c8 <__malloc_unlock>
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	d908      	bls.n	800aa2e <_free_r+0x42>
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	1821      	adds	r1, r4, r0
 800aa20:	428b      	cmp	r3, r1
 800aa22:	d1f3      	bne.n	800aa0c <_free_r+0x20>
 800aa24:	6819      	ldr	r1, [r3, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	1809      	adds	r1, r1, r0
 800aa2a:	6021      	str	r1, [r4, #0]
 800aa2c:	e7ee      	b.n	800aa0c <_free_r+0x20>
 800aa2e:	001a      	movs	r2, r3
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <_free_r+0x4e>
 800aa36:	42a3      	cmp	r3, r4
 800aa38:	d9f9      	bls.n	800aa2e <_free_r+0x42>
 800aa3a:	6811      	ldr	r1, [r2, #0]
 800aa3c:	1850      	adds	r0, r2, r1
 800aa3e:	42a0      	cmp	r0, r4
 800aa40:	d10b      	bne.n	800aa5a <_free_r+0x6e>
 800aa42:	6820      	ldr	r0, [r4, #0]
 800aa44:	1809      	adds	r1, r1, r0
 800aa46:	1850      	adds	r0, r2, r1
 800aa48:	6011      	str	r1, [r2, #0]
 800aa4a:	4283      	cmp	r3, r0
 800aa4c:	d1e0      	bne.n	800aa10 <_free_r+0x24>
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	1841      	adds	r1, r0, r1
 800aa54:	6011      	str	r1, [r2, #0]
 800aa56:	6053      	str	r3, [r2, #4]
 800aa58:	e7da      	b.n	800aa10 <_free_r+0x24>
 800aa5a:	42a0      	cmp	r0, r4
 800aa5c:	d902      	bls.n	800aa64 <_free_r+0x78>
 800aa5e:	230c      	movs	r3, #12
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	e7d5      	b.n	800aa10 <_free_r+0x24>
 800aa64:	6820      	ldr	r0, [r4, #0]
 800aa66:	1821      	adds	r1, r4, r0
 800aa68:	428b      	cmp	r3, r1
 800aa6a:	d103      	bne.n	800aa74 <_free_r+0x88>
 800aa6c:	6819      	ldr	r1, [r3, #0]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	1809      	adds	r1, r1, r0
 800aa72:	6021      	str	r1, [r4, #0]
 800aa74:	6063      	str	r3, [r4, #4]
 800aa76:	6054      	str	r4, [r2, #4]
 800aa78:	e7ca      	b.n	800aa10 <_free_r+0x24>
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	20000734 	.word	0x20000734

0800aa80 <rshift>:
 800aa80:	0002      	movs	r2, r0
 800aa82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa84:	6904      	ldr	r4, [r0, #16]
 800aa86:	114b      	asrs	r3, r1, #5
 800aa88:	b085      	sub	sp, #20
 800aa8a:	3214      	adds	r2, #20
 800aa8c:	9302      	str	r3, [sp, #8]
 800aa8e:	114d      	asrs	r5, r1, #5
 800aa90:	0013      	movs	r3, r2
 800aa92:	42ac      	cmp	r4, r5
 800aa94:	dd32      	ble.n	800aafc <rshift+0x7c>
 800aa96:	261f      	movs	r6, #31
 800aa98:	000f      	movs	r7, r1
 800aa9a:	114b      	asrs	r3, r1, #5
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	00a5      	lsls	r5, r4, #2
 800aaa0:	18d3      	adds	r3, r2, r3
 800aaa2:	4037      	ands	r7, r6
 800aaa4:	1955      	adds	r5, r2, r5
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	9701      	str	r7, [sp, #4]
 800aaaa:	4231      	tst	r1, r6
 800aaac:	d10d      	bne.n	800aaca <rshift+0x4a>
 800aaae:	0016      	movs	r6, r2
 800aab0:	0019      	movs	r1, r3
 800aab2:	428d      	cmp	r5, r1
 800aab4:	d836      	bhi.n	800ab24 <rshift+0xa4>
 800aab6:	9900      	ldr	r1, [sp, #0]
 800aab8:	2300      	movs	r3, #0
 800aaba:	3903      	subs	r1, #3
 800aabc:	428d      	cmp	r5, r1
 800aabe:	d302      	bcc.n	800aac6 <rshift+0x46>
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	1ae4      	subs	r4, r4, r3
 800aac4:	00a3      	lsls	r3, r4, #2
 800aac6:	18d3      	adds	r3, r2, r3
 800aac8:	e018      	b.n	800aafc <rshift+0x7c>
 800aaca:	2120      	movs	r1, #32
 800aacc:	9e01      	ldr	r6, [sp, #4]
 800aace:	9f01      	ldr	r7, [sp, #4]
 800aad0:	1b89      	subs	r1, r1, r6
 800aad2:	9e00      	ldr	r6, [sp, #0]
 800aad4:	9103      	str	r1, [sp, #12]
 800aad6:	ce02      	ldmia	r6!, {r1}
 800aad8:	4694      	mov	ip, r2
 800aada:	40f9      	lsrs	r1, r7
 800aadc:	42b5      	cmp	r5, r6
 800aade:	d816      	bhi.n	800ab0e <rshift+0x8e>
 800aae0:	9e00      	ldr	r6, [sp, #0]
 800aae2:	2300      	movs	r3, #0
 800aae4:	3601      	adds	r6, #1
 800aae6:	42b5      	cmp	r5, r6
 800aae8:	d303      	bcc.n	800aaf2 <rshift+0x72>
 800aaea:	9b02      	ldr	r3, [sp, #8]
 800aaec:	1ae3      	subs	r3, r4, r3
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	3b04      	subs	r3, #4
 800aaf2:	18d3      	adds	r3, r2, r3
 800aaf4:	6019      	str	r1, [r3, #0]
 800aaf6:	2900      	cmp	r1, #0
 800aaf8:	d000      	beq.n	800aafc <rshift+0x7c>
 800aafa:	3304      	adds	r3, #4
 800aafc:	1a99      	subs	r1, r3, r2
 800aafe:	1089      	asrs	r1, r1, #2
 800ab00:	6101      	str	r1, [r0, #16]
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d101      	bne.n	800ab0a <rshift+0x8a>
 800ab06:	2300      	movs	r3, #0
 800ab08:	6143      	str	r3, [r0, #20]
 800ab0a:	b005      	add	sp, #20
 800ab0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab0e:	6837      	ldr	r7, [r6, #0]
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	409f      	lsls	r7, r3
 800ab14:	430f      	orrs	r7, r1
 800ab16:	4661      	mov	r1, ip
 800ab18:	c180      	stmia	r1!, {r7}
 800ab1a:	468c      	mov	ip, r1
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	ce02      	ldmia	r6!, {r1}
 800ab20:	40d9      	lsrs	r1, r3
 800ab22:	e7db      	b.n	800aadc <rshift+0x5c>
 800ab24:	c980      	ldmia	r1!, {r7}
 800ab26:	c680      	stmia	r6!, {r7}
 800ab28:	e7c3      	b.n	800aab2 <rshift+0x32>

0800ab2a <__hexdig_fun>:
 800ab2a:	0002      	movs	r2, r0
 800ab2c:	3a30      	subs	r2, #48	; 0x30
 800ab2e:	0003      	movs	r3, r0
 800ab30:	2a09      	cmp	r2, #9
 800ab32:	d802      	bhi.n	800ab3a <__hexdig_fun+0x10>
 800ab34:	3b20      	subs	r3, #32
 800ab36:	b2d8      	uxtb	r0, r3
 800ab38:	4770      	bx	lr
 800ab3a:	0002      	movs	r2, r0
 800ab3c:	3a61      	subs	r2, #97	; 0x61
 800ab3e:	2a05      	cmp	r2, #5
 800ab40:	d801      	bhi.n	800ab46 <__hexdig_fun+0x1c>
 800ab42:	3b47      	subs	r3, #71	; 0x47
 800ab44:	e7f7      	b.n	800ab36 <__hexdig_fun+0xc>
 800ab46:	001a      	movs	r2, r3
 800ab48:	3a41      	subs	r2, #65	; 0x41
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	2a05      	cmp	r2, #5
 800ab4e:	d8f3      	bhi.n	800ab38 <__hexdig_fun+0xe>
 800ab50:	3b27      	subs	r3, #39	; 0x27
 800ab52:	e7f0      	b.n	800ab36 <__hexdig_fun+0xc>

0800ab54 <__gethex>:
 800ab54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab56:	b089      	sub	sp, #36	; 0x24
 800ab58:	9307      	str	r3, [sp, #28]
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	9201      	str	r2, [sp, #4]
 800ab5e:	680a      	ldr	r2, [r1, #0]
 800ab60:	425b      	negs	r3, r3
 800ab62:	9003      	str	r0, [sp, #12]
 800ab64:	9106      	str	r1, [sp, #24]
 800ab66:	1c96      	adds	r6, r2, #2
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	199a      	adds	r2, r3, r6
 800ab6c:	9600      	str	r6, [sp, #0]
 800ab6e:	9205      	str	r2, [sp, #20]
 800ab70:	9a00      	ldr	r2, [sp, #0]
 800ab72:	3601      	adds	r6, #1
 800ab74:	7810      	ldrb	r0, [r2, #0]
 800ab76:	2830      	cmp	r0, #48	; 0x30
 800ab78:	d0f7      	beq.n	800ab6a <__gethex+0x16>
 800ab7a:	f7ff ffd6 	bl	800ab2a <__hexdig_fun>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	001d      	movs	r5, r3
 800ab82:	9302      	str	r3, [sp, #8]
 800ab84:	4298      	cmp	r0, r3
 800ab86:	d11d      	bne.n	800abc4 <__gethex+0x70>
 800ab88:	2201      	movs	r2, #1
 800ab8a:	49a6      	ldr	r1, [pc, #664]	; (800ae24 <__gethex+0x2d0>)
 800ab8c:	9800      	ldr	r0, [sp, #0]
 800ab8e:	f7fe ffdf 	bl	8009b50 <strncmp>
 800ab92:	0007      	movs	r7, r0
 800ab94:	42a8      	cmp	r0, r5
 800ab96:	d169      	bne.n	800ac6c <__gethex+0x118>
 800ab98:	9b00      	ldr	r3, [sp, #0]
 800ab9a:	0034      	movs	r4, r6
 800ab9c:	7858      	ldrb	r0, [r3, #1]
 800ab9e:	f7ff ffc4 	bl	800ab2a <__hexdig_fun>
 800aba2:	2301      	movs	r3, #1
 800aba4:	9302      	str	r3, [sp, #8]
 800aba6:	42a8      	cmp	r0, r5
 800aba8:	d02f      	beq.n	800ac0a <__gethex+0xb6>
 800abaa:	9600      	str	r6, [sp, #0]
 800abac:	9b00      	ldr	r3, [sp, #0]
 800abae:	7818      	ldrb	r0, [r3, #0]
 800abb0:	2830      	cmp	r0, #48	; 0x30
 800abb2:	d009      	beq.n	800abc8 <__gethex+0x74>
 800abb4:	f7ff ffb9 	bl	800ab2a <__hexdig_fun>
 800abb8:	4242      	negs	r2, r0
 800abba:	4142      	adcs	r2, r0
 800abbc:	2301      	movs	r3, #1
 800abbe:	0035      	movs	r5, r6
 800abc0:	9202      	str	r2, [sp, #8]
 800abc2:	9305      	str	r3, [sp, #20]
 800abc4:	9c00      	ldr	r4, [sp, #0]
 800abc6:	e004      	b.n	800abd2 <__gethex+0x7e>
 800abc8:	9b00      	ldr	r3, [sp, #0]
 800abca:	3301      	adds	r3, #1
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	e7ed      	b.n	800abac <__gethex+0x58>
 800abd0:	3401      	adds	r4, #1
 800abd2:	7820      	ldrb	r0, [r4, #0]
 800abd4:	f7ff ffa9 	bl	800ab2a <__hexdig_fun>
 800abd8:	1e07      	subs	r7, r0, #0
 800abda:	d1f9      	bne.n	800abd0 <__gethex+0x7c>
 800abdc:	2201      	movs	r2, #1
 800abde:	0020      	movs	r0, r4
 800abe0:	4990      	ldr	r1, [pc, #576]	; (800ae24 <__gethex+0x2d0>)
 800abe2:	f7fe ffb5 	bl	8009b50 <strncmp>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d10d      	bne.n	800ac06 <__gethex+0xb2>
 800abea:	2d00      	cmp	r5, #0
 800abec:	d106      	bne.n	800abfc <__gethex+0xa8>
 800abee:	3401      	adds	r4, #1
 800abf0:	0025      	movs	r5, r4
 800abf2:	7820      	ldrb	r0, [r4, #0]
 800abf4:	f7ff ff99 	bl	800ab2a <__hexdig_fun>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d102      	bne.n	800ac02 <__gethex+0xae>
 800abfc:	1b2d      	subs	r5, r5, r4
 800abfe:	00af      	lsls	r7, r5, #2
 800ac00:	e003      	b.n	800ac0a <__gethex+0xb6>
 800ac02:	3401      	adds	r4, #1
 800ac04:	e7f5      	b.n	800abf2 <__gethex+0x9e>
 800ac06:	2d00      	cmp	r5, #0
 800ac08:	d1f8      	bne.n	800abfc <__gethex+0xa8>
 800ac0a:	2220      	movs	r2, #32
 800ac0c:	7823      	ldrb	r3, [r4, #0]
 800ac0e:	0026      	movs	r6, r4
 800ac10:	4393      	bics	r3, r2
 800ac12:	2b50      	cmp	r3, #80	; 0x50
 800ac14:	d11d      	bne.n	800ac52 <__gethex+0xfe>
 800ac16:	7863      	ldrb	r3, [r4, #1]
 800ac18:	2b2b      	cmp	r3, #43	; 0x2b
 800ac1a:	d02c      	beq.n	800ac76 <__gethex+0x122>
 800ac1c:	2b2d      	cmp	r3, #45	; 0x2d
 800ac1e:	d02e      	beq.n	800ac7e <__gethex+0x12a>
 800ac20:	2300      	movs	r3, #0
 800ac22:	1c66      	adds	r6, r4, #1
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	7830      	ldrb	r0, [r6, #0]
 800ac28:	f7ff ff7f 	bl	800ab2a <__hexdig_fun>
 800ac2c:	1e43      	subs	r3, r0, #1
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b18      	cmp	r3, #24
 800ac32:	d82b      	bhi.n	800ac8c <__gethex+0x138>
 800ac34:	3810      	subs	r0, #16
 800ac36:	0005      	movs	r5, r0
 800ac38:	7870      	ldrb	r0, [r6, #1]
 800ac3a:	f7ff ff76 	bl	800ab2a <__hexdig_fun>
 800ac3e:	1e43      	subs	r3, r0, #1
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	3601      	adds	r6, #1
 800ac44:	2b18      	cmp	r3, #24
 800ac46:	d91c      	bls.n	800ac82 <__gethex+0x12e>
 800ac48:	9b04      	ldr	r3, [sp, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d000      	beq.n	800ac50 <__gethex+0xfc>
 800ac4e:	426d      	negs	r5, r5
 800ac50:	197f      	adds	r7, r7, r5
 800ac52:	9b06      	ldr	r3, [sp, #24]
 800ac54:	601e      	str	r6, [r3, #0]
 800ac56:	9b02      	ldr	r3, [sp, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d019      	beq.n	800ac90 <__gethex+0x13c>
 800ac5c:	2600      	movs	r6, #0
 800ac5e:	9b05      	ldr	r3, [sp, #20]
 800ac60:	42b3      	cmp	r3, r6
 800ac62:	d100      	bne.n	800ac66 <__gethex+0x112>
 800ac64:	3606      	adds	r6, #6
 800ac66:	0030      	movs	r0, r6
 800ac68:	b009      	add	sp, #36	; 0x24
 800ac6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	2700      	movs	r7, #0
 800ac70:	9c00      	ldr	r4, [sp, #0]
 800ac72:	9302      	str	r3, [sp, #8]
 800ac74:	e7c9      	b.n	800ac0a <__gethex+0xb6>
 800ac76:	2300      	movs	r3, #0
 800ac78:	9304      	str	r3, [sp, #16]
 800ac7a:	1ca6      	adds	r6, r4, #2
 800ac7c:	e7d3      	b.n	800ac26 <__gethex+0xd2>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e7fa      	b.n	800ac78 <__gethex+0x124>
 800ac82:	230a      	movs	r3, #10
 800ac84:	435d      	muls	r5, r3
 800ac86:	182d      	adds	r5, r5, r0
 800ac88:	3d10      	subs	r5, #16
 800ac8a:	e7d5      	b.n	800ac38 <__gethex+0xe4>
 800ac8c:	0026      	movs	r6, r4
 800ac8e:	e7e0      	b.n	800ac52 <__gethex+0xfe>
 800ac90:	9b00      	ldr	r3, [sp, #0]
 800ac92:	9902      	ldr	r1, [sp, #8]
 800ac94:	1ae3      	subs	r3, r4, r3
 800ac96:	3b01      	subs	r3, #1
 800ac98:	2b07      	cmp	r3, #7
 800ac9a:	dc0a      	bgt.n	800acb2 <__gethex+0x15e>
 800ac9c:	9803      	ldr	r0, [sp, #12]
 800ac9e:	f000 fb1b 	bl	800b2d8 <_Balloc>
 800aca2:	1e05      	subs	r5, r0, #0
 800aca4:	d108      	bne.n	800acb8 <__gethex+0x164>
 800aca6:	002a      	movs	r2, r5
 800aca8:	21e4      	movs	r1, #228	; 0xe4
 800acaa:	4b5f      	ldr	r3, [pc, #380]	; (800ae28 <__gethex+0x2d4>)
 800acac:	485f      	ldr	r0, [pc, #380]	; (800ae2c <__gethex+0x2d8>)
 800acae:	f001 fbe7 	bl	800c480 <__assert_func>
 800acb2:	3101      	adds	r1, #1
 800acb4:	105b      	asrs	r3, r3, #1
 800acb6:	e7ef      	b.n	800ac98 <__gethex+0x144>
 800acb8:	0003      	movs	r3, r0
 800acba:	3314      	adds	r3, #20
 800acbc:	9302      	str	r3, [sp, #8]
 800acbe:	9305      	str	r3, [sp, #20]
 800acc0:	2300      	movs	r3, #0
 800acc2:	001e      	movs	r6, r3
 800acc4:	9304      	str	r3, [sp, #16]
 800acc6:	9b00      	ldr	r3, [sp, #0]
 800acc8:	42a3      	cmp	r3, r4
 800acca:	d33f      	bcc.n	800ad4c <__gethex+0x1f8>
 800accc:	9c05      	ldr	r4, [sp, #20]
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	c440      	stmia	r4!, {r6}
 800acd2:	1ae4      	subs	r4, r4, r3
 800acd4:	10a4      	asrs	r4, r4, #2
 800acd6:	0030      	movs	r0, r6
 800acd8:	612c      	str	r4, [r5, #16]
 800acda:	f000 fbf5 	bl	800b4c8 <__hi0bits>
 800acde:	9b01      	ldr	r3, [sp, #4]
 800ace0:	0164      	lsls	r4, r4, #5
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	1a26      	subs	r6, r4, r0
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	429e      	cmp	r6, r3
 800acea:	dd51      	ble.n	800ad90 <__gethex+0x23c>
 800acec:	1af6      	subs	r6, r6, r3
 800acee:	0031      	movs	r1, r6
 800acf0:	0028      	movs	r0, r5
 800acf2:	f000 ff89 	bl	800bc08 <__any_on>
 800acf6:	1e04      	subs	r4, r0, #0
 800acf8:	d016      	beq.n	800ad28 <__gethex+0x1d4>
 800acfa:	2401      	movs	r4, #1
 800acfc:	231f      	movs	r3, #31
 800acfe:	0020      	movs	r0, r4
 800ad00:	1e72      	subs	r2, r6, #1
 800ad02:	4013      	ands	r3, r2
 800ad04:	4098      	lsls	r0, r3
 800ad06:	0003      	movs	r3, r0
 800ad08:	1151      	asrs	r1, r2, #5
 800ad0a:	9802      	ldr	r0, [sp, #8]
 800ad0c:	0089      	lsls	r1, r1, #2
 800ad0e:	5809      	ldr	r1, [r1, r0]
 800ad10:	4219      	tst	r1, r3
 800ad12:	d009      	beq.n	800ad28 <__gethex+0x1d4>
 800ad14:	42a2      	cmp	r2, r4
 800ad16:	dd06      	ble.n	800ad26 <__gethex+0x1d2>
 800ad18:	0028      	movs	r0, r5
 800ad1a:	1eb1      	subs	r1, r6, #2
 800ad1c:	f000 ff74 	bl	800bc08 <__any_on>
 800ad20:	3402      	adds	r4, #2
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d100      	bne.n	800ad28 <__gethex+0x1d4>
 800ad26:	2402      	movs	r4, #2
 800ad28:	0031      	movs	r1, r6
 800ad2a:	0028      	movs	r0, r5
 800ad2c:	f7ff fea8 	bl	800aa80 <rshift>
 800ad30:	19bf      	adds	r7, r7, r6
 800ad32:	9b01      	ldr	r3, [sp, #4]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	42bb      	cmp	r3, r7
 800ad38:	da3a      	bge.n	800adb0 <__gethex+0x25c>
 800ad3a:	0029      	movs	r1, r5
 800ad3c:	9803      	ldr	r0, [sp, #12]
 800ad3e:	f000 fb0f 	bl	800b360 <_Bfree>
 800ad42:	2300      	movs	r3, #0
 800ad44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad46:	26a3      	movs	r6, #163	; 0xa3
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	e78c      	b.n	800ac66 <__gethex+0x112>
 800ad4c:	3c01      	subs	r4, #1
 800ad4e:	7823      	ldrb	r3, [r4, #0]
 800ad50:	2b2e      	cmp	r3, #46	; 0x2e
 800ad52:	d012      	beq.n	800ad7a <__gethex+0x226>
 800ad54:	9b04      	ldr	r3, [sp, #16]
 800ad56:	2b20      	cmp	r3, #32
 800ad58:	d104      	bne.n	800ad64 <__gethex+0x210>
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	c340      	stmia	r3!, {r6}
 800ad5e:	2600      	movs	r6, #0
 800ad60:	9305      	str	r3, [sp, #20]
 800ad62:	9604      	str	r6, [sp, #16]
 800ad64:	7820      	ldrb	r0, [r4, #0]
 800ad66:	f7ff fee0 	bl	800ab2a <__hexdig_fun>
 800ad6a:	230f      	movs	r3, #15
 800ad6c:	4018      	ands	r0, r3
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	4098      	lsls	r0, r3
 800ad72:	3304      	adds	r3, #4
 800ad74:	4306      	orrs	r6, r0
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	e7a5      	b.n	800acc6 <__gethex+0x172>
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	d8e9      	bhi.n	800ad54 <__gethex+0x200>
 800ad80:	2201      	movs	r2, #1
 800ad82:	0020      	movs	r0, r4
 800ad84:	4927      	ldr	r1, [pc, #156]	; (800ae24 <__gethex+0x2d0>)
 800ad86:	f7fe fee3 	bl	8009b50 <strncmp>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d1e2      	bne.n	800ad54 <__gethex+0x200>
 800ad8e:	e79a      	b.n	800acc6 <__gethex+0x172>
 800ad90:	9b00      	ldr	r3, [sp, #0]
 800ad92:	2400      	movs	r4, #0
 800ad94:	429e      	cmp	r6, r3
 800ad96:	dacc      	bge.n	800ad32 <__gethex+0x1de>
 800ad98:	1b9e      	subs	r6, r3, r6
 800ad9a:	0029      	movs	r1, r5
 800ad9c:	0032      	movs	r2, r6
 800ad9e:	9803      	ldr	r0, [sp, #12]
 800ada0:	f000 fcfe 	bl	800b7a0 <__lshift>
 800ada4:	0003      	movs	r3, r0
 800ada6:	3314      	adds	r3, #20
 800ada8:	0005      	movs	r5, r0
 800adaa:	1bbf      	subs	r7, r7, r6
 800adac:	9302      	str	r3, [sp, #8]
 800adae:	e7c0      	b.n	800ad32 <__gethex+0x1de>
 800adb0:	9b01      	ldr	r3, [sp, #4]
 800adb2:	685e      	ldr	r6, [r3, #4]
 800adb4:	42be      	cmp	r6, r7
 800adb6:	dd70      	ble.n	800ae9a <__gethex+0x346>
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	1bf6      	subs	r6, r6, r7
 800adbc:	42b3      	cmp	r3, r6
 800adbe:	dc37      	bgt.n	800ae30 <__gethex+0x2dc>
 800adc0:	9b01      	ldr	r3, [sp, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d024      	beq.n	800ae12 <__gethex+0x2be>
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d026      	beq.n	800ae1a <__gethex+0x2c6>
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d117      	bne.n	800ae00 <__gethex+0x2ac>
 800add0:	9b00      	ldr	r3, [sp, #0]
 800add2:	42b3      	cmp	r3, r6
 800add4:	d114      	bne.n	800ae00 <__gethex+0x2ac>
 800add6:	2b01      	cmp	r3, #1
 800add8:	d10b      	bne.n	800adf2 <__gethex+0x29e>
 800adda:	9b01      	ldr	r3, [sp, #4]
 800addc:	9a07      	ldr	r2, [sp, #28]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2662      	movs	r6, #98	; 0x62
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	2301      	movs	r3, #1
 800ade6:	9a02      	ldr	r2, [sp, #8]
 800ade8:	612b      	str	r3, [r5, #16]
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adee:	601d      	str	r5, [r3, #0]
 800adf0:	e739      	b.n	800ac66 <__gethex+0x112>
 800adf2:	9900      	ldr	r1, [sp, #0]
 800adf4:	0028      	movs	r0, r5
 800adf6:	3901      	subs	r1, #1
 800adf8:	f000 ff06 	bl	800bc08 <__any_on>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d1ec      	bne.n	800adda <__gethex+0x286>
 800ae00:	0029      	movs	r1, r5
 800ae02:	9803      	ldr	r0, [sp, #12]
 800ae04:	f000 faac 	bl	800b360 <_Bfree>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae0c:	2650      	movs	r6, #80	; 0x50
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	e729      	b.n	800ac66 <__gethex+0x112>
 800ae12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1f3      	bne.n	800ae00 <__gethex+0x2ac>
 800ae18:	e7df      	b.n	800adda <__gethex+0x286>
 800ae1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1dc      	bne.n	800adda <__gethex+0x286>
 800ae20:	e7ee      	b.n	800ae00 <__gethex+0x2ac>
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	0800c834 	.word	0x0800c834
 800ae28:	0800ca46 	.word	0x0800ca46
 800ae2c:	0800ca57 	.word	0x0800ca57
 800ae30:	1e77      	subs	r7, r6, #1
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	d12f      	bne.n	800ae96 <__gethex+0x342>
 800ae36:	2f00      	cmp	r7, #0
 800ae38:	d004      	beq.n	800ae44 <__gethex+0x2f0>
 800ae3a:	0039      	movs	r1, r7
 800ae3c:	0028      	movs	r0, r5
 800ae3e:	f000 fee3 	bl	800bc08 <__any_on>
 800ae42:	0004      	movs	r4, r0
 800ae44:	231f      	movs	r3, #31
 800ae46:	117a      	asrs	r2, r7, #5
 800ae48:	401f      	ands	r7, r3
 800ae4a:	3b1e      	subs	r3, #30
 800ae4c:	40bb      	lsls	r3, r7
 800ae4e:	9902      	ldr	r1, [sp, #8]
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	5852      	ldr	r2, [r2, r1]
 800ae54:	421a      	tst	r2, r3
 800ae56:	d001      	beq.n	800ae5c <__gethex+0x308>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	431c      	orrs	r4, r3
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	0031      	movs	r1, r6
 800ae60:	1b9b      	subs	r3, r3, r6
 800ae62:	2602      	movs	r6, #2
 800ae64:	0028      	movs	r0, r5
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	f7ff fe0a 	bl	800aa80 <rshift>
 800ae6c:	9b01      	ldr	r3, [sp, #4]
 800ae6e:	685f      	ldr	r7, [r3, #4]
 800ae70:	2c00      	cmp	r4, #0
 800ae72:	d041      	beq.n	800aef8 <__gethex+0x3a4>
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d010      	beq.n	800ae9e <__gethex+0x34a>
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d012      	beq.n	800aea6 <__gethex+0x352>
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d106      	bne.n	800ae92 <__gethex+0x33e>
 800ae84:	07a2      	lsls	r2, r4, #30
 800ae86:	d504      	bpl.n	800ae92 <__gethex+0x33e>
 800ae88:	9a02      	ldr	r2, [sp, #8]
 800ae8a:	6812      	ldr	r2, [r2, #0]
 800ae8c:	4314      	orrs	r4, r2
 800ae8e:	421c      	tst	r4, r3
 800ae90:	d10c      	bne.n	800aeac <__gethex+0x358>
 800ae92:	2310      	movs	r3, #16
 800ae94:	e02f      	b.n	800aef6 <__gethex+0x3a2>
 800ae96:	2401      	movs	r4, #1
 800ae98:	e7d4      	b.n	800ae44 <__gethex+0x2f0>
 800ae9a:	2601      	movs	r6, #1
 800ae9c:	e7e8      	b.n	800ae70 <__gethex+0x31c>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aea2:	1a9b      	subs	r3, r3, r2
 800aea4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0f2      	beq.n	800ae92 <__gethex+0x33e>
 800aeac:	692b      	ldr	r3, [r5, #16]
 800aeae:	2000      	movs	r0, #0
 800aeb0:	9302      	str	r3, [sp, #8]
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	002b      	movs	r3, r5
 800aeb8:	9a04      	ldr	r2, [sp, #16]
 800aeba:	3314      	adds	r3, #20
 800aebc:	1899      	adds	r1, r3, r2
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	1c54      	adds	r4, r2, #1
 800aec2:	d01e      	beq.n	800af02 <__gethex+0x3ae>
 800aec4:	3201      	adds	r2, #1
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	002b      	movs	r3, r5
 800aeca:	3314      	adds	r3, #20
 800aecc:	2e02      	cmp	r6, #2
 800aece:	d141      	bne.n	800af54 <__gethex+0x400>
 800aed0:	9a01      	ldr	r2, [sp, #4]
 800aed2:	9900      	ldr	r1, [sp, #0]
 800aed4:	6812      	ldr	r2, [r2, #0]
 800aed6:	3a01      	subs	r2, #1
 800aed8:	428a      	cmp	r2, r1
 800aeda:	d10b      	bne.n	800aef4 <__gethex+0x3a0>
 800aedc:	221f      	movs	r2, #31
 800aede:	9800      	ldr	r0, [sp, #0]
 800aee0:	1149      	asrs	r1, r1, #5
 800aee2:	4002      	ands	r2, r0
 800aee4:	2001      	movs	r0, #1
 800aee6:	0004      	movs	r4, r0
 800aee8:	4094      	lsls	r4, r2
 800aeea:	0089      	lsls	r1, r1, #2
 800aeec:	58cb      	ldr	r3, [r1, r3]
 800aeee:	4223      	tst	r3, r4
 800aef0:	d000      	beq.n	800aef4 <__gethex+0x3a0>
 800aef2:	2601      	movs	r6, #1
 800aef4:	2320      	movs	r3, #32
 800aef6:	431e      	orrs	r6, r3
 800aef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aefa:	601d      	str	r5, [r3, #0]
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	601f      	str	r7, [r3, #0]
 800af00:	e6b1      	b.n	800ac66 <__gethex+0x112>
 800af02:	c301      	stmia	r3!, {r0}
 800af04:	4299      	cmp	r1, r3
 800af06:	d8da      	bhi.n	800aebe <__gethex+0x36a>
 800af08:	68ab      	ldr	r3, [r5, #8]
 800af0a:	9a02      	ldr	r2, [sp, #8]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	db18      	blt.n	800af42 <__gethex+0x3ee>
 800af10:	6869      	ldr	r1, [r5, #4]
 800af12:	9803      	ldr	r0, [sp, #12]
 800af14:	3101      	adds	r1, #1
 800af16:	f000 f9df 	bl	800b2d8 <_Balloc>
 800af1a:	1e04      	subs	r4, r0, #0
 800af1c:	d104      	bne.n	800af28 <__gethex+0x3d4>
 800af1e:	0022      	movs	r2, r4
 800af20:	2184      	movs	r1, #132	; 0x84
 800af22:	4b1c      	ldr	r3, [pc, #112]	; (800af94 <__gethex+0x440>)
 800af24:	481c      	ldr	r0, [pc, #112]	; (800af98 <__gethex+0x444>)
 800af26:	e6c2      	b.n	800acae <__gethex+0x15a>
 800af28:	0029      	movs	r1, r5
 800af2a:	692a      	ldr	r2, [r5, #16]
 800af2c:	310c      	adds	r1, #12
 800af2e:	3202      	adds	r2, #2
 800af30:	0092      	lsls	r2, r2, #2
 800af32:	300c      	adds	r0, #12
 800af34:	f7fe fea8 	bl	8009c88 <memcpy>
 800af38:	0029      	movs	r1, r5
 800af3a:	9803      	ldr	r0, [sp, #12]
 800af3c:	f000 fa10 	bl	800b360 <_Bfree>
 800af40:	0025      	movs	r5, r4
 800af42:	692b      	ldr	r3, [r5, #16]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	612a      	str	r2, [r5, #16]
 800af48:	2201      	movs	r2, #1
 800af4a:	3304      	adds	r3, #4
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	18eb      	adds	r3, r5, r3
 800af50:	605a      	str	r2, [r3, #4]
 800af52:	e7b9      	b.n	800aec8 <__gethex+0x374>
 800af54:	692a      	ldr	r2, [r5, #16]
 800af56:	9902      	ldr	r1, [sp, #8]
 800af58:	428a      	cmp	r2, r1
 800af5a:	dd09      	ble.n	800af70 <__gethex+0x41c>
 800af5c:	2101      	movs	r1, #1
 800af5e:	0028      	movs	r0, r5
 800af60:	f7ff fd8e 	bl	800aa80 <rshift>
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	3701      	adds	r7, #1
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	42bb      	cmp	r3, r7
 800af6c:	dac1      	bge.n	800aef2 <__gethex+0x39e>
 800af6e:	e6e4      	b.n	800ad3a <__gethex+0x1e6>
 800af70:	221f      	movs	r2, #31
 800af72:	9c00      	ldr	r4, [sp, #0]
 800af74:	9900      	ldr	r1, [sp, #0]
 800af76:	2601      	movs	r6, #1
 800af78:	4014      	ands	r4, r2
 800af7a:	4211      	tst	r1, r2
 800af7c:	d0ba      	beq.n	800aef4 <__gethex+0x3a0>
 800af7e:	9a04      	ldr	r2, [sp, #16]
 800af80:	189b      	adds	r3, r3, r2
 800af82:	3b04      	subs	r3, #4
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	f000 fa9f 	bl	800b4c8 <__hi0bits>
 800af8a:	2320      	movs	r3, #32
 800af8c:	1b1b      	subs	r3, r3, r4
 800af8e:	4298      	cmp	r0, r3
 800af90:	dbe4      	blt.n	800af5c <__gethex+0x408>
 800af92:	e7af      	b.n	800aef4 <__gethex+0x3a0>
 800af94:	0800ca46 	.word	0x0800ca46
 800af98:	0800ca57 	.word	0x0800ca57

0800af9c <L_shift>:
 800af9c:	2308      	movs	r3, #8
 800af9e:	b570      	push	{r4, r5, r6, lr}
 800afa0:	2520      	movs	r5, #32
 800afa2:	1a9a      	subs	r2, r3, r2
 800afa4:	0092      	lsls	r2, r2, #2
 800afa6:	1aad      	subs	r5, r5, r2
 800afa8:	6843      	ldr	r3, [r0, #4]
 800afaa:	6804      	ldr	r4, [r0, #0]
 800afac:	001e      	movs	r6, r3
 800afae:	40ae      	lsls	r6, r5
 800afb0:	40d3      	lsrs	r3, r2
 800afb2:	4334      	orrs	r4, r6
 800afb4:	6004      	str	r4, [r0, #0]
 800afb6:	6043      	str	r3, [r0, #4]
 800afb8:	3004      	adds	r0, #4
 800afba:	4288      	cmp	r0, r1
 800afbc:	d3f4      	bcc.n	800afa8 <L_shift+0xc>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}

0800afc0 <__match>:
 800afc0:	b530      	push	{r4, r5, lr}
 800afc2:	6803      	ldr	r3, [r0, #0]
 800afc4:	780c      	ldrb	r4, [r1, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	2c00      	cmp	r4, #0
 800afca:	d102      	bne.n	800afd2 <__match+0x12>
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	2001      	movs	r0, #1
 800afd0:	bd30      	pop	{r4, r5, pc}
 800afd2:	781a      	ldrb	r2, [r3, #0]
 800afd4:	0015      	movs	r5, r2
 800afd6:	3d41      	subs	r5, #65	; 0x41
 800afd8:	2d19      	cmp	r5, #25
 800afda:	d800      	bhi.n	800afde <__match+0x1e>
 800afdc:	3220      	adds	r2, #32
 800afde:	3101      	adds	r1, #1
 800afe0:	42a2      	cmp	r2, r4
 800afe2:	d0ef      	beq.n	800afc4 <__match+0x4>
 800afe4:	2000      	movs	r0, #0
 800afe6:	e7f3      	b.n	800afd0 <__match+0x10>

0800afe8 <__hexnan>:
 800afe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afea:	680b      	ldr	r3, [r1, #0]
 800afec:	b08b      	sub	sp, #44	; 0x2c
 800afee:	9201      	str	r2, [sp, #4]
 800aff0:	9901      	ldr	r1, [sp, #4]
 800aff2:	115a      	asrs	r2, r3, #5
 800aff4:	0092      	lsls	r2, r2, #2
 800aff6:	188a      	adds	r2, r1, r2
 800aff8:	9202      	str	r2, [sp, #8]
 800affa:	0019      	movs	r1, r3
 800affc:	221f      	movs	r2, #31
 800affe:	4011      	ands	r1, r2
 800b000:	9008      	str	r0, [sp, #32]
 800b002:	9106      	str	r1, [sp, #24]
 800b004:	4213      	tst	r3, r2
 800b006:	d002      	beq.n	800b00e <__hexnan+0x26>
 800b008:	9b02      	ldr	r3, [sp, #8]
 800b00a:	3304      	adds	r3, #4
 800b00c:	9302      	str	r3, [sp, #8]
 800b00e:	9b02      	ldr	r3, [sp, #8]
 800b010:	2500      	movs	r5, #0
 800b012:	1f1f      	subs	r7, r3, #4
 800b014:	003e      	movs	r6, r7
 800b016:	003c      	movs	r4, r7
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	603d      	str	r5, [r7, #0]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	9507      	str	r5, [sp, #28]
 800b020:	9305      	str	r3, [sp, #20]
 800b022:	9503      	str	r5, [sp, #12]
 800b024:	9b05      	ldr	r3, [sp, #20]
 800b026:	3301      	adds	r3, #1
 800b028:	9309      	str	r3, [sp, #36]	; 0x24
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	9304      	str	r3, [sp, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d028      	beq.n	800b086 <__hexnan+0x9e>
 800b034:	9804      	ldr	r0, [sp, #16]
 800b036:	f7ff fd78 	bl	800ab2a <__hexdig_fun>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d154      	bne.n	800b0e8 <__hexnan+0x100>
 800b03e:	9b04      	ldr	r3, [sp, #16]
 800b040:	2b20      	cmp	r3, #32
 800b042:	d819      	bhi.n	800b078 <__hexnan+0x90>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	9a07      	ldr	r2, [sp, #28]
 800b048:	4293      	cmp	r3, r2
 800b04a:	dd12      	ble.n	800b072 <__hexnan+0x8a>
 800b04c:	42b4      	cmp	r4, r6
 800b04e:	d206      	bcs.n	800b05e <__hexnan+0x76>
 800b050:	2d07      	cmp	r5, #7
 800b052:	dc04      	bgt.n	800b05e <__hexnan+0x76>
 800b054:	002a      	movs	r2, r5
 800b056:	0031      	movs	r1, r6
 800b058:	0020      	movs	r0, r4
 800b05a:	f7ff ff9f 	bl	800af9c <L_shift>
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	2508      	movs	r5, #8
 800b062:	429c      	cmp	r4, r3
 800b064:	d905      	bls.n	800b072 <__hexnan+0x8a>
 800b066:	1f26      	subs	r6, r4, #4
 800b068:	2500      	movs	r5, #0
 800b06a:	0034      	movs	r4, r6
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	6035      	str	r5, [r6, #0]
 800b070:	9307      	str	r3, [sp, #28]
 800b072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	e7d5      	b.n	800b024 <__hexnan+0x3c>
 800b078:	9b04      	ldr	r3, [sp, #16]
 800b07a:	2b29      	cmp	r3, #41	; 0x29
 800b07c:	d159      	bne.n	800b132 <__hexnan+0x14a>
 800b07e:	9b05      	ldr	r3, [sp, #20]
 800b080:	9a08      	ldr	r2, [sp, #32]
 800b082:	3302      	adds	r3, #2
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d052      	beq.n	800b132 <__hexnan+0x14a>
 800b08c:	42b4      	cmp	r4, r6
 800b08e:	d206      	bcs.n	800b09e <__hexnan+0xb6>
 800b090:	2d07      	cmp	r5, #7
 800b092:	dc04      	bgt.n	800b09e <__hexnan+0xb6>
 800b094:	002a      	movs	r2, r5
 800b096:	0031      	movs	r1, r6
 800b098:	0020      	movs	r0, r4
 800b09a:	f7ff ff7f 	bl	800af9c <L_shift>
 800b09e:	9b01      	ldr	r3, [sp, #4]
 800b0a0:	429c      	cmp	r4, r3
 800b0a2:	d935      	bls.n	800b110 <__hexnan+0x128>
 800b0a4:	001a      	movs	r2, r3
 800b0a6:	0023      	movs	r3, r4
 800b0a8:	cb02      	ldmia	r3!, {r1}
 800b0aa:	c202      	stmia	r2!, {r1}
 800b0ac:	429f      	cmp	r7, r3
 800b0ae:	d2fb      	bcs.n	800b0a8 <__hexnan+0xc0>
 800b0b0:	9b02      	ldr	r3, [sp, #8]
 800b0b2:	1c62      	adds	r2, r4, #1
 800b0b4:	1ed9      	subs	r1, r3, #3
 800b0b6:	2304      	movs	r3, #4
 800b0b8:	4291      	cmp	r1, r2
 800b0ba:	d305      	bcc.n	800b0c8 <__hexnan+0xe0>
 800b0bc:	9b02      	ldr	r3, [sp, #8]
 800b0be:	3b04      	subs	r3, #4
 800b0c0:	1b1b      	subs	r3, r3, r4
 800b0c2:	089b      	lsrs	r3, r3, #2
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	9a01      	ldr	r2, [sp, #4]
 800b0ca:	18d3      	adds	r3, r2, r3
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	c304      	stmia	r3!, {r2}
 800b0d0:	429f      	cmp	r7, r3
 800b0d2:	d2fc      	bcs.n	800b0ce <__hexnan+0xe6>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d104      	bne.n	800b0e4 <__hexnan+0xfc>
 800b0da:	9b01      	ldr	r3, [sp, #4]
 800b0dc:	429f      	cmp	r7, r3
 800b0de:	d126      	bne.n	800b12e <__hexnan+0x146>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	2005      	movs	r0, #5
 800b0e6:	e025      	b.n	800b134 <__hexnan+0x14c>
 800b0e8:	9b03      	ldr	r3, [sp, #12]
 800b0ea:	3501      	adds	r5, #1
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	2d08      	cmp	r5, #8
 800b0f2:	dd06      	ble.n	800b102 <__hexnan+0x11a>
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	429c      	cmp	r4, r3
 800b0f8:	d9bb      	bls.n	800b072 <__hexnan+0x8a>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2501      	movs	r5, #1
 800b0fe:	3c04      	subs	r4, #4
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	220f      	movs	r2, #15
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	4010      	ands	r0, r2
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	4303      	orrs	r3, r0
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	e7b0      	b.n	800b072 <__hexnan+0x8a>
 800b110:	9b06      	ldr	r3, [sp, #24]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0de      	beq.n	800b0d4 <__hexnan+0xec>
 800b116:	2320      	movs	r3, #32
 800b118:	9a06      	ldr	r2, [sp, #24]
 800b11a:	9902      	ldr	r1, [sp, #8]
 800b11c:	1a9b      	subs	r3, r3, r2
 800b11e:	2201      	movs	r2, #1
 800b120:	4252      	negs	r2, r2
 800b122:	40da      	lsrs	r2, r3
 800b124:	3904      	subs	r1, #4
 800b126:	680b      	ldr	r3, [r1, #0]
 800b128:	4013      	ands	r3, r2
 800b12a:	600b      	str	r3, [r1, #0]
 800b12c:	e7d2      	b.n	800b0d4 <__hexnan+0xec>
 800b12e:	3f04      	subs	r7, #4
 800b130:	e7d0      	b.n	800b0d4 <__hexnan+0xec>
 800b132:	2004      	movs	r0, #4
 800b134:	b00b      	add	sp, #44	; 0x2c
 800b136:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b138 <malloc>:
 800b138:	b510      	push	{r4, lr}
 800b13a:	4b03      	ldr	r3, [pc, #12]	; (800b148 <malloc+0x10>)
 800b13c:	0001      	movs	r1, r0
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	f000 f826 	bl	800b190 <_malloc_r>
 800b144:	bd10      	pop	{r4, pc}
 800b146:	46c0      	nop			; (mov r8, r8)
 800b148:	200001d0 	.word	0x200001d0

0800b14c <sbrk_aligned>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	4e0f      	ldr	r6, [pc, #60]	; (800b18c <sbrk_aligned+0x40>)
 800b150:	000d      	movs	r5, r1
 800b152:	6831      	ldr	r1, [r6, #0]
 800b154:	0004      	movs	r4, r0
 800b156:	2900      	cmp	r1, #0
 800b158:	d102      	bne.n	800b160 <sbrk_aligned+0x14>
 800b15a:	f001 f97f 	bl	800c45c <_sbrk_r>
 800b15e:	6030      	str	r0, [r6, #0]
 800b160:	0029      	movs	r1, r5
 800b162:	0020      	movs	r0, r4
 800b164:	f001 f97a 	bl	800c45c <_sbrk_r>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d00a      	beq.n	800b182 <sbrk_aligned+0x36>
 800b16c:	2303      	movs	r3, #3
 800b16e:	1cc5      	adds	r5, r0, #3
 800b170:	439d      	bics	r5, r3
 800b172:	42a8      	cmp	r0, r5
 800b174:	d007      	beq.n	800b186 <sbrk_aligned+0x3a>
 800b176:	1a29      	subs	r1, r5, r0
 800b178:	0020      	movs	r0, r4
 800b17a:	f001 f96f 	bl	800c45c <_sbrk_r>
 800b17e:	3001      	adds	r0, #1
 800b180:	d101      	bne.n	800b186 <sbrk_aligned+0x3a>
 800b182:	2501      	movs	r5, #1
 800b184:	426d      	negs	r5, r5
 800b186:	0028      	movs	r0, r5
 800b188:	bd70      	pop	{r4, r5, r6, pc}
 800b18a:	46c0      	nop			; (mov r8, r8)
 800b18c:	20000738 	.word	0x20000738

0800b190 <_malloc_r>:
 800b190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b192:	2203      	movs	r2, #3
 800b194:	1ccb      	adds	r3, r1, #3
 800b196:	4393      	bics	r3, r2
 800b198:	3308      	adds	r3, #8
 800b19a:	0006      	movs	r6, r0
 800b19c:	001f      	movs	r7, r3
 800b19e:	2b0c      	cmp	r3, #12
 800b1a0:	d238      	bcs.n	800b214 <_malloc_r+0x84>
 800b1a2:	270c      	movs	r7, #12
 800b1a4:	42b9      	cmp	r1, r7
 800b1a6:	d837      	bhi.n	800b218 <_malloc_r+0x88>
 800b1a8:	0030      	movs	r0, r6
 800b1aa:	f000 f885 	bl	800b2b8 <__malloc_lock>
 800b1ae:	4b38      	ldr	r3, [pc, #224]	; (800b290 <_malloc_r+0x100>)
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	001c      	movs	r4, r3
 800b1b6:	2c00      	cmp	r4, #0
 800b1b8:	d133      	bne.n	800b222 <_malloc_r+0x92>
 800b1ba:	0039      	movs	r1, r7
 800b1bc:	0030      	movs	r0, r6
 800b1be:	f7ff ffc5 	bl	800b14c <sbrk_aligned>
 800b1c2:	0004      	movs	r4, r0
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d15e      	bne.n	800b286 <_malloc_r+0xf6>
 800b1c8:	9b00      	ldr	r3, [sp, #0]
 800b1ca:	681c      	ldr	r4, [r3, #0]
 800b1cc:	0025      	movs	r5, r4
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	d14e      	bne.n	800b270 <_malloc_r+0xe0>
 800b1d2:	2c00      	cmp	r4, #0
 800b1d4:	d051      	beq.n	800b27a <_malloc_r+0xea>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	0029      	movs	r1, r5
 800b1da:	18e3      	adds	r3, r4, r3
 800b1dc:	0030      	movs	r0, r6
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	f001 f93c 	bl	800c45c <_sbrk_r>
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	4283      	cmp	r3, r0
 800b1e8:	d147      	bne.n	800b27a <_malloc_r+0xea>
 800b1ea:	6823      	ldr	r3, [r4, #0]
 800b1ec:	0030      	movs	r0, r6
 800b1ee:	1aff      	subs	r7, r7, r3
 800b1f0:	0039      	movs	r1, r7
 800b1f2:	f7ff ffab 	bl	800b14c <sbrk_aligned>
 800b1f6:	3001      	adds	r0, #1
 800b1f8:	d03f      	beq.n	800b27a <_malloc_r+0xea>
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	19db      	adds	r3, r3, r7
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	9b00      	ldr	r3, [sp, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d040      	beq.n	800b28a <_malloc_r+0xfa>
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	42a2      	cmp	r2, r4
 800b20c:	d133      	bne.n	800b276 <_malloc_r+0xe6>
 800b20e:	2200      	movs	r2, #0
 800b210:	605a      	str	r2, [r3, #4]
 800b212:	e014      	b.n	800b23e <_malloc_r+0xae>
 800b214:	2b00      	cmp	r3, #0
 800b216:	dac5      	bge.n	800b1a4 <_malloc_r+0x14>
 800b218:	230c      	movs	r3, #12
 800b21a:	2500      	movs	r5, #0
 800b21c:	6033      	str	r3, [r6, #0]
 800b21e:	0028      	movs	r0, r5
 800b220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b222:	6821      	ldr	r1, [r4, #0]
 800b224:	1bc9      	subs	r1, r1, r7
 800b226:	d420      	bmi.n	800b26a <_malloc_r+0xda>
 800b228:	290b      	cmp	r1, #11
 800b22a:	d918      	bls.n	800b25e <_malloc_r+0xce>
 800b22c:	19e2      	adds	r2, r4, r7
 800b22e:	6027      	str	r7, [r4, #0]
 800b230:	42a3      	cmp	r3, r4
 800b232:	d112      	bne.n	800b25a <_malloc_r+0xca>
 800b234:	9b00      	ldr	r3, [sp, #0]
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	6863      	ldr	r3, [r4, #4]
 800b23a:	6011      	str	r1, [r2, #0]
 800b23c:	6053      	str	r3, [r2, #4]
 800b23e:	0030      	movs	r0, r6
 800b240:	0025      	movs	r5, r4
 800b242:	f000 f841 	bl	800b2c8 <__malloc_unlock>
 800b246:	2207      	movs	r2, #7
 800b248:	350b      	adds	r5, #11
 800b24a:	1d23      	adds	r3, r4, #4
 800b24c:	4395      	bics	r5, r2
 800b24e:	1aea      	subs	r2, r5, r3
 800b250:	429d      	cmp	r5, r3
 800b252:	d0e4      	beq.n	800b21e <_malloc_r+0x8e>
 800b254:	1b5b      	subs	r3, r3, r5
 800b256:	50a3      	str	r3, [r4, r2]
 800b258:	e7e1      	b.n	800b21e <_malloc_r+0x8e>
 800b25a:	605a      	str	r2, [r3, #4]
 800b25c:	e7ec      	b.n	800b238 <_malloc_r+0xa8>
 800b25e:	6862      	ldr	r2, [r4, #4]
 800b260:	42a3      	cmp	r3, r4
 800b262:	d1d5      	bne.n	800b210 <_malloc_r+0x80>
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	e7e9      	b.n	800b23e <_malloc_r+0xae>
 800b26a:	0023      	movs	r3, r4
 800b26c:	6864      	ldr	r4, [r4, #4]
 800b26e:	e7a2      	b.n	800b1b6 <_malloc_r+0x26>
 800b270:	002c      	movs	r4, r5
 800b272:	686d      	ldr	r5, [r5, #4]
 800b274:	e7ab      	b.n	800b1ce <_malloc_r+0x3e>
 800b276:	0013      	movs	r3, r2
 800b278:	e7c4      	b.n	800b204 <_malloc_r+0x74>
 800b27a:	230c      	movs	r3, #12
 800b27c:	0030      	movs	r0, r6
 800b27e:	6033      	str	r3, [r6, #0]
 800b280:	f000 f822 	bl	800b2c8 <__malloc_unlock>
 800b284:	e7cb      	b.n	800b21e <_malloc_r+0x8e>
 800b286:	6027      	str	r7, [r4, #0]
 800b288:	e7d9      	b.n	800b23e <_malloc_r+0xae>
 800b28a:	605b      	str	r3, [r3, #4]
 800b28c:	deff      	udf	#255	; 0xff
 800b28e:	46c0      	nop			; (mov r8, r8)
 800b290:	20000734 	.word	0x20000734

0800b294 <__ascii_mbtowc>:
 800b294:	b082      	sub	sp, #8
 800b296:	2900      	cmp	r1, #0
 800b298:	d100      	bne.n	800b29c <__ascii_mbtowc+0x8>
 800b29a:	a901      	add	r1, sp, #4
 800b29c:	1e10      	subs	r0, r2, #0
 800b29e:	d006      	beq.n	800b2ae <__ascii_mbtowc+0x1a>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d006      	beq.n	800b2b2 <__ascii_mbtowc+0x1e>
 800b2a4:	7813      	ldrb	r3, [r2, #0]
 800b2a6:	600b      	str	r3, [r1, #0]
 800b2a8:	7810      	ldrb	r0, [r2, #0]
 800b2aa:	1e43      	subs	r3, r0, #1
 800b2ac:	4198      	sbcs	r0, r3
 800b2ae:	b002      	add	sp, #8
 800b2b0:	4770      	bx	lr
 800b2b2:	2002      	movs	r0, #2
 800b2b4:	4240      	negs	r0, r0
 800b2b6:	e7fa      	b.n	800b2ae <__ascii_mbtowc+0x1a>

0800b2b8 <__malloc_lock>:
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	4802      	ldr	r0, [pc, #8]	; (800b2c4 <__malloc_lock+0xc>)
 800b2bc:	f7fe fcd7 	bl	8009c6e <__retarget_lock_acquire_recursive>
 800b2c0:	bd10      	pop	{r4, pc}
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	20000730 	.word	0x20000730

0800b2c8 <__malloc_unlock>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	4802      	ldr	r0, [pc, #8]	; (800b2d4 <__malloc_unlock+0xc>)
 800b2cc:	f7fe fcd0 	bl	8009c70 <__retarget_lock_release_recursive>
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	46c0      	nop			; (mov r8, r8)
 800b2d4:	20000730 	.word	0x20000730

0800b2d8 <_Balloc>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	69c5      	ldr	r5, [r0, #28]
 800b2dc:	0006      	movs	r6, r0
 800b2de:	000c      	movs	r4, r1
 800b2e0:	2d00      	cmp	r5, #0
 800b2e2:	d10e      	bne.n	800b302 <_Balloc+0x2a>
 800b2e4:	2010      	movs	r0, #16
 800b2e6:	f7ff ff27 	bl	800b138 <malloc>
 800b2ea:	1e02      	subs	r2, r0, #0
 800b2ec:	61f0      	str	r0, [r6, #28]
 800b2ee:	d104      	bne.n	800b2fa <_Balloc+0x22>
 800b2f0:	216b      	movs	r1, #107	; 0x6b
 800b2f2:	4b19      	ldr	r3, [pc, #100]	; (800b358 <_Balloc+0x80>)
 800b2f4:	4819      	ldr	r0, [pc, #100]	; (800b35c <_Balloc+0x84>)
 800b2f6:	f001 f8c3 	bl	800c480 <__assert_func>
 800b2fa:	6045      	str	r5, [r0, #4]
 800b2fc:	6085      	str	r5, [r0, #8]
 800b2fe:	6005      	str	r5, [r0, #0]
 800b300:	60c5      	str	r5, [r0, #12]
 800b302:	69f5      	ldr	r5, [r6, #28]
 800b304:	68eb      	ldr	r3, [r5, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d013      	beq.n	800b332 <_Balloc+0x5a>
 800b30a:	69f3      	ldr	r3, [r6, #28]
 800b30c:	00a2      	lsls	r2, r4, #2
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	189b      	adds	r3, r3, r2
 800b312:	6818      	ldr	r0, [r3, #0]
 800b314:	2800      	cmp	r0, #0
 800b316:	d118      	bne.n	800b34a <_Balloc+0x72>
 800b318:	2101      	movs	r1, #1
 800b31a:	000d      	movs	r5, r1
 800b31c:	40a5      	lsls	r5, r4
 800b31e:	1d6a      	adds	r2, r5, #5
 800b320:	0030      	movs	r0, r6
 800b322:	0092      	lsls	r2, r2, #2
 800b324:	f001 f8ca 	bl	800c4bc <_calloc_r>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d00c      	beq.n	800b346 <_Balloc+0x6e>
 800b32c:	6044      	str	r4, [r0, #4]
 800b32e:	6085      	str	r5, [r0, #8]
 800b330:	e00d      	b.n	800b34e <_Balloc+0x76>
 800b332:	2221      	movs	r2, #33	; 0x21
 800b334:	2104      	movs	r1, #4
 800b336:	0030      	movs	r0, r6
 800b338:	f001 f8c0 	bl	800c4bc <_calloc_r>
 800b33c:	69f3      	ldr	r3, [r6, #28]
 800b33e:	60e8      	str	r0, [r5, #12]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e1      	bne.n	800b30a <_Balloc+0x32>
 800b346:	2000      	movs	r0, #0
 800b348:	bd70      	pop	{r4, r5, r6, pc}
 800b34a:	6802      	ldr	r2, [r0, #0]
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	2300      	movs	r3, #0
 800b350:	6103      	str	r3, [r0, #16]
 800b352:	60c3      	str	r3, [r0, #12]
 800b354:	e7f8      	b.n	800b348 <_Balloc+0x70>
 800b356:	46c0      	nop			; (mov r8, r8)
 800b358:	0800c9d7 	.word	0x0800c9d7
 800b35c:	0800cab7 	.word	0x0800cab7

0800b360 <_Bfree>:
 800b360:	b570      	push	{r4, r5, r6, lr}
 800b362:	69c6      	ldr	r6, [r0, #28]
 800b364:	0005      	movs	r5, r0
 800b366:	000c      	movs	r4, r1
 800b368:	2e00      	cmp	r6, #0
 800b36a:	d10e      	bne.n	800b38a <_Bfree+0x2a>
 800b36c:	2010      	movs	r0, #16
 800b36e:	f7ff fee3 	bl	800b138 <malloc>
 800b372:	1e02      	subs	r2, r0, #0
 800b374:	61e8      	str	r0, [r5, #28]
 800b376:	d104      	bne.n	800b382 <_Bfree+0x22>
 800b378:	218f      	movs	r1, #143	; 0x8f
 800b37a:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <_Bfree+0x40>)
 800b37c:	4809      	ldr	r0, [pc, #36]	; (800b3a4 <_Bfree+0x44>)
 800b37e:	f001 f87f 	bl	800c480 <__assert_func>
 800b382:	6046      	str	r6, [r0, #4]
 800b384:	6086      	str	r6, [r0, #8]
 800b386:	6006      	str	r6, [r0, #0]
 800b388:	60c6      	str	r6, [r0, #12]
 800b38a:	2c00      	cmp	r4, #0
 800b38c:	d007      	beq.n	800b39e <_Bfree+0x3e>
 800b38e:	69eb      	ldr	r3, [r5, #28]
 800b390:	6862      	ldr	r2, [r4, #4]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	0092      	lsls	r2, r2, #2
 800b396:	189b      	adds	r3, r3, r2
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	6022      	str	r2, [r4, #0]
 800b39c:	601c      	str	r4, [r3, #0]
 800b39e:	bd70      	pop	{r4, r5, r6, pc}
 800b3a0:	0800c9d7 	.word	0x0800c9d7
 800b3a4:	0800cab7 	.word	0x0800cab7

0800b3a8 <__multadd>:
 800b3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3aa:	000e      	movs	r6, r1
 800b3ac:	9001      	str	r0, [sp, #4]
 800b3ae:	000c      	movs	r4, r1
 800b3b0:	001d      	movs	r5, r3
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	690f      	ldr	r7, [r1, #16]
 800b3b6:	3614      	adds	r6, #20
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	b299      	uxth	r1, r3
 800b3be:	4351      	muls	r1, r2
 800b3c0:	0c1b      	lsrs	r3, r3, #16
 800b3c2:	4353      	muls	r3, r2
 800b3c4:	1949      	adds	r1, r1, r5
 800b3c6:	0c0d      	lsrs	r5, r1, #16
 800b3c8:	195b      	adds	r3, r3, r5
 800b3ca:	0c1d      	lsrs	r5, r3, #16
 800b3cc:	b289      	uxth	r1, r1
 800b3ce:	041b      	lsls	r3, r3, #16
 800b3d0:	185b      	adds	r3, r3, r1
 800b3d2:	c608      	stmia	r6!, {r3}
 800b3d4:	4287      	cmp	r7, r0
 800b3d6:	dcef      	bgt.n	800b3b8 <__multadd+0x10>
 800b3d8:	2d00      	cmp	r5, #0
 800b3da:	d022      	beq.n	800b422 <__multadd+0x7a>
 800b3dc:	68a3      	ldr	r3, [r4, #8]
 800b3de:	42bb      	cmp	r3, r7
 800b3e0:	dc19      	bgt.n	800b416 <__multadd+0x6e>
 800b3e2:	6861      	ldr	r1, [r4, #4]
 800b3e4:	9801      	ldr	r0, [sp, #4]
 800b3e6:	3101      	adds	r1, #1
 800b3e8:	f7ff ff76 	bl	800b2d8 <_Balloc>
 800b3ec:	1e06      	subs	r6, r0, #0
 800b3ee:	d105      	bne.n	800b3fc <__multadd+0x54>
 800b3f0:	0032      	movs	r2, r6
 800b3f2:	21ba      	movs	r1, #186	; 0xba
 800b3f4:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <__multadd+0x80>)
 800b3f6:	480d      	ldr	r0, [pc, #52]	; (800b42c <__multadd+0x84>)
 800b3f8:	f001 f842 	bl	800c480 <__assert_func>
 800b3fc:	0021      	movs	r1, r4
 800b3fe:	6922      	ldr	r2, [r4, #16]
 800b400:	310c      	adds	r1, #12
 800b402:	3202      	adds	r2, #2
 800b404:	0092      	lsls	r2, r2, #2
 800b406:	300c      	adds	r0, #12
 800b408:	f7fe fc3e 	bl	8009c88 <memcpy>
 800b40c:	0021      	movs	r1, r4
 800b40e:	9801      	ldr	r0, [sp, #4]
 800b410:	f7ff ffa6 	bl	800b360 <_Bfree>
 800b414:	0034      	movs	r4, r6
 800b416:	1d3b      	adds	r3, r7, #4
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	18e3      	adds	r3, r4, r3
 800b41c:	605d      	str	r5, [r3, #4]
 800b41e:	1c7b      	adds	r3, r7, #1
 800b420:	6123      	str	r3, [r4, #16]
 800b422:	0020      	movs	r0, r4
 800b424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b426:	46c0      	nop			; (mov r8, r8)
 800b428:	0800ca46 	.word	0x0800ca46
 800b42c:	0800cab7 	.word	0x0800cab7

0800b430 <__s2b>:
 800b430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b432:	0006      	movs	r6, r0
 800b434:	0018      	movs	r0, r3
 800b436:	000c      	movs	r4, r1
 800b438:	3008      	adds	r0, #8
 800b43a:	2109      	movs	r1, #9
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	0015      	movs	r5, r2
 800b440:	f7f4 ff08 	bl	8000254 <__divsi3>
 800b444:	2301      	movs	r3, #1
 800b446:	2100      	movs	r1, #0
 800b448:	4283      	cmp	r3, r0
 800b44a:	db0a      	blt.n	800b462 <__s2b+0x32>
 800b44c:	0030      	movs	r0, r6
 800b44e:	f7ff ff43 	bl	800b2d8 <_Balloc>
 800b452:	1e01      	subs	r1, r0, #0
 800b454:	d108      	bne.n	800b468 <__s2b+0x38>
 800b456:	000a      	movs	r2, r1
 800b458:	4b19      	ldr	r3, [pc, #100]	; (800b4c0 <__s2b+0x90>)
 800b45a:	481a      	ldr	r0, [pc, #104]	; (800b4c4 <__s2b+0x94>)
 800b45c:	31d3      	adds	r1, #211	; 0xd3
 800b45e:	f001 f80f 	bl	800c480 <__assert_func>
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	3101      	adds	r1, #1
 800b466:	e7ef      	b.n	800b448 <__s2b+0x18>
 800b468:	9b08      	ldr	r3, [sp, #32]
 800b46a:	6143      	str	r3, [r0, #20]
 800b46c:	2301      	movs	r3, #1
 800b46e:	6103      	str	r3, [r0, #16]
 800b470:	2d09      	cmp	r5, #9
 800b472:	dd18      	ble.n	800b4a6 <__s2b+0x76>
 800b474:	0023      	movs	r3, r4
 800b476:	3309      	adds	r3, #9
 800b478:	001f      	movs	r7, r3
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	1964      	adds	r4, r4, r5
 800b47e:	783b      	ldrb	r3, [r7, #0]
 800b480:	220a      	movs	r2, #10
 800b482:	0030      	movs	r0, r6
 800b484:	3b30      	subs	r3, #48	; 0x30
 800b486:	f7ff ff8f 	bl	800b3a8 <__multadd>
 800b48a:	3701      	adds	r7, #1
 800b48c:	0001      	movs	r1, r0
 800b48e:	42a7      	cmp	r7, r4
 800b490:	d1f5      	bne.n	800b47e <__s2b+0x4e>
 800b492:	002c      	movs	r4, r5
 800b494:	9b00      	ldr	r3, [sp, #0]
 800b496:	3c08      	subs	r4, #8
 800b498:	191c      	adds	r4, r3, r4
 800b49a:	002f      	movs	r7, r5
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	429f      	cmp	r7, r3
 800b4a0:	db04      	blt.n	800b4ac <__s2b+0x7c>
 800b4a2:	0008      	movs	r0, r1
 800b4a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b4a6:	2509      	movs	r5, #9
 800b4a8:	340a      	adds	r4, #10
 800b4aa:	e7f6      	b.n	800b49a <__s2b+0x6a>
 800b4ac:	1b63      	subs	r3, r4, r5
 800b4ae:	5ddb      	ldrb	r3, [r3, r7]
 800b4b0:	220a      	movs	r2, #10
 800b4b2:	0030      	movs	r0, r6
 800b4b4:	3b30      	subs	r3, #48	; 0x30
 800b4b6:	f7ff ff77 	bl	800b3a8 <__multadd>
 800b4ba:	3701      	adds	r7, #1
 800b4bc:	0001      	movs	r1, r0
 800b4be:	e7ed      	b.n	800b49c <__s2b+0x6c>
 800b4c0:	0800ca46 	.word	0x0800ca46
 800b4c4:	0800cab7 	.word	0x0800cab7

0800b4c8 <__hi0bits>:
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	0c02      	lsrs	r2, r0, #16
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	4282      	cmp	r2, r0
 800b4d0:	d101      	bne.n	800b4d6 <__hi0bits+0xe>
 800b4d2:	041b      	lsls	r3, r3, #16
 800b4d4:	3010      	adds	r0, #16
 800b4d6:	0e1a      	lsrs	r2, r3, #24
 800b4d8:	d101      	bne.n	800b4de <__hi0bits+0x16>
 800b4da:	3008      	adds	r0, #8
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	0f1a      	lsrs	r2, r3, #28
 800b4e0:	d101      	bne.n	800b4e6 <__hi0bits+0x1e>
 800b4e2:	3004      	adds	r0, #4
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	0f9a      	lsrs	r2, r3, #30
 800b4e8:	d101      	bne.n	800b4ee <__hi0bits+0x26>
 800b4ea:	3002      	adds	r0, #2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	db03      	blt.n	800b4fa <__hi0bits+0x32>
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	d400      	bmi.n	800b4fa <__hi0bits+0x32>
 800b4f8:	2020      	movs	r0, #32
 800b4fa:	4770      	bx	lr

0800b4fc <__lo0bits>:
 800b4fc:	6803      	ldr	r3, [r0, #0]
 800b4fe:	0001      	movs	r1, r0
 800b500:	2207      	movs	r2, #7
 800b502:	0018      	movs	r0, r3
 800b504:	4010      	ands	r0, r2
 800b506:	4213      	tst	r3, r2
 800b508:	d00d      	beq.n	800b526 <__lo0bits+0x2a>
 800b50a:	3a06      	subs	r2, #6
 800b50c:	2000      	movs	r0, #0
 800b50e:	4213      	tst	r3, r2
 800b510:	d105      	bne.n	800b51e <__lo0bits+0x22>
 800b512:	3002      	adds	r0, #2
 800b514:	4203      	tst	r3, r0
 800b516:	d003      	beq.n	800b520 <__lo0bits+0x24>
 800b518:	40d3      	lsrs	r3, r2
 800b51a:	0010      	movs	r0, r2
 800b51c:	600b      	str	r3, [r1, #0]
 800b51e:	4770      	bx	lr
 800b520:	089b      	lsrs	r3, r3, #2
 800b522:	600b      	str	r3, [r1, #0]
 800b524:	e7fb      	b.n	800b51e <__lo0bits+0x22>
 800b526:	b29a      	uxth	r2, r3
 800b528:	2a00      	cmp	r2, #0
 800b52a:	d101      	bne.n	800b530 <__lo0bits+0x34>
 800b52c:	2010      	movs	r0, #16
 800b52e:	0c1b      	lsrs	r3, r3, #16
 800b530:	b2da      	uxtb	r2, r3
 800b532:	2a00      	cmp	r2, #0
 800b534:	d101      	bne.n	800b53a <__lo0bits+0x3e>
 800b536:	3008      	adds	r0, #8
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	071a      	lsls	r2, r3, #28
 800b53c:	d101      	bne.n	800b542 <__lo0bits+0x46>
 800b53e:	3004      	adds	r0, #4
 800b540:	091b      	lsrs	r3, r3, #4
 800b542:	079a      	lsls	r2, r3, #30
 800b544:	d101      	bne.n	800b54a <__lo0bits+0x4e>
 800b546:	3002      	adds	r0, #2
 800b548:	089b      	lsrs	r3, r3, #2
 800b54a:	07da      	lsls	r2, r3, #31
 800b54c:	d4e9      	bmi.n	800b522 <__lo0bits+0x26>
 800b54e:	3001      	adds	r0, #1
 800b550:	085b      	lsrs	r3, r3, #1
 800b552:	d1e6      	bne.n	800b522 <__lo0bits+0x26>
 800b554:	2020      	movs	r0, #32
 800b556:	e7e2      	b.n	800b51e <__lo0bits+0x22>

0800b558 <__i2b>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	000c      	movs	r4, r1
 800b55c:	2101      	movs	r1, #1
 800b55e:	f7ff febb 	bl	800b2d8 <_Balloc>
 800b562:	2800      	cmp	r0, #0
 800b564:	d107      	bne.n	800b576 <__i2b+0x1e>
 800b566:	2146      	movs	r1, #70	; 0x46
 800b568:	4c05      	ldr	r4, [pc, #20]	; (800b580 <__i2b+0x28>)
 800b56a:	0002      	movs	r2, r0
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <__i2b+0x2c>)
 800b56e:	0020      	movs	r0, r4
 800b570:	31ff      	adds	r1, #255	; 0xff
 800b572:	f000 ff85 	bl	800c480 <__assert_func>
 800b576:	2301      	movs	r3, #1
 800b578:	6144      	str	r4, [r0, #20]
 800b57a:	6103      	str	r3, [r0, #16]
 800b57c:	bd10      	pop	{r4, pc}
 800b57e:	46c0      	nop			; (mov r8, r8)
 800b580:	0800cab7 	.word	0x0800cab7
 800b584:	0800ca46 	.word	0x0800ca46

0800b588 <__multiply>:
 800b588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b58a:	0015      	movs	r5, r2
 800b58c:	690a      	ldr	r2, [r1, #16]
 800b58e:	692b      	ldr	r3, [r5, #16]
 800b590:	000c      	movs	r4, r1
 800b592:	b08b      	sub	sp, #44	; 0x2c
 800b594:	429a      	cmp	r2, r3
 800b596:	da01      	bge.n	800b59c <__multiply+0x14>
 800b598:	002c      	movs	r4, r5
 800b59a:	000d      	movs	r5, r1
 800b59c:	6927      	ldr	r7, [r4, #16]
 800b59e:	692e      	ldr	r6, [r5, #16]
 800b5a0:	6861      	ldr	r1, [r4, #4]
 800b5a2:	19bb      	adds	r3, r7, r6
 800b5a4:	9303      	str	r3, [sp, #12]
 800b5a6:	68a3      	ldr	r3, [r4, #8]
 800b5a8:	19ba      	adds	r2, r7, r6
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	da00      	bge.n	800b5b0 <__multiply+0x28>
 800b5ae:	3101      	adds	r1, #1
 800b5b0:	f7ff fe92 	bl	800b2d8 <_Balloc>
 800b5b4:	9002      	str	r0, [sp, #8]
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d106      	bne.n	800b5c8 <__multiply+0x40>
 800b5ba:	21b1      	movs	r1, #177	; 0xb1
 800b5bc:	4b48      	ldr	r3, [pc, #288]	; (800b6e0 <__multiply+0x158>)
 800b5be:	4849      	ldr	r0, [pc, #292]	; (800b6e4 <__multiply+0x15c>)
 800b5c0:	9a02      	ldr	r2, [sp, #8]
 800b5c2:	0049      	lsls	r1, r1, #1
 800b5c4:	f000 ff5c 	bl	800c480 <__assert_func>
 800b5c8:	9b02      	ldr	r3, [sp, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	3314      	adds	r3, #20
 800b5ce:	469c      	mov	ip, r3
 800b5d0:	19bb      	adds	r3, r7, r6
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4463      	add	r3, ip
 800b5d6:	9304      	str	r3, [sp, #16]
 800b5d8:	4663      	mov	r3, ip
 800b5da:	9904      	ldr	r1, [sp, #16]
 800b5dc:	428b      	cmp	r3, r1
 800b5de:	d32a      	bcc.n	800b636 <__multiply+0xae>
 800b5e0:	0023      	movs	r3, r4
 800b5e2:	00bf      	lsls	r7, r7, #2
 800b5e4:	3314      	adds	r3, #20
 800b5e6:	3514      	adds	r5, #20
 800b5e8:	9308      	str	r3, [sp, #32]
 800b5ea:	00b6      	lsls	r6, r6, #2
 800b5ec:	19db      	adds	r3, r3, r7
 800b5ee:	9305      	str	r3, [sp, #20]
 800b5f0:	19ab      	adds	r3, r5, r6
 800b5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f4:	2304      	movs	r3, #4
 800b5f6:	9306      	str	r3, [sp, #24]
 800b5f8:	0023      	movs	r3, r4
 800b5fa:	9a05      	ldr	r2, [sp, #20]
 800b5fc:	3315      	adds	r3, #21
 800b5fe:	9501      	str	r5, [sp, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d305      	bcc.n	800b610 <__multiply+0x88>
 800b604:	1b13      	subs	r3, r2, r4
 800b606:	3b15      	subs	r3, #21
 800b608:	089b      	lsrs	r3, r3, #2
 800b60a:	3301      	adds	r3, #1
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	9306      	str	r3, [sp, #24]
 800b610:	9b01      	ldr	r3, [sp, #4]
 800b612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b614:	4293      	cmp	r3, r2
 800b616:	d310      	bcc.n	800b63a <__multiply+0xb2>
 800b618:	9b03      	ldr	r3, [sp, #12]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dd05      	ble.n	800b62a <__multiply+0xa2>
 800b61e:	9b04      	ldr	r3, [sp, #16]
 800b620:	3b04      	subs	r3, #4
 800b622:	9304      	str	r3, [sp, #16]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d056      	beq.n	800b6d8 <__multiply+0x150>
 800b62a:	9b02      	ldr	r3, [sp, #8]
 800b62c:	9a03      	ldr	r2, [sp, #12]
 800b62e:	0018      	movs	r0, r3
 800b630:	611a      	str	r2, [r3, #16]
 800b632:	b00b      	add	sp, #44	; 0x2c
 800b634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b636:	c304      	stmia	r3!, {r2}
 800b638:	e7cf      	b.n	800b5da <__multiply+0x52>
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	b280      	uxth	r0, r0
 800b640:	2800      	cmp	r0, #0
 800b642:	d01e      	beq.n	800b682 <__multiply+0xfa>
 800b644:	4667      	mov	r7, ip
 800b646:	2500      	movs	r5, #0
 800b648:	9e08      	ldr	r6, [sp, #32]
 800b64a:	ce02      	ldmia	r6!, {r1}
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	9307      	str	r3, [sp, #28]
 800b650:	b28b      	uxth	r3, r1
 800b652:	4343      	muls	r3, r0
 800b654:	001a      	movs	r2, r3
 800b656:	466b      	mov	r3, sp
 800b658:	8b9b      	ldrh	r3, [r3, #28]
 800b65a:	18d3      	adds	r3, r2, r3
 800b65c:	195b      	adds	r3, r3, r5
 800b65e:	0c0d      	lsrs	r5, r1, #16
 800b660:	4345      	muls	r5, r0
 800b662:	9a07      	ldr	r2, [sp, #28]
 800b664:	0c11      	lsrs	r1, r2, #16
 800b666:	1869      	adds	r1, r5, r1
 800b668:	0c1a      	lsrs	r2, r3, #16
 800b66a:	188a      	adds	r2, r1, r2
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	0c15      	lsrs	r5, r2, #16
 800b670:	0412      	lsls	r2, r2, #16
 800b672:	431a      	orrs	r2, r3
 800b674:	9b05      	ldr	r3, [sp, #20]
 800b676:	c704      	stmia	r7!, {r2}
 800b678:	42b3      	cmp	r3, r6
 800b67a:	d8e6      	bhi.n	800b64a <__multiply+0xc2>
 800b67c:	4663      	mov	r3, ip
 800b67e:	9a06      	ldr	r2, [sp, #24]
 800b680:	509d      	str	r5, [r3, r2]
 800b682:	9b01      	ldr	r3, [sp, #4]
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	0c00      	lsrs	r0, r0, #16
 800b688:	d020      	beq.n	800b6cc <__multiply+0x144>
 800b68a:	4663      	mov	r3, ip
 800b68c:	0025      	movs	r5, r4
 800b68e:	4661      	mov	r1, ip
 800b690:	2700      	movs	r7, #0
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3514      	adds	r5, #20
 800b696:	682a      	ldr	r2, [r5, #0]
 800b698:	680e      	ldr	r6, [r1, #0]
 800b69a:	b292      	uxth	r2, r2
 800b69c:	4342      	muls	r2, r0
 800b69e:	0c36      	lsrs	r6, r6, #16
 800b6a0:	1992      	adds	r2, r2, r6
 800b6a2:	19d2      	adds	r2, r2, r7
 800b6a4:	0416      	lsls	r6, r2, #16
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	431e      	orrs	r6, r3
 800b6aa:	600e      	str	r6, [r1, #0]
 800b6ac:	cd40      	ldmia	r5!, {r6}
 800b6ae:	684b      	ldr	r3, [r1, #4]
 800b6b0:	0c36      	lsrs	r6, r6, #16
 800b6b2:	4346      	muls	r6, r0
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	0c12      	lsrs	r2, r2, #16
 800b6b8:	18f3      	adds	r3, r6, r3
 800b6ba:	189b      	adds	r3, r3, r2
 800b6bc:	9a05      	ldr	r2, [sp, #20]
 800b6be:	0c1f      	lsrs	r7, r3, #16
 800b6c0:	3104      	adds	r1, #4
 800b6c2:	42aa      	cmp	r2, r5
 800b6c4:	d8e7      	bhi.n	800b696 <__multiply+0x10e>
 800b6c6:	4662      	mov	r2, ip
 800b6c8:	9906      	ldr	r1, [sp, #24]
 800b6ca:	5053      	str	r3, [r2, r1]
 800b6cc:	9b01      	ldr	r3, [sp, #4]
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	2304      	movs	r3, #4
 800b6d4:	449c      	add	ip, r3
 800b6d6:	e79b      	b.n	800b610 <__multiply+0x88>
 800b6d8:	9b03      	ldr	r3, [sp, #12]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	9303      	str	r3, [sp, #12]
 800b6de:	e79b      	b.n	800b618 <__multiply+0x90>
 800b6e0:	0800ca46 	.word	0x0800ca46
 800b6e4:	0800cab7 	.word	0x0800cab7

0800b6e8 <__pow5mult>:
 800b6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	0015      	movs	r5, r2
 800b6ee:	0007      	movs	r7, r0
 800b6f0:	000e      	movs	r6, r1
 800b6f2:	401a      	ands	r2, r3
 800b6f4:	421d      	tst	r5, r3
 800b6f6:	d008      	beq.n	800b70a <__pow5mult+0x22>
 800b6f8:	4925      	ldr	r1, [pc, #148]	; (800b790 <__pow5mult+0xa8>)
 800b6fa:	3a01      	subs	r2, #1
 800b6fc:	0092      	lsls	r2, r2, #2
 800b6fe:	5852      	ldr	r2, [r2, r1]
 800b700:	2300      	movs	r3, #0
 800b702:	0031      	movs	r1, r6
 800b704:	f7ff fe50 	bl	800b3a8 <__multadd>
 800b708:	0006      	movs	r6, r0
 800b70a:	10ad      	asrs	r5, r5, #2
 800b70c:	d03d      	beq.n	800b78a <__pow5mult+0xa2>
 800b70e:	69fc      	ldr	r4, [r7, #28]
 800b710:	2c00      	cmp	r4, #0
 800b712:	d10f      	bne.n	800b734 <__pow5mult+0x4c>
 800b714:	2010      	movs	r0, #16
 800b716:	f7ff fd0f 	bl	800b138 <malloc>
 800b71a:	1e02      	subs	r2, r0, #0
 800b71c:	61f8      	str	r0, [r7, #28]
 800b71e:	d105      	bne.n	800b72c <__pow5mult+0x44>
 800b720:	21b4      	movs	r1, #180	; 0xb4
 800b722:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <__pow5mult+0xac>)
 800b724:	481c      	ldr	r0, [pc, #112]	; (800b798 <__pow5mult+0xb0>)
 800b726:	31ff      	adds	r1, #255	; 0xff
 800b728:	f000 feaa 	bl	800c480 <__assert_func>
 800b72c:	6044      	str	r4, [r0, #4]
 800b72e:	6084      	str	r4, [r0, #8]
 800b730:	6004      	str	r4, [r0, #0]
 800b732:	60c4      	str	r4, [r0, #12]
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	689c      	ldr	r4, [r3, #8]
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	2c00      	cmp	r4, #0
 800b73c:	d108      	bne.n	800b750 <__pow5mult+0x68>
 800b73e:	0038      	movs	r0, r7
 800b740:	4916      	ldr	r1, [pc, #88]	; (800b79c <__pow5mult+0xb4>)
 800b742:	f7ff ff09 	bl	800b558 <__i2b>
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	0004      	movs	r4, r0
 800b74a:	6098      	str	r0, [r3, #8]
 800b74c:	2300      	movs	r3, #0
 800b74e:	6003      	str	r3, [r0, #0]
 800b750:	2301      	movs	r3, #1
 800b752:	421d      	tst	r5, r3
 800b754:	d00a      	beq.n	800b76c <__pow5mult+0x84>
 800b756:	0031      	movs	r1, r6
 800b758:	0022      	movs	r2, r4
 800b75a:	0038      	movs	r0, r7
 800b75c:	f7ff ff14 	bl	800b588 <__multiply>
 800b760:	0031      	movs	r1, r6
 800b762:	9001      	str	r0, [sp, #4]
 800b764:	0038      	movs	r0, r7
 800b766:	f7ff fdfb 	bl	800b360 <_Bfree>
 800b76a:	9e01      	ldr	r6, [sp, #4]
 800b76c:	106d      	asrs	r5, r5, #1
 800b76e:	d00c      	beq.n	800b78a <__pow5mult+0xa2>
 800b770:	6820      	ldr	r0, [r4, #0]
 800b772:	2800      	cmp	r0, #0
 800b774:	d107      	bne.n	800b786 <__pow5mult+0x9e>
 800b776:	0022      	movs	r2, r4
 800b778:	0021      	movs	r1, r4
 800b77a:	0038      	movs	r0, r7
 800b77c:	f7ff ff04 	bl	800b588 <__multiply>
 800b780:	2300      	movs	r3, #0
 800b782:	6020      	str	r0, [r4, #0]
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	0004      	movs	r4, r0
 800b788:	e7e2      	b.n	800b750 <__pow5mult+0x68>
 800b78a:	0030      	movs	r0, r6
 800b78c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b78e:	46c0      	nop			; (mov r8, r8)
 800b790:	0800cc00 	.word	0x0800cc00
 800b794:	0800c9d7 	.word	0x0800c9d7
 800b798:	0800cab7 	.word	0x0800cab7
 800b79c:	00000271 	.word	0x00000271

0800b7a0 <__lshift>:
 800b7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7a2:	000c      	movs	r4, r1
 800b7a4:	0017      	movs	r7, r2
 800b7a6:	6923      	ldr	r3, [r4, #16]
 800b7a8:	1155      	asrs	r5, r2, #5
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	18eb      	adds	r3, r5, r3
 800b7ae:	9302      	str	r3, [sp, #8]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	9301      	str	r3, [sp, #4]
 800b7b4:	6849      	ldr	r1, [r1, #4]
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	9004      	str	r0, [sp, #16]
 800b7ba:	9a01      	ldr	r2, [sp, #4]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	db10      	blt.n	800b7e2 <__lshift+0x42>
 800b7c0:	9804      	ldr	r0, [sp, #16]
 800b7c2:	f7ff fd89 	bl	800b2d8 <_Balloc>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	0002      	movs	r2, r0
 800b7ca:	0006      	movs	r6, r0
 800b7cc:	0019      	movs	r1, r3
 800b7ce:	3214      	adds	r2, #20
 800b7d0:	4298      	cmp	r0, r3
 800b7d2:	d10c      	bne.n	800b7ee <__lshift+0x4e>
 800b7d4:	31df      	adds	r1, #223	; 0xdf
 800b7d6:	0032      	movs	r2, r6
 800b7d8:	4b26      	ldr	r3, [pc, #152]	; (800b874 <__lshift+0xd4>)
 800b7da:	4827      	ldr	r0, [pc, #156]	; (800b878 <__lshift+0xd8>)
 800b7dc:	31ff      	adds	r1, #255	; 0xff
 800b7de:	f000 fe4f 	bl	800c480 <__assert_func>
 800b7e2:	3101      	adds	r1, #1
 800b7e4:	005b      	lsls	r3, r3, #1
 800b7e6:	e7e8      	b.n	800b7ba <__lshift+0x1a>
 800b7e8:	0098      	lsls	r0, r3, #2
 800b7ea:	5011      	str	r1, [r2, r0]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	42ab      	cmp	r3, r5
 800b7f0:	dbfa      	blt.n	800b7e8 <__lshift+0x48>
 800b7f2:	43eb      	mvns	r3, r5
 800b7f4:	17db      	asrs	r3, r3, #31
 800b7f6:	401d      	ands	r5, r3
 800b7f8:	211f      	movs	r1, #31
 800b7fa:	0023      	movs	r3, r4
 800b7fc:	0038      	movs	r0, r7
 800b7fe:	00ad      	lsls	r5, r5, #2
 800b800:	1955      	adds	r5, r2, r5
 800b802:	6922      	ldr	r2, [r4, #16]
 800b804:	3314      	adds	r3, #20
 800b806:	0092      	lsls	r2, r2, #2
 800b808:	4008      	ands	r0, r1
 800b80a:	4684      	mov	ip, r0
 800b80c:	189a      	adds	r2, r3, r2
 800b80e:	420f      	tst	r7, r1
 800b810:	d02a      	beq.n	800b868 <__lshift+0xc8>
 800b812:	3101      	adds	r1, #1
 800b814:	1a09      	subs	r1, r1, r0
 800b816:	9105      	str	r1, [sp, #20]
 800b818:	2100      	movs	r1, #0
 800b81a:	9503      	str	r5, [sp, #12]
 800b81c:	4667      	mov	r7, ip
 800b81e:	6818      	ldr	r0, [r3, #0]
 800b820:	40b8      	lsls	r0, r7
 800b822:	4308      	orrs	r0, r1
 800b824:	9903      	ldr	r1, [sp, #12]
 800b826:	c101      	stmia	r1!, {r0}
 800b828:	9103      	str	r1, [sp, #12]
 800b82a:	9805      	ldr	r0, [sp, #20]
 800b82c:	cb02      	ldmia	r3!, {r1}
 800b82e:	40c1      	lsrs	r1, r0
 800b830:	429a      	cmp	r2, r3
 800b832:	d8f3      	bhi.n	800b81c <__lshift+0x7c>
 800b834:	0020      	movs	r0, r4
 800b836:	3015      	adds	r0, #21
 800b838:	2304      	movs	r3, #4
 800b83a:	4282      	cmp	r2, r0
 800b83c:	d304      	bcc.n	800b848 <__lshift+0xa8>
 800b83e:	1b13      	subs	r3, r2, r4
 800b840:	3b15      	subs	r3, #21
 800b842:	089b      	lsrs	r3, r3, #2
 800b844:	3301      	adds	r3, #1
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	50e9      	str	r1, [r5, r3]
 800b84a:	2900      	cmp	r1, #0
 800b84c:	d002      	beq.n	800b854 <__lshift+0xb4>
 800b84e:	9b02      	ldr	r3, [sp, #8]
 800b850:	3302      	adds	r3, #2
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	9804      	ldr	r0, [sp, #16]
 800b858:	3b01      	subs	r3, #1
 800b85a:	0021      	movs	r1, r4
 800b85c:	6133      	str	r3, [r6, #16]
 800b85e:	f7ff fd7f 	bl	800b360 <_Bfree>
 800b862:	0030      	movs	r0, r6
 800b864:	b007      	add	sp, #28
 800b866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b868:	cb02      	ldmia	r3!, {r1}
 800b86a:	c502      	stmia	r5!, {r1}
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d8fb      	bhi.n	800b868 <__lshift+0xc8>
 800b870:	e7f0      	b.n	800b854 <__lshift+0xb4>
 800b872:	46c0      	nop			; (mov r8, r8)
 800b874:	0800ca46 	.word	0x0800ca46
 800b878:	0800cab7 	.word	0x0800cab7

0800b87c <__mcmp>:
 800b87c:	b530      	push	{r4, r5, lr}
 800b87e:	690b      	ldr	r3, [r1, #16]
 800b880:	6904      	ldr	r4, [r0, #16]
 800b882:	0002      	movs	r2, r0
 800b884:	1ae0      	subs	r0, r4, r3
 800b886:	429c      	cmp	r4, r3
 800b888:	d10e      	bne.n	800b8a8 <__mcmp+0x2c>
 800b88a:	3214      	adds	r2, #20
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	3114      	adds	r1, #20
 800b890:	0014      	movs	r4, r2
 800b892:	18c9      	adds	r1, r1, r3
 800b894:	18d2      	adds	r2, r2, r3
 800b896:	3a04      	subs	r2, #4
 800b898:	3904      	subs	r1, #4
 800b89a:	6815      	ldr	r5, [r2, #0]
 800b89c:	680b      	ldr	r3, [r1, #0]
 800b89e:	429d      	cmp	r5, r3
 800b8a0:	d003      	beq.n	800b8aa <__mcmp+0x2e>
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	429d      	cmp	r5, r3
 800b8a6:	d303      	bcc.n	800b8b0 <__mcmp+0x34>
 800b8a8:	bd30      	pop	{r4, r5, pc}
 800b8aa:	4294      	cmp	r4, r2
 800b8ac:	d3f3      	bcc.n	800b896 <__mcmp+0x1a>
 800b8ae:	e7fb      	b.n	800b8a8 <__mcmp+0x2c>
 800b8b0:	4240      	negs	r0, r0
 800b8b2:	e7f9      	b.n	800b8a8 <__mcmp+0x2c>

0800b8b4 <__mdiff>:
 800b8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8b6:	000e      	movs	r6, r1
 800b8b8:	0007      	movs	r7, r0
 800b8ba:	0011      	movs	r1, r2
 800b8bc:	0030      	movs	r0, r6
 800b8be:	b087      	sub	sp, #28
 800b8c0:	0014      	movs	r4, r2
 800b8c2:	f7ff ffdb 	bl	800b87c <__mcmp>
 800b8c6:	1e05      	subs	r5, r0, #0
 800b8c8:	d110      	bne.n	800b8ec <__mdiff+0x38>
 800b8ca:	0001      	movs	r1, r0
 800b8cc:	0038      	movs	r0, r7
 800b8ce:	f7ff fd03 	bl	800b2d8 <_Balloc>
 800b8d2:	1e02      	subs	r2, r0, #0
 800b8d4:	d104      	bne.n	800b8e0 <__mdiff+0x2c>
 800b8d6:	4b3f      	ldr	r3, [pc, #252]	; (800b9d4 <__mdiff+0x120>)
 800b8d8:	483f      	ldr	r0, [pc, #252]	; (800b9d8 <__mdiff+0x124>)
 800b8da:	4940      	ldr	r1, [pc, #256]	; (800b9dc <__mdiff+0x128>)
 800b8dc:	f000 fdd0 	bl	800c480 <__assert_func>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	6145      	str	r5, [r0, #20]
 800b8e4:	6103      	str	r3, [r0, #16]
 800b8e6:	0010      	movs	r0, r2
 800b8e8:	b007      	add	sp, #28
 800b8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	db04      	blt.n	800b8fe <__mdiff+0x4a>
 800b8f4:	0023      	movs	r3, r4
 800b8f6:	0034      	movs	r4, r6
 800b8f8:	001e      	movs	r6, r3
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	0038      	movs	r0, r7
 800b900:	6861      	ldr	r1, [r4, #4]
 800b902:	f7ff fce9 	bl	800b2d8 <_Balloc>
 800b906:	1e02      	subs	r2, r0, #0
 800b908:	d103      	bne.n	800b912 <__mdiff+0x5e>
 800b90a:	4b32      	ldr	r3, [pc, #200]	; (800b9d4 <__mdiff+0x120>)
 800b90c:	4832      	ldr	r0, [pc, #200]	; (800b9d8 <__mdiff+0x124>)
 800b90e:	4934      	ldr	r1, [pc, #208]	; (800b9e0 <__mdiff+0x12c>)
 800b910:	e7e4      	b.n	800b8dc <__mdiff+0x28>
 800b912:	9b01      	ldr	r3, [sp, #4]
 800b914:	2700      	movs	r7, #0
 800b916:	60c3      	str	r3, [r0, #12]
 800b918:	6920      	ldr	r0, [r4, #16]
 800b91a:	3414      	adds	r4, #20
 800b91c:	0083      	lsls	r3, r0, #2
 800b91e:	18e3      	adds	r3, r4, r3
 800b920:	0021      	movs	r1, r4
 800b922:	9401      	str	r4, [sp, #4]
 800b924:	0034      	movs	r4, r6
 800b926:	9302      	str	r3, [sp, #8]
 800b928:	6933      	ldr	r3, [r6, #16]
 800b92a:	3414      	adds	r4, #20
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	18e3      	adds	r3, r4, r3
 800b930:	9303      	str	r3, [sp, #12]
 800b932:	0013      	movs	r3, r2
 800b934:	3314      	adds	r3, #20
 800b936:	469c      	mov	ip, r3
 800b938:	9305      	str	r3, [sp, #20]
 800b93a:	9104      	str	r1, [sp, #16]
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	cc02      	ldmia	r4!, {r1}
 800b940:	cb20      	ldmia	r3!, {r5}
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	b2ab      	uxth	r3, r5
 800b946:	19df      	adds	r7, r3, r7
 800b948:	b28b      	uxth	r3, r1
 800b94a:	1afb      	subs	r3, r7, r3
 800b94c:	0c09      	lsrs	r1, r1, #16
 800b94e:	0c2d      	lsrs	r5, r5, #16
 800b950:	1a6d      	subs	r5, r5, r1
 800b952:	1419      	asrs	r1, r3, #16
 800b954:	1869      	adds	r1, r5, r1
 800b956:	b29b      	uxth	r3, r3
 800b958:	140f      	asrs	r7, r1, #16
 800b95a:	0409      	lsls	r1, r1, #16
 800b95c:	4319      	orrs	r1, r3
 800b95e:	4663      	mov	r3, ip
 800b960:	c302      	stmia	r3!, {r1}
 800b962:	469c      	mov	ip, r3
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	42a3      	cmp	r3, r4
 800b968:	d8e8      	bhi.n	800b93c <__mdiff+0x88>
 800b96a:	0031      	movs	r1, r6
 800b96c:	9c03      	ldr	r4, [sp, #12]
 800b96e:	3115      	adds	r1, #21
 800b970:	2304      	movs	r3, #4
 800b972:	428c      	cmp	r4, r1
 800b974:	d304      	bcc.n	800b980 <__mdiff+0xcc>
 800b976:	1ba3      	subs	r3, r4, r6
 800b978:	3b15      	subs	r3, #21
 800b97a:	089b      	lsrs	r3, r3, #2
 800b97c:	3301      	adds	r3, #1
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	9901      	ldr	r1, [sp, #4]
 800b982:	18cd      	adds	r5, r1, r3
 800b984:	9905      	ldr	r1, [sp, #20]
 800b986:	002e      	movs	r6, r5
 800b988:	18cb      	adds	r3, r1, r3
 800b98a:	469c      	mov	ip, r3
 800b98c:	9902      	ldr	r1, [sp, #8]
 800b98e:	428e      	cmp	r6, r1
 800b990:	d310      	bcc.n	800b9b4 <__mdiff+0x100>
 800b992:	9e02      	ldr	r6, [sp, #8]
 800b994:	1ee9      	subs	r1, r5, #3
 800b996:	2400      	movs	r4, #0
 800b998:	428e      	cmp	r6, r1
 800b99a:	d304      	bcc.n	800b9a6 <__mdiff+0xf2>
 800b99c:	0031      	movs	r1, r6
 800b99e:	3103      	adds	r1, #3
 800b9a0:	1b49      	subs	r1, r1, r5
 800b9a2:	0889      	lsrs	r1, r1, #2
 800b9a4:	008c      	lsls	r4, r1, #2
 800b9a6:	191b      	adds	r3, r3, r4
 800b9a8:	3b04      	subs	r3, #4
 800b9aa:	6819      	ldr	r1, [r3, #0]
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d00f      	beq.n	800b9d0 <__mdiff+0x11c>
 800b9b0:	6110      	str	r0, [r2, #16]
 800b9b2:	e798      	b.n	800b8e6 <__mdiff+0x32>
 800b9b4:	ce02      	ldmia	r6!, {r1}
 800b9b6:	b28c      	uxth	r4, r1
 800b9b8:	19e4      	adds	r4, r4, r7
 800b9ba:	0c0f      	lsrs	r7, r1, #16
 800b9bc:	1421      	asrs	r1, r4, #16
 800b9be:	1879      	adds	r1, r7, r1
 800b9c0:	b2a4      	uxth	r4, r4
 800b9c2:	140f      	asrs	r7, r1, #16
 800b9c4:	0409      	lsls	r1, r1, #16
 800b9c6:	4321      	orrs	r1, r4
 800b9c8:	4664      	mov	r4, ip
 800b9ca:	c402      	stmia	r4!, {r1}
 800b9cc:	46a4      	mov	ip, r4
 800b9ce:	e7dd      	b.n	800b98c <__mdiff+0xd8>
 800b9d0:	3801      	subs	r0, #1
 800b9d2:	e7e9      	b.n	800b9a8 <__mdiff+0xf4>
 800b9d4:	0800ca46 	.word	0x0800ca46
 800b9d8:	0800cab7 	.word	0x0800cab7
 800b9dc:	00000237 	.word	0x00000237
 800b9e0:	00000245 	.word	0x00000245

0800b9e4 <__ulp>:
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <__ulp+0x30>)
 800b9e8:	4019      	ands	r1, r3
 800b9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <__ulp+0x34>)
 800b9ec:	18c9      	adds	r1, r1, r3
 800b9ee:	4281      	cmp	r1, r0
 800b9f0:	dc06      	bgt.n	800ba00 <__ulp+0x1c>
 800b9f2:	4249      	negs	r1, r1
 800b9f4:	150b      	asrs	r3, r1, #20
 800b9f6:	2b13      	cmp	r3, #19
 800b9f8:	dc03      	bgt.n	800ba02 <__ulp+0x1e>
 800b9fa:	2180      	movs	r1, #128	; 0x80
 800b9fc:	0309      	lsls	r1, r1, #12
 800b9fe:	4119      	asrs	r1, r3
 800ba00:	4770      	bx	lr
 800ba02:	3b14      	subs	r3, #20
 800ba04:	2001      	movs	r0, #1
 800ba06:	2b1e      	cmp	r3, #30
 800ba08:	dc02      	bgt.n	800ba10 <__ulp+0x2c>
 800ba0a:	2080      	movs	r0, #128	; 0x80
 800ba0c:	0600      	lsls	r0, r0, #24
 800ba0e:	40d8      	lsrs	r0, r3
 800ba10:	2100      	movs	r1, #0
 800ba12:	e7f5      	b.n	800ba00 <__ulp+0x1c>
 800ba14:	7ff00000 	.word	0x7ff00000
 800ba18:	fcc00000 	.word	0xfcc00000

0800ba1c <__b2d>:
 800ba1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba1e:	0006      	movs	r6, r0
 800ba20:	6903      	ldr	r3, [r0, #16]
 800ba22:	3614      	adds	r6, #20
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	18f3      	adds	r3, r6, r3
 800ba28:	1f1d      	subs	r5, r3, #4
 800ba2a:	682c      	ldr	r4, [r5, #0]
 800ba2c:	000f      	movs	r7, r1
 800ba2e:	0020      	movs	r0, r4
 800ba30:	9301      	str	r3, [sp, #4]
 800ba32:	f7ff fd49 	bl	800b4c8 <__hi0bits>
 800ba36:	2220      	movs	r2, #32
 800ba38:	1a12      	subs	r2, r2, r0
 800ba3a:	603a      	str	r2, [r7, #0]
 800ba3c:	0003      	movs	r3, r0
 800ba3e:	4a1c      	ldr	r2, [pc, #112]	; (800bab0 <__b2d+0x94>)
 800ba40:	280a      	cmp	r0, #10
 800ba42:	dc15      	bgt.n	800ba70 <__b2d+0x54>
 800ba44:	210b      	movs	r1, #11
 800ba46:	0027      	movs	r7, r4
 800ba48:	1a09      	subs	r1, r1, r0
 800ba4a:	40cf      	lsrs	r7, r1
 800ba4c:	433a      	orrs	r2, r7
 800ba4e:	468c      	mov	ip, r1
 800ba50:	0011      	movs	r1, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	42ae      	cmp	r6, r5
 800ba56:	d202      	bcs.n	800ba5e <__b2d+0x42>
 800ba58:	9a01      	ldr	r2, [sp, #4]
 800ba5a:	3a08      	subs	r2, #8
 800ba5c:	6812      	ldr	r2, [r2, #0]
 800ba5e:	3315      	adds	r3, #21
 800ba60:	409c      	lsls	r4, r3
 800ba62:	4663      	mov	r3, ip
 800ba64:	0027      	movs	r7, r4
 800ba66:	40da      	lsrs	r2, r3
 800ba68:	4317      	orrs	r7, r2
 800ba6a:	0038      	movs	r0, r7
 800ba6c:	b003      	add	sp, #12
 800ba6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba70:	2700      	movs	r7, #0
 800ba72:	42ae      	cmp	r6, r5
 800ba74:	d202      	bcs.n	800ba7c <__b2d+0x60>
 800ba76:	9d01      	ldr	r5, [sp, #4]
 800ba78:	3d08      	subs	r5, #8
 800ba7a:	682f      	ldr	r7, [r5, #0]
 800ba7c:	210b      	movs	r1, #11
 800ba7e:	4249      	negs	r1, r1
 800ba80:	468c      	mov	ip, r1
 800ba82:	449c      	add	ip, r3
 800ba84:	2b0b      	cmp	r3, #11
 800ba86:	d010      	beq.n	800baaa <__b2d+0x8e>
 800ba88:	4661      	mov	r1, ip
 800ba8a:	2320      	movs	r3, #32
 800ba8c:	408c      	lsls	r4, r1
 800ba8e:	1a5b      	subs	r3, r3, r1
 800ba90:	0039      	movs	r1, r7
 800ba92:	40d9      	lsrs	r1, r3
 800ba94:	430c      	orrs	r4, r1
 800ba96:	4322      	orrs	r2, r4
 800ba98:	0011      	movs	r1, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	42b5      	cmp	r5, r6
 800ba9e:	d901      	bls.n	800baa4 <__b2d+0x88>
 800baa0:	3d04      	subs	r5, #4
 800baa2:	682a      	ldr	r2, [r5, #0]
 800baa4:	4664      	mov	r4, ip
 800baa6:	40a7      	lsls	r7, r4
 800baa8:	e7dd      	b.n	800ba66 <__b2d+0x4a>
 800baaa:	4322      	orrs	r2, r4
 800baac:	0011      	movs	r1, r2
 800baae:	e7dc      	b.n	800ba6a <__b2d+0x4e>
 800bab0:	3ff00000 	.word	0x3ff00000

0800bab4 <__d2b>:
 800bab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bab6:	2101      	movs	r1, #1
 800bab8:	0014      	movs	r4, r2
 800baba:	001d      	movs	r5, r3
 800babc:	9f08      	ldr	r7, [sp, #32]
 800babe:	f7ff fc0b 	bl	800b2d8 <_Balloc>
 800bac2:	1e06      	subs	r6, r0, #0
 800bac4:	d105      	bne.n	800bad2 <__d2b+0x1e>
 800bac6:	0032      	movs	r2, r6
 800bac8:	4b24      	ldr	r3, [pc, #144]	; (800bb5c <__d2b+0xa8>)
 800baca:	4825      	ldr	r0, [pc, #148]	; (800bb60 <__d2b+0xac>)
 800bacc:	4925      	ldr	r1, [pc, #148]	; (800bb64 <__d2b+0xb0>)
 800bace:	f000 fcd7 	bl	800c480 <__assert_func>
 800bad2:	032b      	lsls	r3, r5, #12
 800bad4:	006d      	lsls	r5, r5, #1
 800bad6:	0b1b      	lsrs	r3, r3, #12
 800bad8:	0d6d      	lsrs	r5, r5, #21
 800bada:	d125      	bne.n	800bb28 <__d2b+0x74>
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	2c00      	cmp	r4, #0
 800bae0:	d028      	beq.n	800bb34 <__d2b+0x80>
 800bae2:	4668      	mov	r0, sp
 800bae4:	9400      	str	r4, [sp, #0]
 800bae6:	f7ff fd09 	bl	800b4fc <__lo0bits>
 800baea:	9b01      	ldr	r3, [sp, #4]
 800baec:	9900      	ldr	r1, [sp, #0]
 800baee:	2800      	cmp	r0, #0
 800baf0:	d01e      	beq.n	800bb30 <__d2b+0x7c>
 800baf2:	2220      	movs	r2, #32
 800baf4:	001c      	movs	r4, r3
 800baf6:	1a12      	subs	r2, r2, r0
 800baf8:	4094      	lsls	r4, r2
 800bafa:	0022      	movs	r2, r4
 800bafc:	40c3      	lsrs	r3, r0
 800bafe:	430a      	orrs	r2, r1
 800bb00:	6172      	str	r2, [r6, #20]
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	9c01      	ldr	r4, [sp, #4]
 800bb06:	61b4      	str	r4, [r6, #24]
 800bb08:	1e63      	subs	r3, r4, #1
 800bb0a:	419c      	sbcs	r4, r3
 800bb0c:	3401      	adds	r4, #1
 800bb0e:	6134      	str	r4, [r6, #16]
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	d017      	beq.n	800bb44 <__d2b+0x90>
 800bb14:	2435      	movs	r4, #53	; 0x35
 800bb16:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <__d2b+0xb4>)
 800bb18:	18ed      	adds	r5, r5, r3
 800bb1a:	182d      	adds	r5, r5, r0
 800bb1c:	603d      	str	r5, [r7, #0]
 800bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb20:	1a24      	subs	r4, r4, r0
 800bb22:	601c      	str	r4, [r3, #0]
 800bb24:	0030      	movs	r0, r6
 800bb26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb28:	2280      	movs	r2, #128	; 0x80
 800bb2a:	0352      	lsls	r2, r2, #13
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	e7d5      	b.n	800badc <__d2b+0x28>
 800bb30:	6171      	str	r1, [r6, #20]
 800bb32:	e7e7      	b.n	800bb04 <__d2b+0x50>
 800bb34:	a801      	add	r0, sp, #4
 800bb36:	f7ff fce1 	bl	800b4fc <__lo0bits>
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	2401      	movs	r4, #1
 800bb3e:	6173      	str	r3, [r6, #20]
 800bb40:	3020      	adds	r0, #32
 800bb42:	e7e4      	b.n	800bb0e <__d2b+0x5a>
 800bb44:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <__d2b+0xb8>)
 800bb46:	18c0      	adds	r0, r0, r3
 800bb48:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <__d2b+0xbc>)
 800bb4a:	6038      	str	r0, [r7, #0]
 800bb4c:	18e3      	adds	r3, r4, r3
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	18f3      	adds	r3, r6, r3
 800bb52:	6958      	ldr	r0, [r3, #20]
 800bb54:	f7ff fcb8 	bl	800b4c8 <__hi0bits>
 800bb58:	0164      	lsls	r4, r4, #5
 800bb5a:	e7e0      	b.n	800bb1e <__d2b+0x6a>
 800bb5c:	0800ca46 	.word	0x0800ca46
 800bb60:	0800cab7 	.word	0x0800cab7
 800bb64:	0000030f 	.word	0x0000030f
 800bb68:	fffffbcd 	.word	0xfffffbcd
 800bb6c:	fffffbce 	.word	0xfffffbce
 800bb70:	3fffffff 	.word	0x3fffffff

0800bb74 <__ratio>:
 800bb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb76:	b087      	sub	sp, #28
 800bb78:	000f      	movs	r7, r1
 800bb7a:	a904      	add	r1, sp, #16
 800bb7c:	0006      	movs	r6, r0
 800bb7e:	f7ff ff4d 	bl	800ba1c <__b2d>
 800bb82:	9000      	str	r0, [sp, #0]
 800bb84:	9101      	str	r1, [sp, #4]
 800bb86:	9c00      	ldr	r4, [sp, #0]
 800bb88:	9d01      	ldr	r5, [sp, #4]
 800bb8a:	0038      	movs	r0, r7
 800bb8c:	a905      	add	r1, sp, #20
 800bb8e:	f7ff ff45 	bl	800ba1c <__b2d>
 800bb92:	9002      	str	r0, [sp, #8]
 800bb94:	9103      	str	r1, [sp, #12]
 800bb96:	9a02      	ldr	r2, [sp, #8]
 800bb98:	9b03      	ldr	r3, [sp, #12]
 800bb9a:	6930      	ldr	r0, [r6, #16]
 800bb9c:	6939      	ldr	r1, [r7, #16]
 800bb9e:	9e04      	ldr	r6, [sp, #16]
 800bba0:	1a40      	subs	r0, r0, r1
 800bba2:	9905      	ldr	r1, [sp, #20]
 800bba4:	0140      	lsls	r0, r0, #5
 800bba6:	1a71      	subs	r1, r6, r1
 800bba8:	1841      	adds	r1, r0, r1
 800bbaa:	0508      	lsls	r0, r1, #20
 800bbac:	2900      	cmp	r1, #0
 800bbae:	dd07      	ble.n	800bbc0 <__ratio+0x4c>
 800bbb0:	9901      	ldr	r1, [sp, #4]
 800bbb2:	1845      	adds	r5, r0, r1
 800bbb4:	0020      	movs	r0, r4
 800bbb6:	0029      	movs	r1, r5
 800bbb8:	f7f5 fdb0 	bl	800171c <__aeabi_ddiv>
 800bbbc:	b007      	add	sp, #28
 800bbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc0:	9903      	ldr	r1, [sp, #12]
 800bbc2:	1a0b      	subs	r3, r1, r0
 800bbc4:	e7f6      	b.n	800bbb4 <__ratio+0x40>

0800bbc6 <__copybits>:
 800bbc6:	b570      	push	{r4, r5, r6, lr}
 800bbc8:	0014      	movs	r4, r2
 800bbca:	0005      	movs	r5, r0
 800bbcc:	3901      	subs	r1, #1
 800bbce:	6913      	ldr	r3, [r2, #16]
 800bbd0:	1149      	asrs	r1, r1, #5
 800bbd2:	3101      	adds	r1, #1
 800bbd4:	0089      	lsls	r1, r1, #2
 800bbd6:	3414      	adds	r4, #20
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	1841      	adds	r1, r0, r1
 800bbdc:	18e3      	adds	r3, r4, r3
 800bbde:	42a3      	cmp	r3, r4
 800bbe0:	d80d      	bhi.n	800bbfe <__copybits+0x38>
 800bbe2:	0014      	movs	r4, r2
 800bbe4:	3411      	adds	r4, #17
 800bbe6:	2500      	movs	r5, #0
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	d803      	bhi.n	800bbf4 <__copybits+0x2e>
 800bbec:	1a9b      	subs	r3, r3, r2
 800bbee:	3b11      	subs	r3, #17
 800bbf0:	089b      	lsrs	r3, r3, #2
 800bbf2:	009d      	lsls	r5, r3, #2
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	1940      	adds	r0, r0, r5
 800bbf8:	4281      	cmp	r1, r0
 800bbfa:	d803      	bhi.n	800bc04 <__copybits+0x3e>
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
 800bbfe:	cc40      	ldmia	r4!, {r6}
 800bc00:	c540      	stmia	r5!, {r6}
 800bc02:	e7ec      	b.n	800bbde <__copybits+0x18>
 800bc04:	c008      	stmia	r0!, {r3}
 800bc06:	e7f7      	b.n	800bbf8 <__copybits+0x32>

0800bc08 <__any_on>:
 800bc08:	0002      	movs	r2, r0
 800bc0a:	6900      	ldr	r0, [r0, #16]
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	3214      	adds	r2, #20
 800bc10:	114b      	asrs	r3, r1, #5
 800bc12:	4298      	cmp	r0, r3
 800bc14:	db13      	blt.n	800bc3e <__any_on+0x36>
 800bc16:	dd0c      	ble.n	800bc32 <__any_on+0x2a>
 800bc18:	241f      	movs	r4, #31
 800bc1a:	0008      	movs	r0, r1
 800bc1c:	4020      	ands	r0, r4
 800bc1e:	4221      	tst	r1, r4
 800bc20:	d007      	beq.n	800bc32 <__any_on+0x2a>
 800bc22:	0099      	lsls	r1, r3, #2
 800bc24:	588c      	ldr	r4, [r1, r2]
 800bc26:	0021      	movs	r1, r4
 800bc28:	40c1      	lsrs	r1, r0
 800bc2a:	4081      	lsls	r1, r0
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	428c      	cmp	r4, r1
 800bc30:	d104      	bne.n	800bc3c <__any_on+0x34>
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	18d3      	adds	r3, r2, r3
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d803      	bhi.n	800bc42 <__any_on+0x3a>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	bd10      	pop	{r4, pc}
 800bc3e:	0003      	movs	r3, r0
 800bc40:	e7f7      	b.n	800bc32 <__any_on+0x2a>
 800bc42:	3b04      	subs	r3, #4
 800bc44:	6819      	ldr	r1, [r3, #0]
 800bc46:	2900      	cmp	r1, #0
 800bc48:	d0f5      	beq.n	800bc36 <__any_on+0x2e>
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	e7f6      	b.n	800bc3c <__any_on+0x34>

0800bc4e <__ascii_wctomb>:
 800bc4e:	0003      	movs	r3, r0
 800bc50:	1e08      	subs	r0, r1, #0
 800bc52:	d005      	beq.n	800bc60 <__ascii_wctomb+0x12>
 800bc54:	2aff      	cmp	r2, #255	; 0xff
 800bc56:	d904      	bls.n	800bc62 <__ascii_wctomb+0x14>
 800bc58:	228a      	movs	r2, #138	; 0x8a
 800bc5a:	2001      	movs	r0, #1
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	4240      	negs	r0, r0
 800bc60:	4770      	bx	lr
 800bc62:	2001      	movs	r0, #1
 800bc64:	700a      	strb	r2, [r1, #0]
 800bc66:	e7fb      	b.n	800bc60 <__ascii_wctomb+0x12>

0800bc68 <__ssputs_r>:
 800bc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	9203      	str	r2, [sp, #12]
 800bc70:	688e      	ldr	r6, [r1, #8]
 800bc72:	9a01      	ldr	r2, [sp, #4]
 800bc74:	0007      	movs	r7, r0
 800bc76:	000c      	movs	r4, r1
 800bc78:	680b      	ldr	r3, [r1, #0]
 800bc7a:	4296      	cmp	r6, r2
 800bc7c:	d831      	bhi.n	800bce2 <__ssputs_r+0x7a>
 800bc7e:	898a      	ldrh	r2, [r1, #12]
 800bc80:	2190      	movs	r1, #144	; 0x90
 800bc82:	00c9      	lsls	r1, r1, #3
 800bc84:	420a      	tst	r2, r1
 800bc86:	d029      	beq.n	800bcdc <__ssputs_r+0x74>
 800bc88:	2003      	movs	r0, #3
 800bc8a:	6921      	ldr	r1, [r4, #16]
 800bc8c:	1a5b      	subs	r3, r3, r1
 800bc8e:	9302      	str	r3, [sp, #8]
 800bc90:	6963      	ldr	r3, [r4, #20]
 800bc92:	4343      	muls	r3, r0
 800bc94:	0fdd      	lsrs	r5, r3, #31
 800bc96:	18ed      	adds	r5, r5, r3
 800bc98:	9b01      	ldr	r3, [sp, #4]
 800bc9a:	9802      	ldr	r0, [sp, #8]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	181b      	adds	r3, r3, r0
 800bca0:	106d      	asrs	r5, r5, #1
 800bca2:	42ab      	cmp	r3, r5
 800bca4:	d900      	bls.n	800bca8 <__ssputs_r+0x40>
 800bca6:	001d      	movs	r5, r3
 800bca8:	0552      	lsls	r2, r2, #21
 800bcaa:	d529      	bpl.n	800bd00 <__ssputs_r+0x98>
 800bcac:	0029      	movs	r1, r5
 800bcae:	0038      	movs	r0, r7
 800bcb0:	f7ff fa6e 	bl	800b190 <_malloc_r>
 800bcb4:	1e06      	subs	r6, r0, #0
 800bcb6:	d02d      	beq.n	800bd14 <__ssputs_r+0xac>
 800bcb8:	9a02      	ldr	r2, [sp, #8]
 800bcba:	6921      	ldr	r1, [r4, #16]
 800bcbc:	f7fd ffe4 	bl	8009c88 <memcpy>
 800bcc0:	89a2      	ldrh	r2, [r4, #12]
 800bcc2:	4b19      	ldr	r3, [pc, #100]	; (800bd28 <__ssputs_r+0xc0>)
 800bcc4:	401a      	ands	r2, r3
 800bcc6:	2380      	movs	r3, #128	; 0x80
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	81a3      	strh	r3, [r4, #12]
 800bccc:	9b02      	ldr	r3, [sp, #8]
 800bcce:	6126      	str	r6, [r4, #16]
 800bcd0:	18f6      	adds	r6, r6, r3
 800bcd2:	6026      	str	r6, [r4, #0]
 800bcd4:	6165      	str	r5, [r4, #20]
 800bcd6:	9e01      	ldr	r6, [sp, #4]
 800bcd8:	1aed      	subs	r5, r5, r3
 800bcda:	60a5      	str	r5, [r4, #8]
 800bcdc:	9b01      	ldr	r3, [sp, #4]
 800bcde:	429e      	cmp	r6, r3
 800bce0:	d900      	bls.n	800bce4 <__ssputs_r+0x7c>
 800bce2:	9e01      	ldr	r6, [sp, #4]
 800bce4:	0032      	movs	r2, r6
 800bce6:	9903      	ldr	r1, [sp, #12]
 800bce8:	6820      	ldr	r0, [r4, #0]
 800bcea:	f000 fb7f 	bl	800c3ec <memmove>
 800bcee:	2000      	movs	r0, #0
 800bcf0:	68a3      	ldr	r3, [r4, #8]
 800bcf2:	1b9b      	subs	r3, r3, r6
 800bcf4:	60a3      	str	r3, [r4, #8]
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	199b      	adds	r3, r3, r6
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	b005      	add	sp, #20
 800bcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd00:	002a      	movs	r2, r5
 800bd02:	0038      	movs	r0, r7
 800bd04:	f000 fc07 	bl	800c516 <_realloc_r>
 800bd08:	1e06      	subs	r6, r0, #0
 800bd0a:	d1df      	bne.n	800bccc <__ssputs_r+0x64>
 800bd0c:	0038      	movs	r0, r7
 800bd0e:	6921      	ldr	r1, [r4, #16]
 800bd10:	f7fe fe6c 	bl	800a9ec <_free_r>
 800bd14:	230c      	movs	r3, #12
 800bd16:	2001      	movs	r0, #1
 800bd18:	603b      	str	r3, [r7, #0]
 800bd1a:	89a2      	ldrh	r2, [r4, #12]
 800bd1c:	3334      	adds	r3, #52	; 0x34
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	4240      	negs	r0, r0
 800bd24:	e7ea      	b.n	800bcfc <__ssputs_r+0x94>
 800bd26:	46c0      	nop			; (mov r8, r8)
 800bd28:	fffffb7f 	.word	0xfffffb7f

0800bd2c <_svfiprintf_r>:
 800bd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd2e:	b0a1      	sub	sp, #132	; 0x84
 800bd30:	9003      	str	r0, [sp, #12]
 800bd32:	001d      	movs	r5, r3
 800bd34:	898b      	ldrh	r3, [r1, #12]
 800bd36:	000f      	movs	r7, r1
 800bd38:	0016      	movs	r6, r2
 800bd3a:	061b      	lsls	r3, r3, #24
 800bd3c:	d511      	bpl.n	800bd62 <_svfiprintf_r+0x36>
 800bd3e:	690b      	ldr	r3, [r1, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10e      	bne.n	800bd62 <_svfiprintf_r+0x36>
 800bd44:	2140      	movs	r1, #64	; 0x40
 800bd46:	f7ff fa23 	bl	800b190 <_malloc_r>
 800bd4a:	6038      	str	r0, [r7, #0]
 800bd4c:	6138      	str	r0, [r7, #16]
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d105      	bne.n	800bd5e <_svfiprintf_r+0x32>
 800bd52:	230c      	movs	r3, #12
 800bd54:	9a03      	ldr	r2, [sp, #12]
 800bd56:	3801      	subs	r0, #1
 800bd58:	6013      	str	r3, [r2, #0]
 800bd5a:	b021      	add	sp, #132	; 0x84
 800bd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5e:	2340      	movs	r3, #64	; 0x40
 800bd60:	617b      	str	r3, [r7, #20]
 800bd62:	2300      	movs	r3, #0
 800bd64:	ac08      	add	r4, sp, #32
 800bd66:	6163      	str	r3, [r4, #20]
 800bd68:	3320      	adds	r3, #32
 800bd6a:	7663      	strb	r3, [r4, #25]
 800bd6c:	3310      	adds	r3, #16
 800bd6e:	76a3      	strb	r3, [r4, #26]
 800bd70:	9507      	str	r5, [sp, #28]
 800bd72:	0035      	movs	r5, r6
 800bd74:	782b      	ldrb	r3, [r5, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d001      	beq.n	800bd7e <_svfiprintf_r+0x52>
 800bd7a:	2b25      	cmp	r3, #37	; 0x25
 800bd7c:	d148      	bne.n	800be10 <_svfiprintf_r+0xe4>
 800bd7e:	1bab      	subs	r3, r5, r6
 800bd80:	9305      	str	r3, [sp, #20]
 800bd82:	42b5      	cmp	r5, r6
 800bd84:	d00b      	beq.n	800bd9e <_svfiprintf_r+0x72>
 800bd86:	0032      	movs	r2, r6
 800bd88:	0039      	movs	r1, r7
 800bd8a:	9803      	ldr	r0, [sp, #12]
 800bd8c:	f7ff ff6c 	bl	800bc68 <__ssputs_r>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d100      	bne.n	800bd96 <_svfiprintf_r+0x6a>
 800bd94:	e0af      	b.n	800bef6 <_svfiprintf_r+0x1ca>
 800bd96:	6963      	ldr	r3, [r4, #20]
 800bd98:	9a05      	ldr	r2, [sp, #20]
 800bd9a:	189b      	adds	r3, r3, r2
 800bd9c:	6163      	str	r3, [r4, #20]
 800bd9e:	782b      	ldrb	r3, [r5, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d100      	bne.n	800bda6 <_svfiprintf_r+0x7a>
 800bda4:	e0a7      	b.n	800bef6 <_svfiprintf_r+0x1ca>
 800bda6:	2201      	movs	r2, #1
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4252      	negs	r2, r2
 800bdac:	6062      	str	r2, [r4, #4]
 800bdae:	a904      	add	r1, sp, #16
 800bdb0:	3254      	adds	r2, #84	; 0x54
 800bdb2:	1852      	adds	r2, r2, r1
 800bdb4:	1c6e      	adds	r6, r5, #1
 800bdb6:	6023      	str	r3, [r4, #0]
 800bdb8:	60e3      	str	r3, [r4, #12]
 800bdba:	60a3      	str	r3, [r4, #8]
 800bdbc:	7013      	strb	r3, [r2, #0]
 800bdbe:	65a3      	str	r3, [r4, #88]	; 0x58
 800bdc0:	4b55      	ldr	r3, [pc, #340]	; (800bf18 <_svfiprintf_r+0x1ec>)
 800bdc2:	2205      	movs	r2, #5
 800bdc4:	0018      	movs	r0, r3
 800bdc6:	7831      	ldrb	r1, [r6, #0]
 800bdc8:	9305      	str	r3, [sp, #20]
 800bdca:	f7fd ff52 	bl	8009c72 <memchr>
 800bdce:	1c75      	adds	r5, r6, #1
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d11f      	bne.n	800be14 <_svfiprintf_r+0xe8>
 800bdd4:	6822      	ldr	r2, [r4, #0]
 800bdd6:	06d3      	lsls	r3, r2, #27
 800bdd8:	d504      	bpl.n	800bde4 <_svfiprintf_r+0xb8>
 800bdda:	2353      	movs	r3, #83	; 0x53
 800bddc:	a904      	add	r1, sp, #16
 800bdde:	185b      	adds	r3, r3, r1
 800bde0:	2120      	movs	r1, #32
 800bde2:	7019      	strb	r1, [r3, #0]
 800bde4:	0713      	lsls	r3, r2, #28
 800bde6:	d504      	bpl.n	800bdf2 <_svfiprintf_r+0xc6>
 800bde8:	2353      	movs	r3, #83	; 0x53
 800bdea:	a904      	add	r1, sp, #16
 800bdec:	185b      	adds	r3, r3, r1
 800bdee:	212b      	movs	r1, #43	; 0x2b
 800bdf0:	7019      	strb	r1, [r3, #0]
 800bdf2:	7833      	ldrb	r3, [r6, #0]
 800bdf4:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf6:	d016      	beq.n	800be26 <_svfiprintf_r+0xfa>
 800bdf8:	0035      	movs	r5, r6
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	200a      	movs	r0, #10
 800bdfe:	68e3      	ldr	r3, [r4, #12]
 800be00:	782a      	ldrb	r2, [r5, #0]
 800be02:	1c6e      	adds	r6, r5, #1
 800be04:	3a30      	subs	r2, #48	; 0x30
 800be06:	2a09      	cmp	r2, #9
 800be08:	d94e      	bls.n	800bea8 <_svfiprintf_r+0x17c>
 800be0a:	2900      	cmp	r1, #0
 800be0c:	d111      	bne.n	800be32 <_svfiprintf_r+0x106>
 800be0e:	e017      	b.n	800be40 <_svfiprintf_r+0x114>
 800be10:	3501      	adds	r5, #1
 800be12:	e7af      	b.n	800bd74 <_svfiprintf_r+0x48>
 800be14:	9b05      	ldr	r3, [sp, #20]
 800be16:	6822      	ldr	r2, [r4, #0]
 800be18:	1ac0      	subs	r0, r0, r3
 800be1a:	2301      	movs	r3, #1
 800be1c:	4083      	lsls	r3, r0
 800be1e:	4313      	orrs	r3, r2
 800be20:	002e      	movs	r6, r5
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	e7cc      	b.n	800bdc0 <_svfiprintf_r+0x94>
 800be26:	9b07      	ldr	r3, [sp, #28]
 800be28:	1d19      	adds	r1, r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	9107      	str	r1, [sp, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	db01      	blt.n	800be36 <_svfiprintf_r+0x10a>
 800be32:	930b      	str	r3, [sp, #44]	; 0x2c
 800be34:	e004      	b.n	800be40 <_svfiprintf_r+0x114>
 800be36:	425b      	negs	r3, r3
 800be38:	60e3      	str	r3, [r4, #12]
 800be3a:	2302      	movs	r3, #2
 800be3c:	4313      	orrs	r3, r2
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	782b      	ldrb	r3, [r5, #0]
 800be42:	2b2e      	cmp	r3, #46	; 0x2e
 800be44:	d10a      	bne.n	800be5c <_svfiprintf_r+0x130>
 800be46:	786b      	ldrb	r3, [r5, #1]
 800be48:	2b2a      	cmp	r3, #42	; 0x2a
 800be4a:	d135      	bne.n	800beb8 <_svfiprintf_r+0x18c>
 800be4c:	9b07      	ldr	r3, [sp, #28]
 800be4e:	3502      	adds	r5, #2
 800be50:	1d1a      	adds	r2, r3, #4
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	9207      	str	r2, [sp, #28]
 800be56:	2b00      	cmp	r3, #0
 800be58:	db2b      	blt.n	800beb2 <_svfiprintf_r+0x186>
 800be5a:	9309      	str	r3, [sp, #36]	; 0x24
 800be5c:	4e2f      	ldr	r6, [pc, #188]	; (800bf1c <_svfiprintf_r+0x1f0>)
 800be5e:	2203      	movs	r2, #3
 800be60:	0030      	movs	r0, r6
 800be62:	7829      	ldrb	r1, [r5, #0]
 800be64:	f7fd ff05 	bl	8009c72 <memchr>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d006      	beq.n	800be7a <_svfiprintf_r+0x14e>
 800be6c:	2340      	movs	r3, #64	; 0x40
 800be6e:	1b80      	subs	r0, r0, r6
 800be70:	4083      	lsls	r3, r0
 800be72:	6822      	ldr	r2, [r4, #0]
 800be74:	3501      	adds	r5, #1
 800be76:	4313      	orrs	r3, r2
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	7829      	ldrb	r1, [r5, #0]
 800be7c:	2206      	movs	r2, #6
 800be7e:	4828      	ldr	r0, [pc, #160]	; (800bf20 <_svfiprintf_r+0x1f4>)
 800be80:	1c6e      	adds	r6, r5, #1
 800be82:	7621      	strb	r1, [r4, #24]
 800be84:	f7fd fef5 	bl	8009c72 <memchr>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d03c      	beq.n	800bf06 <_svfiprintf_r+0x1da>
 800be8c:	4b25      	ldr	r3, [pc, #148]	; (800bf24 <_svfiprintf_r+0x1f8>)
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d125      	bne.n	800bede <_svfiprintf_r+0x1b2>
 800be92:	2207      	movs	r2, #7
 800be94:	9b07      	ldr	r3, [sp, #28]
 800be96:	3307      	adds	r3, #7
 800be98:	4393      	bics	r3, r2
 800be9a:	3308      	adds	r3, #8
 800be9c:	9307      	str	r3, [sp, #28]
 800be9e:	6963      	ldr	r3, [r4, #20]
 800bea0:	9a04      	ldr	r2, [sp, #16]
 800bea2:	189b      	adds	r3, r3, r2
 800bea4:	6163      	str	r3, [r4, #20]
 800bea6:	e764      	b.n	800bd72 <_svfiprintf_r+0x46>
 800bea8:	4343      	muls	r3, r0
 800beaa:	0035      	movs	r5, r6
 800beac:	2101      	movs	r1, #1
 800beae:	189b      	adds	r3, r3, r2
 800beb0:	e7a6      	b.n	800be00 <_svfiprintf_r+0xd4>
 800beb2:	2301      	movs	r3, #1
 800beb4:	425b      	negs	r3, r3
 800beb6:	e7d0      	b.n	800be5a <_svfiprintf_r+0x12e>
 800beb8:	2300      	movs	r3, #0
 800beba:	200a      	movs	r0, #10
 800bebc:	001a      	movs	r2, r3
 800bebe:	3501      	adds	r5, #1
 800bec0:	6063      	str	r3, [r4, #4]
 800bec2:	7829      	ldrb	r1, [r5, #0]
 800bec4:	1c6e      	adds	r6, r5, #1
 800bec6:	3930      	subs	r1, #48	; 0x30
 800bec8:	2909      	cmp	r1, #9
 800beca:	d903      	bls.n	800bed4 <_svfiprintf_r+0x1a8>
 800becc:	2b00      	cmp	r3, #0
 800bece:	d0c5      	beq.n	800be5c <_svfiprintf_r+0x130>
 800bed0:	9209      	str	r2, [sp, #36]	; 0x24
 800bed2:	e7c3      	b.n	800be5c <_svfiprintf_r+0x130>
 800bed4:	4342      	muls	r2, r0
 800bed6:	0035      	movs	r5, r6
 800bed8:	2301      	movs	r3, #1
 800beda:	1852      	adds	r2, r2, r1
 800bedc:	e7f1      	b.n	800bec2 <_svfiprintf_r+0x196>
 800bede:	aa07      	add	r2, sp, #28
 800bee0:	9200      	str	r2, [sp, #0]
 800bee2:	0021      	movs	r1, r4
 800bee4:	003a      	movs	r2, r7
 800bee6:	4b10      	ldr	r3, [pc, #64]	; (800bf28 <_svfiprintf_r+0x1fc>)
 800bee8:	9803      	ldr	r0, [sp, #12]
 800beea:	f7fc fe05 	bl	8008af8 <_printf_float>
 800beee:	9004      	str	r0, [sp, #16]
 800bef0:	9b04      	ldr	r3, [sp, #16]
 800bef2:	3301      	adds	r3, #1
 800bef4:	d1d3      	bne.n	800be9e <_svfiprintf_r+0x172>
 800bef6:	89bb      	ldrh	r3, [r7, #12]
 800bef8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800befa:	065b      	lsls	r3, r3, #25
 800befc:	d400      	bmi.n	800bf00 <_svfiprintf_r+0x1d4>
 800befe:	e72c      	b.n	800bd5a <_svfiprintf_r+0x2e>
 800bf00:	2001      	movs	r0, #1
 800bf02:	4240      	negs	r0, r0
 800bf04:	e729      	b.n	800bd5a <_svfiprintf_r+0x2e>
 800bf06:	aa07      	add	r2, sp, #28
 800bf08:	9200      	str	r2, [sp, #0]
 800bf0a:	0021      	movs	r1, r4
 800bf0c:	003a      	movs	r2, r7
 800bf0e:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <_svfiprintf_r+0x1fc>)
 800bf10:	9803      	ldr	r0, [sp, #12]
 800bf12:	f7fd f8b7 	bl	8009084 <_printf_i>
 800bf16:	e7ea      	b.n	800beee <_svfiprintf_r+0x1c2>
 800bf18:	0800cc0c 	.word	0x0800cc0c
 800bf1c:	0800cc12 	.word	0x0800cc12
 800bf20:	0800cc16 	.word	0x0800cc16
 800bf24:	08008af9 	.word	0x08008af9
 800bf28:	0800bc69 	.word	0x0800bc69

0800bf2c <__sfputc_r>:
 800bf2c:	6893      	ldr	r3, [r2, #8]
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	3b01      	subs	r3, #1
 800bf32:	6093      	str	r3, [r2, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	da04      	bge.n	800bf42 <__sfputc_r+0x16>
 800bf38:	6994      	ldr	r4, [r2, #24]
 800bf3a:	42a3      	cmp	r3, r4
 800bf3c:	db07      	blt.n	800bf4e <__sfputc_r+0x22>
 800bf3e:	290a      	cmp	r1, #10
 800bf40:	d005      	beq.n	800bf4e <__sfputc_r+0x22>
 800bf42:	6813      	ldr	r3, [r2, #0]
 800bf44:	1c58      	adds	r0, r3, #1
 800bf46:	6010      	str	r0, [r2, #0]
 800bf48:	7019      	strb	r1, [r3, #0]
 800bf4a:	0008      	movs	r0, r1
 800bf4c:	bd10      	pop	{r4, pc}
 800bf4e:	f7fd fd51 	bl	80099f4 <__swbuf_r>
 800bf52:	0001      	movs	r1, r0
 800bf54:	e7f9      	b.n	800bf4a <__sfputc_r+0x1e>

0800bf56 <__sfputs_r>:
 800bf56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf58:	0006      	movs	r6, r0
 800bf5a:	000f      	movs	r7, r1
 800bf5c:	0014      	movs	r4, r2
 800bf5e:	18d5      	adds	r5, r2, r3
 800bf60:	42ac      	cmp	r4, r5
 800bf62:	d101      	bne.n	800bf68 <__sfputs_r+0x12>
 800bf64:	2000      	movs	r0, #0
 800bf66:	e007      	b.n	800bf78 <__sfputs_r+0x22>
 800bf68:	7821      	ldrb	r1, [r4, #0]
 800bf6a:	003a      	movs	r2, r7
 800bf6c:	0030      	movs	r0, r6
 800bf6e:	f7ff ffdd 	bl	800bf2c <__sfputc_r>
 800bf72:	3401      	adds	r4, #1
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d1f3      	bne.n	800bf60 <__sfputs_r+0xa>
 800bf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf7c <_vfiprintf_r>:
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7e:	b0a1      	sub	sp, #132	; 0x84
 800bf80:	000f      	movs	r7, r1
 800bf82:	0015      	movs	r5, r2
 800bf84:	001e      	movs	r6, r3
 800bf86:	9003      	str	r0, [sp, #12]
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d004      	beq.n	800bf96 <_vfiprintf_r+0x1a>
 800bf8c:	6a03      	ldr	r3, [r0, #32]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <_vfiprintf_r+0x1a>
 800bf92:	f7fd fc1f 	bl	80097d4 <__sinit>
 800bf96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf98:	07db      	lsls	r3, r3, #31
 800bf9a:	d405      	bmi.n	800bfa8 <_vfiprintf_r+0x2c>
 800bf9c:	89bb      	ldrh	r3, [r7, #12]
 800bf9e:	059b      	lsls	r3, r3, #22
 800bfa0:	d402      	bmi.n	800bfa8 <_vfiprintf_r+0x2c>
 800bfa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bfa4:	f7fd fe63 	bl	8009c6e <__retarget_lock_acquire_recursive>
 800bfa8:	89bb      	ldrh	r3, [r7, #12]
 800bfaa:	071b      	lsls	r3, r3, #28
 800bfac:	d502      	bpl.n	800bfb4 <_vfiprintf_r+0x38>
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d113      	bne.n	800bfdc <_vfiprintf_r+0x60>
 800bfb4:	0039      	movs	r1, r7
 800bfb6:	9803      	ldr	r0, [sp, #12]
 800bfb8:	f7fd fd5e 	bl	8009a78 <__swsetup_r>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d00d      	beq.n	800bfdc <_vfiprintf_r+0x60>
 800bfc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfc2:	07db      	lsls	r3, r3, #31
 800bfc4:	d503      	bpl.n	800bfce <_vfiprintf_r+0x52>
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	4240      	negs	r0, r0
 800bfca:	b021      	add	sp, #132	; 0x84
 800bfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfce:	89bb      	ldrh	r3, [r7, #12]
 800bfd0:	059b      	lsls	r3, r3, #22
 800bfd2:	d4f8      	bmi.n	800bfc6 <_vfiprintf_r+0x4a>
 800bfd4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bfd6:	f7fd fe4b 	bl	8009c70 <__retarget_lock_release_recursive>
 800bfda:	e7f4      	b.n	800bfc6 <_vfiprintf_r+0x4a>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	ac08      	add	r4, sp, #32
 800bfe0:	6163      	str	r3, [r4, #20]
 800bfe2:	3320      	adds	r3, #32
 800bfe4:	7663      	strb	r3, [r4, #25]
 800bfe6:	3310      	adds	r3, #16
 800bfe8:	76a3      	strb	r3, [r4, #26]
 800bfea:	9607      	str	r6, [sp, #28]
 800bfec:	002e      	movs	r6, r5
 800bfee:	7833      	ldrb	r3, [r6, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <_vfiprintf_r+0x7c>
 800bff4:	2b25      	cmp	r3, #37	; 0x25
 800bff6:	d148      	bne.n	800c08a <_vfiprintf_r+0x10e>
 800bff8:	1b73      	subs	r3, r6, r5
 800bffa:	9305      	str	r3, [sp, #20]
 800bffc:	42ae      	cmp	r6, r5
 800bffe:	d00b      	beq.n	800c018 <_vfiprintf_r+0x9c>
 800c000:	002a      	movs	r2, r5
 800c002:	0039      	movs	r1, r7
 800c004:	9803      	ldr	r0, [sp, #12]
 800c006:	f7ff ffa6 	bl	800bf56 <__sfputs_r>
 800c00a:	3001      	adds	r0, #1
 800c00c:	d100      	bne.n	800c010 <_vfiprintf_r+0x94>
 800c00e:	e0af      	b.n	800c170 <_vfiprintf_r+0x1f4>
 800c010:	6963      	ldr	r3, [r4, #20]
 800c012:	9a05      	ldr	r2, [sp, #20]
 800c014:	189b      	adds	r3, r3, r2
 800c016:	6163      	str	r3, [r4, #20]
 800c018:	7833      	ldrb	r3, [r6, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d100      	bne.n	800c020 <_vfiprintf_r+0xa4>
 800c01e:	e0a7      	b.n	800c170 <_vfiprintf_r+0x1f4>
 800c020:	2201      	movs	r2, #1
 800c022:	2300      	movs	r3, #0
 800c024:	4252      	negs	r2, r2
 800c026:	6062      	str	r2, [r4, #4]
 800c028:	a904      	add	r1, sp, #16
 800c02a:	3254      	adds	r2, #84	; 0x54
 800c02c:	1852      	adds	r2, r2, r1
 800c02e:	1c75      	adds	r5, r6, #1
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	60e3      	str	r3, [r4, #12]
 800c034:	60a3      	str	r3, [r4, #8]
 800c036:	7013      	strb	r3, [r2, #0]
 800c038:	65a3      	str	r3, [r4, #88]	; 0x58
 800c03a:	4b59      	ldr	r3, [pc, #356]	; (800c1a0 <_vfiprintf_r+0x224>)
 800c03c:	2205      	movs	r2, #5
 800c03e:	0018      	movs	r0, r3
 800c040:	7829      	ldrb	r1, [r5, #0]
 800c042:	9305      	str	r3, [sp, #20]
 800c044:	f7fd fe15 	bl	8009c72 <memchr>
 800c048:	1c6e      	adds	r6, r5, #1
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d11f      	bne.n	800c08e <_vfiprintf_r+0x112>
 800c04e:	6822      	ldr	r2, [r4, #0]
 800c050:	06d3      	lsls	r3, r2, #27
 800c052:	d504      	bpl.n	800c05e <_vfiprintf_r+0xe2>
 800c054:	2353      	movs	r3, #83	; 0x53
 800c056:	a904      	add	r1, sp, #16
 800c058:	185b      	adds	r3, r3, r1
 800c05a:	2120      	movs	r1, #32
 800c05c:	7019      	strb	r1, [r3, #0]
 800c05e:	0713      	lsls	r3, r2, #28
 800c060:	d504      	bpl.n	800c06c <_vfiprintf_r+0xf0>
 800c062:	2353      	movs	r3, #83	; 0x53
 800c064:	a904      	add	r1, sp, #16
 800c066:	185b      	adds	r3, r3, r1
 800c068:	212b      	movs	r1, #43	; 0x2b
 800c06a:	7019      	strb	r1, [r3, #0]
 800c06c:	782b      	ldrb	r3, [r5, #0]
 800c06e:	2b2a      	cmp	r3, #42	; 0x2a
 800c070:	d016      	beq.n	800c0a0 <_vfiprintf_r+0x124>
 800c072:	002e      	movs	r6, r5
 800c074:	2100      	movs	r1, #0
 800c076:	200a      	movs	r0, #10
 800c078:	68e3      	ldr	r3, [r4, #12]
 800c07a:	7832      	ldrb	r2, [r6, #0]
 800c07c:	1c75      	adds	r5, r6, #1
 800c07e:	3a30      	subs	r2, #48	; 0x30
 800c080:	2a09      	cmp	r2, #9
 800c082:	d94e      	bls.n	800c122 <_vfiprintf_r+0x1a6>
 800c084:	2900      	cmp	r1, #0
 800c086:	d111      	bne.n	800c0ac <_vfiprintf_r+0x130>
 800c088:	e017      	b.n	800c0ba <_vfiprintf_r+0x13e>
 800c08a:	3601      	adds	r6, #1
 800c08c:	e7af      	b.n	800bfee <_vfiprintf_r+0x72>
 800c08e:	9b05      	ldr	r3, [sp, #20]
 800c090:	6822      	ldr	r2, [r4, #0]
 800c092:	1ac0      	subs	r0, r0, r3
 800c094:	2301      	movs	r3, #1
 800c096:	4083      	lsls	r3, r0
 800c098:	4313      	orrs	r3, r2
 800c09a:	0035      	movs	r5, r6
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	e7cc      	b.n	800c03a <_vfiprintf_r+0xbe>
 800c0a0:	9b07      	ldr	r3, [sp, #28]
 800c0a2:	1d19      	adds	r1, r3, #4
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	9107      	str	r1, [sp, #28]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	db01      	blt.n	800c0b0 <_vfiprintf_r+0x134>
 800c0ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0ae:	e004      	b.n	800c0ba <_vfiprintf_r+0x13e>
 800c0b0:	425b      	negs	r3, r3
 800c0b2:	60e3      	str	r3, [r4, #12]
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	7833      	ldrb	r3, [r6, #0]
 800c0bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c0be:	d10a      	bne.n	800c0d6 <_vfiprintf_r+0x15a>
 800c0c0:	7873      	ldrb	r3, [r6, #1]
 800c0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0c4:	d135      	bne.n	800c132 <_vfiprintf_r+0x1b6>
 800c0c6:	9b07      	ldr	r3, [sp, #28]
 800c0c8:	3602      	adds	r6, #2
 800c0ca:	1d1a      	adds	r2, r3, #4
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	9207      	str	r2, [sp, #28]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	db2b      	blt.n	800c12c <_vfiprintf_r+0x1b0>
 800c0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d6:	4d33      	ldr	r5, [pc, #204]	; (800c1a4 <_vfiprintf_r+0x228>)
 800c0d8:	2203      	movs	r2, #3
 800c0da:	0028      	movs	r0, r5
 800c0dc:	7831      	ldrb	r1, [r6, #0]
 800c0de:	f7fd fdc8 	bl	8009c72 <memchr>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d006      	beq.n	800c0f4 <_vfiprintf_r+0x178>
 800c0e6:	2340      	movs	r3, #64	; 0x40
 800c0e8:	1b40      	subs	r0, r0, r5
 800c0ea:	4083      	lsls	r3, r0
 800c0ec:	6822      	ldr	r2, [r4, #0]
 800c0ee:	3601      	adds	r6, #1
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	7831      	ldrb	r1, [r6, #0]
 800c0f6:	2206      	movs	r2, #6
 800c0f8:	482b      	ldr	r0, [pc, #172]	; (800c1a8 <_vfiprintf_r+0x22c>)
 800c0fa:	1c75      	adds	r5, r6, #1
 800c0fc:	7621      	strb	r1, [r4, #24]
 800c0fe:	f7fd fdb8 	bl	8009c72 <memchr>
 800c102:	2800      	cmp	r0, #0
 800c104:	d043      	beq.n	800c18e <_vfiprintf_r+0x212>
 800c106:	4b29      	ldr	r3, [pc, #164]	; (800c1ac <_vfiprintf_r+0x230>)
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d125      	bne.n	800c158 <_vfiprintf_r+0x1dc>
 800c10c:	2207      	movs	r2, #7
 800c10e:	9b07      	ldr	r3, [sp, #28]
 800c110:	3307      	adds	r3, #7
 800c112:	4393      	bics	r3, r2
 800c114:	3308      	adds	r3, #8
 800c116:	9307      	str	r3, [sp, #28]
 800c118:	6963      	ldr	r3, [r4, #20]
 800c11a:	9a04      	ldr	r2, [sp, #16]
 800c11c:	189b      	adds	r3, r3, r2
 800c11e:	6163      	str	r3, [r4, #20]
 800c120:	e764      	b.n	800bfec <_vfiprintf_r+0x70>
 800c122:	4343      	muls	r3, r0
 800c124:	002e      	movs	r6, r5
 800c126:	2101      	movs	r1, #1
 800c128:	189b      	adds	r3, r3, r2
 800c12a:	e7a6      	b.n	800c07a <_vfiprintf_r+0xfe>
 800c12c:	2301      	movs	r3, #1
 800c12e:	425b      	negs	r3, r3
 800c130:	e7d0      	b.n	800c0d4 <_vfiprintf_r+0x158>
 800c132:	2300      	movs	r3, #0
 800c134:	200a      	movs	r0, #10
 800c136:	001a      	movs	r2, r3
 800c138:	3601      	adds	r6, #1
 800c13a:	6063      	str	r3, [r4, #4]
 800c13c:	7831      	ldrb	r1, [r6, #0]
 800c13e:	1c75      	adds	r5, r6, #1
 800c140:	3930      	subs	r1, #48	; 0x30
 800c142:	2909      	cmp	r1, #9
 800c144:	d903      	bls.n	800c14e <_vfiprintf_r+0x1d2>
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0c5      	beq.n	800c0d6 <_vfiprintf_r+0x15a>
 800c14a:	9209      	str	r2, [sp, #36]	; 0x24
 800c14c:	e7c3      	b.n	800c0d6 <_vfiprintf_r+0x15a>
 800c14e:	4342      	muls	r2, r0
 800c150:	002e      	movs	r6, r5
 800c152:	2301      	movs	r3, #1
 800c154:	1852      	adds	r2, r2, r1
 800c156:	e7f1      	b.n	800c13c <_vfiprintf_r+0x1c0>
 800c158:	aa07      	add	r2, sp, #28
 800c15a:	9200      	str	r2, [sp, #0]
 800c15c:	0021      	movs	r1, r4
 800c15e:	003a      	movs	r2, r7
 800c160:	4b13      	ldr	r3, [pc, #76]	; (800c1b0 <_vfiprintf_r+0x234>)
 800c162:	9803      	ldr	r0, [sp, #12]
 800c164:	f7fc fcc8 	bl	8008af8 <_printf_float>
 800c168:	9004      	str	r0, [sp, #16]
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	3301      	adds	r3, #1
 800c16e:	d1d3      	bne.n	800c118 <_vfiprintf_r+0x19c>
 800c170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c172:	07db      	lsls	r3, r3, #31
 800c174:	d405      	bmi.n	800c182 <_vfiprintf_r+0x206>
 800c176:	89bb      	ldrh	r3, [r7, #12]
 800c178:	059b      	lsls	r3, r3, #22
 800c17a:	d402      	bmi.n	800c182 <_vfiprintf_r+0x206>
 800c17c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c17e:	f7fd fd77 	bl	8009c70 <__retarget_lock_release_recursive>
 800c182:	89bb      	ldrh	r3, [r7, #12]
 800c184:	065b      	lsls	r3, r3, #25
 800c186:	d500      	bpl.n	800c18a <_vfiprintf_r+0x20e>
 800c188:	e71d      	b.n	800bfc6 <_vfiprintf_r+0x4a>
 800c18a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c18c:	e71d      	b.n	800bfca <_vfiprintf_r+0x4e>
 800c18e:	aa07      	add	r2, sp, #28
 800c190:	9200      	str	r2, [sp, #0]
 800c192:	0021      	movs	r1, r4
 800c194:	003a      	movs	r2, r7
 800c196:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <_vfiprintf_r+0x234>)
 800c198:	9803      	ldr	r0, [sp, #12]
 800c19a:	f7fc ff73 	bl	8009084 <_printf_i>
 800c19e:	e7e3      	b.n	800c168 <_vfiprintf_r+0x1ec>
 800c1a0:	0800cc0c 	.word	0x0800cc0c
 800c1a4:	0800cc12 	.word	0x0800cc12
 800c1a8:	0800cc16 	.word	0x0800cc16
 800c1ac:	08008af9 	.word	0x08008af9
 800c1b0:	0800bf57 	.word	0x0800bf57

0800c1b4 <__sflush_r>:
 800c1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1b6:	898b      	ldrh	r3, [r1, #12]
 800c1b8:	0005      	movs	r5, r0
 800c1ba:	000c      	movs	r4, r1
 800c1bc:	071a      	lsls	r2, r3, #28
 800c1be:	d45c      	bmi.n	800c27a <__sflush_r+0xc6>
 800c1c0:	684a      	ldr	r2, [r1, #4]
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	dc04      	bgt.n	800c1d0 <__sflush_r+0x1c>
 800c1c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	dc01      	bgt.n	800c1d0 <__sflush_r+0x1c>
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1d2:	2f00      	cmp	r7, #0
 800c1d4:	d0fa      	beq.n	800c1cc <__sflush_r+0x18>
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2080      	movs	r0, #128	; 0x80
 800c1da:	682e      	ldr	r6, [r5, #0]
 800c1dc:	602a      	str	r2, [r5, #0]
 800c1de:	001a      	movs	r2, r3
 800c1e0:	0140      	lsls	r0, r0, #5
 800c1e2:	6a21      	ldr	r1, [r4, #32]
 800c1e4:	4002      	ands	r2, r0
 800c1e6:	4203      	tst	r3, r0
 800c1e8:	d034      	beq.n	800c254 <__sflush_r+0xa0>
 800c1ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	075b      	lsls	r3, r3, #29
 800c1f0:	d506      	bpl.n	800c200 <__sflush_r+0x4c>
 800c1f2:	6863      	ldr	r3, [r4, #4]
 800c1f4:	1ac0      	subs	r0, r0, r3
 800c1f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <__sflush_r+0x4c>
 800c1fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1fe:	1ac0      	subs	r0, r0, r3
 800c200:	0002      	movs	r2, r0
 800c202:	2300      	movs	r3, #0
 800c204:	0028      	movs	r0, r5
 800c206:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c208:	6a21      	ldr	r1, [r4, #32]
 800c20a:	47b8      	blx	r7
 800c20c:	89a2      	ldrh	r2, [r4, #12]
 800c20e:	1c43      	adds	r3, r0, #1
 800c210:	d106      	bne.n	800c220 <__sflush_r+0x6c>
 800c212:	6829      	ldr	r1, [r5, #0]
 800c214:	291d      	cmp	r1, #29
 800c216:	d82c      	bhi.n	800c272 <__sflush_r+0xbe>
 800c218:	4b2a      	ldr	r3, [pc, #168]	; (800c2c4 <__sflush_r+0x110>)
 800c21a:	410b      	asrs	r3, r1
 800c21c:	07db      	lsls	r3, r3, #31
 800c21e:	d428      	bmi.n	800c272 <__sflush_r+0xbe>
 800c220:	2300      	movs	r3, #0
 800c222:	6063      	str	r3, [r4, #4]
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	04d2      	lsls	r2, r2, #19
 800c22a:	d505      	bpl.n	800c238 <__sflush_r+0x84>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <__sflush_r+0x82>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d100      	bne.n	800c238 <__sflush_r+0x84>
 800c236:	6560      	str	r0, [r4, #84]	; 0x54
 800c238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c23a:	602e      	str	r6, [r5, #0]
 800c23c:	2900      	cmp	r1, #0
 800c23e:	d0c5      	beq.n	800c1cc <__sflush_r+0x18>
 800c240:	0023      	movs	r3, r4
 800c242:	3344      	adds	r3, #68	; 0x44
 800c244:	4299      	cmp	r1, r3
 800c246:	d002      	beq.n	800c24e <__sflush_r+0x9a>
 800c248:	0028      	movs	r0, r5
 800c24a:	f7fe fbcf 	bl	800a9ec <_free_r>
 800c24e:	2000      	movs	r0, #0
 800c250:	6360      	str	r0, [r4, #52]	; 0x34
 800c252:	e7bc      	b.n	800c1ce <__sflush_r+0x1a>
 800c254:	2301      	movs	r3, #1
 800c256:	0028      	movs	r0, r5
 800c258:	47b8      	blx	r7
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	d1c6      	bne.n	800c1ec <__sflush_r+0x38>
 800c25e:	682b      	ldr	r3, [r5, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d0c3      	beq.n	800c1ec <__sflush_r+0x38>
 800c264:	2b1d      	cmp	r3, #29
 800c266:	d001      	beq.n	800c26c <__sflush_r+0xb8>
 800c268:	2b16      	cmp	r3, #22
 800c26a:	d101      	bne.n	800c270 <__sflush_r+0xbc>
 800c26c:	602e      	str	r6, [r5, #0]
 800c26e:	e7ad      	b.n	800c1cc <__sflush_r+0x18>
 800c270:	89a2      	ldrh	r2, [r4, #12]
 800c272:	2340      	movs	r3, #64	; 0x40
 800c274:	4313      	orrs	r3, r2
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	e7a9      	b.n	800c1ce <__sflush_r+0x1a>
 800c27a:	690e      	ldr	r6, [r1, #16]
 800c27c:	2e00      	cmp	r6, #0
 800c27e:	d0a5      	beq.n	800c1cc <__sflush_r+0x18>
 800c280:	680f      	ldr	r7, [r1, #0]
 800c282:	600e      	str	r6, [r1, #0]
 800c284:	1bba      	subs	r2, r7, r6
 800c286:	9201      	str	r2, [sp, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	079b      	lsls	r3, r3, #30
 800c28c:	d100      	bne.n	800c290 <__sflush_r+0xdc>
 800c28e:	694a      	ldr	r2, [r1, #20]
 800c290:	60a2      	str	r2, [r4, #8]
 800c292:	9b01      	ldr	r3, [sp, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	dd99      	ble.n	800c1cc <__sflush_r+0x18>
 800c298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c29a:	0032      	movs	r2, r6
 800c29c:	001f      	movs	r7, r3
 800c29e:	0028      	movs	r0, r5
 800c2a0:	9b01      	ldr	r3, [sp, #4]
 800c2a2:	6a21      	ldr	r1, [r4, #32]
 800c2a4:	47b8      	blx	r7
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	dc06      	bgt.n	800c2b8 <__sflush_r+0x104>
 800c2aa:	2340      	movs	r3, #64	; 0x40
 800c2ac:	2001      	movs	r0, #1
 800c2ae:	89a2      	ldrh	r2, [r4, #12]
 800c2b0:	4240      	negs	r0, r0
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	e78a      	b.n	800c1ce <__sflush_r+0x1a>
 800c2b8:	9b01      	ldr	r3, [sp, #4]
 800c2ba:	1836      	adds	r6, r6, r0
 800c2bc:	1a1b      	subs	r3, r3, r0
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	e7e7      	b.n	800c292 <__sflush_r+0xde>
 800c2c2:	46c0      	nop			; (mov r8, r8)
 800c2c4:	dfbffffe 	.word	0xdfbffffe

0800c2c8 <_fflush_r>:
 800c2c8:	690b      	ldr	r3, [r1, #16]
 800c2ca:	b570      	push	{r4, r5, r6, lr}
 800c2cc:	0005      	movs	r5, r0
 800c2ce:	000c      	movs	r4, r1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d102      	bne.n	800c2da <_fflush_r+0x12>
 800c2d4:	2500      	movs	r5, #0
 800c2d6:	0028      	movs	r0, r5
 800c2d8:	bd70      	pop	{r4, r5, r6, pc}
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	d004      	beq.n	800c2e8 <_fflush_r+0x20>
 800c2de:	6a03      	ldr	r3, [r0, #32]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <_fflush_r+0x20>
 800c2e4:	f7fd fa76 	bl	80097d4 <__sinit>
 800c2e8:	220c      	movs	r2, #12
 800c2ea:	5ea3      	ldrsh	r3, [r4, r2]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0f1      	beq.n	800c2d4 <_fflush_r+0xc>
 800c2f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2f2:	07d2      	lsls	r2, r2, #31
 800c2f4:	d404      	bmi.n	800c300 <_fflush_r+0x38>
 800c2f6:	059b      	lsls	r3, r3, #22
 800c2f8:	d402      	bmi.n	800c300 <_fflush_r+0x38>
 800c2fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2fc:	f7fd fcb7 	bl	8009c6e <__retarget_lock_acquire_recursive>
 800c300:	0028      	movs	r0, r5
 800c302:	0021      	movs	r1, r4
 800c304:	f7ff ff56 	bl	800c1b4 <__sflush_r>
 800c308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c30a:	0005      	movs	r5, r0
 800c30c:	07db      	lsls	r3, r3, #31
 800c30e:	d4e2      	bmi.n	800c2d6 <_fflush_r+0xe>
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	059b      	lsls	r3, r3, #22
 800c314:	d4df      	bmi.n	800c2d6 <_fflush_r+0xe>
 800c316:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c318:	f7fd fcaa 	bl	8009c70 <__retarget_lock_release_recursive>
 800c31c:	e7db      	b.n	800c2d6 <_fflush_r+0xe>
	...

0800c320 <__swhatbuf_r>:
 800c320:	b570      	push	{r4, r5, r6, lr}
 800c322:	000e      	movs	r6, r1
 800c324:	001d      	movs	r5, r3
 800c326:	230e      	movs	r3, #14
 800c328:	5ec9      	ldrsh	r1, [r1, r3]
 800c32a:	0014      	movs	r4, r2
 800c32c:	b096      	sub	sp, #88	; 0x58
 800c32e:	2900      	cmp	r1, #0
 800c330:	da0c      	bge.n	800c34c <__swhatbuf_r+0x2c>
 800c332:	89b2      	ldrh	r2, [r6, #12]
 800c334:	2380      	movs	r3, #128	; 0x80
 800c336:	0011      	movs	r1, r2
 800c338:	4019      	ands	r1, r3
 800c33a:	421a      	tst	r2, r3
 800c33c:	d013      	beq.n	800c366 <__swhatbuf_r+0x46>
 800c33e:	2100      	movs	r1, #0
 800c340:	3b40      	subs	r3, #64	; 0x40
 800c342:	2000      	movs	r0, #0
 800c344:	6029      	str	r1, [r5, #0]
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	b016      	add	sp, #88	; 0x58
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
 800c34c:	466a      	mov	r2, sp
 800c34e:	f000 f861 	bl	800c414 <_fstat_r>
 800c352:	2800      	cmp	r0, #0
 800c354:	dbed      	blt.n	800c332 <__swhatbuf_r+0x12>
 800c356:	23f0      	movs	r3, #240	; 0xf0
 800c358:	9901      	ldr	r1, [sp, #4]
 800c35a:	021b      	lsls	r3, r3, #8
 800c35c:	4019      	ands	r1, r3
 800c35e:	4b03      	ldr	r3, [pc, #12]	; (800c36c <__swhatbuf_r+0x4c>)
 800c360:	18c9      	adds	r1, r1, r3
 800c362:	424b      	negs	r3, r1
 800c364:	4159      	adcs	r1, r3
 800c366:	2380      	movs	r3, #128	; 0x80
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	e7ea      	b.n	800c342 <__swhatbuf_r+0x22>
 800c36c:	ffffe000 	.word	0xffffe000

0800c370 <__smakebuf_r>:
 800c370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c372:	2602      	movs	r6, #2
 800c374:	898b      	ldrh	r3, [r1, #12]
 800c376:	0005      	movs	r5, r0
 800c378:	000c      	movs	r4, r1
 800c37a:	4233      	tst	r3, r6
 800c37c:	d006      	beq.n	800c38c <__smakebuf_r+0x1c>
 800c37e:	0023      	movs	r3, r4
 800c380:	3347      	adds	r3, #71	; 0x47
 800c382:	6023      	str	r3, [r4, #0]
 800c384:	6123      	str	r3, [r4, #16]
 800c386:	2301      	movs	r3, #1
 800c388:	6163      	str	r3, [r4, #20]
 800c38a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c38c:	466a      	mov	r2, sp
 800c38e:	ab01      	add	r3, sp, #4
 800c390:	f7ff ffc6 	bl	800c320 <__swhatbuf_r>
 800c394:	9900      	ldr	r1, [sp, #0]
 800c396:	0007      	movs	r7, r0
 800c398:	0028      	movs	r0, r5
 800c39a:	f7fe fef9 	bl	800b190 <_malloc_r>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d108      	bne.n	800c3b4 <__smakebuf_r+0x44>
 800c3a2:	220c      	movs	r2, #12
 800c3a4:	5ea3      	ldrsh	r3, [r4, r2]
 800c3a6:	059a      	lsls	r2, r3, #22
 800c3a8:	d4ef      	bmi.n	800c38a <__smakebuf_r+0x1a>
 800c3aa:	2203      	movs	r2, #3
 800c3ac:	4393      	bics	r3, r2
 800c3ae:	431e      	orrs	r6, r3
 800c3b0:	81a6      	strh	r6, [r4, #12]
 800c3b2:	e7e4      	b.n	800c37e <__smakebuf_r+0xe>
 800c3b4:	2380      	movs	r3, #128	; 0x80
 800c3b6:	89a2      	ldrh	r2, [r4, #12]
 800c3b8:	6020      	str	r0, [r4, #0]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	81a3      	strh	r3, [r4, #12]
 800c3be:	9b00      	ldr	r3, [sp, #0]
 800c3c0:	6120      	str	r0, [r4, #16]
 800c3c2:	6163      	str	r3, [r4, #20]
 800c3c4:	9b01      	ldr	r3, [sp, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00c      	beq.n	800c3e4 <__smakebuf_r+0x74>
 800c3ca:	0028      	movs	r0, r5
 800c3cc:	230e      	movs	r3, #14
 800c3ce:	5ee1      	ldrsh	r1, [r4, r3]
 800c3d0:	f000 f832 	bl	800c438 <_isatty_r>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d005      	beq.n	800c3e4 <__smakebuf_r+0x74>
 800c3d8:	2303      	movs	r3, #3
 800c3da:	89a2      	ldrh	r2, [r4, #12]
 800c3dc:	439a      	bics	r2, r3
 800c3de:	3b02      	subs	r3, #2
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	433b      	orrs	r3, r7
 800c3e8:	81a3      	strh	r3, [r4, #12]
 800c3ea:	e7ce      	b.n	800c38a <__smakebuf_r+0x1a>

0800c3ec <memmove>:
 800c3ec:	b510      	push	{r4, lr}
 800c3ee:	4288      	cmp	r0, r1
 800c3f0:	d902      	bls.n	800c3f8 <memmove+0xc>
 800c3f2:	188b      	adds	r3, r1, r2
 800c3f4:	4298      	cmp	r0, r3
 800c3f6:	d303      	bcc.n	800c400 <memmove+0x14>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	e007      	b.n	800c40c <memmove+0x20>
 800c3fc:	5c8b      	ldrb	r3, [r1, r2]
 800c3fe:	5483      	strb	r3, [r0, r2]
 800c400:	3a01      	subs	r2, #1
 800c402:	d2fb      	bcs.n	800c3fc <memmove+0x10>
 800c404:	bd10      	pop	{r4, pc}
 800c406:	5ccc      	ldrb	r4, [r1, r3]
 800c408:	54c4      	strb	r4, [r0, r3]
 800c40a:	3301      	adds	r3, #1
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d1fa      	bne.n	800c406 <memmove+0x1a>
 800c410:	e7f8      	b.n	800c404 <memmove+0x18>
	...

0800c414 <_fstat_r>:
 800c414:	2300      	movs	r3, #0
 800c416:	b570      	push	{r4, r5, r6, lr}
 800c418:	4d06      	ldr	r5, [pc, #24]	; (800c434 <_fstat_r+0x20>)
 800c41a:	0004      	movs	r4, r0
 800c41c:	0008      	movs	r0, r1
 800c41e:	0011      	movs	r1, r2
 800c420:	602b      	str	r3, [r5, #0]
 800c422:	f7f7 fa8c 	bl	800393e <_fstat>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d103      	bne.n	800c432 <_fstat_r+0x1e>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d000      	beq.n	800c432 <_fstat_r+0x1e>
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	2000072c 	.word	0x2000072c

0800c438 <_isatty_r>:
 800c438:	2300      	movs	r3, #0
 800c43a:	b570      	push	{r4, r5, r6, lr}
 800c43c:	4d06      	ldr	r5, [pc, #24]	; (800c458 <_isatty_r+0x20>)
 800c43e:	0004      	movs	r4, r0
 800c440:	0008      	movs	r0, r1
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	f7f7 fa89 	bl	800395a <_isatty>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d103      	bne.n	800c454 <_isatty_r+0x1c>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d000      	beq.n	800c454 <_isatty_r+0x1c>
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	46c0      	nop			; (mov r8, r8)
 800c458:	2000072c 	.word	0x2000072c

0800c45c <_sbrk_r>:
 800c45c:	2300      	movs	r3, #0
 800c45e:	b570      	push	{r4, r5, r6, lr}
 800c460:	4d06      	ldr	r5, [pc, #24]	; (800c47c <_sbrk_r+0x20>)
 800c462:	0004      	movs	r4, r0
 800c464:	0008      	movs	r0, r1
 800c466:	602b      	str	r3, [r5, #0]
 800c468:	f7f7 fa8c 	bl	8003984 <_sbrk>
 800c46c:	1c43      	adds	r3, r0, #1
 800c46e:	d103      	bne.n	800c478 <_sbrk_r+0x1c>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d000      	beq.n	800c478 <_sbrk_r+0x1c>
 800c476:	6023      	str	r3, [r4, #0]
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	2000072c 	.word	0x2000072c

0800c480 <__assert_func>:
 800c480:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c482:	0014      	movs	r4, r2
 800c484:	001a      	movs	r2, r3
 800c486:	4b09      	ldr	r3, [pc, #36]	; (800c4ac <__assert_func+0x2c>)
 800c488:	0005      	movs	r5, r0
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	000e      	movs	r6, r1
 800c48e:	68d8      	ldr	r0, [r3, #12]
 800c490:	4b07      	ldr	r3, [pc, #28]	; (800c4b0 <__assert_func+0x30>)
 800c492:	2c00      	cmp	r4, #0
 800c494:	d101      	bne.n	800c49a <__assert_func+0x1a>
 800c496:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <__assert_func+0x34>)
 800c498:	001c      	movs	r4, r3
 800c49a:	4907      	ldr	r1, [pc, #28]	; (800c4b8 <__assert_func+0x38>)
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	9402      	str	r4, [sp, #8]
 800c4a0:	002b      	movs	r3, r5
 800c4a2:	9600      	str	r6, [sp, #0]
 800c4a4:	f000 f866 	bl	800c574 <fiprintf>
 800c4a8:	f000 f874 	bl	800c594 <abort>
 800c4ac:	200001d0 	.word	0x200001d0
 800c4b0:	0800cc1d 	.word	0x0800cc1d
 800c4b4:	0800cc58 	.word	0x0800cc58
 800c4b8:	0800cc2a 	.word	0x0800cc2a

0800c4bc <_calloc_r>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	0c0b      	lsrs	r3, r1, #16
 800c4c0:	0c15      	lsrs	r5, r2, #16
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d11e      	bne.n	800c504 <_calloc_r+0x48>
 800c4c6:	2d00      	cmp	r5, #0
 800c4c8:	d10c      	bne.n	800c4e4 <_calloc_r+0x28>
 800c4ca:	b289      	uxth	r1, r1
 800c4cc:	b294      	uxth	r4, r2
 800c4ce:	434c      	muls	r4, r1
 800c4d0:	0021      	movs	r1, r4
 800c4d2:	f7fe fe5d 	bl	800b190 <_malloc_r>
 800c4d6:	1e05      	subs	r5, r0, #0
 800c4d8:	d01b      	beq.n	800c512 <_calloc_r+0x56>
 800c4da:	0022      	movs	r2, r4
 800c4dc:	2100      	movs	r1, #0
 800c4de:	f7fd fb2f 	bl	8009b40 <memset>
 800c4e2:	e016      	b.n	800c512 <_calloc_r+0x56>
 800c4e4:	1c2b      	adds	r3, r5, #0
 800c4e6:	1c0c      	adds	r4, r1, #0
 800c4e8:	b289      	uxth	r1, r1
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	434a      	muls	r2, r1
 800c4ee:	b2a1      	uxth	r1, r4
 800c4f0:	b29c      	uxth	r4, r3
 800c4f2:	434c      	muls	r4, r1
 800c4f4:	0c13      	lsrs	r3, r2, #16
 800c4f6:	18e4      	adds	r4, r4, r3
 800c4f8:	0c23      	lsrs	r3, r4, #16
 800c4fa:	d107      	bne.n	800c50c <_calloc_r+0x50>
 800c4fc:	0424      	lsls	r4, r4, #16
 800c4fe:	b292      	uxth	r2, r2
 800c500:	4314      	orrs	r4, r2
 800c502:	e7e5      	b.n	800c4d0 <_calloc_r+0x14>
 800c504:	2d00      	cmp	r5, #0
 800c506:	d101      	bne.n	800c50c <_calloc_r+0x50>
 800c508:	1c14      	adds	r4, r2, #0
 800c50a:	e7ed      	b.n	800c4e8 <_calloc_r+0x2c>
 800c50c:	230c      	movs	r3, #12
 800c50e:	2500      	movs	r5, #0
 800c510:	6003      	str	r3, [r0, #0]
 800c512:	0028      	movs	r0, r5
 800c514:	bd70      	pop	{r4, r5, r6, pc}

0800c516 <_realloc_r>:
 800c516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c518:	0007      	movs	r7, r0
 800c51a:	000e      	movs	r6, r1
 800c51c:	0014      	movs	r4, r2
 800c51e:	2900      	cmp	r1, #0
 800c520:	d105      	bne.n	800c52e <_realloc_r+0x18>
 800c522:	0011      	movs	r1, r2
 800c524:	f7fe fe34 	bl	800b190 <_malloc_r>
 800c528:	0005      	movs	r5, r0
 800c52a:	0028      	movs	r0, r5
 800c52c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c52e:	2a00      	cmp	r2, #0
 800c530:	d103      	bne.n	800c53a <_realloc_r+0x24>
 800c532:	f7fe fa5b 	bl	800a9ec <_free_r>
 800c536:	0025      	movs	r5, r4
 800c538:	e7f7      	b.n	800c52a <_realloc_r+0x14>
 800c53a:	f000 f832 	bl	800c5a2 <_malloc_usable_size_r>
 800c53e:	9001      	str	r0, [sp, #4]
 800c540:	4284      	cmp	r4, r0
 800c542:	d803      	bhi.n	800c54c <_realloc_r+0x36>
 800c544:	0035      	movs	r5, r6
 800c546:	0843      	lsrs	r3, r0, #1
 800c548:	42a3      	cmp	r3, r4
 800c54a:	d3ee      	bcc.n	800c52a <_realloc_r+0x14>
 800c54c:	0021      	movs	r1, r4
 800c54e:	0038      	movs	r0, r7
 800c550:	f7fe fe1e 	bl	800b190 <_malloc_r>
 800c554:	1e05      	subs	r5, r0, #0
 800c556:	d0e8      	beq.n	800c52a <_realloc_r+0x14>
 800c558:	9b01      	ldr	r3, [sp, #4]
 800c55a:	0022      	movs	r2, r4
 800c55c:	429c      	cmp	r4, r3
 800c55e:	d900      	bls.n	800c562 <_realloc_r+0x4c>
 800c560:	001a      	movs	r2, r3
 800c562:	0031      	movs	r1, r6
 800c564:	0028      	movs	r0, r5
 800c566:	f7fd fb8f 	bl	8009c88 <memcpy>
 800c56a:	0031      	movs	r1, r6
 800c56c:	0038      	movs	r0, r7
 800c56e:	f7fe fa3d 	bl	800a9ec <_free_r>
 800c572:	e7da      	b.n	800c52a <_realloc_r+0x14>

0800c574 <fiprintf>:
 800c574:	b40e      	push	{r1, r2, r3}
 800c576:	b517      	push	{r0, r1, r2, r4, lr}
 800c578:	4c05      	ldr	r4, [pc, #20]	; (800c590 <fiprintf+0x1c>)
 800c57a:	ab05      	add	r3, sp, #20
 800c57c:	cb04      	ldmia	r3!, {r2}
 800c57e:	0001      	movs	r1, r0
 800c580:	6820      	ldr	r0, [r4, #0]
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	f7ff fcfa 	bl	800bf7c <_vfiprintf_r>
 800c588:	bc1e      	pop	{r1, r2, r3, r4}
 800c58a:	bc08      	pop	{r3}
 800c58c:	b003      	add	sp, #12
 800c58e:	4718      	bx	r3
 800c590:	200001d0 	.word	0x200001d0

0800c594 <abort>:
 800c594:	2006      	movs	r0, #6
 800c596:	b510      	push	{r4, lr}
 800c598:	f000 f836 	bl	800c608 <raise>
 800c59c:	2001      	movs	r0, #1
 800c59e:	f7f7 f97f 	bl	80038a0 <_exit>

0800c5a2 <_malloc_usable_size_r>:
 800c5a2:	1f0b      	subs	r3, r1, #4
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	1f18      	subs	r0, r3, #4
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	da01      	bge.n	800c5b0 <_malloc_usable_size_r+0xe>
 800c5ac:	580b      	ldr	r3, [r1, r0]
 800c5ae:	18c0      	adds	r0, r0, r3
 800c5b0:	4770      	bx	lr

0800c5b2 <_raise_r>:
 800c5b2:	b570      	push	{r4, r5, r6, lr}
 800c5b4:	0004      	movs	r4, r0
 800c5b6:	000d      	movs	r5, r1
 800c5b8:	291f      	cmp	r1, #31
 800c5ba:	d904      	bls.n	800c5c6 <_raise_r+0x14>
 800c5bc:	2316      	movs	r3, #22
 800c5be:	6003      	str	r3, [r0, #0]
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	4240      	negs	r0, r0
 800c5c4:	bd70      	pop	{r4, r5, r6, pc}
 800c5c6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d004      	beq.n	800c5d6 <_raise_r+0x24>
 800c5cc:	008a      	lsls	r2, r1, #2
 800c5ce:	189b      	adds	r3, r3, r2
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	2a00      	cmp	r2, #0
 800c5d4:	d108      	bne.n	800c5e8 <_raise_r+0x36>
 800c5d6:	0020      	movs	r0, r4
 800c5d8:	f000 f832 	bl	800c640 <_getpid_r>
 800c5dc:	002a      	movs	r2, r5
 800c5de:	0001      	movs	r1, r0
 800c5e0:	0020      	movs	r0, r4
 800c5e2:	f000 f81b 	bl	800c61c <_kill_r>
 800c5e6:	e7ed      	b.n	800c5c4 <_raise_r+0x12>
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	2a01      	cmp	r2, #1
 800c5ec:	d0ea      	beq.n	800c5c4 <_raise_r+0x12>
 800c5ee:	1c51      	adds	r1, r2, #1
 800c5f0:	d103      	bne.n	800c5fa <_raise_r+0x48>
 800c5f2:	2316      	movs	r3, #22
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	e7e4      	b.n	800c5c4 <_raise_r+0x12>
 800c5fa:	2400      	movs	r4, #0
 800c5fc:	0028      	movs	r0, r5
 800c5fe:	601c      	str	r4, [r3, #0]
 800c600:	4790      	blx	r2
 800c602:	0020      	movs	r0, r4
 800c604:	e7de      	b.n	800c5c4 <_raise_r+0x12>
	...

0800c608 <raise>:
 800c608:	b510      	push	{r4, lr}
 800c60a:	4b03      	ldr	r3, [pc, #12]	; (800c618 <raise+0x10>)
 800c60c:	0001      	movs	r1, r0
 800c60e:	6818      	ldr	r0, [r3, #0]
 800c610:	f7ff ffcf 	bl	800c5b2 <_raise_r>
 800c614:	bd10      	pop	{r4, pc}
 800c616:	46c0      	nop			; (mov r8, r8)
 800c618:	200001d0 	.word	0x200001d0

0800c61c <_kill_r>:
 800c61c:	2300      	movs	r3, #0
 800c61e:	b570      	push	{r4, r5, r6, lr}
 800c620:	4d06      	ldr	r5, [pc, #24]	; (800c63c <_kill_r+0x20>)
 800c622:	0004      	movs	r4, r0
 800c624:	0008      	movs	r0, r1
 800c626:	0011      	movs	r1, r2
 800c628:	602b      	str	r3, [r5, #0]
 800c62a:	f7f7 f929 	bl	8003880 <_kill>
 800c62e:	1c43      	adds	r3, r0, #1
 800c630:	d103      	bne.n	800c63a <_kill_r+0x1e>
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d000      	beq.n	800c63a <_kill_r+0x1e>
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	2000072c 	.word	0x2000072c

0800c640 <_getpid_r>:
 800c640:	b510      	push	{r4, lr}
 800c642:	f7f7 f917 	bl	8003874 <_getpid>
 800c646:	bd10      	pop	{r4, pc}

0800c648 <_init>:
 800c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64e:	bc08      	pop	{r3}
 800c650:	469e      	mov	lr, r3
 800c652:	4770      	bx	lr

0800c654 <_fini>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	46c0      	nop			; (mov r8, r8)
 800c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65a:	bc08      	pop	{r3}
 800c65c:	469e      	mov	lr, r3
 800c65e:	4770      	bx	lr
